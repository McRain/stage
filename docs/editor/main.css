/*!*************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/views/viewpanel.vue?vue&type=style&index=0&id=290aee55&lang=scss ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************/
.panel-container {
  display: block;
}
.panel-container .panel {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  max-height: 100%;
  display: grid;
  grid-template-rows: min-content 1fr min-content;
  gap: 3px;
  padding: 1px;
}
.panel-container .panel .header {
  pointer-events: all;
  user-select: none;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 10px;
  padding: 5px;
}
.panel-container .panel .header h3 {
  flex: 1;
  text-align: center;
}
.panel-container .panel .content {
  padding: 10px;
  pointer-events: all;
  display: flex;
  flex-direction: column;
  overflow-y: auto;
}
.panel-container .panel .footer {
  pointer-events: all;
  user-select: none;
  cursor: pointer;
  display: flex;
  justify-content: center;
  gap: 10px;
  align-items: center;
  padding: 3px;
  position: relative;
}
/*!*******************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/views/sliders.vue?vue&type=style&index=0&id=282f2988&scoped=true&lang=css ***!
  \*******************************************************************************************************************************************************************************************************************************************************/

.slide-scroller {
&[data-v-282f2988] {
    overflow-x: hidden;
    overflow-y: hidden;
    white-space: nowrap;
    -webkit-overflow-scrolling: touch;
    pointer-events: none;
}
.slide-container {
&[data-v-282f2988] {
        display: inline-block;
        transition: transform 0.3s ease;
        pointer-events: all;
}
.slide-item {
&[data-v-282f2988] {
            /*width: 70px;*/
            height: 70px;
            display: inline-block;
            margin: 0;
            cursor: pointer;
            text-align: center;
            position: relative;
}
.title[data-v-282f2988] {
                display: flex;
                justify-content: center;
                align-items: center;
                height: 16px;
}
&.selected {
img[data-v-282f2988] {
                    border-color: #50a5ffa9;
}
}
img[data-v-282f2988] {
                width: auto;
                /*height: 48px;*/
                height: 100%;
                border: 2px solid transparent;
                transition: border-color 0.2s ease;
}
.overflow[data-v-282f2988] {
                position: absolute;
                top: 0;
                bottom: 0;
                left: 0;
                right: 0;
                display: flex;
                justify-content: center;
                align-items: center;
                /*margin-bottom: 20px;*/
}
}
}
}

/*!********************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/views/hierarhy.vue?vue&type=style&index=0&id=66b44d8a&scoped=true&lang=css ***!
  \********************************************************************************************************************************************************************************************************************************************************/

.panel-container {
&[data-v-66b44d8a] {
    padding: 0px;
}
.panel {
&[data-v-66b44d8a] {
        position: absolute;
        top: 1px;
        left: 1px;
        right: 1px;
        max-height: 100%;
        display: grid;
        grid-template-rows: 32px 1fr;
        background-color: rgba(43, 43, 43, 0.75);
        border: 1px solid rgb(0, 0, 0);
        border-radius: 10px;
        gap: 5px;
}
.header[data-v-66b44d8a] {
            pointer-events: all;
            height: 32px;
            user-select: none;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
}
.content {
&[data-v-66b44d8a] {
            flex: 1;
            pointer-events: all;
            display: flex;
            flex-direction: column;    
            overflow: auto;
            margin: 5px;
}
.elements[data-v-66b44d8a]{
                /*min-height: 1280px;*/
                overflow-y: auto;
}
}
}
}

/*!*****************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/inspector/inspectorpanel.vue?vue&type=style&index=0&id=478a85d6&scoped=true&lang=css ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************/

.fade-enter-active[data-v-478a85d6],
.fade-leave-active[data-v-478a85d6] {
    transition: opacity 0.3s ease;
}
.fade-enter-from[data-v-478a85d6],
.fade-leave-to[data-v-478a85d6] {
    opacity: 0;
}
.fade-enter-to[data-v-478a85d6],
.fade-leave-from[data-v-478a85d6] {
    opacity: 1;
}



/* Анимация сдвига */
.slide-enter-active[data-v-478a85d6],
.slide-leave-active[data-v-478a85d6] {
    transition: all 0.3s ease;
    max-height: 1000px;
    /* Достаточно большое значение */
}
.slide-enter-from[data-v-478a85d6],
.slide-leave-to[data-v-478a85d6] {
    max-height: 0;
    opacity: 0;
    transform: translateY(-10px);
}
.slide-enter-to[data-v-478a85d6],
.slide-leave-from[data-v-478a85d6] {
    max-height: 1000px;
    opacity: 1;
    transform: translateY(0);
}

/*!***********************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/inspector/assets/assetview.vue?vue&type=style&index=0&id=b019109e&lang=scss&scoped=true ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************************************/
@charset "UTF-8";
.assetblock[data-v-b019109e] {
  top: 0;
  width: 100%;
  display: flex;
  flex-direction: column;
}
.assetblock .title[data-v-b019109e] {
  display: grid;
  grid-template-columns: auto 1fr;
  /* label занимает место по содержимому, short - остальное */
  width: 100%;
}
.assetblock .title .short[data-v-b019109e] {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  display: flex;
}
.assetblock .title .short .short-text[data-v-b019109e] {
  overflow: hidden;
  text-overflow: ellipsis;
}
.assetblock .short-content[data-v-b019109e] {
  width: 100%;
  overflow: hidden;
  /* Обрезает контент */
  text-overflow: ellipsis;
  /* Добавляет многоточие */
  white-space: nowrap;
  /* Предотвращает перенос на новую строку */
}
.assetblock .assetcontent[data-v-b019109e] {
  display: grid;
  width: 100%;
  grid-template-rows: repeat(auto-fit);
}
.assetblock .assetcontent .assetrow[data-v-b019109e] {
  display: flex;
  justify-content: space-between;
}
.assetblock .assetcontent .assetrow .cell[data-v-b019109e] {
  width: 100%;
  display: flex;
  /* Добавляем это */
  overflow: hidden;
}
/*!*************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/inspector/scenetools.vue?vue&type=style&index=0&id=5ea29b77&scoped=true&lang=css ***!
  \*************************************************************************************************************************************************************************************************************************************************************************/

.camera-selector[data-v-5ea29b77] {
    margin: 10px 0;
}
label[data-v-5ea29b77] {
    margin-right: 10px;
    font-weight: bold;
}
select[data-v-5ea29b77] {
    padding: 5px;
    border-radius: 4px;
    border: 1px solid #ccc;
    min-width: 200px;
}

/*!********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/inspector/slide.vue?vue&type=style&index=0&id=d163138e&scoped=true&lang=css ***!
  \********************************************************************************************************************************************************************************************************************************************************************/

.slide-tools[data-v-d163138e] {}
.camera-selector[data-v-d163138e] {
    margin: 10px 0;
}
label[data-v-d163138e] {
    margin-right: 10px;
    font-weight: bold;
}
select[data-v-d163138e] {
    padding: 5px;
    border-radius: 4px;
    border: 1px solid #ccc;
    min-width: 200px;
}

/*!********************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/inspector/scene.vue?vue&type=style&index=0&id=2ddb6b94&lang=css ***!
  \********************************************************************************************************************************************************************************************************************************************************/

.scenetools {
    width: 100%;
    display: flex;
    flex-direction: column;
.sceneassets {
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 5px;
}
}

/*!*********************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/views/inspector.vue?vue&type=style&index=0&id=68f77ecd&lang=css ***!
  \*********************************************************************************************************************************************************************************************************************************************/

.inspector {
    user-select: none;
    pointer-events: all;
    position: absolute;
    top: 48px;
    left: 4px;
    bottom: 10px;
    width: 280px;
    padding: 1px;
}

/*!*************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/TreeNode.vue?vue&type=style&index=0&id=18eb56f0&scoped=true&lang=css ***!
  \*************************************************************************************************************************************************************************************************************************************************************/

.tree-node.drag-over[data-v-18eb56f0] {
    background-color: rgba(0, 120, 212, 0.1);
    outline: 1px dashed #0078d4;
}
.tree-node[data-v-18eb56f0] {
    list-style: none;
    padding-top: 2px;
}
.tree-node-content {
&[data-v-18eb56f0] {
    display: flex;
    flex-direction: row;
    gap: 5px;
    }
.collapser[data-v-18eb56f0] {
        width: 15px;
        cursor: pointer;
}
.selector[data-v-18eb56f0] {
        width: 15px;
}
.labeler[data-v-18eb56f0] {
        display: block;
        flex: 1;
        flex-wrap: nowrap;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        height: 20px;
}
.label[data-v-18eb56f0] {
        max-width: 140px;
}
.appender[data-v-18eb56f0] {
        display: block;
}
}
.tree-node ul[data-v-18eb56f0] {
    margin-left: 5px;
    padding-left: 5px;
}

/*!*************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/TreeView.vue?vue&type=style&index=0&id=1d41da13&scoped=true&lang=css ***!
  \*************************************************************************************************************************************************************************************************************************************************************/

.treecontainer {
&[data-v-1d41da13] {
    display: flex;
    align-items: start;
    width: 100%;
    user-select: none;
    flex: 1;
    overflow-y: auto;
    overflow-x: hidden;

    /* или фиксированную высоту, например 200px */
    min-height: 0;
    /* важно для правильной работы overflow в grid/flex */
    max-height: 100%;
}
.roottree[data-v-1d41da13] {
        width: 100%;
        /*max-width: 250px;*/
        display: flex;
        flex-direction: column;
        margin-block-start: 0px;
        margin-block-end: 0px;
        padding-inline-start: 5px;
        height: 100%;
}
}

/*!*******************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/treeassets.vue?vue&type=style&index=0&id=71eb639e&lang=scss&scoped=true ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************/
.focusedtree[data-v-71eb639e] {
  color: var(--text-focused);
  background-color: var(--bg-focused);
}
.hierarhy-view[data-v-71eb639e] {
  overflow-y: auto;
  overflow-x: hidden;
  width: 100%;
}
.hierarhy-view .title[data-v-71eb639e] {
  display: flex;
  gap: 5px;
}
.treeicon[data-v-71eb639e] {
  display: flex;
  gap: 3px;
  flex-wrap: nowrap;
  cursor: pointer;
}
.label[data-v-71eb639e] {
  cursor: pointer;
}
/*!**********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/modals/elementadd.vue?vue&type=style&index=0&id=de4508e4&scoped=true&lang=css ***!
  \**********************************************************************************************************************************************************************************************************************************************************************/

/* Общие стили */
.container[data-v-de4508e4] {
    padding: 20px;
    margin: auto;
    min-width: 256px;
}
.block[data-v-de4508e4] {
    margin-bottom: 20px;
    border: 1px solid #ccc;
    border-radius: 4px;
    position: relative;
    overflow: hidden;
}
.header {
&[data-v-de4508e4] {
    display: flex;
    justify-content: space-between;
    border-bottom: 1px solid #ccc;
    padding: 5px;
    }
.easy[data-v-de4508e4] {
        margin: 5px;
        cursor: pointer;
}
}
.content[data-v-de4508e4] {
    margin-top: 10px;
    padding: 10px;
}
.input-item[data-v-de4508e4] {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
}
.input-item input[data-v-de4508e4] {
    flex-grow: 1;
    margin-right: 10px;
}
.sub-block[data-v-de4508e4] {
    border-top: 1px solid #ccc;
    position: relative;
}
.sub-header {
&[data-v-de4508e4] {
    display: flex;
    justify-content: space-between;
    padding: 5px;
    }
.moduleBlock[data-v-de4508e4] {
        cursor: pointer;
}
}
.sub-header button[data-v-de4508e4] {
    background: transparent;
    border: none;
    color: #007bff;
    cursor: pointer;
}
.sub-header button[data-v-de4508e4]:hover {
    text-decoration: underline;
}
.title[data-v-de4508e4] {
    display: flex;
}
.sub-content input[data-v-de4508e4] {
    display: block;
    margin-bottom: 5px;
    width: 100%;
}
.subtitle[data-v-de4508e4] {
    display: flex;
    justify-content: start;
}
.icondiv[data-v-de4508e4] {
    cursor: pointer;
    width: 18px;
    display: flex;
    justify-content: center;
    align-items: center;
}
.buttons[data-v-de4508e4] {
    text-align: center;
    margin-top: 10px;

    /*button {
        padding: 10px 15px;
        border: none;
        background-color: #007bff;
        color: #fff;
        cursor: pointer;
        border-radius: 4px;
    }*/
}

/* Адаптивные стили */
@media screen and (max-width: 480px) {
.container[data-v-de4508e4] {
        padding: 10px;
}
.header {
&[data-v-de4508e4] {
        flex-direction: column;
        align-items: flex-start;
        }
.easy[data-v-de4508e4] {
            margin-bottom: 5px;
}
.icondiv[data-v-de4508e4] {
            margin-bottom: 5px;
}
}
.sub-header {
&[data-v-de4508e4] {
        flex-direction: column;
        align-items: flex-start;
        }
button[data-v-de4508e4] {
            margin-top: 5px;
}
}
.sub-content input[data-v-de4508e4] {
        font-size: 14px;
}
}
@media screen and (min-width: 481px) and (max-width: 759px) {
.container[data-v-de4508e4] {
        max-width: 90%;
}
.block[data-v-de4508e4] {
        margin-bottom: 15px;
}
.header[data-v-de4508e4] {
        padding: 10px;
}
.content[data-v-de4508e4] {
        padding: 5px;
}
.sub-header[data-v-de4508e4] {
        padding: 10px 5px;
}
.buttons button[data-v-de4508e4] {
        padding: 8px 12px;
}
}
@media screen and (min-width: 760px) {
.container[data-v-de4508e4] {
        max-width: 600px;
}
.block[data-v-de4508e4] {
        margin-bottom: 20px;
}
.header[data-v-de4508e4] {
        padding: 10px;
}
.content[data-v-de4508e4] {
        padding: 10px;
}
.sub-header[data-v-de4508e4] {
        padding: 10px;
}
.buttons button[data-v-de4508e4] {
        padding: 10px 15px;
}
}

/*!*********************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/treeelements.vue?vue&type=style&index=0&id=4e6697b6&lang=scss&scoped=true ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************/
.hierarhy-view[data-v-4e6697b6] {
  overflow-y: auto;
  overflow-x: hidden;
  display: flex;
  flex-direction: column;
}
.focusedtree[data-v-4e6697b6] {
  color: var(--text-focused);
  background-color: var(--bg-focused);
}
.treeicon[data-v-4e6697b6] {
  display: flex;
  gap: 3px;
}
.treeicon .svgicon[data-v-4e6697b6] {
  cursor: pointer;
}
.label[data-v-4e6697b6] {
  cursor: pointer;
}
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/modelstree.vue?vue&type=style&index=0&id=431b2318&lang=scss&scoped=true ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************/
.hierarhy-view[data-v-431b2318] {
  overflow-y: auto;
  overflow-x: hidden;
  display: flex;
  flex-direction: column;
  height: 100%;
}
.focusedtree[data-v-431b2318] {
  color: var(--text-focused);
  background-color: var(--bg-focused);
}
.treeicon[data-v-431b2318] {
  display: flex;
  gap: 3px;
}
.treeicon .svgicon[data-v-431b2318] {
  cursor: pointer;
}
.label[data-v-431b2318] {
  cursor: pointer;
  max-width: 140px;
}
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/treestates.vue?vue&type=style&index=0&id=3a885130&lang=scss&scoped=true ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************/
.hierarhy-view[data-v-3a885130] {
  overflow-y: auto;
  overflow-x: hidden;
}
.focusedtree[data-v-3a885130] {
  color: var(--text-focused);
  background-color: var(--bg-focused);
}
.label[data-v-3a885130] {
  cursor: pointer;
}
/*!***********************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/views/transformer.vue?vue&type=style&index=0&id=410c786f&lang=css ***!
  \***********************************************************************************************************************************************************************************************************************************************/

.transformer{
    display: flex;
    position: absolute;
    justify-content: center;
    top: 2px;
    left: 256px;
    right: 256px;
.icons{
        display: flex;
        gap: 15px;
        pointer-events: all;
        border-radius: 10px;
        background-color: rgba(0,0,0,0.5);
        padding: 5px;
.svgicon{
            cursor: pointer;
}
}
}

/*!************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/topmenu.vue?vue&type=style&index=0&id=4fe07454&scoped=true&lang=css ***!
  \************************************************************************************************************************************************************************************************************************************************************/

.horizontal-menu[data-v-4fe07454] {
    pointer-events: all;
    background: #2c3e50;
    display: flex;
    justify-content: flex-start;
    padding: 0;
    margin: 0;
    list-style: none;
    position: relative;
    width: 100%;
    border-radius: 4px;
}

/* Основные пункты меню */
.horizontal-menu>li[data-v-4fe07454] {
    position: relative;
}
.horizontal-menu>li>a[data-v-4fe07454] {
    display: flex;
    align-items: center;
    color: white;
    text-decoration: none;
    padding: 10px 5px;
    transition: all 0.3s ease;
}
.horizontal-menu>li>a[data-v-4fe07454]:hover {
    background: #34495e;
}

/* Иконки и текст */
.menu-icon[data-v-4fe07454] {
    margin-right: 8px;
    font-size: 16px;
    width: 20px;
    text-align: center;
}
.menu-text[data-v-4fe07454] {
    white-space: nowrap;
    padding-left: 5px;
}

/* Стрелка для подменю */
.menu-arrow[data-v-4fe07454] {
    margin-left: 1px;
    font-size: 12px;
    transition: transform 0.3s;
}

/* Выпадающие подменю */
.submenu[data-v-4fe07454] {
    position: absolute;
    top: 100%;
    left: 0;
    padding: 0;
    background: #34495e;
    list-style: none;
    display: none;
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
    z-index: 100;
    border-radius: 0 0 4px 4px;
}
.submenu li a[data-v-4fe07454] {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 8px 8px;
    color: white;
    text-decoration: none;
    transition: all 0.2s;
}
.submenu li a[data-v-4fe07454]:hover {
    background: #3d566e;
    /*padding-left: 15px;*/
}

/* Показываем подменю при наведении */
.horizontal-menu>li:hover>.submenu[data-v-4fe07454] {
    display: block;
}
.horizontal-menu>li:hover>a .menu-arrow[data-v-4fe07454] {
    transform: rotate(180deg);
}

/* Подменю второго уровня */
.submenu .submenu[data-v-4fe07454] {
    left: 100%;
    top: 0;
    border-radius: 0 4px 4px 4px;
}
.submenu li[data-v-4fe07454] {
    position: relative;
}
.submenu li:hover>.submenu[data-v-4fe07454] {
    display: block;
}

/*!******************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/menu/MenuItem.vue?vue&type=style&index=0&id=7ebce9fc&scoped=true&lang=css ***!
  \******************************************************************************************************************************************************************************************************************************************************************/

  
/* Основные пункты меню */
.horizontal-menu>li[data-v-7ebce9fc] {
    position: relative;
}
.horizontal-menu>li>.item[data-v-7ebce9fc] {
    display: flex;
    align-items: center;
    text-decoration: none;
    padding: 10px 5px;
    transition: all 0.3s ease;
    cursor: pointer;
}
.horizontal-menu>li>.item[data-v-7ebce9fc]:hover {
    background: #34495e;
}

/* Иконки и текст */
.menu-icon[data-v-7ebce9fc] {
    margin-right: 8px;
    font-size: 16px;
    width: 20px;
    text-align: center;
}
.menu-text[data-v-7ebce9fc] {
    white-space: nowrap;
    padding-left: 5px;
    padding-right: 5px;
}

/* Стрелка для подменю */
.menu-arrow[data-v-7ebce9fc] {
    margin-left: 1px;
    font-size: 12px;
    transition: transform 0.3s;
}

/* Выпадающие подменю */
.submenu[data-v-7ebce9fc] {
    position: absolute;
    top: 100%;
    left: 0;
    padding: 0;
    background: #34495e;
    list-style: none;
    display: none;
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
    z-index: 10;
    border-radius: 0 0 4px 4px;
}
.submenu li .item[data-v-7ebce9fc] {
    display: flex;
    align-items: center;
    justify-content: start;
    padding: 8px 8px;
    text-decoration: none;
    transition: all 0.2s;
    cursor: pointer;
}
.submenu li .item[data-v-7ebce9fc]:hover {
    background: #3d566e;
    /*padding-left: 15px;*/
}

/* Показываем подменю при наведении */
.horizontal-menu>li:hover>.submenu[data-v-7ebce9fc] {
    display: block;
}
.horizontal-menu>li:hover>.item .menu-arrow[data-v-7ebce9fc] {
    transform: rotate(180deg);
}

/* Подменю второго уровня */
.submenu .submenu[data-v-7ebce9fc] {
    left: 100%;
    top: 0;
    border-radius: 0 4px 4px 4px;
}
.submenu li[data-v-7ebce9fc] {
    position: relative;
}
.submenu li:hover>.submenu[data-v-7ebce9fc] {
    display: block;
}
  
/*!************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/menu/horizontalmenu.vue?vue&type=style&index=0&id=212b825a&scoped=true&lang=css ***!
  \************************************************************************************************************************************************************************************************************************************************************************/

.horizontal-menu[data-v-212b825a] {
  pointer-events: all;
  display: flex;
  justify-content: flex-start;
  padding-left: 10px;
  margin: 0;
  list-style: none;
  position: relative;
  border-radius: 4px;
}

/*!**************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/userpanel.vue?vue&type=style&index=0&id=49dd58b9&scoped=true&lang=css ***!
  \**************************************************************************************************************************************************************************************************************************************************************/

.dropdown[data-v-49dd58b9] {
    pointer-events: all;
    position: relative;
    display: inline-block;
    font-size: 1.2em;
}
.dropdown-trigger[data-v-49dd58b9] {
    padding: 10px 16px;
    border-radius: 4px;
    cursor: pointer;
    user-select: none;
}
.dropdown-menu[data-v-49dd58b9] {
    position: absolute;
    top: 50%;
    left: -30px;
    min-width: 160px;
    border-radius: 4px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    margin-top: 15px;
    z-index: 1000;
    background-color: var(--panelbgcolor);
}
.dropdown-item[data-v-49dd58b9] {
    display: block;
    padding: 8px 16px;
    cursor: pointer;
    text-decoration: none;
}
.dropdown-item[data-v-49dd58b9]:hover {}
.fade-enter-active[data-v-49dd58b9],
.fade-leave-active[data-v-49dd58b9] {
    transition: all 0.3s ease;
}
.fade-enter-from[data-v-49dd58b9],
.fade-leave-to[data-v-49dd58b9] {
    /*opacity: 0;*/
    transform: translateY(-10px);
}

/*!*****************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./src/styles/work_view.scss ***!
  \*****************************************************************************/
.editor-container{
	position: relative;
	width: 100%;
	height: 100%;
	overflow: hidden;
	.tools{
		position: absolute;
		top:0;
		width: 100%;
	}
	.workspace{
		width: 100%;
		height: 100%;
	}
}
/*!**************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/views/ui.vue?vue&type=style&index=0&id=01e52c2e&scoped=true&lang=css ***!
  \**************************************************************************************************************************************************************************************************************************************************/

.element[data-v-01e52c2e] {
    height: 100%;
    /* или фиксированную высоту, например 200px */
    min-height: 0;
    /* важно для правильной работы overflow в grid/flex */
    max-height: 100%;

    padding: 1px;
    overflow-y: auto;
    display: flexbox;
    flex-direction: column;
}
.elementContent[data-v-01e52c2e] {
    height: 100%;
    /* или фиксированную высоту, например 200px */
    min-height: 0;
    /* важно для правильной работы overflow в grid/flex */
    max-height: 100%;
    position: relative;
}
.container {
&[data-v-01e52c2e]{
    position: absolute;
    height: 100vh;
    width: 100%;
    left: 0;
    top: 0;
    pointer-events: none;
    }
.topline {
&[data-v-01e52c2e]{
        display: grid;
        background: #2c3e50;
        grid-template-columns: 30% 40% 30%;
        }
.title[data-v-01e52c2e] {
            display: flex;
            justify-content: center;
            align-items: center;
}
.info {
&[data-v-01e52c2e]{
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            align-items: center;
            padding: 0 10px;
            pointer-events: all;
            }
.icon[data-v-01e52c2e] {
                cursor: pointer;
                pointer-events: all;
}
}
}
.hierarhy[data-v-01e52c2e] {
        position: absolute;
        bottom: 0;
        right: 0;
        top: 20%;
        width: 256px;
        height: 100%;
}
.project[data-v-01e52c2e] {
        position: absolute;
        top: 48px;
        right: 3px;
        bottom: 10px;
        width: 256px;
        pointer-events: all;
        /*display: grid;
        grid-template-rows: repeat(auto-fill, 1fr);*/
}
.sliders[data-v-01e52c2e] {
        position: absolute;
        bottom: 0px;
        left: 266px;
        right: 266px;
        /*height: 72px;*/
}
}

/* Боковая панель */
.sidebar[data-v-01e52c2e] {
    width: 68px;
    background-color: rgba(29, 32, 62, 0.5);
    padding-left: 11px;
    overflow: hidden;
    pointer-events: all;
}
.sidebar .menu[data-v-01e52c2e] {
    position: absolute;
    top: 0;
    left: 0;
    list-style: none;
    padding-top: 120px;
    padding-left: 20px;
    height: 884px;
    width: 67px;
    /*background-image: url('/assets/bar.png');
    background-repeat: no-repeat;*/
    display: flex;
    flex-direction: column;
    gap: 50px;
}
.sidebar .menublur[data-v-01e52c2e] {
    position: absolute;
    top: 0;
    left: 0;
    padding-top: 120px;
    padding-left: 20px;
    height: 884px;
    width: 67px;
    filter: blur(5px);
}
.sidebar .menu .menuelement[data-v-01e52c2e] {
    width: 40px;
    height: 40px;
    background-image: url(/editor/assets/5bf54e94011af41adb2c.png);
}
.sidebar .menu .menuelements[data-v-01e52c2e] {
    width: 60px;
    height: 60px;
    background-image: url(/editor/assets/5bf54e94011af41adb2c.png);
    background-size: cover;
    background-repeat: no-repeat;
}
.sidebar .menu .menuelement[data-v-01e52c2e]:hover {
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.5);
    border-radius: 50%;
}
.slides[data-v-01e52c2e] {
    position: absolute;
    bottom: 10px;
    left: 150px;
    right: 150px;
    pointer-events: all;
}
.main-content {
&[data-v-01e52c2e]{
    position: relative;
    }
.camlist[data-v-01e52c2e] {
        position: absolute;
        top: 0;
        right: 0;
        pointer-events: all;
}
}



/* Контейнер для карточек */
.card-container[data-v-01e52c2e] {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    /* Адаптивные столбцы */
    gap: 20px;
}

/* Карточки */
.card[data-v-01e52c2e] {
    background-color: #222;
    border-radius: 10px;
    padding: 20px;
}
.card-large[data-v-01e52c2e] {
    grid-column: span 2;
    /* Занимает 2 столбца */
}

/* Правая панель */
.right-sidebar {
&[data-v-01e52c2e]{
    width: 200px;
    background-color: #2C2F48;
    overflow-y: auto;
    }
.right-slider {
&[data-v-01e52c2e]{
        pointer-events: all;
        display: flex;
        flex-direction: column;
        gap: 5px;
        width: 100%;
        padding: 5px;
        }
.side-card[data-v-01e52c2e] {
            background-color: rgba(255, 255, 255, 0.3);
            min-height: 10px;
            border-radius: 5%;
            border: 1px solid #0e0f16;
            filter: drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.25));
}
.line[data-v-01e52c2e] {
            border: 1px solid #202235;
}
}
}

/*!*********************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/App.vue?vue&type=style&index=0&id=7ba5bd90&lang=css ***!
  \*********************************************************************************************************************************************************************************************************************************/

.splash {
  z-index: 999;
  background-color: black;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  position: absolute;
}
.rotating-div {
  width: 100px;
  height: 100px;
  animation: rotation 1s linear infinite;
  display: flex;
  align-items: center;
  justify-content: center;
}
@keyframes rotation {
from {
    transform: rotate(0deg);
}
to {
    transform: rotate(360deg);
}
}
.canvas-container {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
  position: absolute;
#playcanvas {
    position: absolute;
    top: 50px;
    right: 260px;
    width: 512px;
    aspect-ratio: 16/9;
    border: 2px solid black;
    background-color: black;
    pointer-events: all;
}
#playui {
    position: absolute;
    top: 50px;
    right: 260px;
    transform-origin: top right;
    width: 512px;
    aspect-ratio: 16/9;
    /*border: 2px solid black;*/
    /*background-color: rgba(0, 0, 0, 0.219);*/
    pointer-events: none;
}
#editorcanvas {
    width: 100%;
    height: 100%;
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 0;
    background-color: rgb(114, 114, 114);
    /*margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    */
}
#canvasui {
    position: absolute;
    top: 50px;
    right: 260px;
    width: 512px;
    aspect-ratio: 16/9;
    pointer-events: none;
}
.tablecanvas {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 100%;
}
}

/*!*************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/icon.vue?vue&type=style&index=0&id=b37ebfee&lang=scss&scoped=true ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************/
svg[data-v-b37ebfee] {
  fill: var(--symbolColor);
}
svg use title[data-v-b37ebfee] {
  background-color: black;
  color: #fff;
  text-align: center;
  border-radius: 6px;
  padding: 5px 0;
}
/*!**********************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/modal.vue?vue&type=style&index=0&id=0eaeaf66&scoped=true&lang=css ***!
  \**********************************************************************************************************************************************************************************************************************************************************/

.modal-overlay[data-v-0eaeaf66] {
  user-select: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--popupshadowcolor);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 50;
}
.modal[data-v-0eaeaf66] {
  background: var(--panelbgcolor);
  padding: 10px;
  border-radius: 8px;
@media screen and (max-width:480px) {
    max-width: 256px;
}
@media screen and (max-width:481px) {
    max-width: 400px;
}
@media screen and (min-width:760px) {
    max-width: 768px;
}
@media screen and (min-width:1280px) {
    max-width: 1280px;
}
}
.modal-header {
.header[data-v-0eaeaf66] {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
}
}
.close-btn[data-v-0eaeaf66] {
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
}
.modal-content[data-v-0eaeaf66] {
  padding: 5px;
}
.modal-footer {
&[data-v-0eaeaf66] {
  display: flex;
  justify-content: flex-end;
  margin-top: 10px;
  flex-direction: row;
  }
.footer[data-v-0eaeaf66] {
    display: flex;
    justify-content: flex-end;
    flex-direction: row;
    gap: 5px;
    /*button {
      pointer-events: all;
      padding: 10px 15px;
      border: none;
      background-color: #007bff;
      color: #fff;
      cursor: pointer;
      border-radius: 4px;

      &.primary {
        background-color: #009130;
      }

      &.secondary {
        background-color: #008607;
      }
    }*/
}
}

/*!*********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/popups/popuplist.vue?vue&type=style&index=0&id=644b6b92&scoped=true&lang=css ***!
  \*********************************************************************************************************************************************************************************************************************************************************************/

.popup {
&[data-v-644b6b92] {
    position: absolute;
    background-color: var(--popupbgcolor);
    border: 1px solid var(--bordercolor);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    padding: 10px;
    z-index: 100;
}
.element[data-v-644b6b92]{
        cursor: pointer;
}
}
button[data-v-644b6b92] {
    cursor: pointer;
}
  
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/simplebutton.vue?vue&type=style&index=0&id=50bdc974&lang=scss&scoped=true ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************/
.simple[data-v-50bdc974] {
  height: 100%;
  aspect-ratio: 1/1;
  display: flex;
  justify-content: center;
  align-items: center;
}
.simple:active .btnicon[data-v-50bdc974] {
  transform: translateY(2px);
  transform: translateX(2px);
}
.simple .btnicon[data-v-50bdc974] {
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/togglebutton.vue?vue&type=style&index=0&id=c0b39ed4&lang=scss&scoped=true ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************/
@charset "UTF-8";
.simple[data-v-c0b39ed4] {
  height: 100%;
  aspect-ratio: 1/1;
  display: flex;
  justify-content: center;
  align-items: center;
}
.simple:active .btnicon[data-v-c0b39ed4] {
  transform: translateY(2px);
  transform: translateX(2px);
}
.simple .btnicon[data-v-c0b39ed4] {
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}
.simple.active[data-v-c0b39ed4] {
  background-color: #007bff;
  /* Пример активного стиля */
  color: white;
}
/*!************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/spinner.vue?vue&type=style&index=0&id=544cf08e&scoped=true&lang=css ***!
  \************************************************************************************************************************************************************************************************************************************************************/

.spinner[data-v-544cf08e] {
    width: 40px;
    height: 40px;
    border: 4px solid rgba(0, 0, 0, 0.1);
    border-top-color: #3498db;
    border-radius: 50%;
    animation: spin-544cf08e 0.8s linear infinite;
    margin-left: auto;
    margin-right: auto;
}
@keyframes spin-544cf08e {
to { transform: rotate(360deg);
}
}
  
/*!*****************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/toasts/index.vue?vue&type=style&index=0&id=78a1acbf&scoped=true&lang=css ***!
  \*****************************************************************************************************************************************************************************************************************************************************************/

.toast-container[data-v-78a1acbf] {
    position: fixed;
    top: 10px;
    right: 10px;
    left: 10px;
    z-index: 9999;
    display: flex;
    justify-content: center;
    pointer-events: none;
    user-select: none;
}
.toast {
&[data-v-78a1acbf] {
    background-color: var(--popupbgcolor);
    padding: 10px;
    min-width: 256px;
    min-height: 64px;
    border-radius: 5px;
    margin-bottom: 10px;
    display: flex;
    align-items: center;
    box-shadow: 3px 3px 3px 0 rgba(12, 12, 12, 0.836);
    pointer-events: all;
    }
.toastview[data-v-78a1acbf]{
        font-size: 1.2em;
        max-width: 300px;
}
}
.toast-enter-active[data-v-78a1acbf],
.toast-leave-active[data-v-78a1acbf] {
    transition: opacity 0.5s;
}
.toast-enter-from[data-v-78a1acbf],
.toast-leave-to[data-v-78a1acbf] {
    opacity: 0;
}

/*!*****************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/toasts/toast.vue?vue&type=style&index=0&id=8f2730d8&lang=css ***!
  \*****************************************************************************************************************************************************************************************************************************************************/

.alert {
    display: flex;
    flex-direction: row;
.alerticon {
        margin: 10px;
        fill: rgb(255, 2, 2);
}
.infoicon {
        margin: 10px;
        fill: rgb(98, 174, 236);
}
.warningicon {
        margin: 10px;
        fill: rgb(194, 191, 55);
}
.text {
        font-size: 1.1em;
        display: flex;
        width: 100%;
        align-items: center;
        margin-left: 10px;
}
}

/*!**************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/gui/input.vue?vue&type=style&index=0&id=708b7316&scoped=true&lang=css ***!
  \**************************************************************************************************************************************************************************************************************************************************************/

.input-wrapper[data-v-708b7316] {
  width: 100%;
  display: block;
  /* или block, в зависимости от нужного поведения */
}
.input-field[data-v-708b7316] {
  padding: 3px 5px;
  border: 1px solid #1D203E;
  border-radius: 4px;
  font-size: 14px;
  outline: none;
  /* Убирает стандартную обводку при фокусе */
}
.input-field[data-v-708b7316]:focus {
  border-color: #1D203E;
  box-shadow: 0 0 3px rgba(0, 123, 255, 0.5);
  /* Добавляет легкую тень при фокусе */
}

/*!****************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/gui/buttons.vue?vue&type=style&index=0&id=64d98a4d&scoped=true&lang=css ***!
  \****************************************************************************************************************************************************************************************************************************************************************/

.radio-group[data-v-64d98a4d] {
    display: flex;
    flex-direction: row;
    gap: 12px;
}

/*!*******************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/gui/radiogroup.vue?vue&type=style&index=0&id=de8cca70&scoped=true&lang=css ***!
  \*******************************************************************************************************************************************************************************************************************************************************************/

.radio-group[data-v-de8cca70] {
    display: flex;
    flex-direction: row;
    gap: 12px;
}
.radio-item[data-v-de8cca70] {
    display: flex;
    align-items: center;
}
.radio-item--disabled[data-v-de8cca70] {
    opacity: 0.6;
    pointer-events: none;
}
.radio-label[data-v-de8cca70] {
    display: flex;
    align-items: center;
    cursor: pointer;
    gap: 8px;
    user-select: none;
}
.radio-input[data-v-de8cca70] {
    position: absolute;
    opacity: 0;
    pointer-events: none;
}
.radio-custom[data-v-de8cca70] {
    display: flex;
    align-items: center;
    justify-content: center;
}
.radio-default-button[data-v-de8cca70] {
    width: 20px;
    height: 20px;
    border: 2px solid #ccc;
    border-radius: 50%;
    background: white;
    transition: all 0.2s ease;
    position: relative;
}
.radio-default-button--checked[data-v-de8cca70] {
    border-color: #007bff;
    background: #007bff;
}
.radio-default-button--checked[data-v-de8cca70]::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 8px;
    height: 8px;
    background: white;
    border-radius: 50%;
}
.radio-text[data-v-de8cca70] {
    flex: 1;
}
.radio-default-label[data-v-de8cca70] {
    font-size: 14px;
}
.radio-label:hover .radio-default-button[data-v-de8cca70] {
    border-color: #007bff;
}
.radio-input:focus+.radio-custom .radio-default-button[data-v-de8cca70] {
    outline: 2px solid #007bff33;
    outline-offset: 2px;
}

/*!***************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/gui/search.vue?vue&type=style&index=0&id=26835d0c&scoped=true&lang=css ***!
  \***************************************************************************************************************************************************************************************************************************************************************/

.search-filter[data-v-26835d0c] {
    width: 100%;
}
.search-input-container[data-v-26835d0c] {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}
.search-input[data-v-26835d0c] {
    flex: 1;
    padding: 0.2rem 0.5rem;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 1rem;
    transition: border-color 0.2s ease;
}
.search-input[data-v-26835d0c]:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
}
.search-button[data-v-26835d0c] {
    padding: 0.5rem 1rem;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.2s ease;
}
.search-button[data-v-26835d0c]:hover:not(:disabled) {
    background-color: #0056b3;
}
.search-button[data-v-26835d0c]:disabled {
    background-color: #6c757d;
    cursor: not-allowed;
    opacity: 0.6;
}

/*!*****************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/layouts/slider-block.vue?vue&type=style&index=0&id=72061ef7&lang=scss&scoped=true ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************/
.slider[data-v-72061ef7] {
  position: absolute;
  background-color: rgba(71, 55, 116, 0.75);
  z-index: 0;
  transition: all 0.35s;
}
/*!************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/layouts/tree-li.vue?vue&type=style&index=0&id=d04fd8b4&lang=scss&scoped=true ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************/
li[data-v-d04fd8b4] {
  display: flex;
  flex-direction: row;
  align-items: left;
}
li span[data-v-d04fd8b4] {
  color: rgb(189, 164, 164);
}
li .child-list[data-v-d04fd8b4] {
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: flex-start;
}
li .child-list ul[data-v-d04fd8b4] {
  padding-inline-start: 20px;
}
/*!**************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/gui/float.vue?vue&type=style&index=0&id=e616b6b0&lang=css ***!
  \**************************************************************************************************************************************************************************************************************************************************/

.comma-number-input-wrapper {
    display: flex;
    align-items: center;
    overflow: hidden;
    width: 64px;
    gap: 3px;
}
.comma-number-input {
    flex: 1;
    text-align: right;
    border: none;
    padding: 1px;
    outline: none;
    width: 32px;
}
.arrow-buttons {
    display: flex;
    flex-direction: column;
}
.arrow-buttons button {
    all: unset;
    width: 10px;
    text-align: center;
    cursor: pointer;
    font-size: 10px;
    user-select: none;
}
.arrow-buttons button:hover {
    /*background: #f0f0f0;*/
}

/*!********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/gui/playcontrol.vue?vue&type=style&index=0&id=10b6d716&scoped=true&lang=css ***!
  \********************************************************************************************************************************************************************************************************************************************************************/

.control-container {
&[data-v-10b6d716] {
    display: flex;
    flex-direction: column;
    gap: 5px;
}
.buttons[data-v-10b6d716] {
        display: flex;
        justify-content: center;
        gap: 15px;
}
span[data-v-10b6d716] {
        text-align: center;
}
}
input[type="range"][data-v-10b6d716] {
    width: 100%;
}
button[data-v-10b6d716] {
    border-radius: 6px;
    padding: 2px 6px;
}
button[data-v-10b6d716]:disabled {
    opacity: 0.5;
}

/*!**********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/inspector/v3block.vue?vue&type=style&index=0&id=18877d90&scoped=true&lang=css ***!
  \**********************************************************************************************************************************************************************************************************************************************************************/

.title {
&[data-v-18877d90] {
    display: flex;
    justify-content: center;
    width: 100%;
    padding: 3px;
    gap: 5px;
}
.label[data-v-18877d90]{
        flex:1;
        display: flex;
        align-items: flex-end;
        justify-content: flex-start;
        flex-wrap: nowrap;
}
.tools[data-v-18877d90]{
}
.titleinfo[data-v-18877d90]{
        flex:1;
}
&.min[data-v-18877d90] {
        justify-content: flex-start;
}
}

/*!*************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/inspector/eulerblock.vue?vue&type=style&index=0&id=770456ec&scoped=true&lang=css ***!
  \*************************************************************************************************************************************************************************************************************************************************************************/

.title {
&[data-v-770456ec] {
    display: flex;
    justify-content: center;
    width: 100%;
    padding: 3px;
    gap: 5px;
}
.label[data-v-770456ec] {
        flex: 1;
        display: flex;
        align-items: flex-end;
        justify-content: flex-start;
}
.tools[data-v-770456ec] {}
.titleinfo[data-v-770456ec] {
        flex: 1;
}
&.min[data-v-770456ec] {
        justify-content: flex-start;
}
}

/*!*********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/inspector/qblock.vue?vue&type=style&index=0&id=1c9a5ee4&scoped=true&lang=css ***!
  \*********************************************************************************************************************************************************************************************************************************************************************/

.title {
&[data-v-1c9a5ee4] {
    display: flex;
    justify-content: center;
    width: 100%;
    padding: 3px;
    gap: 5px;
}
.label[data-v-1c9a5ee4] {
        flex: 1;
        display: flex;
        align-items: flex-end;
        justify-content: flex-start;
        flex-wrap: nowrap;
}
.tools[data-v-1c9a5ee4] {}
.titleinfo[data-v-1c9a5ee4] {
        flex: 1;
}
&.min[data-v-1c9a5ee4] {
        justify-content: flex-start;
}
}

/*!***************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/inspector/textedit.vue?vue&type=style&index=0&id=4ff1375f&lang=scss&scoped=true ***!
  \***************************************************************************************************************************************************************************************************************************************************************************************************************/
.block_container[data-v-4ff1375f] {
  width: 100%;
  display: flex;
  flex-wrap: nowrap;
  gap: 5px;
}
.block_container .editrow[data-v-4ff1375f] {
  display: grid;
  grid-template-columns: 1fr 20px;
  width: 100%;
  align-items: center;
  gap: 5px;
}
.block_container .editrow .label[data-v-4ff1375f] {
  cursor: pointer;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.block_container svg[data-v-4ff1375f] {
  cursor: pointer;
  flex-shrink: 0;
}
.okicon[data-v-4ff1375f] {
  flex-shrink: 0;
}
.editinput[data-v-4ff1375f] {
  flex: 1;
}
/*!****************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/inspector/labeledit.vue?vue&type=style&index=0&id=5d976506&lang=scss&scoped=true ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************************/
@charset "UTF-8";
.block_container[data-v-5d976506] {
  width: 100%;
  display: flex;
  flex-wrap: nowrap;
  gap: 5px;
}
.block_container .editrow[data-v-5d976506] {
  display: grid;
  grid-template-columns: 1fr 20px;
  width: 100%;
  align-items: center;
  gap: 5px;
  border: 1px solid black;
  /*width: 100%;*/
}
.block_container .editrow .label[data-v-5d976506] {
  cursor: pointer;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.block_container svg[data-v-5d976506] {
  cursor: pointer;
  flex-shrink: 0;
}
.okicon[data-v-5d976506] {
  flex-shrink: 0;
}
.editinput[data-v-5d976506] {
  flex: 1;
  min-width: 0;
  /* Очень важно! */
  height: 12px;
  overflow: hidden;
  /* Добавьте это */
  text-overflow: ellipsis;
  /* Добавьте это */
  white-space: nowrap;
  /* Добавьте это */
}
/*!************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/inspector/transform.vue?vue&type=style&index=0&id=20c99674&lang=css ***!
  \************************************************************************************************************************************************************************************************************************************************************/

.transform-container {
    width: 100%;
.label {
        display: flex;
        justify-content: space-between;
.title {
            min-height: 1.2em;
}
}
.transforms {
        display: flex;
        flex-direction: column;
        gap: 5px;
}
}
.copybutton {
    margin: 5px 0;
    width: 100%;
}

/*!******************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/gui/imageview.vue?vue&type=style&index=0&id=291b94cc&lang=css ***!
  \******************************************************************************************************************************************************************************************************************************************************/

.image-container {
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    max-width: 100%;
    max-height: 512px;
canvas {
        border: 1px solid rgb(70, 62, 62);
}
img {
        width: 100%;
}
}

/*!********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/gui/twosidebool.vue?vue&type=style&index=0&id=6842144e&scoped=true&lang=css ***!
  \********************************************************************************************************************************************************************************************************************************************************************/

.toggle-switch[data-v-6842144e] {
  display: inline-block;
  position: relative;
  width: 120px;
  height: 34px;
  cursor: pointer;
}
.slider[data-v-6842144e] {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  transition: .4s;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 10px;
}
.slider.active[data-v-6842144e] {
}
.knob[data-v-6842144e] {
  position: absolute;
  height: 26px;
  width: 26px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  transition: .4s;
  border-radius: 50%;
  z-index: 2;
}
.slider.active .knob[data-v-6842144e] {
  transform: translateX(86px);
}
.left-label[data-v-6842144e], .right-label[data-v-6842144e] {
  font-size: 12px;
  font-weight: bold;
  z-index: 1;
  transition: color .4s;
}
.left-label.active[data-v-6842144e] {
}
.right-label.active[data-v-6842144e] {
}

/*!**********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/gui/sectionselect.vue?vue&type=style&index=0&id=7dc857ed&scoped=true&lang=css ***!
  \**********************************************************************************************************************************************************************************************************************************************************************/

.text-align-editor select[data-v-7dc857ed] {
    padding: 1px;
}

/*!****************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/modals/form.vue?vue&type=style&index=0&id=5707096d&scoped=true&lang=css ***!
  \****************************************************************************************************************************************************************************************************************************************************************/

.property-form[data-v-5707096d] {
    display: grid;
    gap: 8px;
}
.row[data-v-5707096d] {
    display: grid;
    grid-template-columns: 1fr 2fr;
    align-items: center;
}
.label[data-v-5707096d] {
    font-weight: bold;
}
.editor[data-v-5707096d] {
    display: flex;
    gap: 8px;
    align-items: center;
}

/*!********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/inspector/label.vue?vue&type=style&index=0&id=bae34408&scoped=true&lang=css ***!
  \********************************************************************************************************************************************************************************************************************************************************************/

.labelField[data-v-bae34408]{ 
  display: inline-block; /* или flex, но с min-width: 0 */
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  max-width: 100%; /* Ограничиваем по родителю */
  min-width: 0; /* Разрешаем сжатие в flex-контейнере */
}


/*!*************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/inspector/dimcontrol.vue?vue&type=style&index=0&id=4d87b77d&scoped=true&lang=css ***!
  \*************************************************************************************************************************************************************************************************************************************************************************/

.dimension-control[data-v-4d87b77d] {
  display: flex;
  gap: 5px;
  padding: 5px;
}
.preview-container[data-v-4d87b77d] {
  flex: 1;
  padding: 5px;
  display: flex;
  justify-content: center;
  align-items: center;
}
.preview-element[data-v-4d87b77d] {
  display: flex;
  justify-content: center;
  align-items: center;
  transition: all 0.3s ease;
  overflow: hidden;
}
.controls[data-v-4d87b77d] {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 5px;
}
.control-group[data-v-4d87b77d] {
  padding: 5px;
}
.control-group h3[data-v-4d87b77d] {
  margin-top: 0;
  margin-bottom: 5px;
}
.control-row[data-v-4d87b77d] {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-bottom: 8px;
}
.control-row label[data-v-4d87b77d] {
  min-width: 80px;
}
input[type="number"][data-v-4d87b77d] {
  min-width: 60px;
  padding: 4px;
}
select[data-v-4d87b77d] {
  padding: 4px;
}

/*!****************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/inspector/textcoloredit.vue?vue&type=style&index=0&id=1b266b30&scoped=true&lang=css ***!
  \****************************************************************************************************************************************************************************************************************************************************************************/

.text-color-editor[data-v-1b266b30] {
  flex: 1;
}
input[type="color"][data-v-1b266b30] {
  width: 100%;  
  cursor: pointer;
}


/*!***********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/inspector/fontsize.vue?vue&type=style&index=0&id=056d4a10&scoped=true&lang=css ***!
  \***********************************************************************************************************************************************************************************************************************************************************************/

.font-size-editor[data-v-056d4a10] {
  font-family: Arial, sans-serif;
}
.text-preview[data-v-056d4a10] {
  text-align: center;
  transition: font-size 0.3s ease;
}
.controls[data-v-056d4a10] {
  display: flex;
  flex-direction: column;
}
.size-control[data-v-056d4a10] {
  display: flex;
  align-items: center;
  max-width: 100%;
}
.size-control input[data-v-056d4a10] {
  max-width: 48px;
  flex: 1;
}
.size-control select[data-v-056d4a10] {
  flex: 1;
}
.presets[data-v-056d4a10] {
  display: flex;
  flex-wrap: wrap;
}
.presets button[data-v-056d4a10] {
  cursor: pointer;
}
button[data-v-056d4a10] {
  cursor: pointer;
}
.current-value span[data-v-056d4a10] {
  font-weight: bold;
}

/*!***************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/modals/lib.vue?vue&type=style&index=0&id=8dca0f28&scoped=true&lang=css ***!
  \***************************************************************************************************************************************************************************************************************************************************************/

/* Общие стили */
.container {
&[data-v-8dca0f28] {
    margin: auto;
    height: 512px;
    display: flex;
    flex-direction: row;
}
@media screen and (max-width:481px) {
&[data-v-8dca0f28] {
        max-width: 400px;
}
}
@media screen and (max-width:760px) {
&[data-v-8dca0f28] {
        max-width: 768px;
}
}
@media screen and (min-width:1280px) {
&[data-v-8dca0f28] {
        max-width: 1024px;
}
}
.extension[data-v-8dca0f28] {
        height: 100%;
        min-width: 256px;
        max-width: 512px;
        display: flex;
        flex-direction: column;
        position: relative;
        overflow-y: auto;
        padding: 10px;
}
.list-container {
&[data-v-8dca0f28] {
        flex: 1;
        height: 100%;
        width: 384px;
        display: flex;
        flex-direction: column;
        padding: 0px;
        gap: 5px;
}
.list-slider {
&[data-v-8dca0f28] {
            flex: 1;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            padding: 10px;
}
.grid {
&[data-v-8dca0f28] {
                width: 100%;
                --gap: 12px;
                display: grid;
                gap: var(--gap);
                /* min - размер чтобы влезло 6; max - чтобы влезло 4 */
                grid-template-columns: repeat(auto-fit,
                        minmax(calc((100% - 5 * var(--gap)) / 6),
                            calc((100% - 2 * var(--gap)) / 3)));
                justify-content: start;
}
.grid-element {
&[data-v-8dca0f28] {
                    cursor: pointer;
                    aspect-ratio: 1;
                    width: 100%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    border: 1px solid rgba(0, 0, 0, 0.75);
                    border-radius: 6px;
                    user-select: none;
                    overflow: hidden;

                    /*border-radius: 10px;
                border: 1px solid rgba(0, 0, 0, 0.75);
                padding: 5px;
                overflow: hidden;
                display: flex;
                justify-content: center;
                align-items: center;
                flex-direction: column;
                gap: 5px;
                min-width: 32px;
                min-height: 32px;*/
}
.grid-item[data-v-8dca0f28] {
                        width: 80px;
                        aspect-ratio: 1;
                        display: flex;
                        flex-direction: column;
                        justify-content: space-between;
}
&.selected[data-v-8dca0f28] {
                        border: 2px solid rgba(155, 155, 155, 0.75);
}
}
}
}
.list-head[data-v-8dca0f28] {
            padding: 0px;
            display: flex;
            justify-content: center;
}
}
}

/*!***********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/modals/projectitem.vue?vue&type=style&index=0&id=006685da&scoped=true&lang=css ***!
  \***********************************************************************************************************************************************************************************************************************************************************************/

.pitem[data-v-006685da]{
    font-size: 0.85em;
}

/*!*********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/modals/queryform.vue?vue&type=style&index=0&id=7f6e24b3&scoped=true&lang=css ***!
  \*********************************************************************************************************************************************************************************************************************************************************************/

.container {
&[data-v-7f6e24b3] {
    padding: 20px;
    margin: auto;
    min-width: 256px;
    display: flex;
    flex-direction: column;
}
.block {
&[data-v-7f6e24b3] {
        margin-bottom: 20px;
        position: relative;
        overflow: hidden;
        display: grid;
        grid-template-columns: 1fr 1fr;
}
.label[data-v-7f6e24b3]{
            text-align: right;
            padding-right: 10px;
}
.value[data-v-7f6e24b3]{
}
}
}

/*!***********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/modals/confirmform.vue?vue&type=style&index=0&id=28d312eb&scoped=true&lang=css ***!
  \***********************************************************************************************************************************************************************************************************************************************************************/

.container {
&[data-v-28d312eb] {
    padding: 20px;
    margin: auto;
    min-width: 256px;
    display: flex;
    flex-direction: column;
}
.block {
&[data-v-28d312eb] {
        margin-bottom: 20px;
        position: relative;
        overflow: hidden;
        display: grid;
        grid-template-columns: 1fr 1fr;
}
.label[data-v-28d312eb]{
            text-align: right;
            padding-right: 10px;
}
.value[data-v-28d312eb]{
}
}
}

/*!****************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/modals/auth.vue?vue&type=style&index=0&id=dfac6f5e&scoped=true&lang=css ***!
  \****************************************************************************************************************************************************************************************************************************************************************/

.login-form[data-v-dfac6f5e] {
    max-width: 400px;
    margin: 0 auto;
    padding: 20px;
}
.form-group[data-v-dfac6f5e] {
    margin-bottom: 12px;
}
label[data-v-dfac6f5e] {
    display: block;
    margin-bottom: 6px;
    font-size: 14px;
}
input[data-v-dfac6f5e] {
    width: 100%;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
}
.form-actions[data-v-dfac6f5e] {
    display: flex;
    gap: 10px;
    margin-top: 14px;
}
button[data-v-dfac6f5e] {
    padding: 10px 14px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}
button[disabled][data-v-dfac6f5e] {
    opacity: 0.7;
    cursor: not-allowed;
}
button[type="submit"][data-v-dfac6f5e] {
    background: #4CAF50;
    color: #fff;
}
button[type="button"][data-v-dfac6f5e] {
    background: #f44336;
    color: #fff;
}
.helper-actions[data-v-dfac6f5e] {
    margin-top: 12px;
    font-size: 13px;
}
.helper-actions a[data-v-dfac6f5e] {
    color: #1976d2;
    cursor: pointer;
    text-decoration: underline;
}
.error-message[data-v-dfac6f5e] {
    color: #b71c1c;
    margin-top: 12px;
    padding: 8px;
    background: #ffebee;
    border-radius: 4px;
}
.info-message[data-v-dfac6f5e] {
    color: #155724;
    margin-top: 12px;
    padding: 8px;
    background: #e9f7ef;
    border-radius: 4px;
}

/*!*********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/uielements/label.vue?vue&type=style&index=0&id=db767100&scoped=true&lang=css ***!
  \*********************************************************************************************************************************************************************************************************************************************************************/

.cardroot[data-v-db767100] {
    position: absolute;
    height: 256px;
    width: 256px;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 2em;
    cursor: pointer;
    text-align: center;
    pointer-events: all;
}

/*!**********************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/toasts/querytoast.vue?vue&type=style&index=0&id=5b81c842&lang=css ***!
  \**********************************************************************************************************************************************************************************************************************************************************/

.toastcontainer {
    display: flex;
    flex-direction: column;
    width: 100%;
.alert {
        display: flex;
        flex-direction: row;
.alerticon {
            margin: 10px;
            fill: rgb(255, 0, 0);
}
.infoicon {
            margin: 10px;
            fill: rgb(98, 174, 236);
}
.warningicon {
            margin: 10px;
            fill: rgb(194, 191, 55);
}
.text {
            font-size: 1.1em;
            display: flex;
            width: 100%;
            align-items: center;
}
}
.buttons {
        display: flex;
        flex-direction: row;
        justify-content: center;
        gap: 15px;
button {
            width: 100%;
}
}
}

/*!************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/modals/importer.vue?vue&type=style&index=0&id=411fe03b&lang=scss ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************/
.importer {
  height: 512px;
  overflow-y: auto;
  width: 256px;
}
.importer .row {
  margin-bottom: 5px;
}
.importer .row .title {
  font-size: 1.2em;
}
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/actions/action_inspector.vue?vue&type=style&index=0&id=1d6191e0&lang=scss ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************/
.actionview {
  display: flex;
  flex-direction: column;
  gap: 1px;
}
.actionview .actionrow {
  display: grid;
  grid-template-columns: 1fr 24px;
  gap: 5px;
  margin-bottom: 5px;
  min-height: 24px;
}
.actionview .actionrow .label {
  width: 100%;
  display: flex;
  flex-direction: row;
}
.actionview .actionrow .label span {
  display: block;
  width: 18px;
  height: 18px;
}
.actionview .actionrow .buttons {
  display: flex;
  flex-wrap: nowrap;
  justify-content: flex-end;
  gap: 3px;
}
.actionview .actionform .line {
  display: flex;
  flex-wrap: nowrap;
  gap: 5px;
  justify-content: center;
}
.actionview .actionline {
  width: 100%;
  gap: 10px;
}
/*!**********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/actions/hookslist.vue?vue&type=style&index=0&id=81578048&scoped=true&lang=css ***!
  \**********************************************************************************************************************************************************************************************************************************************************************/

.menu[data-v-81578048] {

    position: absolute;
    padding: 10px;
    background-color: var(--popupbgcolor);
    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
}
ul[data-v-81578048] {
    list-style: none;
    margin: 0;
    padding: 0;
}
li[data-v-81578048] {
    padding: 8px 12px;
    cursor: pointer;
}
li.highlighted[data-v-81578048] {
    background-color: #1d1b1b85;
}
  
/*!******************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/actions/actions_inspector.vue?vue&type=style&index=0&id=2373bc43&lang=css ***!
  \******************************************************************************************************************************************************************************************************************************************************************/

.blocks-container {
    margin-top: 10px;
    display: flex;
    flex-direction: column;
    gap: 5px;
.blockslabel {
        display: flex;
        justify-content: space-between;
}
.blocks {
        display: flex;
        flex-direction: column;
        gap: 10px;
        padding-top: 10px;
.block {
            display: flex;
            flex-direction: column;
            gap: 5px;
            padding: 5px;
            border: 1px solid black;
.blocklabel {

                margin-left: 15px;
                display: flex;
                justify-content: space-between;
.blocktitle {
                    color: var(--text-color-a);
}
}
}
}
}
.copybutton {
    margin: 5px 0;
    width: 100%;
}

/*!******************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/actions/action_lib_select.vue?vue&type=style&index=0&id=23672aa6&scoped=true&lang=css ***!
  \******************************************************************************************************************************************************************************************************************************************************************************/

.form-container {
&[data-v-23672aa6] {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    display: block;
    overflow-y: auto;
    padding: 5px;
}
.form-column {
&[data-v-23672aa6] {
        display: flex;
        flex-direction: column;
        gap: 10px;
        justify-content: space-between;
}
.line[data-v-23672aa6] {
            width: 100%;
}
.row[data-v-23672aa6] {
            display: grid;
            grid-template-columns: minmax(50px, 96px) minmax(128px, 1fr);
}
.bottomform[data-v-23672aa6] {
            flex: 1;
            display: flex;
            justify-content: center;
}
}
}

/*!***********************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/actions/actionitem.vue?vue&type=style&index=0&id=42b5772b&lang=css ***!
  \***********************************************************************************************************************************************************************************************************************************************************/

.itemElement{
    overflow: hidden;
    font-size: 1em;
    display: flex;
    justify-content: center;
    flex-direction: column;
    align-items: center;
.itemrow{
        word-wrap: break-word;
        width: 100%;
        text-align: center;
}
}


/*!***************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/inspector/assets/assetselector.vue?vue&type=style&index=0&id=1be92c2a&lang=scss&scoped=true ***!
  \***************************************************************************************************************************************************************************************************************************************************************************************************************************/
.assetblock[data-v-1be92c2a] {
  top: 0;
  width: 100%;
  display: flex;
  flex-direction: row;
}
.assetblock .icon[data-v-1be92c2a] {
  cursor: pointer;
}
/*!******************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/inspector/assets/assetimg.vue?vue&type=style&index=0&id=1a78dd67&lang=css ***!
  \******************************************************************************************************************************************************************************************************************************************************************/

.image-container {
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    max-width: 100%;
    max-height: 512px;
    position: relative;
canvas {
        border: 1px solid rgb(70, 62, 62);
}
.selector {
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        display: flex;
        justify-content: center;
        align-items: center;
}
}

/*!****************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/modals/assets/assetedit.vue?vue&type=style&index=0&id=f04150d2&scoped=true&lang=css ***!
  \****************************************************************************************************************************************************************************************************************************************************************************/

.form-container {
&[data-v-f04150d2] {
    display: flex;
    flex-direction: column;
    max-width: 256px;
}
.info {
&[data-v-f04150d2] {
        display: flex;
        flex-direction: column;
        gap: 10px;
}
.row {
&[data-v-f04150d2] {
            display: grid;
            grid-template-columns: minmax(50px, 96px) minmax(128px, 1fr);
}
.rowvalue {
.typeslist[data-v-f04150d2] {
                    width: 100%;
}
}
}
}
}

/*!****************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/modals/assets/assetitem.vue?vue&type=style&index=0&id=6e91b820&scoped=true&lang=css ***!
  \****************************************************************************************************************************************************************************************************************************************************************************/

.moditem[data-v-6e91b820] {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: 100%;
    justify-content: space-around;
}
.moditem .image[data-v-6e91b820] {
    flex: 1;
    /* Занимает доступное пространство */
    min-height: 0;
    /* Важно для корректной работы flex в некоторых браузерах */
}
.moditem .image img[data-v-6e91b820] {
    width: 100%;
    height: 100%;
    object-fit: contain;
    /* Сохраняет пропорции изображения */
}
.moditem .title[data-v-6e91b820] {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 5px;
    white-space: nowrap;
    /* Текст в одну строку */
    overflow: hidden;
    /* Скрываем выходящий за границы текст */
    text-overflow: ellipsis;
    /* Добавляем многоточие */
    max-width: 100%;
    /* Ограничиваем ширину */
    flex-shrink: 0;
    /* Запрещаем сжатие */
}

/*!****************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/modals/assets/assetview.vue?vue&type=style&index=0&id=6fa95eb2&scoped=true&lang=css ***!
  \****************************************************************************************************************************************************************************************************************************************************************************/

.form-container {
&[data-v-6fa95eb2] {
    display: flex;
    flex-direction: column;
    width: 100%;
    padding: 10px;
}
.info {
&[data-v-6fa95eb2] {
        display: flex;
        flex-direction: column;
        gap: 10px;
}
.row {
&[data-v-6fa95eb2] {
            display: grid;
            grid-template-columns: minmax(50px, 96px) minmax(128px, 1fr);
}
.rowvalue {
.typeslist[data-v-6fa95eb2] {
                    width: 100%;
}
}
}
img[data-v-6fa95eb2] {
            width: 100%;
}
}
}

/*!***************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/modals/infopanel/index.vue?vue&type=style&index=0&id=e9935600&scoped=true&lang=css ***!
  \***************************************************************************************************************************************************************************************************************************************************************************/

.info-panel[data-v-e9935600] {
    display: flex;
    flex-direction: column;
    gap: 8px;
    width: 100%;
    min-width: 512px;
    max-width: 720px;
    min-height: 256px;
    height: 100%;
    border: 1px solid #e0e0e086;
    border-radius: 8px;
    padding: 12px;
    box-sizing: border-box;
}
.panel-header[data-v-e9935600] {
    display: flex;
    align-items: center;
    justify-content: space-between;
}
.title[data-v-e9935600] {
    font-weight: 600;
    text-align: center;
    flex: 1;
    padding: 0 8px;
}
.nav[data-v-e9935600] {
    background: transparent;
    border: none;
    font-size: 18px;
    cursor: pointer;
    padding: 6px;
}
.nav[data-v-e9935600]:disabled {
    opacity: 0.35;
    cursor: default
}
.panel-content[data-v-e9935600] {
    display: flex;
    gap: 12px;
    flex: 1;
    align-items: start;
}
.graphic[data-v-e9935600] {
    width: 40%;
    min-width: 120px;
    max-height: 240px;
    display: flex;
    align-items: center;
    justify-content: center;
}
.graphic img[data-v-e9935600] {
    max-width: 100%;
    max-height: 220px;
    object-fit: contain;
    border-radius: 6px
}
.text[data-v-e9935600] {
    flex: 1;
    font-size: 1.35em;
}
.body[data-v-e9935600] {
    margin: 6px 0 0 0;
}
.panel-footer[data-v-e9935600] {
    display: flex;
    align-items: center;
    justify-content: space-between;
}
.counter[data-v-e9935600] {
    color: #666
}
.dots[data-v-e9935600] {
    display: flex;
    gap: 6px;
}
.dot[data-v-e9935600] {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: #363636;
    border: none;
    padding: 0;
    cursor: pointer
}
.dot.active[data-v-e9935600] {
    background: #afafaf
}

/* simple fade */
.fade-enter-active[data-v-e9935600],
.fade-leave-active[data-v-e9935600] {
    transition: opacity .22s ease;
}
.fade-enter-from[data-v-e9935600],
.fade-leave-to[data-v-e9935600] {
    opacity: 0
}

/*!***********************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/templates/template.vue?vue&type=style&index=0&id=5eb0eec0&lang=css ***!
  \***********************************************************************************************************************************************************************************************************************************************************/

.itemElement {
    padding: 10px;
    overflow: hidden;
    font-size: 1em;
    display: flex;
    justify-content: center;
    flex-direction: column;
    align-items: center;
    width: 96px;
.itemrow {
        word-wrap: break-word;
        width: 100%;
        text-align: center;
}
}

/*!***************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[6].use[0]!./src/components/templates/templateview.vue?vue&type=style&index=0&id=17dca4c5&scoped=true&lang=css ***!
  \***************************************************************************************************************************************************************************************************************************************************************************/

.product-card {
&[data-v-17dca4c5] {
    padding: 10px;
    border: 1px solid #3b3b3b;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    gap: 15px;
    width: 256px;
    height: 100%;
}
.card-section {
&[data-v-17dca4c5] {
        display: flex;
}
.card-label[data-v-17dca4c5] {
            flex: 0.5;
}
.card-value {
&[data-v-17dca4c5] {
            flex: 1;
}
.text-value[data-v-17dca4c5] {
                width: 100%;
                text-align: right
}
}
.card-image[data-v-17dca4c5] {
            width: 100%;
            display: flex;
            justify-content: center;
}
}
}
.product-title[data-v-17dca4c5] {
    font-size: 1.5rem;
    margin-bottom: 16px;
    text-align: center;
}
.main-image[data-v-17dca4c5] {
    margin-bottom: 20px;
}
.image-preview[data-v-17dca4c5] {
    max-height: 128px;
    object-fit: cover;
    border-radius: 4px;
}
.carousel[data-v-17dca4c5] {
    margin-bottom: 20px;
    overflow: hidden;
}
.carousel h3[data-v-17dca4c5] {
    font-size: 1.1rem;
    margin-bottom: 10px;
}
.carousel-container[data-v-17dca4c5] {
    display: flex;
    gap: 10px;
    overflow-x: auto;
    padding: 5px;
}
.carousel-item[data-v-17dca4c5] {
    flex-shrink: 0;
}
.carousel-image[data-v-17dca4c5] {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 4px;
    cursor: pointer;
}
.carousel-image[data-v-17dca4c5]:hover {
    opacity: 0.8;
}
.price-section[data-v-17dca4c5] {
    margin-bottom: 12px;
    font-size: 1.2rem;
}
.price-label[data-v-17dca4c5] {
    font-weight: bold;
    margin-right: 8px;
}
.price-value[data-v-17dca4c5] {
    color: #e53935;
    font-weight: bold;
}
.author-section[data-v-17dca4c5] {
    padding: 8px 0;
    border-top: 1px solid #eee;
}
.author-label[data-v-17dca4c5] {
    font-weight: bold;
    margin-right: 8px;
    color: #666;
}
.author-name[data-v-17dca4c5] {
    color: #333;
}

/*!**************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/styles/app.scss ***!
  \**************************************************************************************************************/
.card {
  pointer-events: all;
  cursor: pointer;
  text-transform: uppercase;
  position: absolute;
  justify-content: center;
  align-items: center;
  background-color: rgba(0, 0, 0, 0.6);
  border-radius: 10px;
  border: 1px solid rgba(22, 92, 4, 0.6);
  display: flex;
  flex-direction: column;
  padding: 10px;
  box-shadow: 6px 6px 11px 3px rgba(0, 0, 0, 0.7);
  opacity: 0;
  visibility: hidden;
  transition: opacity 1s ease, visibility 1s;
}
.card.show {
  opacity: 1;
  visibility: visible;
  transition: opacity 0.25s ease, visibility 0.25s;
}
.card span {
  letter-spacing: 0;
  display: block;
  margin: 0 auto;
  text-shadow: 0 0 80px rgba(255, 255, 255, 0.5);
  background: url(/editor/assets/2704d012a3b1db64c7e9.png) repeat-y;
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: aitf 80s linear infinite;
  transform: translate3d(0, 0, 0);
  backface-visibility: hidden;
  font-size: 2em;
}
.card p {
  font-size: 1em;
}

@keyframes aitf {
  0% {
    background-position: 0% 50%;
  }
  100% {
    background-position: 100% 50%;
  }
}
html {
  --text-color-normal: hsl(0, 0%, 13%);
  --text-color-inver: #b43b3b;
  --bgcolor: rgb(226, 226, 226);
  --bordercolor: rgba(29, 21, 23, 1);
  --button-info-bg: rgb(158, 156, 156);
  --symbolColor: rgb(99, 145, 99);
}

html[data-theme=dark] {
  --btnw: 64px;
  --text-color-normal: #c5c9cf;
  --text-color-inver: #610404;
  --text-color-a: #abdfa7;
  --text-focused: #eeee80e3;
  --bg-focused: rgba(0, 0, 0, 0.25);
  --bgcolor: rgb(35, 31, 32);
  --symbolColor: rgb(142, 197, 142);
  --symbolColorAlpha: rgba(142, 197, 142, 0.5);
  --panelbgcolor: rgba(41, 32, 35, 0.95);
  --panelbgcolora: rgba(51, 51, 51, 0.3);
  --popupbgcolor: rgba(51, 51, 51, 0.863);
  --popupshadowcolor: rgba(32, 32, 32, 0.877);
  --tooltip-bgcolor: rgba(0, 0, 0, .9);
  --bordercolor: rgba(29, 21, 23, 0.95);
  --button-info-bg: rgb(66, 65, 65);
  --button-info-active-bg: rgb(97, 94, 94);
  --button-info-passive-bg: rgba(87, 87, 87, 0.5);
  --button-info-border: rgba(5, 4, 4, 0.548);
  --button-icon-fill: rgba(197, 194, 194, 0.925);
  --button-warn-bg: rgb(128, 0, 0);
  --button-warn-active-bg: rgb(150, 26, 26);
  --button-warn-passive-bg: rgb(95, 43, 43);
  --button-warn-border: rgba(5, 4, 4, 0.548);
}

.floatInput {
  max-width: 54px;
}
.floatInputinput::-webkit-outer-spin-button,
.floatInput input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}
.floatInputinput[type=number] {
  -moz-appearance: textfield;
}

.collapsible-panel {
  width: 100%;
  border-radius: 4px;
  overflow: hidden;
  margin-bottom: 4px;
  border: 1px solid rgb(0, 0, 0);
}
.collapsible-panel .panel-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 5px;
  cursor: pointer;
  user-select: none;
  gap: 5px;
}
.collapsible-panel .panel-header .header-content {
  display: flex;
  align-items: center;
  gap: 8px;
  flex-grow: 1;
  justify-content: space-between;
  min-width: 0;
}
.collapsible-panel .panel-header .header-content .label {
  font-weight: 500;
  flex: 1;
  white-space: nowrap;
}
.collapsible-panel .panel-header .toggle-icon {
  transition: transform 0.2s ease;
  transform: rotate(-90deg);
  width: 17px;
}
.collapsible-panel .panel-header .toggle-icon.open {
  transform: rotate(0deg);
}
.collapsible-panel .panel-content {
  padding: 5px;
  width: 100%;
  box-sizing: border-box;
}
.collapsible-panel .panel-content .inspector-block {
  display: flex;
  flex-direction: column;
  gap: 5px;
}
.collapsible-panel .panel-content .inspector-block .inspector-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 5px;
}

.v3 {
  display: flex;
  gap: 5px;
}
.v3 .v3value {
  display: flex;
  gap: 10px;
}
.v3 .v3value .v3label {
  display: flex;
  justify-content: center;
  align-items: center;
  text-transform: capitalize;
}

.buttons-group {
  display: flex;
}

.btn {
  padding: 10px 15px;
}

button {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 2px 3px;
  color: var(--text-color-normal);
  cursor: pointer;
  border-radius: 5px;
  font-size: 0.75em;
  background-color: var(--button-info-bg);
  fill: var(--button-icon-fill);
  box-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.2);
  border: none;
}
button svg {
  margin: 3px;
}
button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  color: #272727;
}
button.primary {
  background-color: #009130;
  padding: 10px 15px;
}
button.primary :disabled {
  background-color: rgba(0, 145, 48, 0.5607843137);
}
button.secondary {
  background-color: #007286;
  padding: 10px 15px;
}
button.secondary :disabled {
  background-color: rgba(0, 121, 143, 0.4431372549);
}
button.additional {
  background-color: #910825;
  padding: 10px 15px;
}
button.additional :disabled {
  background-color: rgba(143, 0, 79, 0.4431372549);
}
button.small-btn {
  min-height: 18px;
  font-size: 0.75em;
}
button.normal {
  min-width: 100px;
}
button.info {
  background-color: var(--button-info-bg);
}
button.cancel {
  background-color: var(--button-info-warn);
}
button.large {
  min-height: 3em;
}
button.active {
  background-color: var(--button-info-active-bg);
}
button.passive {
  background-color: var(--button-info-passive-bg);
  opacity: 0.75;
}
button.square {
  aspect-ratio: 1/1;
}
button .label {
  justify-content: center;
  align-items: center;
  display: flex;
  height: 100%;
}

.panel {
  background: var(--panelbgcolor);
  border-radius: 4px;
  border: 1px solid rgb(19, 18, 18);
  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.404);
}

.selectable-container {
  margin: auto;
  height: 256px;
  display: flex;
  flex-direction: row;
}
.selectable-container .info {
  height: 100%;
  padding: 10px;
  display: flex;
  flex-direction: column;
  gap: 5px;
  overflow-y: auto;
}
.selectable-container .info .row {
  display: grid;
  grid-template-columns: 64px 128px;
}
.selectable-container .info .row .rowvalue {
  width: 100%;
}
.selectable-container .list {
  flex: 1;
  height: 100%;
  width: 512px;
  overflow-y: auto;
}
.selectable-container .list .grid {
  width: 100%;
  display: grid;
  grid-template-columns: repeat(auto-fill, 96px);
  grid-auto-rows: 87px;
  gap: 5px;
}
.selectable-container .list .grid .grid-element {
  cursor: pointer;
  width: 80px;
  height: 80px;
  border-radius: 10px;
  border: 1px solid rgba(0, 0, 0, 0.75);
  padding: 5px;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  gap: 5px;
}

.vlist-container {
  margin: auto;
  height: 256px;
  min-width: 256px;
}
.vlist-container .list {
  height: 100%;
  width: 100%;
  overflow-y: auto;
}
.vlist-container .list .vlist {
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: 5px;
}
.vlist-container .list .vlist .vlist-element {
  cursor: pointer;
  border-radius: 3px;
  border: 1px solid rgba(0, 0, 0, 0.75);
  padding: 5px;
  overflow: hidden;
  display: flex;
  gap: 5px;
}

/* Works on Firefox */
* {
  scrollbar-width: thin;
  scrollbar-color: var(--bordercolor) var(--button-info-bg);
}

/* Works on Chrome, Edge, and Safari */
*::-webkit-scrollbar {
  width: 12px;
}

*::-webkit-scrollbar-track {
  background: rgb(66, 66, 66);
}

*::-webkit-scrollbar-thumb {
  background-color: rgb(35, 35, 36);
  border-radius: 20px;
  border: 3px solid rgb(0, 0, 0);
}

html,
body {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  background-color: var(--bgcolor);
  color: var(--text-color-normal);
  font-size: 14px;
}
html a,
body a {
  color: var(--text-color-a);
}
html video,
body video {
  mix-blend-mode: overlay;
  filter: grayscale(1);
}
html #app,
body #app {
  width: 100%;
  height: 100%;
}
html #app .app-container,
body #app .app-container {
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  position: absolute;
  display: flex;
  justify-content: center;
  align-items: center;
}
html #app .app-container .workspace,
body #app .app-container .workspace {
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  position: absolute;
}
html .app .version,
body .app .version {
  position: absolute;
  bottom: 0;
  left: 0;
}

.w100 {
  width: 100%;
}

.tcenter {
  text-align: center;
}

.center {
  display: flex;
  justify-content: center;
}

.textwrap {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  display: block;
}

.vertflex {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

/*canvas {
	border: 1px solid rgb(19, 18, 18);
	border-radius: 5px;
	box-shadow: inset 2px 2px 3px rgba(0, 0, 0, 0.5),
		inset -2px -2px 3px rgba(255, 255, 255, 0.164);
}*/
.tooltip {
  transition: visibility 0.5s, opacity 0.5s;
  opacity: 0;
  color: var(--text-color-normal);
  background-color: var(--tooltip-bgcolor);
  padding: 5px 10px;
  border-radius: 5px;
  white-space: nowrap;
  z-index: 1000;
  pointer-events: none;
}

.tooltip[style*="visibility: visible"] {
  opacity: 1;
}

.canvas-main {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
  position: absolute;
}

/*@import "./ui.scss";
@import "./buttons.scss";
@import "./menu.scss";
@import "./panel.scss";
@import "./toasts.scss";*/

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/
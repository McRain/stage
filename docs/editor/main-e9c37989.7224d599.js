"use strict";(self.webpackChunk_reneos_slider_editor=self.webpackChunk_reneos_slider_editor||[]).push([[140],{4546:(e,t,l)=>{l.d(t,{A:()=>b});var n=l(2015);const a=["draggable","droppable"],o={class:"roottree"},r=["draggable"],s={class:"tree-node-content"},i={class:"selector"},d=["checked"],c={key:0,class:"prepender"},u=["title"],p={key:1,class:"appender"},m={key:0,class:"children"},h={key:1};function v(e,t){for(let l=0;l<e.length;l++)e[l].isSelected=t,e[l].children&&v(e[l].children,t)}const g={name:"TreeNode",props:{node:{type:Object,required:!0},selector:{type:Boolean,default:!0},index:{type:Number},focused:{type:Boolean,default:!1},childsFiled:{type:String,default:"childrens"},filter:{type:Function},draggable:{type:Boolean,default:!0},droppable:{type:Boolean,default:!0}},computed:{list(){return this.filter?this.filter(this.node[this.childsFiled]):this.node[this.childsFiled]}},data:()=>({expanded:{},childloaded:{},isLoading:!1,selectChangeEvent:(0,n.inject)("selectChangeEvent",null),clickNodeEvent:(0,n.inject)("clickNodeEvent",null),dropNodeEvent:(0,n.inject)("nodeDropEvent",null),isDragOver:!1}),methods:{onDragStart(e){this.$app.app.draggedNode=this.node,e.dataTransfer.effectAllowed="copy"},onDragOver(e){e.dataTransfer.dropEffect="copy",this.isDragOver=!0},onDragEnter(e){this.isDragOver=!0,!this.expanded[this.node.uid]&&this.node[this.childsFiled]?.length&&this.toggleExpand()},onDragLeave(){this.isDragOver=!1},onDrop(e){this.isDragOver=!1,this.dropNodeEvent({target:this.node,source:this.$app.app.draggedNode})},async toggleExpand(){this.node[this.childsFiled]&&0!==this.node[this.childsFiled].length&&(this.expanded[this.node.uid]=!this.expanded[this.node.uid],this.expanded[this.node.uid]&&!this.childloaded[this.node.uid]&&await this.loadChildren(),this.$emit("updateExpanded",this.node))},async loadChildren(){this.childloaded[this.node.uid]=!0},onChildSelectChange(e){},onCheckboxChange(e){e.isSelected=!e.isSelected,e[this.childsFiled]?.length&&v(e[this.childsFiled],e.isSelected),this.selectChangeEvent(this.node),this.$emit("changeSelection",this.node)},selectNode(e){this.clickNodeEvent(this.node)}}};var f=l(6262);const y={components:{TreeNode:(0,f.A)(g,[["render",function(e,t,l,a,o,v){const g=(0,n.resolveComponent)("TreeNode",!0);return(0,n.openBlock)(),(0,n.createElementBlock)("li",{class:(0,n.normalizeClass)(["tree-node",{"drag-over":o.isDragOver}]),draggable:l.draggable,onDragstart:t[3]||(t[3]=(0,n.withModifiers)(e=>l.draggable&&v.onDragStart(e),["stop"])),onDragover:t[4]||(t[4]=(0,n.withModifiers)((...e)=>v.onDragOver&&v.onDragOver(...e),["prevent"])),onDragenter:t[5]||(t[5]=(0,n.withModifiers)((...e)=>v.onDragEnter&&v.onDragEnter(...e),["prevent"])),onDragleave:t[6]||(t[6]=(...e)=>v.onDragLeave&&v.onDragLeave(...e)),onDrop:t[7]||(t[7]=(0,n.withModifiers)((...e)=>v.onDrop&&v.onDrop(...e),["prevent","stop"]))},[(0,n.createElementVNode)("div",s,[(0,n.createElementVNode)("span",{class:"collapser",onClick:t[0]||(t[0]=(...e)=>v.toggleExpand&&v.toggleExpand(...e))},[v.list?.length?(0,n.renderSlot)(e.$slots,"icon",{key:0,node:l.node},()=>[(0,n.createTextVNode)((0,n.toDisplayString)(o.expanded[l.node.uid]?"▼":"▶"),1)],!0):(0,n.createCommentVNode)("v-if",!0)]),(0,n.createElementVNode)("span",i,[l.selector?(0,n.renderSlot)(e.$slots,"checkbox",{key:0},()=>[(0,n.createElementVNode)("input",{ref:"checkedInput",type:"checkbox",onChange:t[1]||(t[1]=e=>v.onCheckboxChange(l.node)),checked:l.node.isSelected},null,40,d)],!0):(0,n.createCommentVNode)("v-if",!0)]),e.$slots.prepend?((0,n.openBlock)(),(0,n.createElementBlock)("span",c,[(0,n.renderSlot)(e.$slots,"prepend",{node:l.node},void 0,!0)])):(0,n.createCommentVNode)("v-if",!0),(0,n.createElementVNode)("span",{class:"labeler",title:l.node.uid,onClick:t[2]||(t[2]=(...e)=>v.selectNode&&v.selectNode(...e))},[(0,n.renderSlot)(e.$slots,"label",{node:l.node},()=>[(0,n.createElementVNode)("span",null,(0,n.toDisplayString)(l.node.uid)+"|",1)],!0)],8,u),e.$slots.append?((0,n.openBlock)(),(0,n.createElementBlock)("span",p,[(0,n.renderSlot)(e.$slots,"append",{node:l.node,index:l.index},void 0,!0)])):(0,n.createCommentVNode)("v-if",!0)]),o.expanded[l.node.uid]&&Array.isArray(v.list)&&v.list.length?((0,n.openBlock)(),(0,n.createElementBlock)("ul",m,[o.childloaded[l.node.uid]?((0,n.openBlock)(!0),(0,n.createElementBlock)(n.Fragment,{key:0},(0,n.renderList)(v.list,t=>((0,n.openBlock)(),(0,n.createBlock)(g,{draggable:l.draggable,onChangeSelection:v.onChildSelectChange,filter:l.filter,selector:l.selector,focused:t.focused,key:t.uid,node:t,childsFiled:l.childsFiled},(0,n.createSlots)({_:2},[(0,n.renderList)(e.$slots,(t,l)=>({name:l,fn:(0,n.withCtx)(t=>[(0,n.renderSlot)(e.$slots,l,(0,n.mergeProps)({ref_for:!0},t),void 0,!0)])}))]),1032,["draggable","onChangeSelection","filter","selector","focused","node","childsFiled"]))),128)):((0,n.openBlock)(),(0,n.createElementBlock)("div",h," load... "))])):(0,n.createCommentVNode)("v-if",!0)],42,r)}],["__scopeId","data-v-ec22d48c"]])},computed:{list(){return this.filter?this.filter(this.tree):this.tree}},data:()=>({expandeds:{},isDragOver:!1}),props:{tree:{type:Array,required:!0},selector:{type:Boolean,default:!1},focused:{type:Boolean,default:!1},childsFiled:{type:String,default:"children"},filter:{type:Function},draggable:{type:Boolean,default:!1},droppable:{type:Boolean,default:!1}},setup(e,{slots:t,emit:l}){(0,n.provide)("clickNodeEvent",e=>{l("clickNode",e)}),(0,n.provide)("selectChangeEvent",e=>{l("changeSelect",e)}),(0,n.provide)("nodeDropEvent",e=>{l("node-drop",e)})},methods:{onDragOver(e){e.dataTransfer.dropEffect="copy",this.isDragOver=!0},onDragEnter(e){this.isDragOver=!0},onDragLeave(){this.isDragOver=!1},onDrop(e){this.isDragOver=!1,this.$app?.app?.draggedNode&&(console.log(this.$app?.app?.draggedNode),this.$emit("node-drop",{target:null,source:this.$app.app.draggedNode}))},onUpdateExpanded(e){},findNodeByUid(e,t){for(let l of e){if(l.uid===t)return l;if(l.children){let e=this.findNodeByUid(l.children,t);if(e)return e}}return null},removeNodeFromTree(e,t){for(let l=0;l<e.length;l++){if(e[l].uid===t)return e.splice(l,1),!0;if(e[l][this.childsFiled]&&this.removeNodeFromTree(e[l][this.childsFiled],t))return!0}return!1}}},b=(0,f.A)(y,[["render",function(e,t,l,r,s,i){const d=(0,n.resolveComponent)("TreeNode");return(0,n.openBlock)(),(0,n.createElementBlock)("div",{class:(0,n.normalizeClass)(["treecontainer",{"drag-over":s.isDragOver}]),draggable:l.draggable,droppable:l.droppable,onDrop:t[0]||(t[0]=(0,n.withModifiers)((...e)=>i.onDrop&&i.onDrop(...e),["prevent","stop"])),onDragover:t[1]||(t[1]=(0,n.withModifiers)((...e)=>i.onDragOver&&i.onDragOver(...e),["prevent"])),onDragenter:t[2]||(t[2]=(0,n.withModifiers)((...e)=>i.onDragEnter&&i.onDragEnter(...e),["prevent"])),onDragleave:t[3]||(t[3]=(...e)=>i.onDragLeave&&i.onDragLeave(...e))},[(0,n.createElementVNode)("ul",o,[((0,n.openBlock)(!0),(0,n.createElementBlock)(n.Fragment,null,(0,n.renderList)(i.list,(t,a)=>((0,n.openBlock)(),(0,n.createBlock)(d,{key:t.uid,filter:l.filter,selector:l.selector,node:t,index:a,focused:l.focused,childsFiled:l.childsFiled,onUpdateExpanded:i.onUpdateExpanded,draggable:l.draggable,droppable:l.droppable},(0,n.createSlots)({_:2},[(0,n.renderList)(e.$slots,(t,l)=>({name:l,fn:(0,n.withCtx)(t=>[(0,n.renderSlot)(e.$slots,l,(0,n.mergeProps)({ref_for:!0},t),void 0,!0)])}))]),1032,["filter","selector","node","index","focused","childsFiled","onUpdateExpanded","draggable","droppable"]))),128))])],42,a)}],["__scopeId","data-v-48ce72d0"]])},5075:(e,t,l)=>{l.r(t),l.d(t,{ActionEdit:()=>st.A,ActionItem:()=>ot,ActionsLib:()=>tt,AudioControl:()=>fe,BoolEdit:()=>te.A,Buttons:()=>S,CustomInput:()=>y,DimensionsEdit:()=>Ge.A,EditColor:()=>we,ElementView:()=>V,EulerBlock:()=>Ve.A,ExpandedButton:()=>n.A,ExtMenu:()=>p.A,FileSelect:()=>_e,Float:()=>ce,FloatBlock:()=>ye.A,FontSize:()=>Xe.A,Icon:()=>a.A,ImageView:()=>$e,Int:()=>oe,ItemsLib:()=>rt.A,Label:()=>qe.A,LabelEdit:()=>Be.A,LoginForm:()=>ut.A,Modal:()=>o.A,PopupList:()=>r.A,ProjectItem:()=>it.A,QuaternionBlock:()=>ke.A,RadioButton:()=>T,SearchFilter:()=>j,SectionSelect:()=>ze,Selectable:()=>H,ShadowEdit:()=>We.A,SimpleButton:()=>s.A,SlideBlock:()=>U.A,Spinner:()=>d.A,TextColorEdit:()=>He.A,TextEdit:()=>Ne.A,Toast:()=>u.A,Toasts:()=>c.A,ToggleButton:()=>i.A,TransformEdit:()=>Se.A,TreeLi:()=>P.A,TwoSideBool:()=>Ue,UILabel:()=>pt.A,V3:()=>be.A,V3block:()=>Ee.A,confirmform:()=>ct.A,params:()=>re.A,queryform:()=>dt.A,vlist:()=>ee});var n=l(823),a=l(6222),o=l(8287),r=l(3373),s=l(5499),i=l(2262),d=l(8663),c=l(7546),u=l(2859),p=l(1255),m=l(2015);const h={class:"input-wrapper"},v=["type","value","placeholder"],g={name:"MinimalInput",props:{type:{type:String,default:"text"},value:{type:[String,Number],default:""},placeholder:{type:String,default:""}},emits:["update:value"]};var f=l(6262);const y=(0,f.A)(g,[["render",function(e,t,l,n,a,o){return(0,m.openBlock)(),(0,m.createElementBlock)("div",h,[(0,m.createElementVNode)("input",{type:l.type,value:l.value,onInput:t[0]||(t[0]=t=>e.$emit("update:value",t.target.value)),placeholder:l.placeholder,class:"input-field"},null,40,v)])}],["__scopeId","data-v-f47b63dc"]]),b=["value"],E={name:"Elements",props:{modelValue:{type:String}},data:()=>({element:null,list:[]}),mounted(){this.list=this.$app.engine.getFactory().Elements},computed:{val:{get(){return this.modelValue},set(e){this.$emit("update:modelValue",e)}}}},V=(0,f.A)(E,[["render",function(e,t,l,n,a,o){return(0,m.openBlock)(),(0,m.createElementBlock)("div",null,[(0,m.withDirectives)((0,m.createElementVNode)("select",{"onUpdate:modelValue":t[0]||(t[0]=e=>o.val=e),class:"form-select"},[((0,m.openBlock)(!0),(0,m.createElementBlock)(m.Fragment,null,(0,m.renderList)(a.list,e=>((0,m.openBlock)(),(0,m.createElementBlock)("option",{value:e.path},(0,m.toDisplayString)(e.name),9,b))),256))],512),[[m.vModelSelect,o.val]])])}]]),k={class:"radio-group"},N=["onClick"],B={name:"RadioButton",props:{buttons:{type:Array,required:!0},value:{type:Object}}},S=(0,f.A)(B,[["render",function(e,t,l,n,a,o){return(0,m.openBlock)(),(0,m.createElementBlock)("div",k,[((0,m.openBlock)(!0),(0,m.createElementBlock)(m.Fragment,null,(0,m.renderList)(l.buttons,(e,t)=>((0,m.openBlock)(),(0,m.createElementBlock)("button",{key:t,class:"btn",onClick:t=>e.handler(l.value)},(0,m.toDisplayString)(e.label),9,N))),128))])}],["__scopeId","data-v-48e97626"]]),D={class:"radio-group"},C={class:"radio-label"},A=["name","value","checked","disabled","onChange"],w={class:"radio-custom"},x={class:"radio-text"},F={class:"radio-default-label"},I={name:"RadioButton",props:{options:{type:[Array,Number],required:!0,validator:e=>Array.isArray(e)||"number"==typeof e&&e>0},modelValue:{type:[String,Number,Boolean,Object],default:null},name:{type:String,default:"radio-group"},disabled:{type:Boolean,default:!1},valueKey:{type:String,default:"value"},labelKey:{type:String,default:"label"}},emits:["update:modelValue","change"],computed:{normalizedOptions(){return"number"==typeof this.options?Array.from({length:this.options},(e,t)=>t+1):this.options}},methods:{getOptionValue(e){return"object"==typeof e&&null!==e&&(e[this.valueKey]||e.value)||e},getOptionLabel(e){return"object"==typeof e&&null!==e?e[this.labelKey]||e.label||this.getOptionValue(e):e},isChecked(e){return this.getOptionValue(e)===this.modelValue},handleChange(e){const t=this.getOptionValue(e);this.$emit("update:modelValue",t),this.$emit("change",t)}}},T=(0,f.A)(I,[["render",function(e,t,l,n,a,o){return(0,m.openBlock)(),(0,m.createElementBlock)("div",D,[((0,m.openBlock)(!0),(0,m.createElementBlock)(m.Fragment,null,(0,m.renderList)(l.options,(t,n)=>((0,m.openBlock)(),(0,m.createElementBlock)("div",{key:n,class:(0,m.normalizeClass)(["radio-item",{"radio-item--disabled":l.disabled}])},[(0,m.createElementVNode)("label",C,[(0,m.createElementVNode)("input",{type:"radio",name:l.name,value:o.getOptionValue(t),checked:o.isChecked(t),disabled:l.disabled,onChange:e=>o.handleChange(t),class:"radio-input"},null,40,A),(0,m.createCommentVNode)(" Кастомная кнопка через слот "),(0,m.createElementVNode)("span",w,[(0,m.renderSlot)(e.$slots,"button",{option:t,index:n,checked:o.isChecked(t)},()=>[(0,m.createElementVNode)("span",{class:(0,m.normalizeClass)(["radio-default-button",{"radio-default-button--checked":o.isChecked(t)}])},null,2)],!0)]),(0,m.createCommentVNode)(" Кастомная надпись через слот "),(0,m.createElementVNode)("span",x,[(0,m.renderSlot)(e.$slots,"label",{option:t,index:n,checked:o.isChecked(t)},()=>[(0,m.createElementVNode)("span",F,(0,m.toDisplayString)(o.getOptionLabel(t)),1)],!0)])])],2))),128))])}],["__scopeId","data-v-65d75466"]]),$={class:"search-filter"},L={class:"search-input-container"},M=["placeholder"],O=["disabled"],_={name:"SearchFilter",props:{value:{type:String,default:""},placeholder:{type:String,default:"Enter text to search..."},debounce:{type:Number,default:300},label:{type:String,default:""},button:{type:String,default:"Search"}},data(){return{searchValue:this.value,debounceTimer:null}},watch:{value(e){this.searchValue=e}},methods:{handleInput(){console.log("handleInput"),this.debounceTimer&&clearTimeout(this.debounceTimer),this.debounceTimer=setTimeout(()=>{this.$emit("input",this.searchValue),this.$emit("change",this.searchValue)},this.debounce)},handleSearch(){this.searchValue.trim()&&(this.debounceTimer&&(clearTimeout(this.debounceTimer),this.debounceTimer=null),this.$emit("search",this.searchValue))},beforeUnmount(){this.debounceTimer&&clearTimeout(this.debounceTimer)}}},j=(0,f.A)(_,[["render",function(e,t,l,n,a,o){return(0,m.openBlock)(),(0,m.createElementBlock)("div",$,[(0,m.createElementVNode)("div",L,[(0,m.createElementVNode)("div",null,(0,m.toDisplayString)(l.label),1),(0,m.withDirectives)((0,m.createElementVNode)("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>a.searchValue=e),type:"text",class:"search-input",placeholder:l.placeholder,onInput:t[1]||(t[1]=(0,m.withModifiers)((...e)=>o.handleInput&&o.handleInput(...e),["stop"])),onKeyup:t[2]||(t[2]=(0,m.withKeys)((...e)=>o.handleSearch&&o.handleSearch(...e),["enter"]))},null,40,M),[[m.vModelText,a.searchValue]]),(0,m.createElementVNode)("button",{class:"search-button",onClick:t[3]||(t[3]=(...e)=>o.handleSearch&&o.handleSearch(...e)),disabled:!a.searchValue.trim()},[(0,m.renderSlot)(e.$slots,"button-content",{},()=>[(0,m.createElementVNode)("span",null,(0,m.toDisplayString)(l.button),1)],!0)],8,O)])])}],["__scopeId","data-v-7caf0ae1"]]);var U=l(2300),P=l(5805);const K={class:"selectable-container"},R={class:"list"},z={class:"grid"},q=["onClick"],W={key:0,class:"info"},G={name:"ActionsLib",data:()=>({current:null}),props:{list:{type:Array},selected:{type:Object}},watch:{selected(e,t){this.current=e}},emits:["selectItem"],methods:{onItemSelect(e){this.$emit("selectItem",e)}}},H=(0,f.A)(G,[["render",function(e,t,l,n,a,o){return(0,m.openBlock)(),(0,m.createElementBlock)("div",K,[(0,m.createElementVNode)("div",R,[(0,m.createElementVNode)("div",z,[((0,m.openBlock)(!0),(0,m.createElementBlock)(m.Fragment,null,(0,m.renderList)(l.list,(t,l)=>((0,m.openBlock)(),(0,m.createElementBlock)("div",{onClick:e=>o.onItemSelect(t),class:"grid-element",key:l},[(0,m.renderSlot)(e.$slots,"item",{item:t})],8,q))),128))])]),a.current?((0,m.openBlock)(),(0,m.createElementBlock)("div",W,[(0,m.renderSlot)(e.$slots,"selected",{item:a.current})])):(0,m.createCommentVNode)("v-if",!0)])}]]),X={class:"vlist-container"},Y={class:"list"},Q={class:"vlist"},J=["onClick"],Z={name:"ActionsLib",data:()=>({current:null}),props:{list:{type:Array},selected:{type:Object}},watch:{selected(e,t){this.current=e}},emits:["selectItem"],methods:{onItemSelect(e){this.$emit("selectItem",e)}}},ee=(0,f.A)(Z,[["render",function(e,t,l,n,a,o){return(0,m.openBlock)(),(0,m.createElementBlock)("div",X,[(0,m.createElementVNode)("div",Y,[(0,m.createElementVNode)("div",Q,[((0,m.openBlock)(!0),(0,m.createElementBlock)(m.Fragment,null,(0,m.renderList)(l.list,(t,l)=>((0,m.openBlock)(),(0,m.createElementBlock)("div",{onClick:e=>o.onItemSelect(t),class:"vlist-element",key:l},[(0,m.renderSlot)(e.$slots,"item",{item:t})],8,J))),128))])])])}]]);var te=l(9482);const le={class:"comma-number-input-wrapper"},ne={class:"arrow-buttons"},ae={name:"input-float",props:{value:Object,modelValue:Number,step:{type:Number,default:1},min:{type:Number,default:Number.MIN_SAFE_INTEGER},max:{type:Number,default:Number.MAX_SAFE_INTEGER}},data:()=>({interval:null,separator:",",isPressed:!1,changeSpeed:100}),computed:{formattedValue:{get(){return this.modelValue},set(e){console.log(e),this.parseNumber(e),this.$emit("update:modelValue",e)}}},mounted(){const e=(new Intl.NumberFormat).format(this.modelValue);this.separator=e.charAt(1),this.$refs.input.addEventListener("wheel",this.onWheel,{passive:!1})},beforeDestroy(){this.$refs.input.removeEventListener("wheel",this.onWheel)},methods:{onFocus(){this.$nextTick(()=>{this.$refs.input.select()})},parseNumber(e){try{const t=parseFloat(e.replace(",","."));return isNaN(t)?this.modelValue:t}catch(e){return this.modelValue}},formatNumber:e=>parseFloat(e).toFixed(0).replace(".",","),onInput(e){this.formattedValue=e.target.modelValue},onWheel(e){e.preventDefault(),e.stopPropagation(),document.activeElement===this.$refs.input&&this.changeValue(e.deltaY>0?-this.step:this.step)},onKeyDown(e){"ArrowUp"===e.key?(this.changeValue(this.step),e.preventDefault()):"ArrowDown"===e.key&&(this.changeValue(-this.step),e.preventDefault())},changeValue(e){let t=(this.modelValue||0)+e;t=Math.max(Math.min(t,this.max),this.min),this.$emit("update:modelValue",parseFloat(t.toFixed(0)))},startIncrement(){this.interval&&clearInterval(this.interval),this.isPressed=!0,this.changeValue(this.step),setTimeout(()=>{this.isPressed&&(this.interval=setInterval(()=>this.changeValue(this.step),50))},400)},startDecrement(){this.interval&&clearInterval(this.interval),this.isPressed=!0,this.changeValue(-this.step),setTimeout(()=>{this.isPressed&&(this.interval=setInterval(()=>this.changeValue(-this.step),50))},400)},stopChange(){this.isPressed=!1,clearInterval(this.interval)}}},oe=(0,f.A)(ae,[["render",function(e,t,l,n,a,o){return(0,m.openBlock)(),(0,m.createElementBlock)("div",le,[(0,m.withDirectives)((0,m.createElementVNode)("input",{ref:"input","onUpdate:modelValue":t[0]||(t[0]=e=>o.formattedValue=e),onKeydown:t[1]||(t[1]=(...e)=>o.onKeyDown&&o.onKeyDown(...e)),onDblclick:t[2]||(t[2]=(...e)=>o.onFocus&&o.onFocus(...e)),class:"comma-number-input"},null,544),[[m.vModelText,o.formattedValue,void 0,{number:!0}]]),(0,m.createElementVNode)("div",ne,[(0,m.createElementVNode)("button",{onMousedown:t[3]||(t[3]=(...e)=>o.startIncrement&&o.startIncrement(...e)),onMouseup:t[4]||(t[4]=(...e)=>o.stopChange&&o.stopChange(...e)),onMouseleave:t[5]||(t[5]=(...e)=>o.stopChange&&o.stopChange(...e))},"▲",32),(0,m.createElementVNode)("button",{onMousedown:t[6]||(t[6]=(...e)=>o.startDecrement&&o.startDecrement(...e)),onMouseup:t[7]||(t[7]=(...e)=>o.stopChange&&o.stopChange(...e)),onMouseleave:t[8]||(t[8]=(...e)=>o.stopChange&&o.stopChange(...e))},"▼",32)])])}]]);var re=l(8549);const se={class:"comma-number-input-wrapper"},ie={class:"arrow-buttons"},de={name:"CommaNumberInput",props:{modelValue:Number,step:{type:Number,default:.1},min:{type:Number,default:Number.MIN_SAFE_INTEGER},max:{type:Number,default:Number.MAX_SAFE_INTEGER},decimals:{type:Number,default:2}},data:()=>({interval:null,separator:",",isPressed:!1,changeSpeed:100}),computed:{formattedValue:{get(){return this.modelValue},set(e){const t=this.parseNumber(e);this.$emit("update:modelValue",t)}}},mounted(){const e=(new Intl.NumberFormat).format(this.modelValue);this.separator=e.charAt(1),this.$refs.input.addEventListener("wheel",this.onWheel,{passive:!1})},beforeDestroy(){this.$refs.input.removeEventListener("wheel",this.onWheel)},methods:{onFocus(){this.$nextTick(()=>{this.$refs.input.select()})},parseNumber(e){try{const t=parseFloat(e.replace(",","."));return isNaN(t)?this.modelValue:t}catch(e){return this.modelValue}},formatNumber(e){return parseFloat(e).toFixed(this.decimals).replace(".",",")},onInput(e){this.formattedValue=e.target.modelValue},onWheel(e){e.preventDefault(),e.stopPropagation(),document.activeElement===this.$refs.input&&this.changeValue(e.deltaY>0?-this.step:this.step)},onKeyDown(e){"ArrowUp"===e.key?(this.changeValue(this.step),e.preventDefault()):"ArrowDown"===e.key&&(this.changeValue(-this.step),e.preventDefault())},changeValue(e){let t=(this.modelValue||0)+e;t=Math.max(Math.min(t,this.max),this.min),this.$emit("update:modelValue",parseFloat(t.toFixed(this.decimals)))},startIncrement(){this.interval&&clearInterval(this.interval),this.isPressed=!0,this.changeValue(this.step),setTimeout(()=>{this.isPressed&&(this.interval=setInterval(()=>this.changeValue(this.step),50))},400)},startDecrement(){this.interval&&clearInterval(this.interval),this.isPressed=!0,this.changeValue(-this.step),setTimeout(()=>{this.isPressed&&(this.interval=setInterval(()=>this.changeValue(-this.step),50))},400)},stopChange(){this.isPressed=!1,clearInterval(this.interval)}}},ce=(0,f.A)(de,[["render",function(e,t,l,n,a,o){return(0,m.openBlock)(),(0,m.createElementBlock)("div",se,[(0,m.withDirectives)((0,m.createElementVNode)("input",{ref:"input",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>o.formattedValue=e),onKeydown:t[1]||(t[1]=(...e)=>o.onKeyDown&&o.onKeyDown(...e)),onDblclick:t[2]||(t[2]=(...e)=>o.onFocus&&o.onFocus(...e)),class:"comma-number-input"},null,544),[[m.vModelText,o.formattedValue]]),(0,m.createElementVNode)("div",ie,[(0,m.createElementVNode)("button",{onMousedown:t[3]||(t[3]=(...e)=>o.startIncrement&&o.startIncrement(...e)),onMouseup:t[4]||(t[4]=(...e)=>o.stopChange&&o.stopChange(...e)),onMouseleave:t[5]||(t[5]=(...e)=>o.stopChange&&o.stopChange(...e))},"▲",32),(0,m.createElementVNode)("button",{onMousedown:t[6]||(t[6]=(...e)=>o.startDecrement&&o.startDecrement(...e)),onMouseup:t[7]||(t[7]=(...e)=>o.stopChange&&o.stopChange(...e)),onMouseleave:t[8]||(t[8]=(...e)=>o.stopChange&&o.stopChange(...e))},"▼",32)])])}]]),ue={class:"control-container"},pe=["max"],me={class:"buttons"},he=["disabled"],ve=["disabled"],ge={__name:"playcontrol",props:{modelValue:{type:Object},selected:{type:Object},value:{type:Object},target:{type:Object},property:{type:Object}},setup(e){const t=e,l=(0,m.ref)(!1),n=(0,m.ref)(0),a=(0,m.ref)(0),o=(0,m.ref)(0),r=(0,m.ref)(!1),s=(0,m.ref)(!1);function i(){const e=t.modelValue;s.value?e.pause():e.play()}function d(){t.modelValue.pause(),t.modelValue.currentTime=0}function c(){r.value=!1;const e=t.modelValue;if(l.value&&o.value<=e.duration)if(e.readyState<2){const t=()=>{e.currentTime=o.value,e.removeEventListener("canplay",t)};e.addEventListener("canplay",t),e.load()}else e.currentTime=o.value}function u(e){return!e||isNaN(e)?"0:00":`${Math.floor(e/60)}:${Math.floor(e%60).toString().padStart(2,"0")}`}return(0,m.onMounted)(()=>{const e=t.modelValue,i=()=>{e.readyState>=1&&(n.value=e.duration,l.value=!0)},d=()=>{r.value||(a.value=e.currentTime,o.value=e.currentTime)},c=()=>s.value=!0,u=()=>s.value=!1,p=()=>s.value=!1;e.addEventListener("loadedmetadata",i),e.addEventListener("canplay",i),e.addEventListener("timeupdate",d),e.addEventListener("play",c),e.addEventListener("playing",c),e.addEventListener("pause",u),e.addEventListener("ended",p),i(),(0,m.onUnmounted)(()=>{e.removeEventListener("loadedmetadata",i),e.removeEventListener("canplay",i),e.removeEventListener("timeupdate",d),e.removeEventListener("play",c),e.removeEventListener("playing",c),e.removeEventListener("pause",u),e.removeEventListener("ended",p)})}),(e,t)=>{const p=(0,m.resolveComponent)("icon");return(0,m.openBlock)(),(0,m.createElementBlock)("div",ue,[(0,m.createElementVNode)("span",null,(0,m.toDisplayString)(u(a.value))+" / "+(0,m.toDisplayString)(u(n.value)),1),(0,m.withDirectives)((0,m.createElementVNode)("input",{type:"range",min:"0",max:n.value,step:"0.01","onUpdate:modelValue":t[0]||(t[0]=e=>o.value=e),onMousedown:t[1]||(t[1]=e=>r.value=!0),onMouseup:c,onTouchstart:t[2]||(t[2]=e=>r.value=!0),onTouchend:c},null,40,pe),[[m.vModelText,o.value,void 0,{number:!0}]]),(0,m.createElementVNode)("div",me,[(0,m.createElementVNode)("button",{class:"btn square",onClick:i,disabled:!l.value},[(0,m.createVNode)(p,{value:s.value?"pause2":"play3"},null,8,["value"])],8,he),(0,m.createCommentVNode)(' <button class="btn square" @click="pause" :disabled="!ready">\r\n                <icon value="pause2"></icon>\r\n            </button> '),(0,m.createElementVNode)("button",{class:"btn square",onClick:d,disabled:!l.value},[(0,m.createVNode)(p,{value:"stop2"})],8,ve)])])}}},fe=(0,f.A)(ge,[["__scopeId","data-v-ae734b3c"]]);var ye=l(8992),be=l(4910),Ee=l(8193),Ve=l(8493),ke=l(2578),Ne=l(4831),Be=l(320),Se=l(7520);const De={style:{display:"grid","grid-template-columns":"96px 1fr"}};var Ce=l(4875);const Ae={name:"EditColor",props:{modelValue:{type:Object}},computed:{val:{get(){return`#${this.modelValue?.getHexString()||"ffffff"}`},set(e){this.modelValue&&this.modelValue.set(e),this.$emit("update:modelValue",this.modelValue||new Ce.Color(e))}}}},we=(0,f.A)(Ae,[["render",function(e,t,l,n,a,o){return(0,m.openBlock)(),(0,m.createElementBlock)("div",De,[(0,m.withDirectives)((0,m.createElementVNode)("input",{style:{width:"100%"},ref:"col",type:"color","onUpdate:modelValue":t[0]||(t[0]=e=>o.val=e)},null,512),[[m.vModelText,o.val]])])}]]),xe={class:"image-container"},Fe={ref:"canva"},Ie={key:0,class:"selector"},Te={props:{modelValue:{type:Object,default:null},value:{type:Object},label:{type:String,default:""},tooltip:{type:String,default:""},selectable:{type:Boolean}},data:()=>({txtr:null}),watch:{value(e){this.redraw()}},methods:{onUpdate({result:e,file:t}){console.log(e);const l=new Blob([e],{type:t.type}),n=URL.createObjectURL(l);this.txtr=n;const a=(new THREE.TextureLoader).load(n,()=>{URL.revokeObjectURL(n)});this.$emit("update:modelValue",a.image),this.$app.storage.writeFile("texture.png",e)}},methods:{redraw(){const e=this.$refs.canva,t=e.getContext("2d");if(t.clearRect(0,0,e.width,e.height),this.value?.resource?.image)try{console.log(this.value);const l=this.value.resource.image;e.width=l.width,e.height=l.height,t.drawImage(l,0,0)}catch(e){}}},mounted(){this.redraw()}},$e=(0,f.A)(Te,[["render",function(e,t,l,n,a,o){return(0,m.openBlock)(),(0,m.createElementBlock)("div",xe,[(0,m.createCommentVNode)(' <FileSelect @update:modelValue="onUpdate" acceptedTypes="image/\\*" /> '),(0,m.createElementVNode)("canvas",Fe,null,512),l.selectable?((0,m.openBlock)(),(0,m.createElementBlock)("div",Ie,[(0,m.createElementVNode)("button",{onClick:t[0]||(t[0]=t=>e.$emit("select"))},"SELECT")])):(0,m.createCommentVNode)("v-if",!0)])}]]),Le={class:"image-uploader"},Me=["accept"],Oe={name:"FileSelect",props:{buttonText:{type:String,default:"Select Image"},maxFileSize:{type:Number,default:5242880},acceptedTypes:{type:String,default:"image/*"}},methods:{triggerFileInput(){this.$refs.fileInput.click()},handleFileSelect(e){const t=e.target.files[0];if(!t)return;if(console.log(t),!t.type.match(this.acceptedTypes.replace("*",".*")))return void this.$emit("error","Invalid file type");if(t.size>this.maxFileSize)return void this.$emit("error",`File is too large (max ${this.maxFileSize/1024/1024}MB)`);const l=new FileReader;l.onload=e=>{this.$emit("update:modelValue",{result:e.target.result,file:t})},l.onerror=()=>this.$emit("error","Failed to read file"),l.readAsArrayBuffer(t),e.target.value=""}}},_e=(0,f.A)(Oe,[["render",function(e,t,l,n,a,o){return(0,m.openBlock)(),(0,m.createElementBlock)("div",Le,[(0,m.createElementVNode)("button",{onClick:t[0]||(t[0]=(...e)=>o.triggerFileInput&&o.triggerFileInput(...e)),class:"upload-button"},(0,m.toDisplayString)(l.buttonText),1),(0,m.createElementVNode)("input",{type:"file",ref:"fileInput",accept:l.acceptedTypes,onChange:t[1]||(t[1]=(...e)=>o.handleFileSelect&&o.handleFileSelect(...e)),style:{display:"none"}},null,40,Me)])}]]),je={__name:"twosidebool",props:{modelValue:{type:Boolean,default:!1},labels:{type:Array}},emits:["update:modelValue"],setup(e,{emit:t}){const l=e,n=t,a=()=>{n("update:modelValue",!l.modelValue)};return(t,l)=>((0,m.openBlock)(),(0,m.createElementBlock)("div",{class:"toggle-switch",onClick:a},[(0,m.createElementVNode)("div",{class:(0,m.normalizeClass)(["slider",{active:e.modelValue}])},[(0,m.createElementVNode)("span",{class:(0,m.normalizeClass)(["left-label",{active:!e.modelValue}])},[(0,m.renderSlot)(t.$slots,"left",{},()=>[(0,m.createTextVNode)((0,m.toDisplayString)(e.labels[0]),1)])],2),l[0]||(l[0]=(0,m.createElementVNode)("span",{class:"knob"},null,-1)),(0,m.createElementVNode)("span",{class:(0,m.normalizeClass)(["right-label",{active:e.modelValue}])},[(0,m.renderSlot)(t.$slots,"right",{},()=>[(0,m.createTextVNode)((0,m.toDisplayString)(e.labels[1]),1)])],2)],2)]))}},Ue=(0,f.A)(je,[["__scopeId","data-v-27cb6eff"]]),Pe={class:"text-align-editor"},Ke=["value"],Re={__name:"sectionselect",props:{modelValue:{type:String,default:"center"},list:{type:Array,default:[]}},emits:["update:modelValue"],setup(e,{emit:t}){const l=e,n=t,a=(0,m.ref)(l.modelValue);(0,m.watch)(()=>l.modelValue,e=>{e!==a.value&&(a.value=e)});const o=()=>n("update:modelValue",a.value);return(t,l)=>((0,m.openBlock)(),(0,m.createElementBlock)("div",Pe,[(0,m.withDirectives)((0,m.createElementVNode)("select",{"onUpdate:modelValue":l[0]||(l[0]=e=>a.value=e),onChange:o},[((0,m.openBlock)(!0),(0,m.createElementBlock)(m.Fragment,null,(0,m.renderList)(e.list,e=>((0,m.openBlock)(),(0,m.createElementBlock)("option",{value:e.value},(0,m.toDisplayString)(e.label||e.value),9,Ke))),256))],544),[[m.vModelSelect,a.value]])]))}},ze=(0,f.A)(Re,[["__scopeId","data-v-57114c76"]]);var qe=l(1720),We=l(9912),Ge=l(7872),He=l(3733),Xe=l(2489);const Ye={class:"textwrap w100 tcenter"},Qe={class:"textwrap w100 tcenter"},Je={key:0,style:{"min-width":"256px",height:"100%",display:"flex","justify-content":"center","align-items":"center"}},Ze={tweens:"move-up"},et={name:"ActionsLib",props:{selected:{type:Object},regbusy:!1,register:{type:Array}},data:()=>({current:null}),computed:{actions(){return this.$app.actions}},emits:["selectItem"],methods:{onAssetEdit(e,t){this.current[e],this.current[e]=t},getTypeIcon:e=>Ze[e],checkType:e=>typeof e,select(e){this.current=e,this.$emit("selectItem",e)},endEdit(){this.$refs.assetEditor.end()}}},tt=(0,f.A)(et,[["render",function(e,t,l,n,a,o){const r=(0,m.resolveComponent)("spinner"),s=(0,m.resolveComponent)("queryform"),i=(0,m.resolveComponent)("Selectable"),d=(0,m.resolveDirective)("tooltip");return(0,m.openBlock)(),(0,m.createBlock)(m.Teleport,{to:".modal-content"},[(0,m.createVNode)(i,{onSelectItem:o.select,list:o.actions.library,selected:l.selected},(0,m.createSlots)({item:(0,m.withCtx)(({item:e})=>[(0,m.withDirectives)(((0,m.openBlock)(),(0,m.createElementBlock)("div",Ye,[(0,m.createTextVNode)((0,m.toDisplayString)(e.component),1)])),[[d,e.component]]),(0,m.withDirectives)(((0,m.openBlock)(),(0,m.createElementBlock)("div",Qe,[(0,m.createTextVNode)((0,m.toDisplayString)(e.type),1)])),[[d,e.type]])]),_:2},[l.register?{name:"selected",fn:(0,m.withCtx)(({item:e})=>[l.regbusy?((0,m.openBlock)(),(0,m.createElementBlock)("div",Je,[(0,m.createVNode)(r)])):((0,m.openBlock)(),(0,m.createBlock)(s,{key:1,values:l.register},null,8,["values"]))]),key:"0"}:void 0]),1032,["onSelectItem","list","selected"])])}]]),lt={class:"itemElement"},nt={class:"itemrow"},at={props:{item:{type:Object}}},ot=(0,f.A)(at,[["render",function(e,t,l,n,a,o){return(0,m.openBlock)(),(0,m.createElementBlock)("div",lt,[(0,m.createElementVNode)("div",nt,(0,m.toDisplayString)(l.item.name),1)])}]]);var rt=l(7187),st=l(1849),it=l(1302),dt=l(6416),ct=l(8179),ut=l(9404),pt=l(1431)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
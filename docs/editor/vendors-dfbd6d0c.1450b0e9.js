/*! For license information please see vendors-dfbd6d0c.1450b0e9.js.LICENSE.txt */
"use strict";(self.webpackChunk_reneos_slider_editor=self.webpackChunk_reneos_slider_editor||[]).push([[776],{31:(e,t,n)=>{function o(e){const t=Object.create(null);for(const n of e.split(","))t[n]=1;return e=>e in t}n.r(t),n.d(t,{BaseTransition:()=>po,BaseTransitionPropsValidators:()=>co,Comment:()=>ai,DeprecationTypes:()=>yl,EffectScope:()=>ce,ErrorCodes:()=>cn,ErrorTypeStrings:()=>dl,Fragment:()=>li,KeepAlive:()=>Wo,ReactiveEffect:()=>de,Static:()=>ui,Suspense:()=>ti,Teleport:()=>to,Text:()=>ci,TrackOpTypes:()=>Xt,Transition:()=>Nl,TransitionGroup:()=>kc,TriggerOpTypes:()=>Zt,VueElement:()=>_c,assertNumber:()=>ln,callWithAsyncErrorHandling:()=>un,callWithErrorHandling:()=>an,camelize:()=>N,capitalize:()=>M,cloneVNode:()=>Oi,compatUtils:()=>_l,compile:()=>aa,computed:()=>il,createApp:()=>oa,createBlock:()=>bi,createCommentVNode:()=>Pi,createElementBlock:()=>yi,createElementVNode:()=>ki,createHydrationRenderer:()=>wr,createPropsRestProxy:()=>js,createRenderer:()=>Er,createSSRApp:()=>sa,createSlots:()=>ys,createStaticVNode:()=>Ni,createTextVNode:()=>Ri,createVNode:()=>Ti,customRef:()=>Wt,defineAsyncComponent:()=>jo,defineComponent:()=>yo,defineCustomElement:()=>vc,defineEmits:()=>Os,defineExpose:()=>Rs,defineModel:()=>Fs,defineOptions:()=>Ns,defineProps:()=>As,defineSSRCustomElement:()=>gc,defineSlots:()=>Ps,devtools:()=>hl,effect:()=>ke,effectScope:()=>ae,getCurrentInstance:()=>$i,getCurrentScope:()=>ue,getCurrentWatcher:()=>nn,getTransitionRawChildren:()=>_o,guardReactiveProps:()=>Ai,h:()=>ll,handleError:()=>pn,hasInjectionContext:()=>ir,hydrate:()=>na,hydrateOnIdle:()=>Io,hydrateOnInteraction:()=>Uo,hydrateOnMediaQuery:()=>Do,hydrateOnVisible:()=>Vo,initCustomFormatter:()=>cl,initDirectivesForSSR:()=>ca,inject:()=>rr,isMemoSame:()=>ul,isProxy:()=>At,isReactive:()=>wt,isReadonly:()=>kt,isRef:()=>Ft,isRuntimeOnly:()=>el,isShallow:()=>Tt,isVNode:()=>Ci,markRaw:()=>Rt,mergeDefaults:()=>Us,mergeModels:()=>Bs,mergeProps:()=>Ii,nextTick:()=>yn,normalizeClass:()=>Y,normalizeProps:()=>J,normalizeStyle:()=>W,onActivated:()=>zo,onBeforeMount:()=>es,onBeforeUnmount:()=>ss,onBeforeUpdate:()=>ns,onDeactivated:()=>qo,onErrorCaptured:()=>as,onMounted:()=>ts,onRenderTracked:()=>cs,onRenderTriggered:()=>ls,onScopeDispose:()=>pe,onServerPrefetch:()=>is,onUnmounted:()=>rs,onUpdated:()=>os,onWatcherCleanup:()=>on,openBlock:()=>di,popScopeId:()=>jn,provide:()=>sr,proxyRefs:()=>$t,pushScopeId:()=>Bn,queuePostFlushCb:()=>Sn,reactive:()=>bt,readonly:()=>St,ref:()=>Mt,registerRuntimeCompiler:()=>Qi,render:()=>ta,renderList:()=>_s,renderSlot:()=>bs,resolveComponent:()=>fs,resolveDirective:()=>vs,resolveDynamicComponent:()=>hs,resolveFilter:()=>ml,resolveTransitionHooks:()=>ho,setBlockTracking:()=>mi,setDevtoolsHook:()=>vl,setTransitionHooks:()=>mo,shallowReactive:()=>Ct,shallowReadonly:()=>xt,shallowRef:()=>Lt,ssrContextKey:()=>Fr,ssrUtils:()=>gl,stop:()=>Te,toDisplayString:()=>ne,toHandlerKey:()=>L,toHandlers:()=>Ss,toRaw:()=>Ot,toRef:()=>Gt,toRefs:()=>Kt,toValue:()=>Bt,transformVNodeArgs:()=>xi,triggerRef:()=>Dt,unref:()=>Ut,useAttrs:()=>Is,useCssModule:()=>Cc,useCssVars:()=>Jl,useHost:()=>yc,useId:()=>bo,useModel:()=>$r,useSSRContext:()=>Mr,useShadowRoot:()=>bc,useSlots:()=>Ls,useTemplateRef:()=>So,useTransitionState:()=>io,vModelCheckbox:()=>Lc,vModelDynamic:()=>$c,vModelRadio:()=>Vc,vModelSelect:()=>Dc,vModelText:()=>Mc,vShow:()=>ql,version:()=>pl,warn:()=>fl,watch:()=>Dr,watchEffect:()=>Lr,watchPostEffect:()=>Ir,watchSyncEffect:()=>Vr,withAsyncContext:()=>$s,withCtx:()=>Hn,withDefaults:()=>Ms,withDirectives:()=>Wn,withKeys:()=>Yc,withMemo:()=>al,withModifiers:()=>qc,withScopeId:()=>$n});const s={},r=[],i=()=>{},l=()=>!1,c=e=>111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&(e.charCodeAt(2)>122||e.charCodeAt(2)<97),a=e=>e.startsWith("onUpdate:"),u=Object.assign,p=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},f=Object.prototype.hasOwnProperty,d=(e,t)=>f.call(e,t),h=Array.isArray,v=e=>"[object Map]"===E(e),g=e=>"[object Set]"===E(e),m=e=>"[object Date]"===E(e),_=e=>"function"==typeof e,y=e=>"string"==typeof e,b=e=>"symbol"==typeof e,C=e=>null!==e&&"object"==typeof e,S=e=>(C(e)||_(e))&&_(e.then)&&_(e.catch),x=Object.prototype.toString,E=e=>x.call(e),w=e=>E(e).slice(8,-1),k=e=>"[object Object]"===E(e),T=e=>y(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,A=o(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),O=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},R=/-\w/g,N=O(e=>e.replace(R,e=>e.slice(1).toUpperCase())),P=/\B([A-Z])/g,F=O(e=>e.replace(P,"-$1").toLowerCase()),M=O(e=>e.charAt(0).toUpperCase()+e.slice(1)),L=O(e=>e?`on${M(e)}`:""),I=(e,t)=>!Object.is(e,t),V=(e,...t)=>{for(let n=0;n<e.length;n++)e[n](...t)},D=(e,t,n,o=!1)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,writable:o,value:n})},U=e=>{const t=parseFloat(e);return isNaN(t)?e:t},B=e=>{const t=y(e)?Number(e):NaN;return isNaN(t)?e:t};let j;const $=()=>j||(j="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:{}),H=o("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error,Symbol");function W(e){if(h(e)){const t={};for(let n=0;n<e.length;n++){const o=e[n],s=y(o)?G(o):W(o);if(s)for(const e in s)t[e]=s[e]}return t}if(y(e)||C(e))return e}const K=/;(?![^(]*\))/g,z=/:([^]+)/,q=/\/\*[^]*?\*\//g;function G(e){const t={};return e.replace(q,"").split(K).forEach(e=>{if(e){const n=e.split(z);n.length>1&&(t[n[0].trim()]=n[1].trim())}}),t}function Y(e){let t="";if(y(e))t=e;else if(h(e))for(let n=0;n<e.length;n++){const o=Y(e[n]);o&&(t+=o+" ")}else if(C(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}function J(e){if(!e)return null;let{class:t,style:n}=e;return t&&!y(t)&&(e.class=Y(t)),n&&(e.style=W(n)),e}const X=o("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function Z(e){return!!e||""===e}function Q(e,t){if(e===t)return!0;let n=m(e),o=m(t);if(n||o)return!(!n||!o)&&e.getTime()===t.getTime();if(n=b(e),o=b(t),n||o)return e===t;if(n=h(e),o=h(t),n||o)return!(!n||!o)&&function(e,t){if(e.length!==t.length)return!1;let n=!0;for(let o=0;n&&o<e.length;o++)n=Q(e[o],t[o]);return n}(e,t);if(n=C(e),o=C(t),n||o){if(!n||!o)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e){const o=e.hasOwnProperty(n),s=t.hasOwnProperty(n);if(o&&!s||!o&&s||!Q(e[n],t[n]))return!1}}return String(e)===String(t)}function ee(e,t){return e.findIndex(e=>Q(e,t))}const te=e=>!(!e||!0!==e.__v_isRef),ne=e=>y(e)?e:null==e?"":h(e)||C(e)&&(e.toString===x||!_(e.toString))?te(e)?ne(e.value):JSON.stringify(e,oe,2):String(e),oe=(e,t)=>te(t)?oe(e,t.value):v(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((e,[t,n],o)=>(e[se(t,o)+" =>"]=n,e),{})}:g(t)?{[`Set(${t.size})`]:[...t.values()].map(e=>se(e))}:b(t)?se(t):!C(t)||h(t)||k(t)?t:String(t),se=(e,t="")=>{var n;return b(e)?`Symbol(${null!=(n=e.description)?n:t})`:e};function re(e){return null==e?"initial":"string"==typeof e?""===e?" ":e:("number"==typeof e&&Number.isFinite(e),String(e))}let ie,le;class ce{constructor(e=!1){this.detached=e,this._active=!0,this._on=0,this.effects=[],this.cleanups=[],this._isPaused=!1,this.parent=ie,!e&&ie&&(this.index=(ie.scopes||(ie.scopes=[])).push(this)-1)}get active(){return this._active}pause(){if(this._active){let e,t;if(this._isPaused=!0,this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].pause();for(e=0,t=this.effects.length;e<t;e++)this.effects[e].pause()}}resume(){if(this._active&&this._isPaused){let e,t;if(this._isPaused=!1,this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].resume();for(e=0,t=this.effects.length;e<t;e++)this.effects[e].resume()}}run(e){if(this._active){const t=ie;try{return ie=this,e()}finally{ie=t}}}on(){1===++this._on&&(this.prevScope=ie,ie=this)}off(){this._on>0&&0===--this._on&&(ie=this.prevScope,this.prevScope=void 0)}stop(e){if(this._active){let t,n;for(this._active=!1,t=0,n=this.effects.length;t<n;t++)this.effects[t].stop();for(this.effects.length=0,t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.cleanups.length=0,this.scopes){for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);this.scopes.length=0}if(!this.detached&&this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.parent=void 0}}}function ae(e){return new ce(e)}function ue(){return ie}function pe(e,t=!1){ie&&ie.cleanups.push(e)}const fe=new WeakSet;class de{constructor(e){this.fn=e,this.deps=void 0,this.depsTail=void 0,this.flags=5,this.next=void 0,this.cleanup=void 0,this.scheduler=void 0,ie&&ie.active&&ie.effects.push(this)}pause(){this.flags|=64}resume(){64&this.flags&&(this.flags&=-65,fe.has(this)&&(fe.delete(this),this.trigger()))}notify(){2&this.flags&&!(32&this.flags)||8&this.flags||me(this)}run(){if(!(1&this.flags))return this.fn();this.flags|=2,Pe(this),be(this);const e=le,t=Ae;le=this,Ae=!0;try{return this.fn()}finally{Ce(this),le=e,Ae=t,this.flags&=-3}}stop(){if(1&this.flags){for(let e=this.deps;e;e=e.nextDep)Ee(e);this.deps=this.depsTail=void 0,Pe(this),this.onStop&&this.onStop(),this.flags&=-2}}trigger(){64&this.flags?fe.add(this):this.scheduler?this.scheduler():this.runIfDirty()}runIfDirty(){Se(this)&&this.run()}get dirty(){return Se(this)}}let he,ve,ge=0;function me(e,t=!1){if(e.flags|=8,t)return e.next=ve,void(ve=e);e.next=he,he=e}function _e(){ge++}function ye(){if(--ge>0)return;if(ve){let e=ve;for(ve=void 0;e;){const t=e.next;e.next=void 0,e.flags&=-9,e=t}}let e;for(;he;){let t=he;for(he=void 0;t;){const n=t.next;if(t.next=void 0,t.flags&=-9,1&t.flags)try{t.trigger()}catch(t){e||(e=t)}t=n}}if(e)throw e}function be(e){for(let t=e.deps;t;t=t.nextDep)t.version=-1,t.prevActiveLink=t.dep.activeLink,t.dep.activeLink=t}function Ce(e){let t,n=e.depsTail,o=n;for(;o;){const e=o.prevDep;-1===o.version?(o===n&&(n=e),Ee(o),we(o)):t=o,o.dep.activeLink=o.prevActiveLink,o.prevActiveLink=void 0,o=e}e.deps=t,e.depsTail=n}function Se(e){for(let t=e.deps;t;t=t.nextDep)if(t.dep.version!==t.version||t.dep.computed&&(xe(t.dep.computed)||t.dep.version!==t.version))return!0;return!!e._dirty}function xe(e){if(4&e.flags&&!(16&e.flags))return;if(e.flags&=-17,e.globalVersion===Fe)return;if(e.globalVersion=Fe,!e.isSSR&&128&e.flags&&(!e.deps&&!e._dirty||!Se(e)))return;e.flags|=2;const t=e.dep,n=le,o=Ae;le=e,Ae=!0;try{be(e);const n=e.fn(e._value);(0===t.version||I(n,e._value))&&(e.flags|=128,e._value=n,t.version++)}catch(e){throw t.version++,e}finally{le=n,Ae=o,Ce(e),e.flags&=-3}}function Ee(e,t=!1){const{dep:n,prevSub:o,nextSub:s}=e;if(o&&(o.nextSub=s,e.prevSub=void 0),s&&(s.prevSub=o,e.nextSub=void 0),n.subs===e&&(n.subs=o,!o&&n.computed)){n.computed.flags&=-5;for(let e=n.computed.deps;e;e=e.nextDep)Ee(e,!0)}t||--n.sc||!n.map||n.map.delete(n.key)}function we(e){const{prevDep:t,nextDep:n}=e;t&&(t.nextDep=n,e.prevDep=void 0),n&&(n.prevDep=t,e.nextDep=void 0)}function ke(e,t){e.effect instanceof de&&(e=e.effect.fn);const n=new de(e);t&&u(n,t);try{n.run()}catch(e){throw n.stop(),e}const o=n.run.bind(n);return o.effect=n,o}function Te(e){e.effect.stop()}let Ae=!0;const Oe=[];function Re(){Oe.push(Ae),Ae=!1}function Ne(){const e=Oe.pop();Ae=void 0===e||e}function Pe(e){const{cleanup:t}=e;if(e.cleanup=void 0,t){const e=le;le=void 0;try{t()}finally{le=e}}}let Fe=0;class Me{constructor(e,t){this.sub=e,this.dep=t,this.version=t.version,this.nextDep=this.prevDep=this.nextSub=this.prevSub=this.prevActiveLink=void 0}}class Le{constructor(e){this.computed=e,this.version=0,this.activeLink=void 0,this.subs=void 0,this.map=void 0,this.key=void 0,this.sc=0,this.__v_skip=!0}track(e){if(!le||!Ae||le===this.computed)return;let t=this.activeLink;if(void 0===t||t.sub!==le)t=this.activeLink=new Me(le,this),le.deps?(t.prevDep=le.depsTail,le.depsTail.nextDep=t,le.depsTail=t):le.deps=le.depsTail=t,Ie(t);else if(-1===t.version&&(t.version=this.version,t.nextDep)){const e=t.nextDep;e.prevDep=t.prevDep,t.prevDep&&(t.prevDep.nextDep=e),t.prevDep=le.depsTail,t.nextDep=void 0,le.depsTail.nextDep=t,le.depsTail=t,le.deps===t&&(le.deps=e)}return t}trigger(e){this.version++,Fe++,this.notify(e)}notify(e){_e();try{for(let e=this.subs;e;e=e.prevSub)e.sub.notify()&&e.sub.dep.notify()}finally{ye()}}}function Ie(e){if(e.dep.sc++,4&e.sub.flags){const t=e.dep.computed;if(t&&!e.dep.subs){t.flags|=20;for(let e=t.deps;e;e=e.nextDep)Ie(e)}const n=e.dep.subs;n!==e&&(e.prevSub=n,n&&(n.nextSub=e)),e.dep.subs=e}}const Ve=new WeakMap,De=Symbol(""),Ue=Symbol(""),Be=Symbol("");function je(e,t,n){if(Ae&&le){let t=Ve.get(e);t||Ve.set(e,t=new Map);let o=t.get(n);o||(t.set(n,o=new Le),o.map=t,o.key=n),o.track()}}function $e(e,t,n,o,s,r){const i=Ve.get(e);if(!i)return void Fe++;const l=e=>{e&&e.trigger()};if(_e(),"clear"===t)i.forEach(l);else{const s=h(e),r=s&&T(n);if(s&&"length"===n){const e=Number(o);i.forEach((t,n)=>{("length"===n||n===Be||!b(n)&&n>=e)&&l(t)})}else switch((void 0!==n||i.has(void 0))&&l(i.get(n)),r&&l(i.get(Be)),t){case"add":s?r&&l(i.get("length")):(l(i.get(De)),v(e)&&l(i.get(Ue)));break;case"delete":s||(l(i.get(De)),v(e)&&l(i.get(Ue)));break;case"set":v(e)&&l(i.get(De))}}ye()}function He(e){const t=Ot(e);return t===e?t:(je(t,0,Be),Tt(e)?t:t.map(Nt))}function We(e){return je(e=Ot(e),0,Be),e}const Ke={__proto__:null,[Symbol.iterator](){return ze(this,Symbol.iterator,Nt)},concat(...e){return He(this).concat(...e.map(e=>h(e)?He(e):e))},entries(){return ze(this,"entries",e=>(e[1]=Nt(e[1]),e))},every(e,t){return Ge(this,"every",e,t,void 0,arguments)},filter(e,t){return Ge(this,"filter",e,t,e=>e.map(Nt),arguments)},find(e,t){return Ge(this,"find",e,t,Nt,arguments)},findIndex(e,t){return Ge(this,"findIndex",e,t,void 0,arguments)},findLast(e,t){return Ge(this,"findLast",e,t,Nt,arguments)},findLastIndex(e,t){return Ge(this,"findLastIndex",e,t,void 0,arguments)},forEach(e,t){return Ge(this,"forEach",e,t,void 0,arguments)},includes(...e){return Je(this,"includes",e)},indexOf(...e){return Je(this,"indexOf",e)},join(e){return He(this).join(e)},lastIndexOf(...e){return Je(this,"lastIndexOf",e)},map(e,t){return Ge(this,"map",e,t,void 0,arguments)},pop(){return Xe(this,"pop")},push(...e){return Xe(this,"push",e)},reduce(e,...t){return Ye(this,"reduce",e,t)},reduceRight(e,...t){return Ye(this,"reduceRight",e,t)},shift(){return Xe(this,"shift")},some(e,t){return Ge(this,"some",e,t,void 0,arguments)},splice(...e){return Xe(this,"splice",e)},toReversed(){return He(this).toReversed()},toSorted(e){return He(this).toSorted(e)},toSpliced(...e){return He(this).toSpliced(...e)},unshift(...e){return Xe(this,"unshift",e)},values(){return ze(this,"values",Nt)}};function ze(e,t,n){const o=We(e),s=o[t]();return o===e||Tt(e)||(s._next=s.next,s.next=()=>{const e=s._next();return e.value&&(e.value=n(e.value)),e}),s}const qe=Array.prototype;function Ge(e,t,n,o,s,r){const i=We(e),l=i!==e&&!Tt(e),c=i[t];if(c!==qe[t]){const t=c.apply(e,r);return l?Nt(t):t}let a=n;i!==e&&(l?a=function(t,o){return n.call(this,Nt(t),o,e)}:n.length>2&&(a=function(t,o){return n.call(this,t,o,e)}));const u=c.call(i,a,o);return l&&s?s(u):u}function Ye(e,t,n,o){const s=We(e);let r=n;return s!==e&&(Tt(e)?n.length>3&&(r=function(t,o,s){return n.call(this,t,o,s,e)}):r=function(t,o,s){return n.call(this,t,Nt(o),s,e)}),s[t](r,...o)}function Je(e,t,n){const o=Ot(e);je(o,0,Be);const s=o[t](...n);return-1!==s&&!1!==s||!At(n[0])?s:(n[0]=Ot(n[0]),o[t](...n))}function Xe(e,t,n=[]){Re(),_e();const o=Ot(e)[t].apply(e,n);return ye(),Ne(),o}const Ze=o("__proto__,__v_isRef,__isVue"),Qe=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>"arguments"!==e&&"caller"!==e).map(e=>Symbol[e]).filter(b));function et(e){b(e)||(e=String(e));const t=Ot(this);return je(t,0,e),t.hasOwnProperty(e)}class tt{constructor(e=!1,t=!1){this._isReadonly=e,this._isShallow=t}get(e,t,n){if("__v_skip"===t)return e.__v_skip;const o=this._isReadonly,s=this._isShallow;if("__v_isReactive"===t)return!o;if("__v_isReadonly"===t)return o;if("__v_isShallow"===t)return s;if("__v_raw"===t)return n===(o?s?yt:_t:s?mt:gt).get(e)||Object.getPrototypeOf(e)===Object.getPrototypeOf(n)?e:void 0;const r=h(e);if(!o){let e;if(r&&(e=Ke[t]))return e;if("hasOwnProperty"===t)return et}const i=Reflect.get(e,t,Ft(e)?e:n);return(b(t)?Qe.has(t):Ze(t))?i:(o||je(e,0,t),s?i:Ft(i)?r&&T(t)?i:i.value:C(i)?o?St(i):bt(i):i)}}class nt extends tt{constructor(e=!1){super(!1,e)}set(e,t,n,o){let s=e[t];if(!this._isShallow){const t=kt(s);if(Tt(n)||kt(n)||(s=Ot(s),n=Ot(n)),!h(e)&&Ft(s)&&!Ft(n))return t||(s.value=n),!0}const r=h(e)&&T(t)?Number(t)<e.length:d(e,t),i=Reflect.set(e,t,n,Ft(e)?e:o);return e===Ot(o)&&(r?I(n,s)&&$e(e,"set",t,n):$e(e,"add",t,n)),i}deleteProperty(e,t){const n=d(e,t),o=(e[t],Reflect.deleteProperty(e,t));return o&&n&&$e(e,"delete",t,void 0),o}has(e,t){const n=Reflect.has(e,t);return b(t)&&Qe.has(t)||je(e,0,t),n}ownKeys(e){return je(e,0,h(e)?"length":De),Reflect.ownKeys(e)}}class ot extends tt{constructor(e=!1){super(!0,e)}set(e,t){return!0}deleteProperty(e,t){return!0}}const st=new nt,rt=new ot,it=new nt(!0),lt=new ot(!0),ct=e=>e,at=e=>Reflect.getPrototypeOf(e);function ut(e){return function(...t){return"delete"!==e&&("clear"===e?void 0:this)}}function pt(e,t){const n=function(e,t){const n={get(n){const o=this.__v_raw,s=Ot(o),r=Ot(n);e||(I(n,r)&&je(s,0,n),je(s,0,r));const{has:i}=at(s),l=t?ct:e?Pt:Nt;return i.call(s,n)?l(o.get(n)):i.call(s,r)?l(o.get(r)):void(o!==s&&o.get(n))},get size(){const t=this.__v_raw;return!e&&je(Ot(t),0,De),t.size},has(t){const n=this.__v_raw,o=Ot(n),s=Ot(t);return e||(I(t,s)&&je(o,0,t),je(o,0,s)),t===s?n.has(t):n.has(t)||n.has(s)},forEach(n,o){const s=this,r=s.__v_raw,i=Ot(r),l=t?ct:e?Pt:Nt;return!e&&je(i,0,De),r.forEach((e,t)=>n.call(o,l(e),l(t),s))}};return u(n,e?{add:ut("add"),set:ut("set"),delete:ut("delete"),clear:ut("clear")}:{add(e){t||Tt(e)||kt(e)||(e=Ot(e));const n=Ot(this);return at(n).has.call(n,e)||(n.add(e),$e(n,"add",e,e)),this},set(e,n){t||Tt(n)||kt(n)||(n=Ot(n));const o=Ot(this),{has:s,get:r}=at(o);let i=s.call(o,e);i||(e=Ot(e),i=s.call(o,e));const l=r.call(o,e);return o.set(e,n),i?I(n,l)&&$e(o,"set",e,n):$e(o,"add",e,n),this},delete(e){const t=Ot(this),{has:n,get:o}=at(t);let s=n.call(t,e);s||(e=Ot(e),s=n.call(t,e)),o&&o.call(t,e);const r=t.delete(e);return s&&$e(t,"delete",e,void 0),r},clear(){const e=Ot(this),t=0!==e.size,n=e.clear();return t&&$e(e,"clear",void 0,void 0),n}}),["keys","values","entries",Symbol.iterator].forEach(o=>{n[o]=function(e,t,n){return function(...o){const s=this.__v_raw,r=Ot(s),i=v(r),l="entries"===e||e===Symbol.iterator&&i,c="keys"===e&&i,a=s[e](...o),u=n?ct:t?Pt:Nt;return!t&&je(r,0,c?Ue:De),{next(){const{value:e,done:t}=a.next();return t?{value:e,done:t}:{value:l?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}(o,e,t)}),n}(e,t);return(t,o,s)=>"__v_isReactive"===o?!e:"__v_isReadonly"===o?e:"__v_raw"===o?t:Reflect.get(d(n,o)&&o in t?n:t,o,s)}const ft={get:pt(!1,!1)},dt={get:pt(!1,!0)},ht={get:pt(!0,!1)},vt={get:pt(!0,!0)},gt=new WeakMap,mt=new WeakMap,_t=new WeakMap,yt=new WeakMap;function bt(e){return kt(e)?e:Et(e,!1,st,ft,gt)}function Ct(e){return Et(e,!1,it,dt,mt)}function St(e){return Et(e,!0,rt,ht,_t)}function xt(e){return Et(e,!0,lt,vt,yt)}function Et(e,t,n,o,s){if(!C(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const r=(i=e).__v_skip||!Object.isExtensible(i)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}(w(i));var i;if(0===r)return e;const l=s.get(e);if(l)return l;const c=new Proxy(e,2===r?o:n);return s.set(e,c),c}function wt(e){return kt(e)?wt(e.__v_raw):!(!e||!e.__v_isReactive)}function kt(e){return!(!e||!e.__v_isReadonly)}function Tt(e){return!(!e||!e.__v_isShallow)}function At(e){return!!e&&!!e.__v_raw}function Ot(e){const t=e&&e.__v_raw;return t?Ot(t):e}function Rt(e){return!d(e,"__v_skip")&&Object.isExtensible(e)&&D(e,"__v_skip",!0),e}const Nt=e=>C(e)?bt(e):e,Pt=e=>C(e)?St(e):e;function Ft(e){return!!e&&!0===e.__v_isRef}function Mt(e){return It(e,!1)}function Lt(e){return It(e,!0)}function It(e,t){return Ft(e)?e:new Vt(e,t)}class Vt{constructor(e,t){this.dep=new Le,this.__v_isRef=!0,this.__v_isShallow=!1,this._rawValue=t?e:Ot(e),this._value=t?e:Nt(e),this.__v_isShallow=t}get value(){return this.dep.track(),this._value}set value(e){const t=this._rawValue,n=this.__v_isShallow||Tt(e)||kt(e);e=n?e:Ot(e),I(e,t)&&(this._rawValue=e,this._value=n?e:Nt(e),this.dep.trigger())}}function Dt(e){e.dep&&e.dep.trigger()}function Ut(e){return Ft(e)?e.value:e}function Bt(e){return _(e)?e():Ut(e)}const jt={get:(e,t,n)=>"__v_raw"===t?e:Ut(Reflect.get(e,t,n)),set:(e,t,n,o)=>{const s=e[t];return Ft(s)&&!Ft(n)?(s.value=n,!0):Reflect.set(e,t,n,o)}};function $t(e){return wt(e)?e:new Proxy(e,jt)}class Ht{constructor(e){this.__v_isRef=!0,this._value=void 0;const t=this.dep=new Le,{get:n,set:o}=e(t.track.bind(t),t.trigger.bind(t));this._get=n,this._set=o}get value(){return this._value=this._get()}set value(e){this._set(e)}}function Wt(e){return new Ht(e)}function Kt(e){const t=h(e)?new Array(e.length):{};for(const n in e)t[n]=Yt(e,n);return t}class zt{constructor(e,t,n){this._object=e,this._key=t,this._defaultValue=n,this.__v_isRef=!0,this._value=void 0}get value(){const e=this._object[this._key];return this._value=void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}get dep(){return function(e,t){const n=Ve.get(e);return n&&n.get(t)}(Ot(this._object),this._key)}}class qt{constructor(e){this._getter=e,this.__v_isRef=!0,this.__v_isReadonly=!0,this._value=void 0}get value(){return this._value=this._getter()}}function Gt(e,t,n){return Ft(e)?e:_(e)?new qt(e):C(e)&&arguments.length>1?Yt(e,t,n):Mt(e)}function Yt(e,t,n){const o=e[t];return Ft(o)?o:new zt(e,t,n)}class Jt{constructor(e,t,n){this.fn=e,this.setter=t,this._value=void 0,this.dep=new Le(this),this.__v_isRef=!0,this.deps=void 0,this.depsTail=void 0,this.flags=16,this.globalVersion=Fe-1,this.next=void 0,this.effect=this,this.__v_isReadonly=!t,this.isSSR=n}notify(){if(this.flags|=16,!(8&this.flags||le===this))return me(this,!0),!0}get value(){const e=this.dep.track();return xe(this),e&&(e.version=this.dep.version),this._value}set value(e){this.setter&&this.setter(e)}}const Xt={GET:"get",HAS:"has",ITERATE:"iterate"},Zt={SET:"set",ADD:"add",DELETE:"delete",CLEAR:"clear"},Qt={},en=new WeakMap;let tn;function nn(){return tn}function on(e,t=!1,n=tn){if(n){let t=en.get(n);t||en.set(n,t=[]),t.push(e)}}function sn(e,t=1/0,n){if(t<=0||!C(e)||e.__v_skip)return e;if(((n=n||new Map).get(e)||0)>=t)return e;if(n.set(e,t),t--,Ft(e))sn(e.value,t,n);else if(h(e))for(let o=0;o<e.length;o++)sn(e[o],t,n);else if(g(e)||v(e))e.forEach(e=>{sn(e,t,n)});else if(k(e)){for(const o in e)sn(e[o],t,n);for(const o of Object.getOwnPropertySymbols(e))Object.prototype.propertyIsEnumerable.call(e,o)&&sn(e[o],t,n)}return e}const rn=[];function ln(e,t){}const cn={SETUP_FUNCTION:0,0:"SETUP_FUNCTION",RENDER_FUNCTION:1,1:"RENDER_FUNCTION",NATIVE_EVENT_HANDLER:5,5:"NATIVE_EVENT_HANDLER",COMPONENT_EVENT_HANDLER:6,6:"COMPONENT_EVENT_HANDLER",VNODE_HOOK:7,7:"VNODE_HOOK",DIRECTIVE_HOOK:8,8:"DIRECTIVE_HOOK",TRANSITION_HOOK:9,9:"TRANSITION_HOOK",APP_ERROR_HANDLER:10,10:"APP_ERROR_HANDLER",APP_WARN_HANDLER:11,11:"APP_WARN_HANDLER",FUNCTION_REF:12,12:"FUNCTION_REF",ASYNC_COMPONENT_LOADER:13,13:"ASYNC_COMPONENT_LOADER",SCHEDULER:14,14:"SCHEDULER",COMPONENT_UPDATE:15,15:"COMPONENT_UPDATE",APP_UNMOUNT_CLEANUP:16,16:"APP_UNMOUNT_CLEANUP"};function an(e,t,n,o){try{return o?e(...o):e()}catch(e){pn(e,t,n)}}function un(e,t,n,o){if(_(e)){const s=an(e,t,n,o);return s&&S(s)&&s.catch(e=>{pn(e,t,n)}),s}if(h(e)){const s=[];for(let r=0;r<e.length;r++)s.push(un(e[r],t,n,o));return s}}function pn(e,t,n,o=!0){t&&t.vnode;const{errorHandler:r,throwUnhandledErrorInProduction:i}=t&&t.appContext.config||s;if(t){let o=t.parent;const s=t.proxy,i=`https://vuejs.org/error-reference/#runtime-${n}`;for(;o;){const t=o.ec;if(t)for(let n=0;n<t.length;n++)if(!1===t[n](e,s,i))return;o=o.parent}if(r)return Re(),an(r,null,10,[e,s,i]),void Ne()}!function(e,t,n,o=!0,s=!1){if(s)throw e;console.error(e)}(e,0,0,o,i)}const fn=[];let dn=-1;const hn=[];let vn=null,gn=0;const mn=Promise.resolve();let _n=null;function yn(e){const t=_n||mn;return e?t.then(this?e.bind(this):e):t}function bn(e){if(!(1&e.flags)){const t=wn(e),n=fn[fn.length-1];!n||!(2&e.flags)&&t>=wn(n)?fn.push(e):fn.splice(function(e){let t=dn+1,n=fn.length;for(;t<n;){const o=t+n>>>1,s=fn[o],r=wn(s);r<e||r===e&&2&s.flags?t=o+1:n=o}return t}(t),0,e),e.flags|=1,Cn()}}function Cn(){_n||(_n=mn.then(kn))}function Sn(e){h(e)?hn.push(...e):vn&&-1===e.id?vn.splice(gn+1,0,e):1&e.flags||(hn.push(e),e.flags|=1),Cn()}function xn(e,t,n=dn+1){for(;n<fn.length;n++){const t=fn[n];if(t&&2&t.flags){if(e&&t.id!==e.uid)continue;fn.splice(n,1),n--,4&t.flags&&(t.flags&=-2),t(),4&t.flags||(t.flags&=-2)}}}function En(e){if(hn.length){const e=[...new Set(hn)].sort((e,t)=>wn(e)-wn(t));if(hn.length=0,vn)return void vn.push(...e);for(vn=e,gn=0;gn<vn.length;gn++){const e=vn[gn];4&e.flags&&(e.flags&=-2),8&e.flags||e(),e.flags&=-2}vn=null,gn=0}}const wn=e=>null==e.id?2&e.flags?-1:1/0:e.id;function kn(e){try{for(dn=0;dn<fn.length;dn++){const e=fn[dn];!e||8&e.flags||(4&e.flags&&(e.flags&=-2),an(e,e.i,e.i?15:14),4&e.flags||(e.flags&=-2))}}finally{for(;dn<fn.length;dn++){const e=fn[dn];e&&(e.flags&=-2)}dn=-1,fn.length=0,En(),_n=null,(fn.length||hn.length)&&kn(e)}}let Tn,An=[],On=!1;function Rn(e,...t){Tn?Tn.emit(e,...t):On||An.push({event:e,args:t})}function Nn(e,t){var n,o;Tn=e,Tn?(Tn.enabled=!0,An.forEach(({event:e,args:t})=>Tn.emit(e,...t)),An=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null==(o=null==(n=window.navigator)?void 0:n.userAgent)?void 0:o.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push(e=>{Nn(e,t)}),setTimeout(()=>{Tn||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,On=!0,An=[])},3e3)):(On=!0,An=[])}const Pn=In("component:added"),Fn=In("component:updated"),Mn=In("component:removed"),Ln=e=>{Tn&&"function"==typeof Tn.cleanupBuffer&&!Tn.cleanupBuffer(e)&&Mn(e)};function In(e){return t=>{Rn(e,t.appContext.app,t.uid,t.parent?t.parent.uid:void 0,t)}}let Vn=null,Dn=null;function Un(e){const t=Vn;return Vn=e,Dn=e&&e.type.__scopeId||null,t}function Bn(e){Dn=e}function jn(){Dn=null}const $n=e=>Hn;function Hn(e,t=Vn,n){if(!t)return e;if(e._n)return e;const o=(...n)=>{o._d&&mi(-1);const s=Un(t);let r;try{r=e(...n)}finally{Un(s),o._d&&mi(1)}return Fn(t),r};return o._n=!0,o._c=!0,o._d=!0,o}function Wn(e,t){if(null===Vn)return e;const n=sl(Vn),o=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[r,i,l,c=s]=t[e];r&&(_(r)&&(r={mounted:r,updated:r}),r.deep&&sn(i),o.push({dir:r,instance:n,value:i,oldValue:void 0,arg:l,modifiers:c}))}return e}function Kn(e,t,n,o){const s=e.dirs,r=t&&t.dirs;for(let i=0;i<s.length;i++){const l=s[i];r&&(l.oldValue=r[i].value);let c=l.dir[o];c&&(Re(),un(c,n,8,[e.el,l,e,t]),Ne())}}const zn=Symbol("_vte"),qn=e=>e.__isTeleport,Gn=e=>e&&(e.disabled||""===e.disabled),Yn=e=>e&&(e.defer||""===e.defer),Jn=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,Xn=e=>"function"==typeof MathMLElement&&e instanceof MathMLElement,Zn=(e,t)=>{const n=e&&e.to;return y(n)?t?t(n):null:n},Qn={name:"Teleport",__isTeleport:!0,process(e,t,n,o,s,r,i,l,c,a){const{mc:u,pc:p,pbc:f,o:{insert:d,querySelector:h,createText:v,createComment:g}}=a,m=Gn(t.props);let{shapeFlag:_,children:y,dynamicChildren:b}=t;if(null==e){const e=t.el=v(""),a=t.anchor=v("");d(e,n,o),d(a,n,o);const p=(e,t)=>{16&_&&(s&&s.isCE&&(s.ce._teleportTarget=e),u(y,e,t,s,r,i,l,c))},f=()=>{const e=t.target=Zn(t.props,h),n=oo(e,t,v,d);e&&("svg"!==i&&Jn(e)?i="svg":"mathml"!==i&&Xn(e)&&(i="mathml"),m||(p(e,n),no(t,!1)))};m&&(p(n,a),no(t,!0)),Yn(t.props)?(t.el.__isMounted=!1,xr(()=>{f(),delete t.el.__isMounted},r)):f()}else{if(Yn(t.props)&&!1===e.el.__isMounted)return void xr(()=>{Qn.process(e,t,n,o,s,r,i,l,c,a)},r);t.el=e.el,t.targetStart=e.targetStart;const u=t.anchor=e.anchor,d=t.target=e.target,v=t.targetAnchor=e.targetAnchor,g=Gn(e.props),_=g?n:d,y=g?u:v;if("svg"===i||Jn(d)?i="svg":("mathml"===i||Xn(d))&&(i="mathml"),b?(f(e.dynamicChildren,b,_,s,r,i,l),Rr(e,t,!0)):c||p(e,t,_,y,s,r,i,l,!1),m)g?t.props&&e.props&&t.props.to!==e.props.to&&(t.props.to=e.props.to):eo(t,n,u,a,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=Zn(t.props,h);e&&eo(t,e,null,a,0)}else g&&eo(t,d,v,a,1);no(t,m)}},remove(e,t,n,{um:o,o:{remove:s}},r){const{shapeFlag:i,children:l,anchor:c,targetStart:a,targetAnchor:u,target:p,props:f}=e;if(p&&(s(a),s(u)),r&&s(c),16&i){const e=r||!Gn(f);for(let s=0;s<l.length;s++){const r=l[s];o(r,t,n,e,!!r.dynamicChildren)}}},move:eo,hydrate:function(e,t,n,o,s,r,{o:{nextSibling:i,parentNode:l,querySelector:c,insert:a,createText:u}},p){function f(e,t,c,a){t.anchor=p(i(e),t,l(e),n,o,s,r),t.targetStart=c,t.targetAnchor=a}const d=t.target=Zn(t.props,c),h=Gn(t.props);if(d){const l=d._lpa||d.firstChild;if(16&t.shapeFlag)if(h)f(e,t,l,l&&i(l));else{t.anchor=i(e);let c=l;for(;c;){if(c&&8===c.nodeType)if("teleport start anchor"===c.data)t.targetStart=c;else if("teleport anchor"===c.data){t.targetAnchor=c,d._lpa=t.targetAnchor&&i(t.targetAnchor);break}c=i(c)}t.targetAnchor||oo(d,t,u,a),p(l&&i(l),t,d,n,o,s,r)}no(t,h)}else h&&16&t.shapeFlag&&f(e,t,e,i(e));return t.anchor&&i(t.anchor)}};function eo(e,t,n,{o:{insert:o},m:s},r=2){0===r&&o(e.targetAnchor,t,n);const{el:i,anchor:l,shapeFlag:c,children:a,props:u}=e,p=2===r;if(p&&o(i,t,n),(!p||Gn(u))&&16&c)for(let e=0;e<a.length;e++)s(a[e],t,n,2);p&&o(l,t,n)}const to=Qn;function no(e,t){const n=e.ctx;if(n&&n.ut){let o,s;for(t?(o=e.el,s=e.anchor):(o=e.targetStart,s=e.targetAnchor);o&&o!==s;)1===o.nodeType&&o.setAttribute("data-v-owner",n.uid),o=o.nextSibling;n.ut()}}function oo(e,t,n,o){const s=t.targetStart=n(""),r=t.targetAnchor=n("");return s[zn]=r,e&&(o(s,e),o(r,e)),r}const so=Symbol("_leaveCb"),ro=Symbol("_enterCb");function io(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return ts(()=>{e.isMounted=!0}),ss(()=>{e.isUnmounting=!0}),e}const lo=[Function,Array],co={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:lo,onEnter:lo,onAfterEnter:lo,onEnterCancelled:lo,onBeforeLeave:lo,onLeave:lo,onAfterLeave:lo,onLeaveCancelled:lo,onBeforeAppear:lo,onAppear:lo,onAfterAppear:lo,onAppearCancelled:lo},ao=e=>{const t=e.subTree;return t.component?ao(t.component):t};function uo(e){let t=e[0];if(e.length>1){let n=!1;for(const o of e)if(o.type!==ai){t=o,n=!0;break}}return t}const po={name:"BaseTransition",props:co,setup(e,{slots:t}){const n=$i(),o=io();return()=>{const s=t.default&&_o(t.default(),!0);if(!s||!s.length)return;const r=uo(s),i=Ot(e),{mode:l}=i;if(o.isLeaving)return vo(r);const c=go(r);if(!c)return vo(r);let a=ho(c,i,o,n,e=>a=e);c.type!==ai&&mo(c,a);let u=n.subTree&&go(n.subTree);if(u&&u.type!==ai&&!Si(u,c)&&ao(n).type!==ai){let e=ho(u,i,o,n);if(mo(u,e),"out-in"===l&&c.type!==ai)return o.isLeaving=!0,e.afterLeave=()=>{o.isLeaving=!1,8&n.job.flags||n.update(),delete e.afterLeave,u=void 0},vo(r);"in-out"===l&&c.type!==ai?e.delayLeave=(e,t,n)=>{fo(o,u)[String(u.key)]=u,e[so]=()=>{t(),e[so]=void 0,delete a.delayedLeave,u=void 0},a.delayedLeave=()=>{n(),delete a.delayedLeave,u=void 0}}:u=void 0}else u&&(u=void 0);return r}}};function fo(e,t){const{leavingVNodes:n}=e;let o=n.get(t.type);return o||(o=Object.create(null),n.set(t.type,o)),o}function ho(e,t,n,o,s){const{appear:r,mode:i,persisted:l=!1,onBeforeEnter:c,onEnter:a,onAfterEnter:u,onEnterCancelled:p,onBeforeLeave:f,onLeave:d,onAfterLeave:v,onLeaveCancelled:g,onBeforeAppear:m,onAppear:_,onAfterAppear:y,onAppearCancelled:b}=t,C=String(e.key),S=fo(n,e),x=(e,t)=>{e&&un(e,o,9,t)},E=(e,t)=>{const n=t[1];x(e,t),h(e)?e.every(e=>e.length<=1)&&n():e.length<=1&&n()},w={mode:i,persisted:l,beforeEnter(t){let o=c;if(!n.isMounted){if(!r)return;o=m||c}t[so]&&t[so](!0);const s=S[C];s&&Si(e,s)&&s.el[so]&&s.el[so](),x(o,[t])},enter(e){let t=a,o=u,s=p;if(!n.isMounted){if(!r)return;t=_||a,o=y||u,s=b||p}let i=!1;const l=e[ro]=t=>{i||(i=!0,x(t?s:o,[e]),w.delayedLeave&&w.delayedLeave(),e[ro]=void 0)};t?E(t,[e,l]):l()},leave(t,o){const s=String(e.key);if(t[ro]&&t[ro](!0),n.isUnmounting)return o();x(f,[t]);let r=!1;const i=t[so]=n=>{r||(r=!0,o(),x(n?g:v,[t]),t[so]=void 0,S[s]===e&&delete S[s])};S[s]=e,d?E(d,[t,i]):i()},clone(e){const r=ho(e,t,n,o,s);return s&&s(r),r}};return w}function vo(e){if(Ho(e))return(e=Oi(e)).children=null,e}function go(e){if(!Ho(e))return qn(e.type)&&e.children?uo(e.children):e;if(e.component)return e.component.subTree;const{shapeFlag:t,children:n}=e;if(n){if(16&t)return n[0];if(32&t&&_(n.default))return n.default()}}function mo(e,t){6&e.shapeFlag&&e.component?(e.transition=t,mo(e.component.subTree,t)):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function _o(e,t=!1,n){let o=[],s=0;for(let r=0;r<e.length;r++){let i=e[r];const l=null==n?i.key:String(n)+String(null!=i.key?i.key:r);i.type===li?(128&i.patchFlag&&s++,o=o.concat(_o(i.children,t,l))):(t||i.type!==ai)&&o.push(null!=l?Oi(i,{key:l}):i)}if(s>1)for(let e=0;e<o.length;e++)o[e].patchFlag=-2;return o}function yo(e,t){return _(e)?(()=>u({name:e.name},t,{setup:e}))():e}function bo(){const e=$i();return e?(e.appContext.config.idPrefix||"v")+"-"+e.ids[0]+e.ids[1]++:""}function Co(e){e.ids=[e.ids[0]+e.ids[2]+++"-",0,0]}function So(e){const t=$i(),n=Lt(null);if(t){const o=t.refs===s?t.refs={}:t.refs;Object.defineProperty(o,e,{enumerable:!0,get:()=>n.value,set:e=>n.value=e})}return n}const xo=new WeakMap;function Eo(e,t,n,o,r=!1){if(h(e))return void e.forEach((e,s)=>Eo(e,t&&(h(t)?t[s]:t),n,o,r));if(Bo(o)&&!r)return void(512&o.shapeFlag&&o.type.__asyncResolved&&o.component.subTree.component&&Eo(e,t,n,o.component.subTree));const i=4&o.shapeFlag?sl(o.component):o.el,c=r?null:i,{i:a,r:u}=e,f=t&&t.r,v=a.refs===s?a.refs={}:a.refs,g=a.setupState,m=Ot(g),b=g===s?l:e=>d(m,e);if(null!=f&&f!==u)if(wo(t),y(f))v[f]=null,b(f)&&(g[f]=null);else if(Ft(f)){f.value=null;const e=t;e.k&&(v[e.k]=null)}if(_(u))an(u,a,12,[c,v]);else{const t=y(u),o=Ft(u);if(t||o){const s=()=>{if(e.f){const n=t?b(u)?g[u]:v[u]:u.value;if(r)h(n)&&p(n,i);else if(h(n))n.includes(i)||n.push(i);else if(t)v[u]=[i],b(u)&&(g[u]=v[u]);else{const t=[i];u.value=t,e.k&&(v[e.k]=t)}}else t?(v[u]=c,b(u)&&(g[u]=c)):o&&(u.value=c,e.k&&(v[e.k]=c))};if(c){const t=()=>{s(),xo.delete(e)};t.id=-1,xo.set(e,t),xr(t,n)}else wo(e),s()}}}function wo(e){const t=xo.get(e);t&&(t.flags|=8,xo.delete(e))}let ko=!1;const To=()=>{ko||(console.error("Hydration completed but contains mismatches."),ko=!0)},Ao=e=>{if(1===e.nodeType)return(e=>e.namespaceURI.includes("svg")&&"foreignObject"!==e.tagName)(e)?"svg":(e=>e.namespaceURI.includes("MathML"))(e)?"mathml":void 0},Oo=e=>8===e.nodeType;function Ro(e){const{mt:t,p:n,o:{patchProp:o,createText:s,nextSibling:r,parentNode:i,remove:l,insert:a,createComment:u}}=e,p=(n,o,l,c,u,y=!1)=>{y=y||!!o.dynamicChildren;const b=Oo(n)&&"["===n.data,C=()=>v(n,o,l,c,u,b),{type:S,ref:x,shapeFlag:E,patchFlag:w}=o;let k=n.nodeType;o.el=n,D(n,"__vnode",o,!0),D(n,"__vueParentComponent",l,!0),-2===w&&(y=!1,o.dynamicChildren=null);let T=null;switch(S){case ci:3!==k?""===o.children?(a(o.el=s(""),i(n),n),T=n):T=C():(n.data!==o.children&&(To(),n.data=o.children),T=r(n));break;case ai:_(n)?(T=r(n),m(o.el=n.content.firstChild,n,l)):T=8!==k||b?C():r(n);break;case ui:if(b&&(k=(n=r(n)).nodeType),1===k||3===k){T=n;const e=!o.children.length;for(let t=0;t<o.staticCount;t++)e&&(o.children+=1===T.nodeType?T.outerHTML:T.data),t===o.staticCount-1&&(o.anchor=T),T=r(T);return b?r(T):T}C();break;case li:T=b?h(n,o,l,c,u,y):C();break;default:if(1&E)T=1===k&&o.type.toLowerCase()===n.tagName.toLowerCase()||_(n)?f(n,o,l,c,u,y):C();else if(6&E){o.slotScopeIds=u;const e=i(n);if(T=b?g(n):Oo(n)&&"teleport start"===n.data?g(n,n.data,"teleport end"):r(n),t(o,e,null,l,c,Ao(e),y),Bo(o)&&!o.type.__asyncResolved){let t;b?(t=Ti(li),t.anchor=T?T.previousSibling:e.lastChild):t=3===n.nodeType?Ri(""):Ti("div"),t.el=n,o.component.subTree=t}}else 64&E?T=8!==k?C():o.type.hydrate(n,o,l,c,u,y,e,d):128&E&&(T=o.type.hydrate(n,o,l,c,Ao(i(n)),u,y,e,p))}return null!=x&&Eo(x,null,c,o),T},f=(e,t,n,s,r,i)=>{i=i||!!t.dynamicChildren;const{type:a,props:u,patchFlag:p,shapeFlag:f,dirs:h,transition:v}=t,g="input"===a||"option"===a;if(g||-1!==p){h&&Kn(t,null,n,"created");let a,y=!1;if(_(e)){y=Or(null,v)&&n&&n.vnode.props&&n.vnode.props.appear;const o=e.content.firstChild;if(y){const e=o.getAttribute("class");e&&(o.$cls=e),v.beforeEnter(o)}m(o,e,n),t.el=e=o}if(16&f&&(!u||!u.innerHTML&&!u.textContent)){let o=d(e.firstChild,t,e,n,s,r,i);for(;o;){Fo(e,1)||To();const t=o;o=o.nextSibling,l(t)}}else if(8&f){let n=t.children;"\n"!==n[0]||"PRE"!==e.tagName&&"TEXTAREA"!==e.tagName||(n=n.slice(1)),e.textContent!==n&&(Fo(e,0)||To(),e.textContent=t.children)}if(u)if(g||!i||48&p){const t=e.tagName.includes("-");for(const s in u)(g&&(s.endsWith("value")||"indeterminate"===s)||c(s)&&!A(s)||"."===s[0]||t)&&o(e,s,null,u[s],void 0,n)}else if(u.onClick)o(e,"onClick",null,u.onClick,void 0,n);else if(4&p&&wt(u.style))for(const e in u.style)u.style[e];(a=u&&u.onVnodeBeforeMount)&&Vi(a,n,t),h&&Kn(t,null,n,"beforeMount"),((a=u&&u.onVnodeMounted)||h||y)&&ri(()=>{a&&Vi(a,n,t),y&&v.enter(e),h&&Kn(t,null,n,"mounted")},s)}return e.nextSibling},d=(e,t,o,i,l,c,u)=>{u=u||!!t.dynamicChildren;const f=t.children,d=f.length;for(let t=0;t<d;t++){const h=u?f[t]:f[t]=Fi(f[t]),v=h.type===ci;e?(v&&!u&&t+1<d&&Fi(f[t+1]).type===ci&&(a(s(e.data.slice(h.children.length)),o,r(e)),e.data=h.children),e=p(e,h,i,l,c,u)):v&&!h.children?a(h.el=s(""),o):(Fo(o,1)||To(),n(null,h,o,null,i,l,Ao(o),c))}return e},h=(e,t,n,o,s,l)=>{const{slotScopeIds:c}=t;c&&(s=s?s.concat(c):c);const p=i(e),f=d(r(e),t,p,n,o,s,l);return f&&Oo(f)&&"]"===f.data?r(t.anchor=f):(To(),a(t.anchor=u("]"),p,f),f)},v=(e,t,o,s,c,a)=>{if(Fo(e.parentElement,1)||To(),t.el=null,a){const t=g(e);for(;;){const n=r(e);if(!n||n===t)break;l(n)}}const u=r(e),p=i(e);return l(e),n(null,t,p,u,o,s,Ao(p),c),o&&(o.vnode.el=t.el,Zr(o,t.el)),u},g=(e,t="[",n="]")=>{let o=0;for(;e;)if((e=r(e))&&Oo(e)&&(e.data===t&&o++,e.data===n)){if(0===o)return r(e);o--}return e},m=(e,t,n)=>{const o=t.parentNode;o&&o.replaceChild(e,t);let s=n;for(;s;)s.vnode.el===t&&(s.vnode.el=s.subTree.el=e),s=s.parent},_=e=>1===e.nodeType&&"TEMPLATE"===e.tagName;return[(e,t)=>{if(!t.hasChildNodes())return n(null,e,t),En(),void(t._vnode=e);p(t.firstChild,e,null,null,null),En(),t._vnode=e},p]}const No="data-allow-mismatch",Po={0:"text",1:"children",2:"class",3:"style",4:"attribute"};function Fo(e,t){if(0===t||1===t)for(;e&&!e.hasAttribute(No);)e=e.parentElement;const n=e&&e.getAttribute(No);if(null==n)return!1;if(""===n)return!0;{const e=n.split(",");return!(0!==t||!e.includes("children"))||e.includes(Po[t])}}const Mo=$().requestIdleCallback||(e=>setTimeout(e,1)),Lo=$().cancelIdleCallback||(e=>clearTimeout(e)),Io=(e=1e4)=>t=>{const n=Mo(t,{timeout:e});return()=>Lo(n)},Vo=e=>(t,n)=>{const o=new IntersectionObserver(e=>{for(const n of e)if(n.isIntersecting){o.disconnect(),t();break}},e);return n(e=>{if(e instanceof Element)return function(e){const{top:t,left:n,bottom:o,right:s}=e.getBoundingClientRect(),{innerHeight:r,innerWidth:i}=window;return(t>0&&t<r||o>0&&o<r)&&(n>0&&n<i||s>0&&s<i)}(e)?(t(),o.disconnect(),!1):void o.observe(e)}),()=>o.disconnect()},Do=e=>t=>{if(e){const n=matchMedia(e);if(!n.matches)return n.addEventListener("change",t,{once:!0}),()=>n.removeEventListener("change",t);t()}},Uo=(e=[])=>(t,n)=>{y(e)&&(e=[e]);let o=!1;const s=e=>{o||(o=!0,r(),t(),e.target.dispatchEvent(new e.constructor(e.type,e)))},r=()=>{n(t=>{for(const n of e)t.removeEventListener(n,s)})};return n(t=>{for(const n of e)t.addEventListener(n,s,{once:!0})}),r},Bo=e=>!!e.type.__asyncLoader;function jo(e){_(e)&&(e={loader:e});const{loader:t,loadingComponent:n,errorComponent:o,delay:s=200,hydrate:r,timeout:i,suspensible:l=!0,onError:c}=e;let a,u=null,p=0;const f=()=>{let e;return u||(e=u=t().catch(e=>{if(e=e instanceof Error?e:new Error(String(e)),c)return new Promise((t,n)=>{c(e,()=>t((p++,u=null,f())),()=>n(e),p+1)});throw e}).then(t=>e!==u&&u?u:(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),a=t,t)))};return yo({name:"AsyncComponentWrapper",__asyncLoader:f,__asyncHydrate(e,t,n){let o=!1;(t.bu||(t.bu=[])).push(()=>o=!0);const s=()=>{o||n()},i=r?()=>{const n=r(s,t=>function(e,t){if(Oo(e)&&"["===e.data){let n=1,o=e.nextSibling;for(;o;){if(1===o.nodeType){if(!1===t(o))break}else if(Oo(o))if("]"===o.data){if(0===--n)break}else"["===o.data&&n++;o=o.nextSibling}}else t(e)}(e,t));n&&(t.bum||(t.bum=[])).push(n)}:s;a?i():f().then(()=>!t.isUnmounted&&i())},get __asyncResolved(){return a},setup(){const e=ji;if(Co(e),a)return()=>$o(a,e);const t=t=>{u=null,pn(t,e,13,!o)};if(l&&e.suspense||Ji)return f().then(t=>()=>$o(t,e)).catch(e=>(t(e),()=>o?Ti(o,{error:e}):null));const r=Mt(!1),c=Mt(),p=Mt(!!s);return s&&setTimeout(()=>{p.value=!1},s),null!=i&&setTimeout(()=>{if(!r.value&&!c.value){const e=new Error(`Async component timed out after ${i}ms.`);t(e),c.value=e}},i),f().then(()=>{r.value=!0,e.parent&&Ho(e.parent.vnode)&&e.parent.update()}).catch(e=>{t(e),c.value=e}),()=>r.value&&a?$o(a,e):c.value&&o?Ti(o,{error:c.value}):n&&!p.value?Ti(n):void 0}})}function $o(e,t){const{ref:n,props:o,children:s,ce:r}=t.vnode,i=Ti(e,o,s);return i.ref=n,i.ce=r,delete t.vnode.ce,i}const Ho=e=>e.type.__isKeepAlive,Wo={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const n=$i(),o=n.ctx;if(!o.renderer)return()=>{const e=t.default&&t.default();return e&&1===e.length?e[0]:e};const s=new Map,r=new Set;let i=null;n.__v_cache=s;const l=n.suspense,{renderer:{p:c,m:a,um:u,o:{createElement:p}}}=o,f=p("div");function d(e){Jo(e),u(e,n,l,!0)}function h(e){s.forEach((t,n)=>{const o=rl(t.type);o&&!e(o)&&v(n)})}function v(e){const t=s.get(e);!t||i&&Si(t,i)?i&&Jo(i):d(t),s.delete(e),r.delete(e)}o.activate=(e,t,n,o,s)=>{const r=e.component;a(e,t,n,0,l),c(r.vnode,e,t,n,r,l,o,e.slotScopeIds,s),xr(()=>{r.isDeactivated=!1,r.a&&V(r.a);const t=e.props&&e.props.onVnodeMounted;t&&Vi(t,r.parent,e)},l),Pn(r)},o.deactivate=e=>{const t=e.component;Pr(t.m),Pr(t.a),a(e,f,null,1,l),xr(()=>{t.da&&V(t.da);const n=e.props&&e.props.onVnodeUnmounted;n&&Vi(n,t.parent,e),t.isDeactivated=!0},l),Pn(t)},Dr(()=>[e.include,e.exclude],([e,t])=>{e&&h(t=>Ko(e,t)),t&&h(e=>!Ko(t,e))},{flush:"post",deep:!0});let g=null;const m=()=>{null!=g&&(Qr(n.subTree.type)?xr(()=>{s.set(g,Xo(n.subTree))},n.subTree.suspense):s.set(g,Xo(n.subTree)))};return ts(m),os(m),ss(()=>{s.forEach(e=>{const{subTree:t,suspense:o}=n,s=Xo(t);if(e.type===s.type&&e.key===s.key){Jo(s);const e=s.component.da;return void(e&&xr(e,o))}d(e)})}),()=>{if(g=null,!t.default)return i=null;const n=t.default(),o=n[0];if(n.length>1)return i=null,n;if(!Ci(o)||!(4&o.shapeFlag||128&o.shapeFlag))return i=null,o;let l=Xo(o);if(l.type===ai)return i=null,l;const c=l.type,a=rl(Bo(l)?l.type.__asyncResolved||{}:c),{include:u,exclude:p,max:f}=e;if(u&&(!a||!Ko(u,a))||p&&a&&Ko(p,a))return l.shapeFlag&=-257,i=l,o;const d=null==l.key?c:l.key,h=s.get(d);return l.el&&(l=Oi(l),128&o.shapeFlag&&(o.ssContent=l)),g=d,h?(l.el=h.el,l.component=h.component,l.transition&&mo(l,l.transition),l.shapeFlag|=512,r.delete(d),r.add(d)):(r.add(d),f&&r.size>parseInt(f,10)&&v(r.values().next().value)),l.shapeFlag|=256,i=l,Qr(o.type)?o:l}}};function Ko(e,t){return h(e)?e.some(e=>Ko(e,t)):y(e)?e.split(",").includes(t):"[object RegExp]"===E(e)&&(e.lastIndex=0,e.test(t))}function zo(e,t){Go(e,"a",t)}function qo(e,t){Go(e,"da",t)}function Go(e,t,n=ji){const o=e.__wdc||(e.__wdc=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(Zo(t,o,n),n){let e=n.parent;for(;e&&e.parent;)Ho(e.parent.vnode)&&Yo(o,t,n,e),e=e.parent}}function Yo(e,t,n,o){const s=Zo(t,e,o,!0);rs(()=>{p(o[t],s)},n)}function Jo(e){e.shapeFlag&=-257,e.shapeFlag&=-513}function Xo(e){return 128&e.shapeFlag?e.ssContent:e}function Zo(e,t,n=ji,o=!1){if(n){const s=n[e]||(n[e]=[]),r=t.__weh||(t.__weh=(...o)=>{Re();const s=Ki(n),r=un(t,n,e,o);return s(),Ne(),r});return o?s.unshift(r):s.push(r),r}}const Qo=e=>(t,n=ji)=>{Ji&&"sp"!==e||Zo(e,(...e)=>t(...e),n)},es=Qo("bm"),ts=Qo("m"),ns=Qo("bu"),os=Qo("u"),ss=Qo("bum"),rs=Qo("um"),is=Qo("sp"),ls=Qo("rtg"),cs=Qo("rtc");function as(e,t=ji){Zo("ec",e,t)}const us="components",ps="directives";function fs(e,t){return gs(us,e,!0,t)||e}const ds=Symbol.for("v-ndc");function hs(e){return y(e)?gs(us,e,!1)||e:e||ds}function vs(e){return gs(ps,e)}function gs(e,t,n=!0,o=!1){const s=Vn||ji;if(s){const n=s.type;if(e===us){const e=rl(n,!1);if(e&&(e===t||e===N(t)||e===M(N(t))))return n}const r=ms(s[e]||n[e],t)||ms(s.appContext[e],t);return!r&&o?n:r}}function ms(e,t){return e&&(e[t]||e[N(t)]||e[M(N(t))])}function _s(e,t,n,o){let s;const r=n&&n[o],i=h(e);if(i||y(e)){let n=!1,o=!1;i&&wt(e)&&(n=!Tt(e),o=kt(e),e=We(e)),s=new Array(e.length);for(let i=0,l=e.length;i<l;i++)s[i]=t(n?o?Pt(Nt(e[i])):Nt(e[i]):e[i],i,void 0,r&&r[i])}else if("number"==typeof e){s=new Array(e);for(let n=0;n<e;n++)s[n]=t(n+1,n,void 0,r&&r[n])}else if(C(e))if(e[Symbol.iterator])s=Array.from(e,(e,n)=>t(e,n,void 0,r&&r[n]));else{const n=Object.keys(e);s=new Array(n.length);for(let o=0,i=n.length;o<i;o++){const i=n[o];s[o]=t(e[i],i,o,r&&r[o])}}else s=[];return n&&(n[o]=s),s}function ys(e,t){for(let n=0;n<t.length;n++){const o=t[n];if(h(o))for(let t=0;t<o.length;t++)e[o[t].name]=o[t].fn;else o&&(e[o.name]=o.key?(...e)=>{const t=o.fn(...e);return t&&(t.key=o.key),t}:o.fn)}return e}function bs(e,t,n={},o,s){if(Vn.ce||Vn.parent&&Bo(Vn.parent)&&Vn.parent.ce)return"default"!==t&&(n.name=t),di(),bi(li,null,[Ti("slot",n,o&&o())],64);let r=e[t];r&&r._c&&(r._d=!1),di();const i=r&&Cs(r(n)),l=n.key||i&&i.key,c=bi(li,{key:(l&&!b(l)?l:`_${t}`)+(!i&&o?"_fb":"")},i||(o?o():[]),i&&1===e._?64:-2);return!s&&c.scopeId&&(c.slotScopeIds=[c.scopeId+"-s"]),r&&r._c&&(r._d=!0),c}function Cs(e){return e.some(e=>!Ci(e)||e.type!==ai&&!(e.type===li&&!Cs(e.children)))?e:null}function Ss(e,t){const n={};for(const o in e)n[t&&/[A-Z]/.test(o)?`on:${o}`:L(o)]=e[o];return n}const xs=e=>e?qi(e)?sl(e):xs(e.parent):null,Es=u(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>xs(e.parent),$root:e=>xs(e.root),$host:e=>e.ce,$emit:e=>e.emit,$options:e=>zs(e),$forceUpdate:e=>e.f||(e.f=()=>{bn(e.update)}),$nextTick:e=>e.n||(e.n=yn.bind(e.proxy)),$watch:e=>Br.bind(e)}),ws=(e,t)=>e!==s&&!e.__isScriptSetup&&d(e,t),ks={get({_:e},t){if("__v_skip"===t)return!0;const{ctx:n,setupState:o,data:r,props:i,accessCache:l,type:c,appContext:a}=e;let u;if("$"!==t[0]){const c=l[t];if(void 0!==c)switch(c){case 1:return o[t];case 2:return r[t];case 4:return n[t];case 3:return i[t]}else{if(ws(o,t))return l[t]=1,o[t];if(r!==s&&d(r,t))return l[t]=2,r[t];if((u=e.propsOptions[0])&&d(u,t))return l[t]=3,i[t];if(n!==s&&d(n,t))return l[t]=4,n[t];Hs&&(l[t]=0)}}const p=Es[t];let f,h;return p?("$attrs"===t&&je(e.attrs,0,""),p(e)):(f=c.__cssModules)&&(f=f[t])?f:n!==s&&d(n,t)?(l[t]=4,n[t]):(h=a.config.globalProperties,d(h,t)?h[t]:void 0)},set({_:e},t,n){const{data:o,setupState:r,ctx:i}=e;return ws(r,t)?(r[t]=n,!0):o!==s&&d(o,t)?(o[t]=n,!0):!(d(e.props,t)||"$"===t[0]&&t.slice(1)in e||(i[t]=n,0))},has({_:{data:e,setupState:t,accessCache:n,ctx:o,appContext:r,propsOptions:i,type:l}},c){let a,u;return!!(n[c]||e!==s&&"$"!==c[0]&&d(e,c)||ws(t,c)||(a=i[0])&&d(a,c)||d(o,c)||d(Es,c)||d(r.config.globalProperties,c)||(u=l.__cssModules)&&u[c])},defineProperty(e,t,n){return null!=n.get?e._.accessCache[t]=0:d(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)}},Ts=u({},ks,{get(e,t){if(t!==Symbol.unscopables)return ks.get(e,t,e)},has:(e,t)=>"_"!==t[0]&&!H(t)});function As(){return null}function Os(){return null}function Rs(e){}function Ns(e){}function Ps(){return null}function Fs(){}function Ms(e,t){return null}function Ls(){return Vs().slots}function Is(){return Vs().attrs}function Vs(e){const t=$i();return t.setupContext||(t.setupContext=ol(t))}function Ds(e){return h(e)?e.reduce((e,t)=>(e[t]=null,e),{}):e}function Us(e,t){const n=Ds(e);for(const e in t){if(e.startsWith("__skip"))continue;let o=n[e];o?h(o)||_(o)?o=n[e]={type:o,default:t[e]}:o.default=t[e]:null===o&&(o=n[e]={default:t[e]}),o&&t[`__skip_${e}`]&&(o.skipFactory=!0)}return n}function Bs(e,t){return e&&t?h(e)&&h(t)?e.concat(t):u({},Ds(e),Ds(t)):e||t}function js(e,t){const n={};for(const o in e)t.includes(o)||Object.defineProperty(n,o,{enumerable:!0,get:()=>e[o]});return n}function $s(e){const t=$i();let n=e();return zi(),S(n)&&(n=n.catch(e=>{throw Ki(t),e})),[n,()=>Ki(t)]}let Hs=!0;function Ws(e,t,n){un(h(e)?e.map(e=>e.bind(t.proxy)):e.bind(t.proxy),t,n)}function Ks(e,t,n,o){let s=o.includes(".")?jr(n,o):()=>n[o];if(y(e)){const n=t[e];_(n)&&Dr(s,n)}else if(_(e))Dr(s,e.bind(n));else if(C(e))if(h(e))e.forEach(e=>Ks(e,t,n,o));else{const o=_(e.handler)?e.handler.bind(n):t[e.handler];_(o)&&Dr(s,o,e)}}function zs(e){const t=e.type,{mixins:n,extends:o}=t,{mixins:s,optionsCache:r,config:{optionMergeStrategies:i}}=e.appContext,l=r.get(t);let c;return l?c=l:s.length||n||o?(c={},s.length&&s.forEach(e=>qs(c,e,i,!0)),qs(c,t,i)):c=t,C(t)&&r.set(t,c),c}function qs(e,t,n,o=!1){const{mixins:s,extends:r}=t;r&&qs(e,r,n,!0),s&&s.forEach(t=>qs(e,t,n,!0));for(const s in t)if(o&&"expose"===s);else{const o=Gs[s]||n&&n[s];e[s]=o?o(e[s],t[s]):t[s]}return e}const Gs={data:Ys,props:Qs,emits:Qs,methods:Zs,computed:Zs,beforeCreate:Xs,created:Xs,beforeMount:Xs,mounted:Xs,beforeUpdate:Xs,updated:Xs,beforeDestroy:Xs,beforeUnmount:Xs,destroyed:Xs,unmounted:Xs,activated:Xs,deactivated:Xs,errorCaptured:Xs,serverPrefetch:Xs,components:Zs,directives:Zs,watch:function(e,t){if(!e)return t;if(!t)return e;const n=u(Object.create(null),e);for(const o in t)n[o]=Xs(e[o],t[o]);return n},provide:Ys,inject:function(e,t){return Zs(Js(e),Js(t))}};function Ys(e,t){return t?e?function(){return u(_(e)?e.call(this,this):e,_(t)?t.call(this,this):t)}:t:e}function Js(e){if(h(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function Xs(e,t){return e?[...new Set([].concat(e,t))]:t}function Zs(e,t){return e?u(Object.create(null),e,t):t}function Qs(e,t){return e?h(e)&&h(t)?[...new Set([...e,...t])]:u(Object.create(null),Ds(e),Ds(null!=t?t:{})):t}function er(){return{app:null,config:{isNativeTag:l,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let tr=0;function nr(e,t){return function(n,o=null){_(n)||(n=u({},n)),null==o||C(o)||(o=null);const s=er(),r=new WeakSet,i=[];let l=!1;const c=s.app={_uid:tr++,_component:n,_props:o,_container:null,_context:s,_instance:null,version:pl,get config(){return s.config},set config(e){},use:(e,...t)=>(r.has(e)||(e&&_(e.install)?(r.add(e),e.install(c,...t)):_(e)&&(r.add(e),e(c,...t))),c),mixin:e=>(s.mixins.includes(e)||s.mixins.push(e),c),component:(e,t)=>t?(s.components[e]=t,c):s.components[e],directive:(e,t)=>t?(s.directives[e]=t,c):s.directives[e],mount(r,i,a){if(!l){const u=c._ceVNode||Ti(n,o);return u.appContext=s,!0===a?a="svg":!1===a&&(a=void 0),i&&t?t(u,r):e(u,r,a),l=!0,c._container=r,r.__vue_app__=c,c._instance=u.component,function(e,t){Rn("app:init",e,t,{Fragment:li,Text:ci,Comment:ai,Static:ui})}(c,pl),sl(u.component)}},onUnmount(e){i.push(e)},unmount(){l&&(un(i,c._instance,16),e(null,c._container),c._instance=null,function(e){Rn("app:unmount",e)}(c),delete c._container.__vue_app__)},provide:(e,t)=>(s.provides[e]=t,c),runWithContext(e){const t=or;or=c;try{return e()}finally{or=t}}};return c}}let or=null;function sr(e,t){if(ji){let n=ji.provides;const o=ji.parent&&ji.parent.provides;o===n&&(n=ji.provides=Object.create(o)),n[e]=t}}function rr(e,t,n=!1){const o=$i();if(o||or){let s=or?or._context.provides:o?null==o.parent||o.ce?o.vnode.appContext&&o.vnode.appContext.provides:o.parent.provides:void 0;if(s&&e in s)return s[e];if(arguments.length>1)return n&&_(t)?t.call(o&&o.proxy):t}}function ir(){return!(!$i()&&!or)}const lr={},cr=()=>Object.create(lr),ar=e=>Object.getPrototypeOf(e)===lr;function ur(e,t,n,o){const[r,i]=e.propsOptions;let l,c=!1;if(t)for(let s in t){if(A(s))continue;const a=t[s];let u;r&&d(r,u=N(s))?i&&i.includes(u)?(l||(l={}))[u]=a:n[u]=a:qr(e.emitsOptions,s)||s in o&&a===o[s]||(o[s]=a,c=!0)}if(i){const t=Ot(n),o=l||s;for(let s=0;s<i.length;s++){const l=i[s];n[l]=pr(r,t,l,o[l],e,!d(o,l))}}return c}function pr(e,t,n,o,s,r){const i=e[n];if(null!=i){const e=d(i,"default");if(e&&void 0===o){const e=i.default;if(i.type!==Function&&!i.skipFactory&&_(e)){const{propsDefaults:r}=s;if(n in r)o=r[n];else{const i=Ki(s);o=r[n]=e.call(null,t),i()}}else o=e;s.ce&&s.ce._setProp(n,o)}i[0]&&(r&&!e?o=!1:!i[1]||""!==o&&o!==F(n)||(o=!0))}return o}const fr=new WeakMap;function dr(e,t,n=!1){const o=n?fr:t.propsCache,i=o.get(e);if(i)return i;const l=e.props,c={},a=[];let p=!1;if(!_(e)){const o=e=>{p=!0;const[n,o]=dr(e,t,!0);u(c,n),o&&a.push(...o)};!n&&t.mixins.length&&t.mixins.forEach(o),e.extends&&o(e.extends),e.mixins&&e.mixins.forEach(o)}if(!l&&!p)return C(e)&&o.set(e,r),r;if(h(l))for(let e=0;e<l.length;e++){const t=N(l[e]);hr(t)&&(c[t]=s)}else if(l)for(const e in l){const t=N(e);if(hr(t)){const n=l[e],o=c[t]=h(n)||_(n)?{type:n}:u({},n),s=o.type;let r=!1,i=!0;if(h(s))for(let e=0;e<s.length;++e){const t=s[e],n=_(t)&&t.name;if("Boolean"===n){r=!0;break}"String"===n&&(i=!1)}else r=_(s)&&"Boolean"===s.name;o[0]=r,o[1]=i,(r||d(o,"default"))&&a.push(t)}}const f=[c,a];return C(e)&&o.set(e,f),f}function hr(e){return"$"!==e[0]&&!A(e)}const vr=e=>"_"===e||"_ctx"===e||"$stable"===e,gr=e=>h(e)?e.map(Fi):[Fi(e)],mr=(e,t,n)=>{if(t._n)return t;const o=Hn((...e)=>gr(t(...e)),n);return o._c=!1,o},_r=(e,t,n)=>{const o=e._ctx;for(const n in e){if(vr(n))continue;const s=e[n];if(_(s))t[n]=mr(0,s,o);else if(null!=s){const e=gr(s);t[n]=()=>e}}},yr=(e,t)=>{const n=gr(t);e.slots.default=()=>n},br=(e,t,n)=>{for(const o in t)!n&&vr(o)||(e[o]=t[o])},Cr=(e,t,n)=>{const o=e.slots=cr();if(32&e.vnode.shapeFlag){const e=t._;e?(br(o,t,n),n&&D(o,"_",e,!0)):_r(t,o)}else t&&yr(e,t)},Sr=(e,t,n)=>{const{vnode:o,slots:r}=e;let i=!0,l=s;if(32&o.shapeFlag){const e=t._;e?n&&1===e?i=!1:br(r,t,n):(i=!t.$stable,_r(t,r)),l=t}else t&&(yr(e,t),l={default:1});if(i)for(const e in r)vr(e)||null!=l[e]||delete r[e]},xr=ri;function Er(e){return kr(e)}function wr(e){return kr(e,Ro)}function kr(e,t){const n=$();n.__VUE__=!0,Nn(n.__VUE_DEVTOOLS_GLOBAL_HOOK__,n);const{insert:o,remove:l,patchProp:c,createElement:a,createText:u,createComment:p,setText:f,setElementText:h,parentNode:v,nextSibling:g,setScopeId:m=i,insertStaticContent:_}=e,y=(e,t,n,o=null,s=null,r=null,i=void 0,l=null,c=!!t.dynamicChildren)=>{if(e===t)return;e&&!Si(e,t)&&(o=X(e),z(e,s,r,!0),e=null),-2===t.patchFlag&&(c=!1,t.dynamicChildren=null);const{type:a,ref:u,shapeFlag:p}=t;switch(a){case ci:b(e,t,n,o);break;case ai:C(e,t,n,o);break;case ui:null==e&&S(t,n,o,i);break;case li:P(e,t,n,o,s,r,i,l,c);break;default:1&p?x(e,t,n,o,s,r,i,l,c):6&p?M(e,t,n,o,s,r,i,l,c):(64&p||128&p)&&a.process(e,t,n,o,s,r,i,l,c,ee)}null!=u&&s?Eo(u,e&&e.ref,r,t||e,!t):null==u&&e&&null!=e.ref&&Eo(e.ref,null,r,e,!0)},b=(e,t,n,s)=>{if(null==e)o(t.el=u(t.children),n,s);else{const n=t.el=e.el;t.children!==e.children&&f(n,t.children)}},C=(e,t,n,s)=>{null==e?o(t.el=p(t.children||""),n,s):t.el=e.el},S=(e,t,n,o)=>{[e.el,e.anchor]=_(e.children,t,n,o,e.el,e.anchor)},x=(e,t,n,o,s,r,i,l,c)=>{"svg"===t.type?i="svg":"math"===t.type&&(i="mathml"),null==e?E(t,n,o,s,r,i,l,c):T(e,t,s,r,i,l,c)},E=(e,t,n,s,r,i,l,u)=>{let p,f;const{props:d,shapeFlag:v,transition:g,dirs:m}=e;if(p=e.el=a(e.type,i,d&&d.is,d),8&v?h(p,e.children):16&v&&k(e.children,p,null,s,r,Tr(e,i),l,u),m&&Kn(e,null,s,"created"),w(p,e,e.scopeId,l,s),d){for(const e in d)"value"===e||A(e)||c(p,e,null,d[e],i,s);"value"in d&&c(p,"value",null,d.value,i),(f=d.onVnodeBeforeMount)&&Vi(f,s,e)}D(p,"__vnode",e,!0),D(p,"__vueParentComponent",s,!0),m&&Kn(e,null,s,"beforeMount");const _=Or(r,g);_&&g.beforeEnter(p),o(p,t,n),((f=d&&d.onVnodeMounted)||_||m)&&xr(()=>{f&&Vi(f,s,e),_&&g.enter(p),m&&Kn(e,null,s,"mounted")},r)},w=(e,t,n,o,s)=>{if(n&&m(e,n),o)for(let t=0;t<o.length;t++)m(e,o[t]);if(s){let n=s.subTree;if(t===n||Qr(n.type)&&(n.ssContent===t||n.ssFallback===t)){const t=s.vnode;w(e,t,t.scopeId,t.slotScopeIds,s.parent)}}},k=(e,t,n,o,s,r,i,l,c=0)=>{for(let a=c;a<e.length;a++){const c=e[a]=l?Mi(e[a]):Fi(e[a]);y(null,c,t,n,o,s,r,i,l)}},T=(e,t,n,o,r,i,l)=>{const a=t.el=e.el;a.__vnode=t;let{patchFlag:u,dynamicChildren:p,dirs:f}=t;u|=16&e.patchFlag;const d=e.props||s,v=t.props||s;let g;if(n&&Ar(n,!1),(g=v.onVnodeBeforeUpdate)&&Vi(g,n,t,e),f&&Kn(t,e,n,"beforeUpdate"),n&&Ar(n,!0),(d.innerHTML&&null==v.innerHTML||d.textContent&&null==v.textContent)&&h(a,""),p?O(e.dynamicChildren,p,a,n,o,Tr(t,r),i):l||j(e,t,a,null,n,o,Tr(t,r),i,!1),u>0){if(16&u)R(a,d,v,n,r);else if(2&u&&d.class!==v.class&&c(a,"class",null,v.class,r),4&u&&c(a,"style",d.style,v.style,r),8&u){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const o=e[t],s=d[o],i=v[o];i===s&&"value"!==o||c(a,o,s,i,r,n)}}1&u&&e.children!==t.children&&h(a,t.children)}else l||null!=p||R(a,d,v,n,r);((g=v.onVnodeUpdated)||f)&&xr(()=>{g&&Vi(g,n,t,e),f&&Kn(t,e,n,"updated")},o)},O=(e,t,n,o,s,r,i)=>{for(let l=0;l<t.length;l++){const c=e[l],a=t[l],u=c.el&&(c.type===li||!Si(c,a)||198&c.shapeFlag)?v(c.el):n;y(c,a,u,null,o,s,r,i,!0)}},R=(e,t,n,o,r)=>{if(t!==n){if(t!==s)for(const s in t)A(s)||s in n||c(e,s,t[s],null,r,o);for(const s in n){if(A(s))continue;const i=n[s],l=t[s];i!==l&&"value"!==s&&c(e,s,l,i,r,o)}"value"in n&&c(e,"value",t.value,n.value,r)}},P=(e,t,n,s,r,i,l,c,a)=>{const p=t.el=e?e.el:u(""),f=t.anchor=e?e.anchor:u("");let{patchFlag:d,dynamicChildren:h,slotScopeIds:v}=t;v&&(c=c?c.concat(v):v),null==e?(o(p,n,s),o(f,n,s),k(t.children||[],n,f,r,i,l,c,a)):d>0&&64&d&&h&&e.dynamicChildren?(O(e.dynamicChildren,h,n,r,i,l,c),(null!=t.key||r&&t===r.subTree)&&Rr(e,t,!0)):j(e,t,n,f,r,i,l,c,a)},M=(e,t,n,o,s,r,i,l,c)=>{t.slotScopeIds=l,null==e?512&t.shapeFlag?s.ctx.activate(t,n,o,i,c):L(t,n,o,s,r,i,c):I(e,t,c)},L=(e,t,n,o,s,r,i)=>{const l=e.component=Bi(e,o,s);if(Ho(e)&&(l.ctx.renderer=ee),Xi(l,!1,i),l.asyncDep){if(s&&s.registerDep(l,U,i),!e.el){const o=l.subTree=Ti(ai);C(null,o,t,n),e.placeholder=o.el}}else U(l,e,t,n,s,r,i)},I=(e,t,n)=>{const o=t.component=e.component;if(function(e,t,n){const{props:o,children:s,component:r}=e,{props:i,children:l,patchFlag:c}=t,a=r.emitsOptions;if(t.dirs||t.transition)return!0;if(!(n&&c>=0))return!(!s&&!l||l&&l.$stable)||o!==i&&(o?!i||Xr(o,i,a):!!i);if(1024&c)return!0;if(16&c)return o?Xr(o,i,a):!!i;if(8&c){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(i[n]!==o[n]&&!qr(a,n))return!0}}return!1}(e,t,n)){if(o.asyncDep&&!o.asyncResolved)return void B(o,t,n);o.next=t,o.update()}else t.el=e.el,o.vnode=t},U=(e,t,n,o,s,r,i)=>{const l=()=>{if(e.isMounted){let{next:t,bu:n,u:o,parent:c,vnode:a}=e;{const n=Nr(e);if(n)return t&&(t.el=a.el,B(e,t,i)),void n.asyncDep.then(()=>{e.isUnmounted||l()})}let u,p=t;Ar(e,!1),t?(t.el=a.el,B(e,t,i)):t=a,n&&V(n),(u=t.props&&t.props.onVnodeBeforeUpdate)&&Vi(u,c,t,a),Ar(e,!0);const f=Gr(e),d=e.subTree;e.subTree=f,y(d,f,v(d.el),X(d),e,s,r),t.el=f.el,null===p&&Zr(e,f.el),o&&xr(o,s),(u=t.props&&t.props.onVnodeUpdated)&&xr(()=>Vi(u,c,t,a),s),Fn(e)}else{let i;const{el:l,props:c}=t,{bm:a,m:u,parent:p,root:f,type:d}=e,h=Bo(t);if(Ar(e,!1),a&&V(a),!h&&(i=c&&c.onVnodeBeforeMount)&&Vi(i,p,t),Ar(e,!0),l&&ne){const t=()=>{e.subTree=Gr(e),ne(l,e.subTree,e,s,null)};h&&d.__asyncHydrate?d.__asyncHydrate(l,e,t):t()}else{f.ce&&!1!==f.ce._def.shadowRoot&&f.ce._injectChildStyle(d);const i=e.subTree=Gr(e);y(null,i,n,o,e,s,r),t.el=i.el}if(u&&xr(u,s),!h&&(i=c&&c.onVnodeMounted)){const e=t;xr(()=>Vi(i,p,e),s)}(256&t.shapeFlag||p&&Bo(p.vnode)&&256&p.vnode.shapeFlag)&&e.a&&xr(e.a,s),e.isMounted=!0,Pn(e),t=n=o=null}};e.scope.on();const c=e.effect=new de(l);e.scope.off();const a=e.update=c.run.bind(c),u=e.job=c.runIfDirty.bind(c);u.i=e,u.id=e.uid,c.scheduler=()=>bn(u),Ar(e,!0),a()},B=(e,t,n)=>{t.component=e;const o=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,o){const{props:s,attrs:r,vnode:{patchFlag:i}}=e,l=Ot(s),[c]=e.propsOptions;let a=!1;if(!(o||i>0)||16&i){let o;ur(e,t,s,r)&&(a=!0);for(const r in l)t&&(d(t,r)||(o=F(r))!==r&&d(t,o))||(c?!n||void 0===n[r]&&void 0===n[o]||(s[r]=pr(c,l,r,void 0,e,!0)):delete s[r]);if(r!==l)for(const e in r)t&&d(t,e)||(delete r[e],a=!0)}else if(8&i){const n=e.vnode.dynamicProps;for(let o=0;o<n.length;o++){let i=n[o];if(qr(e.emitsOptions,i))continue;const u=t[i];if(c)if(d(r,i))u!==r[i]&&(r[i]=u,a=!0);else{const t=N(i);s[t]=pr(c,l,t,u,e,!1)}else u!==r[i]&&(r[i]=u,a=!0)}}a&&$e(e.attrs,"set","")}(e,t.props,o,n),Sr(e,t.children,n),Re(),xn(e),Ne()},j=(e,t,n,o,s,r,i,l,c=!1)=>{const a=e&&e.children,u=e?e.shapeFlag:0,p=t.children,{patchFlag:f,shapeFlag:d}=t;if(f>0){if(128&f)return void W(a,p,n,o,s,r,i,l,c);if(256&f)return void H(a,p,n,o,s,r,i,l,c)}8&d?(16&u&&J(a,s,r),p!==a&&h(n,p)):16&u?16&d?W(a,p,n,o,s,r,i,l,c):J(a,s,r,!0):(8&u&&h(n,""),16&d&&k(p,n,o,s,r,i,l,c))},H=(e,t,n,o,s,i,l,c,a)=>{t=t||r;const u=(e=e||r).length,p=t.length,f=Math.min(u,p);let d;for(d=0;d<f;d++){const o=t[d]=a?Mi(t[d]):Fi(t[d]);y(e[d],o,n,null,s,i,l,c,a)}u>p?J(e,s,i,!0,!1,f):k(t,n,o,s,i,l,c,a,f)},W=(e,t,n,o,s,i,l,c,a)=>{let u=0;const p=t.length;let f=e.length-1,d=p-1;for(;u<=f&&u<=d;){const o=e[u],r=t[u]=a?Mi(t[u]):Fi(t[u]);if(!Si(o,r))break;y(o,r,n,null,s,i,l,c,a),u++}for(;u<=f&&u<=d;){const o=e[f],r=t[d]=a?Mi(t[d]):Fi(t[d]);if(!Si(o,r))break;y(o,r,n,null,s,i,l,c,a),f--,d--}if(u>f){if(u<=d){const e=d+1,r=e<p?t[e].el:o;for(;u<=d;)y(null,t[u]=a?Mi(t[u]):Fi(t[u]),n,r,s,i,l,c,a),u++}}else if(u>d)for(;u<=f;)z(e[u],s,i,!0),u++;else{const h=u,v=u,g=new Map;for(u=v;u<=d;u++){const e=t[u]=a?Mi(t[u]):Fi(t[u]);null!=e.key&&g.set(e.key,u)}let m,_=0;const b=d-v+1;let C=!1,S=0;const x=new Array(b);for(u=0;u<b;u++)x[u]=0;for(u=h;u<=f;u++){const o=e[u];if(_>=b){z(o,s,i,!0);continue}let r;if(null!=o.key)r=g.get(o.key);else for(m=v;m<=d;m++)if(0===x[m-v]&&Si(o,t[m])){r=m;break}void 0===r?z(o,s,i,!0):(x[r-v]=u+1,r>=S?S=r:C=!0,y(o,t[r],n,null,s,i,l,c,a),_++)}const E=C?function(e){const t=e.slice(),n=[0];let o,s,r,i,l;const c=e.length;for(o=0;o<c;o++){const c=e[o];if(0!==c){if(s=n[n.length-1],e[s]<c){t[o]=s,n.push(o);continue}for(r=0,i=n.length-1;r<i;)l=r+i>>1,e[n[l]]<c?r=l+1:i=l;c<e[n[r]]&&(r>0&&(t[o]=n[r-1]),n[r]=o)}}for(r=n.length,i=n[r-1];r-- >0;)n[r]=i,i=t[i];return n}(x):r;for(m=E.length-1,u=b-1;u>=0;u--){const e=v+u,r=t[e],f=t[e+1],d=e+1<p?f.el||f.placeholder:o;0===x[u]?y(null,r,n,d,s,i,l,c,a):C&&(m<0||u!==E[m]?K(r,n,d,2):m--)}}},K=(e,t,n,s,r=null)=>{const{el:i,type:c,transition:a,children:u,shapeFlag:p}=e;if(6&p)K(e.component.subTree,t,n,s);else if(128&p)e.suspense.move(t,n,s);else if(64&p)c.move(e,t,n,ee);else if(c!==li)if(c!==ui)if(2!==s&&1&p&&a)if(0===s)a.beforeEnter(i),o(i,t,n),xr(()=>a.enter(i),r);else{const{leave:s,delayLeave:r,afterLeave:c}=a,u=()=>{e.ctx.isUnmounted?l(i):o(i,t,n)},p=()=>{i._isLeaving&&i[so](!0),s(i,()=>{u(),c&&c()})};r?r(i,u,p):p()}else o(i,t,n);else(({el:e,anchor:t},n,s)=>{let r;for(;e&&e!==t;)r=g(e),o(e,n,s),e=r;o(t,n,s)})(e,t,n);else{o(i,t,n);for(let e=0;e<u.length;e++)K(u[e],t,n,s);o(e.anchor,t,n)}},z=(e,t,n,o=!1,s=!1)=>{const{type:r,props:i,ref:l,children:c,dynamicChildren:a,shapeFlag:u,patchFlag:p,dirs:f,cacheIndex:d}=e;if(-2===p&&(s=!1),null!=l&&(Re(),Eo(l,null,n,e,!0),Ne()),null!=d&&(t.renderCache[d]=void 0),256&u)return void t.ctx.deactivate(e);const h=1&u&&f,v=!Bo(e);let g;if(v&&(g=i&&i.onVnodeBeforeUnmount)&&Vi(g,t,e),6&u)Y(e.component,n,o);else{if(128&u)return void e.suspense.unmount(n,o);h&&Kn(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,n,ee,o):a&&!a.hasOnce&&(r!==li||p>0&&64&p)?J(a,t,n,!1,!0):(r===li&&384&p||!s&&16&u)&&J(c,t,n),o&&q(e)}(v&&(g=i&&i.onVnodeUnmounted)||h)&&xr(()=>{g&&Vi(g,t,e),h&&Kn(e,null,t,"unmounted")},n)},q=e=>{const{type:t,el:n,anchor:o,transition:s}=e;if(t===li)return void G(n,o);if(t===ui)return void(({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=g(e),l(e),e=n;l(t)})(e);const r=()=>{l(n),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1&e.shapeFlag&&s&&!s.persisted){const{leave:t,delayLeave:o}=s,i=()=>t(n,r);o?o(e.el,r,i):i()}else r()},G=(e,t)=>{let n;for(;e!==t;)n=g(e),l(e),e=n;l(t)},Y=(e,t,n)=>{const{bum:o,scope:s,job:r,subTree:i,um:l,m:c,a}=e;Pr(c),Pr(a),o&&V(o),s.stop(),r&&(r.flags|=8,z(i,e,t,n)),l&&xr(l,t),xr(()=>{e.isUnmounted=!0},t),Ln(e)},J=(e,t,n,o=!1,s=!1,r=0)=>{for(let i=r;i<e.length;i++)z(e[i],t,n,o,s)},X=e=>{if(6&e.shapeFlag)return X(e.component.subTree);if(128&e.shapeFlag)return e.suspense.next();const t=g(e.anchor||e.el),n=t&&t[zn];return n?g(n):t};let Z=!1;const Q=(e,t,n)=>{null==e?t._vnode&&z(t._vnode,null,null,!0):y(t._vnode||null,e,t,null,null,null,n),t._vnode=e,Z||(Z=!0,xn(),En(),Z=!1)},ee={p:y,um:z,m:K,r:q,mt:L,mc:k,pc:j,pbc:O,n:X,o:e};let te,ne;return t&&([te,ne]=t(ee)),{render:Q,hydrate:te,createApp:nr(Q,te)}}function Tr({type:e,props:t},n){return"svg"===n&&"foreignObject"===e||"mathml"===n&&"annotation-xml"===e&&t&&t.encoding&&t.encoding.includes("html")?void 0:n}function Ar({effect:e,job:t},n){n?(e.flags|=32,t.flags|=4):(e.flags&=-33,t.flags&=-5)}function Or(e,t){return(!e||e&&!e.pendingBranch)&&t&&!t.persisted}function Rr(e,t,n=!1){const o=e.children,s=t.children;if(h(o)&&h(s))for(let e=0;e<o.length;e++){const t=o[e];let r=s[e];1&r.shapeFlag&&!r.dynamicChildren&&((r.patchFlag<=0||32===r.patchFlag)&&(r=s[e]=Mi(s[e]),r.el=t.el),n||-2===r.patchFlag||Rr(t,r)),r.type===ci&&-1!==r.patchFlag&&(r.el=t.el),r.type!==ai||r.el||(r.el=t.el)}}function Nr(e){const t=e.subTree.component;if(t)return t.asyncDep&&!t.asyncResolved?t:Nr(t)}function Pr(e){if(e)for(let t=0;t<e.length;t++)e[t].flags|=8}const Fr=Symbol.for("v-scx"),Mr=()=>rr(Fr);function Lr(e,t){return Ur(e,null,t)}function Ir(e,t){return Ur(e,null,{flush:"post"})}function Vr(e,t){return Ur(e,null,{flush:"sync"})}function Dr(e,t,n){return Ur(e,t,n)}function Ur(e,t,n=s){const{immediate:o,deep:r,flush:l,once:c}=n,a=u({},n),f=t&&o||!t&&"post"!==l;let d;if(Ji)if("sync"===l){const e=Mr();d=e.__watcherHandles||(e.__watcherHandles=[])}else if(!f){const e=()=>{};return e.stop=i,e.resume=i,e.pause=i,e}const v=ji;a.call=(e,t,n)=>un(e,v,t,n);let g=!1;"post"===l?a.scheduler=e=>{xr(e,v&&v.suspense)}:"sync"!==l&&(g=!0,a.scheduler=(e,t)=>{t?e():bn(e)}),a.augmentJob=e=>{t&&(e.flags|=4),g&&(e.flags|=2,v&&(e.id=v.uid,e.i=v))};const m=function(e,t,n=s){const{immediate:o,deep:r,once:l,scheduler:c,augmentJob:a,call:u}=n,f=e=>r?e:Tt(e)||!1===r||0===r?sn(e,1):sn(e);let d,v,g,m,y=!1,b=!1;if(Ft(e)?(v=()=>e.value,y=Tt(e)):wt(e)?(v=()=>f(e),y=!0):h(e)?(b=!0,y=e.some(e=>wt(e)||Tt(e)),v=()=>e.map(e=>Ft(e)?e.value:wt(e)?f(e):_(e)?u?u(e,2):e():void 0)):v=_(e)?t?u?()=>u(e,2):e:()=>{if(g){Re();try{g()}finally{Ne()}}const t=tn;tn=d;try{return u?u(e,3,[m]):e(m)}finally{tn=t}}:i,t&&r){const e=v,t=!0===r?1/0:r;v=()=>sn(e(),t)}const C=ue(),S=()=>{d.stop(),C&&C.active&&p(C.effects,d)};if(l&&t){const e=t;t=(...t)=>{e(...t),S()}}let x=b?new Array(e.length).fill(Qt):Qt;const E=e=>{if(1&d.flags&&(d.dirty||e))if(t){const e=d.run();if(r||y||(b?e.some((e,t)=>I(e,x[t])):I(e,x))){g&&g();const n=tn;tn=d;try{const n=[e,x===Qt?void 0:b&&x[0]===Qt?[]:x,m];x=e,u?u(t,3,n):t(...n)}finally{tn=n}}}else d.run()};return a&&a(E),d=new de(v),d.scheduler=c?()=>c(E,!1):E,m=e=>on(e,!1,d),g=d.onStop=()=>{const e=en.get(d);if(e){if(u)u(e,4);else for(const t of e)t();en.delete(d)}},t?o?E(!0):x=d.run():c?c(E.bind(null,!0),!0):d.run(),S.pause=d.pause.bind(d),S.resume=d.resume.bind(d),S.stop=S,S}(e,t,a);return Ji&&(d?d.push(m):f&&m()),m}function Br(e,t,n){const o=this.proxy,s=y(e)?e.includes(".")?jr(o,e):()=>o[e]:e.bind(o,o);let r;_(t)?r=t:(r=t.handler,n=t);const i=Ki(this),l=Ur(s,r.bind(o),n);return i(),l}function jr(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}function $r(e,t,n=s){const o=$i(),r=N(t),i=F(t),l=Hr(e,r),c=Wt((l,c)=>{let a,u,p=s;return Vr(()=>{const t=e[r];I(a,t)&&(a=t,c())}),{get:()=>(l(),n.get?n.get(a):a),set(e){const l=n.set?n.set(e):e;if(!(I(l,a)||p!==s&&I(e,p)))return;const f=o.vnode.props;f&&(t in f||r in f||i in f)&&(`onUpdate:${t}`in f||`onUpdate:${r}`in f||`onUpdate:${i}`in f)||(a=e,c()),o.emit(`update:${t}`,l),I(e,l)&&I(e,p)&&!I(l,u)&&c(),p=e,u=l}}});return c[Symbol.iterator]=()=>{let e=0;return{next:()=>e<2?{value:e++?l||s:c,done:!1}:{done:!0}}},c}const Hr=(e,t)=>"modelValue"===t||"model-value"===t?e.modelModifiers:e[`${t}Modifiers`]||e[`${N(t)}Modifiers`]||e[`${F(t)}Modifiers`];function Wr(e,t,...n){if(e.isUnmounted)return;const o=e.vnode.props||s;let r=n;const i=t.startsWith("update:"),l=i&&Hr(o,t.slice(7));let c;l&&(l.trim&&(r=n.map(e=>y(e)?e.trim():e)),l.number&&(r=n.map(U))),function(e,t,n){Rn("component:emit",e.appContext.app,e,t,n)}(e,t,r);let a=o[c=L(t)]||o[c=L(N(t))];!a&&i&&(a=o[c=L(F(t))]),a&&un(a,e,6,r);const u=o[c+"Once"];if(u){if(e.emitted){if(e.emitted[c])return}else e.emitted={};e.emitted[c]=!0,un(u,e,6,r)}}const Kr=new WeakMap;function zr(e,t,n=!1){const o=n?Kr:t.emitsCache,s=o.get(e);if(void 0!==s)return s;const r=e.emits;let i={},l=!1;if(!_(e)){const o=e=>{const n=zr(e,t,!0);n&&(l=!0,u(i,n))};!n&&t.mixins.length&&t.mixins.forEach(o),e.extends&&o(e.extends),e.mixins&&e.mixins.forEach(o)}return r||l?(h(r)?r.forEach(e=>i[e]=null):u(i,r),C(e)&&o.set(e,i),i):(C(e)&&o.set(e,null),null)}function qr(e,t){return!(!e||!c(t))&&(t=t.slice(2).replace(/Once$/,""),d(e,t[0].toLowerCase()+t.slice(1))||d(e,F(t))||d(e,t))}function Gr(e){const{type:t,vnode:n,proxy:o,withProxy:s,propsOptions:[r],slots:i,attrs:l,emit:c,render:u,renderCache:p,props:f,data:d,setupState:h,ctx:v,inheritAttrs:g}=e,m=Un(e);let _,y;try{if(4&n.shapeFlag){const e=s||o,t=e;_=Fi(u.call(t,e,p,f,h,d,v)),y=l}else{const e=t;_=Fi(e.length>1?e(f,{attrs:l,slots:i,emit:c}):e(f,null)),y=t.props?l:Yr(l)}}catch(t){pi.length=0,pn(t,e,1),_=Ti(ai)}let b=_;if(y&&!1!==g){const e=Object.keys(y),{shapeFlag:t}=b;e.length&&7&t&&(r&&e.some(a)&&(y=Jr(y,r)),b=Oi(b,y,!1,!0))}return n.dirs&&(b=Oi(b,null,!1,!0),b.dirs=b.dirs?b.dirs.concat(n.dirs):n.dirs),n.transition&&mo(b,n.transition),_=b,Un(m),_}const Yr=e=>{let t;for(const n in e)("class"===n||"style"===n||c(n))&&((t||(t={}))[n]=e[n]);return t},Jr=(e,t)=>{const n={};for(const o in e)a(o)&&o.slice(9)in t||(n[o]=e[o]);return n};function Xr(e,t,n){const o=Object.keys(t);if(o.length!==Object.keys(e).length)return!0;for(let s=0;s<o.length;s++){const r=o[s];if(t[r]!==e[r]&&!qr(n,r))return!0}return!1}function Zr({vnode:e,parent:t},n){for(;t;){const o=t.subTree;if(o.suspense&&o.suspense.activeBranch===e&&(o.el=e.el),o!==e)break;(e=t.vnode).el=n,t=t.parent}}const Qr=e=>e.__isSuspense;let ei=0;const ti={name:"Suspense",__isSuspense:!0,process(e,t,n,o,s,r,i,l,c,a){if(null==e)!function(e,t,n,o,s,r,i,l,c){const{p:a,o:{createElement:u}}=c,p=u("div"),f=e.suspense=oi(e,s,o,t,p,n,r,i,l,c);a(null,f.pendingBranch=e.ssContent,p,null,o,f,r,i),f.deps>0?(ni(e,"onPending"),ni(e,"onFallback"),a(null,e.ssFallback,t,n,o,null,r,i),ii(f,e.ssFallback)):f.resolve(!1,!0)}(t,n,o,s,r,i,l,c,a);else{if(r&&r.deps>0&&!e.suspense.isInFallback)return t.suspense=e.suspense,t.suspense.vnode=t,void(t.el=e.el);!function(e,t,n,o,s,r,i,l,{p:c,um:a,o:{createElement:u}}){const p=t.suspense=e.suspense;p.vnode=t,t.el=e.el;const f=t.ssContent,d=t.ssFallback,{activeBranch:h,pendingBranch:v,isInFallback:g,isHydrating:m}=p;if(v)p.pendingBranch=f,Si(v,f)?(c(v,f,p.hiddenContainer,null,s,p,r,i,l),p.deps<=0?p.resolve():g&&(m||(c(h,d,n,o,s,null,r,i,l),ii(p,d)))):(p.pendingId=ei++,m?(p.isHydrating=!1,p.activeBranch=v):a(v,s,p),p.deps=0,p.effects.length=0,p.hiddenContainer=u("div"),g?(c(null,f,p.hiddenContainer,null,s,p,r,i,l),p.deps<=0?p.resolve():(c(h,d,n,o,s,null,r,i,l),ii(p,d))):h&&Si(h,f)?(c(h,f,n,o,s,p,r,i,l),p.resolve(!0)):(c(null,f,p.hiddenContainer,null,s,p,r,i,l),p.deps<=0&&p.resolve()));else if(h&&Si(h,f))c(h,f,n,o,s,p,r,i,l),ii(p,f);else if(ni(t,"onPending"),p.pendingBranch=f,512&f.shapeFlag?p.pendingId=f.component.suspenseId:p.pendingId=ei++,c(null,f,p.hiddenContainer,null,s,p,r,i,l),p.deps<=0)p.resolve();else{const{timeout:e,pendingId:t}=p;e>0?setTimeout(()=>{p.pendingId===t&&p.fallback(d)},e):0===e&&p.fallback(d)}}(e,t,n,o,s,i,l,c,a)}},hydrate:function(e,t,n,o,s,r,i,l,c){const a=t.suspense=oi(t,o,n,e.parentNode,document.createElement("div"),null,s,r,i,l,!0),u=c(e,a.pendingBranch=t.ssContent,n,a,r,i);return 0===a.deps&&a.resolve(!1,!0),u},normalize:function(e){const{shapeFlag:t,children:n}=e,o=32&t;e.ssContent=si(o?n.default:n),e.ssFallback=o?si(n.fallback):Ti(ai)}};function ni(e,t){const n=e.props&&e.props[t];_(n)&&n()}function oi(e,t,n,o,s,r,i,l,c,a,u=!1){const{p,m:f,um:d,n:h,o:{parentNode:v,remove:g}}=a;let m;const _=function(e){const t=e.props&&e.props.suspensible;return null!=t&&!1!==t}(e);_&&t&&t.pendingBranch&&(m=t.pendingId,t.deps++);const y=e.props?B(e.props.timeout):void 0,b=r,C={vnode:e,parent:t,parentComponent:n,namespace:i,container:o,hiddenContainer:s,deps:0,pendingId:ei++,timeout:"number"==typeof y?y:-1,activeBranch:null,pendingBranch:null,isInFallback:!u,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1,n=!1){const{vnode:o,activeBranch:s,pendingBranch:i,pendingId:l,effects:c,parentComponent:a,container:u}=C;let p=!1;C.isHydrating?C.isHydrating=!1:e||(p=s&&i.transition&&"out-in"===i.transition.mode,p&&(s.transition.afterLeave=()=>{l===C.pendingId&&(f(i,u,r===b?h(s):r,0),Sn(c))}),s&&(v(s.el)===u&&(r=h(s)),d(s,a,C,!0)),p||f(i,u,r,0)),ii(C,i),C.pendingBranch=null,C.isInFallback=!1;let g=C.parent,y=!1;for(;g;){if(g.pendingBranch){g.effects.push(...c),y=!0;break}g=g.parent}y||p||Sn(c),C.effects=[],_&&t&&t.pendingBranch&&m===t.pendingId&&(t.deps--,0!==t.deps||n||t.resolve()),ni(o,"onResolve")},fallback(e){if(!C.pendingBranch)return;const{vnode:t,activeBranch:n,parentComponent:o,container:s,namespace:r}=C;ni(t,"onFallback");const i=h(n),a=()=>{C.isInFallback&&(p(null,e,s,i,o,null,r,l,c),ii(C,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(n.transition.afterLeave=a),C.isInFallback=!0,d(n,o,null,!0),u||a()},move(e,t,n){C.activeBranch&&f(C.activeBranch,e,t,n),C.container=e},next:()=>C.activeBranch&&h(C.activeBranch),registerDep(e,t,n){const o=!!C.pendingBranch;o&&C.deps++;const s=e.vnode.el;e.asyncDep.catch(t=>{pn(t,e,0)}).then(r=>{if(e.isUnmounted||C.isUnmounted||C.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:l}=e;Zi(e,r,!1),s&&(l.el=s);const c=!s&&e.subTree.el;t(e,l,v(s||e.subTree.el),s?null:h(e.subTree),C,i,n),c&&g(c),Zr(e,l.el),o&&0===--C.deps&&C.resolve()})},unmount(e,t){C.isUnmounted=!0,C.activeBranch&&d(C.activeBranch,n,e,t),C.pendingBranch&&d(C.pendingBranch,n,e,t)}};return C}function si(e){let t;if(_(e)){const n=gi&&e._c;n&&(e._d=!1,di()),e=e(),n&&(e._d=!0,t=fi,hi())}if(h(e)){const t=function(e){let t;for(let n=0;n<e.length;n++){const o=e[n];if(!Ci(o))return;if(o.type!==ai||"v-if"===o.children){if(t)return;t=o}}return t}(e);e=t}return e=Fi(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter(t=>t!==e)),e}function ri(e,t){t&&t.pendingBranch?h(e)?t.effects.push(...e):t.effects.push(e):Sn(e)}function ii(e,t){e.activeBranch=t;const{vnode:n,parentComponent:o}=e;let s=t.el;for(;!s&&t.component;)s=(t=t.component.subTree).el;n.el=s,o&&o.subTree===n&&(o.vnode.el=s,Zr(o,s))}const li=Symbol.for("v-fgt"),ci=Symbol.for("v-txt"),ai=Symbol.for("v-cmt"),ui=Symbol.for("v-stc"),pi=[];let fi=null;function di(e=!1){pi.push(fi=e?null:[])}function hi(){pi.pop(),fi=pi[pi.length-1]||null}let vi,gi=1;function mi(e,t=!1){gi+=e,e<0&&fi&&t&&(fi.hasOnce=!0)}function _i(e){return e.dynamicChildren=gi>0?fi||r:null,hi(),gi>0&&fi&&fi.push(e),e}function yi(e,t,n,o,s,r){return _i(ki(e,t,n,o,s,r,!0))}function bi(e,t,n,o,s){return _i(Ti(e,t,n,o,s,!0))}function Ci(e){return!!e&&!0===e.__v_isVNode}function Si(e,t){return e.type===t.type&&e.key===t.key}function xi(e){vi=e}const Ei=({key:e})=>null!=e?e:null,wi=({ref:e,ref_key:t,ref_for:n})=>("number"==typeof e&&(e=""+e),null!=e?y(e)||Ft(e)||_(e)?{i:Vn,r:e,k:t,f:!!n}:e:null);function ki(e,t=null,n=null,o=0,s=null,r=(e===li?0:1),i=!1,l=!1){const c={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Ei(t),ref:t&&wi(t),scopeId:Dn,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetStart:null,targetAnchor:null,staticCount:0,shapeFlag:r,patchFlag:o,dynamicProps:s,dynamicChildren:null,appContext:null,ctx:Vn};return l?(Li(c,n),128&r&&e.normalize(c)):n&&(c.shapeFlag|=y(n)?8:16),gi>0&&!i&&fi&&(c.patchFlag>0||6&r)&&32!==c.patchFlag&&fi.push(c),c}const Ti=function(e,t=null,n=null,o=0,s=null,r=!1){if(e&&e!==ds||(e=ai),Ci(e)){const o=Oi(e,t,!0);return n&&Li(o,n),gi>0&&!r&&fi&&(6&o.shapeFlag?fi[fi.indexOf(e)]=o:fi.push(o)),o.patchFlag=-2,o}if(i=e,_(i)&&"__vccOpts"in i&&(e=e.__vccOpts),t){t=Ai(t);let{class:e,style:n}=t;e&&!y(e)&&(t.class=Y(e)),C(n)&&(At(n)&&!h(n)&&(n=u({},n)),t.style=W(n))}var i;return ki(e,t,n,o,s,y(e)?1:Qr(e)?128:qn(e)?64:C(e)?4:_(e)?2:0,r,!0)};function Ai(e){return e?At(e)||ar(e)?u({},e):e:null}function Oi(e,t,n=!1,o=!1){const{props:s,ref:r,patchFlag:i,children:l,transition:c}=e,a=t?Ii(s||{},t):s,u={__v_isVNode:!0,__v_skip:!0,type:e.type,props:a,key:a&&Ei(a),ref:t&&t.ref?n&&r?h(r)?r.concat(wi(t)):[r,wi(t)]:wi(t):r,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:l,target:e.target,targetStart:e.targetStart,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==li?-1===i?16:16|i:i,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:c,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Oi(e.ssContent),ssFallback:e.ssFallback&&Oi(e.ssFallback),placeholder:e.placeholder,el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce};return c&&o&&mo(u,c.clone(u)),u}function Ri(e=" ",t=0){return Ti(ci,null,e,t)}function Ni(e,t){const n=Ti(ui,null,e);return n.staticCount=t,n}function Pi(e="",t=!1){return t?(di(),bi(ai,null,e)):Ti(ai,null,e)}function Fi(e){return null==e||"boolean"==typeof e?Ti(ai):h(e)?Ti(li,null,e.slice()):Ci(e)?Mi(e):Ti(ci,null,String(e))}function Mi(e){return null===e.el&&-1!==e.patchFlag||e.memo?e:Oi(e)}function Li(e,t){let n=0;const{shapeFlag:o}=e;if(null==t)t=null;else if(h(t))n=16;else if("object"==typeof t){if(65&o){const n=t.default;return void(n&&(n._c&&(n._d=!1),Li(e,n()),n._c&&(n._d=!0)))}{n=32;const o=t._;o||ar(t)?3===o&&Vn&&(1===Vn.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=Vn}}else _(t)?(t={default:t,_ctx:Vn},n=32):(t=String(t),64&o?(n=16,t=[Ri(t)]):n=8);e.children=t,e.shapeFlag|=n}function Ii(...e){const t={};for(let n=0;n<e.length;n++){const o=e[n];for(const e in o)if("class"===e)t.class!==o.class&&(t.class=Y([t.class,o.class]));else if("style"===e)t.style=W([t.style,o.style]);else if(c(e)){const n=t[e],s=o[e];!s||n===s||h(n)&&n.includes(s)||(t[e]=n?[].concat(n,s):s)}else""!==e&&(t[e]=o[e])}return t}function Vi(e,t,n,o=null){un(e,t,7,[n,o])}const Di=er();let Ui=0;function Bi(e,t,n){const o=e.type,r=(t?t.appContext:e.appContext)||Di,i={uid:Ui++,vnode:e,type:o,parent:t,appContext:r,root:null,next:null,subTree:null,effect:null,update:null,job:null,scope:new ce(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(r.provides),ids:t?t.ids:["",0,0],accessCache:null,renderCache:[],components:null,directives:null,propsOptions:dr(o,r),emitsOptions:zr(o,r),emit:null,emitted:null,propsDefaults:s,inheritAttrs:o.inheritAttrs,ctx:s,data:s,props:s,attrs:s,slots:s,refs:s,setupState:s,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return i.ctx={_:i},i.root=t?t.root:i,i.emit=Wr.bind(null,i),e.ce&&e.ce(i),i}let ji=null;const $i=()=>ji||Vn;let Hi,Wi;{const e=$(),t=(t,n)=>{let o;return(o=e[t])||(o=e[t]=[]),o.push(n),e=>{o.length>1?o.forEach(t=>t(e)):o[0](e)}};Hi=t("__VUE_INSTANCE_SETTERS__",e=>ji=e),Wi=t("__VUE_SSR_SETTERS__",e=>Ji=e)}const Ki=e=>{const t=ji;return Hi(e),e.scope.on(),()=>{e.scope.off(),Hi(t)}},zi=()=>{ji&&ji.scope.off(),Hi(null)};function qi(e){return 4&e.vnode.shapeFlag}let Gi,Yi,Ji=!1;function Xi(e,t=!1,n=!1){t&&Wi(t);const{props:o,children:s}=e.vnode,r=qi(e);!function(e,t,n,o=!1){const s={},r=cr();e.propsDefaults=Object.create(null),ur(e,t,s,r);for(const t in e.propsOptions[0])t in s||(s[t]=void 0);n?e.props=o?s:Ct(s):e.type.props?e.props=s:e.props=r,e.attrs=r}(e,o,r,t),Cr(e,s,n||t);const i=r?function(e,t){const n=e.type;e.accessCache=Object.create(null),e.proxy=new Proxy(e.ctx,ks);const{setup:o}=n;if(o){Re();const n=e.setupContext=o.length>1?ol(e):null,s=Ki(e),r=an(o,e,0,[e.props,n]),i=S(r);if(Ne(),s(),!i&&!e.sp||Bo(e)||Co(e),i){if(r.then(zi,zi),t)return r.then(n=>{Zi(e,n,t)}).catch(t=>{pn(t,e,0)});e.asyncDep=r}else Zi(e,r,t)}else tl(e,t)}(e,t):void 0;return t&&Wi(!1),i}function Zi(e,t,n){_(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:C(t)&&(e.devtoolsRawSetupState=t,e.setupState=$t(t)),tl(e,n)}function Qi(e){Gi=e,Yi=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,Ts))}}const el=()=>!Gi;function tl(e,t,n){const o=e.type;if(!e.render){if(!t&&Gi&&!o.render){const t=o.template||zs(e).template;if(t){const{isCustomElement:n,compilerOptions:s}=e.appContext.config,{delimiters:r,compilerOptions:i}=o,l=u(u({isCustomElement:n,delimiters:r},s),i);o.render=Gi(t,l)}}e.render=o.render||i,Yi&&Yi(e)}{const t=Ki(e);Re();try{!function(e){const t=zs(e),n=e.proxy,o=e.ctx;Hs=!1,t.beforeCreate&&Ws(t.beforeCreate,e,"bc");const{data:s,computed:r,methods:l,watch:c,provide:a,inject:u,created:p,beforeMount:f,mounted:d,beforeUpdate:v,updated:g,activated:m,deactivated:y,beforeDestroy:b,beforeUnmount:S,destroyed:x,unmounted:E,render:w,renderTracked:k,renderTriggered:T,errorCaptured:A,serverPrefetch:O,expose:R,inheritAttrs:N,components:P,directives:F,filters:M}=t;if(u&&function(e,t){h(e)&&(e=Js(e));for(const n in e){const o=e[n];let s;s=C(o)?"default"in o?rr(o.from||n,o.default,!0):rr(o.from||n):rr(o),Ft(s)?Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e}):t[n]=s}}(u,o),l)for(const e in l){const t=l[e];_(t)&&(o[e]=t.bind(n))}if(s){const t=s.call(n,n);C(t)&&(e.data=bt(t))}if(Hs=!0,r)for(const e in r){const t=r[e],s=_(t)?t.bind(n,n):_(t.get)?t.get.bind(n,n):i,l=!_(t)&&_(t.set)?t.set.bind(n):i,c=il({get:s,set:l});Object.defineProperty(o,e,{enumerable:!0,configurable:!0,get:()=>c.value,set:e=>c.value=e})}if(c)for(const e in c)Ks(c[e],o,n,e);if(a){const e=_(a)?a.call(n):a;Reflect.ownKeys(e).forEach(t=>{sr(t,e[t])})}function L(e,t){h(t)?t.forEach(t=>e(t.bind(n))):t&&e(t.bind(n))}if(p&&Ws(p,e,"c"),L(es,f),L(ts,d),L(ns,v),L(os,g),L(zo,m),L(qo,y),L(as,A),L(cs,k),L(ls,T),L(ss,S),L(rs,E),L(is,O),h(R))if(R.length){const t=e.exposed||(e.exposed={});R.forEach(e=>{Object.defineProperty(t,e,{get:()=>n[e],set:t=>n[e]=t,enumerable:!0})})}else e.exposed||(e.exposed={});w&&e.render===i&&(e.render=w),null!=N&&(e.inheritAttrs=N),P&&(e.components=P),F&&(e.directives=F),O&&Co(e)}(e)}finally{Ne(),t()}}}const nl={get:(e,t)=>(je(e,0,""),e[t])};function ol(e){return{attrs:new Proxy(e.attrs,nl),slots:e.slots,emit:e.emit,expose:t=>{e.exposed=t||{}}}}function sl(e){return e.exposed?e.exposeProxy||(e.exposeProxy=new Proxy($t(Rt(e.exposed)),{get:(t,n)=>n in t?t[n]:n in Es?Es[n](e):void 0,has:(e,t)=>t in e||t in Es})):e.proxy}function rl(e,t=!0){return _(e)?e.displayName||e.name:e.name||t&&e.__name}const il=(e,t)=>{const n=function(e,t,n=!1){let o,s;return _(e)?o=e:(o=e.get,s=e.set),new Jt(o,s,n)}(e,0,Ji);return n};function ll(e,t,n){const o=(e,t,n)=>{mi(-1);try{return Ti(e,t,n)}finally{mi(1)}},s=arguments.length;return 2===s?C(t)&&!h(t)?Ci(t)?o(e,null,[t]):o(e,t):o(e,null,t):(s>3?n=Array.prototype.slice.call(arguments,2):3===s&&Ci(n)&&(n=[n]),o(e,t,n))}function cl(){}function al(e,t,n,o){const s=n[o];if(s&&ul(s,e))return s;const r=t();return r.memo=e.slice(),r.cacheIndex=o,n[o]=r}function ul(e,t){const n=e.memo;if(n.length!=t.length)return!1;for(let e=0;e<n.length;e++)if(I(n[e],t[e]))return!1;return gi>0&&fi&&fi.push(e),!0}const pl="3.5.21",fl=i,dl={sp:"serverPrefetch hook",bc:"beforeCreate hook",c:"created hook",bm:"beforeMount hook",m:"mounted hook",bu:"beforeUpdate hook",u:"updated",bum:"beforeUnmount hook",um:"unmounted hook",a:"activated hook",da:"deactivated hook",ec:"errorCaptured hook",rtc:"renderTracked hook",rtg:"renderTriggered hook",0:"setup function",1:"render function",2:"watcher getter",3:"watcher callback",4:"watcher cleanup function",5:"native event handler",6:"component event handler",7:"vnode hook",8:"directive hook",9:"transition hook",10:"app errorHandler",11:"app warnHandler",12:"ref function",13:"async component loader",14:"scheduler flush",15:"component update",16:"app unmount cleanup function"},hl=Tn,vl=Nn,gl={createComponentInstance:Bi,setupComponent:Xi,renderComponentRoot:Gr,setCurrentRenderingInstance:Un,isVNode:Ci,normalizeVNode:Fi,getComponentPublicInstance:sl,ensureValidVNode:Cs,pushWarningContext:function(e){rn.push(e)},popWarningContext:function(){rn.pop()}},ml=null,_l=null,yl=null;let bl;const Cl="undefined"!=typeof window&&window.trustedTypes;if(Cl)try{bl=Cl.createPolicy("vue",{createHTML:e=>e})}catch(e){}const Sl=bl?e=>bl.createHTML(e):e=>e,xl="undefined"!=typeof document?document:null,El=xl&&xl.createElement("template"),wl={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,o)=>{const s="svg"===t?xl.createElementNS("http://www.w3.org/2000/svg",e):"mathml"===t?xl.createElementNS("http://www.w3.org/1998/Math/MathML",e):n?xl.createElement(e,{is:n}):xl.createElement(e);return"select"===e&&o&&null!=o.multiple&&s.setAttribute("multiple",o.multiple),s},createText:e=>xl.createTextNode(e),createComment:e=>xl.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>xl.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,n,o,s,r){const i=n?n.previousSibling:t.lastChild;if(s&&(s===r||s.nextSibling))for(;t.insertBefore(s.cloneNode(!0),n),s!==r&&(s=s.nextSibling););else{El.innerHTML=Sl("svg"===o?`<svg>${e}</svg>`:"mathml"===o?`<math>${e}</math>`:e);const s=El.content;if("svg"===o||"mathml"===o){const e=s.firstChild;for(;e.firstChild;)s.appendChild(e.firstChild);s.removeChild(e)}t.insertBefore(s,n)}return[i?i.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},kl="transition",Tl="animation",Al=Symbol("_vtc"),Ol={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},Rl=u({},co,Ol),Nl=(e=>(e.displayName="Transition",e.props=Rl,e))((e,{slots:t})=>ll(po,Ml(e),t)),Pl=(e,t=[])=>{h(e)?e.forEach(e=>e(...t)):e&&e(...t)},Fl=e=>!!e&&(h(e)?e.some(e=>e.length>1):e.length>1);function Ml(e){const t={};for(const n in e)n in Ol||(t[n]=e[n]);if(!1===e.css)return t;const{name:n="v",type:o,duration:s,enterFromClass:r=`${n}-enter-from`,enterActiveClass:i=`${n}-enter-active`,enterToClass:l=`${n}-enter-to`,appearFromClass:c=r,appearActiveClass:a=i,appearToClass:p=l,leaveFromClass:f=`${n}-leave-from`,leaveActiveClass:d=`${n}-leave-active`,leaveToClass:h=`${n}-leave-to`}=e,v=function(e){if(null==e)return null;if(C(e))return[Ll(e.enter),Ll(e.leave)];{const t=Ll(e);return[t,t]}}(s),g=v&&v[0],m=v&&v[1],{onBeforeEnter:_,onEnter:y,onEnterCancelled:b,onLeave:S,onLeaveCancelled:x,onBeforeAppear:E=_,onAppear:w=y,onAppearCancelled:k=b}=t,T=(e,t,n,o)=>{e._enterCancelled=o,Vl(e,t?p:l),Vl(e,t?a:i),n&&n()},A=(e,t)=>{e._isLeaving=!1,Vl(e,f),Vl(e,h),Vl(e,d),t&&t()},O=e=>(t,n)=>{const s=e?w:y,i=()=>T(t,e,n);Pl(s,[t,i]),Dl(()=>{Vl(t,e?c:r),Il(t,e?p:l),Fl(s)||Bl(t,o,g,i)})};return u(t,{onBeforeEnter(e){Pl(_,[e]),Il(e,r),Il(e,i)},onBeforeAppear(e){Pl(E,[e]),Il(e,c),Il(e,a)},onEnter:O(!1),onAppear:O(!0),onLeave(e,t){e._isLeaving=!0;const n=()=>A(e,t);Il(e,f),e._enterCancelled?(Il(e,d),Wl()):(Wl(),Il(e,d)),Dl(()=>{e._isLeaving&&(Vl(e,f),Il(e,h),Fl(S)||Bl(e,o,m,n))}),Pl(S,[e,n])},onEnterCancelled(e){T(e,!1,void 0,!0),Pl(b,[e])},onAppearCancelled(e){T(e,!0,void 0,!0),Pl(k,[e])},onLeaveCancelled(e){A(e),Pl(x,[e])}})}function Ll(e){return B(e)}function Il(e,t){t.split(/\s+/).forEach(t=>t&&e.classList.add(t)),(e[Al]||(e[Al]=new Set)).add(t)}function Vl(e,t){t.split(/\s+/).forEach(t=>t&&e.classList.remove(t));const n=e[Al];n&&(n.delete(t),n.size||(e[Al]=void 0))}function Dl(e){requestAnimationFrame(()=>{requestAnimationFrame(e)})}let Ul=0;function Bl(e,t,n,o){const s=e._endId=++Ul,r=()=>{s===e._endId&&o()};if(null!=n)return setTimeout(r,n);const{type:i,timeout:l,propCount:c}=jl(e,t);if(!i)return o();const a=i+"end";let u=0;const p=()=>{e.removeEventListener(a,f),r()},f=t=>{t.target===e&&++u>=c&&p()};setTimeout(()=>{u<c&&p()},l+1),e.addEventListener(a,f)}function jl(e,t){const n=window.getComputedStyle(e),o=e=>(n[e]||"").split(", "),s=o(`${kl}Delay`),r=o(`${kl}Duration`),i=$l(s,r),l=o(`${Tl}Delay`),c=o(`${Tl}Duration`),a=$l(l,c);let u=null,p=0,f=0;return t===kl?i>0&&(u=kl,p=i,f=r.length):t===Tl?a>0&&(u=Tl,p=a,f=c.length):(p=Math.max(i,a),u=p>0?i>a?kl:Tl:null,f=u?u===kl?r.length:c.length:0),{type:u,timeout:p,propCount:f,hasTransform:u===kl&&/\b(?:transform|all)(?:,|$)/.test(o(`${kl}Property`).toString())}}function $l(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map((t,n)=>Hl(t)+Hl(e[n])))}function Hl(e){return"auto"===e?0:1e3*Number(e.slice(0,-1).replace(",","."))}function Wl(){return document.body.offsetHeight}const Kl=Symbol("_vod"),zl=Symbol("_vsh"),ql={name:"show",beforeMount(e,{value:t},{transition:n}){e[Kl]="none"===e.style.display?"":e.style.display,n&&t?n.beforeEnter(e):Gl(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:o}){!t!=!n&&(o?t?(o.beforeEnter(e),Gl(e,!0),o.enter(e)):o.leave(e,()=>{Gl(e,!1)}):Gl(e,t))},beforeUnmount(e,{value:t}){Gl(e,t)}};function Gl(e,t){e.style.display=t?e[Kl]:"none",e[zl]=!t}const Yl=Symbol("");function Jl(e){const t=$i();if(!t)return;const n=t.ut=(n=e(t.proxy))=>{Array.from(document.querySelectorAll(`[data-v-owner="${t.uid}"]`)).forEach(e=>Zl(e,n))},o=()=>{const o=e(t.proxy);t.ce?Zl(t.ce,o):Xl(t.subTree,o),n(o)};ns(()=>{Sn(o)}),ts(()=>{Dr(o,i,{flush:"post"});const e=new MutationObserver(o);e.observe(t.subTree.el.parentNode,{childList:!0}),rs(()=>e.disconnect())})}function Xl(e,t){if(128&e.shapeFlag){const n=e.suspense;e=n.activeBranch,n.pendingBranch&&!n.isHydrating&&n.effects.push(()=>{Xl(n.activeBranch,t)})}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)Zl(e.el,t);else if(e.type===li)e.children.forEach(e=>Xl(e,t));else if(e.type===ui){let{el:n,anchor:o}=e;for(;n&&(Zl(n,t),n!==o);)n=n.nextSibling}}function Zl(e,t){if(1===e.nodeType){const n=e.style;let o="";for(const e in t){const s=re(t[e]);n.setProperty(`--${e}`,s),o+=`--${e}: ${s};`}n[Yl]=o}}const Ql=/(?:^|;)\s*display\s*:/,ec=/\s*!important$/;function tc(e,t,n){if(h(n))n.forEach(n=>tc(e,t,n));else if(null==n&&(n=""),t.startsWith("--"))e.setProperty(t,n);else{const o=function(e,t){const n=oc[t];if(n)return n;let o=N(t);if("filter"!==o&&o in e)return oc[t]=o;o=M(o);for(let n=0;n<nc.length;n++){const s=nc[n]+o;if(s in e)return oc[t]=s}return t}(e,t);ec.test(n)?e.setProperty(F(o),n.replace(ec,""),"important"):e[o]=n}}const nc=["Webkit","Moz","ms"],oc={},sc="http://www.w3.org/1999/xlink";function rc(e,t,n,o,s,r=X(t)){o&&t.startsWith("xlink:")?null==n?e.removeAttributeNS(sc,t.slice(6,t.length)):e.setAttributeNS(sc,t,n):null==n||r&&!Z(n)?e.removeAttribute(t):e.setAttribute(t,r?"":b(n)?String(n):n)}function ic(e,t,n,o,s){if("innerHTML"===t||"textContent"===t)return void(null!=n&&(e[t]="innerHTML"===t?Sl(n):n));const r=e.tagName;if("value"===t&&"PROGRESS"!==r&&!r.includes("-")){const o="OPTION"===r?e.getAttribute("value")||"":e.value,s=null==n?"checkbox"===e.type?"on":"":String(n);return o===s&&"_value"in e||(e.value=s),null==n&&e.removeAttribute(t),void(e._value=n)}let i=!1;if(""===n||null==n){const o=typeof e[t];"boolean"===o?n=Z(n):null==n&&"string"===o?(n="",i=!0):"number"===o&&(n=0,i=!0)}try{e[t]=n}catch(e){}i&&e.removeAttribute(s||t)}function lc(e,t,n,o){e.addEventListener(t,n,o)}const cc=Symbol("_vei");const ac=/(?:Once|Passive|Capture)$/;let uc=0;const pc=Promise.resolve(),fc=()=>uc||(pc.then(()=>uc=0),uc=Date.now()),dc=e=>111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)>96&&e.charCodeAt(2)<123,hc={};function vc(e,t,n){let o=yo(e,t);k(o)&&(o=u({},o,t));class s extends _c{constructor(e){super(o,e,n)}}return s.def=o,s}const gc=(e,t)=>vc(e,t,sa),mc="undefined"!=typeof HTMLElement?HTMLElement:class{};class _c extends mc{constructor(e,t={},n=oa){super(),this._def=e,this._props=t,this._createApp=n,this._isVueCE=!0,this._instance=null,this._app=null,this._nonce=this._def.nonce,this._connected=!1,this._resolved=!1,this._numberProps=null,this._styleChildren=new WeakSet,this._ob=null,this.shadowRoot&&n!==oa?this._root=this.shadowRoot:!1!==e.shadowRoot?(this.attachShadow({mode:"open"}),this._root=this.shadowRoot):this._root=this}connectedCallback(){if(!this.isConnected)return;this.shadowRoot||this._resolved||this._parseSlots(),this._connected=!0;let e=this;for(;e=e&&(e.parentNode||e.host);)if(e instanceof _c){this._parent=e;break}this._instance||(this._resolved?this._mount(this._def):e&&e._pendingResolve?this._pendingResolve=e._pendingResolve.then(()=>{this._pendingResolve=void 0,this._resolveDef()}):this._resolveDef())}_setParent(e=this._parent){e&&(this._instance.parent=e._instance,this._inheritParentContext(e))}_inheritParentContext(e=this._parent){e&&this._app&&Object.setPrototypeOf(this._app._context.provides,e._instance.provides)}disconnectedCallback(){this._connected=!1,yn(()=>{this._connected||(this._ob&&(this._ob.disconnect(),this._ob=null),this._app&&this._app.unmount(),this._instance&&(this._instance.ce=void 0),this._app=this._instance=null)})}_resolveDef(){if(this._pendingResolve)return;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);this._ob=new MutationObserver(e=>{for(const t of e)this._setAttr(t.attributeName)}),this._ob.observe(this,{attributes:!0});const e=(e,t=!1)=>{this._resolved=!0,this._pendingResolve=void 0;const{props:n,styles:o}=e;let s;if(n&&!h(n))for(const e in n){const t=n[e];(t===Number||t&&t.type===Number)&&(e in this._props&&(this._props[e]=B(this._props[e])),(s||(s=Object.create(null)))[N(e)]=!0)}this._numberProps=s,this._resolveProps(e),this.shadowRoot&&this._applyStyles(o),this._mount(e)},t=this._def.__asyncLoader;t?this._pendingResolve=t().then(t=>{t.configureApp=this._def.configureApp,e(this._def=t,!0)}):e(this._def)}_mount(e){e.name||(e.name="VueElement"),this._app=this._createApp(e),this._inheritParentContext(),e.configureApp&&e.configureApp(this._app),this._app._ceVNode=this._createVNode(),this._app.mount(this._root);const t=this._instance&&this._instance.exposed;if(t)for(const e in t)d(this,e)||Object.defineProperty(this,e,{get:()=>Ut(t[e])})}_resolveProps(e){const{props:t}=e,n=h(t)?t:Object.keys(t||{});for(const e of Object.keys(this))"_"!==e[0]&&n.includes(e)&&this._setProp(e,this[e]);for(const e of n.map(N))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t,!0,!0)}})}_setAttr(e){if(e.startsWith("data-v-"))return;const t=this.hasAttribute(e);let n=t?this.getAttribute(e):hc;const o=N(e);t&&this._numberProps&&this._numberProps[o]&&(n=B(n)),this._setProp(o,n,!1,!0)}_getProp(e){return this._props[e]}_setProp(e,t,n=!0,o=!1){if(t!==this._props[e]&&(t===hc?delete this._props[e]:(this._props[e]=t,"key"===e&&this._app&&(this._app._ceVNode.key=t)),o&&this._instance&&this._update(),n)){const n=this._ob;n&&n.disconnect(),!0===t?this.setAttribute(F(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute(F(e),t+""):t||this.removeAttribute(F(e)),n&&n.observe(this,{attributes:!0})}}_update(){const e=this._createVNode();this._app&&(e.appContext=this._app._context),ta(e,this._root)}_createVNode(){const e={};this.shadowRoot||(e.onVnodeMounted=e.onVnodeUpdated=this._renderSlots.bind(this));const t=Ti(this._def,u(e,this._props));return this._instance||(t.ce=e=>{this._instance=e,e.ce=this,e.isCE=!0;const t=(e,t)=>{this.dispatchEvent(new CustomEvent(e,k(t[0])?u({detail:t},t[0]):{detail:t}))};e.emit=(e,...n)=>{t(e,n),F(e)!==e&&t(F(e),n)},this._setParent()}),t}_applyStyles(e,t){if(!e)return;if(t){if(t===this._def||this._styleChildren.has(t))return;this._styleChildren.add(t)}const n=this._nonce;for(let t=e.length-1;t>=0;t--){const o=document.createElement("style");n&&o.setAttribute("nonce",n),o.textContent=e[t],this.shadowRoot.prepend(o)}}_parseSlots(){const e=this._slots={};let t;for(;t=this.firstChild;){const n=1===t.nodeType&&t.getAttribute("slot")||"default";(e[n]||(e[n]=[])).push(t),this.removeChild(t)}}_renderSlots(){const e=(this._teleportTarget||this).querySelectorAll("slot"),t=this._instance.type.__scopeId;for(let n=0;n<e.length;n++){const o=e[n],s=o.getAttribute("name")||"default",r=this._slots[s],i=o.parentNode;if(r)for(const e of r){if(t&&1===e.nodeType){const n=t+"-s",o=document.createTreeWalker(e,1);let s;for(e.setAttribute(n,"");s=o.nextNode();)s.setAttribute(n,"")}i.insertBefore(e,o)}else for(;o.firstChild;)i.insertBefore(o.firstChild,o);i.removeChild(o)}}_injectChildStyle(e){this._applyStyles(e.styles,e)}_removeChildStyle(e){}}function yc(e){const t=$i();return t&&t.ce||null}function bc(){const e=yc();return e&&e.shadowRoot}function Cc(e="$style"){{const t=$i();if(!t)return s;const n=t.type.__cssModules;if(!n)return s;return n[e]||s}}const Sc=new WeakMap,xc=new WeakMap,Ec=Symbol("_moveCb"),wc=Symbol("_enterCb"),kc=(e=>(delete e.props.mode,e))({name:"TransitionGroup",props:u({},Rl,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=$i(),o=io();let s,r;return os(()=>{if(!s.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,n){const o=e.cloneNode(),s=e[Al];s&&s.forEach(e=>{e.split(/\s+/).forEach(e=>e&&o.classList.remove(e))}),n.split(/\s+/).forEach(e=>e&&o.classList.add(e)),o.style.display="none";const r=1===t.nodeType?t:t.parentNode;r.appendChild(o);const{hasTransform:i}=jl(o);return r.removeChild(o),i}(s[0].el,n.vnode.el,t))return void(s=[]);s.forEach(Tc),s.forEach(Ac);const o=s.filter(Oc);Wl(),o.forEach(e=>{const n=e.el,o=n.style;Il(n,t),o.transform=o.webkitTransform=o.transitionDuration="";const s=n[Ec]=e=>{e&&e.target!==n||e&&!e.propertyName.endsWith("transform")||(n.removeEventListener("transitionend",s),n[Ec]=null,Vl(n,t))};n.addEventListener("transitionend",s)}),s=[]}),()=>{const i=Ot(e),l=Ml(i);let c=i.tag||li;if(s=[],r)for(let e=0;e<r.length;e++){const t=r[e];t.el&&t.el instanceof Element&&(s.push(t),mo(t,ho(t,l,o,n)),Sc.set(t,t.el.getBoundingClientRect()))}r=t.default?_o(t.default()):[];for(let e=0;e<r.length;e++){const t=r[e];null!=t.key&&mo(t,ho(t,l,o,n))}return Ti(c,null,r)}}});function Tc(e){const t=e.el;t[Ec]&&t[Ec](),t[wc]&&t[wc]()}function Ac(e){xc.set(e,e.el.getBoundingClientRect())}function Oc(e){const t=Sc.get(e),n=xc.get(e),o=t.left-n.left,s=t.top-n.top;if(o||s){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${o}px,${s}px)`,t.transitionDuration="0s",e}}const Rc=e=>{const t=e.props["onUpdate:modelValue"]||!1;return h(t)?e=>V(t,e):t};function Nc(e){e.target.composing=!0}function Pc(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Fc=Symbol("_assign"),Mc={created(e,{modifiers:{lazy:t,trim:n,number:o}},s){e[Fc]=Rc(s);const r=o||s.props&&"number"===s.props.type;lc(e,t?"change":"input",t=>{if(t.target.composing)return;let o=e.value;n&&(o=o.trim()),r&&(o=U(o)),e[Fc](o)}),n&&lc(e,"change",()=>{e.value=e.value.trim()}),t||(lc(e,"compositionstart",Nc),lc(e,"compositionend",Pc),lc(e,"change",Pc))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,oldValue:n,modifiers:{lazy:o,trim:s,number:r}},i){if(e[Fc]=Rc(i),e.composing)return;const l=null==t?"":t;if((!r&&"number"!==e.type||/^0\d/.test(e.value)?e.value:U(e.value))!==l){if(document.activeElement===e&&"range"!==e.type){if(o&&t===n)return;if(s&&e.value.trim()===l)return}e.value=l}}},Lc={deep:!0,created(e,t,n){e[Fc]=Rc(n),lc(e,"change",()=>{const t=e._modelValue,n=Bc(e),o=e.checked,s=e[Fc];if(h(t)){const e=ee(t,n),r=-1!==e;if(o&&!r)s(t.concat(n));else if(!o&&r){const n=[...t];n.splice(e,1),s(n)}}else if(g(t)){const e=new Set(t);o?e.add(n):e.delete(n),s(e)}else s(jc(e,o))})},mounted:Ic,beforeUpdate(e,t,n){e[Fc]=Rc(n),Ic(e,t,n)}};function Ic(e,{value:t,oldValue:n},o){let s;if(e._modelValue=t,h(t))s=ee(t,o.props.value)>-1;else if(g(t))s=t.has(o.props.value);else{if(t===n)return;s=Q(t,jc(e,!0))}e.checked!==s&&(e.checked=s)}const Vc={created(e,{value:t},n){e.checked=Q(t,n.props.value),e[Fc]=Rc(n),lc(e,"change",()=>{e[Fc](Bc(e))})},beforeUpdate(e,{value:t,oldValue:n},o){e[Fc]=Rc(o),t!==n&&(e.checked=Q(t,o.props.value))}},Dc={deep:!0,created(e,{value:t,modifiers:{number:n}},o){const s=g(t);lc(e,"change",()=>{const t=Array.prototype.filter.call(e.options,e=>e.selected).map(e=>n?U(Bc(e)):Bc(e));e[Fc](e.multiple?s?new Set(t):t:t[0]),e._assigning=!0,yn(()=>{e._assigning=!1})}),e[Fc]=Rc(o)},mounted(e,{value:t}){Uc(e,t)},beforeUpdate(e,t,n){e[Fc]=Rc(n)},updated(e,{value:t}){e._assigning||Uc(e,t)}};function Uc(e,t){const n=e.multiple,o=h(t);if(!n||o||g(t)){for(let s=0,r=e.options.length;s<r;s++){const r=e.options[s],i=Bc(r);if(n)if(o){const e=typeof i;r.selected="string"===e||"number"===e?t.some(e=>String(e)===String(i)):ee(t,i)>-1}else r.selected=t.has(i);else if(Q(Bc(r),t))return void(e.selectedIndex!==s&&(e.selectedIndex=s))}n||-1===e.selectedIndex||(e.selectedIndex=-1)}}function Bc(e){return"_value"in e?e._value:e.value}function jc(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const $c={created(e,t,n){Wc(e,t,n,null,"created")},mounted(e,t,n){Wc(e,t,n,null,"mounted")},beforeUpdate(e,t,n,o){Wc(e,t,n,o,"beforeUpdate")},updated(e,t,n,o){Wc(e,t,n,o,"updated")}};function Hc(e,t){switch(e){case"SELECT":return Dc;case"TEXTAREA":return Mc;default:switch(t){case"checkbox":return Lc;case"radio":return Vc;default:return Mc}}}function Wc(e,t,n,o,s){const r=Hc(e.tagName,n.props&&n.props.type)[s];r&&r(e,t,n,o)}const Kc=["ctrl","shift","alt","meta"],zc={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>Kc.some(n=>e[`${n}Key`]&&!t.includes(n))},qc=(e,t)=>{const n=e._withMods||(e._withMods={}),o=t.join(".");return n[o]||(n[o]=(n,...o)=>{for(let e=0;e<t.length;e++){const o=zc[t[e]];if(o&&o(n,t))return}return e(n,...o)})},Gc={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Yc=(e,t)=>{const n=e._withKeys||(e._withKeys={}),o=t.join(".");return n[o]||(n[o]=n=>{if(!("key"in n))return;const o=F(n.key);return t.some(e=>e===o||Gc[e]===o)?e(n):void 0})},Jc=u({patchProp:(e,t,n,o,s,r)=>{const i="svg"===s;"class"===t?function(e,t,n){const o=e[Al];o&&(t=(t?[t,...o]:[...o]).join(" ")),null==t?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}(e,o,i):"style"===t?function(e,t,n){const o=e.style,s=y(n);let r=!1;if(n&&!s){if(t)if(y(t))for(const e of t.split(";")){const t=e.slice(0,e.indexOf(":")).trim();null==n[t]&&tc(o,t,"")}else for(const e in t)null==n[e]&&tc(o,e,"");for(const e in n)"display"===e&&(r=!0),tc(o,e,n[e])}else if(s){if(t!==n){const e=o[Yl];e&&(n+=";"+e),o.cssText=n,r=Ql.test(n)}}else t&&e.removeAttribute("style");Kl in e&&(e[Kl]=r?o.display:"",e[zl]&&(o.display="none"))}(e,n,o):c(t)?a(t)||function(e,t,n,o,s=null){const r=e[cc]||(e[cc]={}),i=r[t];if(o&&i)i.value=o;else{const[n,l]=function(e){let t;if(ac.test(e)){let n;for(t={};n=e.match(ac);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}return[":"===e[2]?e.slice(3):F(e.slice(2)),t]}(t);if(o){const i=r[t]=function(e,t){const n=e=>{if(e._vts){if(e._vts<=n.attached)return}else e._vts=Date.now();un(function(e,t){if(h(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map(e=>t=>!t._stopped&&e&&e(t))}return t}(e,n.value),t,5,[e])};return n.value=e,n.attached=fc(),n}(o,s);lc(e,n,i,l)}else i&&(function(e,t,n,o){e.removeEventListener(t,n,o)}(e,n,i,l),r[t]=void 0)}}(e,t,0,o,r):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,n,o){if(o)return"innerHTML"===t||"textContent"===t||!!(t in e&&dc(t)&&_(n));if("spellcheck"===t||"draggable"===t||"translate"===t||"autocorrect"===t)return!1;if("form"===t)return!1;if("list"===t&&"INPUT"===e.tagName)return!1;if("type"===t&&"TEXTAREA"===e.tagName)return!1;if("width"===t||"height"===t){const t=e.tagName;if("IMG"===t||"VIDEO"===t||"CANVAS"===t||"SOURCE"===t)return!1}return(!dc(t)||!y(n))&&t in e}(e,t,o,i))?(ic(e,t,o),e.tagName.includes("-")||"value"!==t&&"checked"!==t&&"selected"!==t||rc(e,t,o,i,0,"value"!==t)):!e._isVueCE||!/[A-Z]/.test(t)&&y(o)?("true-value"===t?e._trueValue=o:"false-value"===t&&(e._falseValue=o),rc(e,t,o,i)):ic(e,N(t),o,0,t)}},wl);let Xc,Zc=!1;function Qc(){return Xc||(Xc=Er(Jc))}function ea(){return Xc=Zc?Xc:wr(Jc),Zc=!0,Xc}const ta=(...e)=>{Qc().render(...e)},na=(...e)=>{ea().hydrate(...e)},oa=(...e)=>{const t=Qc().createApp(...e),{mount:n}=t;return t.mount=e=>{const o=ia(e);if(!o)return;const s=t._component;_(s)||s.render||s.template||(s.template=o.innerHTML),1===o.nodeType&&(o.textContent="");const r=n(o,!1,ra(o));return o instanceof Element&&(o.removeAttribute("v-cloak"),o.setAttribute("data-v-app","")),r},t},sa=(...e)=>{const t=ea().createApp(...e),{mount:n}=t;return t.mount=e=>{const t=ia(e);if(t)return n(t,!0,ra(t))},t};function ra(e){return e instanceof SVGElement?"svg":"function"==typeof MathMLElement&&e instanceof MathMLElement?"mathml":void 0}function ia(e){return y(e)?document.querySelector(e):e}let la=!1;const ca=()=>{la||(la=!0,Mc.getSSRProps=({value:e})=>({value:e}),Vc.getSSRProps=({value:e},t)=>{if(t.props&&Q(t.props.value,e))return{checked:!0}},Lc.getSSRProps=({value:e},t)=>{if(h(e)){if(t.props&&ee(e,t.props.value)>-1)return{checked:!0}}else if(g(e)){if(t.props&&e.has(t.props.value))return{checked:!0}}else if(e)return{checked:!0}},$c.getSSRProps=(e,t)=>{if("string"!=typeof t.type)return;const n=Hc(t.type.toUpperCase(),t.props&&t.props.type);return n.getSSRProps?n.getSSRProps(e,t):void 0},ql.getSSRProps=({value:e})=>{if(!e)return{style:{display:"none"}}})},aa=()=>{}},262:(e,t)=>{t.A=(e,t)=>{const n=e.__vccOpts||e;for(const[e,o]of t)n[e]=o;return n}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQ1QsTUFBTyxDQUFFbXFELFNBQVMsSUFHdEJtQixHQUFjaUUsWUFBYyxDQUFDN3dDLEVBQVNwRyxLQUNwQyxHQUEwQixpQkFBZkEsRUFBTTVMLEtBQ2YsT0FFRixNQUFNOGlELEVBQWFoRSxHQUVqQmx6QyxFQUFNNUwsS0FBSzlMLGNBQ1gwWCxFQUFNM1UsT0FBUzJVLEVBQU0zVSxNQUFNK0ksTUFFN0IsT0FBSThpRCxFQUFXRCxZQUNOQyxFQUFXRCxZQUFZN3dDLEVBQVNwRyxRQUR6QyxHQXZ1Q0ZrcEMsR0FBTStOLFlBQWMsRUFBR3Z2RCxZQUNyQixJQUFLQSxFQUNILE1BQU8sQ0FBRThELE1BQU8sQ0FBRTI5QyxRQUFTLFlDNVozQixHQUFVLE0sY0NiaEJnTyxFQUFRLEVBQVUsQ0FBQ0MsRUFBSy9yRCxLQUNwQixNQUFNOEksRUFBU2lqRCxFQUFJaFosV0FBYWdaLEVBQ2hDLElBQUssTUFBTzN4RCxFQUFLRSxLQUFRMEYsRUFDckI4SSxFQUFPMU8sR0FBT0UsRUFFbEIsT0FBT3dPLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcmVuZW9zL3NsaWRlci5lZGl0b3IvLi9ub2RlX21vZHVsZXMvQHZ1ZS9zaGFyZWQvZGlzdC9zaGFyZWQuZXNtLWJ1bmRsZXIuanMiLCJ3ZWJwYWNrOi8vQHJlbmVvcy9zbGlkZXIuZWRpdG9yLy4vbm9kZV9tb2R1bGVzL0B2dWUvcmVhY3Rpdml0eS9kaXN0L3JlYWN0aXZpdHkuZXNtLWJ1bmRsZXIuanMiLCJ3ZWJwYWNrOi8vQHJlbmVvcy9zbGlkZXIuZWRpdG9yLy4vbm9kZV9tb2R1bGVzL0B2dWUvcnVudGltZS1jb3JlL2Rpc3QvcnVudGltZS1jb3JlLmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovL0ByZW5lb3Mvc2xpZGVyLmVkaXRvci8uL25vZGVfbW9kdWxlcy9AdnVlL3J1bnRpbWUtZG9tL2Rpc3QvcnVudGltZS1kb20uZXNtLWJ1bmRsZXIuanMiLCJ3ZWJwYWNrOi8vQHJlbmVvcy9zbGlkZXIuZWRpdG9yLy4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5ydW50aW1lLmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovL0ByZW5lb3Mvc2xpZGVyLmVkaXRvci8uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvZXhwb3J0SGVscGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBAdnVlL3NoYXJlZCB2My41LjIxXG4qIChjKSAyMDE4LXByZXNlbnQgWXV4aSAoRXZhbikgWW91IGFuZCBWdWUgY29udHJpYnV0b3JzXG4qIEBsaWNlbnNlIE1JVFxuKiovXG4vLyBAX19OT19TSURFX0VGRkVDVFNfX1xuZnVuY3Rpb24gbWFrZU1hcChzdHIpIHtcbiAgY29uc3QgbWFwID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGZvciAoY29uc3Qga2V5IG9mIHN0ci5zcGxpdChcIixcIikpIG1hcFtrZXldID0gMTtcbiAgcmV0dXJuICh2YWwpID0+IHZhbCBpbiBtYXA7XG59XG5cbmNvbnN0IEVNUFRZX09CSiA9ICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyBPYmplY3QuZnJlZXplKHt9KSA6IHt9O1xuY29uc3QgRU1QVFlfQVJSID0gISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSA/IE9iamVjdC5mcmVlemUoW10pIDogW107XG5jb25zdCBOT09QID0gKCkgPT4ge1xufTtcbmNvbnN0IE5PID0gKCkgPT4gZmFsc2U7XG5jb25zdCBpc09uID0gKGtleSkgPT4ga2V5LmNoYXJDb2RlQXQoMCkgPT09IDExMSAmJiBrZXkuY2hhckNvZGVBdCgxKSA9PT0gMTEwICYmIC8vIHVwcGVyY2FzZSBsZXR0ZXJcbihrZXkuY2hhckNvZGVBdCgyKSA+IDEyMiB8fCBrZXkuY2hhckNvZGVBdCgyKSA8IDk3KTtcbmNvbnN0IGlzTW9kZWxMaXN0ZW5lciA9IChrZXkpID0+IGtleS5zdGFydHNXaXRoKFwib25VcGRhdGU6XCIpO1xuY29uc3QgZXh0ZW5kID0gT2JqZWN0LmFzc2lnbjtcbmNvbnN0IHJlbW92ZSA9IChhcnIsIGVsKSA9PiB7XG4gIGNvbnN0IGkgPSBhcnIuaW5kZXhPZihlbCk7XG4gIGlmIChpID4gLTEpIHtcbiAgICBhcnIuc3BsaWNlKGksIDEpO1xuICB9XG59O1xuY29uc3QgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuY29uc3QgaGFzT3duID0gKHZhbCwga2V5KSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbCwga2V5KTtcbmNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuY29uc3QgaXNNYXAgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gXCJbb2JqZWN0IE1hcF1cIjtcbmNvbnN0IGlzU2V0ID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09IFwiW29iamVjdCBTZXRdXCI7XG5jb25zdCBpc0RhdGUgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gXCJbb2JqZWN0IERhdGVdXCI7XG5jb25zdCBpc1JlZ0V4cCA9ICh2YWwpID0+IHRvVHlwZVN0cmluZyh2YWwpID09PSBcIltvYmplY3QgUmVnRXhwXVwiO1xuY29uc3QgaXNGdW5jdGlvbiA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwiZnVuY3Rpb25cIjtcbmNvbnN0IGlzU3RyaW5nID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIjtcbmNvbnN0IGlzU3ltYm9sID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJzeW1ib2xcIjtcbmNvbnN0IGlzT2JqZWN0ID0gKHZhbCkgPT4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09IFwib2JqZWN0XCI7XG5jb25zdCBpc1Byb21pc2UgPSAodmFsKSA9PiB7XG4gIHJldHVybiAoaXNPYmplY3QodmFsKSB8fCBpc0Z1bmN0aW9uKHZhbCkpICYmIGlzRnVuY3Rpb24odmFsLnRoZW4pICYmIGlzRnVuY3Rpb24odmFsLmNhdGNoKTtcbn07XG5jb25zdCBvYmplY3RUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5jb25zdCB0b1R5cGVTdHJpbmcgPSAodmFsdWUpID0+IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuY29uc3QgdG9SYXdUeXBlID0gKHZhbHVlKSA9PiB7XG4gIHJldHVybiB0b1R5cGVTdHJpbmcodmFsdWUpLnNsaWNlKDgsIC0xKTtcbn07XG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09IFwiW29iamVjdCBPYmplY3RdXCI7XG5jb25zdCBpc0ludGVnZXJLZXkgPSAoa2V5KSA9PiBpc1N0cmluZyhrZXkpICYmIGtleSAhPT0gXCJOYU5cIiAmJiBrZXlbMF0gIT09IFwiLVwiICYmIFwiXCIgKyBwYXJzZUludChrZXksIDEwKSA9PT0ga2V5O1xuY29uc3QgaXNSZXNlcnZlZFByb3AgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcbiAgLy8gdGhlIGxlYWRpbmcgY29tbWEgaXMgaW50ZW50aW9uYWwgc28gZW1wdHkgc3RyaW5nIFwiXCIgaXMgYWxzbyBpbmNsdWRlZFxuICBcIixrZXkscmVmLHJlZl9mb3IscmVmX2tleSxvblZub2RlQmVmb3JlTW91bnQsb25Wbm9kZU1vdW50ZWQsb25Wbm9kZUJlZm9yZVVwZGF0ZSxvblZub2RlVXBkYXRlZCxvblZub2RlQmVmb3JlVW5tb3VudCxvblZub2RlVW5tb3VudGVkXCJcbik7XG5jb25zdCBpc0J1aWx0SW5EaXJlY3RpdmUgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcbiAgXCJiaW5kLGNsb2FrLGVsc2UtaWYsZWxzZSxmb3IsaHRtbCxpZixtb2RlbCxvbixvbmNlLHByZSxzaG93LHNsb3QsdGV4dCxtZW1vXCJcbik7XG5jb25zdCBjYWNoZVN0cmluZ0Z1bmN0aW9uID0gKGZuKSA9PiB7XG4gIGNvbnN0IGNhY2hlID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoKHN0cikgPT4ge1xuICAgIGNvbnN0IGhpdCA9IGNhY2hlW3N0cl07XG4gICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpO1xuICB9KTtcbn07XG5jb25zdCBjYW1lbGl6ZVJFID0gLy1cXHcvZztcbmNvbnN0IGNhbWVsaXplID0gY2FjaGVTdHJpbmdGdW5jdGlvbihcbiAgKHN0cikgPT4ge1xuICAgIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCAoYykgPT4gYy5zbGljZSgxKS50b1VwcGVyQ2FzZSgpKTtcbiAgfVxuKTtcbmNvbnN0IGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcbmNvbnN0IGh5cGhlbmF0ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oXG4gIChzdHIpID0+IHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpXG4pO1xuY29uc3QgY2FwaXRhbGl6ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4ge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xufSk7XG5jb25zdCB0b0hhbmRsZXJLZXkgPSBjYWNoZVN0cmluZ0Z1bmN0aW9uKFxuICAoc3RyKSA9PiB7XG4gICAgY29uc3QgcyA9IHN0ciA/IGBvbiR7Y2FwaXRhbGl6ZShzdHIpfWAgOiBgYDtcbiAgICByZXR1cm4gcztcbiAgfVxuKTtcbmNvbnN0IGhhc0NoYW5nZWQgPSAodmFsdWUsIG9sZFZhbHVlKSA9PiAhT2JqZWN0LmlzKHZhbHVlLCBvbGRWYWx1ZSk7XG5jb25zdCBpbnZva2VBcnJheUZucyA9IChmbnMsIC4uLmFyZykgPT4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xuICAgIGZuc1tpXSguLi5hcmcpO1xuICB9XG59O1xuY29uc3QgZGVmID0gKG9iaiwga2V5LCB2YWx1ZSwgd3JpdGFibGUgPSBmYWxzZSkgPT4ge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgd3JpdGFibGUsXG4gICAgdmFsdWVcbiAgfSk7XG59O1xuY29uc3QgbG9vc2VUb051bWJlciA9ICh2YWwpID0+IHtcbiAgY29uc3QgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogbjtcbn07XG5jb25zdCB0b051bWJlciA9ICh2YWwpID0+IHtcbiAgY29uc3QgbiA9IGlzU3RyaW5nKHZhbCkgPyBOdW1iZXIodmFsKSA6IE5hTjtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogbjtcbn07XG5sZXQgX2dsb2JhbFRoaXM7XG5jb25zdCBnZXRHbG9iYWxUaGlzID0gKCkgPT4ge1xuICByZXR1cm4gX2dsb2JhbFRoaXMgfHwgKF9nbG9iYWxUaGlzID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB7fSk7XG59O1xuY29uc3QgaWRlbnRSRSA9IC9eW18kYS16QS1aXFx4QTAtXFx1RkZGRl1bXyRhLXpBLVowLTlcXHhBMC1cXHVGRkZGXSokLztcbmZ1bmN0aW9uIGdlblByb3BzQWNjZXNzRXhwKG5hbWUpIHtcbiAgcmV0dXJuIGlkZW50UkUudGVzdChuYW1lKSA/IGBfX3Byb3BzLiR7bmFtZX1gIDogYF9fcHJvcHNbJHtKU09OLnN0cmluZ2lmeShuYW1lKX1dYDtcbn1cbmZ1bmN0aW9uIGdlbkNhY2hlS2V5KHNvdXJjZSwgb3B0aW9ucykge1xuICByZXR1cm4gc291cmNlICsgSlNPTi5zdHJpbmdpZnkoXG4gICAgb3B0aW9ucyxcbiAgICAoXywgdmFsKSA9PiB0eXBlb2YgdmFsID09PSBcImZ1bmN0aW9uXCIgPyB2YWwudG9TdHJpbmcoKSA6IHZhbFxuICApO1xufVxuXG5jb25zdCBQYXRjaEZsYWdzID0ge1xuICBcIlRFWFRcIjogMSxcbiAgXCIxXCI6IFwiVEVYVFwiLFxuICBcIkNMQVNTXCI6IDIsXG4gIFwiMlwiOiBcIkNMQVNTXCIsXG4gIFwiU1RZTEVcIjogNCxcbiAgXCI0XCI6IFwiU1RZTEVcIixcbiAgXCJQUk9QU1wiOiA4LFxuICBcIjhcIjogXCJQUk9QU1wiLFxuICBcIkZVTExfUFJPUFNcIjogMTYsXG4gIFwiMTZcIjogXCJGVUxMX1BST1BTXCIsXG4gIFwiTkVFRF9IWURSQVRJT05cIjogMzIsXG4gIFwiMzJcIjogXCJORUVEX0hZRFJBVElPTlwiLFxuICBcIlNUQUJMRV9GUkFHTUVOVFwiOiA2NCxcbiAgXCI2NFwiOiBcIlNUQUJMRV9GUkFHTUVOVFwiLFxuICBcIktFWUVEX0ZSQUdNRU5UXCI6IDEyOCxcbiAgXCIxMjhcIjogXCJLRVlFRF9GUkFHTUVOVFwiLFxuICBcIlVOS0VZRURfRlJBR01FTlRcIjogMjU2LFxuICBcIjI1NlwiOiBcIlVOS0VZRURfRlJBR01FTlRcIixcbiAgXCJORUVEX1BBVENIXCI6IDUxMixcbiAgXCI1MTJcIjogXCJORUVEX1BBVENIXCIsXG4gIFwiRFlOQU1JQ19TTE9UU1wiOiAxMDI0LFxuICBcIjEwMjRcIjogXCJEWU5BTUlDX1NMT1RTXCIsXG4gIFwiREVWX1JPT1RfRlJBR01FTlRcIjogMjA0OCxcbiAgXCIyMDQ4XCI6IFwiREVWX1JPT1RfRlJBR01FTlRcIixcbiAgXCJDQUNIRURcIjogLTEsXG4gIFwiLTFcIjogXCJDQUNIRURcIixcbiAgXCJCQUlMXCI6IC0yLFxuICBcIi0yXCI6IFwiQkFJTFwiXG59O1xuY29uc3QgUGF0Y2hGbGFnTmFtZXMgPSB7XG4gIFsxXTogYFRFWFRgLFxuICBbMl06IGBDTEFTU2AsXG4gIFs0XTogYFNUWUxFYCxcbiAgWzhdOiBgUFJPUFNgLFxuICBbMTZdOiBgRlVMTF9QUk9QU2AsXG4gIFszMl06IGBORUVEX0hZRFJBVElPTmAsXG4gIFs2NF06IGBTVEFCTEVfRlJBR01FTlRgLFxuICBbMTI4XTogYEtFWUVEX0ZSQUdNRU5UYCxcbiAgWzI1Nl06IGBVTktFWUVEX0ZSQUdNRU5UYCxcbiAgWzUxMl06IGBORUVEX1BBVENIYCxcbiAgWzEwMjRdOiBgRFlOQU1JQ19TTE9UU2AsXG4gIFsyMDQ4XTogYERFVl9ST09UX0ZSQUdNRU5UYCxcbiAgWy0xXTogYENBQ0hFRGAsXG4gIFstMl06IGBCQUlMYFxufTtcblxuY29uc3QgU2hhcGVGbGFncyA9IHtcbiAgXCJFTEVNRU5UXCI6IDEsXG4gIFwiMVwiOiBcIkVMRU1FTlRcIixcbiAgXCJGVU5DVElPTkFMX0NPTVBPTkVOVFwiOiAyLFxuICBcIjJcIjogXCJGVU5DVElPTkFMX0NPTVBPTkVOVFwiLFxuICBcIlNUQVRFRlVMX0NPTVBPTkVOVFwiOiA0LFxuICBcIjRcIjogXCJTVEFURUZVTF9DT01QT05FTlRcIixcbiAgXCJURVhUX0NISUxEUkVOXCI6IDgsXG4gIFwiOFwiOiBcIlRFWFRfQ0hJTERSRU5cIixcbiAgXCJBUlJBWV9DSElMRFJFTlwiOiAxNixcbiAgXCIxNlwiOiBcIkFSUkFZX0NISUxEUkVOXCIsXG4gIFwiU0xPVFNfQ0hJTERSRU5cIjogMzIsXG4gIFwiMzJcIjogXCJTTE9UU19DSElMRFJFTlwiLFxuICBcIlRFTEVQT1JUXCI6IDY0LFxuICBcIjY0XCI6IFwiVEVMRVBPUlRcIixcbiAgXCJTVVNQRU5TRVwiOiAxMjgsXG4gIFwiMTI4XCI6IFwiU1VTUEVOU0VcIixcbiAgXCJDT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkVcIjogMjU2LFxuICBcIjI1NlwiOiBcIkNPTVBPTkVOVF9TSE9VTERfS0VFUF9BTElWRVwiLFxuICBcIkNPTVBPTkVOVF9LRVBUX0FMSVZFXCI6IDUxMixcbiAgXCI1MTJcIjogXCJDT01QT05FTlRfS0VQVF9BTElWRVwiLFxuICBcIkNPTVBPTkVOVFwiOiA2LFxuICBcIjZcIjogXCJDT01QT05FTlRcIlxufTtcblxuY29uc3QgU2xvdEZsYWdzID0ge1xuICBcIlNUQUJMRVwiOiAxLFxuICBcIjFcIjogXCJTVEFCTEVcIixcbiAgXCJEWU5BTUlDXCI6IDIsXG4gIFwiMlwiOiBcIkRZTkFNSUNcIixcbiAgXCJGT1JXQVJERURcIjogMyxcbiAgXCIzXCI6IFwiRk9SV0FSREVEXCJcbn07XG5jb25zdCBzbG90RmxhZ3NUZXh0ID0ge1xuICBbMV06IFwiU1RBQkxFXCIsXG4gIFsyXTogXCJEWU5BTUlDXCIsXG4gIFszXTogXCJGT1JXQVJERURcIlxufTtcblxuY29uc3QgR0xPQkFMU19BTExPV0VEID0gXCJJbmZpbml0eSx1bmRlZmluZWQsTmFOLGlzRmluaXRlLGlzTmFOLHBhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LE1hdGgsTnVtYmVyLERhdGUsQXJyYXksT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCxCaWdJbnQsY29uc29sZSxFcnJvcixTeW1ib2xcIjtcbmNvbnN0IGlzR2xvYmFsbHlBbGxvd2VkID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoR0xPQkFMU19BTExPV0VEKTtcbmNvbnN0IGlzR2xvYmFsbHlXaGl0ZWxpc3RlZCA9IGlzR2xvYmFsbHlBbGxvd2VkO1xuXG5jb25zdCByYW5nZSA9IDI7XG5mdW5jdGlvbiBnZW5lcmF0ZUNvZGVGcmFtZShzb3VyY2UsIHN0YXJ0ID0gMCwgZW5kID0gc291cmNlLmxlbmd0aCkge1xuICBzdGFydCA9IE1hdGgubWF4KDAsIE1hdGgubWluKHN0YXJ0LCBzb3VyY2UubGVuZ3RoKSk7XG4gIGVuZCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGVuZCwgc291cmNlLmxlbmd0aCkpO1xuICBpZiAoc3RhcnQgPiBlbmQpIHJldHVybiBcIlwiO1xuICBsZXQgbGluZXMgPSBzb3VyY2Uuc3BsaXQoLyhcXHI/XFxuKS8pO1xuICBjb25zdCBuZXdsaW5lU2VxdWVuY2VzID0gbGluZXMuZmlsdGVyKChfLCBpZHgpID0+IGlkeCAlIDIgPT09IDEpO1xuICBsaW5lcyA9IGxpbmVzLmZpbHRlcigoXywgaWR4KSA9PiBpZHggJSAyID09PSAwKTtcbiAgbGV0IGNvdW50ID0gMDtcbiAgY29uc3QgcmVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3VudCArPSBsaW5lc1tpXS5sZW5ndGggKyAobmV3bGluZVNlcXVlbmNlc1tpXSAmJiBuZXdsaW5lU2VxdWVuY2VzW2ldLmxlbmd0aCB8fCAwKTtcbiAgICBpZiAoY291bnQgPj0gc3RhcnQpIHtcbiAgICAgIGZvciAobGV0IGogPSBpIC0gcmFuZ2U7IGogPD0gaSArIHJhbmdlIHx8IGVuZCA+IGNvdW50OyBqKyspIHtcbiAgICAgICAgaWYgKGogPCAwIHx8IGogPj0gbGluZXMubGVuZ3RoKSBjb250aW51ZTtcbiAgICAgICAgY29uc3QgbGluZSA9IGogKyAxO1xuICAgICAgICByZXMucHVzaChcbiAgICAgICAgICBgJHtsaW5lfSR7XCIgXCIucmVwZWF0KE1hdGgubWF4KDMgLSBTdHJpbmcobGluZSkubGVuZ3RoLCAwKSl9fCAgJHtsaW5lc1tqXX1gXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGxpbmVMZW5ndGggPSBsaW5lc1tqXS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG5ld0xpbmVTZXFMZW5ndGggPSBuZXdsaW5lU2VxdWVuY2VzW2pdICYmIG5ld2xpbmVTZXF1ZW5jZXNbal0ubGVuZ3RoIHx8IDA7XG4gICAgICAgIGlmIChqID09PSBpKSB7XG4gICAgICAgICAgY29uc3QgcGFkID0gc3RhcnQgLSAoY291bnQgLSAobGluZUxlbmd0aCArIG5ld0xpbmVTZXFMZW5ndGgpKTtcbiAgICAgICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1heChcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICBlbmQgPiBjb3VudCA/IGxpbmVMZW5ndGggLSBwYWQgOiBlbmQgLSBzdGFydFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmVzLnB1c2goYCAgIHwgIGAgKyBcIiBcIi5yZXBlYXQocGFkKSArIFwiXlwiLnJlcGVhdChsZW5ndGgpKTtcbiAgICAgICAgfSBlbHNlIGlmIChqID4gaSkge1xuICAgICAgICAgIGlmIChlbmQgPiBjb3VudCkge1xuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gTWF0aC5tYXgoTWF0aC5taW4oZW5kIC0gY291bnQsIGxpbmVMZW5ndGgpLCAxKTtcbiAgICAgICAgICAgIHJlcy5wdXNoKGAgICB8ICBgICsgXCJeXCIucmVwZWF0KGxlbmd0aCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb3VudCArPSBsaW5lTGVuZ3RoICsgbmV3TGluZVNlcUxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXMuam9pbihcIlxcblwiKTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGUodmFsdWUpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgY29uc3QgcmVzID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaXRlbSA9IHZhbHVlW2ldO1xuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IGlzU3RyaW5nKGl0ZW0pID8gcGFyc2VTdHJpbmdTdHlsZShpdGVtKSA6IG5vcm1hbGl6ZVN0eWxlKGl0ZW0pO1xuICAgICAgaWYgKG5vcm1hbGl6ZWQpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbm9ybWFsaXplZCkge1xuICAgICAgICAgIHJlc1trZXldID0gbm9ybWFsaXplZFtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH0gZWxzZSBpZiAoaXNTdHJpbmcodmFsdWUpIHx8IGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuY29uc3QgbGlzdERlbGltaXRlclJFID0gLzsoPyFbXihdKlxcKSkvZztcbmNvbnN0IHByb3BlcnR5RGVsaW1pdGVyUkUgPSAvOihbXl0rKS87XG5jb25zdCBzdHlsZUNvbW1lbnRSRSA9IC9cXC9cXCpbXl0qP1xcKlxcLy9nO1xuZnVuY3Rpb24gcGFyc2VTdHJpbmdTdHlsZShjc3NUZXh0KSB7XG4gIGNvbnN0IHJldCA9IHt9O1xuICBjc3NUZXh0LnJlcGxhY2Uoc3R5bGVDb21tZW50UkUsIFwiXCIpLnNwbGl0KGxpc3REZWxpbWl0ZXJSRSkuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIGlmIChpdGVtKSB7XG4gICAgICBjb25zdCB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyUkUpO1xuICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJldFt0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnlTdHlsZShzdHlsZXMpIHtcbiAgaWYgKCFzdHlsZXMpIHJldHVybiBcIlwiO1xuICBpZiAoaXNTdHJpbmcoc3R5bGVzKSkgcmV0dXJuIHN0eWxlcztcbiAgbGV0IHJldCA9IFwiXCI7XG4gIGZvciAoY29uc3Qga2V5IGluIHN0eWxlcykge1xuICAgIGNvbnN0IHZhbHVlID0gc3R5bGVzW2tleV07XG4gICAgaWYgKGlzU3RyaW5nKHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRLZXkgPSBrZXkuc3RhcnRzV2l0aChgLS1gKSA/IGtleSA6IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgcmV0ICs9IGAke25vcm1hbGl6ZWRLZXl9OiR7dmFsdWV9O2A7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiBub3JtYWxpemVDbGFzcyh2YWx1ZSkge1xuICBsZXQgcmVzID0gXCJcIjtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHJlcyA9IHZhbHVlO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZUNsYXNzKHZhbHVlW2ldKTtcbiAgICAgIGlmIChub3JtYWxpemVkKSB7XG4gICAgICAgIHJlcyArPSBub3JtYWxpemVkICsgXCIgXCI7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIGZvciAoY29uc3QgbmFtZSBpbiB2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlW25hbWVdKSB7XG4gICAgICAgIHJlcyArPSBuYW1lICsgXCIgXCI7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXMudHJpbSgpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHMocHJvcHMpIHtcbiAgaWYgKCFwcm9wcykgcmV0dXJuIG51bGw7XG4gIGxldCB7IGNsYXNzOiBrbGFzcywgc3R5bGUgfSA9IHByb3BzO1xuICBpZiAoa2xhc3MgJiYgIWlzU3RyaW5nKGtsYXNzKSkge1xuICAgIHByb3BzLmNsYXNzID0gbm9ybWFsaXplQ2xhc3Moa2xhc3MpO1xuICB9XG4gIGlmIChzdHlsZSkge1xuICAgIHByb3BzLnN0eWxlID0gbm9ybWFsaXplU3R5bGUoc3R5bGUpO1xuICB9XG4gIHJldHVybiBwcm9wcztcbn1cblxuY29uc3QgSFRNTF9UQUdTID0gXCJodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSxhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoZ3JvdXAsaDEsaDIsaDMsaDQsaDUsaDYsbmF2LHNlY3Rpb24sZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ1YnkscyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSxjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbixvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLGRldGFpbHMsZGlhbG9nLG1lbnUsc3VtbWFyeSx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdFwiO1xuY29uc3QgU1ZHX1RBR1MgPSBcInN2ZyxhbmltYXRlLGFuaW1hdGVNb3Rpb24sYW5pbWF0ZVRyYW5zZm9ybSxjaXJjbGUsY2xpcFBhdGgsY29sb3ItcHJvZmlsZSxkZWZzLGRlc2MsZGlzY2FyZCxlbGxpcHNlLGZlQmxlbmQsZmVDb2xvck1hdHJpeCxmZUNvbXBvbmVudFRyYW5zZmVyLGZlQ29tcG9zaXRlLGZlQ29udm9sdmVNYXRyaXgsZmVEaWZmdXNlTGlnaHRpbmcsZmVEaXNwbGFjZW1lbnRNYXAsZmVEaXN0YW50TGlnaHQsZmVEcm9wU2hhZG93LGZlRmxvb2QsZmVGdW5jQSxmZUZ1bmNCLGZlRnVuY0csZmVGdW5jUixmZUdhdXNzaWFuQmx1cixmZUltYWdlLGZlTWVyZ2UsZmVNZXJnZU5vZGUsZmVNb3JwaG9sb2d5LGZlT2Zmc2V0LGZlUG9pbnRMaWdodCxmZVNwZWN1bGFyTGlnaHRpbmcsZmVTcG90TGlnaHQsZmVUaWxlLGZlVHVyYnVsZW5jZSxmaWx0ZXIsZm9yZWlnbk9iamVjdCxnLGhhdGNoLGhhdGNocGF0aCxpbWFnZSxsaW5lLGxpbmVhckdyYWRpZW50LG1hcmtlcixtYXNrLG1lc2gsbWVzaGdyYWRpZW50LG1lc2hwYXRjaCxtZXNocm93LG1ldGFkYXRhLG1wYXRoLHBhdGgscGF0dGVybixwb2x5Z29uLHBvbHlsaW5lLHJhZGlhbEdyYWRpZW50LHJlY3Qsc2V0LHNvbGlkY29sb3Isc3RvcCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dFBhdGgsdGl0bGUsdHNwYW4sdW5rbm93bix1c2Usdmlld1wiO1xuY29uc3QgTUFUSF9UQUdTID0gXCJhbm5vdGF0aW9uLGFubm90YXRpb24teG1sLG1hY3Rpb24sbWFsaWduZ3JvdXAsbWFsaWdubWFyayxtYXRoLG1lbmNsb3NlLG1lcnJvcixtZmVuY2VkLG1mcmFjLG1mcmFjdGlvbixtZ2x5cGgsbWksbWxhYmVsZWR0cixtbG9uZ2RpdixtbXVsdGlzY3JpcHRzLG1uLG1vLG1vdmVyLG1wYWRkZWQsbXBoYW50b20sbXByZXNjcmlwdHMsbXJvb3QsbXJvdyxtcyxtc2NhcnJpZXMsbXNjYXJyeSxtc2dyb3VwLG1zbGluZSxtc3BhY2UsbXNxcnQsbXNyb3csbXN0YWNrLG1zdHlsZSxtc3ViLG1zdWJzdXAsbXN1cCxtdGFibGUsbXRkLG10ZXh0LG10cixtdW5kZXIsbXVuZGVyb3Zlcixub25lLHNlbWFudGljc1wiO1xuY29uc3QgVk9JRF9UQUdTID0gXCJhcmVhLGJhc2UsYnIsY29sLGVtYmVkLGhyLGltZyxpbnB1dCxsaW5rLG1ldGEscGFyYW0sc291cmNlLHRyYWNrLHdiclwiO1xuY29uc3QgaXNIVE1MVGFnID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoSFRNTF9UQUdTKTtcbmNvbnN0IGlzU1ZHVGFnID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoU1ZHX1RBR1MpO1xuY29uc3QgaXNNYXRoTUxUYWcgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChNQVRIX1RBR1MpO1xuY29uc3QgaXNWb2lkVGFnID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoVk9JRF9UQUdTKTtcblxuY29uc3Qgc3BlY2lhbEJvb2xlYW5BdHRycyA9IGBpdGVtc2NvcGUsYWxsb3dmdWxsc2NyZWVuLGZvcm1ub3ZhbGlkYXRlLGlzbWFwLG5vbW9kdWxlLG5vdmFsaWRhdGUscmVhZG9ubHlgO1xuY29uc3QgaXNTcGVjaWFsQm9vbGVhbkF0dHIgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChzcGVjaWFsQm9vbGVhbkF0dHJzKTtcbmNvbnN0IGlzQm9vbGVhbkF0dHIgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcbiAgc3BlY2lhbEJvb2xlYW5BdHRycyArIGAsYXN5bmMsYXV0b2ZvY3VzLGF1dG9wbGF5LGNvbnRyb2xzLGRlZmF1bHQsZGVmZXIsZGlzYWJsZWQsaGlkZGVuLGluZXJ0LGxvb3Asb3BlbixyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3MsY2hlY2tlZCxtdXRlZCxtdWx0aXBsZSxzZWxlY3RlZGBcbik7XG5mdW5jdGlvbiBpbmNsdWRlQm9vbGVhbkF0dHIodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgfHwgdmFsdWUgPT09IFwiXCI7XG59XG5jb25zdCB1bnNhZmVBdHRyQ2hhclJFID0gL1s+Lz1cIidcXHUwMDA5XFx1MDAwYVxcdTAwMGNcXHUwMDIwXS87XG5jb25zdCBhdHRyVmFsaWRhdGlvbkNhY2hlID0ge307XG5mdW5jdGlvbiBpc1NTUlNhZmVBdHRyTmFtZShuYW1lKSB7XG4gIGlmIChhdHRyVmFsaWRhdGlvbkNhY2hlLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgcmV0dXJuIGF0dHJWYWxpZGF0aW9uQ2FjaGVbbmFtZV07XG4gIH1cbiAgY29uc3QgaXNVbnNhZmUgPSB1bnNhZmVBdHRyQ2hhclJFLnRlc3QobmFtZSk7XG4gIGlmIChpc1Vuc2FmZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoYHVuc2FmZSBhdHRyaWJ1dGUgbmFtZTogJHtuYW1lfWApO1xuICB9XG4gIHJldHVybiBhdHRyVmFsaWRhdGlvbkNhY2hlW25hbWVdID0gIWlzVW5zYWZlO1xufVxuY29uc3QgcHJvcHNUb0F0dHJNYXAgPSB7XG4gIGFjY2VwdENoYXJzZXQ6IFwiYWNjZXB0LWNoYXJzZXRcIixcbiAgY2xhc3NOYW1lOiBcImNsYXNzXCIsXG4gIGh0bWxGb3I6IFwiZm9yXCIsXG4gIGh0dHBFcXVpdjogXCJodHRwLWVxdWl2XCJcbn07XG5jb25zdCBpc0tub3duSHRtbEF0dHIgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcbiAgYGFjY2VwdCxhY2NlcHQtY2hhcnNldCxhY2Nlc3NrZXksYWN0aW9uLGFsaWduLGFsbG93LGFsdCxhc3luYyxhdXRvY2FwaXRhbGl6ZSxhdXRvY29tcGxldGUsYXV0b2ZvY3VzLGF1dG9wbGF5LGJhY2tncm91bmQsYmdjb2xvcixib3JkZXIsYnVmZmVyZWQsY2FwdHVyZSxjaGFsbGVuZ2UsY2hhcnNldCxjaGVja2VkLGNpdGUsY2xhc3MsY29kZSxjb2RlYmFzZSxjb2xvcixjb2xzLGNvbHNwYW4sY29udGVudCxjb250ZW50ZWRpdGFibGUsY29udGV4dG1lbnUsY29udHJvbHMsY29vcmRzLGNyb3Nzb3JpZ2luLGNzcCxkYXRhLGRhdGV0aW1lLGRlY29kaW5nLGRlZmF1bHQsZGVmZXIsZGlyLGRpcm5hbWUsZGlzYWJsZWQsZG93bmxvYWQsZHJhZ2dhYmxlLGRyb3B6b25lLGVuY3R5cGUsZW50ZXJrZXloaW50LGZvcixmb3JtLGZvcm1hY3Rpb24sZm9ybWVuY3R5cGUsZm9ybW1ldGhvZCxmb3Jtbm92YWxpZGF0ZSxmb3JtdGFyZ2V0LGhlYWRlcnMsaGVpZ2h0LGhpZGRlbixoaWdoLGhyZWYsaHJlZmxhbmcsaHR0cC1lcXVpdixpY29uLGlkLGltcG9ydGFuY2UsaW5lcnQsaW50ZWdyaXR5LGlzbWFwLGl0ZW1wcm9wLGtleXR5cGUsa2luZCxsYWJlbCxsYW5nLGxhbmd1YWdlLGxvYWRpbmcsbGlzdCxsb29wLGxvdyxtYW5pZmVzdCxtYXgsbWF4bGVuZ3RoLG1pbmxlbmd0aCxtZWRpYSxtaW4sbXVsdGlwbGUsbXV0ZWQsbmFtZSxub3ZhbGlkYXRlLG9wZW4sb3B0aW11bSxwYXR0ZXJuLHBpbmcscGxhY2Vob2xkZXIscG9zdGVyLHByZWxvYWQscmFkaW9ncm91cCxyZWFkb25seSxyZWZlcnJlcnBvbGljeSxyZWwscmVxdWlyZWQscmV2ZXJzZWQscm93cyxyb3dzcGFuLHNhbmRib3gsc2NvcGUsc2NvcGVkLHNlbGVjdGVkLHNoYXBlLHNpemUsc2l6ZXMsc2xvdCxzcGFuLHNwZWxsY2hlY2ssc3JjLHNyY2RvYyxzcmNsYW5nLHNyY3NldCxzdGFydCxzdGVwLHN0eWxlLHN1bW1hcnksdGFiaW5kZXgsdGFyZ2V0LHRpdGxlLHRyYW5zbGF0ZSx0eXBlLHVzZW1hcCx2YWx1ZSx3aWR0aCx3cmFwYFxuKTtcbmNvbnN0IGlzS25vd25TdmdBdHRyID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoXG4gIGB4bWxucyxhY2NlbnQtaGVpZ2h0LGFjY3VtdWxhdGUsYWRkaXRpdmUsYWxpZ25tZW50LWJhc2VsaW5lLGFscGhhYmV0aWMsYW1wbGl0dWRlLGFyYWJpYy1mb3JtLGFzY2VudCxhdHRyaWJ1dGVOYW1lLGF0dHJpYnV0ZVR5cGUsYXppbXV0aCxiYXNlRnJlcXVlbmN5LGJhc2VsaW5lLXNoaWZ0LGJhc2VQcm9maWxlLGJib3gsYmVnaW4sYmlhcyxieSxjYWxjTW9kZSxjYXAtaGVpZ2h0LGNsYXNzLGNsaXAsY2xpcFBhdGhVbml0cyxjbGlwLXBhdGgsY2xpcC1ydWxlLGNvbG9yLGNvbG9yLWludGVycG9sYXRpb24sY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzLGNvbG9yLXByb2ZpbGUsY29sb3ItcmVuZGVyaW5nLGNvbnRlbnRTY3JpcHRUeXBlLGNvbnRlbnRTdHlsZVR5cGUsY3Jvc3NvcmlnaW4sY3Vyc29yLGN4LGN5LGQsZGVjZWxlcmF0ZSxkZXNjZW50LGRpZmZ1c2VDb25zdGFudCxkaXJlY3Rpb24sZGlzcGxheSxkaXZpc29yLGRvbWluYW50LWJhc2VsaW5lLGR1cixkeCxkeSxlZGdlTW9kZSxlbGV2YXRpb24sZW5hYmxlLWJhY2tncm91bmQsZW5kLGV4cG9uZW50LGZpbGwsZmlsbC1vcGFjaXR5LGZpbGwtcnVsZSxmaWx0ZXIsZmlsdGVyUmVzLGZpbHRlclVuaXRzLGZsb29kLWNvbG9yLGZsb29kLW9wYWNpdHksZm9udC1mYW1pbHksZm9udC1zaXplLGZvbnQtc2l6ZS1hZGp1c3QsZm9udC1zdHJldGNoLGZvbnQtc3R5bGUsZm9udC12YXJpYW50LGZvbnQtd2VpZ2h0LGZvcm1hdCxmcm9tLGZyLGZ4LGZ5LGcxLGcyLGdseXBoLW5hbWUsZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCxnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCxnbHlwaFJlZixncmFkaWVudFRyYW5zZm9ybSxncmFkaWVudFVuaXRzLGhhbmdpbmcsaGVpZ2h0LGhyZWYsaHJlZmxhbmcsaG9yaXotYWR2LXgsaG9yaXotb3JpZ2luLXgsaWQsaWRlb2dyYXBoaWMsaW1hZ2UtcmVuZGVyaW5nLGluLGluMixpbnRlcmNlcHQsayxrMSxrMixrMyxrNCxrZXJuZWxNYXRyaXgsa2VybmVsVW5pdExlbmd0aCxrZXJuaW5nLGtleVBvaW50cyxrZXlTcGxpbmVzLGtleVRpbWVzLGxhbmcsbGVuZ3RoQWRqdXN0LGxldHRlci1zcGFjaW5nLGxpZ2h0aW5nLWNvbG9yLGxpbWl0aW5nQ29uZUFuZ2xlLGxvY2FsLG1hcmtlci1lbmQsbWFya2VyLW1pZCxtYXJrZXItc3RhcnQsbWFya2VySGVpZ2h0LG1hcmtlclVuaXRzLG1hcmtlcldpZHRoLG1hc2ssbWFza0NvbnRlbnRVbml0cyxtYXNrVW5pdHMsbWF0aGVtYXRpY2FsLG1heCxtZWRpYSxtZXRob2QsbWluLG1vZGUsbmFtZSxudW1PY3RhdmVzLG9mZnNldCxvcGFjaXR5LG9wZXJhdG9yLG9yZGVyLG9yaWVudCxvcmllbnRhdGlvbixvcmlnaW4sb3ZlcmZsb3csb3ZlcmxpbmUtcG9zaXRpb24sb3ZlcmxpbmUtdGhpY2tuZXNzLHBhbm9zZS0xLHBhaW50LW9yZGVyLHBhdGgscGF0aExlbmd0aCxwYXR0ZXJuQ29udGVudFVuaXRzLHBhdHRlcm5UcmFuc2Zvcm0scGF0dGVyblVuaXRzLHBpbmcscG9pbnRlci1ldmVudHMscG9pbnRzLHBvaW50c0F0WCxwb2ludHNBdFkscG9pbnRzQXRaLHByZXNlcnZlQWxwaGEscHJlc2VydmVBc3BlY3RSYXRpbyxwcmltaXRpdmVVbml0cyxyLHJhZGl1cyxyZWZlcnJlclBvbGljeSxyZWZYLHJlZlkscmVsLHJlbmRlcmluZy1pbnRlbnQscmVwZWF0Q291bnQscmVwZWF0RHVyLHJlcXVpcmVkRXh0ZW5zaW9ucyxyZXF1aXJlZEZlYXR1cmVzLHJlc3RhcnQscmVzdWx0LHJvdGF0ZSxyeCxyeSxzY2FsZSxzZWVkLHNoYXBlLXJlbmRlcmluZyxzbG9wZSxzcGFjaW5nLHNwZWN1bGFyQ29uc3RhbnQsc3BlY3VsYXJFeHBvbmVudCxzcGVlZCxzcHJlYWRNZXRob2Qsc3RhcnRPZmZzZXQsc3RkRGV2aWF0aW9uLHN0ZW1oLHN0ZW12LHN0aXRjaFRpbGVzLHN0b3AtY29sb3Isc3RvcC1vcGFjaXR5LHN0cmlrZXRocm91Z2gtcG9zaXRpb24sc3RyaWtldGhyb3VnaC10aGlja25lc3Msc3RyaW5nLHN0cm9rZSxzdHJva2UtZGFzaGFycmF5LHN0cm9rZS1kYXNob2Zmc2V0LHN0cm9rZS1saW5lY2FwLHN0cm9rZS1saW5lam9pbixzdHJva2UtbWl0ZXJsaW1pdCxzdHJva2Utb3BhY2l0eSxzdHJva2Utd2lkdGgsc3R5bGUsc3VyZmFjZVNjYWxlLHN5c3RlbUxhbmd1YWdlLHRhYmluZGV4LHRhYmxlVmFsdWVzLHRhcmdldCx0YXJnZXRYLHRhcmdldFksdGV4dC1hbmNob3IsdGV4dC1kZWNvcmF0aW9uLHRleHQtcmVuZGVyaW5nLHRleHRMZW5ndGgsdG8sdHJhbnNmb3JtLHRyYW5zZm9ybS1vcmlnaW4sdHlwZSx1MSx1Mix1bmRlcmxpbmUtcG9zaXRpb24sdW5kZXJsaW5lLXRoaWNrbmVzcyx1bmljb2RlLHVuaWNvZGUtYmlkaSx1bmljb2RlLXJhbmdlLHVuaXRzLXBlci1lbSx2LWFscGhhYmV0aWMsdi1oYW5naW5nLHYtaWRlb2dyYXBoaWMsdi1tYXRoZW1hdGljYWwsdmFsdWVzLHZlY3Rvci1lZmZlY3QsdmVyc2lvbix2ZXJ0LWFkdi15LHZlcnQtb3JpZ2luLXgsdmVydC1vcmlnaW4teSx2aWV3Qm94LHZpZXdUYXJnZXQsdmlzaWJpbGl0eSx3aWR0aCx3aWR0aHMsd29yZC1zcGFjaW5nLHdyaXRpbmctbW9kZSx4LHgtaGVpZ2h0LHgxLHgyLHhDaGFubmVsU2VsZWN0b3IseGxpbms6YWN0dWF0ZSx4bGluazphcmNyb2xlLHhsaW5rOmhyZWYseGxpbms6cm9sZSx4bGluazpzaG93LHhsaW5rOnRpdGxlLHhsaW5rOnR5cGUseG1sbnM6eGxpbmsseG1sOmJhc2UseG1sOmxhbmcseG1sOnNwYWNlLHkseTEseTIseUNoYW5uZWxTZWxlY3Rvcix6LHpvb21BbmRQYW5gXG4pO1xuY29uc3QgaXNLbm93bk1hdGhNTEF0dHIgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcbiAgYGFjY2VudCxhY2NlbnR1bmRlcixhY3Rpb250eXBlLGFsaWduLGFsaWdubWVudHNjb3BlLGFsdGltZyxhbHRpbWctaGVpZ2h0LGFsdGltZy12YWxpZ24sYWx0aW1nLXdpZHRoLGFsdHRleHQsYmV2ZWxsZWQsY2xvc2UsY29sdW1uc2FsaWduLGNvbHVtbmxpbmVzLGNvbHVtbnNwYW4sZGVub21hbGlnbixkZXB0aCxkaXIsZGlzcGxheSxkaXNwbGF5c3R5bGUsZW5jb2RpbmcsZXF1YWxjb2x1bW5zLGVxdWFscm93cyxmZW5jZSxmb250c3R5bGUsZm9udHdlaWdodCxmb3JtLGZyYW1lLGZyYW1lc3BhY2luZyxncm91cGFsaWduLGhlaWdodCxocmVmLGlkLGluZGVudGFsaWduLGluZGVudGFsaWduZmlyc3QsaW5kZW50YWxpZ25sYXN0LGluZGVudHNoaWZ0LGluZGVudHNoaWZ0Zmlyc3QsaW5kZW50c2hpZnRsYXN0LGluZGV4dHlwZSxqdXN0aWZ5LGxhcmdldG9wLGxhcmdlb3AsbHF1b3RlLGxzcGFjZSxtYXRoYmFja2dyb3VuZCxtYXRoY29sb3IsbWF0aHNpemUsbWF0aHZhcmlhbnQsbWF4c2l6ZSxtaW5sYWJlbHNwYWNpbmcsbW9kZSxvdGhlcixvdmVyZmxvdyxwb3NpdGlvbixyb3dhbGlnbixyb3dsaW5lcyxyb3dzcGFuLHJxdW90ZSxyc3BhY2Usc2NyaXB0bGV2ZWwsc2NyaXB0bWluc2l6ZSxzY3JpcHRzaXplbXVsdGlwbGllcixzZWxlY3Rpb24sc2VwYXJhdG9yLHNlcGFyYXRvcnMsc2hpZnQsc2lkZSxzcmMsc3RhY2thbGlnbixzdHJldGNoeSxzdWJzY3JpcHRzaGlmdCxzdXBlcnNjcmlwdHNoaWZ0LHN5bW1ldHJpYyx2b2Zmc2V0LHdpZHRoLHdpZHRocyx4bGluazpocmVmLHhsaW5rOnNob3cseGxpbms6dHlwZSx4bWxuc2Bcbik7XG5mdW5jdGlvbiBpc1JlbmRlcmFibGVBdHRyVmFsdWUodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHR5cGUgPT09IFwic3RyaW5nXCIgfHwgdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcImJvb2xlYW5cIjtcbn1cblxuY29uc3QgZXNjYXBlUkUgPSAvW1wiJyY8Pl0vO1xuZnVuY3Rpb24gZXNjYXBlSHRtbChzdHJpbmcpIHtcbiAgY29uc3Qgc3RyID0gXCJcIiArIHN0cmluZztcbiAgY29uc3QgbWF0Y2ggPSBlc2NhcGVSRS5leGVjKHN0cik7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG4gIGxldCBodG1sID0gXCJcIjtcbiAgbGV0IGVzY2FwZWQ7XG4gIGxldCBpbmRleDtcbiAgbGV0IGxhc3RJbmRleCA9IDA7XG4gIGZvciAoaW5kZXggPSBtYXRjaC5pbmRleDsgaW5kZXggPCBzdHIubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgc3dpdGNoIChzdHIuY2hhckNvZGVBdChpbmRleCkpIHtcbiAgICAgIGNhc2UgMzQ6XG4gICAgICAgIGVzY2FwZWQgPSBcIiZxdW90O1wiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzg6XG4gICAgICAgIGVzY2FwZWQgPSBcIiZhbXA7XCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOTpcbiAgICAgICAgZXNjYXBlZCA9IFwiJiMzOTtcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDYwOlxuICAgICAgICBlc2NhcGVkID0gXCImbHQ7XCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA2MjpcbiAgICAgICAgZXNjYXBlZCA9IFwiJmd0O1wiO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAobGFzdEluZGV4ICE9PSBpbmRleCkge1xuICAgICAgaHRtbCArPSBzdHIuc2xpY2UobGFzdEluZGV4LCBpbmRleCk7XG4gICAgfVxuICAgIGxhc3RJbmRleCA9IGluZGV4ICsgMTtcbiAgICBodG1sICs9IGVzY2FwZWQ7XG4gIH1cbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gaW5kZXggPyBodG1sICsgc3RyLnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpIDogaHRtbDtcbn1cbmNvbnN0IGNvbW1lbnRTdHJpcFJFID0gL14tPz58PCEtLXwtLT58LS0hPnw8IS0kL2c7XG5mdW5jdGlvbiBlc2NhcGVIdG1sQ29tbWVudChzcmMpIHtcbiAgcmV0dXJuIHNyYy5yZXBsYWNlKGNvbW1lbnRTdHJpcFJFLCBcIlwiKTtcbn1cbmNvbnN0IGNzc1Zhck5hbWVFc2NhcGVTeW1ib2xzUkUgPSAvWyAhXCIjJCUmJygpKissLi86Ozw9Pj9AW1xcXFxcXF1eYHt8fX5dL2c7XG5mdW5jdGlvbiBnZXRFc2NhcGVkQ3NzVmFyTmFtZShrZXksIGRvdWJsZUVzY2FwZSkge1xuICByZXR1cm4ga2V5LnJlcGxhY2UoXG4gICAgY3NzVmFyTmFtZUVzY2FwZVN5bWJvbHNSRSxcbiAgICAocykgPT4gZG91YmxlRXNjYXBlID8gcyA9PT0gJ1wiJyA/ICdcXFxcXFxcXFxcXFxcIicgOiBgXFxcXFxcXFwke3N9YCA6IGBcXFxcJHtzfWBcbiAgKTtcbn1cblxuZnVuY3Rpb24gbG9vc2VDb21wYXJlQXJyYXlzKGEsIGIpIHtcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICBsZXQgZXF1YWwgPSB0cnVlO1xuICBmb3IgKGxldCBpID0gMDsgZXF1YWwgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICBlcXVhbCA9IGxvb3NlRXF1YWwoYVtpXSwgYltpXSk7XG4gIH1cbiAgcmV0dXJuIGVxdWFsO1xufVxuZnVuY3Rpb24gbG9vc2VFcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcbiAgbGV0IGFWYWxpZFR5cGUgPSBpc0RhdGUoYSk7XG4gIGxldCBiVmFsaWRUeXBlID0gaXNEYXRlKGIpO1xuICBpZiAoYVZhbGlkVHlwZSB8fCBiVmFsaWRUeXBlKSB7XG4gICAgcmV0dXJuIGFWYWxpZFR5cGUgJiYgYlZhbGlkVHlwZSA/IGEuZ2V0VGltZSgpID09PSBiLmdldFRpbWUoKSA6IGZhbHNlO1xuICB9XG4gIGFWYWxpZFR5cGUgPSBpc1N5bWJvbChhKTtcbiAgYlZhbGlkVHlwZSA9IGlzU3ltYm9sKGIpO1xuICBpZiAoYVZhbGlkVHlwZSB8fCBiVmFsaWRUeXBlKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIH1cbiAgYVZhbGlkVHlwZSA9IGlzQXJyYXkoYSk7XG4gIGJWYWxpZFR5cGUgPSBpc0FycmF5KGIpO1xuICBpZiAoYVZhbGlkVHlwZSB8fCBiVmFsaWRUeXBlKSB7XG4gICAgcmV0dXJuIGFWYWxpZFR5cGUgJiYgYlZhbGlkVHlwZSA/IGxvb3NlQ29tcGFyZUFycmF5cyhhLCBiKSA6IGZhbHNlO1xuICB9XG4gIGFWYWxpZFR5cGUgPSBpc09iamVjdChhKTtcbiAgYlZhbGlkVHlwZSA9IGlzT2JqZWN0KGIpO1xuICBpZiAoYVZhbGlkVHlwZSB8fCBiVmFsaWRUeXBlKSB7XG4gICAgaWYgKCFhVmFsaWRUeXBlIHx8ICFiVmFsaWRUeXBlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGFLZXlzQ291bnQgPSBPYmplY3Qua2V5cyhhKS5sZW5ndGg7XG4gICAgY29uc3QgYktleXNDb3VudCA9IE9iamVjdC5rZXlzKGIpLmxlbmd0aDtcbiAgICBpZiAoYUtleXNDb3VudCAhPT0gYktleXNDb3VudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhKSB7XG4gICAgICBjb25zdCBhSGFzS2V5ID0gYS5oYXNPd25Qcm9wZXJ0eShrZXkpO1xuICAgICAgY29uc3QgYkhhc0tleSA9IGIuaGFzT3duUHJvcGVydHkoa2V5KTtcbiAgICAgIGlmIChhSGFzS2V5ICYmICFiSGFzS2V5IHx8ICFhSGFzS2V5ICYmIGJIYXNLZXkgfHwgIWxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpO1xufVxuZnVuY3Rpb24gbG9vc2VJbmRleE9mKGFyciwgdmFsKSB7XG4gIHJldHVybiBhcnIuZmluZEluZGV4KChpdGVtKSA9PiBsb29zZUVxdWFsKGl0ZW0sIHZhbCkpO1xufVxuXG5jb25zdCBpc1JlZiA9ICh2YWwpID0+IHtcbiAgcmV0dXJuICEhKHZhbCAmJiB2YWxbXCJfX3ZfaXNSZWZcIl0gPT09IHRydWUpO1xufTtcbmNvbnN0IHRvRGlzcGxheVN0cmluZyA9ICh2YWwpID0+IHtcbiAgcmV0dXJuIGlzU3RyaW5nKHZhbCkgPyB2YWwgOiB2YWwgPT0gbnVsbCA/IFwiXCIgOiBpc0FycmF5KHZhbCkgfHwgaXNPYmplY3QodmFsKSAmJiAodmFsLnRvU3RyaW5nID09PSBvYmplY3RUb1N0cmluZyB8fCAhaXNGdW5jdGlvbih2YWwudG9TdHJpbmcpKSA/IGlzUmVmKHZhbCkgPyB0b0Rpc3BsYXlTdHJpbmcodmFsLnZhbHVlKSA6IEpTT04uc3RyaW5naWZ5KHZhbCwgcmVwbGFjZXIsIDIpIDogU3RyaW5nKHZhbCk7XG59O1xuY29uc3QgcmVwbGFjZXIgPSAoX2tleSwgdmFsKSA9PiB7XG4gIGlmIChpc1JlZih2YWwpKSB7XG4gICAgcmV0dXJuIHJlcGxhY2VyKF9rZXksIHZhbC52YWx1ZSk7XG4gIH0gZWxzZSBpZiAoaXNNYXAodmFsKSkge1xuICAgIHJldHVybiB7XG4gICAgICBbYE1hcCgke3ZhbC5zaXplfSlgXTogWy4uLnZhbC5lbnRyaWVzKCldLnJlZHVjZShcbiAgICAgICAgKGVudHJpZXMsIFtrZXksIHZhbDJdLCBpKSA9PiB7XG4gICAgICAgICAgZW50cmllc1tzdHJpbmdpZnlTeW1ib2woa2V5LCBpKSArIFwiID0+XCJdID0gdmFsMjtcbiAgICAgICAgICByZXR1cm4gZW50cmllcztcbiAgICAgICAgfSxcbiAgICAgICAge31cbiAgICAgIClcbiAgICB9O1xuICB9IGVsc2UgaWYgKGlzU2V0KHZhbCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgW2BTZXQoJHt2YWwuc2l6ZX0pYF06IFsuLi52YWwudmFsdWVzKCldLm1hcCgodikgPT4gc3RyaW5naWZ5U3ltYm9sKHYpKVxuICAgIH07XG4gIH0gZWxzZSBpZiAoaXNTeW1ib2wodmFsKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlTeW1ib2wodmFsKTtcbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpICYmICFpc0FycmF5KHZhbCkgJiYgIWlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgIHJldHVybiBTdHJpbmcodmFsKTtcbiAgfVxuICByZXR1cm4gdmFsO1xufTtcbmNvbnN0IHN0cmluZ2lmeVN5bWJvbCA9ICh2LCBpID0gXCJcIikgPT4ge1xuICB2YXIgX2E7XG4gIHJldHVybiAoXG4gICAgLy8gU3ltYm9sLmRlc2NyaXB0aW9uIGluIGVzMjAxOSsgc28gd2UgbmVlZCB0byBjYXN0IGhlcmUgdG8gcGFzc1xuICAgIC8vIHRoZSBsaWI6IGVzMjAxNiBjaGVja1xuICAgIGlzU3ltYm9sKHYpID8gYFN5bWJvbCgkeyhfYSA9IHYuZGVzY3JpcHRpb24pICE9IG51bGwgPyBfYSA6IGl9KWAgOiB2XG4gICk7XG59O1xuXG5mdW5jdGlvbiBub3JtYWxpemVDc3NWYXJWYWx1ZSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBcImluaXRpYWxcIjtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBcIlwiID8gXCIgXCIgOiB2YWx1ZTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm51bWJlclwiIHx8ICFOdW1iZXIuaXNGaW5pdGUodmFsdWUpKSB7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgXCJbVnVlIHdhcm5dIEludmFsaWQgdmFsdWUgdXNlZCBmb3IgQ1NTIGJpbmRpbmcuIEV4cGVjdGVkIGEgc3RyaW5nIG9yIGEgZmluaXRlIG51bWJlciBidXQgcmVjZWl2ZWQ6XCIsXG4gICAgICAgIHZhbHVlXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbn1cblxuZXhwb3J0IHsgRU1QVFlfQVJSLCBFTVBUWV9PQkosIE5PLCBOT09QLCBQYXRjaEZsYWdOYW1lcywgUGF0Y2hGbGFncywgU2hhcGVGbGFncywgU2xvdEZsYWdzLCBjYW1lbGl6ZSwgY2FwaXRhbGl6ZSwgY3NzVmFyTmFtZUVzY2FwZVN5bWJvbHNSRSwgZGVmLCBlc2NhcGVIdG1sLCBlc2NhcGVIdG1sQ29tbWVudCwgZXh0ZW5kLCBnZW5DYWNoZUtleSwgZ2VuUHJvcHNBY2Nlc3NFeHAsIGdlbmVyYXRlQ29kZUZyYW1lLCBnZXRFc2NhcGVkQ3NzVmFyTmFtZSwgZ2V0R2xvYmFsVGhpcywgaGFzQ2hhbmdlZCwgaGFzT3duLCBoeXBoZW5hdGUsIGluY2x1ZGVCb29sZWFuQXR0ciwgaW52b2tlQXJyYXlGbnMsIGlzQXJyYXksIGlzQm9vbGVhbkF0dHIsIGlzQnVpbHRJbkRpcmVjdGl2ZSwgaXNEYXRlLCBpc0Z1bmN0aW9uLCBpc0dsb2JhbGx5QWxsb3dlZCwgaXNHbG9iYWxseVdoaXRlbGlzdGVkLCBpc0hUTUxUYWcsIGlzSW50ZWdlcktleSwgaXNLbm93bkh0bWxBdHRyLCBpc0tub3duTWF0aE1MQXR0ciwgaXNLbm93blN2Z0F0dHIsIGlzTWFwLCBpc01hdGhNTFRhZywgaXNNb2RlbExpc3RlbmVyLCBpc09iamVjdCwgaXNPbiwgaXNQbGFpbk9iamVjdCwgaXNQcm9taXNlLCBpc1JlZ0V4cCwgaXNSZW5kZXJhYmxlQXR0clZhbHVlLCBpc1Jlc2VydmVkUHJvcCwgaXNTU1JTYWZlQXR0ck5hbWUsIGlzU1ZHVGFnLCBpc1NldCwgaXNTcGVjaWFsQm9vbGVhbkF0dHIsIGlzU3RyaW5nLCBpc1N5bWJvbCwgaXNWb2lkVGFnLCBsb29zZUVxdWFsLCBsb29zZUluZGV4T2YsIGxvb3NlVG9OdW1iZXIsIG1ha2VNYXAsIG5vcm1hbGl6ZUNsYXNzLCBub3JtYWxpemVDc3NWYXJWYWx1ZSwgbm9ybWFsaXplUHJvcHMsIG5vcm1hbGl6ZVN0eWxlLCBvYmplY3RUb1N0cmluZywgcGFyc2VTdHJpbmdTdHlsZSwgcHJvcHNUb0F0dHJNYXAsIHJlbW92ZSwgc2xvdEZsYWdzVGV4dCwgc3RyaW5naWZ5U3R5bGUsIHRvRGlzcGxheVN0cmluZywgdG9IYW5kbGVyS2V5LCB0b051bWJlciwgdG9SYXdUeXBlLCB0b1R5cGVTdHJpbmcgfTtcbiIsIi8qKlxuKiBAdnVlL3JlYWN0aXZpdHkgdjMuNS4yMVxuKiAoYykgMjAxOC1wcmVzZW50IFl1eGkgKEV2YW4pIFlvdSBhbmQgVnVlIGNvbnRyaWJ1dG9yc1xuKiBAbGljZW5zZSBNSVRcbioqL1xuaW1wb3J0IHsgZXh0ZW5kLCBoYXNDaGFuZ2VkLCBpc0FycmF5LCBpc0ludGVnZXJLZXksIGlzU3ltYm9sLCBpc01hcCwgaGFzT3duLCBtYWtlTWFwLCBpc09iamVjdCwgY2FwaXRhbGl6ZSwgdG9SYXdUeXBlLCBkZWYsIGlzRnVuY3Rpb24sIEVNUFRZX09CSiwgaXNTZXQsIGlzUGxhaW5PYmplY3QsIHJlbW92ZSwgTk9PUCB9IGZyb20gJ0B2dWUvc2hhcmVkJztcblxuZnVuY3Rpb24gd2Fybihtc2csIC4uLmFyZ3MpIHtcbiAgY29uc29sZS53YXJuKGBbVnVlIHdhcm5dICR7bXNnfWAsIC4uLmFyZ3MpO1xufVxuXG5sZXQgYWN0aXZlRWZmZWN0U2NvcGU7XG5jbGFzcyBFZmZlY3RTY29wZSB7XG4gIGNvbnN0cnVjdG9yKGRldGFjaGVkID0gZmFsc2UpIHtcbiAgICB0aGlzLmRldGFjaGVkID0gZGV0YWNoZWQ7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWwgdHJhY2sgYG9uYCBjYWxscywgYWxsb3cgYG9uYCBjYWxsIG11bHRpcGxlIHRpbWVzXG4gICAgICovXG4gICAgdGhpcy5fb24gPSAwO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMuZWZmZWN0cyA9IFtdO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMuY2xlYW51cHMgPSBbXTtcbiAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuICAgIHRoaXMucGFyZW50ID0gYWN0aXZlRWZmZWN0U2NvcGU7XG4gICAgaWYgKCFkZXRhY2hlZCAmJiBhY3RpdmVFZmZlY3RTY29wZSkge1xuICAgICAgdGhpcy5pbmRleCA9IChhY3RpdmVFZmZlY3RTY29wZS5zY29wZXMgfHwgKGFjdGl2ZUVmZmVjdFNjb3BlLnNjb3BlcyA9IFtdKSkucHVzaChcbiAgICAgICAgdGhpc1xuICAgICAgKSAtIDE7XG4gICAgfVxuICB9XG4gIGdldCBhY3RpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZTtcbiAgfVxuICBwYXVzZSgpIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlKSB7XG4gICAgICB0aGlzLl9pc1BhdXNlZCA9IHRydWU7XG4gICAgICBsZXQgaSwgbDtcbiAgICAgIGlmICh0aGlzLnNjb3Blcykge1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gdGhpcy5zY29wZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5zY29wZXNbaV0ucGF1c2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuZWZmZWN0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcy5lZmZlY3RzW2ldLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXN1bWVzIHRoZSBlZmZlY3Qgc2NvcGUsIGluY2x1ZGluZyBhbGwgY2hpbGQgc2NvcGVzIGFuZCBlZmZlY3RzLlxuICAgKi9cbiAgcmVzdW1lKCkge1xuICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgIGlmICh0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgaSwgbDtcbiAgICAgICAgaWYgKHRoaXMuc2NvcGVzKSB7XG4gICAgICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuc2NvcGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5zY29wZXNbaV0ucmVzdW1lKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSB0aGlzLmVmZmVjdHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5lZmZlY3RzW2ldLnJlc3VtZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJ1bihmbikge1xuICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRFZmZlY3RTY29wZSA9IGFjdGl2ZUVmZmVjdFNjb3BlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYWN0aXZlRWZmZWN0U2NvcGUgPSB0aGlzO1xuICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGFjdGl2ZUVmZmVjdFNjb3BlID0gY3VycmVudEVmZmVjdFNjb3BlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgd2FybihgY2Fubm90IHJ1biBhbiBpbmFjdGl2ZSBlZmZlY3Qgc2NvcGUuYCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBUaGlzIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbiBub24tZGV0YWNoZWQgc2NvcGVzXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgb24oKSB7XG4gICAgaWYgKCsrdGhpcy5fb24gPT09IDEpIHtcbiAgICAgIHRoaXMucHJldlNjb3BlID0gYWN0aXZlRWZmZWN0U2NvcGU7XG4gICAgICBhY3RpdmVFZmZlY3RTY29wZSA9IHRoaXM7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBUaGlzIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbiBub24tZGV0YWNoZWQgc2NvcGVzXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgb2ZmKCkge1xuICAgIGlmICh0aGlzLl9vbiA+IDAgJiYgLS10aGlzLl9vbiA9PT0gMCkge1xuICAgICAgYWN0aXZlRWZmZWN0U2NvcGUgPSB0aGlzLnByZXZTY29wZTtcbiAgICAgIHRoaXMucHJldlNjb3BlID0gdm9pZCAwO1xuICAgIH1cbiAgfVxuICBzdG9wKGZyb21QYXJlbnQpIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlKSB7XG4gICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxldCBpLCBsO1xuICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuZWZmZWN0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcy5lZmZlY3RzW2ldLnN0b3AoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZWZmZWN0cy5sZW5ndGggPSAwO1xuICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuY2xlYW51cHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRoaXMuY2xlYW51cHNbaV0oKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2xlYW51cHMubGVuZ3RoID0gMDtcbiAgICAgIGlmICh0aGlzLnNjb3Blcykge1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gdGhpcy5zY29wZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5zY29wZXNbaV0uc3RvcCh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNjb3Blcy5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmRldGFjaGVkICYmIHRoaXMucGFyZW50ICYmICFmcm9tUGFyZW50KSB7XG4gICAgICAgIGNvbnN0IGxhc3QgPSB0aGlzLnBhcmVudC5zY29wZXMucG9wKCk7XG4gICAgICAgIGlmIChsYXN0ICYmIGxhc3QgIT09IHRoaXMpIHtcbiAgICAgICAgICB0aGlzLnBhcmVudC5zY29wZXNbdGhpcy5pbmRleF0gPSBsYXN0O1xuICAgICAgICAgIGxhc3QuaW5kZXggPSB0aGlzLmluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnBhcmVudCA9IHZvaWQgMDtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGVmZmVjdFNjb3BlKGRldGFjaGVkKSB7XG4gIHJldHVybiBuZXcgRWZmZWN0U2NvcGUoZGV0YWNoZWQpO1xufVxuZnVuY3Rpb24gZ2V0Q3VycmVudFNjb3BlKCkge1xuICByZXR1cm4gYWN0aXZlRWZmZWN0U2NvcGU7XG59XG5mdW5jdGlvbiBvblNjb3BlRGlzcG9zZShmbiwgZmFpbFNpbGVudGx5ID0gZmFsc2UpIHtcbiAgaWYgKGFjdGl2ZUVmZmVjdFNjb3BlKSB7XG4gICAgYWN0aXZlRWZmZWN0U2NvcGUuY2xlYW51cHMucHVzaChmbik7XG4gIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAhZmFpbFNpbGVudGx5KSB7XG4gICAgd2FybihcbiAgICAgIGBvblNjb3BlRGlzcG9zZSgpIGlzIGNhbGxlZCB3aGVuIHRoZXJlIGlzIG5vIGFjdGl2ZSBlZmZlY3Qgc2NvcGUgdG8gYmUgYXNzb2NpYXRlZCB3aXRoLmBcbiAgICApO1xuICB9XG59XG5cbmxldCBhY3RpdmVTdWI7XG5jb25zdCBFZmZlY3RGbGFncyA9IHtcbiAgXCJBQ1RJVkVcIjogMSxcbiAgXCIxXCI6IFwiQUNUSVZFXCIsXG4gIFwiUlVOTklOR1wiOiAyLFxuICBcIjJcIjogXCJSVU5OSU5HXCIsXG4gIFwiVFJBQ0tJTkdcIjogNCxcbiAgXCI0XCI6IFwiVFJBQ0tJTkdcIixcbiAgXCJOT1RJRklFRFwiOiA4LFxuICBcIjhcIjogXCJOT1RJRklFRFwiLFxuICBcIkRJUlRZXCI6IDE2LFxuICBcIjE2XCI6IFwiRElSVFlcIixcbiAgXCJBTExPV19SRUNVUlNFXCI6IDMyLFxuICBcIjMyXCI6IFwiQUxMT1dfUkVDVVJTRVwiLFxuICBcIlBBVVNFRFwiOiA2NCxcbiAgXCI2NFwiOiBcIlBBVVNFRFwiLFxuICBcIkVWQUxVQVRFRFwiOiAxMjgsXG4gIFwiMTI4XCI6IFwiRVZBTFVBVEVEXCJcbn07XG5jb25zdCBwYXVzZWRRdWV1ZUVmZmVjdHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtTZXQoKTtcbmNsYXNzIFJlYWN0aXZlRWZmZWN0IHtcbiAgY29uc3RydWN0b3IoZm4pIHtcbiAgICB0aGlzLmZuID0gZm47XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5kZXBzID0gdm9pZCAwO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMuZGVwc1RhaWwgPSB2b2lkIDA7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5mbGFncyA9IDEgfCA0O1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMubmV4dCA9IHZvaWQgMDtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB0aGlzLmNsZWFudXAgPSB2b2lkIDA7XG4gICAgdGhpcy5zY2hlZHVsZXIgPSB2b2lkIDA7XG4gICAgaWYgKGFjdGl2ZUVmZmVjdFNjb3BlICYmIGFjdGl2ZUVmZmVjdFNjb3BlLmFjdGl2ZSkge1xuICAgICAgYWN0aXZlRWZmZWN0U2NvcGUuZWZmZWN0cy5wdXNoKHRoaXMpO1xuICAgIH1cbiAgfVxuICBwYXVzZSgpIHtcbiAgICB0aGlzLmZsYWdzIHw9IDY0O1xuICB9XG4gIHJlc3VtZSgpIHtcbiAgICBpZiAodGhpcy5mbGFncyAmIDY0KSB7XG4gICAgICB0aGlzLmZsYWdzICY9IC02NTtcbiAgICAgIGlmIChwYXVzZWRRdWV1ZUVmZmVjdHMuaGFzKHRoaXMpKSB7XG4gICAgICAgIHBhdXNlZFF1ZXVlRWZmZWN0cy5kZWxldGUodGhpcyk7XG4gICAgICAgIHRoaXMudHJpZ2dlcigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBub3RpZnkoKSB7XG4gICAgaWYgKHRoaXMuZmxhZ3MgJiAyICYmICEodGhpcy5mbGFncyAmIDMyKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoISh0aGlzLmZsYWdzICYgOCkpIHtcbiAgICAgIGJhdGNoKHRoaXMpO1xuICAgIH1cbiAgfVxuICBydW4oKSB7XG4gICAgaWYgKCEodGhpcy5mbGFncyAmIDEpKSB7XG4gICAgICByZXR1cm4gdGhpcy5mbigpO1xuICAgIH1cbiAgICB0aGlzLmZsYWdzIHw9IDI7XG4gICAgY2xlYW51cEVmZmVjdCh0aGlzKTtcbiAgICBwcmVwYXJlRGVwcyh0aGlzKTtcbiAgICBjb25zdCBwcmV2RWZmZWN0ID0gYWN0aXZlU3ViO1xuICAgIGNvbnN0IHByZXZTaG91bGRUcmFjayA9IHNob3VsZFRyYWNrO1xuICAgIGFjdGl2ZVN1YiA9IHRoaXM7XG4gICAgc2hvdWxkVHJhY2sgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gdGhpcy5mbigpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBhY3RpdmVTdWIgIT09IHRoaXMpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIkFjdGl2ZSBlZmZlY3Qgd2FzIG5vdCByZXN0b3JlZCBjb3JyZWN0bHkgLSB0aGlzIGlzIGxpa2VseSBhIFZ1ZSBpbnRlcm5hbCBidWcuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNsZWFudXBEZXBzKHRoaXMpO1xuICAgICAgYWN0aXZlU3ViID0gcHJldkVmZmVjdDtcbiAgICAgIHNob3VsZFRyYWNrID0gcHJldlNob3VsZFRyYWNrO1xuICAgICAgdGhpcy5mbGFncyAmPSAtMztcbiAgICB9XG4gIH1cbiAgc3RvcCgpIHtcbiAgICBpZiAodGhpcy5mbGFncyAmIDEpIHtcbiAgICAgIGZvciAobGV0IGxpbmsgPSB0aGlzLmRlcHM7IGxpbms7IGxpbmsgPSBsaW5rLm5leHREZXApIHtcbiAgICAgICAgcmVtb3ZlU3ViKGxpbmspO1xuICAgICAgfVxuICAgICAgdGhpcy5kZXBzID0gdGhpcy5kZXBzVGFpbCA9IHZvaWQgMDtcbiAgICAgIGNsZWFudXBFZmZlY3QodGhpcyk7XG4gICAgICB0aGlzLm9uU3RvcCAmJiB0aGlzLm9uU3RvcCgpO1xuICAgICAgdGhpcy5mbGFncyAmPSAtMjtcbiAgICB9XG4gIH1cbiAgdHJpZ2dlcigpIHtcbiAgICBpZiAodGhpcy5mbGFncyAmIDY0KSB7XG4gICAgICBwYXVzZWRRdWV1ZUVmZmVjdHMuYWRkKHRoaXMpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zY2hlZHVsZXIpIHtcbiAgICAgIHRoaXMuc2NoZWR1bGVyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucnVuSWZEaXJ0eSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBydW5JZkRpcnR5KCkge1xuICAgIGlmIChpc0RpcnR5KHRoaXMpKSB7XG4gICAgICB0aGlzLnJ1bigpO1xuICAgIH1cbiAgfVxuICBnZXQgZGlydHkoKSB7XG4gICAgcmV0dXJuIGlzRGlydHkodGhpcyk7XG4gIH1cbn1cbmxldCBiYXRjaERlcHRoID0gMDtcbmxldCBiYXRjaGVkU3ViO1xubGV0IGJhdGNoZWRDb21wdXRlZDtcbmZ1bmN0aW9uIGJhdGNoKHN1YiwgaXNDb21wdXRlZCA9IGZhbHNlKSB7XG4gIHN1Yi5mbGFncyB8PSA4O1xuICBpZiAoaXNDb21wdXRlZCkge1xuICAgIHN1Yi5uZXh0ID0gYmF0Y2hlZENvbXB1dGVkO1xuICAgIGJhdGNoZWRDb21wdXRlZCA9IHN1YjtcbiAgICByZXR1cm47XG4gIH1cbiAgc3ViLm5leHQgPSBiYXRjaGVkU3ViO1xuICBiYXRjaGVkU3ViID0gc3ViO1xufVxuZnVuY3Rpb24gc3RhcnRCYXRjaCgpIHtcbiAgYmF0Y2hEZXB0aCsrO1xufVxuZnVuY3Rpb24gZW5kQmF0Y2goKSB7XG4gIGlmICgtLWJhdGNoRGVwdGggPiAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChiYXRjaGVkQ29tcHV0ZWQpIHtcbiAgICBsZXQgZSA9IGJhdGNoZWRDb21wdXRlZDtcbiAgICBiYXRjaGVkQ29tcHV0ZWQgPSB2b2lkIDA7XG4gICAgd2hpbGUgKGUpIHtcbiAgICAgIGNvbnN0IG5leHQgPSBlLm5leHQ7XG4gICAgICBlLm5leHQgPSB2b2lkIDA7XG4gICAgICBlLmZsYWdzICY9IC05O1xuICAgICAgZSA9IG5leHQ7XG4gICAgfVxuICB9XG4gIGxldCBlcnJvcjtcbiAgd2hpbGUgKGJhdGNoZWRTdWIpIHtcbiAgICBsZXQgZSA9IGJhdGNoZWRTdWI7XG4gICAgYmF0Y2hlZFN1YiA9IHZvaWQgMDtcbiAgICB3aGlsZSAoZSkge1xuICAgICAgY29uc3QgbmV4dCA9IGUubmV4dDtcbiAgICAgIGUubmV4dCA9IHZvaWQgMDtcbiAgICAgIGUuZmxhZ3MgJj0gLTk7XG4gICAgICBpZiAoZS5mbGFncyAmIDEpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICA7XG4gICAgICAgICAgZS50cmlnZ2VyKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlID0gbmV4dDtcbiAgICB9XG4gIH1cbiAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcbn1cbmZ1bmN0aW9uIHByZXBhcmVEZXBzKHN1Yikge1xuICBmb3IgKGxldCBsaW5rID0gc3ViLmRlcHM7IGxpbms7IGxpbmsgPSBsaW5rLm5leHREZXApIHtcbiAgICBsaW5rLnZlcnNpb24gPSAtMTtcbiAgICBsaW5rLnByZXZBY3RpdmVMaW5rID0gbGluay5kZXAuYWN0aXZlTGluaztcbiAgICBsaW5rLmRlcC5hY3RpdmVMaW5rID0gbGluaztcbiAgfVxufVxuZnVuY3Rpb24gY2xlYW51cERlcHMoc3ViKSB7XG4gIGxldCBoZWFkO1xuICBsZXQgdGFpbCA9IHN1Yi5kZXBzVGFpbDtcbiAgbGV0IGxpbmsgPSB0YWlsO1xuICB3aGlsZSAobGluaykge1xuICAgIGNvbnN0IHByZXYgPSBsaW5rLnByZXZEZXA7XG4gICAgaWYgKGxpbmsudmVyc2lvbiA9PT0gLTEpIHtcbiAgICAgIGlmIChsaW5rID09PSB0YWlsKSB0YWlsID0gcHJldjtcbiAgICAgIHJlbW92ZVN1YihsaW5rKTtcbiAgICAgIHJlbW92ZURlcChsaW5rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZCA9IGxpbms7XG4gICAgfVxuICAgIGxpbmsuZGVwLmFjdGl2ZUxpbmsgPSBsaW5rLnByZXZBY3RpdmVMaW5rO1xuICAgIGxpbmsucHJldkFjdGl2ZUxpbmsgPSB2b2lkIDA7XG4gICAgbGluayA9IHByZXY7XG4gIH1cbiAgc3ViLmRlcHMgPSBoZWFkO1xuICBzdWIuZGVwc1RhaWwgPSB0YWlsO1xufVxuZnVuY3Rpb24gaXNEaXJ0eShzdWIpIHtcbiAgZm9yIChsZXQgbGluayA9IHN1Yi5kZXBzOyBsaW5rOyBsaW5rID0gbGluay5uZXh0RGVwKSB7XG4gICAgaWYgKGxpbmsuZGVwLnZlcnNpb24gIT09IGxpbmsudmVyc2lvbiB8fCBsaW5rLmRlcC5jb21wdXRlZCAmJiAocmVmcmVzaENvbXB1dGVkKGxpbmsuZGVwLmNvbXB1dGVkKSB8fCBsaW5rLmRlcC52ZXJzaW9uICE9PSBsaW5rLnZlcnNpb24pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgaWYgKHN1Yi5fZGlydHkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiByZWZyZXNoQ29tcHV0ZWQoY29tcHV0ZWQpIHtcbiAgaWYgKGNvbXB1dGVkLmZsYWdzICYgNCAmJiAhKGNvbXB1dGVkLmZsYWdzICYgMTYpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbXB1dGVkLmZsYWdzICY9IC0xNztcbiAgaWYgKGNvbXB1dGVkLmdsb2JhbFZlcnNpb24gPT09IGdsb2JhbFZlcnNpb24pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29tcHV0ZWQuZ2xvYmFsVmVyc2lvbiA9IGdsb2JhbFZlcnNpb247XG4gIGlmICghY29tcHV0ZWQuaXNTU1IgJiYgY29tcHV0ZWQuZmxhZ3MgJiAxMjggJiYgKCFjb21wdXRlZC5kZXBzICYmICFjb21wdXRlZC5fZGlydHkgfHwgIWlzRGlydHkoY29tcHV0ZWQpKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb21wdXRlZC5mbGFncyB8PSAyO1xuICBjb25zdCBkZXAgPSBjb21wdXRlZC5kZXA7XG4gIGNvbnN0IHByZXZTdWIgPSBhY3RpdmVTdWI7XG4gIGNvbnN0IHByZXZTaG91bGRUcmFjayA9IHNob3VsZFRyYWNrO1xuICBhY3RpdmVTdWIgPSBjb21wdXRlZDtcbiAgc2hvdWxkVHJhY2sgPSB0cnVlO1xuICB0cnkge1xuICAgIHByZXBhcmVEZXBzKGNvbXB1dGVkKTtcbiAgICBjb25zdCB2YWx1ZSA9IGNvbXB1dGVkLmZuKGNvbXB1dGVkLl92YWx1ZSk7XG4gICAgaWYgKGRlcC52ZXJzaW9uID09PSAwIHx8IGhhc0NoYW5nZWQodmFsdWUsIGNvbXB1dGVkLl92YWx1ZSkpIHtcbiAgICAgIGNvbXB1dGVkLmZsYWdzIHw9IDEyODtcbiAgICAgIGNvbXB1dGVkLl92YWx1ZSA9IHZhbHVlO1xuICAgICAgZGVwLnZlcnNpb24rKztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlcC52ZXJzaW9uKys7XG4gICAgdGhyb3cgZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIGFjdGl2ZVN1YiA9IHByZXZTdWI7XG4gICAgc2hvdWxkVHJhY2sgPSBwcmV2U2hvdWxkVHJhY2s7XG4gICAgY2xlYW51cERlcHMoY29tcHV0ZWQpO1xuICAgIGNvbXB1dGVkLmZsYWdzICY9IC0zO1xuICB9XG59XG5mdW5jdGlvbiByZW1vdmVTdWIobGluaywgc29mdCA9IGZhbHNlKSB7XG4gIGNvbnN0IHsgZGVwLCBwcmV2U3ViLCBuZXh0U3ViIH0gPSBsaW5rO1xuICBpZiAocHJldlN1Yikge1xuICAgIHByZXZTdWIubmV4dFN1YiA9IG5leHRTdWI7XG4gICAgbGluay5wcmV2U3ViID0gdm9pZCAwO1xuICB9XG4gIGlmIChuZXh0U3ViKSB7XG4gICAgbmV4dFN1Yi5wcmV2U3ViID0gcHJldlN1YjtcbiAgICBsaW5rLm5leHRTdWIgPSB2b2lkIDA7XG4gIH1cbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgZGVwLnN1YnNIZWFkID09PSBsaW5rKSB7XG4gICAgZGVwLnN1YnNIZWFkID0gbmV4dFN1YjtcbiAgfVxuICBpZiAoZGVwLnN1YnMgPT09IGxpbmspIHtcbiAgICBkZXAuc3VicyA9IHByZXZTdWI7XG4gICAgaWYgKCFwcmV2U3ViICYmIGRlcC5jb21wdXRlZCkge1xuICAgICAgZGVwLmNvbXB1dGVkLmZsYWdzICY9IC01O1xuICAgICAgZm9yIChsZXQgbCA9IGRlcC5jb21wdXRlZC5kZXBzOyBsOyBsID0gbC5uZXh0RGVwKSB7XG4gICAgICAgIHJlbW92ZVN1YihsLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFzb2Z0ICYmICEtLWRlcC5zYyAmJiBkZXAubWFwKSB7XG4gICAgZGVwLm1hcC5kZWxldGUoZGVwLmtleSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlbW92ZURlcChsaW5rKSB7XG4gIGNvbnN0IHsgcHJldkRlcCwgbmV4dERlcCB9ID0gbGluaztcbiAgaWYgKHByZXZEZXApIHtcbiAgICBwcmV2RGVwLm5leHREZXAgPSBuZXh0RGVwO1xuICAgIGxpbmsucHJldkRlcCA9IHZvaWQgMDtcbiAgfVxuICBpZiAobmV4dERlcCkge1xuICAgIG5leHREZXAucHJldkRlcCA9IHByZXZEZXA7XG4gICAgbGluay5uZXh0RGVwID0gdm9pZCAwO1xuICB9XG59XG5mdW5jdGlvbiBlZmZlY3QoZm4sIG9wdGlvbnMpIHtcbiAgaWYgKGZuLmVmZmVjdCBpbnN0YW5jZW9mIFJlYWN0aXZlRWZmZWN0KSB7XG4gICAgZm4gPSBmbi5lZmZlY3QuZm47XG4gIH1cbiAgY29uc3QgZSA9IG5ldyBSZWFjdGl2ZUVmZmVjdChmbik7XG4gIGlmIChvcHRpb25zKSB7XG4gICAgZXh0ZW5kKGUsIG9wdGlvbnMpO1xuICB9XG4gIHRyeSB7XG4gICAgZS5ydW4oKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZS5zdG9wKCk7XG4gICAgdGhyb3cgZXJyO1xuICB9XG4gIGNvbnN0IHJ1bm5lciA9IGUucnVuLmJpbmQoZSk7XG4gIHJ1bm5lci5lZmZlY3QgPSBlO1xuICByZXR1cm4gcnVubmVyO1xufVxuZnVuY3Rpb24gc3RvcChydW5uZXIpIHtcbiAgcnVubmVyLmVmZmVjdC5zdG9wKCk7XG59XG5sZXQgc2hvdWxkVHJhY2sgPSB0cnVlO1xuY29uc3QgdHJhY2tTdGFjayA9IFtdO1xuZnVuY3Rpb24gcGF1c2VUcmFja2luZygpIHtcbiAgdHJhY2tTdGFjay5wdXNoKHNob3VsZFRyYWNrKTtcbiAgc2hvdWxkVHJhY2sgPSBmYWxzZTtcbn1cbmZ1bmN0aW9uIGVuYWJsZVRyYWNraW5nKCkge1xuICB0cmFja1N0YWNrLnB1c2goc2hvdWxkVHJhY2spO1xuICBzaG91bGRUcmFjayA9IHRydWU7XG59XG5mdW5jdGlvbiByZXNldFRyYWNraW5nKCkge1xuICBjb25zdCBsYXN0ID0gdHJhY2tTdGFjay5wb3AoKTtcbiAgc2hvdWxkVHJhY2sgPSBsYXN0ID09PSB2b2lkIDAgPyB0cnVlIDogbGFzdDtcbn1cbmZ1bmN0aW9uIG9uRWZmZWN0Q2xlYW51cChmbiwgZmFpbFNpbGVudGx5ID0gZmFsc2UpIHtcbiAgaWYgKGFjdGl2ZVN1YiBpbnN0YW5jZW9mIFJlYWN0aXZlRWZmZWN0KSB7XG4gICAgYWN0aXZlU3ViLmNsZWFudXAgPSBmbjtcbiAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFmYWlsU2lsZW50bHkpIHtcbiAgICB3YXJuKFxuICAgICAgYG9uRWZmZWN0Q2xlYW51cCgpIHdhcyBjYWxsZWQgd2hlbiB0aGVyZSB3YXMgbm8gYWN0aXZlIGVmZmVjdCB0byBhc3NvY2lhdGUgd2l0aC5gXG4gICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gY2xlYW51cEVmZmVjdChlKSB7XG4gIGNvbnN0IHsgY2xlYW51cCB9ID0gZTtcbiAgZS5jbGVhbnVwID0gdm9pZCAwO1xuICBpZiAoY2xlYW51cCkge1xuICAgIGNvbnN0IHByZXZTdWIgPSBhY3RpdmVTdWI7XG4gICAgYWN0aXZlU3ViID0gdm9pZCAwO1xuICAgIHRyeSB7XG4gICAgICBjbGVhbnVwKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGFjdGl2ZVN1YiA9IHByZXZTdWI7XG4gICAgfVxuICB9XG59XG5cbmxldCBnbG9iYWxWZXJzaW9uID0gMDtcbmNsYXNzIExpbmsge1xuICBjb25zdHJ1Y3RvcihzdWIsIGRlcCkge1xuICAgIHRoaXMuc3ViID0gc3ViO1xuICAgIHRoaXMuZGVwID0gZGVwO1xuICAgIHRoaXMudmVyc2lvbiA9IGRlcC52ZXJzaW9uO1xuICAgIHRoaXMubmV4dERlcCA9IHRoaXMucHJldkRlcCA9IHRoaXMubmV4dFN1YiA9IHRoaXMucHJldlN1YiA9IHRoaXMucHJldkFjdGl2ZUxpbmsgPSB2b2lkIDA7XG4gIH1cbn1cbmNsYXNzIERlcCB7XG4gIC8vIFRPRE8gaXNvbGF0ZWREZWNsYXJhdGlvbnMgXCJfX3Zfc2tpcFwiXG4gIGNvbnN0cnVjdG9yKGNvbXB1dGVkKSB7XG4gICAgdGhpcy5jb21wdXRlZCA9IGNvbXB1dGVkO1xuICAgIHRoaXMudmVyc2lvbiA9IDA7XG4gICAgLyoqXG4gICAgICogTGluayBiZXR3ZWVuIHRoaXMgZGVwIGFuZCB0aGUgY3VycmVudCBhY3RpdmUgZWZmZWN0XG4gICAgICovXG4gICAgdGhpcy5hY3RpdmVMaW5rID0gdm9pZCAwO1xuICAgIC8qKlxuICAgICAqIERvdWJseSBsaW5rZWQgbGlzdCByZXByZXNlbnRpbmcgdGhlIHN1YnNjcmliaW5nIGVmZmVjdHMgKHRhaWwpXG4gICAgICovXG4gICAgdGhpcy5zdWJzID0gdm9pZCAwO1xuICAgIC8qKlxuICAgICAqIEZvciBvYmplY3QgcHJvcGVydHkgZGVwcyBjbGVhbnVwXG4gICAgICovXG4gICAgdGhpcy5tYXAgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlciBjb3VudGVyXG4gICAgICovXG4gICAgdGhpcy5zYyA9IDA7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5fX3Zfc2tpcCA9IHRydWU7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgIHRoaXMuc3Vic0hlYWQgPSB2b2lkIDA7XG4gICAgfVxuICB9XG4gIHRyYWNrKGRlYnVnSW5mbykge1xuICAgIGlmICghYWN0aXZlU3ViIHx8ICFzaG91bGRUcmFjayB8fCBhY3RpdmVTdWIgPT09IHRoaXMuY29tcHV0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGxpbmsgPSB0aGlzLmFjdGl2ZUxpbms7XG4gICAgaWYgKGxpbmsgPT09IHZvaWQgMCB8fCBsaW5rLnN1YiAhPT0gYWN0aXZlU3ViKSB7XG4gICAgICBsaW5rID0gdGhpcy5hY3RpdmVMaW5rID0gbmV3IExpbmsoYWN0aXZlU3ViLCB0aGlzKTtcbiAgICAgIGlmICghYWN0aXZlU3ViLmRlcHMpIHtcbiAgICAgICAgYWN0aXZlU3ViLmRlcHMgPSBhY3RpdmVTdWIuZGVwc1RhaWwgPSBsaW5rO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGluay5wcmV2RGVwID0gYWN0aXZlU3ViLmRlcHNUYWlsO1xuICAgICAgICBhY3RpdmVTdWIuZGVwc1RhaWwubmV4dERlcCA9IGxpbms7XG4gICAgICAgIGFjdGl2ZVN1Yi5kZXBzVGFpbCA9IGxpbms7XG4gICAgICB9XG4gICAgICBhZGRTdWIobGluayk7XG4gICAgfSBlbHNlIGlmIChsaW5rLnZlcnNpb24gPT09IC0xKSB7XG4gICAgICBsaW5rLnZlcnNpb24gPSB0aGlzLnZlcnNpb247XG4gICAgICBpZiAobGluay5uZXh0RGVwKSB7XG4gICAgICAgIGNvbnN0IG5leHQgPSBsaW5rLm5leHREZXA7XG4gICAgICAgIG5leHQucHJldkRlcCA9IGxpbmsucHJldkRlcDtcbiAgICAgICAgaWYgKGxpbmsucHJldkRlcCkge1xuICAgICAgICAgIGxpbmsucHJldkRlcC5uZXh0RGVwID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgICBsaW5rLnByZXZEZXAgPSBhY3RpdmVTdWIuZGVwc1RhaWw7XG4gICAgICAgIGxpbmsubmV4dERlcCA9IHZvaWQgMDtcbiAgICAgICAgYWN0aXZlU3ViLmRlcHNUYWlsLm5leHREZXAgPSBsaW5rO1xuICAgICAgICBhY3RpdmVTdWIuZGVwc1RhaWwgPSBsaW5rO1xuICAgICAgICBpZiAoYWN0aXZlU3ViLmRlcHMgPT09IGxpbmspIHtcbiAgICAgICAgICBhY3RpdmVTdWIuZGVwcyA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgYWN0aXZlU3ViLm9uVHJhY2spIHtcbiAgICAgIGFjdGl2ZVN1Yi5vblRyYWNrKFxuICAgICAgICBleHRlbmQoXG4gICAgICAgICAge1xuICAgICAgICAgICAgZWZmZWN0OiBhY3RpdmVTdWJcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRlYnVnSW5mb1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbGluaztcbiAgfVxuICB0cmlnZ2VyKGRlYnVnSW5mbykge1xuICAgIHRoaXMudmVyc2lvbisrO1xuICAgIGdsb2JhbFZlcnNpb24rKztcbiAgICB0aGlzLm5vdGlmeShkZWJ1Z0luZm8pO1xuICB9XG4gIG5vdGlmeShkZWJ1Z0luZm8pIHtcbiAgICBzdGFydEJhdGNoKCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgIGZvciAobGV0IGhlYWQgPSB0aGlzLnN1YnNIZWFkOyBoZWFkOyBoZWFkID0gaGVhZC5uZXh0U3ViKSB7XG4gICAgICAgICAgaWYgKGhlYWQuc3ViLm9uVHJpZ2dlciAmJiAhKGhlYWQuc3ViLmZsYWdzICYgOCkpIHtcbiAgICAgICAgICAgIGhlYWQuc3ViLm9uVHJpZ2dlcihcbiAgICAgICAgICAgICAgZXh0ZW5kKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGVmZmVjdDogaGVhZC5zdWJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRlYnVnSW5mb1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChsZXQgbGluayA9IHRoaXMuc3ViczsgbGluazsgbGluayA9IGxpbmsucHJldlN1Yikge1xuICAgICAgICBpZiAobGluay5zdWIubm90aWZ5KCkpIHtcbiAgICAgICAgICA7XG4gICAgICAgICAgbGluay5zdWIuZGVwLm5vdGlmeSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGVuZEJhdGNoKCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBhZGRTdWIobGluaykge1xuICBsaW5rLmRlcC5zYysrO1xuICBpZiAobGluay5zdWIuZmxhZ3MgJiA0KSB7XG4gICAgY29uc3QgY29tcHV0ZWQgPSBsaW5rLmRlcC5jb21wdXRlZDtcbiAgICBpZiAoY29tcHV0ZWQgJiYgIWxpbmsuZGVwLnN1YnMpIHtcbiAgICAgIGNvbXB1dGVkLmZsYWdzIHw9IDQgfCAxNjtcbiAgICAgIGZvciAobGV0IGwgPSBjb21wdXRlZC5kZXBzOyBsOyBsID0gbC5uZXh0RGVwKSB7XG4gICAgICAgIGFkZFN1YihsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgY3VycmVudFRhaWwgPSBsaW5rLmRlcC5zdWJzO1xuICAgIGlmIChjdXJyZW50VGFpbCAhPT0gbGluaykge1xuICAgICAgbGluay5wcmV2U3ViID0gY3VycmVudFRhaWw7XG4gICAgICBpZiAoY3VycmVudFRhaWwpIGN1cnJlbnRUYWlsLm5leHRTdWIgPSBsaW5rO1xuICAgIH1cbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBsaW5rLmRlcC5zdWJzSGVhZCA9PT0gdm9pZCAwKSB7XG4gICAgICBsaW5rLmRlcC5zdWJzSGVhZCA9IGxpbms7XG4gICAgfVxuICAgIGxpbmsuZGVwLnN1YnMgPSBsaW5rO1xuICB9XG59XG5jb25zdCB0YXJnZXRNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IElURVJBVEVfS0VZID0gU3ltYm9sKFxuICAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpID8gXCJPYmplY3QgaXRlcmF0ZVwiIDogXCJcIlxuKTtcbmNvbnN0IE1BUF9LRVlfSVRFUkFURV9LRVkgPSBTeW1ib2woXG4gICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyBcIk1hcCBrZXlzIGl0ZXJhdGVcIiA6IFwiXCJcbik7XG5jb25zdCBBUlJBWV9JVEVSQVRFX0tFWSA9IFN5bWJvbChcbiAgISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSA/IFwiQXJyYXkgaXRlcmF0ZVwiIDogXCJcIlxuKTtcbmZ1bmN0aW9uIHRyYWNrKHRhcmdldCwgdHlwZSwga2V5KSB7XG4gIGlmIChzaG91bGRUcmFjayAmJiBhY3RpdmVTdWIpIHtcbiAgICBsZXQgZGVwc01hcCA9IHRhcmdldE1hcC5nZXQodGFyZ2V0KTtcbiAgICBpZiAoIWRlcHNNYXApIHtcbiAgICAgIHRhcmdldE1hcC5zZXQodGFyZ2V0LCBkZXBzTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSk7XG4gICAgfVxuICAgIGxldCBkZXAgPSBkZXBzTWFwLmdldChrZXkpO1xuICAgIGlmICghZGVwKSB7XG4gICAgICBkZXBzTWFwLnNldChrZXksIGRlcCA9IG5ldyBEZXAoKSk7XG4gICAgICBkZXAubWFwID0gZGVwc01hcDtcbiAgICAgIGRlcC5rZXkgPSBrZXk7XG4gICAgfVxuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICBkZXAudHJhY2soe1xuICAgICAgICB0YXJnZXQsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIGtleVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlcC50cmFjaygpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gdHJpZ2dlcih0YXJnZXQsIHR5cGUsIGtleSwgbmV3VmFsdWUsIG9sZFZhbHVlLCBvbGRUYXJnZXQpIHtcbiAgY29uc3QgZGVwc01hcCA9IHRhcmdldE1hcC5nZXQodGFyZ2V0KTtcbiAgaWYgKCFkZXBzTWFwKSB7XG4gICAgZ2xvYmFsVmVyc2lvbisrO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBydW4gPSAoZGVwKSA9PiB7XG4gICAgaWYgKGRlcCkge1xuICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgZGVwLnRyaWdnZXIoe1xuICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIGtleSxcbiAgICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgICBvbGRWYWx1ZSxcbiAgICAgICAgICBvbGRUYXJnZXRcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZXAudHJpZ2dlcigpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc3RhcnRCYXRjaCgpO1xuICBpZiAodHlwZSA9PT0gXCJjbGVhclwiKSB7XG4gICAgZGVwc01hcC5mb3JFYWNoKHJ1bik7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgdGFyZ2V0SXNBcnJheSA9IGlzQXJyYXkodGFyZ2V0KTtcbiAgICBjb25zdCBpc0FycmF5SW5kZXggPSB0YXJnZXRJc0FycmF5ICYmIGlzSW50ZWdlcktleShrZXkpO1xuICAgIGlmICh0YXJnZXRJc0FycmF5ICYmIGtleSA9PT0gXCJsZW5ndGhcIikge1xuICAgICAgY29uc3QgbmV3TGVuZ3RoID0gTnVtYmVyKG5ld1ZhbHVlKTtcbiAgICAgIGRlcHNNYXAuZm9yRWFjaCgoZGVwLCBrZXkyKSA9PiB7XG4gICAgICAgIGlmIChrZXkyID09PSBcImxlbmd0aFwiIHx8IGtleTIgPT09IEFSUkFZX0lURVJBVEVfS0VZIHx8ICFpc1N5bWJvbChrZXkyKSAmJiBrZXkyID49IG5ld0xlbmd0aCkge1xuICAgICAgICAgIHJ1bihkZXApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGtleSAhPT0gdm9pZCAwIHx8IGRlcHNNYXAuaGFzKHZvaWQgMCkpIHtcbiAgICAgICAgcnVuKGRlcHNNYXAuZ2V0KGtleSkpO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlJbmRleCkge1xuICAgICAgICBydW4oZGVwc01hcC5nZXQoQVJSQVlfSVRFUkFURV9LRVkpKTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwiYWRkXCI6XG4gICAgICAgICAgaWYgKCF0YXJnZXRJc0FycmF5KSB7XG4gICAgICAgICAgICBydW4oZGVwc01hcC5nZXQoSVRFUkFURV9LRVkpKTtcbiAgICAgICAgICAgIGlmIChpc01hcCh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgIHJ1bihkZXBzTWFwLmdldChNQVBfS0VZX0lURVJBVEVfS0VZKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5SW5kZXgpIHtcbiAgICAgICAgICAgIHJ1bihkZXBzTWFwLmdldChcImxlbmd0aFwiKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZGVsZXRlXCI6XG4gICAgICAgICAgaWYgKCF0YXJnZXRJc0FycmF5KSB7XG4gICAgICAgICAgICBydW4oZGVwc01hcC5nZXQoSVRFUkFURV9LRVkpKTtcbiAgICAgICAgICAgIGlmIChpc01hcCh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgIHJ1bihkZXBzTWFwLmdldChNQVBfS0VZX0lURVJBVEVfS0VZKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwic2V0XCI6XG4gICAgICAgICAgaWYgKGlzTWFwKHRhcmdldCkpIHtcbiAgICAgICAgICAgIHJ1bihkZXBzTWFwLmdldChJVEVSQVRFX0tFWSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZW5kQmF0Y2goKTtcbn1cbmZ1bmN0aW9uIGdldERlcEZyb21SZWFjdGl2ZShvYmplY3QsIGtleSkge1xuICBjb25zdCBkZXBNYXAgPSB0YXJnZXRNYXAuZ2V0KG9iamVjdCk7XG4gIHJldHVybiBkZXBNYXAgJiYgZGVwTWFwLmdldChrZXkpO1xufVxuXG5mdW5jdGlvbiByZWFjdGl2ZVJlYWRBcnJheShhcnJheSkge1xuICBjb25zdCByYXcgPSB0b1JhdyhhcnJheSk7XG4gIGlmIChyYXcgPT09IGFycmF5KSByZXR1cm4gcmF3O1xuICB0cmFjayhyYXcsIFwiaXRlcmF0ZVwiLCBBUlJBWV9JVEVSQVRFX0tFWSk7XG4gIHJldHVybiBpc1NoYWxsb3coYXJyYXkpID8gcmF3IDogcmF3Lm1hcCh0b1JlYWN0aXZlKTtcbn1cbmZ1bmN0aW9uIHNoYWxsb3dSZWFkQXJyYXkoYXJyKSB7XG4gIHRyYWNrKGFyciA9IHRvUmF3KGFyciksIFwiaXRlcmF0ZVwiLCBBUlJBWV9JVEVSQVRFX0tFWSk7XG4gIHJldHVybiBhcnI7XG59XG5jb25zdCBhcnJheUluc3RydW1lbnRhdGlvbnMgPSB7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIGl0ZXJhdG9yKHRoaXMsIFN5bWJvbC5pdGVyYXRvciwgdG9SZWFjdGl2ZSk7XG4gIH0sXG4gIGNvbmNhdCguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHJlYWN0aXZlUmVhZEFycmF5KHRoaXMpLmNvbmNhdChcbiAgICAgIC4uLmFyZ3MubWFwKCh4KSA9PiBpc0FycmF5KHgpID8gcmVhY3RpdmVSZWFkQXJyYXkoeCkgOiB4KVxuICAgICk7XG4gIH0sXG4gIGVudHJpZXMoKSB7XG4gICAgcmV0dXJuIGl0ZXJhdG9yKHRoaXMsIFwiZW50cmllc1wiLCAodmFsdWUpID0+IHtcbiAgICAgIHZhbHVlWzFdID0gdG9SZWFjdGl2ZSh2YWx1ZVsxXSk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSk7XG4gIH0sXG4gIGV2ZXJ5KGZuLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGFwcGx5KHRoaXMsIFwiZXZlcnlcIiwgZm4sIHRoaXNBcmcsIHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgfSxcbiAgZmlsdGVyKGZuLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGFwcGx5KHRoaXMsIFwiZmlsdGVyXCIsIGZuLCB0aGlzQXJnLCAodikgPT4gdi5tYXAodG9SZWFjdGl2ZSksIGFyZ3VtZW50cyk7XG4gIH0sXG4gIGZpbmQoZm4sIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gYXBwbHkodGhpcywgXCJmaW5kXCIsIGZuLCB0aGlzQXJnLCB0b1JlYWN0aXZlLCBhcmd1bWVudHMpO1xuICB9LFxuICBmaW5kSW5kZXgoZm4sIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gYXBwbHkodGhpcywgXCJmaW5kSW5kZXhcIiwgZm4sIHRoaXNBcmcsIHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgfSxcbiAgZmluZExhc3QoZm4sIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gYXBwbHkodGhpcywgXCJmaW5kTGFzdFwiLCBmbiwgdGhpc0FyZywgdG9SZWFjdGl2ZSwgYXJndW1lbnRzKTtcbiAgfSxcbiAgZmluZExhc3RJbmRleChmbiwgdGhpc0FyZykge1xuICAgIHJldHVybiBhcHBseSh0aGlzLCBcImZpbmRMYXN0SW5kZXhcIiwgZm4sIHRoaXNBcmcsIHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgfSxcbiAgLy8gZmxhdCwgZmxhdE1hcCBjb3VsZCBiZW5lZml0IGZyb20gQVJSQVlfSVRFUkFURSBidXQgYXJlIG5vdCBzdHJhaWdodC1mb3J3YXJkIHRvIGltcGxlbWVudFxuICBmb3JFYWNoKGZuLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGFwcGx5KHRoaXMsIFwiZm9yRWFjaFwiLCBmbiwgdGhpc0FyZywgdm9pZCAwLCBhcmd1bWVudHMpO1xuICB9LFxuICBpbmNsdWRlcyguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHNlYXJjaFByb3h5KHRoaXMsIFwiaW5jbHVkZXNcIiwgYXJncyk7XG4gIH0sXG4gIGluZGV4T2YoLi4uYXJncykge1xuICAgIHJldHVybiBzZWFyY2hQcm94eSh0aGlzLCBcImluZGV4T2ZcIiwgYXJncyk7XG4gIH0sXG4gIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIHJlYWN0aXZlUmVhZEFycmF5KHRoaXMpLmpvaW4oc2VwYXJhdG9yKTtcbiAgfSxcbiAgLy8ga2V5cygpIGl0ZXJhdG9yIG9ubHkgcmVhZHMgYGxlbmd0aGAsIG5vIG9wdGltaXphdGlvbiByZXF1aXJlZFxuICBsYXN0SW5kZXhPZiguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHNlYXJjaFByb3h5KHRoaXMsIFwibGFzdEluZGV4T2ZcIiwgYXJncyk7XG4gIH0sXG4gIG1hcChmbiwgdGhpc0FyZykge1xuICAgIHJldHVybiBhcHBseSh0aGlzLCBcIm1hcFwiLCBmbiwgdGhpc0FyZywgdm9pZCAwLCBhcmd1bWVudHMpO1xuICB9LFxuICBwb3AoKSB7XG4gICAgcmV0dXJuIG5vVHJhY2tpbmcodGhpcywgXCJwb3BcIik7XG4gIH0sXG4gIHB1c2goLi4uYXJncykge1xuICAgIHJldHVybiBub1RyYWNraW5nKHRoaXMsIFwicHVzaFwiLCBhcmdzKTtcbiAgfSxcbiAgcmVkdWNlKGZuLCAuLi5hcmdzKSB7XG4gICAgcmV0dXJuIHJlZHVjZSh0aGlzLCBcInJlZHVjZVwiLCBmbiwgYXJncyk7XG4gIH0sXG4gIHJlZHVjZVJpZ2h0KGZuLCAuLi5hcmdzKSB7XG4gICAgcmV0dXJuIHJlZHVjZSh0aGlzLCBcInJlZHVjZVJpZ2h0XCIsIGZuLCBhcmdzKTtcbiAgfSxcbiAgc2hpZnQoKSB7XG4gICAgcmV0dXJuIG5vVHJhY2tpbmcodGhpcywgXCJzaGlmdFwiKTtcbiAgfSxcbiAgLy8gc2xpY2UgY291bGQgdXNlIEFSUkFZX0lURVJBVEUgYnV0IGFsc28gc2VlbXMgdG8gYmVnIGZvciByYW5nZSB0cmFja2luZ1xuICBzb21lKGZuLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGFwcGx5KHRoaXMsIFwic29tZVwiLCBmbiwgdGhpc0FyZywgdm9pZCAwLCBhcmd1bWVudHMpO1xuICB9LFxuICBzcGxpY2UoLi4uYXJncykge1xuICAgIHJldHVybiBub1RyYWNraW5nKHRoaXMsIFwic3BsaWNlXCIsIGFyZ3MpO1xuICB9LFxuICB0b1JldmVyc2VkKCkge1xuICAgIHJldHVybiByZWFjdGl2ZVJlYWRBcnJheSh0aGlzKS50b1JldmVyc2VkKCk7XG4gIH0sXG4gIHRvU29ydGVkKGNvbXBhcmVyKSB7XG4gICAgcmV0dXJuIHJlYWN0aXZlUmVhZEFycmF5KHRoaXMpLnRvU29ydGVkKGNvbXBhcmVyKTtcbiAgfSxcbiAgdG9TcGxpY2VkKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gcmVhY3RpdmVSZWFkQXJyYXkodGhpcykudG9TcGxpY2VkKC4uLmFyZ3MpO1xuICB9LFxuICB1bnNoaWZ0KC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gbm9UcmFja2luZyh0aGlzLCBcInVuc2hpZnRcIiwgYXJncyk7XG4gIH0sXG4gIHZhbHVlcygpIHtcbiAgICByZXR1cm4gaXRlcmF0b3IodGhpcywgXCJ2YWx1ZXNcIiwgdG9SZWFjdGl2ZSk7XG4gIH1cbn07XG5mdW5jdGlvbiBpdGVyYXRvcihzZWxmLCBtZXRob2QsIHdyYXBWYWx1ZSkge1xuICBjb25zdCBhcnIgPSBzaGFsbG93UmVhZEFycmF5KHNlbGYpO1xuICBjb25zdCBpdGVyID0gYXJyW21ldGhvZF0oKTtcbiAgaWYgKGFyciAhPT0gc2VsZiAmJiAhaXNTaGFsbG93KHNlbGYpKSB7XG4gICAgaXRlci5fbmV4dCA9IGl0ZXIubmV4dDtcbiAgICBpdGVyLm5leHQgPSAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBpdGVyLl9uZXh0KCk7XG4gICAgICBpZiAocmVzdWx0LnZhbHVlKSB7XG4gICAgICAgIHJlc3VsdC52YWx1ZSA9IHdyYXBWYWx1ZShyZXN1bHQudmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9XG4gIHJldHVybiBpdGVyO1xufVxuY29uc3QgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGFwcGx5KHNlbGYsIG1ldGhvZCwgZm4sIHRoaXNBcmcsIHdyYXBwZWRSZXRGbiwgYXJncykge1xuICBjb25zdCBhcnIgPSBzaGFsbG93UmVhZEFycmF5KHNlbGYpO1xuICBjb25zdCBuZWVkc1dyYXAgPSBhcnIgIT09IHNlbGYgJiYgIWlzU2hhbGxvdyhzZWxmKTtcbiAgY29uc3QgbWV0aG9kRm4gPSBhcnJbbWV0aG9kXTtcbiAgaWYgKG1ldGhvZEZuICE9PSBhcnJheVByb3RvW21ldGhvZF0pIHtcbiAgICBjb25zdCByZXN1bHQyID0gbWV0aG9kRm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgcmV0dXJuIG5lZWRzV3JhcCA/IHRvUmVhY3RpdmUocmVzdWx0MikgOiByZXN1bHQyO1xuICB9XG4gIGxldCB3cmFwcGVkRm4gPSBmbjtcbiAgaWYgKGFyciAhPT0gc2VsZikge1xuICAgIGlmIChuZWVkc1dyYXApIHtcbiAgICAgIHdyYXBwZWRGbiA9IGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIHRvUmVhY3RpdmUoaXRlbSksIGluZGV4LCBzZWxmKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChmbi5sZW5ndGggPiAyKSB7XG4gICAgICB3cmFwcGVkRm4gPSBmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBpdGVtLCBpbmRleCwgc2VsZik7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICBjb25zdCByZXN1bHQgPSBtZXRob2RGbi5jYWxsKGFyciwgd3JhcHBlZEZuLCB0aGlzQXJnKTtcbiAgcmV0dXJuIG5lZWRzV3JhcCAmJiB3cmFwcGVkUmV0Rm4gPyB3cmFwcGVkUmV0Rm4ocmVzdWx0KSA6IHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHJlZHVjZShzZWxmLCBtZXRob2QsIGZuLCBhcmdzKSB7XG4gIGNvbnN0IGFyciA9IHNoYWxsb3dSZWFkQXJyYXkoc2VsZik7XG4gIGxldCB3cmFwcGVkRm4gPSBmbjtcbiAgaWYgKGFyciAhPT0gc2VsZikge1xuICAgIGlmICghaXNTaGFsbG93KHNlbGYpKSB7XG4gICAgICB3cmFwcGVkRm4gPSBmdW5jdGlvbihhY2MsIGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIGFjYywgdG9SZWFjdGl2ZShpdGVtKSwgaW5kZXgsIHNlbGYpO1xuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGZuLmxlbmd0aCA+IDMpIHtcbiAgICAgIHdyYXBwZWRGbiA9IGZ1bmN0aW9uKGFjYywgaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgYWNjLCBpdGVtLCBpbmRleCwgc2VsZik7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyW21ldGhvZF0od3JhcHBlZEZuLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIHNlYXJjaFByb3h5KHNlbGYsIG1ldGhvZCwgYXJncykge1xuICBjb25zdCBhcnIgPSB0b1JhdyhzZWxmKTtcbiAgdHJhY2soYXJyLCBcIml0ZXJhdGVcIiwgQVJSQVlfSVRFUkFURV9LRVkpO1xuICBjb25zdCByZXMgPSBhcnJbbWV0aG9kXSguLi5hcmdzKTtcbiAgaWYgKChyZXMgPT09IC0xIHx8IHJlcyA9PT0gZmFsc2UpICYmIGlzUHJveHkoYXJnc1swXSkpIHtcbiAgICBhcmdzWzBdID0gdG9SYXcoYXJnc1swXSk7XG4gICAgcmV0dXJuIGFyclttZXRob2RdKC4uLmFyZ3MpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBub1RyYWNraW5nKHNlbGYsIG1ldGhvZCwgYXJncyA9IFtdKSB7XG4gIHBhdXNlVHJhY2tpbmcoKTtcbiAgc3RhcnRCYXRjaCgpO1xuICBjb25zdCByZXMgPSB0b1JhdyhzZWxmKVttZXRob2RdLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICBlbmRCYXRjaCgpO1xuICByZXNldFRyYWNraW5nKCk7XG4gIHJldHVybiByZXM7XG59XG5cbmNvbnN0IGlzTm9uVHJhY2thYmxlS2V5cyA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKGBfX3Byb3RvX18sX192X2lzUmVmLF9faXNWdWVgKTtcbmNvbnN0IGJ1aWx0SW5TeW1ib2xzID0gbmV3IFNldChcbiAgLyogQF9fUFVSRV9fICovIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKFN5bWJvbCkuZmlsdGVyKChrZXkpID0+IGtleSAhPT0gXCJhcmd1bWVudHNcIiAmJiBrZXkgIT09IFwiY2FsbGVyXCIpLm1hcCgoa2V5KSA9PiBTeW1ib2xba2V5XSkuZmlsdGVyKGlzU3ltYm9sKVxuKTtcbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KGtleSkge1xuICBpZiAoIWlzU3ltYm9sKGtleSkpIGtleSA9IFN0cmluZyhrZXkpO1xuICBjb25zdCBvYmogPSB0b1Jhdyh0aGlzKTtcbiAgdHJhY2sob2JqLCBcImhhc1wiLCBrZXkpO1xuICByZXR1cm4gb2JqLmhhc093blByb3BlcnR5KGtleSk7XG59XG5jbGFzcyBCYXNlUmVhY3RpdmVIYW5kbGVyIHtcbiAgY29uc3RydWN0b3IoX2lzUmVhZG9ubHkgPSBmYWxzZSwgX2lzU2hhbGxvdyA9IGZhbHNlKSB7XG4gICAgdGhpcy5faXNSZWFkb25seSA9IF9pc1JlYWRvbmx5O1xuICAgIHRoaXMuX2lzU2hhbGxvdyA9IF9pc1NoYWxsb3c7XG4gIH1cbiAgZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikge1xuICAgIGlmIChrZXkgPT09IFwiX192X3NraXBcIikgcmV0dXJuIHRhcmdldFtcIl9fdl9za2lwXCJdO1xuICAgIGNvbnN0IGlzUmVhZG9ubHkyID0gdGhpcy5faXNSZWFkb25seSwgaXNTaGFsbG93MiA9IHRoaXMuX2lzU2hhbGxvdztcbiAgICBpZiAoa2V5ID09PSBcIl9fdl9pc1JlYWN0aXZlXCIpIHtcbiAgICAgIHJldHVybiAhaXNSZWFkb25seTI7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09IFwiX192X2lzUmVhZG9ubHlcIikge1xuICAgICAgcmV0dXJuIGlzUmVhZG9ubHkyO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcIl9fdl9pc1NoYWxsb3dcIikge1xuICAgICAgcmV0dXJuIGlzU2hhbGxvdzI7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09IFwiX192X3Jhd1wiKSB7XG4gICAgICBpZiAocmVjZWl2ZXIgPT09IChpc1JlYWRvbmx5MiA/IGlzU2hhbGxvdzIgPyBzaGFsbG93UmVhZG9ubHlNYXAgOiByZWFkb25seU1hcCA6IGlzU2hhbGxvdzIgPyBzaGFsbG93UmVhY3RpdmVNYXAgOiByZWFjdGl2ZU1hcCkuZ2V0KHRhcmdldCkgfHwgLy8gcmVjZWl2ZXIgaXMgbm90IHRoZSByZWFjdGl2ZSBwcm94eSwgYnV0IGhhcyB0aGUgc2FtZSBwcm90b3R5cGVcbiAgICAgIC8vIHRoaXMgbWVhbnMgdGhlIHJlY2VpdmVyIGlzIGEgdXNlciBwcm94eSBvZiB0aGUgcmVhY3RpdmUgcHJveHlcbiAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocmVjZWl2ZXIpKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldElzQXJyYXkgPSBpc0FycmF5KHRhcmdldCk7XG4gICAgaWYgKCFpc1JlYWRvbmx5Mikge1xuICAgICAgbGV0IGZuO1xuICAgICAgaWYgKHRhcmdldElzQXJyYXkgJiYgKGZuID0gYXJyYXlJbnN0cnVtZW50YXRpb25zW2tleV0pKSB7XG4gICAgICAgIHJldHVybiBmbjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09IFwiaGFzT3duUHJvcGVydHlcIikge1xuICAgICAgICByZXR1cm4gaGFzT3duUHJvcGVydHk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IFJlZmxlY3QuZ2V0KFxuICAgICAgdGFyZ2V0LFxuICAgICAga2V5LFxuICAgICAgLy8gaWYgdGhpcyBpcyBhIHByb3h5IHdyYXBwaW5nIGEgcmVmLCByZXR1cm4gbWV0aG9kcyB1c2luZyB0aGUgcmF3IHJlZlxuICAgICAgLy8gYXMgcmVjZWl2ZXIgc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvIGNhbGwgYHRvUmF3YCBvbiB0aGUgcmVmIGluIGFsbFxuICAgICAgLy8gaXRzIGNsYXNzIG1ldGhvZHNcbiAgICAgIGlzUmVmKHRhcmdldCkgPyB0YXJnZXQgOiByZWNlaXZlclxuICAgICk7XG4gICAgaWYgKGlzU3ltYm9sKGtleSkgPyBidWlsdEluU3ltYm9scy5oYXMoa2V5KSA6IGlzTm9uVHJhY2thYmxlS2V5cyhrZXkpKSB7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBpZiAoIWlzUmVhZG9ubHkyKSB7XG4gICAgICB0cmFjayh0YXJnZXQsIFwiZ2V0XCIsIGtleSk7XG4gICAgfVxuICAgIGlmIChpc1NoYWxsb3cyKSB7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBpZiAoaXNSZWYocmVzKSkge1xuICAgICAgcmV0dXJuIHRhcmdldElzQXJyYXkgJiYgaXNJbnRlZ2VyS2V5KGtleSkgPyByZXMgOiByZXMudmFsdWU7XG4gICAgfVxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICByZXR1cm4gaXNSZWFkb25seTIgPyByZWFkb25seShyZXMpIDogcmVhY3RpdmUocmVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxufVxuY2xhc3MgTXV0YWJsZVJlYWN0aXZlSGFuZGxlciBleHRlbmRzIEJhc2VSZWFjdGl2ZUhhbmRsZXIge1xuICBjb25zdHJ1Y3Rvcihpc1NoYWxsb3cyID0gZmFsc2UpIHtcbiAgICBzdXBlcihmYWxzZSwgaXNTaGFsbG93Mik7XG4gIH1cbiAgc2V0KHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpIHtcbiAgICBsZXQgb2xkVmFsdWUgPSB0YXJnZXRba2V5XTtcbiAgICBpZiAoIXRoaXMuX2lzU2hhbGxvdykge1xuICAgICAgY29uc3QgaXNPbGRWYWx1ZVJlYWRvbmx5ID0gaXNSZWFkb25seShvbGRWYWx1ZSk7XG4gICAgICBpZiAoIWlzU2hhbGxvdyh2YWx1ZSkgJiYgIWlzUmVhZG9ubHkodmFsdWUpKSB7XG4gICAgICAgIG9sZFZhbHVlID0gdG9SYXcob2xkVmFsdWUpO1xuICAgICAgICB2YWx1ZSA9IHRvUmF3KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNBcnJheSh0YXJnZXQpICYmIGlzUmVmKG9sZFZhbHVlKSAmJiAhaXNSZWYodmFsdWUpKSB7XG4gICAgICAgIGlmIChpc09sZFZhbHVlUmVhZG9ubHkpIHtcbiAgICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgYFNldCBvcGVyYXRpb24gb24ga2V5IFwiJHtTdHJpbmcoa2V5KX1cIiBmYWlsZWQ6IHRhcmdldCBpcyByZWFkb25seS5gLFxuICAgICAgICAgICAgICB0YXJnZXRba2V5XVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2xkVmFsdWUudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBoYWRLZXkgPSBpc0FycmF5KHRhcmdldCkgJiYgaXNJbnRlZ2VyS2V5KGtleSkgPyBOdW1iZXIoa2V5KSA8IHRhcmdldC5sZW5ndGggOiBoYXNPd24odGFyZ2V0LCBrZXkpO1xuICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3Quc2V0KFxuICAgICAgdGFyZ2V0LFxuICAgICAga2V5LFxuICAgICAgdmFsdWUsXG4gICAgICBpc1JlZih0YXJnZXQpID8gdGFyZ2V0IDogcmVjZWl2ZXJcbiAgICApO1xuICAgIGlmICh0YXJnZXQgPT09IHRvUmF3KHJlY2VpdmVyKSkge1xuICAgICAgaWYgKCFoYWRLZXkpIHtcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIsIGtleSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChoYXNDaGFuZ2VkKHZhbHVlLCBvbGRWYWx1ZSkpIHtcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwic2V0XCIsIGtleSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIGtleSkge1xuICAgIGNvbnN0IGhhZEtleSA9IGhhc093bih0YXJnZXQsIGtleSk7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0YXJnZXRba2V5XTtcbiAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KTtcbiAgICBpZiAocmVzdWx0ICYmIGhhZEtleSkge1xuICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiZGVsZXRlXCIsIGtleSwgdm9pZCAwLCBvbGRWYWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaGFzKHRhcmdldCwga2V5KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpO1xuICAgIGlmICghaXNTeW1ib2woa2V5KSB8fCAhYnVpbHRJblN5bWJvbHMuaGFzKGtleSkpIHtcbiAgICAgIHRyYWNrKHRhcmdldCwgXCJoYXNcIiwga2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBvd25LZXlzKHRhcmdldCkge1xuICAgIHRyYWNrKFxuICAgICAgdGFyZ2V0LFxuICAgICAgXCJpdGVyYXRlXCIsXG4gICAgICBpc0FycmF5KHRhcmdldCkgPyBcImxlbmd0aFwiIDogSVRFUkFURV9LRVlcbiAgICApO1xuICAgIHJldHVybiBSZWZsZWN0Lm93bktleXModGFyZ2V0KTtcbiAgfVxufVxuY2xhc3MgUmVhZG9ubHlSZWFjdGl2ZUhhbmRsZXIgZXh0ZW5kcyBCYXNlUmVhY3RpdmVIYW5kbGVyIHtcbiAgY29uc3RydWN0b3IoaXNTaGFsbG93MiA9IGZhbHNlKSB7XG4gICAgc3VwZXIodHJ1ZSwgaXNTaGFsbG93Mik7XG4gIH1cbiAgc2V0KHRhcmdldCwga2V5KSB7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIGBTZXQgb3BlcmF0aW9uIG9uIGtleSBcIiR7U3RyaW5nKGtleSl9XCIgZmFpbGVkOiB0YXJnZXQgaXMgcmVhZG9ubHkuYCxcbiAgICAgICAgdGFyZ2V0XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIGtleSkge1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBgRGVsZXRlIG9wZXJhdGlvbiBvbiBrZXkgXCIke1N0cmluZyhrZXkpfVwiIGZhaWxlZDogdGFyZ2V0IGlzIHJlYWRvbmx5LmAsXG4gICAgICAgIHRhcmdldFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbmNvbnN0IG11dGFibGVIYW5kbGVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTXV0YWJsZVJlYWN0aXZlSGFuZGxlcigpO1xuY29uc3QgcmVhZG9ubHlIYW5kbGVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgUmVhZG9ubHlSZWFjdGl2ZUhhbmRsZXIoKTtcbmNvbnN0IHNoYWxsb3dSZWFjdGl2ZUhhbmRsZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBNdXRhYmxlUmVhY3RpdmVIYW5kbGVyKHRydWUpO1xuY29uc3Qgc2hhbGxvd1JlYWRvbmx5SGFuZGxlcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFJlYWRvbmx5UmVhY3RpdmVIYW5kbGVyKHRydWUpO1xuXG5jb25zdCB0b1NoYWxsb3cgPSAodmFsdWUpID0+IHZhbHVlO1xuY29uc3QgZ2V0UHJvdG8gPSAodikgPT4gUmVmbGVjdC5nZXRQcm90b3R5cGVPZih2KTtcbmZ1bmN0aW9uIGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgaXNSZWFkb25seTIsIGlzU2hhbGxvdzIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB0aGlzW1wiX192X3Jhd1wiXTtcbiAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xuICAgIGNvbnN0IHRhcmdldElzTWFwID0gaXNNYXAocmF3VGFyZ2V0KTtcbiAgICBjb25zdCBpc1BhaXIgPSBtZXRob2QgPT09IFwiZW50cmllc1wiIHx8IG1ldGhvZCA9PT0gU3ltYm9sLml0ZXJhdG9yICYmIHRhcmdldElzTWFwO1xuICAgIGNvbnN0IGlzS2V5T25seSA9IG1ldGhvZCA9PT0gXCJrZXlzXCIgJiYgdGFyZ2V0SXNNYXA7XG4gICAgY29uc3QgaW5uZXJJdGVyYXRvciA9IHRhcmdldFttZXRob2RdKC4uLmFyZ3MpO1xuICAgIGNvbnN0IHdyYXAgPSBpc1NoYWxsb3cyID8gdG9TaGFsbG93IDogaXNSZWFkb25seTIgPyB0b1JlYWRvbmx5IDogdG9SZWFjdGl2ZTtcbiAgICAhaXNSZWFkb25seTIgJiYgdHJhY2soXG4gICAgICByYXdUYXJnZXQsXG4gICAgICBcIml0ZXJhdGVcIixcbiAgICAgIGlzS2V5T25seSA/IE1BUF9LRVlfSVRFUkFURV9LRVkgOiBJVEVSQVRFX0tFWVxuICAgICk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIGl0ZXJhdG9yIHByb3RvY29sXG4gICAgICBuZXh0KCkge1xuICAgICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBpbm5lckl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIGRvbmUgPyB7IHZhbHVlLCBkb25lIH0gOiB7XG4gICAgICAgICAgdmFsdWU6IGlzUGFpciA/IFt3cmFwKHZhbHVlWzBdKSwgd3JhcCh2YWx1ZVsxXSldIDogd3JhcCh2YWx1ZSksXG4gICAgICAgICAgZG9uZVxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIC8vIGl0ZXJhYmxlIHByb3RvY29sXG4gICAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlYWRvbmx5TWV0aG9kKHR5cGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgY29uc3Qga2V5ID0gYXJnc1swXSA/IGBvbiBrZXkgXCIke2FyZ3NbMF19XCIgYCA6IGBgO1xuICAgICAgd2FybihcbiAgICAgICAgYCR7Y2FwaXRhbGl6ZSh0eXBlKX0gb3BlcmF0aW9uICR7a2V5fWZhaWxlZDogdGFyZ2V0IGlzIHJlYWRvbmx5LmAsXG4gICAgICAgIHRvUmF3KHRoaXMpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZSA9PT0gXCJkZWxldGVcIiA/IGZhbHNlIDogdHlwZSA9PT0gXCJjbGVhclwiID8gdm9pZCAwIDogdGhpcztcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUluc3RydW1lbnRhdGlvbnMocmVhZG9ubHksIHNoYWxsb3cpIHtcbiAgY29uc3QgaW5zdHJ1bWVudGF0aW9ucyA9IHtcbiAgICBnZXQoa2V5KSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSB0aGlzW1wiX192X3Jhd1wiXTtcbiAgICAgIGNvbnN0IHJhd1RhcmdldCA9IHRvUmF3KHRhcmdldCk7XG4gICAgICBjb25zdCByYXdLZXkgPSB0b1JhdyhrZXkpO1xuICAgICAgaWYgKCFyZWFkb25seSkge1xuICAgICAgICBpZiAoaGFzQ2hhbmdlZChrZXksIHJhd0tleSkpIHtcbiAgICAgICAgICB0cmFjayhyYXdUYXJnZXQsIFwiZ2V0XCIsIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhY2socmF3VGFyZ2V0LCBcImdldFwiLCByYXdLZXkpO1xuICAgICAgfVxuICAgICAgY29uc3QgeyBoYXMgfSA9IGdldFByb3RvKHJhd1RhcmdldCk7XG4gICAgICBjb25zdCB3cmFwID0gc2hhbGxvdyA/IHRvU2hhbGxvdyA6IHJlYWRvbmx5ID8gdG9SZWFkb25seSA6IHRvUmVhY3RpdmU7XG4gICAgICBpZiAoaGFzLmNhbGwocmF3VGFyZ2V0LCBrZXkpKSB7XG4gICAgICAgIHJldHVybiB3cmFwKHRhcmdldC5nZXQoa2V5KSk7XG4gICAgICB9IGVsc2UgaWYgKGhhcy5jYWxsKHJhd1RhcmdldCwgcmF3S2V5KSkge1xuICAgICAgICByZXR1cm4gd3JhcCh0YXJnZXQuZ2V0KHJhd0tleSkpO1xuICAgICAgfSBlbHNlIGlmICh0YXJnZXQgIT09IHJhd1RhcmdldCkge1xuICAgICAgICB0YXJnZXQuZ2V0KGtleSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXNbXCJfX3ZfcmF3XCJdO1xuICAgICAgIXJlYWRvbmx5ICYmIHRyYWNrKHRvUmF3KHRhcmdldCksIFwiaXRlcmF0ZVwiLCBJVEVSQVRFX0tFWSk7XG4gICAgICByZXR1cm4gdGFyZ2V0LnNpemU7XG4gICAgfSxcbiAgICBoYXMoa2V5KSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSB0aGlzW1wiX192X3Jhd1wiXTtcbiAgICAgIGNvbnN0IHJhd1RhcmdldCA9IHRvUmF3KHRhcmdldCk7XG4gICAgICBjb25zdCByYXdLZXkgPSB0b1JhdyhrZXkpO1xuICAgICAgaWYgKCFyZWFkb25seSkge1xuICAgICAgICBpZiAoaGFzQ2hhbmdlZChrZXksIHJhd0tleSkpIHtcbiAgICAgICAgICB0cmFjayhyYXdUYXJnZXQsIFwiaGFzXCIsIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhY2socmF3VGFyZ2V0LCBcImhhc1wiLCByYXdLZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGtleSA9PT0gcmF3S2V5ID8gdGFyZ2V0LmhhcyhrZXkpIDogdGFyZ2V0LmhhcyhrZXkpIHx8IHRhcmdldC5oYXMocmF3S2V5KTtcbiAgICB9LFxuICAgIGZvckVhY2goY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIGNvbnN0IG9ic2VydmVkID0gdGhpcztcbiAgICAgIGNvbnN0IHRhcmdldCA9IG9ic2VydmVkW1wiX192X3Jhd1wiXTtcbiAgICAgIGNvbnN0IHJhd1RhcmdldCA9IHRvUmF3KHRhcmdldCk7XG4gICAgICBjb25zdCB3cmFwID0gc2hhbGxvdyA/IHRvU2hhbGxvdyA6IHJlYWRvbmx5ID8gdG9SZWFkb25seSA6IHRvUmVhY3RpdmU7XG4gICAgICAhcmVhZG9ubHkgJiYgdHJhY2socmF3VGFyZ2V0LCBcIml0ZXJhdGVcIiwgSVRFUkFURV9LRVkpO1xuICAgICAgcmV0dXJuIHRhcmdldC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHdyYXAodmFsdWUpLCB3cmFwKGtleSksIG9ic2VydmVkKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgZXh0ZW5kKFxuICAgIGluc3RydW1lbnRhdGlvbnMsXG4gICAgcmVhZG9ubHkgPyB7XG4gICAgICBhZGQ6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiYWRkXCIpLFxuICAgICAgc2V0OiBjcmVhdGVSZWFkb25seU1ldGhvZChcInNldFwiKSxcbiAgICAgIGRlbGV0ZTogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJkZWxldGVcIiksXG4gICAgICBjbGVhcjogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJjbGVhclwiKVxuICAgIH0gOiB7XG4gICAgICBhZGQodmFsdWUpIHtcbiAgICAgICAgaWYgKCFzaGFsbG93ICYmICFpc1NoYWxsb3codmFsdWUpICYmICFpc1JlYWRvbmx5KHZhbHVlKSkge1xuICAgICAgICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRvUmF3KHRoaXMpO1xuICAgICAgICBjb25zdCBwcm90byA9IGdldFByb3RvKHRhcmdldCk7XG4gICAgICAgIGNvbnN0IGhhZEtleSA9IHByb3RvLmhhcy5jYWxsKHRhcmdldCwgdmFsdWUpO1xuICAgICAgICBpZiAoIWhhZEtleSkge1xuICAgICAgICAgIHRhcmdldC5hZGQodmFsdWUpO1xuICAgICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImFkZFwiLCB2YWx1ZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICghc2hhbGxvdyAmJiAhaXNTaGFsbG93KHZhbHVlKSAmJiAhaXNSZWFkb25seSh2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRvUmF3KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcbiAgICAgICAgY29uc3QgeyBoYXMsIGdldCB9ID0gZ2V0UHJvdG8odGFyZ2V0KTtcbiAgICAgICAgbGV0IGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcbiAgICAgICAgaWYgKCFoYWRLZXkpIHtcbiAgICAgICAgICBrZXkgPSB0b1JhdyhrZXkpO1xuICAgICAgICAgIGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcbiAgICAgICAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgY2hlY2tJZGVudGl0eUtleXModGFyZ2V0LCBoYXMsIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSBnZXQuY2FsbCh0YXJnZXQsIGtleSk7XG4gICAgICAgIHRhcmdldC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIGlmICghaGFkS2V5KSB7XG4gICAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIsIGtleSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhc0NoYW5nZWQodmFsdWUsIG9sZFZhbHVlKSkge1xuICAgICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcInNldFwiLCBrZXksIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuICAgICAgZGVsZXRlKGtleSkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcbiAgICAgICAgY29uc3QgeyBoYXMsIGdldCB9ID0gZ2V0UHJvdG8odGFyZ2V0KTtcbiAgICAgICAgbGV0IGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcbiAgICAgICAgaWYgKCFoYWRLZXkpIHtcbiAgICAgICAgICBrZXkgPSB0b1JhdyhrZXkpO1xuICAgICAgICAgIGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcbiAgICAgICAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgY2hlY2tJZGVudGl0eUtleXModGFyZ2V0LCBoYXMsIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSBnZXQgPyBnZXQuY2FsbCh0YXJnZXQsIGtleSkgOiB2b2lkIDA7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRhcmdldC5kZWxldGUoa2V5KTtcbiAgICAgICAgaWYgKGhhZEtleSkge1xuICAgICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImRlbGV0ZVwiLCBrZXksIHZvaWQgMCwgb2xkVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9LFxuICAgICAgY2xlYXIoKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRvUmF3KHRoaXMpO1xuICAgICAgICBjb25zdCBoYWRJdGVtcyA9IHRhcmdldC5zaXplICE9PSAwO1xuICAgICAgICBjb25zdCBvbGRUYXJnZXQgPSAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpID8gaXNNYXAodGFyZ2V0KSA/IG5ldyBNYXAodGFyZ2V0KSA6IG5ldyBTZXQodGFyZ2V0KSA6IHZvaWQgMDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGFyZ2V0LmNsZWFyKCk7XG4gICAgICAgIGlmIChoYWRJdGVtcykge1xuICAgICAgICAgIHRyaWdnZXIoXG4gICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICBcImNsZWFyXCIsXG4gICAgICAgICAgICB2b2lkIDAsXG4gICAgICAgICAgICB2b2lkIDAsXG4gICAgICAgICAgICBvbGRUYXJnZXRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICApO1xuICBjb25zdCBpdGVyYXRvck1ldGhvZHMgPSBbXG4gICAgXCJrZXlzXCIsXG4gICAgXCJ2YWx1ZXNcIixcbiAgICBcImVudHJpZXNcIixcbiAgICBTeW1ib2wuaXRlcmF0b3JcbiAgXTtcbiAgaXRlcmF0b3JNZXRob2RzLmZvckVhY2goKG1ldGhvZCkgPT4ge1xuICAgIGluc3RydW1lbnRhdGlvbnNbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgcmVhZG9ubHksIHNoYWxsb3cpO1xuICB9KTtcbiAgcmV0dXJuIGluc3RydW1lbnRhdGlvbnM7XG59XG5mdW5jdGlvbiBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIoaXNSZWFkb25seTIsIHNoYWxsb3cpIHtcbiAgY29uc3QgaW5zdHJ1bWVudGF0aW9ucyA9IGNyZWF0ZUluc3RydW1lbnRhdGlvbnMoaXNSZWFkb25seTIsIHNoYWxsb3cpO1xuICByZXR1cm4gKHRhcmdldCwga2V5LCByZWNlaXZlcikgPT4ge1xuICAgIGlmIChrZXkgPT09IFwiX192X2lzUmVhY3RpdmVcIikge1xuICAgICAgcmV0dXJuICFpc1JlYWRvbmx5MjtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFkb25seVwiKSB7XG4gICAgICByZXR1cm4gaXNSZWFkb25seTI7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09IFwiX192X3Jhd1wiKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICByZXR1cm4gUmVmbGVjdC5nZXQoXG4gICAgICBoYXNPd24oaW5zdHJ1bWVudGF0aW9ucywga2V5KSAmJiBrZXkgaW4gdGFyZ2V0ID8gaW5zdHJ1bWVudGF0aW9ucyA6IHRhcmdldCxcbiAgICAgIGtleSxcbiAgICAgIHJlY2VpdmVyXG4gICAgKTtcbiAgfTtcbn1cbmNvbnN0IG11dGFibGVDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XG4gIGdldDogLyogQF9fUFVSRV9fICovIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihmYWxzZSwgZmFsc2UpXG59O1xuY29uc3Qgc2hhbGxvd0NvbGxlY3Rpb25IYW5kbGVycyA9IHtcbiAgZ2V0OiAvKiBAX19QVVJFX18gKi8gY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKGZhbHNlLCB0cnVlKVxufTtcbmNvbnN0IHJlYWRvbmx5Q29sbGVjdGlvbkhhbmRsZXJzID0ge1xuICBnZXQ6IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIodHJ1ZSwgZmFsc2UpXG59O1xuY29uc3Qgc2hhbGxvd1JlYWRvbmx5Q29sbGVjdGlvbkhhbmRsZXJzID0ge1xuICBnZXQ6IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIodHJ1ZSwgdHJ1ZSlcbn07XG5mdW5jdGlvbiBjaGVja0lkZW50aXR5S2V5cyh0YXJnZXQsIGhhcywga2V5KSB7XG4gIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XG4gIGlmIChyYXdLZXkgIT09IGtleSAmJiBoYXMuY2FsbCh0YXJnZXQsIHJhd0tleSkpIHtcbiAgICBjb25zdCB0eXBlID0gdG9SYXdUeXBlKHRhcmdldCk7XG4gICAgd2FybihcbiAgICAgIGBSZWFjdGl2ZSAke3R5cGV9IGNvbnRhaW5zIGJvdGggdGhlIHJhdyBhbmQgcmVhY3RpdmUgdmVyc2lvbnMgb2YgdGhlIHNhbWUgb2JqZWN0JHt0eXBlID09PSBgTWFwYCA/IGAgYXMga2V5c2AgOiBgYH0sIHdoaWNoIGNhbiBsZWFkIHRvIGluY29uc2lzdGVuY2llcy4gQXZvaWQgZGlmZmVyZW50aWF0aW5nIGJldHdlZW4gdGhlIHJhdyBhbmQgcmVhY3RpdmUgdmVyc2lvbnMgb2YgYW4gb2JqZWN0IGFuZCBvbmx5IHVzZSB0aGUgcmVhY3RpdmUgdmVyc2lvbiBpZiBwb3NzaWJsZS5gXG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCByZWFjdGl2ZU1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuY29uc3Qgc2hhbGxvd1JlYWN0aXZlTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5jb25zdCByZWFkb25seU1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuY29uc3Qgc2hhbGxvd1JlYWRvbmx5TWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiB0YXJnZXRUeXBlTWFwKHJhd1R5cGUpIHtcbiAgc3dpdGNoIChyYXdUeXBlKSB7XG4gICAgY2FzZSBcIk9iamVjdFwiOlxuICAgIGNhc2UgXCJBcnJheVwiOlxuICAgICAgcmV0dXJuIDEgLyogQ09NTU9OICovO1xuICAgIGNhc2UgXCJNYXBcIjpcbiAgICBjYXNlIFwiU2V0XCI6XG4gICAgY2FzZSBcIldlYWtNYXBcIjpcbiAgICBjYXNlIFwiV2Vha1NldFwiOlxuICAgICAgcmV0dXJuIDIgLyogQ09MTEVDVElPTiAqLztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIDAgLyogSU5WQUxJRCAqLztcbiAgfVxufVxuZnVuY3Rpb24gZ2V0VGFyZ2V0VHlwZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWVbXCJfX3Zfc2tpcFwiXSB8fCAhT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSkgPyAwIC8qIElOVkFMSUQgKi8gOiB0YXJnZXRUeXBlTWFwKHRvUmF3VHlwZSh2YWx1ZSkpO1xufVxuZnVuY3Rpb24gcmVhY3RpdmUodGFyZ2V0KSB7XG4gIGlmIChpc1JlYWRvbmx5KHRhcmdldCkpIHtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIHJldHVybiBjcmVhdGVSZWFjdGl2ZU9iamVjdChcbiAgICB0YXJnZXQsXG4gICAgZmFsc2UsXG4gICAgbXV0YWJsZUhhbmRsZXJzLFxuICAgIG11dGFibGVDb2xsZWN0aW9uSGFuZGxlcnMsXG4gICAgcmVhY3RpdmVNYXBcbiAgKTtcbn1cbmZ1bmN0aW9uIHNoYWxsb3dSZWFjdGl2ZSh0YXJnZXQpIHtcbiAgcmV0dXJuIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KFxuICAgIHRhcmdldCxcbiAgICBmYWxzZSxcbiAgICBzaGFsbG93UmVhY3RpdmVIYW5kbGVycyxcbiAgICBzaGFsbG93Q29sbGVjdGlvbkhhbmRsZXJzLFxuICAgIHNoYWxsb3dSZWFjdGl2ZU1hcFxuICApO1xufVxuZnVuY3Rpb24gcmVhZG9ubHkodGFyZ2V0KSB7XG4gIHJldHVybiBjcmVhdGVSZWFjdGl2ZU9iamVjdChcbiAgICB0YXJnZXQsXG4gICAgdHJ1ZSxcbiAgICByZWFkb25seUhhbmRsZXJzLFxuICAgIHJlYWRvbmx5Q29sbGVjdGlvbkhhbmRsZXJzLFxuICAgIHJlYWRvbmx5TWFwXG4gICk7XG59XG5mdW5jdGlvbiBzaGFsbG93UmVhZG9ubHkodGFyZ2V0KSB7XG4gIHJldHVybiBjcmVhdGVSZWFjdGl2ZU9iamVjdChcbiAgICB0YXJnZXQsXG4gICAgdHJ1ZSxcbiAgICBzaGFsbG93UmVhZG9ubHlIYW5kbGVycyxcbiAgICBzaGFsbG93UmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMsXG4gICAgc2hhbGxvd1JlYWRvbmx5TWFwXG4gICk7XG59XG5mdW5jdGlvbiBjcmVhdGVSZWFjdGl2ZU9iamVjdCh0YXJnZXQsIGlzUmVhZG9ubHkyLCBiYXNlSGFuZGxlcnMsIGNvbGxlY3Rpb25IYW5kbGVycywgcHJveHlNYXApIHtcbiAgaWYgKCFpc09iamVjdCh0YXJnZXQpKSB7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIGB2YWx1ZSBjYW5ub3QgYmUgbWFkZSAke2lzUmVhZG9ubHkyID8gXCJyZWFkb25seVwiIDogXCJyZWFjdGl2ZVwifTogJHtTdHJpbmcoXG4gICAgICAgICAgdGFyZ2V0XG4gICAgICAgICl9YFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICBpZiAodGFyZ2V0W1wiX192X3Jhd1wiXSAmJiAhKGlzUmVhZG9ubHkyICYmIHRhcmdldFtcIl9fdl9pc1JlYWN0aXZlXCJdKSkge1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgY29uc3QgdGFyZ2V0VHlwZSA9IGdldFRhcmdldFR5cGUodGFyZ2V0KTtcbiAgaWYgKHRhcmdldFR5cGUgPT09IDAgLyogSU5WQUxJRCAqLykge1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgY29uc3QgZXhpc3RpbmdQcm94eSA9IHByb3h5TWFwLmdldCh0YXJnZXQpO1xuICBpZiAoZXhpc3RpbmdQcm94eSkge1xuICAgIHJldHVybiBleGlzdGluZ1Byb3h5O1xuICB9XG4gIGNvbnN0IHByb3h5ID0gbmV3IFByb3h5KFxuICAgIHRhcmdldCxcbiAgICB0YXJnZXRUeXBlID09PSAyIC8qIENPTExFQ1RJT04gKi8gPyBjb2xsZWN0aW9uSGFuZGxlcnMgOiBiYXNlSGFuZGxlcnNcbiAgKTtcbiAgcHJveHlNYXAuc2V0KHRhcmdldCwgcHJveHkpO1xuICByZXR1cm4gcHJveHk7XG59XG5mdW5jdGlvbiBpc1JlYWN0aXZlKHZhbHVlKSB7XG4gIGlmIChpc1JlYWRvbmx5KHZhbHVlKSkge1xuICAgIHJldHVybiBpc1JlYWN0aXZlKHZhbHVlW1wiX192X3Jhd1wiXSk7XG4gIH1cbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlW1wiX192X2lzUmVhY3RpdmVcIl0pO1xufVxuZnVuY3Rpb24gaXNSZWFkb25seSh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWVbXCJfX3ZfaXNSZWFkb25seVwiXSk7XG59XG5mdW5jdGlvbiBpc1NoYWxsb3codmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlW1wiX192X2lzU2hhbGxvd1wiXSk7XG59XG5mdW5jdGlvbiBpc1Byb3h5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA/ICEhdmFsdWVbXCJfX3ZfcmF3XCJdIDogZmFsc2U7XG59XG5mdW5jdGlvbiB0b1JhdyhvYnNlcnZlZCkge1xuICBjb25zdCByYXcgPSBvYnNlcnZlZCAmJiBvYnNlcnZlZFtcIl9fdl9yYXdcIl07XG4gIHJldHVybiByYXcgPyB0b1JhdyhyYXcpIDogb2JzZXJ2ZWQ7XG59XG5mdW5jdGlvbiBtYXJrUmF3KHZhbHVlKSB7XG4gIGlmICghaGFzT3duKHZhbHVlLCBcIl9fdl9za2lwXCIpICYmIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpKSB7XG4gICAgZGVmKHZhbHVlLCBcIl9fdl9za2lwXCIsIHRydWUpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmNvbnN0IHRvUmVhY3RpdmUgPSAodmFsdWUpID0+IGlzT2JqZWN0KHZhbHVlKSA/IHJlYWN0aXZlKHZhbHVlKSA6IHZhbHVlO1xuY29uc3QgdG9SZWFkb25seSA9ICh2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpID8gcmVhZG9ubHkodmFsdWUpIDogdmFsdWU7XG5cbmZ1bmN0aW9uIGlzUmVmKHIpIHtcbiAgcmV0dXJuIHIgPyByW1wiX192X2lzUmVmXCJdID09PSB0cnVlIDogZmFsc2U7XG59XG5mdW5jdGlvbiByZWYodmFsdWUpIHtcbiAgcmV0dXJuIGNyZWF0ZVJlZih2YWx1ZSwgZmFsc2UpO1xufVxuZnVuY3Rpb24gc2hhbGxvd1JlZih2YWx1ZSkge1xuICByZXR1cm4gY3JlYXRlUmVmKHZhbHVlLCB0cnVlKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlZihyYXdWYWx1ZSwgc2hhbGxvdykge1xuICBpZiAoaXNSZWYocmF3VmFsdWUpKSB7XG4gICAgcmV0dXJuIHJhd1ZhbHVlO1xuICB9XG4gIHJldHVybiBuZXcgUmVmSW1wbChyYXdWYWx1ZSwgc2hhbGxvdyk7XG59XG5jbGFzcyBSZWZJbXBsIHtcbiAgY29uc3RydWN0b3IodmFsdWUsIGlzU2hhbGxvdzIpIHtcbiAgICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcbiAgICB0aGlzW1wiX192X2lzUmVmXCJdID0gdHJ1ZTtcbiAgICB0aGlzW1wiX192X2lzU2hhbGxvd1wiXSA9IGZhbHNlO1xuICAgIHRoaXMuX3Jhd1ZhbHVlID0gaXNTaGFsbG93MiA/IHZhbHVlIDogdG9SYXcodmFsdWUpO1xuICAgIHRoaXMuX3ZhbHVlID0gaXNTaGFsbG93MiA/IHZhbHVlIDogdG9SZWFjdGl2ZSh2YWx1ZSk7XG4gICAgdGhpc1tcIl9fdl9pc1NoYWxsb3dcIl0gPSBpc1NoYWxsb3cyO1xuICB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgdGhpcy5kZXAudHJhY2soe1xuICAgICAgICB0YXJnZXQ6IHRoaXMsXG4gICAgICAgIHR5cGU6IFwiZ2V0XCIsXG4gICAgICAgIGtleTogXCJ2YWx1ZVwiXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZXAudHJhY2soKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG4gIHNldCB2YWx1ZShuZXdWYWx1ZSkge1xuICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5fcmF3VmFsdWU7XG4gICAgY29uc3QgdXNlRGlyZWN0VmFsdWUgPSB0aGlzW1wiX192X2lzU2hhbGxvd1wiXSB8fCBpc1NoYWxsb3cobmV3VmFsdWUpIHx8IGlzUmVhZG9ubHkobmV3VmFsdWUpO1xuICAgIG5ld1ZhbHVlID0gdXNlRGlyZWN0VmFsdWUgPyBuZXdWYWx1ZSA6IHRvUmF3KG5ld1ZhbHVlKTtcbiAgICBpZiAoaGFzQ2hhbmdlZChuZXdWYWx1ZSwgb2xkVmFsdWUpKSB7XG4gICAgICB0aGlzLl9yYXdWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgdGhpcy5fdmFsdWUgPSB1c2VEaXJlY3RWYWx1ZSA/IG5ld1ZhbHVlIDogdG9SZWFjdGl2ZShuZXdWYWx1ZSk7XG4gICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICB0aGlzLmRlcC50cmlnZ2VyKHtcbiAgICAgICAgICB0YXJnZXQ6IHRoaXMsXG4gICAgICAgICAgdHlwZTogXCJzZXRcIixcbiAgICAgICAgICBrZXk6IFwidmFsdWVcIixcbiAgICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgICBvbGRWYWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGVwLnRyaWdnZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHRyaWdnZXJSZWYocmVmMikge1xuICBpZiAocmVmMi5kZXApIHtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgcmVmMi5kZXAudHJpZ2dlcih7XG4gICAgICAgIHRhcmdldDogcmVmMixcbiAgICAgICAgdHlwZTogXCJzZXRcIixcbiAgICAgICAga2V5OiBcInZhbHVlXCIsXG4gICAgICAgIG5ld1ZhbHVlOiByZWYyLl92YWx1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZjIuZGVwLnRyaWdnZXIoKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHVucmVmKHJlZjIpIHtcbiAgcmV0dXJuIGlzUmVmKHJlZjIpID8gcmVmMi52YWx1ZSA6IHJlZjI7XG59XG5mdW5jdGlvbiB0b1ZhbHVlKHNvdXJjZSkge1xuICByZXR1cm4gaXNGdW5jdGlvbihzb3VyY2UpID8gc291cmNlKCkgOiB1bnJlZihzb3VyY2UpO1xufVxuY29uc3Qgc2hhbGxvd1Vud3JhcEhhbmRsZXJzID0ge1xuICBnZXQ6ICh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpID0+IGtleSA9PT0gXCJfX3ZfcmF3XCIgPyB0YXJnZXQgOiB1bnJlZihSZWZsZWN0LmdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpKSxcbiAgc2V0OiAodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcikgPT4ge1xuICAgIGNvbnN0IG9sZFZhbHVlID0gdGFyZ2V0W2tleV07XG4gICAgaWYgKGlzUmVmKG9sZFZhbHVlKSAmJiAhaXNSZWYodmFsdWUpKSB7XG4gICAgICBvbGRWYWx1ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKTtcbiAgICB9XG4gIH1cbn07XG5mdW5jdGlvbiBwcm94eVJlZnMob2JqZWN0V2l0aFJlZnMpIHtcbiAgcmV0dXJuIGlzUmVhY3RpdmUob2JqZWN0V2l0aFJlZnMpID8gb2JqZWN0V2l0aFJlZnMgOiBuZXcgUHJveHkob2JqZWN0V2l0aFJlZnMsIHNoYWxsb3dVbndyYXBIYW5kbGVycyk7XG59XG5jbGFzcyBDdXN0b21SZWZJbXBsIHtcbiAgY29uc3RydWN0b3IoZmFjdG9yeSkge1xuICAgIHRoaXNbXCJfX3ZfaXNSZWZcIl0gPSB0cnVlO1xuICAgIHRoaXMuX3ZhbHVlID0gdm9pZCAwO1xuICAgIGNvbnN0IGRlcCA9IHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICAgIGNvbnN0IHsgZ2V0LCBzZXQgfSA9IGZhY3RvcnkoZGVwLnRyYWNrLmJpbmQoZGVwKSwgZGVwLnRyaWdnZXIuYmluZChkZXApKTtcbiAgICB0aGlzLl9nZXQgPSBnZXQ7XG4gICAgdGhpcy5fc2V0ID0gc2V0O1xuICB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUgPSB0aGlzLl9nZXQoKTtcbiAgfVxuICBzZXQgdmFsdWUobmV3VmFsKSB7XG4gICAgdGhpcy5fc2V0KG5ld1ZhbCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGN1c3RvbVJlZihmYWN0b3J5KSB7XG4gIHJldHVybiBuZXcgQ3VzdG9tUmVmSW1wbChmYWN0b3J5KTtcbn1cbmZ1bmN0aW9uIHRvUmVmcyhvYmplY3QpIHtcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgIWlzUHJveHkob2JqZWN0KSkge1xuICAgIHdhcm4oYHRvUmVmcygpIGV4cGVjdHMgYSByZWFjdGl2ZSBvYmplY3QgYnV0IHJlY2VpdmVkIGEgcGxhaW4gb25lLmApO1xuICB9XG4gIGNvbnN0IHJldCA9IGlzQXJyYXkob2JqZWN0KSA/IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKSA6IHt9O1xuICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcbiAgICByZXRba2V5XSA9IHByb3BlcnR5VG9SZWYob2JqZWN0LCBrZXkpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5jbGFzcyBPYmplY3RSZWZJbXBsIHtcbiAgY29uc3RydWN0b3IoX29iamVjdCwgX2tleSwgX2RlZmF1bHRWYWx1ZSkge1xuICAgIHRoaXMuX29iamVjdCA9IF9vYmplY3Q7XG4gICAgdGhpcy5fa2V5ID0gX2tleTtcbiAgICB0aGlzLl9kZWZhdWx0VmFsdWUgPSBfZGVmYXVsdFZhbHVlO1xuICAgIHRoaXNbXCJfX3ZfaXNSZWZcIl0gPSB0cnVlO1xuICAgIHRoaXMuX3ZhbHVlID0gdm9pZCAwO1xuICB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICBjb25zdCB2YWwgPSB0aGlzLl9vYmplY3RbdGhpcy5fa2V5XTtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUgPSB2YWwgPT09IHZvaWQgMCA/IHRoaXMuX2RlZmF1bHRWYWx1ZSA6IHZhbDtcbiAgfVxuICBzZXQgdmFsdWUobmV3VmFsKSB7XG4gICAgdGhpcy5fb2JqZWN0W3RoaXMuX2tleV0gPSBuZXdWYWw7XG4gIH1cbiAgZ2V0IGRlcCgpIHtcbiAgICByZXR1cm4gZ2V0RGVwRnJvbVJlYWN0aXZlKHRvUmF3KHRoaXMuX29iamVjdCksIHRoaXMuX2tleSk7XG4gIH1cbn1cbmNsYXNzIEdldHRlclJlZkltcGwge1xuICBjb25zdHJ1Y3RvcihfZ2V0dGVyKSB7XG4gICAgdGhpcy5fZ2V0dGVyID0gX2dldHRlcjtcbiAgICB0aGlzW1wiX192X2lzUmVmXCJdID0gdHJ1ZTtcbiAgICB0aGlzW1wiX192X2lzUmVhZG9ubHlcIl0gPSB0cnVlO1xuICAgIHRoaXMuX3ZhbHVlID0gdm9pZCAwO1xuICB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUgPSB0aGlzLl9nZXR0ZXIoKTtcbiAgfVxufVxuZnVuY3Rpb24gdG9SZWYoc291cmNlLCBrZXksIGRlZmF1bHRWYWx1ZSkge1xuICBpZiAoaXNSZWYoc291cmNlKSkge1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihzb3VyY2UpKSB7XG4gICAgcmV0dXJuIG5ldyBHZXR0ZXJSZWZJbXBsKHNvdXJjZSk7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3Qoc291cmNlKSAmJiBhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgIHJldHVybiBwcm9wZXJ0eVRvUmVmKHNvdXJjZSwga2V5LCBkZWZhdWx0VmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZWYoc291cmNlKTtcbiAgfVxufVxuZnVuY3Rpb24gcHJvcGVydHlUb1JlZihzb3VyY2UsIGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gIGNvbnN0IHZhbCA9IHNvdXJjZVtrZXldO1xuICByZXR1cm4gaXNSZWYodmFsKSA/IHZhbCA6IG5ldyBPYmplY3RSZWZJbXBsKHNvdXJjZSwga2V5LCBkZWZhdWx0VmFsdWUpO1xufVxuXG5jbGFzcyBDb21wdXRlZFJlZkltcGwge1xuICBjb25zdHJ1Y3Rvcihmbiwgc2V0dGVyLCBpc1NTUikge1xuICAgIHRoaXMuZm4gPSBmbjtcbiAgICB0aGlzLnNldHRlciA9IHNldHRlcjtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB0aGlzLl92YWx1ZSA9IHZvaWQgMDtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB0aGlzLmRlcCA9IG5ldyBEZXAodGhpcyk7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5fX3ZfaXNSZWYgPSB0cnVlO1xuICAgIC8vIFRPRE8gaXNvbGF0ZWREZWNsYXJhdGlvbnMgXCJfX3ZfaXNSZWFkb25seVwiXG4gICAgLy8gQSBjb21wdXRlZCBpcyBhbHNvIGEgc3Vic2NyaWJlciB0aGF0IHRyYWNrcyBvdGhlciBkZXBzXG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5kZXBzID0gdm9pZCAwO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMuZGVwc1RhaWwgPSB2b2lkIDA7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5mbGFncyA9IDE2O1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMuZ2xvYmFsVmVyc2lvbiA9IGdsb2JhbFZlcnNpb24gLSAxO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMubmV4dCA9IHZvaWQgMDtcbiAgICAvLyBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICAgIHRoaXMuZWZmZWN0ID0gdGhpcztcbiAgICB0aGlzW1wiX192X2lzUmVhZG9ubHlcIl0gPSAhc2V0dGVyO1xuICAgIHRoaXMuaXNTU1IgPSBpc1NTUjtcbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBub3RpZnkoKSB7XG4gICAgdGhpcy5mbGFncyB8PSAxNjtcbiAgICBpZiAoISh0aGlzLmZsYWdzICYgOCkgJiYgLy8gYXZvaWQgaW5maW5pdGUgc2VsZiByZWN1cnNpb25cbiAgICBhY3RpdmVTdWIgIT09IHRoaXMpIHtcbiAgICAgIGJhdGNoKHRoaXMsIHRydWUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSA7XG4gIH1cbiAgZ2V0IHZhbHVlKCkge1xuICAgIGNvbnN0IGxpbmsgPSAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpID8gdGhpcy5kZXAudHJhY2soe1xuICAgICAgdGFyZ2V0OiB0aGlzLFxuICAgICAgdHlwZTogXCJnZXRcIixcbiAgICAgIGtleTogXCJ2YWx1ZVwiXG4gICAgfSkgOiB0aGlzLmRlcC50cmFjaygpO1xuICAgIHJlZnJlc2hDb21wdXRlZCh0aGlzKTtcbiAgICBpZiAobGluaykge1xuICAgICAgbGluay52ZXJzaW9uID0gdGhpcy5kZXAudmVyc2lvbjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG4gIHNldCB2YWx1ZShuZXdWYWx1ZSkge1xuICAgIGlmICh0aGlzLnNldHRlcikge1xuICAgICAgdGhpcy5zZXR0ZXIobmV3VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgd2FybihcIldyaXRlIG9wZXJhdGlvbiBmYWlsZWQ6IGNvbXB1dGVkIHZhbHVlIGlzIHJlYWRvbmx5XCIpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gY29tcHV0ZWQoZ2V0dGVyT3JPcHRpb25zLCBkZWJ1Z09wdGlvbnMsIGlzU1NSID0gZmFsc2UpIHtcbiAgbGV0IGdldHRlcjtcbiAgbGV0IHNldHRlcjtcbiAgaWYgKGlzRnVuY3Rpb24oZ2V0dGVyT3JPcHRpb25zKSkge1xuICAgIGdldHRlciA9IGdldHRlck9yT3B0aW9ucztcbiAgfSBlbHNlIHtcbiAgICBnZXR0ZXIgPSBnZXR0ZXJPck9wdGlvbnMuZ2V0O1xuICAgIHNldHRlciA9IGdldHRlck9yT3B0aW9ucy5zZXQ7XG4gIH1cbiAgY29uc3QgY1JlZiA9IG5ldyBDb21wdXRlZFJlZkltcGwoZ2V0dGVyLCBzZXR0ZXIsIGlzU1NSKTtcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgZGVidWdPcHRpb25zICYmICFpc1NTUikge1xuICAgIGNSZWYub25UcmFjayA9IGRlYnVnT3B0aW9ucy5vblRyYWNrO1xuICAgIGNSZWYub25UcmlnZ2VyID0gZGVidWdPcHRpb25zLm9uVHJpZ2dlcjtcbiAgfVxuICByZXR1cm4gY1JlZjtcbn1cblxuY29uc3QgVHJhY2tPcFR5cGVzID0ge1xuICBcIkdFVFwiOiBcImdldFwiLFxuICBcIkhBU1wiOiBcImhhc1wiLFxuICBcIklURVJBVEVcIjogXCJpdGVyYXRlXCJcbn07XG5jb25zdCBUcmlnZ2VyT3BUeXBlcyA9IHtcbiAgXCJTRVRcIjogXCJzZXRcIixcbiAgXCJBRERcIjogXCJhZGRcIixcbiAgXCJERUxFVEVcIjogXCJkZWxldGVcIixcbiAgXCJDTEVBUlwiOiBcImNsZWFyXCJcbn07XG5jb25zdCBSZWFjdGl2ZUZsYWdzID0ge1xuICBcIlNLSVBcIjogXCJfX3Zfc2tpcFwiLFxuICBcIklTX1JFQUNUSVZFXCI6IFwiX192X2lzUmVhY3RpdmVcIixcbiAgXCJJU19SRUFET05MWVwiOiBcIl9fdl9pc1JlYWRvbmx5XCIsXG4gIFwiSVNfU0hBTExPV1wiOiBcIl9fdl9pc1NoYWxsb3dcIixcbiAgXCJSQVdcIjogXCJfX3ZfcmF3XCIsXG4gIFwiSVNfUkVGXCI6IFwiX192X2lzUmVmXCJcbn07XG5cbmNvbnN0IFdhdGNoRXJyb3JDb2RlcyA9IHtcbiAgXCJXQVRDSF9HRVRURVJcIjogMixcbiAgXCIyXCI6IFwiV0FUQ0hfR0VUVEVSXCIsXG4gIFwiV0FUQ0hfQ0FMTEJBQ0tcIjogMyxcbiAgXCIzXCI6IFwiV0FUQ0hfQ0FMTEJBQ0tcIixcbiAgXCJXQVRDSF9DTEVBTlVQXCI6IDQsXG4gIFwiNFwiOiBcIldBVENIX0NMRUFOVVBcIlxufTtcbmNvbnN0IElOSVRJQUxfV0FUQ0hFUl9WQUxVRSA9IHt9O1xuY29uc3QgY2xlYW51cE1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xubGV0IGFjdGl2ZVdhdGNoZXIgPSB2b2lkIDA7XG5mdW5jdGlvbiBnZXRDdXJyZW50V2F0Y2hlcigpIHtcbiAgcmV0dXJuIGFjdGl2ZVdhdGNoZXI7XG59XG5mdW5jdGlvbiBvbldhdGNoZXJDbGVhbnVwKGNsZWFudXBGbiwgZmFpbFNpbGVudGx5ID0gZmFsc2UsIG93bmVyID0gYWN0aXZlV2F0Y2hlcikge1xuICBpZiAob3duZXIpIHtcbiAgICBsZXQgY2xlYW51cHMgPSBjbGVhbnVwTWFwLmdldChvd25lcik7XG4gICAgaWYgKCFjbGVhbnVwcykgY2xlYW51cE1hcC5zZXQob3duZXIsIGNsZWFudXBzID0gW10pO1xuICAgIGNsZWFudXBzLnB1c2goY2xlYW51cEZuKTtcbiAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFmYWlsU2lsZW50bHkpIHtcbiAgICB3YXJuKFxuICAgICAgYG9uV2F0Y2hlckNsZWFudXAoKSB3YXMgY2FsbGVkIHdoZW4gdGhlcmUgd2FzIG5vIGFjdGl2ZSB3YXRjaGVyIHRvIGFzc29jaWF0ZSB3aXRoLmBcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiB3YXRjaChzb3VyY2UsIGNiLCBvcHRpb25zID0gRU1QVFlfT0JKKSB7XG4gIGNvbnN0IHsgaW1tZWRpYXRlLCBkZWVwLCBvbmNlLCBzY2hlZHVsZXIsIGF1Z21lbnRKb2IsIGNhbGwgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHdhcm5JbnZhbGlkU291cmNlID0gKHMpID0+IHtcbiAgICAob3B0aW9ucy5vbldhcm4gfHwgd2FybikoXG4gICAgICBgSW52YWxpZCB3YXRjaCBzb3VyY2U6IGAsXG4gICAgICBzLFxuICAgICAgYEEgd2F0Y2ggc291cmNlIGNhbiBvbmx5IGJlIGEgZ2V0dGVyL2VmZmVjdCBmdW5jdGlvbiwgYSByZWYsIGEgcmVhY3RpdmUgb2JqZWN0LCBvciBhbiBhcnJheSBvZiB0aGVzZSB0eXBlcy5gXG4gICAgKTtcbiAgfTtcbiAgY29uc3QgcmVhY3RpdmVHZXR0ZXIgPSAoc291cmNlMikgPT4ge1xuICAgIGlmIChkZWVwKSByZXR1cm4gc291cmNlMjtcbiAgICBpZiAoaXNTaGFsbG93KHNvdXJjZTIpIHx8IGRlZXAgPT09IGZhbHNlIHx8IGRlZXAgPT09IDApXG4gICAgICByZXR1cm4gdHJhdmVyc2Uoc291cmNlMiwgMSk7XG4gICAgcmV0dXJuIHRyYXZlcnNlKHNvdXJjZTIpO1xuICB9O1xuICBsZXQgZWZmZWN0O1xuICBsZXQgZ2V0dGVyO1xuICBsZXQgY2xlYW51cDtcbiAgbGV0IGJvdW5kQ2xlYW51cDtcbiAgbGV0IGZvcmNlVHJpZ2dlciA9IGZhbHNlO1xuICBsZXQgaXNNdWx0aVNvdXJjZSA9IGZhbHNlO1xuICBpZiAoaXNSZWYoc291cmNlKSkge1xuICAgIGdldHRlciA9ICgpID0+IHNvdXJjZS52YWx1ZTtcbiAgICBmb3JjZVRyaWdnZXIgPSBpc1NoYWxsb3coc291cmNlKTtcbiAgfSBlbHNlIGlmIChpc1JlYWN0aXZlKHNvdXJjZSkpIHtcbiAgICBnZXR0ZXIgPSAoKSA9PiByZWFjdGl2ZUdldHRlcihzb3VyY2UpO1xuICAgIGZvcmNlVHJpZ2dlciA9IHRydWU7XG4gIH0gZWxzZSBpZiAoaXNBcnJheShzb3VyY2UpKSB7XG4gICAgaXNNdWx0aVNvdXJjZSA9IHRydWU7XG4gICAgZm9yY2VUcmlnZ2VyID0gc291cmNlLnNvbWUoKHMpID0+IGlzUmVhY3RpdmUocykgfHwgaXNTaGFsbG93KHMpKTtcbiAgICBnZXR0ZXIgPSAoKSA9PiBzb3VyY2UubWFwKChzKSA9PiB7XG4gICAgICBpZiAoaXNSZWYocykpIHtcbiAgICAgICAgcmV0dXJuIHMudmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKGlzUmVhY3RpdmUocykpIHtcbiAgICAgICAgcmV0dXJuIHJlYWN0aXZlR2V0dGVyKHMpO1xuICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHMpKSB7XG4gICAgICAgIHJldHVybiBjYWxsID8gY2FsbChzLCAyKSA6IHMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgd2FybkludmFsaWRTb3VyY2Uocyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihzb3VyY2UpKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBnZXR0ZXIgPSBjYWxsID8gKCkgPT4gY2FsbChzb3VyY2UsIDIpIDogc291cmNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZXR0ZXIgPSAoKSA9PiB7XG4gICAgICAgIGlmIChjbGVhbnVwKSB7XG4gICAgICAgICAgcGF1c2VUcmFja2luZygpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3VycmVudEVmZmVjdCA9IGFjdGl2ZVdhdGNoZXI7XG4gICAgICAgIGFjdGl2ZVdhdGNoZXIgPSBlZmZlY3Q7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGwgPyBjYWxsKHNvdXJjZSwgMywgW2JvdW5kQ2xlYW51cF0pIDogc291cmNlKGJvdW5kQ2xlYW51cCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgYWN0aXZlV2F0Y2hlciA9IGN1cnJlbnRFZmZlY3Q7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGdldHRlciA9IE5PT1A7XG4gICAgISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiB3YXJuSW52YWxpZFNvdXJjZShzb3VyY2UpO1xuICB9XG4gIGlmIChjYiAmJiBkZWVwKSB7XG4gICAgY29uc3QgYmFzZUdldHRlciA9IGdldHRlcjtcbiAgICBjb25zdCBkZXB0aCA9IGRlZXAgPT09IHRydWUgPyBJbmZpbml0eSA6IGRlZXA7XG4gICAgZ2V0dGVyID0gKCkgPT4gdHJhdmVyc2UoYmFzZUdldHRlcigpLCBkZXB0aCk7XG4gIH1cbiAgY29uc3Qgc2NvcGUgPSBnZXRDdXJyZW50U2NvcGUoKTtcbiAgY29uc3Qgd2F0Y2hIYW5kbGUgPSAoKSA9PiB7XG4gICAgZWZmZWN0LnN0b3AoKTtcbiAgICBpZiAoc2NvcGUgJiYgc2NvcGUuYWN0aXZlKSB7XG4gICAgICByZW1vdmUoc2NvcGUuZWZmZWN0cywgZWZmZWN0KTtcbiAgICB9XG4gIH07XG4gIGlmIChvbmNlICYmIGNiKSB7XG4gICAgY29uc3QgX2NiID0gY2I7XG4gICAgY2IgPSAoLi4uYXJncykgPT4ge1xuICAgICAgX2NiKC4uLmFyZ3MpO1xuICAgICAgd2F0Y2hIYW5kbGUoKTtcbiAgICB9O1xuICB9XG4gIGxldCBvbGRWYWx1ZSA9IGlzTXVsdGlTb3VyY2UgPyBuZXcgQXJyYXkoc291cmNlLmxlbmd0aCkuZmlsbChJTklUSUFMX1dBVENIRVJfVkFMVUUpIDogSU5JVElBTF9XQVRDSEVSX1ZBTFVFO1xuICBjb25zdCBqb2IgPSAoaW1tZWRpYXRlRmlyc3RSdW4pID0+IHtcbiAgICBpZiAoIShlZmZlY3QuZmxhZ3MgJiAxKSB8fCAhZWZmZWN0LmRpcnR5ICYmICFpbW1lZGlhdGVGaXJzdFJ1bikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2IpIHtcbiAgICAgIGNvbnN0IG5ld1ZhbHVlID0gZWZmZWN0LnJ1bigpO1xuICAgICAgaWYgKGRlZXAgfHwgZm9yY2VUcmlnZ2VyIHx8IChpc011bHRpU291cmNlID8gbmV3VmFsdWUuc29tZSgodiwgaSkgPT4gaGFzQ2hhbmdlZCh2LCBvbGRWYWx1ZVtpXSkpIDogaGFzQ2hhbmdlZChuZXdWYWx1ZSwgb2xkVmFsdWUpKSkge1xuICAgICAgICBpZiAoY2xlYW51cCkge1xuICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjdXJyZW50V2F0Y2hlciA9IGFjdGl2ZVdhdGNoZXI7XG4gICAgICAgIGFjdGl2ZVdhdGNoZXIgPSBlZmZlY3Q7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgYXJncyA9IFtcbiAgICAgICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICAgICAgLy8gcGFzcyB1bmRlZmluZWQgYXMgdGhlIG9sZCB2YWx1ZSB3aGVuIGl0J3MgY2hhbmdlZCBmb3IgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgICAgIG9sZFZhbHVlID09PSBJTklUSUFMX1dBVENIRVJfVkFMVUUgPyB2b2lkIDAgOiBpc011bHRpU291cmNlICYmIG9sZFZhbHVlWzBdID09PSBJTklUSUFMX1dBVENIRVJfVkFMVUUgPyBbXSA6IG9sZFZhbHVlLFxuICAgICAgICAgICAgYm91bmRDbGVhbnVwXG4gICAgICAgICAgXTtcbiAgICAgICAgICBvbGRWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgIGNhbGwgPyBjYWxsKGNiLCAzLCBhcmdzKSA6IChcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIGNiKC4uLmFyZ3MpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBhY3RpdmVXYXRjaGVyID0gY3VycmVudFdhdGNoZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWZmZWN0LnJ1bigpO1xuICAgIH1cbiAgfTtcbiAgaWYgKGF1Z21lbnRKb2IpIHtcbiAgICBhdWdtZW50Sm9iKGpvYik7XG4gIH1cbiAgZWZmZWN0ID0gbmV3IFJlYWN0aXZlRWZmZWN0KGdldHRlcik7XG4gIGVmZmVjdC5zY2hlZHVsZXIgPSBzY2hlZHVsZXIgPyAoKSA9PiBzY2hlZHVsZXIoam9iLCBmYWxzZSkgOiBqb2I7XG4gIGJvdW5kQ2xlYW51cCA9IChmbikgPT4gb25XYXRjaGVyQ2xlYW51cChmbiwgZmFsc2UsIGVmZmVjdCk7XG4gIGNsZWFudXAgPSBlZmZlY3Qub25TdG9wID0gKCkgPT4ge1xuICAgIGNvbnN0IGNsZWFudXBzID0gY2xlYW51cE1hcC5nZXQoZWZmZWN0KTtcbiAgICBpZiAoY2xlYW51cHMpIHtcbiAgICAgIGlmIChjYWxsKSB7XG4gICAgICAgIGNhbGwoY2xlYW51cHMsIDQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChjb25zdCBjbGVhbnVwMiBvZiBjbGVhbnVwcykgY2xlYW51cDIoKTtcbiAgICAgIH1cbiAgICAgIGNsZWFudXBNYXAuZGVsZXRlKGVmZmVjdCk7XG4gICAgfVxuICB9O1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIGVmZmVjdC5vblRyYWNrID0gb3B0aW9ucy5vblRyYWNrO1xuICAgIGVmZmVjdC5vblRyaWdnZXIgPSBvcHRpb25zLm9uVHJpZ2dlcjtcbiAgfVxuICBpZiAoY2IpIHtcbiAgICBpZiAoaW1tZWRpYXRlKSB7XG4gICAgICBqb2IodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9sZFZhbHVlID0gZWZmZWN0LnJ1bigpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChzY2hlZHVsZXIpIHtcbiAgICBzY2hlZHVsZXIoam9iLmJpbmQobnVsbCwgdHJ1ZSksIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGVmZmVjdC5ydW4oKTtcbiAgfVxuICB3YXRjaEhhbmRsZS5wYXVzZSA9IGVmZmVjdC5wYXVzZS5iaW5kKGVmZmVjdCk7XG4gIHdhdGNoSGFuZGxlLnJlc3VtZSA9IGVmZmVjdC5yZXN1bWUuYmluZChlZmZlY3QpO1xuICB3YXRjaEhhbmRsZS5zdG9wID0gd2F0Y2hIYW5kbGU7XG4gIHJldHVybiB3YXRjaEhhbmRsZTtcbn1cbmZ1bmN0aW9uIHRyYXZlcnNlKHZhbHVlLCBkZXB0aCA9IEluZmluaXR5LCBzZWVuKSB7XG4gIGlmIChkZXB0aCA8PSAwIHx8ICFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWVbXCJfX3Zfc2tpcFwiXSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBzZWVuID0gc2VlbiB8fCAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBpZiAoKHNlZW4uZ2V0KHZhbHVlKSB8fCAwKSA+PSBkZXB0aCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBzZWVuLnNldCh2YWx1ZSwgZGVwdGgpO1xuICBkZXB0aC0tO1xuICBpZiAoaXNSZWYodmFsdWUpKSB7XG4gICAgdHJhdmVyc2UodmFsdWUudmFsdWUsIGRlcHRoLCBzZWVuKTtcbiAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRyYXZlcnNlKHZhbHVlW2ldLCBkZXB0aCwgc2Vlbik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzU2V0KHZhbHVlKSB8fCBpc01hcCh2YWx1ZSkpIHtcbiAgICB2YWx1ZS5mb3JFYWNoKCh2KSA9PiB7XG4gICAgICB0cmF2ZXJzZSh2LCBkZXB0aCwgc2Vlbik7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZSkge1xuICAgICAgdHJhdmVyc2UodmFsdWVba2V5XSwgZGVwdGgsIHNlZW4pO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHZhbHVlKSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgICB0cmF2ZXJzZSh2YWx1ZVtrZXldLCBkZXB0aCwgc2Vlbik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IHsgQVJSQVlfSVRFUkFURV9LRVksIEVmZmVjdEZsYWdzLCBFZmZlY3RTY29wZSwgSVRFUkFURV9LRVksIE1BUF9LRVlfSVRFUkFURV9LRVksIFJlYWN0aXZlRWZmZWN0LCBSZWFjdGl2ZUZsYWdzLCBUcmFja09wVHlwZXMsIFRyaWdnZXJPcFR5cGVzLCBXYXRjaEVycm9yQ29kZXMsIGNvbXB1dGVkLCBjdXN0b21SZWYsIGVmZmVjdCwgZWZmZWN0U2NvcGUsIGVuYWJsZVRyYWNraW5nLCBnZXRDdXJyZW50U2NvcGUsIGdldEN1cnJlbnRXYXRjaGVyLCBpc1Byb3h5LCBpc1JlYWN0aXZlLCBpc1JlYWRvbmx5LCBpc1JlZiwgaXNTaGFsbG93LCBtYXJrUmF3LCBvbkVmZmVjdENsZWFudXAsIG9uU2NvcGVEaXNwb3NlLCBvbldhdGNoZXJDbGVhbnVwLCBwYXVzZVRyYWNraW5nLCBwcm94eVJlZnMsIHJlYWN0aXZlLCByZWFjdGl2ZVJlYWRBcnJheSwgcmVhZG9ubHksIHJlZiwgcmVzZXRUcmFja2luZywgc2hhbGxvd1JlYWN0aXZlLCBzaGFsbG93UmVhZEFycmF5LCBzaGFsbG93UmVhZG9ubHksIHNoYWxsb3dSZWYsIHN0b3AsIHRvUmF3LCB0b1JlYWN0aXZlLCB0b1JlYWRvbmx5LCB0b1JlZiwgdG9SZWZzLCB0b1ZhbHVlLCB0cmFjaywgdHJhdmVyc2UsIHRyaWdnZXIsIHRyaWdnZXJSZWYsIHVucmVmLCB3YXRjaCB9O1xuIiwiLyoqXG4qIEB2dWUvcnVudGltZS1jb3JlIHYzLjUuMjFcbiogKGMpIDIwMTgtcHJlc2VudCBZdXhpIChFdmFuKSBZb3UgYW5kIFZ1ZSBjb250cmlidXRvcnNcbiogQGxpY2Vuc2UgTUlUXG4qKi9cbmltcG9ydCB7IHBhdXNlVHJhY2tpbmcsIHJlc2V0VHJhY2tpbmcsIGlzUmVmLCB0b1JhdywgdHJhdmVyc2UsIHNoYWxsb3dSZWYsIHJlYWRvbmx5LCBpc1JlYWN0aXZlLCByZWYsIGlzU2hhbGxvdywgaXNSZWFkb25seSwgc2hhbGxvd1JlYWRBcnJheSwgdG9SZWFkb25seSwgdG9SZWFjdGl2ZSwgc2hhbGxvd1JlYWRvbmx5LCB0cmFjaywgcmVhY3RpdmUsIHNoYWxsb3dSZWFjdGl2ZSwgdHJpZ2dlciwgUmVhY3RpdmVFZmZlY3QsIHdhdGNoIGFzIHdhdGNoJDEsIGN1c3RvbVJlZiwgaXNQcm94eSwgcHJveHlSZWZzLCBtYXJrUmF3LCBFZmZlY3RTY29wZSwgY29tcHV0ZWQgYXMgY29tcHV0ZWQkMSB9IGZyb20gJ0B2dWUvcmVhY3Rpdml0eSc7XG5leHBvcnQgeyBFZmZlY3RTY29wZSwgUmVhY3RpdmVFZmZlY3QsIFRyYWNrT3BUeXBlcywgVHJpZ2dlck9wVHlwZXMsIGN1c3RvbVJlZiwgZWZmZWN0LCBlZmZlY3RTY29wZSwgZ2V0Q3VycmVudFNjb3BlLCBnZXRDdXJyZW50V2F0Y2hlciwgaXNQcm94eSwgaXNSZWFjdGl2ZSwgaXNSZWFkb25seSwgaXNSZWYsIGlzU2hhbGxvdywgbWFya1Jhdywgb25TY29wZURpc3Bvc2UsIG9uV2F0Y2hlckNsZWFudXAsIHByb3h5UmVmcywgcmVhY3RpdmUsIHJlYWRvbmx5LCByZWYsIHNoYWxsb3dSZWFjdGl2ZSwgc2hhbGxvd1JlYWRvbmx5LCBzaGFsbG93UmVmLCBzdG9wLCB0b1JhdywgdG9SZWYsIHRvUmVmcywgdG9WYWx1ZSwgdHJpZ2dlclJlZiwgdW5yZWYgfSBmcm9tICdAdnVlL3JlYWN0aXZpdHknO1xuaW1wb3J0IHsgaXNTdHJpbmcsIGlzRnVuY3Rpb24sIEVNUFRZX09CSiwgaXNQcm9taXNlLCBpc0FycmF5LCBOT09QLCBnZXRHbG9iYWxUaGlzLCBleHRlbmQsIGlzQnVpbHRJbkRpcmVjdGl2ZSwgTk8sIGhhc093biwgcmVtb3ZlLCBkZWYsIGlzT24sIGlzUmVzZXJ2ZWRQcm9wLCBub3JtYWxpemVDbGFzcywgc3RyaW5naWZ5U3R5bGUsIG5vcm1hbGl6ZVN0eWxlLCBpc0tub3duU3ZnQXR0ciwgaXNCb29sZWFuQXR0ciwgaXNLbm93bkh0bWxBdHRyLCBpbmNsdWRlQm9vbGVhbkF0dHIsIGlzUmVuZGVyYWJsZUF0dHJWYWx1ZSwgbm9ybWFsaXplQ3NzVmFyVmFsdWUsIGdldEVzY2FwZWRDc3NWYXJOYW1lLCBpc09iamVjdCwgaXNSZWdFeHAsIGludm9rZUFycmF5Rm5zLCB0b0hhbmRsZXJLZXksIGNhbWVsaXplLCBjYXBpdGFsaXplLCBpc1N5bWJvbCwgaXNHbG9iYWxseUFsbG93ZWQsIEVNUFRZX0FSUiwgaHlwaGVuYXRlLCBtYWtlTWFwLCB0b1Jhd1R5cGUsIGhhc0NoYW5nZWQsIGxvb3NlVG9OdW1iZXIsIGlzTW9kZWxMaXN0ZW5lciwgdG9OdW1iZXIgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5leHBvcnQgeyBjYW1lbGl6ZSwgY2FwaXRhbGl6ZSwgbm9ybWFsaXplQ2xhc3MsIG5vcm1hbGl6ZVByb3BzLCBub3JtYWxpemVTdHlsZSwgdG9EaXNwbGF5U3RyaW5nLCB0b0hhbmRsZXJLZXkgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmNvbnN0IHN0YWNrID0gW107XG5mdW5jdGlvbiBwdXNoV2FybmluZ0NvbnRleHQodm5vZGUpIHtcbiAgc3RhY2sucHVzaCh2bm9kZSk7XG59XG5mdW5jdGlvbiBwb3BXYXJuaW5nQ29udGV4dCgpIHtcbiAgc3RhY2sucG9wKCk7XG59XG5sZXQgaXNXYXJuaW5nID0gZmFsc2U7XG5mdW5jdGlvbiB3YXJuJDEobXNnLCAuLi5hcmdzKSB7XG4gIGlmIChpc1dhcm5pbmcpIHJldHVybjtcbiAgaXNXYXJuaW5nID0gdHJ1ZTtcbiAgcGF1c2VUcmFja2luZygpO1xuICBjb25zdCBpbnN0YW5jZSA9IHN0YWNrLmxlbmd0aCA/IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdLmNvbXBvbmVudCA6IG51bGw7XG4gIGNvbnN0IGFwcFdhcm5IYW5kbGVyID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcud2FybkhhbmRsZXI7XG4gIGNvbnN0IHRyYWNlID0gZ2V0Q29tcG9uZW50VHJhY2UoKTtcbiAgaWYgKGFwcFdhcm5IYW5kbGVyKSB7XG4gICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKFxuICAgICAgYXBwV2FybkhhbmRsZXIsXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIDExLFxuICAgICAgW1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgbXNnICsgYXJncy5tYXAoKGEpID0+IHtcbiAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSBhLnRvU3RyaW5nKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbChhKSkgIT0gbnVsbCA/IF9iIDogSlNPTi5zdHJpbmdpZnkoYSk7XG4gICAgICAgIH0pLmpvaW4oXCJcIiksXG4gICAgICAgIGluc3RhbmNlICYmIGluc3RhbmNlLnByb3h5LFxuICAgICAgICB0cmFjZS5tYXAoXG4gICAgICAgICAgKHsgdm5vZGUgfSkgPT4gYGF0IDwke2Zvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIHZub2RlLnR5cGUpfT5gXG4gICAgICAgICkuam9pbihcIlxcblwiKSxcbiAgICAgICAgdHJhY2VcbiAgICAgIF1cbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHdhcm5BcmdzID0gW2BbVnVlIHdhcm5dOiAke21zZ31gLCAuLi5hcmdzXTtcbiAgICBpZiAodHJhY2UubGVuZ3RoICYmIC8vIGF2b2lkIHNwYW1taW5nIGNvbnNvbGUgZHVyaW5nIHRlc3RzXG4gICAgdHJ1ZSkge1xuICAgICAgd2FybkFyZ3MucHVzaChgXG5gLCAuLi5mb3JtYXRUcmFjZSh0cmFjZSkpO1xuICAgIH1cbiAgICBjb25zb2xlLndhcm4oLi4ud2FybkFyZ3MpO1xuICB9XG4gIHJlc2V0VHJhY2tpbmcoKTtcbiAgaXNXYXJuaW5nID0gZmFsc2U7XG59XG5mdW5jdGlvbiBnZXRDb21wb25lbnRUcmFjZSgpIHtcbiAgbGV0IGN1cnJlbnRWTm9kZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICBpZiAoIWN1cnJlbnRWTm9kZSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCBub3JtYWxpemVkU3RhY2sgPSBbXTtcbiAgd2hpbGUgKGN1cnJlbnRWTm9kZSkge1xuICAgIGNvbnN0IGxhc3QgPSBub3JtYWxpemVkU3RhY2tbMF07XG4gICAgaWYgKGxhc3QgJiYgbGFzdC52bm9kZSA9PT0gY3VycmVudFZOb2RlKSB7XG4gICAgICBsYXN0LnJlY3Vyc2VDb3VudCsrO1xuICAgIH0gZWxzZSB7XG4gICAgICBub3JtYWxpemVkU3RhY2sucHVzaCh7XG4gICAgICAgIHZub2RlOiBjdXJyZW50Vk5vZGUsXG4gICAgICAgIHJlY3Vyc2VDb3VudDogMFxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHBhcmVudEluc3RhbmNlID0gY3VycmVudFZOb2RlLmNvbXBvbmVudCAmJiBjdXJyZW50Vk5vZGUuY29tcG9uZW50LnBhcmVudDtcbiAgICBjdXJyZW50Vk5vZGUgPSBwYXJlbnRJbnN0YW5jZSAmJiBwYXJlbnRJbnN0YW5jZS52bm9kZTtcbiAgfVxuICByZXR1cm4gbm9ybWFsaXplZFN0YWNrO1xufVxuZnVuY3Rpb24gZm9ybWF0VHJhY2UodHJhY2UpIHtcbiAgY29uc3QgbG9ncyA9IFtdO1xuICB0cmFjZS5mb3JFYWNoKChlbnRyeSwgaSkgPT4ge1xuICAgIGxvZ3MucHVzaCguLi5pID09PSAwID8gW10gOiBbYFxuYF0sIC4uLmZvcm1hdFRyYWNlRW50cnkoZW50cnkpKTtcbiAgfSk7XG4gIHJldHVybiBsb2dzO1xufVxuZnVuY3Rpb24gZm9ybWF0VHJhY2VFbnRyeSh7IHZub2RlLCByZWN1cnNlQ291bnQgfSkge1xuICBjb25zdCBwb3N0Zml4ID0gcmVjdXJzZUNvdW50ID4gMCA/IGAuLi4gKCR7cmVjdXJzZUNvdW50fSByZWN1cnNpdmUgY2FsbHMpYCA6IGBgO1xuICBjb25zdCBpc1Jvb3QgPSB2bm9kZS5jb21wb25lbnQgPyB2bm9kZS5jb21wb25lbnQucGFyZW50ID09IG51bGwgOiBmYWxzZTtcbiAgY29uc3Qgb3BlbiA9IGAgYXQgPCR7Zm9ybWF0Q29tcG9uZW50TmFtZShcbiAgICB2bm9kZS5jb21wb25lbnQsXG4gICAgdm5vZGUudHlwZSxcbiAgICBpc1Jvb3RcbiAgKX1gO1xuICBjb25zdCBjbG9zZSA9IGA+YCArIHBvc3RmaXg7XG4gIHJldHVybiB2bm9kZS5wcm9wcyA/IFtvcGVuLCAuLi5mb3JtYXRQcm9wcyh2bm9kZS5wcm9wcyksIGNsb3NlXSA6IFtvcGVuICsgY2xvc2VdO1xufVxuZnVuY3Rpb24gZm9ybWF0UHJvcHMocHJvcHMpIHtcbiAgY29uc3QgcmVzID0gW107XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhwcm9wcyk7XG4gIGtleXMuc2xpY2UoMCwgMykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgcmVzLnB1c2goLi4uZm9ybWF0UHJvcChrZXksIHByb3BzW2tleV0pKTtcbiAgfSk7XG4gIGlmIChrZXlzLmxlbmd0aCA+IDMpIHtcbiAgICByZXMucHVzaChgIC4uLmApO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBmb3JtYXRQcm9wKGtleSwgdmFsdWUsIHJhdykge1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgcmV0dXJuIHJhdyA/IHZhbHVlIDogW2Ake2tleX09JHt2YWx1ZX1gXTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIiB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHJhdyA/IHZhbHVlIDogW2Ake2tleX09JHt2YWx1ZX1gXTtcbiAgfSBlbHNlIGlmIChpc1JlZih2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9IGZvcm1hdFByb3Aoa2V5LCB0b1Jhdyh2YWx1ZS52YWx1ZSksIHRydWUpO1xuICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PVJlZjxgLCB2YWx1ZSwgYD5gXTtcbiAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgIHJldHVybiBbYCR7a2V5fT1mbiR7dmFsdWUubmFtZSA/IGA8JHt2YWx1ZS5uYW1lfT5gIDogYGB9YF07XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSB0b1Jhdyh2YWx1ZSk7XG4gICAgcmV0dXJuIHJhdyA/IHZhbHVlIDogW2Ake2tleX09YCwgdmFsdWVdO1xuICB9XG59XG5mdW5jdGlvbiBhc3NlcnROdW1iZXIodmFsLCB0eXBlKSB7XG4gIGlmICghISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkgcmV0dXJuO1xuICBpZiAodmFsID09PSB2b2lkIDApIHtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCAhPT0gXCJudW1iZXJcIikge1xuICAgIHdhcm4kMShgJHt0eXBlfSBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBnb3QgJHtKU09OLnN0cmluZ2lmeSh2YWwpfS5gKTtcbiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgd2FybiQxKGAke3R5cGV9IGlzIE5hTiAtIHRoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC5gKTtcbiAgfVxufVxuXG5jb25zdCBFcnJvckNvZGVzID0ge1xuICBcIlNFVFVQX0ZVTkNUSU9OXCI6IDAsXG4gIFwiMFwiOiBcIlNFVFVQX0ZVTkNUSU9OXCIsXG4gIFwiUkVOREVSX0ZVTkNUSU9OXCI6IDEsXG4gIFwiMVwiOiBcIlJFTkRFUl9GVU5DVElPTlwiLFxuICBcIk5BVElWRV9FVkVOVF9IQU5ETEVSXCI6IDUsXG4gIFwiNVwiOiBcIk5BVElWRV9FVkVOVF9IQU5ETEVSXCIsXG4gIFwiQ09NUE9ORU5UX0VWRU5UX0hBTkRMRVJcIjogNixcbiAgXCI2XCI6IFwiQ09NUE9ORU5UX0VWRU5UX0hBTkRMRVJcIixcbiAgXCJWTk9ERV9IT09LXCI6IDcsXG4gIFwiN1wiOiBcIlZOT0RFX0hPT0tcIixcbiAgXCJESVJFQ1RJVkVfSE9PS1wiOiA4LFxuICBcIjhcIjogXCJESVJFQ1RJVkVfSE9PS1wiLFxuICBcIlRSQU5TSVRJT05fSE9PS1wiOiA5LFxuICBcIjlcIjogXCJUUkFOU0lUSU9OX0hPT0tcIixcbiAgXCJBUFBfRVJST1JfSEFORExFUlwiOiAxMCxcbiAgXCIxMFwiOiBcIkFQUF9FUlJPUl9IQU5ETEVSXCIsXG4gIFwiQVBQX1dBUk5fSEFORExFUlwiOiAxMSxcbiAgXCIxMVwiOiBcIkFQUF9XQVJOX0hBTkRMRVJcIixcbiAgXCJGVU5DVElPTl9SRUZcIjogMTIsXG4gIFwiMTJcIjogXCJGVU5DVElPTl9SRUZcIixcbiAgXCJBU1lOQ19DT01QT05FTlRfTE9BREVSXCI6IDEzLFxuICBcIjEzXCI6IFwiQVNZTkNfQ09NUE9ORU5UX0xPQURFUlwiLFxuICBcIlNDSEVEVUxFUlwiOiAxNCxcbiAgXCIxNFwiOiBcIlNDSEVEVUxFUlwiLFxuICBcIkNPTVBPTkVOVF9VUERBVEVcIjogMTUsXG4gIFwiMTVcIjogXCJDT01QT05FTlRfVVBEQVRFXCIsXG4gIFwiQVBQX1VOTU9VTlRfQ0xFQU5VUFwiOiAxNixcbiAgXCIxNlwiOiBcIkFQUF9VTk1PVU5UX0NMRUFOVVBcIlxufTtcbmNvbnN0IEVycm9yVHlwZVN0cmluZ3MkMSA9IHtcbiAgW1wic3BcIl06IFwic2VydmVyUHJlZmV0Y2ggaG9va1wiLFxuICBbXCJiY1wiXTogXCJiZWZvcmVDcmVhdGUgaG9va1wiLFxuICBbXCJjXCJdOiBcImNyZWF0ZWQgaG9va1wiLFxuICBbXCJibVwiXTogXCJiZWZvcmVNb3VudCBob29rXCIsXG4gIFtcIm1cIl06IFwibW91bnRlZCBob29rXCIsXG4gIFtcImJ1XCJdOiBcImJlZm9yZVVwZGF0ZSBob29rXCIsXG4gIFtcInVcIl06IFwidXBkYXRlZFwiLFxuICBbXCJidW1cIl06IFwiYmVmb3JlVW5tb3VudCBob29rXCIsXG4gIFtcInVtXCJdOiBcInVubW91bnRlZCBob29rXCIsXG4gIFtcImFcIl06IFwiYWN0aXZhdGVkIGhvb2tcIixcbiAgW1wiZGFcIl06IFwiZGVhY3RpdmF0ZWQgaG9va1wiLFxuICBbXCJlY1wiXTogXCJlcnJvckNhcHR1cmVkIGhvb2tcIixcbiAgW1wicnRjXCJdOiBcInJlbmRlclRyYWNrZWQgaG9va1wiLFxuICBbXCJydGdcIl06IFwicmVuZGVyVHJpZ2dlcmVkIGhvb2tcIixcbiAgWzBdOiBcInNldHVwIGZ1bmN0aW9uXCIsXG4gIFsxXTogXCJyZW5kZXIgZnVuY3Rpb25cIixcbiAgWzJdOiBcIndhdGNoZXIgZ2V0dGVyXCIsXG4gIFszXTogXCJ3YXRjaGVyIGNhbGxiYWNrXCIsXG4gIFs0XTogXCJ3YXRjaGVyIGNsZWFudXAgZnVuY3Rpb25cIixcbiAgWzVdOiBcIm5hdGl2ZSBldmVudCBoYW5kbGVyXCIsXG4gIFs2XTogXCJjb21wb25lbnQgZXZlbnQgaGFuZGxlclwiLFxuICBbN106IFwidm5vZGUgaG9va1wiLFxuICBbOF06IFwiZGlyZWN0aXZlIGhvb2tcIixcbiAgWzldOiBcInRyYW5zaXRpb24gaG9va1wiLFxuICBbMTBdOiBcImFwcCBlcnJvckhhbmRsZXJcIixcbiAgWzExXTogXCJhcHAgd2FybkhhbmRsZXJcIixcbiAgWzEyXTogXCJyZWYgZnVuY3Rpb25cIixcbiAgWzEzXTogXCJhc3luYyBjb21wb25lbnQgbG9hZGVyXCIsXG4gIFsxNF06IFwic2NoZWR1bGVyIGZsdXNoXCIsXG4gIFsxNV06IFwiY29tcG9uZW50IHVwZGF0ZVwiLFxuICBbMTZdOiBcImFwcCB1bm1vdW50IGNsZWFudXAgZnVuY3Rpb25cIlxufTtcbmZ1bmN0aW9uIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhmbiwgaW5zdGFuY2UsIHR5cGUsIGFyZ3MpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYXJncyA/IGZuKC4uLmFyZ3MpIDogZm4oKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgdHlwZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgdHlwZSwgYXJncykge1xuICBpZiAoaXNGdW5jdGlvbihmbikpIHtcbiAgICBjb25zdCByZXMgPSBjYWxsV2l0aEVycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCB0eXBlLCBhcmdzKTtcbiAgICBpZiAocmVzICYmIGlzUHJvbWlzZShyZXMpKSB7XG4gICAgICByZXMuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCB0eXBlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIGlmIChpc0FycmF5KGZuKSkge1xuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlcy5wdXNoKGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGZuW2ldLCBpbnN0YW5jZSwgdHlwZSwgYXJncykpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICB3YXJuJDEoXG4gICAgICBgSW52YWxpZCB2YWx1ZSB0eXBlIHBhc3NlZCB0byBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZygpOiAke3R5cGVvZiBmbn1gXG4gICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgdHlwZSwgdGhyb3dJbkRldiA9IHRydWUpIHtcbiAgY29uc3QgY29udGV4dFZOb2RlID0gaW5zdGFuY2UgPyBpbnN0YW5jZS52bm9kZSA6IG51bGw7XG4gIGNvbnN0IHsgZXJyb3JIYW5kbGVyLCB0aHJvd1VuaGFuZGxlZEVycm9ySW5Qcm9kdWN0aW9uIH0gPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZyB8fCBFTVBUWV9PQko7XG4gIGlmIChpbnN0YW5jZSkge1xuICAgIGxldCBjdXIgPSBpbnN0YW5jZS5wYXJlbnQ7XG4gICAgY29uc3QgZXhwb3NlZEluc3RhbmNlID0gaW5zdGFuY2UucHJveHk7XG4gICAgY29uc3QgZXJyb3JJbmZvID0gISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSA/IEVycm9yVHlwZVN0cmluZ3MkMVt0eXBlXSA6IGBodHRwczovL3Z1ZWpzLm9yZy9lcnJvci1yZWZlcmVuY2UvI3J1bnRpbWUtJHt0eXBlfWA7XG4gICAgd2hpbGUgKGN1cikge1xuICAgICAgY29uc3QgZXJyb3JDYXB0dXJlZEhvb2tzID0gY3VyLmVjO1xuICAgICAgaWYgKGVycm9yQ2FwdHVyZWRIb29rcykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVycm9yQ2FwdHVyZWRIb29rcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChlcnJvckNhcHR1cmVkSG9va3NbaV0oZXJyLCBleHBvc2VkSW5zdGFuY2UsIGVycm9ySW5mbykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjdXIgPSBjdXIucGFyZW50O1xuICAgIH1cbiAgICBpZiAoZXJyb3JIYW5kbGVyKSB7XG4gICAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgICBjYWxsV2l0aEVycm9ySGFuZGxpbmcoZXJyb3JIYW5kbGVyLCBudWxsLCAxMCwgW1xuICAgICAgICBlcnIsXG4gICAgICAgIGV4cG9zZWRJbnN0YW5jZSxcbiAgICAgICAgZXJyb3JJbmZvXG4gICAgICBdKTtcbiAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgbG9nRXJyb3IoZXJyLCB0eXBlLCBjb250ZXh0Vk5vZGUsIHRocm93SW5EZXYsIHRocm93VW5oYW5kbGVkRXJyb3JJblByb2R1Y3Rpb24pO1xufVxuZnVuY3Rpb24gbG9nRXJyb3IoZXJyLCB0eXBlLCBjb250ZXh0Vk5vZGUsIHRocm93SW5EZXYgPSB0cnVlLCB0aHJvd0luUHJvZCA9IGZhbHNlKSB7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgY29uc3QgaW5mbyA9IEVycm9yVHlwZVN0cmluZ3MkMVt0eXBlXTtcbiAgICBpZiAoY29udGV4dFZOb2RlKSB7XG4gICAgICBwdXNoV2FybmluZ0NvbnRleHQoY29udGV4dFZOb2RlKTtcbiAgICB9XG4gICAgd2FybiQxKGBVbmhhbmRsZWQgZXJyb3Ike2luZm8gPyBgIGR1cmluZyBleGVjdXRpb24gb2YgJHtpbmZvfWAgOiBgYH1gKTtcbiAgICBpZiAoY29udGV4dFZOb2RlKSB7XG4gICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xuICAgIH1cbiAgICBpZiAodGhyb3dJbkRldikge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHRocm93SW5Qcm9kKSB7XG4gICAgdGhyb3cgZXJyO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5jb25zdCBxdWV1ZSA9IFtdO1xubGV0IGZsdXNoSW5kZXggPSAtMTtcbmNvbnN0IHBlbmRpbmdQb3N0Rmx1c2hDYnMgPSBbXTtcbmxldCBhY3RpdmVQb3N0Rmx1c2hDYnMgPSBudWxsO1xubGV0IHBvc3RGbHVzaEluZGV4ID0gMDtcbmNvbnN0IHJlc29sdmVkUHJvbWlzZSA9IC8qIEBfX1BVUkVfXyAqLyBQcm9taXNlLnJlc29sdmUoKTtcbmxldCBjdXJyZW50Rmx1c2hQcm9taXNlID0gbnVsbDtcbmNvbnN0IFJFQ1VSU0lPTl9MSU1JVCA9IDEwMDtcbmZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gIGNvbnN0IHAgPSBjdXJyZW50Rmx1c2hQcm9taXNlIHx8IHJlc29sdmVkUHJvbWlzZTtcbiAgcmV0dXJuIGZuID8gcC50aGVuKHRoaXMgPyBmbi5iaW5kKHRoaXMpIDogZm4pIDogcDtcbn1cbmZ1bmN0aW9uIGZpbmRJbnNlcnRpb25JbmRleChpZCkge1xuICBsZXQgc3RhcnQgPSBmbHVzaEluZGV4ICsgMTtcbiAgbGV0IGVuZCA9IHF1ZXVlLmxlbmd0aDtcbiAgd2hpbGUgKHN0YXJ0IDwgZW5kKSB7XG4gICAgY29uc3QgbWlkZGxlID0gc3RhcnQgKyBlbmQgPj4+IDE7XG4gICAgY29uc3QgbWlkZGxlSm9iID0gcXVldWVbbWlkZGxlXTtcbiAgICBjb25zdCBtaWRkbGVKb2JJZCA9IGdldElkKG1pZGRsZUpvYik7XG4gICAgaWYgKG1pZGRsZUpvYklkIDwgaWQgfHwgbWlkZGxlSm9iSWQgPT09IGlkICYmIG1pZGRsZUpvYi5mbGFncyAmIDIpIHtcbiAgICAgIHN0YXJ0ID0gbWlkZGxlICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW5kID0gbWlkZGxlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RhcnQ7XG59XG5mdW5jdGlvbiBxdWV1ZUpvYihqb2IpIHtcbiAgaWYgKCEoam9iLmZsYWdzICYgMSkpIHtcbiAgICBjb25zdCBqb2JJZCA9IGdldElkKGpvYik7XG4gICAgY29uc3QgbGFzdEpvYiA9IHF1ZXVlW3F1ZXVlLmxlbmd0aCAtIDFdO1xuICAgIGlmICghbGFzdEpvYiB8fCAvLyBmYXN0IHBhdGggd2hlbiB0aGUgam9iIGlkIGlzIGxhcmdlciB0aGFuIHRoZSB0YWlsXG4gICAgIShqb2IuZmxhZ3MgJiAyKSAmJiBqb2JJZCA+PSBnZXRJZChsYXN0Sm9iKSkge1xuICAgICAgcXVldWUucHVzaChqb2IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBxdWV1ZS5zcGxpY2UoZmluZEluc2VydGlvbkluZGV4KGpvYklkKSwgMCwgam9iKTtcbiAgICB9XG4gICAgam9iLmZsYWdzIHw9IDE7XG4gICAgcXVldWVGbHVzaCgpO1xuICB9XG59XG5mdW5jdGlvbiBxdWV1ZUZsdXNoKCkge1xuICBpZiAoIWN1cnJlbnRGbHVzaFByb21pc2UpIHtcbiAgICBjdXJyZW50Rmx1c2hQcm9taXNlID0gcmVzb2x2ZWRQcm9taXNlLnRoZW4oZmx1c2hKb2JzKTtcbiAgfVxufVxuZnVuY3Rpb24gcXVldWVQb3N0Rmx1c2hDYihjYikge1xuICBpZiAoIWlzQXJyYXkoY2IpKSB7XG4gICAgaWYgKGFjdGl2ZVBvc3RGbHVzaENicyAmJiBjYi5pZCA9PT0gLTEpIHtcbiAgICAgIGFjdGl2ZVBvc3RGbHVzaENicy5zcGxpY2UocG9zdEZsdXNoSW5kZXggKyAxLCAwLCBjYik7XG4gICAgfSBlbHNlIGlmICghKGNiLmZsYWdzICYgMSkpIHtcbiAgICAgIHBlbmRpbmdQb3N0Rmx1c2hDYnMucHVzaChjYik7XG4gICAgICBjYi5mbGFncyB8PSAxO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwZW5kaW5nUG9zdEZsdXNoQ2JzLnB1c2goLi4uY2IpO1xuICB9XG4gIHF1ZXVlRmx1c2goKTtcbn1cbmZ1bmN0aW9uIGZsdXNoUHJlRmx1c2hDYnMoaW5zdGFuY2UsIHNlZW4sIGkgPSBmbHVzaEluZGV4ICsgMSkge1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIHNlZW4gPSBzZWVuIHx8IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIH1cbiAgZm9yICg7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNiID0gcXVldWVbaV07XG4gICAgaWYgKGNiICYmIGNiLmZsYWdzICYgMikge1xuICAgICAgaWYgKGluc3RhbmNlICYmIGNiLmlkICE9PSBpbnN0YW5jZS51aWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2VlbiwgY2IpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcXVldWUuc3BsaWNlKGksIDEpO1xuICAgICAgaS0tO1xuICAgICAgaWYgKGNiLmZsYWdzICYgNCkge1xuICAgICAgICBjYi5mbGFncyAmPSAtMjtcbiAgICAgIH1cbiAgICAgIGNiKCk7XG4gICAgICBpZiAoIShjYi5mbGFncyAmIDQpKSB7XG4gICAgICAgIGNiLmZsYWdzICY9IC0yO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZmx1c2hQb3N0Rmx1c2hDYnMoc2Vlbikge1xuICBpZiAocGVuZGluZ1Bvc3RGbHVzaENicy5sZW5ndGgpIHtcbiAgICBjb25zdCBkZWR1cGVkID0gWy4uLm5ldyBTZXQocGVuZGluZ1Bvc3RGbHVzaENicyldLnNvcnQoXG4gICAgICAoYSwgYikgPT4gZ2V0SWQoYSkgLSBnZXRJZChiKVxuICAgICk7XG4gICAgcGVuZGluZ1Bvc3RGbHVzaENicy5sZW5ndGggPSAwO1xuICAgIGlmIChhY3RpdmVQb3N0Rmx1c2hDYnMpIHtcbiAgICAgIGFjdGl2ZVBvc3RGbHVzaENicy5wdXNoKC4uLmRlZHVwZWQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhY3RpdmVQb3N0Rmx1c2hDYnMgPSBkZWR1cGVkO1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICBzZWVuID0gc2VlbiB8fCAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBmb3IgKHBvc3RGbHVzaEluZGV4ID0gMDsgcG9zdEZsdXNoSW5kZXggPCBhY3RpdmVQb3N0Rmx1c2hDYnMubGVuZ3RoOyBwb3N0Rmx1c2hJbmRleCsrKSB7XG4gICAgICBjb25zdCBjYiA9IGFjdGl2ZVBvc3RGbHVzaENic1twb3N0Rmx1c2hJbmRleF07XG4gICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2VlbiwgY2IpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKGNiLmZsYWdzICYgNCkge1xuICAgICAgICBjYi5mbGFncyAmPSAtMjtcbiAgICAgIH1cbiAgICAgIGlmICghKGNiLmZsYWdzICYgOCkpIGNiKCk7XG4gICAgICBjYi5mbGFncyAmPSAtMjtcbiAgICB9XG4gICAgYWN0aXZlUG9zdEZsdXNoQ2JzID0gbnVsbDtcbiAgICBwb3N0Rmx1c2hJbmRleCA9IDA7XG4gIH1cbn1cbmNvbnN0IGdldElkID0gKGpvYikgPT4gam9iLmlkID09IG51bGwgPyBqb2IuZmxhZ3MgJiAyID8gLTEgOiBJbmZpbml0eSA6IGpvYi5pZDtcbmZ1bmN0aW9uIGZsdXNoSm9icyhzZWVuKSB7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgc2VlbiA9IHNlZW4gfHwgLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgfVxuICBjb25zdCBjaGVjayA9ICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyAoam9iKSA9PiBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2Vlbiwgam9iKSA6IE5PT1A7XG4gIHRyeSB7XG4gICAgZm9yIChmbHVzaEluZGV4ID0gMDsgZmx1c2hJbmRleCA8IHF1ZXVlLmxlbmd0aDsgZmx1c2hJbmRleCsrKSB7XG4gICAgICBjb25zdCBqb2IgPSBxdWV1ZVtmbHVzaEluZGV4XTtcbiAgICAgIGlmIChqb2IgJiYgIShqb2IuZmxhZ3MgJiA4KSkge1xuICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBjaGVjayhqb2IpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGpvYi5mbGFncyAmIDQpIHtcbiAgICAgICAgICBqb2IuZmxhZ3MgJj0gfjE7XG4gICAgICAgIH1cbiAgICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKFxuICAgICAgICAgIGpvYixcbiAgICAgICAgICBqb2IuaSxcbiAgICAgICAgICBqb2IuaSA/IDE1IDogMTRcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKCEoam9iLmZsYWdzICYgNCkpIHtcbiAgICAgICAgICBqb2IuZmxhZ3MgJj0gfjE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgZm9yICg7IGZsdXNoSW5kZXggPCBxdWV1ZS5sZW5ndGg7IGZsdXNoSW5kZXgrKykge1xuICAgICAgY29uc3Qgam9iID0gcXVldWVbZmx1c2hJbmRleF07XG4gICAgICBpZiAoam9iKSB7XG4gICAgICAgIGpvYi5mbGFncyAmPSAtMjtcbiAgICAgIH1cbiAgICB9XG4gICAgZmx1c2hJbmRleCA9IC0xO1xuICAgIHF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgZmx1c2hQb3N0Rmx1c2hDYnMoc2Vlbik7XG4gICAgY3VycmVudEZsdXNoUHJvbWlzZSA9IG51bGw7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCB8fCBwZW5kaW5nUG9zdEZsdXNoQ2JzLmxlbmd0aCkge1xuICAgICAgZmx1c2hKb2JzKHNlZW4pO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gY2hlY2tSZWN1cnNpdmVVcGRhdGVzKHNlZW4sIGZuKSB7XG4gIGNvbnN0IGNvdW50ID0gc2Vlbi5nZXQoZm4pIHx8IDA7XG4gIGlmIChjb3VudCA+IFJFQ1VSU0lPTl9MSU1JVCkge1xuICAgIGNvbnN0IGluc3RhbmNlID0gZm4uaTtcbiAgICBjb25zdCBjb21wb25lbnROYW1lID0gaW5zdGFuY2UgJiYgZ2V0Q29tcG9uZW50TmFtZShpbnN0YW5jZS50eXBlKTtcbiAgICBoYW5kbGVFcnJvcihcbiAgICAgIGBNYXhpbXVtIHJlY3Vyc2l2ZSB1cGRhdGVzIGV4Y2VlZGVkJHtjb21wb25lbnROYW1lID8gYCBpbiBjb21wb25lbnQgPCR7Y29tcG9uZW50TmFtZX0+YCA6IGBgfS4gVGhpcyBtZWFucyB5b3UgaGF2ZSBhIHJlYWN0aXZlIGVmZmVjdCB0aGF0IGlzIG11dGF0aW5nIGl0cyBvd24gZGVwZW5kZW5jaWVzIGFuZCB0aHVzIHJlY3Vyc2l2ZWx5IHRyaWdnZXJpbmcgaXRzZWxmLiBQb3NzaWJsZSBzb3VyY2VzIGluY2x1ZGUgY29tcG9uZW50IHRlbXBsYXRlLCByZW5kZXIgZnVuY3Rpb24sIHVwZGF0ZWQgaG9vayBvciB3YXRjaGVyIHNvdXJjZSBmdW5jdGlvbi5gLFxuICAgICAgbnVsbCxcbiAgICAgIDEwXG4gICAgKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBzZWVuLnNldChmbiwgY291bnQgKyAxKTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5sZXQgaXNIbXJVcGRhdGluZyA9IGZhbHNlO1xuY29uc3QgaG1yRGlydHlDb21wb25lbnRzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbmlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gIGNvbnN0IGcgPSBnZXRHbG9iYWxUaGlzKCk7XG4gIGlmICghZy5fX1ZVRV9ITVJfUlVOVElNRV9fKSB7XG4gICAgZy5fX1ZVRV9ITVJfUlVOVElNRV9fID0ge1xuICAgICAgY3JlYXRlUmVjb3JkOiB0cnlXcmFwKGNyZWF0ZVJlY29yZCksXG4gICAgICByZXJlbmRlcjogdHJ5V3JhcChyZXJlbmRlciksXG4gICAgICByZWxvYWQ6IHRyeVdyYXAocmVsb2FkKVxuICAgIH07XG4gIH1cbn1cbmNvbnN0IG1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG5mdW5jdGlvbiByZWdpc3RlckhNUihpbnN0YW5jZSkge1xuICBjb25zdCBpZCA9IGluc3RhbmNlLnR5cGUuX19obXJJZDtcbiAgbGV0IHJlY29yZCA9IG1hcC5nZXQoaWQpO1xuICBpZiAoIXJlY29yZCkge1xuICAgIGNyZWF0ZVJlY29yZChpZCwgaW5zdGFuY2UudHlwZSk7XG4gICAgcmVjb3JkID0gbWFwLmdldChpZCk7XG4gIH1cbiAgcmVjb3JkLmluc3RhbmNlcy5hZGQoaW5zdGFuY2UpO1xufVxuZnVuY3Rpb24gdW5yZWdpc3RlckhNUihpbnN0YW5jZSkge1xuICBtYXAuZ2V0KGluc3RhbmNlLnR5cGUuX19obXJJZCkuaW5zdGFuY2VzLmRlbGV0ZShpbnN0YW5jZSk7XG59XG5mdW5jdGlvbiBjcmVhdGVSZWNvcmQoaWQsIGluaXRpYWxEZWYpIHtcbiAgaWYgKG1hcC5oYXMoaWQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIG1hcC5zZXQoaWQsIHtcbiAgICBpbml0aWFsRGVmOiBub3JtYWxpemVDbGFzc0NvbXBvbmVudChpbml0aWFsRGVmKSxcbiAgICBpbnN0YW5jZXM6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KClcbiAgfSk7XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplQ2xhc3NDb21wb25lbnQoY29tcG9uZW50KSB7XG4gIHJldHVybiBpc0NsYXNzQ29tcG9uZW50KGNvbXBvbmVudCkgPyBjb21wb25lbnQuX192Y2NPcHRzIDogY29tcG9uZW50O1xufVxuZnVuY3Rpb24gcmVyZW5kZXIoaWQsIG5ld1JlbmRlcikge1xuICBjb25zdCByZWNvcmQgPSBtYXAuZ2V0KGlkKTtcbiAgaWYgKCFyZWNvcmQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcmVjb3JkLmluaXRpYWxEZWYucmVuZGVyID0gbmV3UmVuZGVyO1xuICBbLi4ucmVjb3JkLmluc3RhbmNlc10uZm9yRWFjaCgoaW5zdGFuY2UpID0+IHtcbiAgICBpZiAobmV3UmVuZGVyKSB7XG4gICAgICBpbnN0YW5jZS5yZW5kZXIgPSBuZXdSZW5kZXI7XG4gICAgICBub3JtYWxpemVDbGFzc0NvbXBvbmVudChpbnN0YW5jZS50eXBlKS5yZW5kZXIgPSBuZXdSZW5kZXI7XG4gICAgfVxuICAgIGluc3RhbmNlLnJlbmRlckNhY2hlID0gW107XG4gICAgaXNIbXJVcGRhdGluZyA9IHRydWU7XG4gICAgaWYgKCEoaW5zdGFuY2Uuam9iLmZsYWdzICYgOCkpIHtcbiAgICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgIH1cbiAgICBpc0htclVwZGF0aW5nID0gZmFsc2U7XG4gIH0pO1xufVxuZnVuY3Rpb24gcmVsb2FkKGlkLCBuZXdDb21wKSB7XG4gIGNvbnN0IHJlY29yZCA9IG1hcC5nZXQoaWQpO1xuICBpZiAoIXJlY29yZCkgcmV0dXJuO1xuICBuZXdDb21wID0gbm9ybWFsaXplQ2xhc3NDb21wb25lbnQobmV3Q29tcCk7XG4gIHVwZGF0ZUNvbXBvbmVudERlZihyZWNvcmQuaW5pdGlhbERlZiwgbmV3Q29tcCk7XG4gIGNvbnN0IGluc3RhbmNlcyA9IFsuLi5yZWNvcmQuaW5zdGFuY2VzXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGluc3RhbmNlc1tpXTtcbiAgICBjb25zdCBvbGRDb21wID0gbm9ybWFsaXplQ2xhc3NDb21wb25lbnQoaW5zdGFuY2UudHlwZSk7XG4gICAgbGV0IGRpcnR5SW5zdGFuY2VzID0gaG1yRGlydHlDb21wb25lbnRzLmdldChvbGRDb21wKTtcbiAgICBpZiAoIWRpcnR5SW5zdGFuY2VzKSB7XG4gICAgICBpZiAob2xkQ29tcCAhPT0gcmVjb3JkLmluaXRpYWxEZWYpIHtcbiAgICAgICAgdXBkYXRlQ29tcG9uZW50RGVmKG9sZENvbXAsIG5ld0NvbXApO1xuICAgICAgfVxuICAgICAgaG1yRGlydHlDb21wb25lbnRzLnNldChvbGRDb21wLCBkaXJ0eUluc3RhbmNlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCkpO1xuICAgIH1cbiAgICBkaXJ0eUluc3RhbmNlcy5hZGQoaW5zdGFuY2UpO1xuICAgIGluc3RhbmNlLmFwcENvbnRleHQucHJvcHNDYWNoZS5kZWxldGUoaW5zdGFuY2UudHlwZSk7XG4gICAgaW5zdGFuY2UuYXBwQ29udGV4dC5lbWl0c0NhY2hlLmRlbGV0ZShpbnN0YW5jZS50eXBlKTtcbiAgICBpbnN0YW5jZS5hcHBDb250ZXh0Lm9wdGlvbnNDYWNoZS5kZWxldGUoaW5zdGFuY2UudHlwZSk7XG4gICAgaWYgKGluc3RhbmNlLmNlUmVsb2FkKSB7XG4gICAgICBkaXJ0eUluc3RhbmNlcy5hZGQoaW5zdGFuY2UpO1xuICAgICAgaW5zdGFuY2UuY2VSZWxvYWQobmV3Q29tcC5zdHlsZXMpO1xuICAgICAgZGlydHlJbnN0YW5jZXMuZGVsZXRlKGluc3RhbmNlKTtcbiAgICB9IGVsc2UgaWYgKGluc3RhbmNlLnBhcmVudCkge1xuICAgICAgcXVldWVKb2IoKCkgPT4ge1xuICAgICAgICBpZiAoIShpbnN0YW5jZS5qb2IuZmxhZ3MgJiA4KSkge1xuICAgICAgICAgIGlzSG1yVXBkYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIGluc3RhbmNlLnBhcmVudC51cGRhdGUoKTtcbiAgICAgICAgICBpc0htclVwZGF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgZGlydHlJbnN0YW5jZXMuZGVsZXRlKGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChpbnN0YW5jZS5hcHBDb250ZXh0LnJlbG9hZCkge1xuICAgICAgaW5zdGFuY2UuYXBwQ29udGV4dC5yZWxvYWQoKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBcIltITVJdIFJvb3Qgb3IgbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSBtb2RpZmllZC4gRnVsbCByZWxvYWQgcmVxdWlyZWQuXCJcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChpbnN0YW5jZS5yb290LmNlICYmIGluc3RhbmNlICE9PSBpbnN0YW5jZS5yb290KSB7XG4gICAgICBpbnN0YW5jZS5yb290LmNlLl9yZW1vdmVDaGlsZFN0eWxlKG9sZENvbXApO1xuICAgIH1cbiAgfVxuICBxdWV1ZVBvc3RGbHVzaENiKCgpID0+IHtcbiAgICBobXJEaXJ0eUNvbXBvbmVudHMuY2xlYXIoKTtcbiAgfSk7XG59XG5mdW5jdGlvbiB1cGRhdGVDb21wb25lbnREZWYob2xkQ29tcCwgbmV3Q29tcCkge1xuICBleHRlbmQob2xkQ29tcCwgbmV3Q29tcCk7XG4gIGZvciAoY29uc3Qga2V5IGluIG9sZENvbXApIHtcbiAgICBpZiAoa2V5ICE9PSBcIl9fZmlsZVwiICYmICEoa2V5IGluIG5ld0NvbXApKSB7XG4gICAgICBkZWxldGUgb2xkQ29tcFtrZXldO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gdHJ5V3JhcChmbikge1xuICByZXR1cm4gKGlkLCBhcmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZuKGlkLCBhcmcpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBbSE1SXSBTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgVnVlIGNvbXBvbmVudCBob3QtcmVsb2FkLiBGdWxsIHJlbG9hZCByZXF1aXJlZC5gXG4gICAgICApO1xuICAgIH1cbiAgfTtcbn1cblxubGV0IGRldnRvb2xzJDE7XG5sZXQgYnVmZmVyID0gW107XG5sZXQgZGV2dG9vbHNOb3RJbnN0YWxsZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIGVtaXQkMShldmVudCwgLi4uYXJncykge1xuICBpZiAoZGV2dG9vbHMkMSkge1xuICAgIGRldnRvb2xzJDEuZW1pdChldmVudCwgLi4uYXJncyk7XG4gIH0gZWxzZSBpZiAoIWRldnRvb2xzTm90SW5zdGFsbGVkKSB7XG4gICAgYnVmZmVyLnB1c2goeyBldmVudCwgYXJncyB9KTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0RGV2dG9vbHNIb29rJDEoaG9vaywgdGFyZ2V0KSB7XG4gIHZhciBfYSwgX2I7XG4gIGRldnRvb2xzJDEgPSBob29rO1xuICBpZiAoZGV2dG9vbHMkMSkge1xuICAgIGRldnRvb2xzJDEuZW5hYmxlZCA9IHRydWU7XG4gICAgYnVmZmVyLmZvckVhY2goKHsgZXZlbnQsIGFyZ3MgfSkgPT4gZGV2dG9vbHMkMS5lbWl0KGV2ZW50LCAuLi5hcmdzKSk7XG4gICAgYnVmZmVyID0gW107XG4gIH0gZWxzZSBpZiAoXG4gICAgLy8gaGFuZGxlIGxhdGUgZGV2dG9vbHMgaW5qZWN0aW9uIC0gb25seSBkbyB0aGlzIGlmIHdlIGFyZSBpbiBhbiBhY3R1YWxcbiAgICAvLyBicm93c2VyIGVudmlyb25tZW50IHRvIGF2b2lkIHRoZSB0aW1lciBoYW5kbGUgc3RhbGxpbmcgdGVzdCBydW5uZXIgZXhpdFxuICAgIC8vICgjNDgxNSlcbiAgICB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIC8vIHNvbWUgZW52cyBtb2NrIHdpbmRvdyBidXQgbm90IGZ1bGx5XG4gICAgd2luZG93LkhUTUxFbGVtZW50ICYmIC8vIGFsc28gZXhjbHVkZSBqc2RvbVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICEoKF9iID0gKF9hID0gd2luZG93Lm5hdmlnYXRvcikgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnVzZXJBZ2VudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmluY2x1ZGVzKFwianNkb21cIikpXG4gICkge1xuICAgIGNvbnN0IHJlcGxheSA9IHRhcmdldC5fX1ZVRV9ERVZUT09MU19IT09LX1JFUExBWV9fID0gdGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX18gfHwgW107XG4gICAgcmVwbGF5LnB1c2goKG5ld0hvb2spID0+IHtcbiAgICAgIHNldERldnRvb2xzSG9vayQxKG5ld0hvb2ssIHRhcmdldCk7XG4gICAgfSk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoIWRldnRvb2xzJDEpIHtcbiAgICAgICAgdGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX18gPSBudWxsO1xuICAgICAgICBkZXZ0b29sc05vdEluc3RhbGxlZCA9IHRydWU7XG4gICAgICAgIGJ1ZmZlciA9IFtdO1xuICAgICAgfVxuICAgIH0sIDNlMyk7XG4gIH0gZWxzZSB7XG4gICAgZGV2dG9vbHNOb3RJbnN0YWxsZWQgPSB0cnVlO1xuICAgIGJ1ZmZlciA9IFtdO1xuICB9XG59XG5mdW5jdGlvbiBkZXZ0b29sc0luaXRBcHAoYXBwLCB2ZXJzaW9uKSB7XG4gIGVtaXQkMShcImFwcDppbml0XCIgLyogQVBQX0lOSVQgKi8sIGFwcCwgdmVyc2lvbiwge1xuICAgIEZyYWdtZW50LFxuICAgIFRleHQsXG4gICAgQ29tbWVudCxcbiAgICBTdGF0aWNcbiAgfSk7XG59XG5mdW5jdGlvbiBkZXZ0b29sc1VubW91bnRBcHAoYXBwKSB7XG4gIGVtaXQkMShcImFwcDp1bm1vdW50XCIgLyogQVBQX1VOTU9VTlQgKi8sIGFwcCk7XG59XG5jb25zdCBkZXZ0b29sc0NvbXBvbmVudEFkZGVkID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZURldnRvb2xzQ29tcG9uZW50SG9vayhcImNvbXBvbmVudDphZGRlZFwiIC8qIENPTVBPTkVOVF9BRERFRCAqLyk7XG5jb25zdCBkZXZ0b29sc0NvbXBvbmVudFVwZGF0ZWQgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKFwiY29tcG9uZW50OnVwZGF0ZWRcIiAvKiBDT01QT05FTlRfVVBEQVRFRCAqLyk7XG5jb25zdCBfZGV2dG9vbHNDb21wb25lbnRSZW1vdmVkID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZURldnRvb2xzQ29tcG9uZW50SG9vayhcbiAgXCJjb21wb25lbnQ6cmVtb3ZlZFwiIC8qIENPTVBPTkVOVF9SRU1PVkVEICovXG4pO1xuY29uc3QgZGV2dG9vbHNDb21wb25lbnRSZW1vdmVkID0gKGNvbXBvbmVudCkgPT4ge1xuICBpZiAoZGV2dG9vbHMkMSAmJiB0eXBlb2YgZGV2dG9vbHMkMS5jbGVhbnVwQnVmZmVyID09PSBcImZ1bmN0aW9uXCIgJiYgLy8gcmVtb3ZlIHRoZSBjb21wb25lbnQgaWYgaXQgd2Fzbid0IGJ1ZmZlcmVkXG4gICFkZXZ0b29scyQxLmNsZWFudXBCdWZmZXIoY29tcG9uZW50KSkge1xuICAgIF9kZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQoY29tcG9uZW50KTtcbiAgfVxufTtcbi8vIEBfX05PX1NJREVfRUZGRUNUU19fXG5mdW5jdGlvbiBjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2soaG9vaykge1xuICByZXR1cm4gKGNvbXBvbmVudCkgPT4ge1xuICAgIGVtaXQkMShcbiAgICAgIGhvb2ssXG4gICAgICBjb21wb25lbnQuYXBwQ29udGV4dC5hcHAsXG4gICAgICBjb21wb25lbnQudWlkLFxuICAgICAgY29tcG9uZW50LnBhcmVudCA/IGNvbXBvbmVudC5wYXJlbnQudWlkIDogdm9pZCAwLFxuICAgICAgY29tcG9uZW50XG4gICAgKTtcbiAgfTtcbn1cbmNvbnN0IGRldnRvb2xzUGVyZlN0YXJ0ID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZURldnRvb2xzUGVyZm9ybWFuY2VIb29rKFwicGVyZjpzdGFydFwiIC8qIFBFUkZPUk1BTkNFX1NUQVJUICovKTtcbmNvbnN0IGRldnRvb2xzUGVyZkVuZCA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVEZXZ0b29sc1BlcmZvcm1hbmNlSG9vayhcInBlcmY6ZW5kXCIgLyogUEVSRk9STUFOQ0VfRU5EICovKTtcbmZ1bmN0aW9uIGNyZWF0ZURldnRvb2xzUGVyZm9ybWFuY2VIb29rKGhvb2spIHtcbiAgcmV0dXJuIChjb21wb25lbnQsIHR5cGUsIHRpbWUpID0+IHtcbiAgICBlbWl0JDEoaG9vaywgY29tcG9uZW50LmFwcENvbnRleHQuYXBwLCBjb21wb25lbnQudWlkLCBjb21wb25lbnQsIHR5cGUsIHRpbWUpO1xuICB9O1xufVxuZnVuY3Rpb24gZGV2dG9vbHNDb21wb25lbnRFbWl0KGNvbXBvbmVudCwgZXZlbnQsIHBhcmFtcykge1xuICBlbWl0JDEoXG4gICAgXCJjb21wb25lbnQ6ZW1pdFwiIC8qIENPTVBPTkVOVF9FTUlUICovLFxuICAgIGNvbXBvbmVudC5hcHBDb250ZXh0LmFwcCxcbiAgICBjb21wb25lbnQsXG4gICAgZXZlbnQsXG4gICAgcGFyYW1zXG4gICk7XG59XG5cbmxldCBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xubGV0IGN1cnJlbnRTY29wZUlkID0gbnVsbDtcbmZ1bmN0aW9uIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShpbnN0YW5jZSkge1xuICBjb25zdCBwcmV2ID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xuICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgY3VycmVudFNjb3BlSWQgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS50eXBlLl9fc2NvcGVJZCB8fCBudWxsO1xuICByZXR1cm4gcHJldjtcbn1cbmZ1bmN0aW9uIHB1c2hTY29wZUlkKGlkKSB7XG4gIGN1cnJlbnRTY29wZUlkID0gaWQ7XG59XG5mdW5jdGlvbiBwb3BTY29wZUlkKCkge1xuICBjdXJyZW50U2NvcGVJZCA9IG51bGw7XG59XG5jb25zdCB3aXRoU2NvcGVJZCA9IChfaWQpID0+IHdpdGhDdHg7XG5mdW5jdGlvbiB3aXRoQ3R4KGZuLCBjdHggPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UsIGlzTm9uU2NvcGVkU2xvdCkge1xuICBpZiAoIWN0eCkgcmV0dXJuIGZuO1xuICBpZiAoZm4uX24pIHtcbiAgICByZXR1cm4gZm47XG4gIH1cbiAgY29uc3QgcmVuZGVyRm5XaXRoQ29udGV4dCA9ICguLi5hcmdzKSA9PiB7XG4gICAgaWYgKHJlbmRlckZuV2l0aENvbnRleHQuX2QpIHtcbiAgICAgIHNldEJsb2NrVHJhY2tpbmcoLTEpO1xuICAgIH1cbiAgICBjb25zdCBwcmV2SW5zdGFuY2UgPSBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UoY3R4KTtcbiAgICBsZXQgcmVzO1xuICAgIHRyeSB7XG4gICAgICByZXMgPSBmbiguLi5hcmdzKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlKHByZXZJbnN0YW5jZSk7XG4gICAgICBpZiAocmVuZGVyRm5XaXRoQ29udGV4dC5fZCkge1xuICAgICAgICBzZXRCbG9ja1RyYWNraW5nKDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgIGRldnRvb2xzQ29tcG9uZW50VXBkYXRlZChjdHgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuICByZW5kZXJGbldpdGhDb250ZXh0Ll9uID0gdHJ1ZTtcbiAgcmVuZGVyRm5XaXRoQ29udGV4dC5fYyA9IHRydWU7XG4gIHJlbmRlckZuV2l0aENvbnRleHQuX2QgPSB0cnVlO1xuICByZXR1cm4gcmVuZGVyRm5XaXRoQ29udGV4dDtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVEaXJlY3RpdmVOYW1lKG5hbWUpIHtcbiAgaWYgKGlzQnVpbHRJbkRpcmVjdGl2ZShuYW1lKSkge1xuICAgIHdhcm4kMShcIkRvIG5vdCB1c2UgYnVpbHQtaW4gZGlyZWN0aXZlIGlkcyBhcyBjdXN0b20gZGlyZWN0aXZlIGlkOiBcIiArIG5hbWUpO1xuICB9XG59XG5mdW5jdGlvbiB3aXRoRGlyZWN0aXZlcyh2bm9kZSwgZGlyZWN0aXZlcykge1xuICBpZiAoY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID09PSBudWxsKSB7XG4gICAgISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiB3YXJuJDEoYHdpdGhEaXJlY3RpdmVzIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHJlbmRlciBmdW5jdGlvbnMuYCk7XG4gICAgcmV0dXJuIHZub2RlO1xuICB9XG4gIGNvbnN0IGluc3RhbmNlID0gZ2V0Q29tcG9uZW50UHVibGljSW5zdGFuY2UoY3VycmVudFJlbmRlcmluZ0luc3RhbmNlKTtcbiAgY29uc3QgYmluZGluZ3MgPSB2bm9kZS5kaXJzIHx8ICh2bm9kZS5kaXJzID0gW10pO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRpcmVjdGl2ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgW2RpciwgdmFsdWUsIGFyZywgbW9kaWZpZXJzID0gRU1QVFlfT0JKXSA9IGRpcmVjdGl2ZXNbaV07XG4gICAgaWYgKGRpcikge1xuICAgICAgaWYgKGlzRnVuY3Rpb24oZGlyKSkge1xuICAgICAgICBkaXIgPSB7XG4gICAgICAgICAgbW91bnRlZDogZGlyLFxuICAgICAgICAgIHVwZGF0ZWQ6IGRpclxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKGRpci5kZWVwKSB7XG4gICAgICAgIHRyYXZlcnNlKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGJpbmRpbmdzLnB1c2goe1xuICAgICAgICBkaXIsXG4gICAgICAgIGluc3RhbmNlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgb2xkVmFsdWU6IHZvaWQgMCxcbiAgICAgICAgYXJnLFxuICAgICAgICBtb2RpZmllcnNcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdm5vZGU7XG59XG5mdW5jdGlvbiBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBwcmV2Vk5vZGUsIGluc3RhbmNlLCBuYW1lKSB7XG4gIGNvbnN0IGJpbmRpbmdzID0gdm5vZGUuZGlycztcbiAgY29uc3Qgb2xkQmluZGluZ3MgPSBwcmV2Vk5vZGUgJiYgcHJldlZOb2RlLmRpcnM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYmluZGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBiaW5kaW5nID0gYmluZGluZ3NbaV07XG4gICAgaWYgKG9sZEJpbmRpbmdzKSB7XG4gICAgICBiaW5kaW5nLm9sZFZhbHVlID0gb2xkQmluZGluZ3NbaV0udmFsdWU7XG4gICAgfVxuICAgIGxldCBob29rID0gYmluZGluZy5kaXJbbmFtZV07XG4gICAgaWYgKGhvb2spIHtcbiAgICAgIHBhdXNlVHJhY2tpbmcoKTtcbiAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIGluc3RhbmNlLCA4LCBbXG4gICAgICAgIHZub2RlLmVsLFxuICAgICAgICBiaW5kaW5nLFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgcHJldlZOb2RlXG4gICAgICBdKTtcbiAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgVGVsZXBvcnRFbmRLZXkgPSBTeW1ib2woXCJfdnRlXCIpO1xuY29uc3QgaXNUZWxlcG9ydCA9ICh0eXBlKSA9PiB0eXBlLl9faXNUZWxlcG9ydDtcbmNvbnN0IGlzVGVsZXBvcnREaXNhYmxlZCA9IChwcm9wcykgPT4gcHJvcHMgJiYgKHByb3BzLmRpc2FibGVkIHx8IHByb3BzLmRpc2FibGVkID09PSBcIlwiKTtcbmNvbnN0IGlzVGVsZXBvcnREZWZlcnJlZCA9IChwcm9wcykgPT4gcHJvcHMgJiYgKHByb3BzLmRlZmVyIHx8IHByb3BzLmRlZmVyID09PSBcIlwiKTtcbmNvbnN0IGlzVGFyZ2V0U1ZHID0gKHRhcmdldCkgPT4gdHlwZW9mIFNWR0VsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgdGFyZ2V0IGluc3RhbmNlb2YgU1ZHRWxlbWVudDtcbmNvbnN0IGlzVGFyZ2V0TWF0aE1MID0gKHRhcmdldCkgPT4gdHlwZW9mIE1hdGhNTEVsZW1lbnQgPT09IFwiZnVuY3Rpb25cIiAmJiB0YXJnZXQgaW5zdGFuY2VvZiBNYXRoTUxFbGVtZW50O1xuY29uc3QgcmVzb2x2ZVRhcmdldCA9IChwcm9wcywgc2VsZWN0KSA9PiB7XG4gIGNvbnN0IHRhcmdldFNlbGVjdG9yID0gcHJvcHMgJiYgcHJvcHMudG87XG4gIGlmIChpc1N0cmluZyh0YXJnZXRTZWxlY3RvcikpIHtcbiAgICBpZiAoIXNlbGVjdCkge1xuICAgICAgISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiB3YXJuJDEoXG4gICAgICAgIGBDdXJyZW50IHJlbmRlcmVyIGRvZXMgbm90IHN1cHBvcnQgc3RyaW5nIHRhcmdldCBmb3IgVGVsZXBvcnRzLiAobWlzc2luZyBxdWVyeVNlbGVjdG9yIHJlbmRlcmVyIG9wdGlvbilgXG4gICAgICApO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IHNlbGVjdCh0YXJnZXRTZWxlY3Rvcik7XG4gICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAhdGFyZ2V0ICYmICFpc1RlbGVwb3J0RGlzYWJsZWQocHJvcHMpKSB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBgRmFpbGVkIHRvIGxvY2F0ZSBUZWxlcG9ydCB0YXJnZXQgd2l0aCBzZWxlY3RvciBcIiR7dGFyZ2V0U2VsZWN0b3J9XCIuIE5vdGUgdGhlIHRhcmdldCBlbGVtZW50IG11c3QgZXhpc3QgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZCAtIGkuZS4gdGhlIHRhcmdldCBjYW5ub3QgYmUgcmVuZGVyZWQgYnkgdGhlIGNvbXBvbmVudCBpdHNlbGYsIGFuZCBpZGVhbGx5IHNob3VsZCBiZSBvdXRzaWRlIG9mIHRoZSBlbnRpcmUgVnVlIGNvbXBvbmVudCB0cmVlLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICF0YXJnZXRTZWxlY3RvciAmJiAhaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKSkge1xuICAgICAgd2FybiQxKGBJbnZhbGlkIFRlbGVwb3J0IHRhcmdldDogJHt0YXJnZXRTZWxlY3Rvcn1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldFNlbGVjdG9yO1xuICB9XG59O1xuY29uc3QgVGVsZXBvcnRJbXBsID0ge1xuICBuYW1lOiBcIlRlbGVwb3J0XCIsXG4gIF9faXNUZWxlcG9ydDogdHJ1ZSxcbiAgcHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCBpbnRlcm5hbHMpIHtcbiAgICBjb25zdCB7XG4gICAgICBtYzogbW91bnRDaGlsZHJlbixcbiAgICAgIHBjOiBwYXRjaENoaWxkcmVuLFxuICAgICAgcGJjOiBwYXRjaEJsb2NrQ2hpbGRyZW4sXG4gICAgICBvOiB7IGluc2VydCwgcXVlcnlTZWxlY3RvciwgY3JlYXRlVGV4dCwgY3JlYXRlQ29tbWVudCB9XG4gICAgfSA9IGludGVybmFscztcbiAgICBjb25zdCBkaXNhYmxlZCA9IGlzVGVsZXBvcnREaXNhYmxlZChuMi5wcm9wcyk7XG4gICAgbGV0IHsgc2hhcGVGbGFnLCBjaGlsZHJlbiwgZHluYW1pY0NoaWxkcmVuIH0gPSBuMjtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBpc0htclVwZGF0aW5nKSB7XG4gICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcbiAgICAgIGR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XG4gICAgfVxuICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICBjb25zdCBwbGFjZWhvbGRlciA9IG4yLmVsID0gISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSA/IGNyZWF0ZUNvbW1lbnQoXCJ0ZWxlcG9ydCBzdGFydFwiKSA6IGNyZWF0ZVRleHQoXCJcIik7XG4gICAgICBjb25zdCBtYWluQW5jaG9yID0gbjIuYW5jaG9yID0gISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSA/IGNyZWF0ZUNvbW1lbnQoXCJ0ZWxlcG9ydCBlbmRcIikgOiBjcmVhdGVUZXh0KFwiXCIpO1xuICAgICAgaW5zZXJ0KHBsYWNlaG9sZGVyLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICBpbnNlcnQobWFpbkFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgY29uc3QgbW91bnQgPSAoY29udGFpbmVyMiwgYW5jaG9yMikgPT4ge1xuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYpIHtcbiAgICAgICAgICBpZiAocGFyZW50Q29tcG9uZW50ICYmIHBhcmVudENvbXBvbmVudC5pc0NFKSB7XG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQuY2UuX3RlbGVwb3J0VGFyZ2V0ID0gY29udGFpbmVyMjtcbiAgICAgICAgICB9XG4gICAgICAgICAgbW91bnRDaGlsZHJlbihcbiAgICAgICAgICAgIGNoaWxkcmVuLFxuICAgICAgICAgICAgY29udGFpbmVyMixcbiAgICAgICAgICAgIGFuY2hvcjIsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCBtb3VudFRvVGFyZ2V0ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBuMi50YXJnZXQgPSByZXNvbHZlVGFyZ2V0KG4yLnByb3BzLCBxdWVyeVNlbGVjdG9yKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0QW5jaG9yID0gcHJlcGFyZUFuY2hvcih0YXJnZXQsIG4yLCBjcmVhdGVUZXh0LCBpbnNlcnQpO1xuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgaWYgKG5hbWVzcGFjZSAhPT0gXCJzdmdcIiAmJiBpc1RhcmdldFNWRyh0YXJnZXQpKSB7XG4gICAgICAgICAgICBuYW1lc3BhY2UgPSBcInN2Z1wiO1xuICAgICAgICAgIH0gZWxzZSBpZiAobmFtZXNwYWNlICE9PSBcIm1hdGhtbFwiICYmIGlzVGFyZ2V0TWF0aE1MKHRhcmdldCkpIHtcbiAgICAgICAgICAgIG5hbWVzcGFjZSA9IFwibWF0aG1sXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIG1vdW50KHRhcmdldCwgdGFyZ2V0QW5jaG9yKTtcbiAgICAgICAgICAgIHVwZGF0ZUNzc1ZhcnMobjIsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAhZGlzYWJsZWQpIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBcIkludmFsaWQgVGVsZXBvcnQgdGFyZ2V0IG9uIG1vdW50OlwiLFxuICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgYCgke3R5cGVvZiB0YXJnZXR9KWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgIG1vdW50KGNvbnRhaW5lciwgbWFpbkFuY2hvcik7XG4gICAgICAgIHVwZGF0ZUNzc1ZhcnMobjIsIHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzVGVsZXBvcnREZWZlcnJlZChuMi5wcm9wcykpIHtcbiAgICAgICAgbjIuZWwuX19pc01vdW50ZWQgPSBmYWxzZTtcbiAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICBtb3VudFRvVGFyZ2V0KCk7XG4gICAgICAgICAgZGVsZXRlIG4yLmVsLl9faXNNb3VudGVkO1xuICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb3VudFRvVGFyZ2V0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RlbGVwb3J0RGVmZXJyZWQobjIucHJvcHMpICYmIG4xLmVsLl9faXNNb3VudGVkID09PSBmYWxzZSkge1xuICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgIFRlbGVwb3J0SW1wbC5wcm9jZXNzKFxuICAgICAgICAgICAgbjEsXG4gICAgICAgICAgICBuMixcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkLFxuICAgICAgICAgICAgaW50ZXJuYWxzXG4gICAgICAgICAgKTtcbiAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBuMi5lbCA9IG4xLmVsO1xuICAgICAgbjIudGFyZ2V0U3RhcnQgPSBuMS50YXJnZXRTdGFydDtcbiAgICAgIGNvbnN0IG1haW5BbmNob3IgPSBuMi5hbmNob3IgPSBuMS5hbmNob3I7XG4gICAgICBjb25zdCB0YXJnZXQgPSBuMi50YXJnZXQgPSBuMS50YXJnZXQ7XG4gICAgICBjb25zdCB0YXJnZXRBbmNob3IgPSBuMi50YXJnZXRBbmNob3IgPSBuMS50YXJnZXRBbmNob3I7XG4gICAgICBjb25zdCB3YXNEaXNhYmxlZCA9IGlzVGVsZXBvcnREaXNhYmxlZChuMS5wcm9wcyk7XG4gICAgICBjb25zdCBjdXJyZW50Q29udGFpbmVyID0gd2FzRGlzYWJsZWQgPyBjb250YWluZXIgOiB0YXJnZXQ7XG4gICAgICBjb25zdCBjdXJyZW50QW5jaG9yID0gd2FzRGlzYWJsZWQgPyBtYWluQW5jaG9yIDogdGFyZ2V0QW5jaG9yO1xuICAgICAgaWYgKG5hbWVzcGFjZSA9PT0gXCJzdmdcIiB8fCBpc1RhcmdldFNWRyh0YXJnZXQpKSB7XG4gICAgICAgIG5hbWVzcGFjZSA9IFwic3ZnXCI7XG4gICAgICB9IGVsc2UgaWYgKG5hbWVzcGFjZSA9PT0gXCJtYXRobWxcIiB8fCBpc1RhcmdldE1hdGhNTCh0YXJnZXQpKSB7XG4gICAgICAgIG5hbWVzcGFjZSA9IFwibWF0aG1sXCI7XG4gICAgICB9XG4gICAgICBpZiAoZHluYW1pY0NoaWxkcmVuKSB7XG4gICAgICAgIHBhdGNoQmxvY2tDaGlsZHJlbihcbiAgICAgICAgICBuMS5keW5hbWljQ2hpbGRyZW4sXG4gICAgICAgICAgZHluYW1pY0NoaWxkcmVuLFxuICAgICAgICAgIGN1cnJlbnRDb250YWluZXIsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHNcbiAgICAgICAgKTtcbiAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIsICEhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKTtcbiAgICAgIH0gZWxzZSBpZiAoIW9wdGltaXplZCkge1xuICAgICAgICBwYXRjaENoaWxkcmVuKFxuICAgICAgICAgIG4xLFxuICAgICAgICAgIG4yLFxuICAgICAgICAgIGN1cnJlbnRDb250YWluZXIsXG4gICAgICAgICAgY3VycmVudEFuY2hvcixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgIGlmICghd2FzRGlzYWJsZWQpIHtcbiAgICAgICAgICBtb3ZlVGVsZXBvcnQoXG4gICAgICAgICAgICBuMixcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIG1haW5BbmNob3IsXG4gICAgICAgICAgICBpbnRlcm5hbHMsXG4gICAgICAgICAgICAxXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobjIucHJvcHMgJiYgbjEucHJvcHMgJiYgbjIucHJvcHMudG8gIT09IG4xLnByb3BzLnRvKSB7XG4gICAgICAgICAgICBuMi5wcm9wcy50byA9IG4xLnByb3BzLnRvO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKChuMi5wcm9wcyAmJiBuMi5wcm9wcy50bykgIT09IChuMS5wcm9wcyAmJiBuMS5wcm9wcy50bykpIHtcbiAgICAgICAgICBjb25zdCBuZXh0VGFyZ2V0ID0gbjIudGFyZ2V0ID0gcmVzb2x2ZVRhcmdldChcbiAgICAgICAgICAgIG4yLnByb3BzLFxuICAgICAgICAgICAgcXVlcnlTZWxlY3RvclxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKG5leHRUYXJnZXQpIHtcbiAgICAgICAgICAgIG1vdmVUZWxlcG9ydChcbiAgICAgICAgICAgICAgbjIsXG4gICAgICAgICAgICAgIG5leHRUYXJnZXQsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIGludGVybmFscyxcbiAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgXCJJbnZhbGlkIFRlbGVwb3J0IHRhcmdldCBvbiB1cGRhdGU6XCIsXG4gICAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgICAgYCgke3R5cGVvZiB0YXJnZXR9KWBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHdhc0Rpc2FibGVkKSB7XG4gICAgICAgICAgbW92ZVRlbGVwb3J0KFxuICAgICAgICAgICAgbjIsXG4gICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICB0YXJnZXRBbmNob3IsXG4gICAgICAgICAgICBpbnRlcm5hbHMsXG4gICAgICAgICAgICAxXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdXBkYXRlQ3NzVmFycyhuMiwgZGlzYWJsZWQpO1xuICAgIH1cbiAgfSxcbiAgcmVtb3ZlKHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB7IHVtOiB1bm1vdW50LCBvOiB7IHJlbW92ZTogaG9zdFJlbW92ZSB9IH0sIGRvUmVtb3ZlKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2hhcGVGbGFnLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBhbmNob3IsXG4gICAgICB0YXJnZXRTdGFydCxcbiAgICAgIHRhcmdldEFuY2hvcixcbiAgICAgIHRhcmdldCxcbiAgICAgIHByb3BzXG4gICAgfSA9IHZub2RlO1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIGhvc3RSZW1vdmUodGFyZ2V0U3RhcnQpO1xuICAgICAgaG9zdFJlbW92ZSh0YXJnZXRBbmNob3IpO1xuICAgIH1cbiAgICBkb1JlbW92ZSAmJiBob3N0UmVtb3ZlKGFuY2hvcik7XG4gICAgaWYgKHNoYXBlRmxhZyAmIDE2KSB7XG4gICAgICBjb25zdCBzaG91bGRSZW1vdmUgPSBkb1JlbW92ZSB8fCAhaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgdW5tb3VudChcbiAgICAgICAgICBjaGlsZCxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgc2hvdWxkUmVtb3ZlLFxuICAgICAgICAgICEhY2hpbGQuZHluYW1pY0NoaWxkcmVuXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBtb3ZlOiBtb3ZlVGVsZXBvcnQsXG4gIGh5ZHJhdGU6IGh5ZHJhdGVUZWxlcG9ydFxufTtcbmZ1bmN0aW9uIG1vdmVUZWxlcG9ydCh2bm9kZSwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IsIHsgbzogeyBpbnNlcnQgfSwgbTogbW92ZSB9LCBtb3ZlVHlwZSA9IDIpIHtcbiAgaWYgKG1vdmVUeXBlID09PSAwKSB7XG4gICAgaW5zZXJ0KHZub2RlLnRhcmdldEFuY2hvciwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IpO1xuICB9XG4gIGNvbnN0IHsgZWwsIGFuY2hvciwgc2hhcGVGbGFnLCBjaGlsZHJlbiwgcHJvcHMgfSA9IHZub2RlO1xuICBjb25zdCBpc1Jlb3JkZXIgPSBtb3ZlVHlwZSA9PT0gMjtcbiAgaWYgKGlzUmVvcmRlcikge1xuICAgIGluc2VydChlbCwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IpO1xuICB9XG4gIGlmICghaXNSZW9yZGVyIHx8IGlzVGVsZXBvcnREaXNhYmxlZChwcm9wcykpIHtcbiAgICBpZiAoc2hhcGVGbGFnICYgMTYpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbW92ZShcbiAgICAgICAgICBjaGlsZHJlbltpXSxcbiAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgcGFyZW50QW5jaG9yLFxuICAgICAgICAgIDJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGlzUmVvcmRlcikge1xuICAgIGluc2VydChhbmNob3IsIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yKTtcbiAgfVxufVxuZnVuY3Rpb24gaHlkcmF0ZVRlbGVwb3J0KG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwge1xuICBvOiB7IG5leHRTaWJsaW5nLCBwYXJlbnROb2RlLCBxdWVyeVNlbGVjdG9yLCBpbnNlcnQsIGNyZWF0ZVRleHQgfVxufSwgaHlkcmF0ZUNoaWxkcmVuKSB7XG4gIGZ1bmN0aW9uIGh5ZHJhdGVEaXNhYmxlZFRlbGVwb3J0KG5vZGUyLCB2bm9kZTIsIHRhcmdldFN0YXJ0LCB0YXJnZXRBbmNob3IpIHtcbiAgICB2bm9kZTIuYW5jaG9yID0gaHlkcmF0ZUNoaWxkcmVuKFxuICAgICAgbmV4dFNpYmxpbmcobm9kZTIpLFxuICAgICAgdm5vZGUyLFxuICAgICAgcGFyZW50Tm9kZShub2RlMiksXG4gICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgIG9wdGltaXplZFxuICAgICk7XG4gICAgdm5vZGUyLnRhcmdldFN0YXJ0ID0gdGFyZ2V0U3RhcnQ7XG4gICAgdm5vZGUyLnRhcmdldEFuY2hvciA9IHRhcmdldEFuY2hvcjtcbiAgfVxuICBjb25zdCB0YXJnZXQgPSB2bm9kZS50YXJnZXQgPSByZXNvbHZlVGFyZ2V0KFxuICAgIHZub2RlLnByb3BzLFxuICAgIHF1ZXJ5U2VsZWN0b3JcbiAgKTtcbiAgY29uc3QgZGlzYWJsZWQgPSBpc1RlbGVwb3J0RGlzYWJsZWQodm5vZGUucHJvcHMpO1xuICBpZiAodGFyZ2V0KSB7XG4gICAgY29uc3QgdGFyZ2V0Tm9kZSA9IHRhcmdldC5fbHBhIHx8IHRhcmdldC5maXJzdENoaWxkO1xuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxNikge1xuICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgIGh5ZHJhdGVEaXNhYmxlZFRlbGVwb3J0KFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgdGFyZ2V0Tm9kZSxcbiAgICAgICAgICB0YXJnZXROb2RlICYmIG5leHRTaWJsaW5nKHRhcmdldE5vZGUpXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZS5hbmNob3IgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgbGV0IHRhcmdldEFuY2hvciA9IHRhcmdldE5vZGU7XG4gICAgICAgIHdoaWxlICh0YXJnZXRBbmNob3IpIHtcbiAgICAgICAgICBpZiAodGFyZ2V0QW5jaG9yICYmIHRhcmdldEFuY2hvci5ub2RlVHlwZSA9PT0gOCkge1xuICAgICAgICAgICAgaWYgKHRhcmdldEFuY2hvci5kYXRhID09PSBcInRlbGVwb3J0IHN0YXJ0IGFuY2hvclwiKSB7XG4gICAgICAgICAgICAgIHZub2RlLnRhcmdldFN0YXJ0ID0gdGFyZ2V0QW5jaG9yO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXRBbmNob3IuZGF0YSA9PT0gXCJ0ZWxlcG9ydCBhbmNob3JcIikge1xuICAgICAgICAgICAgICB2bm9kZS50YXJnZXRBbmNob3IgPSB0YXJnZXRBbmNob3I7XG4gICAgICAgICAgICAgIHRhcmdldC5fbHBhID0gdm5vZGUudGFyZ2V0QW5jaG9yICYmIG5leHRTaWJsaW5nKHZub2RlLnRhcmdldEFuY2hvcik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0YXJnZXRBbmNob3IgPSBuZXh0U2libGluZyh0YXJnZXRBbmNob3IpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdm5vZGUudGFyZ2V0QW5jaG9yKSB7XG4gICAgICAgICAgcHJlcGFyZUFuY2hvcih0YXJnZXQsIHZub2RlLCBjcmVhdGVUZXh0LCBpbnNlcnQpO1xuICAgICAgICB9XG4gICAgICAgIGh5ZHJhdGVDaGlsZHJlbihcbiAgICAgICAgICB0YXJnZXROb2RlICYmIG5leHRTaWJsaW5nKHRhcmdldE5vZGUpLFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGVDc3NWYXJzKHZub2RlLCBkaXNhYmxlZCk7XG4gIH0gZWxzZSBpZiAoZGlzYWJsZWQpIHtcbiAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMTYpIHtcbiAgICAgIGh5ZHJhdGVEaXNhYmxlZFRlbGVwb3J0KG5vZGUsIHZub2RlLCBub2RlLCBuZXh0U2libGluZyhub2RlKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB2bm9kZS5hbmNob3IgJiYgbmV4dFNpYmxpbmcodm5vZGUuYW5jaG9yKTtcbn1cbmNvbnN0IFRlbGVwb3J0ID0gVGVsZXBvcnRJbXBsO1xuZnVuY3Rpb24gdXBkYXRlQ3NzVmFycyh2bm9kZSwgaXNEaXNhYmxlZCkge1xuICBjb25zdCBjdHggPSB2bm9kZS5jdHg7XG4gIGlmIChjdHggJiYgY3R4LnV0KSB7XG4gICAgbGV0IG5vZGUsIGFuY2hvcjtcbiAgICBpZiAoaXNEaXNhYmxlZCkge1xuICAgICAgbm9kZSA9IHZub2RlLmVsO1xuICAgICAgYW5jaG9yID0gdm5vZGUuYW5jaG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlID0gdm5vZGUudGFyZ2V0U3RhcnQ7XG4gICAgICBhbmNob3IgPSB2bm9kZS50YXJnZXRBbmNob3I7XG4gICAgfVxuICAgIHdoaWxlIChub2RlICYmIG5vZGUgIT09IGFuY2hvcikge1xuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEpIG5vZGUuc2V0QXR0cmlidXRlKFwiZGF0YS12LW93bmVyXCIsIGN0eC51aWQpO1xuICAgICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgfVxuICAgIGN0eC51dCgpO1xuICB9XG59XG5mdW5jdGlvbiBwcmVwYXJlQW5jaG9yKHRhcmdldCwgdm5vZGUsIGNyZWF0ZVRleHQsIGluc2VydCkge1xuICBjb25zdCB0YXJnZXRTdGFydCA9IHZub2RlLnRhcmdldFN0YXJ0ID0gY3JlYXRlVGV4dChcIlwiKTtcbiAgY29uc3QgdGFyZ2V0QW5jaG9yID0gdm5vZGUudGFyZ2V0QW5jaG9yID0gY3JlYXRlVGV4dChcIlwiKTtcbiAgdGFyZ2V0U3RhcnRbVGVsZXBvcnRFbmRLZXldID0gdGFyZ2V0QW5jaG9yO1xuICBpZiAodGFyZ2V0KSB7XG4gICAgaW5zZXJ0KHRhcmdldFN0YXJ0LCB0YXJnZXQpO1xuICAgIGluc2VydCh0YXJnZXRBbmNob3IsIHRhcmdldCk7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEFuY2hvcjtcbn1cblxuY29uc3QgbGVhdmVDYktleSA9IFN5bWJvbChcIl9sZWF2ZUNiXCIpO1xuY29uc3QgZW50ZXJDYktleSA9IFN5bWJvbChcIl9lbnRlckNiXCIpO1xuZnVuY3Rpb24gdXNlVHJhbnNpdGlvblN0YXRlKCkge1xuICBjb25zdCBzdGF0ZSA9IHtcbiAgICBpc01vdW50ZWQ6IGZhbHNlLFxuICAgIGlzTGVhdmluZzogZmFsc2UsXG4gICAgaXNVbm1vdW50aW5nOiBmYWxzZSxcbiAgICBsZWF2aW5nVk5vZGVzOiAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpXG4gIH07XG4gIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgc3RhdGUuaXNNb3VudGVkID0gdHJ1ZTtcbiAgfSk7XG4gIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgc3RhdGUuaXNVbm1vdW50aW5nID0gdHJ1ZTtcbiAgfSk7XG4gIHJldHVybiBzdGF0ZTtcbn1cbmNvbnN0IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yID0gW0Z1bmN0aW9uLCBBcnJheV07XG5jb25zdCBCYXNlVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycyA9IHtcbiAgbW9kZTogU3RyaW5nLFxuICBhcHBlYXI6IEJvb2xlYW4sXG4gIHBlcnNpc3RlZDogQm9vbGVhbixcbiAgLy8gZW50ZXJcbiAgb25CZWZvcmVFbnRlcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gIG9uRW50ZXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICBvbkFmdGVyRW50ZXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICBvbkVudGVyQ2FuY2VsbGVkOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgLy8gbGVhdmVcbiAgb25CZWZvcmVMZWF2ZTogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gIG9uTGVhdmU6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICBvbkFmdGVyTGVhdmU6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICBvbkxlYXZlQ2FuY2VsbGVkOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgLy8gYXBwZWFyXG4gIG9uQmVmb3JlQXBwZWFyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgb25BcHBlYXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICBvbkFmdGVyQXBwZWFyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgb25BcHBlYXJDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yXG59O1xuY29uc3QgcmVjdXJzaXZlR2V0U3VidHJlZSA9IChpbnN0YW5jZSkgPT4ge1xuICBjb25zdCBzdWJUcmVlID0gaW5zdGFuY2Uuc3ViVHJlZTtcbiAgcmV0dXJuIHN1YlRyZWUuY29tcG9uZW50ID8gcmVjdXJzaXZlR2V0U3VidHJlZShzdWJUcmVlLmNvbXBvbmVudCkgOiBzdWJUcmVlO1xufTtcbmNvbnN0IEJhc2VUcmFuc2l0aW9uSW1wbCA9IHtcbiAgbmFtZTogYEJhc2VUcmFuc2l0aW9uYCxcbiAgcHJvcHM6IEJhc2VUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzLFxuICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICBjb25zdCBzdGF0ZSA9IHVzZVRyYW5zaXRpb25TdGF0ZSgpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IHNsb3RzLmRlZmF1bHQgJiYgZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuKHNsb3RzLmRlZmF1bHQoKSwgdHJ1ZSk7XG4gICAgICBpZiAoIWNoaWxkcmVuIHx8ICFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgY2hpbGQgPSBmaW5kTm9uQ29tbWVudENoaWxkKGNoaWxkcmVuKTtcbiAgICAgIGNvbnN0IHJhd1Byb3BzID0gdG9SYXcocHJvcHMpO1xuICAgICAgY29uc3QgeyBtb2RlIH0gPSByYXdQcm9wcztcbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIG1vZGUgJiYgbW9kZSAhPT0gXCJpbi1vdXRcIiAmJiBtb2RlICE9PSBcIm91dC1pblwiICYmIG1vZGUgIT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAgIHdhcm4kMShgaW52YWxpZCA8dHJhbnNpdGlvbj4gbW9kZTogJHttb2RlfWApO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXRlLmlzTGVhdmluZykge1xuICAgICAgICByZXR1cm4gZW1wdHlQbGFjZWhvbGRlcihjaGlsZCk7XG4gICAgICB9XG4gICAgICBjb25zdCBpbm5lckNoaWxkID0gZ2V0SW5uZXJDaGlsZCQxKGNoaWxkKTtcbiAgICAgIGlmICghaW5uZXJDaGlsZCkge1xuICAgICAgICByZXR1cm4gZW1wdHlQbGFjZWhvbGRlcihjaGlsZCk7XG4gICAgICB9XG4gICAgICBsZXQgZW50ZXJIb29rcyA9IHJlc29sdmVUcmFuc2l0aW9uSG9va3MoXG4gICAgICAgIGlubmVyQ2hpbGQsXG4gICAgICAgIHJhd1Byb3BzLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgIC8vICMxMTA2MSwgZW5zdXJlIGVudGVySG9va3MgaXMgZnJlc2ggYWZ0ZXIgY2xvbmVcbiAgICAgICAgKGhvb2tzKSA9PiBlbnRlckhvb2tzID0gaG9va3NcbiAgICAgICk7XG4gICAgICBpZiAoaW5uZXJDaGlsZC50eXBlICE9PSBDb21tZW50KSB7XG4gICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhpbm5lckNoaWxkLCBlbnRlckhvb2tzKTtcbiAgICAgIH1cbiAgICAgIGxldCBvbGRJbm5lckNoaWxkID0gaW5zdGFuY2Uuc3ViVHJlZSAmJiBnZXRJbm5lckNoaWxkJDEoaW5zdGFuY2Uuc3ViVHJlZSk7XG4gICAgICBpZiAob2xkSW5uZXJDaGlsZCAmJiBvbGRJbm5lckNoaWxkLnR5cGUgIT09IENvbW1lbnQgJiYgIWlzU2FtZVZOb2RlVHlwZShvbGRJbm5lckNoaWxkLCBpbm5lckNoaWxkKSAmJiByZWN1cnNpdmVHZXRTdWJ0cmVlKGluc3RhbmNlKS50eXBlICE9PSBDb21tZW50KSB7XG4gICAgICAgIGxldCBsZWF2aW5nSG9va3MgPSByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKFxuICAgICAgICAgIG9sZElubmVyQ2hpbGQsXG4gICAgICAgICAgcmF3UHJvcHMsXG4gICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgaW5zdGFuY2VcbiAgICAgICAgKTtcbiAgICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKG9sZElubmVyQ2hpbGQsIGxlYXZpbmdIb29rcyk7XG4gICAgICAgIGlmIChtb2RlID09PSBcIm91dC1pblwiICYmIGlubmVyQ2hpbGQudHlwZSAhPT0gQ29tbWVudCkge1xuICAgICAgICAgIHN0YXRlLmlzTGVhdmluZyA9IHRydWU7XG4gICAgICAgICAgbGVhdmluZ0hvb2tzLmFmdGVyTGVhdmUgPSAoKSA9PiB7XG4gICAgICAgICAgICBzdGF0ZS5pc0xlYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICghKGluc3RhbmNlLmpvYi5mbGFncyAmIDgpKSB7XG4gICAgICAgICAgICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlIGxlYXZpbmdIb29rcy5hZnRlckxlYXZlO1xuICAgICAgICAgICAgb2xkSW5uZXJDaGlsZCA9IHZvaWQgMDtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBlbXB0eVBsYWNlaG9sZGVyKGNoaWxkKTtcbiAgICAgICAgfSBlbHNlIGlmIChtb2RlID09PSBcImluLW91dFwiICYmIGlubmVyQ2hpbGQudHlwZSAhPT0gQ29tbWVudCkge1xuICAgICAgICAgIGxlYXZpbmdIb29rcy5kZWxheUxlYXZlID0gKGVsLCBlYXJseVJlbW92ZSwgZGVsYXllZExlYXZlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsZWF2aW5nVk5vZGVzQ2FjaGUgPSBnZXRMZWF2aW5nTm9kZXNGb3JUeXBlKFxuICAgICAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICAgICAgb2xkSW5uZXJDaGlsZFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGxlYXZpbmdWTm9kZXNDYWNoZVtTdHJpbmcob2xkSW5uZXJDaGlsZC5rZXkpXSA9IG9sZElubmVyQ2hpbGQ7XG4gICAgICAgICAgICBlbFtsZWF2ZUNiS2V5XSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgZWFybHlSZW1vdmUoKTtcbiAgICAgICAgICAgICAgZWxbbGVhdmVDYktleV0gPSB2b2lkIDA7XG4gICAgICAgICAgICAgIGRlbGV0ZSBlbnRlckhvb2tzLmRlbGF5ZWRMZWF2ZTtcbiAgICAgICAgICAgICAgb2xkSW5uZXJDaGlsZCA9IHZvaWQgMDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBlbnRlckhvb2tzLmRlbGF5ZWRMZWF2ZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgZGVsYXllZExlYXZlKCk7XG4gICAgICAgICAgICAgIGRlbGV0ZSBlbnRlckhvb2tzLmRlbGF5ZWRMZWF2ZTtcbiAgICAgICAgICAgICAgb2xkSW5uZXJDaGlsZCA9IHZvaWQgMDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbGRJbm5lckNoaWxkID0gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG9sZElubmVyQ2hpbGQpIHtcbiAgICAgICAgb2xkSW5uZXJDaGlsZCA9IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9O1xuICB9XG59O1xuZnVuY3Rpb24gZmluZE5vbkNvbW1lbnRDaGlsZChjaGlsZHJlbikge1xuICBsZXQgY2hpbGQgPSBjaGlsZHJlblswXTtcbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICBsZXQgaGFzRm91bmQgPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IGMgb2YgY2hpbGRyZW4pIHtcbiAgICAgIGlmIChjLnR5cGUgIT09IENvbW1lbnQpIHtcbiAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgaGFzRm91bmQpIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBcIjx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQgb3IgY29tcG9uZW50LiBVc2UgPHRyYW5zaXRpb24tZ3JvdXA+IGZvciBsaXN0cy5cIlxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGQgPSBjO1xuICAgICAgICBoYXNGb3VuZCA9IHRydWU7XG4gICAgICAgIGlmICghISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjaGlsZDtcbn1cbmNvbnN0IEJhc2VUcmFuc2l0aW9uID0gQmFzZVRyYW5zaXRpb25JbXBsO1xuZnVuY3Rpb24gZ2V0TGVhdmluZ05vZGVzRm9yVHlwZShzdGF0ZSwgdm5vZGUpIHtcbiAgY29uc3QgeyBsZWF2aW5nVk5vZGVzIH0gPSBzdGF0ZTtcbiAgbGV0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGxlYXZpbmdWTm9kZXMuZ2V0KHZub2RlLnR5cGUpO1xuICBpZiAoIWxlYXZpbmdWTm9kZXNDYWNoZSkge1xuICAgIGxlYXZpbmdWTm9kZXNDYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGxlYXZpbmdWTm9kZXMuc2V0KHZub2RlLnR5cGUsIGxlYXZpbmdWTm9kZXNDYWNoZSk7XG4gIH1cbiAgcmV0dXJuIGxlYXZpbmdWTm9kZXNDYWNoZTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uSG9va3Modm5vZGUsIHByb3BzLCBzdGF0ZSwgaW5zdGFuY2UsIHBvc3RDbG9uZSkge1xuICBjb25zdCB7XG4gICAgYXBwZWFyLFxuICAgIG1vZGUsXG4gICAgcGVyc2lzdGVkID0gZmFsc2UsXG4gICAgb25CZWZvcmVFbnRlcixcbiAgICBvbkVudGVyLFxuICAgIG9uQWZ0ZXJFbnRlcixcbiAgICBvbkVudGVyQ2FuY2VsbGVkLFxuICAgIG9uQmVmb3JlTGVhdmUsXG4gICAgb25MZWF2ZSxcbiAgICBvbkFmdGVyTGVhdmUsXG4gICAgb25MZWF2ZUNhbmNlbGxlZCxcbiAgICBvbkJlZm9yZUFwcGVhcixcbiAgICBvbkFwcGVhcixcbiAgICBvbkFmdGVyQXBwZWFyLFxuICAgIG9uQXBwZWFyQ2FuY2VsbGVkXG4gIH0gPSBwcm9wcztcbiAgY29uc3Qga2V5ID0gU3RyaW5nKHZub2RlLmtleSk7XG4gIGNvbnN0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGdldExlYXZpbmdOb2Rlc0ZvclR5cGUoc3RhdGUsIHZub2RlKTtcbiAgY29uc3QgY2FsbEhvb2sgPSAoaG9vaywgYXJncykgPT4ge1xuICAgIGhvb2sgJiYgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoXG4gICAgICBob29rLFxuICAgICAgaW5zdGFuY2UsXG4gICAgICA5LFxuICAgICAgYXJnc1xuICAgICk7XG4gIH07XG4gIGNvbnN0IGNhbGxBc3luY0hvb2sgPSAoaG9vaywgYXJncykgPT4ge1xuICAgIGNvbnN0IGRvbmUgPSBhcmdzWzFdO1xuICAgIGNhbGxIb29rKGhvb2ssIGFyZ3MpO1xuICAgIGlmIChpc0FycmF5KGhvb2spKSB7XG4gICAgICBpZiAoaG9vay5ldmVyeSgoaG9vazIpID0+IGhvb2syLmxlbmd0aCA8PSAxKSkgZG9uZSgpO1xuICAgIH0gZWxzZSBpZiAoaG9vay5sZW5ndGggPD0gMSkge1xuICAgICAgZG9uZSgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaG9va3MgPSB7XG4gICAgbW9kZSxcbiAgICBwZXJzaXN0ZWQsXG4gICAgYmVmb3JlRW50ZXIoZWwpIHtcbiAgICAgIGxldCBob29rID0gb25CZWZvcmVFbnRlcjtcbiAgICAgIGlmICghc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICAgIGlmIChhcHBlYXIpIHtcbiAgICAgICAgICBob29rID0gb25CZWZvcmVBcHBlYXIgfHwgb25CZWZvcmVFbnRlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlbFtsZWF2ZUNiS2V5XSkge1xuICAgICAgICBlbFtsZWF2ZUNiS2V5XShcbiAgICAgICAgICB0cnVlXG4gICAgICAgICAgLyogY2FuY2VsbGVkICovXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCBsZWF2aW5nVk5vZGUgPSBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5XTtcbiAgICAgIGlmIChsZWF2aW5nVk5vZGUgJiYgaXNTYW1lVk5vZGVUeXBlKHZub2RlLCBsZWF2aW5nVk5vZGUpICYmIGxlYXZpbmdWTm9kZS5lbFtsZWF2ZUNiS2V5XSkge1xuICAgICAgICBsZWF2aW5nVk5vZGUuZWxbbGVhdmVDYktleV0oKTtcbiAgICAgIH1cbiAgICAgIGNhbGxIb29rKGhvb2ssIFtlbF0pO1xuICAgIH0sXG4gICAgZW50ZXIoZWwpIHtcbiAgICAgIGxldCBob29rID0gb25FbnRlcjtcbiAgICAgIGxldCBhZnRlckhvb2sgPSBvbkFmdGVyRW50ZXI7XG4gICAgICBsZXQgY2FuY2VsSG9vayA9IG9uRW50ZXJDYW5jZWxsZWQ7XG4gICAgICBpZiAoIXN0YXRlLmlzTW91bnRlZCkge1xuICAgICAgICBpZiAoYXBwZWFyKSB7XG4gICAgICAgICAgaG9vayA9IG9uQXBwZWFyIHx8IG9uRW50ZXI7XG4gICAgICAgICAgYWZ0ZXJIb29rID0gb25BZnRlckFwcGVhciB8fCBvbkFmdGVyRW50ZXI7XG4gICAgICAgICAgY2FuY2VsSG9vayA9IG9uQXBwZWFyQ2FuY2VsbGVkIHx8IG9uRW50ZXJDYW5jZWxsZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgY2FsbGVkID0gZmFsc2U7XG4gICAgICBjb25zdCBkb25lID0gZWxbZW50ZXJDYktleV0gPSAoY2FuY2VsbGVkKSA9PiB7XG4gICAgICAgIGlmIChjYWxsZWQpIHJldHVybjtcbiAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKGNhbmNlbGxlZCkge1xuICAgICAgICAgIGNhbGxIb29rKGNhbmNlbEhvb2ssIFtlbF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGxIb29rKGFmdGVySG9vaywgW2VsXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhvb2tzLmRlbGF5ZWRMZWF2ZSkge1xuICAgICAgICAgIGhvb2tzLmRlbGF5ZWRMZWF2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsW2VudGVyQ2JLZXldID0gdm9pZCAwO1xuICAgICAgfTtcbiAgICAgIGlmIChob29rKSB7XG4gICAgICAgIGNhbGxBc3luY0hvb2soaG9vaywgW2VsLCBkb25lXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb25lKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBsZWF2ZShlbCwgcmVtb3ZlKSB7XG4gICAgICBjb25zdCBrZXkyID0gU3RyaW5nKHZub2RlLmtleSk7XG4gICAgICBpZiAoZWxbZW50ZXJDYktleV0pIHtcbiAgICAgICAgZWxbZW50ZXJDYktleV0oXG4gICAgICAgICAgdHJ1ZVxuICAgICAgICAgIC8qIGNhbmNlbGxlZCAqL1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXRlLmlzVW5tb3VudGluZykge1xuICAgICAgICByZXR1cm4gcmVtb3ZlKCk7XG4gICAgICB9XG4gICAgICBjYWxsSG9vayhvbkJlZm9yZUxlYXZlLCBbZWxdKTtcbiAgICAgIGxldCBjYWxsZWQgPSBmYWxzZTtcbiAgICAgIGNvbnN0IGRvbmUgPSBlbFtsZWF2ZUNiS2V5XSA9IChjYW5jZWxsZWQpID0+IHtcbiAgICAgICAgaWYgKGNhbGxlZCkgcmV0dXJuO1xuICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICByZW1vdmUoKTtcbiAgICAgICAgaWYgKGNhbmNlbGxlZCkge1xuICAgICAgICAgIGNhbGxIb29rKG9uTGVhdmVDYW5jZWxsZWQsIFtlbF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGxIb29rKG9uQWZ0ZXJMZWF2ZSwgW2VsXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxbbGVhdmVDYktleV0gPSB2b2lkIDA7XG4gICAgICAgIGlmIChsZWF2aW5nVk5vZGVzQ2FjaGVba2V5Ml0gPT09IHZub2RlKSB7XG4gICAgICAgICAgZGVsZXRlIGxlYXZpbmdWTm9kZXNDYWNoZVtrZXkyXTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGxlYXZpbmdWTm9kZXNDYWNoZVtrZXkyXSA9IHZub2RlO1xuICAgICAgaWYgKG9uTGVhdmUpIHtcbiAgICAgICAgY2FsbEFzeW5jSG9vayhvbkxlYXZlLCBbZWwsIGRvbmVdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNsb25lKHZub2RlMikge1xuICAgICAgY29uc3QgaG9va3MyID0gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhcbiAgICAgICAgdm5vZGUyLFxuICAgICAgICBwcm9wcyxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIGluc3RhbmNlLFxuICAgICAgICBwb3N0Q2xvbmVcbiAgICAgICk7XG4gICAgICBpZiAocG9zdENsb25lKSBwb3N0Q2xvbmUoaG9va3MyKTtcbiAgICAgIHJldHVybiBob29rczI7XG4gICAgfVxuICB9O1xuICByZXR1cm4gaG9va3M7XG59XG5mdW5jdGlvbiBlbXB0eVBsYWNlaG9sZGVyKHZub2RlKSB7XG4gIGlmIChpc0tlZXBBbGl2ZSh2bm9kZSkpIHtcbiAgICB2bm9kZSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIHZub2RlLmNoaWxkcmVuID0gbnVsbDtcbiAgICByZXR1cm4gdm5vZGU7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldElubmVyQ2hpbGQkMSh2bm9kZSkge1xuICBpZiAoIWlzS2VlcEFsaXZlKHZub2RlKSkge1xuICAgIGlmIChpc1RlbGVwb3J0KHZub2RlLnR5cGUpICYmIHZub2RlLmNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gZmluZE5vbkNvbW1lbnRDaGlsZCh2bm9kZS5jaGlsZHJlbik7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZTtcbiAgfVxuICBpZiAodm5vZGUuY29tcG9uZW50KSB7XG4gICAgcmV0dXJuIHZub2RlLmNvbXBvbmVudC5zdWJUcmVlO1xuICB9XG4gIGNvbnN0IHsgc2hhcGVGbGFnLCBjaGlsZHJlbiB9ID0gdm5vZGU7XG4gIGlmIChjaGlsZHJlbikge1xuICAgIGlmIChzaGFwZUZsYWcgJiAxNikge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuWzBdO1xuICAgIH1cbiAgICBpZiAoc2hhcGVGbGFnICYgMzIgJiYgaXNGdW5jdGlvbihjaGlsZHJlbi5kZWZhdWx0KSkge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuLmRlZmF1bHQoKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHNldFRyYW5zaXRpb25Ib29rcyh2bm9kZSwgaG9va3MpIHtcbiAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDYgJiYgdm5vZGUuY29tcG9uZW50KSB7XG4gICAgdm5vZGUudHJhbnNpdGlvbiA9IGhvb2tzO1xuICAgIHNldFRyYW5zaXRpb25Ib29rcyh2bm9kZS5jb21wb25lbnQuc3ViVHJlZSwgaG9va3MpO1xuICB9IGVsc2UgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEyOCkge1xuICAgIHZub2RlLnNzQ29udGVudC50cmFuc2l0aW9uID0gaG9va3MuY2xvbmUodm5vZGUuc3NDb250ZW50KTtcbiAgICB2bm9kZS5zc0ZhbGxiYWNrLnRyYW5zaXRpb24gPSBob29rcy5jbG9uZSh2bm9kZS5zc0ZhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICB2bm9kZS50cmFuc2l0aW9uID0gaG9va3M7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihjaGlsZHJlbiwga2VlcENvbW1lbnQgPSBmYWxzZSwgcGFyZW50S2V5KSB7XG4gIGxldCByZXQgPSBbXTtcbiAgbGV0IGtleWVkRnJhZ21lbnRDb3VudCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICBjb25zdCBrZXkgPSBwYXJlbnRLZXkgPT0gbnVsbCA/IGNoaWxkLmtleSA6IFN0cmluZyhwYXJlbnRLZXkpICsgU3RyaW5nKGNoaWxkLmtleSAhPSBudWxsID8gY2hpbGQua2V5IDogaSk7XG4gICAgaWYgKGNoaWxkLnR5cGUgPT09IEZyYWdtZW50KSB7XG4gICAgICBpZiAoY2hpbGQucGF0Y2hGbGFnICYgMTI4KSBrZXllZEZyYWdtZW50Q291bnQrKztcbiAgICAgIHJldCA9IHJldC5jb25jYXQoXG4gICAgICAgIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihjaGlsZC5jaGlsZHJlbiwga2VlcENvbW1lbnQsIGtleSlcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChrZWVwQ29tbWVudCB8fCBjaGlsZC50eXBlICE9PSBDb21tZW50KSB7XG4gICAgICByZXQucHVzaChrZXkgIT0gbnVsbCA/IGNsb25lVk5vZGUoY2hpbGQsIHsga2V5IH0pIDogY2hpbGQpO1xuICAgIH1cbiAgfVxuICBpZiAoa2V5ZWRGcmFnbWVudENvdW50ID4gMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXRbaV0ucGF0Y2hGbGFnID0gLTI7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIEBfX05PX1NJREVfRUZGRUNUU19fXG5mdW5jdGlvbiBkZWZpbmVDb21wb25lbnQob3B0aW9ucywgZXh0cmFPcHRpb25zKSB7XG4gIHJldHVybiBpc0Z1bmN0aW9uKG9wdGlvbnMpID8gKFxuICAgIC8vICM4MjM2OiBleHRlbmQgY2FsbCBhbmQgb3B0aW9ucy5uYW1lIGFjY2VzcyBhcmUgY29uc2lkZXJlZCBzaWRlLWVmZmVjdHNcbiAgICAvLyBieSBSb2xsdXAsIHNvIHdlIGhhdmUgdG8gd3JhcCBpdCBpbiBhIHB1cmUtYW5ub3RhdGVkIElJRkUuXG4gICAgLyogQF9fUFVSRV9fICovICgoKSA9PiBleHRlbmQoeyBuYW1lOiBvcHRpb25zLm5hbWUgfSwgZXh0cmFPcHRpb25zLCB7IHNldHVwOiBvcHRpb25zIH0pKSgpXG4gICkgOiBvcHRpb25zO1xufVxuXG5mdW5jdGlvbiB1c2VJZCgpIHtcbiAgY29uc3QgaSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBpZiAoaSkge1xuICAgIHJldHVybiAoaS5hcHBDb250ZXh0LmNvbmZpZy5pZFByZWZpeCB8fCBcInZcIikgKyBcIi1cIiArIGkuaWRzWzBdICsgaS5pZHNbMV0rKztcbiAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgd2FybiQxKFxuICAgICAgYHVzZUlkKCkgaXMgY2FsbGVkIHdoZW4gdGhlcmUgaXMgbm8gYWN0aXZlIGNvbXBvbmVudCBpbnN0YW5jZSB0byBiZSBhc3NvY2lhdGVkIHdpdGguYFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIFwiXCI7XG59XG5mdW5jdGlvbiBtYXJrQXN5bmNCb3VuZGFyeShpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5pZHMgPSBbaW5zdGFuY2UuaWRzWzBdICsgaW5zdGFuY2UuaWRzWzJdKysgKyBcIi1cIiwgMCwgMF07XG59XG5cbmNvbnN0IGtub3duVGVtcGxhdGVSZWZzID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrU2V0KCk7XG5mdW5jdGlvbiB1c2VUZW1wbGF0ZVJlZihrZXkpIHtcbiAgY29uc3QgaSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBjb25zdCByID0gc2hhbGxvd1JlZihudWxsKTtcbiAgaWYgKGkpIHtcbiAgICBjb25zdCByZWZzID0gaS5yZWZzID09PSBFTVBUWV9PQkogPyBpLnJlZnMgPSB7fSA6IGkucmVmcztcbiAgICBsZXQgZGVzYztcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAoZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocmVmcywga2V5KSkgJiYgIWRlc2MuY29uZmlndXJhYmxlKSB7XG4gICAgICB3YXJuJDEoYHVzZVRlbXBsYXRlUmVmKCcke2tleX0nKSBhbHJlYWR5IGV4aXN0cy5gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlZnMsIGtleSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6ICgpID0+IHIudmFsdWUsXG4gICAgICAgIHNldDogKHZhbCkgPT4gci52YWx1ZSA9IHZhbFxuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICB3YXJuJDEoXG4gICAgICBgdXNlVGVtcGxhdGVSZWYoKSBpcyBjYWxsZWQgd2hlbiB0aGVyZSBpcyBubyBhY3RpdmUgY29tcG9uZW50IGluc3RhbmNlIHRvIGJlIGFzc29jaWF0ZWQgd2l0aC5gXG4gICAgKTtcbiAgfVxuICBjb25zdCByZXQgPSAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpID8gcmVhZG9ubHkocikgOiByO1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIGtub3duVGVtcGxhdGVSZWZzLmFkZChyZXQpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmNvbnN0IHBlbmRpbmdTZXRSZWZNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHNldFJlZihyYXdSZWYsIG9sZFJhd1JlZiwgcGFyZW50U3VzcGVuc2UsIHZub2RlLCBpc1VubW91bnQgPSBmYWxzZSkge1xuICBpZiAoaXNBcnJheShyYXdSZWYpKSB7XG4gICAgcmF3UmVmLmZvckVhY2goXG4gICAgICAociwgaSkgPT4gc2V0UmVmKFxuICAgICAgICByLFxuICAgICAgICBvbGRSYXdSZWYgJiYgKGlzQXJyYXkob2xkUmF3UmVmKSA/IG9sZFJhd1JlZltpXSA6IG9sZFJhd1JlZiksXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgaXNVbm1vdW50XG4gICAgICApXG4gICAgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGlzQXN5bmNXcmFwcGVyKHZub2RlKSAmJiAhaXNVbm1vdW50KSB7XG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDUxMiAmJiB2bm9kZS50eXBlLl9fYXN5bmNSZXNvbHZlZCAmJiB2bm9kZS5jb21wb25lbnQuc3ViVHJlZS5jb21wb25lbnQpIHtcbiAgICAgIHNldFJlZihyYXdSZWYsIG9sZFJhd1JlZiwgcGFyZW50U3VzcGVuc2UsIHZub2RlLmNvbXBvbmVudC5zdWJUcmVlKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHJlZlZhbHVlID0gdm5vZGUuc2hhcGVGbGFnICYgNCA/IGdldENvbXBvbmVudFB1YmxpY0luc3RhbmNlKHZub2RlLmNvbXBvbmVudCkgOiB2bm9kZS5lbDtcbiAgY29uc3QgdmFsdWUgPSBpc1VubW91bnQgPyBudWxsIDogcmVmVmFsdWU7XG4gIGNvbnN0IHsgaTogb3duZXIsIHI6IHJlZiB9ID0gcmF3UmVmO1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAhb3duZXIpIHtcbiAgICB3YXJuJDEoXG4gICAgICBgTWlzc2luZyByZWYgb3duZXIgY29udGV4dC4gcmVmIGNhbm5vdCBiZSB1c2VkIG9uIGhvaXN0ZWQgdm5vZGVzLiBBIHZub2RlIHdpdGggcmVmIG11c3QgYmUgY3JlYXRlZCBpbnNpZGUgdGhlIHJlbmRlciBmdW5jdGlvbi5gXG4gICAgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgb2xkUmVmID0gb2xkUmF3UmVmICYmIG9sZFJhd1JlZi5yO1xuICBjb25zdCByZWZzID0gb3duZXIucmVmcyA9PT0gRU1QVFlfT0JKID8gb3duZXIucmVmcyA9IHt9IDogb3duZXIucmVmcztcbiAgY29uc3Qgc2V0dXBTdGF0ZSA9IG93bmVyLnNldHVwU3RhdGU7XG4gIGNvbnN0IHJhd1NldHVwU3RhdGUgPSB0b1JhdyhzZXR1cFN0YXRlKTtcbiAgY29uc3QgY2FuU2V0U2V0dXBSZWYgPSBzZXR1cFN0YXRlID09PSBFTVBUWV9PQkogPyBOTyA6IChrZXkpID0+IHtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgaWYgKGhhc093bihyYXdTZXR1cFN0YXRlLCBrZXkpICYmICFpc1JlZihyYXdTZXR1cFN0YXRlW2tleV0pKSB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBgVGVtcGxhdGUgcmVmIFwiJHtrZXl9XCIgdXNlZCBvbiBhIG5vbi1yZWYgdmFsdWUuIEl0IHdpbGwgbm90IHdvcmsgaW4gdGhlIHByb2R1Y3Rpb24gYnVpbGQuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGtub3duVGVtcGxhdGVSZWZzLmhhcyhyYXdTZXR1cFN0YXRlW2tleV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhhc093bihyYXdTZXR1cFN0YXRlLCBrZXkpO1xuICB9O1xuICBjb25zdCBjYW5TZXRSZWYgPSAocmVmMikgPT4ge1xuICAgIHJldHVybiAhISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCAha25vd25UZW1wbGF0ZVJlZnMuaGFzKHJlZjIpO1xuICB9O1xuICBpZiAob2xkUmVmICE9IG51bGwgJiYgb2xkUmVmICE9PSByZWYpIHtcbiAgICBpbnZhbGlkYXRlUGVuZGluZ1NldFJlZihvbGRSYXdSZWYpO1xuICAgIGlmIChpc1N0cmluZyhvbGRSZWYpKSB7XG4gICAgICByZWZzW29sZFJlZl0gPSBudWxsO1xuICAgICAgaWYgKGNhblNldFNldHVwUmVmKG9sZFJlZikpIHtcbiAgICAgICAgc2V0dXBTdGF0ZVtvbGRSZWZdID0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUmVmKG9sZFJlZikpIHtcbiAgICAgIGlmIChjYW5TZXRSZWYob2xkUmVmKSkge1xuICAgICAgICBvbGRSZWYudmFsdWUgPSBudWxsO1xuICAgICAgfVxuICAgICAgY29uc3Qgb2xkUmF3UmVmQXRvbSA9IG9sZFJhd1JlZjtcbiAgICAgIGlmIChvbGRSYXdSZWZBdG9tLmspIHJlZnNbb2xkUmF3UmVmQXRvbS5rXSA9IG51bGw7XG4gICAgfVxuICB9XG4gIGlmIChpc0Z1bmN0aW9uKHJlZikpIHtcbiAgICBjYWxsV2l0aEVycm9ySGFuZGxpbmcocmVmLCBvd25lciwgMTIsIFt2YWx1ZSwgcmVmc10pO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IF9pc1N0cmluZyA9IGlzU3RyaW5nKHJlZik7XG4gICAgY29uc3QgX2lzUmVmID0gaXNSZWYocmVmKTtcbiAgICBpZiAoX2lzU3RyaW5nIHx8IF9pc1JlZikge1xuICAgICAgY29uc3QgZG9TZXQgPSAoKSA9PiB7XG4gICAgICAgIGlmIChyYXdSZWYuZikge1xuICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gX2lzU3RyaW5nID8gY2FuU2V0U2V0dXBSZWYocmVmKSA/IHNldHVwU3RhdGVbcmVmXSA6IHJlZnNbcmVmXSA6IGNhblNldFJlZihyZWYpIHx8ICFyYXdSZWYuayA/IHJlZi52YWx1ZSA6IHJlZnNbcmF3UmVmLmtdO1xuICAgICAgICAgIGlmIChpc1VubW91bnQpIHtcbiAgICAgICAgICAgIGlzQXJyYXkoZXhpc3RpbmcpICYmIHJlbW92ZShleGlzdGluZywgcmVmVmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWlzQXJyYXkoZXhpc3RpbmcpKSB7XG4gICAgICAgICAgICAgIGlmIChfaXNTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICByZWZzW3JlZl0gPSBbcmVmVmFsdWVdO1xuICAgICAgICAgICAgICAgIGlmIChjYW5TZXRTZXR1cFJlZihyZWYpKSB7XG4gICAgICAgICAgICAgICAgICBzZXR1cFN0YXRlW3JlZl0gPSByZWZzW3JlZl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ZhbCA9IFtyZWZWYWx1ZV07XG4gICAgICAgICAgICAgICAgaWYgKGNhblNldFJlZihyZWYpKSB7XG4gICAgICAgICAgICAgICAgICByZWYudmFsdWUgPSBuZXdWYWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyYXdSZWYuaykgcmVmc1tyYXdSZWYua10gPSBuZXdWYWw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWV4aXN0aW5nLmluY2x1ZGVzKHJlZlZhbHVlKSkge1xuICAgICAgICAgICAgICBleGlzdGluZy5wdXNoKHJlZlZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoX2lzU3RyaW5nKSB7XG4gICAgICAgICAgcmVmc1tyZWZdID0gdmFsdWU7XG4gICAgICAgICAgaWYgKGNhblNldFNldHVwUmVmKHJlZikpIHtcbiAgICAgICAgICAgIHNldHVwU3RhdGVbcmVmXSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChfaXNSZWYpIHtcbiAgICAgICAgICBpZiAoY2FuU2V0UmVmKHJlZikpIHtcbiAgICAgICAgICAgIHJlZi52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmF3UmVmLmspIHJlZnNbcmF3UmVmLmtdID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgIHdhcm4kMShcIkludmFsaWQgdGVtcGxhdGUgcmVmIHR5cGU6XCIsIHJlZiwgYCgke3R5cGVvZiByZWZ9KWApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGpvYiA9ICgpID0+IHtcbiAgICAgICAgICBkb1NldCgpO1xuICAgICAgICAgIHBlbmRpbmdTZXRSZWZNYXAuZGVsZXRlKHJhd1JlZik7XG4gICAgICAgIH07XG4gICAgICAgIGpvYi5pZCA9IC0xO1xuICAgICAgICBwZW5kaW5nU2V0UmVmTWFwLnNldChyYXdSZWYsIGpvYik7XG4gICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChqb2IsIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludmFsaWRhdGVQZW5kaW5nU2V0UmVmKHJhd1JlZik7XG4gICAgICAgIGRvU2V0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICB3YXJuJDEoXCJJbnZhbGlkIHRlbXBsYXRlIHJlZiB0eXBlOlwiLCByZWYsIGAoJHt0eXBlb2YgcmVmfSlgKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGludmFsaWRhdGVQZW5kaW5nU2V0UmVmKHJhd1JlZikge1xuICBjb25zdCBwZW5kaW5nU2V0UmVmID0gcGVuZGluZ1NldFJlZk1hcC5nZXQocmF3UmVmKTtcbiAgaWYgKHBlbmRpbmdTZXRSZWYpIHtcbiAgICBwZW5kaW5nU2V0UmVmLmZsYWdzIHw9IDg7XG4gICAgcGVuZGluZ1NldFJlZk1hcC5kZWxldGUocmF3UmVmKTtcbiAgfVxufVxuXG5sZXQgaGFzTG9nZ2VkTWlzbWF0Y2hFcnJvciA9IGZhbHNlO1xuY29uc3QgbG9nTWlzbWF0Y2hFcnJvciA9ICgpID0+IHtcbiAgaWYgKGhhc0xvZ2dlZE1pc21hdGNoRXJyb3IpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc29sZS5lcnJvcihcIkh5ZHJhdGlvbiBjb21wbGV0ZWQgYnV0IGNvbnRhaW5zIG1pc21hdGNoZXMuXCIpO1xuICBoYXNMb2dnZWRNaXNtYXRjaEVycm9yID0gdHJ1ZTtcbn07XG5jb25zdCBpc1NWR0NvbnRhaW5lciA9IChjb250YWluZXIpID0+IGNvbnRhaW5lci5uYW1lc3BhY2VVUkkuaW5jbHVkZXMoXCJzdmdcIikgJiYgY29udGFpbmVyLnRhZ05hbWUgIT09IFwiZm9yZWlnbk9iamVjdFwiO1xuY29uc3QgaXNNYXRoTUxDb250YWluZXIgPSAoY29udGFpbmVyKSA9PiBjb250YWluZXIubmFtZXNwYWNlVVJJLmluY2x1ZGVzKFwiTWF0aE1MXCIpO1xuY29uc3QgZ2V0Q29udGFpbmVyVHlwZSA9IChjb250YWluZXIpID0+IHtcbiAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSAhPT0gMSkgcmV0dXJuIHZvaWQgMDtcbiAgaWYgKGlzU1ZHQ29udGFpbmVyKGNvbnRhaW5lcikpIHJldHVybiBcInN2Z1wiO1xuICBpZiAoaXNNYXRoTUxDb250YWluZXIoY29udGFpbmVyKSkgcmV0dXJuIFwibWF0aG1sXCI7XG4gIHJldHVybiB2b2lkIDA7XG59O1xuY29uc3QgaXNDb21tZW50ID0gKG5vZGUpID0+IG5vZGUubm9kZVR5cGUgPT09IDg7XG5mdW5jdGlvbiBjcmVhdGVIeWRyYXRpb25GdW5jdGlvbnMocmVuZGVyZXJJbnRlcm5hbHMpIHtcbiAgY29uc3Qge1xuICAgIG10OiBtb3VudENvbXBvbmVudCxcbiAgICBwOiBwYXRjaCxcbiAgICBvOiB7XG4gICAgICBwYXRjaFByb3AsXG4gICAgICBjcmVhdGVUZXh0LFxuICAgICAgbmV4dFNpYmxpbmcsXG4gICAgICBwYXJlbnROb2RlLFxuICAgICAgcmVtb3ZlLFxuICAgICAgaW5zZXJ0LFxuICAgICAgY3JlYXRlQ29tbWVudFxuICAgIH1cbiAgfSA9IHJlbmRlcmVySW50ZXJuYWxzO1xuICBjb25zdCBoeWRyYXRlID0gKHZub2RlLCBjb250YWluZXIpID0+IHtcbiAgICBpZiAoIWNvbnRhaW5lci5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IF9fVlVFX1BST0RfSFlEUkFUSU9OX01JU01BVENIX0RFVEFJTFNfXykgJiYgd2FybiQxKFxuICAgICAgICBgQXR0ZW1wdGluZyB0byBoeWRyYXRlIGV4aXN0aW5nIG1hcmt1cCBidXQgY29udGFpbmVyIGlzIGVtcHR5LiBQZXJmb3JtaW5nIGZ1bGwgbW91bnQgaW5zdGVhZC5gXG4gICAgICApO1xuICAgICAgcGF0Y2gobnVsbCwgdm5vZGUsIGNvbnRhaW5lcik7XG4gICAgICBmbHVzaFBvc3RGbHVzaENicygpO1xuICAgICAgY29udGFpbmVyLl92bm9kZSA9IHZub2RlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBoeWRyYXRlTm9kZShjb250YWluZXIuZmlyc3RDaGlsZCwgdm5vZGUsIG51bGwsIG51bGwsIG51bGwpO1xuICAgIGZsdXNoUG9zdEZsdXNoQ2JzKCk7XG4gICAgY29udGFpbmVyLl92bm9kZSA9IHZub2RlO1xuICB9O1xuICBjb25zdCBoeWRyYXRlTm9kZSA9IChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQgPSBmYWxzZSkgPT4ge1xuICAgIG9wdGltaXplZCA9IG9wdGltaXplZCB8fCAhIXZub2RlLmR5bmFtaWNDaGlsZHJlbjtcbiAgICBjb25zdCBpc0ZyYWdtZW50U3RhcnQgPSBpc0NvbW1lbnQobm9kZSkgJiYgbm9kZS5kYXRhID09PSBcIltcIjtcbiAgICBjb25zdCBvbk1pc21hdGNoID0gKCkgPT4gaGFuZGxlTWlzbWF0Y2goXG4gICAgICBub2RlLFxuICAgICAgdm5vZGUsXG4gICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgIGlzRnJhZ21lbnRTdGFydFxuICAgICk7XG4gICAgY29uc3QgeyB0eXBlLCByZWYsIHNoYXBlRmxhZywgcGF0Y2hGbGFnIH0gPSB2bm9kZTtcbiAgICBsZXQgZG9tVHlwZSA9IG5vZGUubm9kZVR5cGU7XG4gICAgdm5vZGUuZWwgPSBub2RlO1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgZGVmKG5vZGUsIFwiX192bm9kZVwiLCB2bm9kZSwgdHJ1ZSk7XG4gICAgICBkZWYobm9kZSwgXCJfX3Z1ZVBhcmVudENvbXBvbmVudFwiLCBwYXJlbnRDb21wb25lbnQsIHRydWUpO1xuICAgIH1cbiAgICBpZiAocGF0Y2hGbGFnID09PSAtMikge1xuICAgICAgb3B0aW1pemVkID0gZmFsc2U7XG4gICAgICB2bm9kZS5keW5hbWljQ2hpbGRyZW4gPSBudWxsO1xuICAgIH1cbiAgICBsZXQgbmV4dE5vZGUgPSBudWxsO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBUZXh0OlxuICAgICAgICBpZiAoZG9tVHlwZSAhPT0gMykge1xuICAgICAgICAgIGlmICh2bm9kZS5jaGlsZHJlbiA9PT0gXCJcIikge1xuICAgICAgICAgICAgaW5zZXJ0KHZub2RlLmVsID0gY3JlYXRlVGV4dChcIlwiKSwgcGFyZW50Tm9kZShub2RlKSwgbm9kZSk7XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IG5vZGU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobm9kZS5kYXRhICE9PSB2bm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgfHwgX19WVUVfUFJPRF9IWURSQVRJT05fTUlTTUFUQ0hfREVUQUlMU19fKSAmJiB3YXJuJDEoXG4gICAgICAgICAgICAgIGBIeWRyYXRpb24gdGV4dCBtaXNtYXRjaCBpbmAsXG4gICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZSxcbiAgICAgICAgICAgICAgYFxuICAtIHJlbmRlcmVkIG9uIHNlcnZlcjogJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgICAgICBub2RlLmRhdGFcbiAgICAgICAgICAgICAgKX1cbiAgLSBleHBlY3RlZCBvbiBjbGllbnQ6ICR7SlNPTi5zdHJpbmdpZnkodm5vZGUuY2hpbGRyZW4pfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBsb2dNaXNtYXRjaEVycm9yKCk7XG4gICAgICAgICAgICBub2RlLmRhdGEgPSB2bm9kZS5jaGlsZHJlbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQ29tbWVudDpcbiAgICAgICAgaWYgKGlzVGVtcGxhdGVOb2RlKG5vZGUpKSB7XG4gICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgICByZXBsYWNlTm9kZShcbiAgICAgICAgICAgIHZub2RlLmVsID0gbm9kZS5jb250ZW50LmZpcnN0Q2hpbGQsXG4gICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50XG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChkb21UeXBlICE9PSA4IHx8IGlzRnJhZ21lbnRTdGFydCkge1xuICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHROb2RlID0gbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFN0YXRpYzpcbiAgICAgICAgaWYgKGlzRnJhZ21lbnRTdGFydCkge1xuICAgICAgICAgIG5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgICBkb21UeXBlID0gbm9kZS5ub2RlVHlwZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZG9tVHlwZSA9PT0gMSB8fCBkb21UeXBlID09PSAzKSB7XG4gICAgICAgICAgbmV4dE5vZGUgPSBub2RlO1xuICAgICAgICAgIGNvbnN0IG5lZWRUb0Fkb3B0Q29udGVudCA9ICF2bm9kZS5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2bm9kZS5zdGF0aWNDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAobmVlZFRvQWRvcHRDb250ZW50KVxuICAgICAgICAgICAgICB2bm9kZS5jaGlsZHJlbiArPSBuZXh0Tm9kZS5ub2RlVHlwZSA9PT0gMSA/IG5leHROb2RlLm91dGVySFRNTCA6IG5leHROb2RlLmRhdGE7XG4gICAgICAgICAgICBpZiAoaSA9PT0gdm5vZGUuc3RhdGljQ291bnQgLSAxKSB7XG4gICAgICAgICAgICAgIHZub2RlLmFuY2hvciA9IG5leHROb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhuZXh0Tm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpc0ZyYWdtZW50U3RhcnQgPyBuZXh0U2libGluZyhuZXh0Tm9kZSkgOiBuZXh0Tm9kZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbk1pc21hdGNoKCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEZyYWdtZW50OlxuICAgICAgICBpZiAoIWlzRnJhZ21lbnRTdGFydCkge1xuICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHROb2RlID0gaHlkcmF0ZUZyYWdtZW50KFxuICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgIHZub2RlLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDEpIHtcbiAgICAgICAgICBpZiAoKGRvbVR5cGUgIT09IDEgfHwgdm5vZGUudHlwZS50b0xvd2VyQ2FzZSgpICE9PSBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSkgJiYgIWlzVGVtcGxhdGVOb2RlKG5vZGUpKSB7XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV4dE5vZGUgPSBoeWRyYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZUZsYWcgJiA2KSB7XG4gICAgICAgICAgdm5vZGUuc2xvdFNjb3BlSWRzID0gc2xvdFNjb3BlSWRzO1xuICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudE5vZGUobm9kZSk7XG4gICAgICAgICAgaWYgKGlzRnJhZ21lbnRTdGFydCkge1xuICAgICAgICAgICAgbmV4dE5vZGUgPSBsb2NhdGVDbG9zaW5nQW5jaG9yKG5vZGUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNDb21tZW50KG5vZGUpICYmIG5vZGUuZGF0YSA9PT0gXCJ0ZWxlcG9ydCBzdGFydFwiKSB7XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IGxvY2F0ZUNsb3NpbmdBbmNob3Iobm9kZSwgbm9kZS5kYXRhLCBcInRlbGVwb3J0IGVuZFwiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbW91bnRDb21wb25lbnQoXG4gICAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIGdldENvbnRhaW5lclR5cGUoY29udGFpbmVyKSxcbiAgICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKGlzQXN5bmNXcmFwcGVyKHZub2RlKSAmJiAhdm5vZGUudHlwZS5fX2FzeW5jUmVzb2x2ZWQpIHtcbiAgICAgICAgICAgIGxldCBzdWJUcmVlO1xuICAgICAgICAgICAgaWYgKGlzRnJhZ21lbnRTdGFydCkge1xuICAgICAgICAgICAgICBzdWJUcmVlID0gY3JlYXRlVk5vZGUoRnJhZ21lbnQpO1xuICAgICAgICAgICAgICBzdWJUcmVlLmFuY2hvciA9IG5leHROb2RlID8gbmV4dE5vZGUucHJldmlvdXNTaWJsaW5nIDogY29udGFpbmVyLmxhc3RDaGlsZDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN1YlRyZWUgPSBub2RlLm5vZGVUeXBlID09PSAzID8gY3JlYXRlVGV4dFZOb2RlKFwiXCIpIDogY3JlYXRlVk5vZGUoXCJkaXZcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJUcmVlLmVsID0gbm9kZTtcbiAgICAgICAgICAgIHZub2RlLmNvbXBvbmVudC5zdWJUcmVlID0gc3ViVHJlZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVGbGFnICYgNjQpIHtcbiAgICAgICAgICBpZiAoZG9tVHlwZSAhPT0gOCkge1xuICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5leHROb2RlID0gdm5vZGUudHlwZS5oeWRyYXRlKFxuICAgICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgICBvcHRpbWl6ZWQsXG4gICAgICAgICAgICAgIHJlbmRlcmVySW50ZXJuYWxzLFxuICAgICAgICAgICAgICBoeWRyYXRlQ2hpbGRyZW5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlRmxhZyAmIDEyOCkge1xuICAgICAgICAgIG5leHROb2RlID0gdm5vZGUudHlwZS5oeWRyYXRlKFxuICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgIHZub2RlLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICBnZXRDb250YWluZXJUeXBlKHBhcmVudE5vZGUobm9kZSkpLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkLFxuICAgICAgICAgICAgcmVuZGVyZXJJbnRlcm5hbHMsXG4gICAgICAgICAgICBoeWRyYXRlTm9kZVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCBfX1ZVRV9QUk9EX0hZRFJBVElPTl9NSVNNQVRDSF9ERVRBSUxTX18pIHtcbiAgICAgICAgICB3YXJuJDEoXCJJbnZhbGlkIEhvc3RWTm9kZSB0eXBlOlwiLCB0eXBlLCBgKCR7dHlwZW9mIHR5cGV9KWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChyZWYgIT0gbnVsbCkge1xuICAgICAgc2V0UmVmKHJlZiwgbnVsbCwgcGFyZW50U3VzcGVuc2UsIHZub2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHROb2RlO1xuICB9O1xuICBjb25zdCBoeWRyYXRlRWxlbWVudCA9IChlbCwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgb3B0aW1pemVkID0gb3B0aW1pemVkIHx8ICEhdm5vZGUuZHluYW1pY0NoaWxkcmVuO1xuICAgIGNvbnN0IHsgdHlwZSwgcHJvcHMsIHBhdGNoRmxhZywgc2hhcGVGbGFnLCBkaXJzLCB0cmFuc2l0aW9uIH0gPSB2bm9kZTtcbiAgICBjb25zdCBmb3JjZVBhdGNoID0gdHlwZSA9PT0gXCJpbnB1dFwiIHx8IHR5cGUgPT09IFwib3B0aW9uXCI7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgfHwgZm9yY2VQYXRjaCB8fCBwYXRjaEZsYWcgIT09IC0xKSB7XG4gICAgICBpZiAoZGlycykge1xuICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIFwiY3JlYXRlZFwiKTtcbiAgICAgIH1cbiAgICAgIGxldCBuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcyA9IGZhbHNlO1xuICAgICAgaWYgKGlzVGVtcGxhdGVOb2RlKGVsKSkge1xuICAgICAgICBuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcyA9IG5lZWRUcmFuc2l0aW9uKFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgLy8gbm8gbmVlZCBjaGVjayBwYXJlbnRTdXNwZW5zZSBpbiBoeWRyYXRpb25cbiAgICAgICAgICB0cmFuc2l0aW9uXG4gICAgICAgICkgJiYgcGFyZW50Q29tcG9uZW50ICYmIHBhcmVudENvbXBvbmVudC52bm9kZS5wcm9wcyAmJiBwYXJlbnRDb21wb25lbnQudm5vZGUucHJvcHMuYXBwZWFyO1xuICAgICAgICBjb25zdCBjb250ZW50ID0gZWwuY29udGVudC5maXJzdENoaWxkO1xuICAgICAgICBpZiAobmVlZENhbGxUcmFuc2l0aW9uSG9va3MpIHtcbiAgICAgICAgICBjb25zdCBjbHMgPSBjb250ZW50LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpO1xuICAgICAgICAgIGlmIChjbHMpIGNvbnRlbnQuJGNscyA9IGNscztcbiAgICAgICAgICB0cmFuc2l0aW9uLmJlZm9yZUVudGVyKGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJlcGxhY2VOb2RlKGNvbnRlbnQsIGVsLCBwYXJlbnRDb21wb25lbnQpO1xuICAgICAgICB2bm9kZS5lbCA9IGVsID0gY29udGVudDtcbiAgICAgIH1cbiAgICAgIGlmIChzaGFwZUZsYWcgJiAxNiAmJiAvLyBza2lwIGlmIGVsZW1lbnQgaGFzIGlubmVySFRNTCAvIHRleHRDb250ZW50XG4gICAgICAhKHByb3BzICYmIChwcm9wcy5pbm5lckhUTUwgfHwgcHJvcHMudGV4dENvbnRlbnQpKSkge1xuICAgICAgICBsZXQgbmV4dCA9IGh5ZHJhdGVDaGlsZHJlbihcbiAgICAgICAgICBlbC5maXJzdENoaWxkLFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGVsLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICAgIGxldCBoYXNXYXJuZWQgPSBmYWxzZTtcbiAgICAgICAgd2hpbGUgKG5leHQpIHtcbiAgICAgICAgICBpZiAoIWlzTWlzbWF0Y2hBbGxvd2VkKGVsLCAxIC8qIENISUxEUkVOICovKSkge1xuICAgICAgICAgICAgaWYgKCghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IF9fVlVFX1BST0RfSFlEUkFUSU9OX01JU01BVENIX0RFVEFJTFNfXykgJiYgIWhhc1dhcm5lZCkge1xuICAgICAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAgICAgYEh5ZHJhdGlvbiBjaGlsZHJlbiBtaXNtYXRjaCBvbmAsXG4gICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgYFxuU2VydmVyIHJlbmRlcmVkIGVsZW1lbnQgY29udGFpbnMgbW9yZSBjaGlsZCBub2RlcyB0aGFuIGNsaWVudCB2ZG9tLmBcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgaGFzV2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZ01pc21hdGNoRXJyb3IoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgY3VyID0gbmV4dDtcbiAgICAgICAgICBuZXh0ID0gbmV4dC5uZXh0U2libGluZztcbiAgICAgICAgICByZW1vdmUoY3VyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzaGFwZUZsYWcgJiA4KSB7XG4gICAgICAgIGxldCBjbGllbnRUZXh0ID0gdm5vZGUuY2hpbGRyZW47XG4gICAgICAgIGlmIChjbGllbnRUZXh0WzBdID09PSBcIlxcblwiICYmIChlbC50YWdOYW1lID09PSBcIlBSRVwiIHx8IGVsLnRhZ05hbWUgPT09IFwiVEVYVEFSRUFcIikpIHtcbiAgICAgICAgICBjbGllbnRUZXh0ID0gY2xpZW50VGV4dC5zbGljZSgxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWwudGV4dENvbnRlbnQgIT09IGNsaWVudFRleHQpIHtcbiAgICAgICAgICBpZiAoIWlzTWlzbWF0Y2hBbGxvd2VkKGVsLCAwIC8qIFRFWFQgKi8pKSB7XG4gICAgICAgICAgICAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCBfX1ZVRV9QUk9EX0hZRFJBVElPTl9NSVNNQVRDSF9ERVRBSUxTX18pICYmIHdhcm4kMShcbiAgICAgICAgICAgICAgYEh5ZHJhdGlvbiB0ZXh0IGNvbnRlbnQgbWlzbWF0Y2ggb25gLFxuICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgYFxuICAtIHJlbmRlcmVkIG9uIHNlcnZlcjogJHtlbC50ZXh0Q29udGVudH1cbiAgLSBleHBlY3RlZCBvbiBjbGllbnQ6ICR7dm5vZGUuY2hpbGRyZW59YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGxvZ01pc21hdGNoRXJyb3IoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWwudGV4dENvbnRlbnQgPSB2bm9kZS5jaGlsZHJlbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IF9fVlVFX1BST0RfSFlEUkFUSU9OX01JU01BVENIX0RFVEFJTFNfXyB8fCBmb3JjZVBhdGNoIHx8ICFvcHRpbWl6ZWQgfHwgcGF0Y2hGbGFnICYgKDE2IHwgMzIpKSB7XG4gICAgICAgICAgY29uc3QgaXNDdXN0b21FbGVtZW50ID0gZWwudGFnTmFtZS5pbmNsdWRlcyhcIi1cIik7XG4gICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgIGlmICgoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCBfX1ZVRV9QUk9EX0hZRFJBVElPTl9NSVNNQVRDSF9ERVRBSUxTX18pICYmIC8vICMxMTE4OSBza2lwIGlmIHRoaXMgbm9kZSBoYXMgZGlyZWN0aXZlcyB0aGF0IGhhdmUgY3JlYXRlZCBob29rc1xuICAgICAgICAgICAgLy8gYXMgaXQgY291bGQgaGF2ZSBtdXRhdGVkIHRoZSBET00gaW4gYW55IHBvc3NpYmxlIHdheVxuICAgICAgICAgICAgIShkaXJzICYmIGRpcnMuc29tZSgoZCkgPT4gZC5kaXIuY3JlYXRlZCkpICYmIHByb3BIYXNNaXNtYXRjaChlbCwga2V5LCBwcm9wc1trZXldLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50KSkge1xuICAgICAgICAgICAgICBsb2dNaXNtYXRjaEVycm9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZm9yY2VQYXRjaCAmJiAoa2V5LmVuZHNXaXRoKFwidmFsdWVcIikgfHwga2V5ID09PSBcImluZGV0ZXJtaW5hdGVcIikgfHwgaXNPbihrZXkpICYmICFpc1Jlc2VydmVkUHJvcChrZXkpIHx8IC8vIGZvcmNlIGh5ZHJhdGUgdi1iaW5kIHdpdGggLnByb3AgbW9kaWZpZXJzXG4gICAgICAgICAgICBrZXlbMF0gPT09IFwiLlwiIHx8IGlzQ3VzdG9tRWxlbWVudCkge1xuICAgICAgICAgICAgICBwYXRjaFByb3AoZWwsIGtleSwgbnVsbCwgcHJvcHNba2V5XSwgdm9pZCAwLCBwYXJlbnRDb21wb25lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwcm9wcy5vbkNsaWNrKSB7XG4gICAgICAgICAgcGF0Y2hQcm9wKFxuICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICBcIm9uQ2xpY2tcIixcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBwcm9wcy5vbkNsaWNrLFxuICAgICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50XG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXRjaEZsYWcgJiA0ICYmIGlzUmVhY3RpdmUocHJvcHMuc3R5bGUpKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMuc3R5bGUpIHByb3BzLnN0eWxlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCB2bm9kZUhvb2tzO1xuICAgICAgaWYgKHZub2RlSG9va3MgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlQmVmb3JlTW91bnQpIHtcbiAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9va3MsIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgICAgfVxuICAgICAgaWYgKGRpcnMpIHtcbiAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBcImJlZm9yZU1vdW50XCIpO1xuICAgICAgfVxuICAgICAgaWYgKCh2bm9kZUhvb2tzID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZU1vdW50ZWQpIHx8IGRpcnMgfHwgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MpIHtcbiAgICAgICAgcXVldWVFZmZlY3RXaXRoU3VzcGVuc2UoKCkgPT4ge1xuICAgICAgICAgIHZub2RlSG9va3MgJiYgaW52b2tlVk5vZGVIb29rKHZub2RlSG9va3MsIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgICAgICAgIG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzICYmIHRyYW5zaXRpb24uZW50ZXIoZWwpO1xuICAgICAgICAgIGRpcnMgJiYgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBcIm1vdW50ZWRcIik7XG4gICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsLm5leHRTaWJsaW5nO1xuICB9O1xuICBjb25zdCBoeWRyYXRlQ2hpbGRyZW4gPSAobm9kZSwgcGFyZW50Vk5vZGUsIGNvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBvcHRpbWl6ZWQgPSBvcHRpbWl6ZWQgfHwgISFwYXJlbnRWTm9kZS5keW5hbWljQ2hpbGRyZW47XG4gICAgY29uc3QgY2hpbGRyZW4gPSBwYXJlbnRWTm9kZS5jaGlsZHJlbjtcbiAgICBjb25zdCBsID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgIGxldCBoYXNXYXJuZWQgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgY29uc3Qgdm5vZGUgPSBvcHRpbWl6ZWQgPyBjaGlsZHJlbltpXSA6IGNoaWxkcmVuW2ldID0gbm9ybWFsaXplVk5vZGUoY2hpbGRyZW5baV0pO1xuICAgICAgY29uc3QgaXNUZXh0ID0gdm5vZGUudHlwZSA9PT0gVGV4dDtcbiAgICAgIGlmIChub2RlKSB7XG4gICAgICAgIGlmIChpc1RleHQgJiYgIW9wdGltaXplZCkge1xuICAgICAgICAgIGlmIChpICsgMSA8IGwgJiYgbm9ybWFsaXplVk5vZGUoY2hpbGRyZW5baSArIDFdKS50eXBlID09PSBUZXh0KSB7XG4gICAgICAgICAgICBpbnNlcnQoXG4gICAgICAgICAgICAgIGNyZWF0ZVRleHQoXG4gICAgICAgICAgICAgICAgbm9kZS5kYXRhLnNsaWNlKHZub2RlLmNoaWxkcmVuLmxlbmd0aClcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgICBuZXh0U2libGluZyhub2RlKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG5vZGUuZGF0YSA9IHZub2RlLmNoaWxkcmVuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBub2RlID0gaHlkcmF0ZU5vZGUoXG4gICAgICAgICAgbm9kZSxcbiAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChpc1RleHQgJiYgIXZub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIGluc2VydCh2bm9kZS5lbCA9IGNyZWF0ZVRleHQoXCJcIiksIGNvbnRhaW5lcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWlzTWlzbWF0Y2hBbGxvd2VkKGNvbnRhaW5lciwgMSAvKiBDSElMRFJFTiAqLykpIHtcbiAgICAgICAgICBpZiAoKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgfHwgX19WVUVfUFJPRF9IWURSQVRJT05fTUlTTUFUQ0hfREVUQUlMU19fKSAmJiAhaGFzV2FybmVkKSB7XG4gICAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAgIGBIeWRyYXRpb24gY2hpbGRyZW4gbWlzbWF0Y2ggb25gLFxuICAgICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICAgIGBcblNlcnZlciByZW5kZXJlZCBlbGVtZW50IGNvbnRhaW5zIGZld2VyIGNoaWxkIG5vZGVzIHRoYW4gY2xpZW50IHZkb20uYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGhhc1dhcm5lZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxvZ01pc21hdGNoRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBwYXRjaChcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBnZXRDb250YWluZXJUeXBlKGNvbnRhaW5lciksXG4gICAgICAgICAgc2xvdFNjb3BlSWRzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9O1xuICBjb25zdCBoeWRyYXRlRnJhZ21lbnQgPSAobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgY29uc3QgeyBzbG90U2NvcGVJZHM6IGZyYWdtZW50U2xvdFNjb3BlSWRzIH0gPSB2bm9kZTtcbiAgICBpZiAoZnJhZ21lbnRTbG90U2NvcGVJZHMpIHtcbiAgICAgIHNsb3RTY29wZUlkcyA9IHNsb3RTY29wZUlkcyA/IHNsb3RTY29wZUlkcy5jb25jYXQoZnJhZ21lbnRTbG90U2NvcGVJZHMpIDogZnJhZ21lbnRTbG90U2NvcGVJZHM7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudE5vZGUobm9kZSk7XG4gICAgY29uc3QgbmV4dCA9IGh5ZHJhdGVDaGlsZHJlbihcbiAgICAgIG5leHRTaWJsaW5nKG5vZGUpLFxuICAgICAgdm5vZGUsXG4gICAgICBjb250YWluZXIsXG4gICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgIG9wdGltaXplZFxuICAgICk7XG4gICAgaWYgKG5leHQgJiYgaXNDb21tZW50KG5leHQpICYmIG5leHQuZGF0YSA9PT0gXCJdXCIpIHtcbiAgICAgIHJldHVybiBuZXh0U2libGluZyh2bm9kZS5hbmNob3IgPSBuZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nTWlzbWF0Y2hFcnJvcigpO1xuICAgICAgaW5zZXJ0KHZub2RlLmFuY2hvciA9IGNyZWF0ZUNvbW1lbnQoYF1gKSwgY29udGFpbmVyLCBuZXh0KTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlTWlzbWF0Y2ggPSAobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgaXNGcmFnbWVudCkgPT4ge1xuICAgIGlmICghaXNNaXNtYXRjaEFsbG93ZWQobm9kZS5wYXJlbnRFbGVtZW50LCAxIC8qIENISUxEUkVOICovKSkge1xuICAgICAgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgfHwgX19WVUVfUFJPRF9IWURSQVRJT05fTUlTTUFUQ0hfREVUQUlMU19fKSAmJiB3YXJuJDEoXG4gICAgICAgIGBIeWRyYXRpb24gbm9kZSBtaXNtYXRjaDpcbi0gcmVuZGVyZWQgb24gc2VydmVyOmAsXG4gICAgICAgIG5vZGUsXG4gICAgICAgIG5vZGUubm9kZVR5cGUgPT09IDMgPyBgKHRleHQpYCA6IGlzQ29tbWVudChub2RlKSAmJiBub2RlLmRhdGEgPT09IFwiW1wiID8gYChzdGFydCBvZiBmcmFnbWVudClgIDogYGAsXG4gICAgICAgIGBcbi0gZXhwZWN0ZWQgb24gY2xpZW50OmAsXG4gICAgICAgIHZub2RlLnR5cGVcbiAgICAgICk7XG4gICAgICBsb2dNaXNtYXRjaEVycm9yKCk7XG4gICAgfVxuICAgIHZub2RlLmVsID0gbnVsbDtcbiAgICBpZiAoaXNGcmFnbWVudCkge1xuICAgICAgY29uc3QgZW5kID0gbG9jYXRlQ2xvc2luZ0FuY2hvcihub2RlKTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGNvbnN0IG5leHQyID0gbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgIGlmIChuZXh0MiAmJiBuZXh0MiAhPT0gZW5kKSB7XG4gICAgICAgICAgcmVtb3ZlKG5leHQyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBuZXh0ID0gbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgY29uc3QgY29udGFpbmVyID0gcGFyZW50Tm9kZShub2RlKTtcbiAgICByZW1vdmUobm9kZSk7XG4gICAgcGF0Y2goXG4gICAgICBudWxsLFxuICAgICAgdm5vZGUsXG4gICAgICBjb250YWluZXIsXG4gICAgICBuZXh0LFxuICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICBnZXRDb250YWluZXJUeXBlKGNvbnRhaW5lciksXG4gICAgICBzbG90U2NvcGVJZHNcbiAgICApO1xuICAgIGlmIChwYXJlbnRDb21wb25lbnQpIHtcbiAgICAgIHBhcmVudENvbXBvbmVudC52bm9kZS5lbCA9IHZub2RlLmVsO1xuICAgICAgdXBkYXRlSE9DSG9zdEVsKHBhcmVudENvbXBvbmVudCwgdm5vZGUuZWwpO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dDtcbiAgfTtcbiAgY29uc3QgbG9jYXRlQ2xvc2luZ0FuY2hvciA9IChub2RlLCBvcGVuID0gXCJbXCIsIGNsb3NlID0gXCJdXCIpID0+IHtcbiAgICBsZXQgbWF0Y2ggPSAwO1xuICAgIHdoaWxlIChub2RlKSB7XG4gICAgICBub2RlID0gbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICBpZiAobm9kZSAmJiBpc0NvbW1lbnQobm9kZSkpIHtcbiAgICAgICAgaWYgKG5vZGUuZGF0YSA9PT0gb3BlbikgbWF0Y2grKztcbiAgICAgICAgaWYgKG5vZGUuZGF0YSA9PT0gY2xvc2UpIHtcbiAgICAgICAgICBpZiAobWF0Y2ggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF0Y2gtLTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG4gIGNvbnN0IHJlcGxhY2VOb2RlID0gKG5ld05vZGUsIG9sZE5vZGUsIHBhcmVudENvbXBvbmVudCkgPT4ge1xuICAgIGNvbnN0IHBhcmVudE5vZGUyID0gb2xkTm9kZS5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnROb2RlMikge1xuICAgICAgcGFyZW50Tm9kZTIucmVwbGFjZUNoaWxkKG5ld05vZGUsIG9sZE5vZGUpO1xuICAgIH1cbiAgICBsZXQgcGFyZW50ID0gcGFyZW50Q29tcG9uZW50O1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQudm5vZGUuZWwgPT09IG9sZE5vZGUpIHtcbiAgICAgICAgcGFyZW50LnZub2RlLmVsID0gcGFyZW50LnN1YlRyZWUuZWwgPSBuZXdOb2RlO1xuICAgICAgfVxuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGlzVGVtcGxhdGVOb2RlID0gKG5vZGUpID0+IHtcbiAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBub2RlLnRhZ05hbWUgPT09IFwiVEVNUExBVEVcIjtcbiAgfTtcbiAgcmV0dXJuIFtoeWRyYXRlLCBoeWRyYXRlTm9kZV07XG59XG5mdW5jdGlvbiBwcm9wSGFzTWlzbWF0Y2goZWwsIGtleSwgY2xpZW50VmFsdWUsIHZub2RlLCBpbnN0YW5jZSkge1xuICBsZXQgbWlzbWF0Y2hUeXBlO1xuICBsZXQgbWlzbWF0Y2hLZXk7XG4gIGxldCBhY3R1YWw7XG4gIGxldCBleHBlY3RlZDtcbiAgaWYgKGtleSA9PT0gXCJjbGFzc1wiKSB7XG4gICAgaWYgKGVsLiRjbHMpIHtcbiAgICAgIGFjdHVhbCA9IGVsLiRjbHM7XG4gICAgICBkZWxldGUgZWwuJGNscztcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0dWFsID0gZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIik7XG4gICAgfVxuICAgIGV4cGVjdGVkID0gbm9ybWFsaXplQ2xhc3MoY2xpZW50VmFsdWUpO1xuICAgIGlmICghaXNTZXRFcXVhbCh0b0NsYXNzU2V0KGFjdHVhbCB8fCBcIlwiKSwgdG9DbGFzc1NldChleHBlY3RlZCkpKSB7XG4gICAgICBtaXNtYXRjaFR5cGUgPSAyIC8qIENMQVNTICovO1xuICAgICAgbWlzbWF0Y2hLZXkgPSBgY2xhc3NgO1xuICAgIH1cbiAgfSBlbHNlIGlmIChrZXkgPT09IFwic3R5bGVcIikge1xuICAgIGFjdHVhbCA9IGVsLmdldEF0dHJpYnV0ZShcInN0eWxlXCIpIHx8IFwiXCI7XG4gICAgZXhwZWN0ZWQgPSBpc1N0cmluZyhjbGllbnRWYWx1ZSkgPyBjbGllbnRWYWx1ZSA6IHN0cmluZ2lmeVN0eWxlKG5vcm1hbGl6ZVN0eWxlKGNsaWVudFZhbHVlKSk7XG4gICAgY29uc3QgYWN0dWFsTWFwID0gdG9TdHlsZU1hcChhY3R1YWwpO1xuICAgIGNvbnN0IGV4cGVjdGVkTWFwID0gdG9TdHlsZU1hcChleHBlY3RlZCk7XG4gICAgaWYgKHZub2RlLmRpcnMpIHtcbiAgICAgIGZvciAoY29uc3QgeyBkaXIsIHZhbHVlIH0gb2Ygdm5vZGUuZGlycykge1xuICAgICAgICBpZiAoZGlyLm5hbWUgPT09IFwic2hvd1wiICYmICF2YWx1ZSkge1xuICAgICAgICAgIGV4cGVjdGVkTWFwLnNldChcImRpc3BsYXlcIiwgXCJub25lXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgcmVzb2x2ZUNzc1ZhcnMoaW5zdGFuY2UsIHZub2RlLCBleHBlY3RlZE1hcCk7XG4gICAgfVxuICAgIGlmICghaXNNYXBFcXVhbChhY3R1YWxNYXAsIGV4cGVjdGVkTWFwKSkge1xuICAgICAgbWlzbWF0Y2hUeXBlID0gMyAvKiBTVFlMRSAqLztcbiAgICAgIG1pc21hdGNoS2V5ID0gXCJzdHlsZVwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChlbCBpbnN0YW5jZW9mIFNWR0VsZW1lbnQgJiYgaXNLbm93blN2Z0F0dHIoa2V5KSB8fCBlbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmIChpc0Jvb2xlYW5BdHRyKGtleSkgfHwgaXNLbm93bkh0bWxBdHRyKGtleSkpKSB7XG4gICAgaWYgKGlzQm9vbGVhbkF0dHIoa2V5KSkge1xuICAgICAgYWN0dWFsID0gZWwuaGFzQXR0cmlidXRlKGtleSk7XG4gICAgICBleHBlY3RlZCA9IGluY2x1ZGVCb29sZWFuQXR0cihjbGllbnRWYWx1ZSk7XG4gICAgfSBlbHNlIGlmIChjbGllbnRWYWx1ZSA9PSBudWxsKSB7XG4gICAgICBhY3R1YWwgPSBlbC5oYXNBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIGV4cGVjdGVkID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChlbC5oYXNBdHRyaWJ1dGUoa2V5KSkge1xuICAgICAgICBhY3R1YWwgPSBlbC5nZXRBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcInZhbHVlXCIgJiYgZWwudGFnTmFtZSA9PT0gXCJURVhUQVJFQVwiKSB7XG4gICAgICAgIGFjdHVhbCA9IGVsLnZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0dWFsID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBleHBlY3RlZCA9IGlzUmVuZGVyYWJsZUF0dHJWYWx1ZShjbGllbnRWYWx1ZSkgPyBTdHJpbmcoY2xpZW50VmFsdWUpIDogZmFsc2U7XG4gICAgfVxuICAgIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKSB7XG4gICAgICBtaXNtYXRjaFR5cGUgPSA0IC8qIEFUVFJJQlVURSAqLztcbiAgICAgIG1pc21hdGNoS2V5ID0ga2V5O1xuICAgIH1cbiAgfVxuICBpZiAobWlzbWF0Y2hUeXBlICE9IG51bGwgJiYgIWlzTWlzbWF0Y2hBbGxvd2VkKGVsLCBtaXNtYXRjaFR5cGUpKSB7XG4gICAgY29uc3QgZm9ybWF0ID0gKHYpID0+IHYgPT09IGZhbHNlID8gYChub3QgcmVuZGVyZWQpYCA6IGAke21pc21hdGNoS2V5fT1cIiR7dn1cImA7XG4gICAgY29uc3QgcHJlU2VnbWVudCA9IGBIeWRyYXRpb24gJHtNaXNtYXRjaFR5cGVTdHJpbmdbbWlzbWF0Y2hUeXBlXX0gbWlzbWF0Y2ggb25gO1xuICAgIGNvbnN0IHBvc3RTZWdtZW50ID0gYFxuICAtIHJlbmRlcmVkIG9uIHNlcnZlcjogJHtmb3JtYXQoYWN0dWFsKX1cbiAgLSBleHBlY3RlZCBvbiBjbGllbnQ6ICR7Zm9ybWF0KGV4cGVjdGVkKX1cbiAgTm90ZTogdGhpcyBtaXNtYXRjaCBpcyBjaGVjay1vbmx5LiBUaGUgRE9NIHdpbGwgbm90IGJlIHJlY3RpZmllZCBpbiBwcm9kdWN0aW9uIGR1ZSB0byBwZXJmb3JtYW5jZSBvdmVyaGVhZC5cbiAgWW91IHNob3VsZCBmaXggdGhlIHNvdXJjZSBvZiB0aGUgbWlzbWF0Y2guYDtcbiAgICB7XG4gICAgICB3YXJuJDEocHJlU2VnbWVudCwgZWwsIHBvc3RTZWdtZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gdG9DbGFzc1NldChzdHIpIHtcbiAgcmV0dXJuIG5ldyBTZXQoc3RyLnRyaW0oKS5zcGxpdCgvXFxzKy8pKTtcbn1cbmZ1bmN0aW9uIGlzU2V0RXF1YWwoYSwgYikge1xuICBpZiAoYS5zaXplICE9PSBiLnNpemUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChjb25zdCBzIG9mIGEpIHtcbiAgICBpZiAoIWIuaGFzKHMpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gdG9TdHlsZU1hcChzdHIpIHtcbiAgY29uc3Qgc3R5bGVNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBmb3IgKGNvbnN0IGl0ZW0gb2Ygc3RyLnNwbGl0KFwiO1wiKSkge1xuICAgIGxldCBba2V5LCB2YWx1ZV0gPSBpdGVtLnNwbGl0KFwiOlwiKTtcbiAgICBrZXkgPSBrZXkudHJpbSgpO1xuICAgIHZhbHVlID0gdmFsdWUgJiYgdmFsdWUudHJpbSgpO1xuICAgIGlmIChrZXkgJiYgdmFsdWUpIHtcbiAgICAgIHN0eWxlTWFwLnNldChrZXksIHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0eWxlTWFwO1xufVxuZnVuY3Rpb24gaXNNYXBFcXVhbChhLCBiKSB7XG4gIGlmIChhLnNpemUgIT09IGIuc2l6ZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBhKSB7XG4gICAgaWYgKHZhbHVlICE9PSBiLmdldChrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUNzc1ZhcnMoaW5zdGFuY2UsIHZub2RlLCBleHBlY3RlZE1hcCkge1xuICBjb25zdCByb290ID0gaW5zdGFuY2Uuc3ViVHJlZTtcbiAgaWYgKGluc3RhbmNlLmdldENzc1ZhcnMgJiYgKHZub2RlID09PSByb290IHx8IHJvb3QgJiYgcm9vdC50eXBlID09PSBGcmFnbWVudCAmJiByb290LmNoaWxkcmVuLmluY2x1ZGVzKHZub2RlKSkpIHtcbiAgICBjb25zdCBjc3NWYXJzID0gaW5zdGFuY2UuZ2V0Q3NzVmFycygpO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGNzc1ZhcnMpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gbm9ybWFsaXplQ3NzVmFyVmFsdWUoY3NzVmFyc1trZXldKTtcbiAgICAgIGV4cGVjdGVkTWFwLnNldChgLS0ke2dldEVzY2FwZWRDc3NWYXJOYW1lKGtleSwgZmFsc2UpfWAsIHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZub2RlID09PSByb290ICYmIGluc3RhbmNlLnBhcmVudCkge1xuICAgIHJlc29sdmVDc3NWYXJzKGluc3RhbmNlLnBhcmVudCwgaW5zdGFuY2Uudm5vZGUsIGV4cGVjdGVkTWFwKTtcbiAgfVxufVxuY29uc3QgYWxsb3dNaXNtYXRjaEF0dHIgPSBcImRhdGEtYWxsb3ctbWlzbWF0Y2hcIjtcbmNvbnN0IE1pc21hdGNoVHlwZVN0cmluZyA9IHtcbiAgWzAgLyogVEVYVCAqL106IFwidGV4dFwiLFxuICBbMSAvKiBDSElMRFJFTiAqL106IFwiY2hpbGRyZW5cIixcbiAgWzIgLyogQ0xBU1MgKi9dOiBcImNsYXNzXCIsXG4gIFszIC8qIFNUWUxFICovXTogXCJzdHlsZVwiLFxuICBbNCAvKiBBVFRSSUJVVEUgKi9dOiBcImF0dHJpYnV0ZVwiXG59O1xuZnVuY3Rpb24gaXNNaXNtYXRjaEFsbG93ZWQoZWwsIGFsbG93ZWRUeXBlKSB7XG4gIGlmIChhbGxvd2VkVHlwZSA9PT0gMCAvKiBURVhUICovIHx8IGFsbG93ZWRUeXBlID09PSAxIC8qIENISUxEUkVOICovKSB7XG4gICAgd2hpbGUgKGVsICYmICFlbC5oYXNBdHRyaWJ1dGUoYWxsb3dNaXNtYXRjaEF0dHIpKSB7XG4gICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICB9XG4gIGNvbnN0IGFsbG93ZWRBdHRyID0gZWwgJiYgZWwuZ2V0QXR0cmlidXRlKGFsbG93TWlzbWF0Y2hBdHRyKTtcbiAgaWYgKGFsbG93ZWRBdHRyID09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAoYWxsb3dlZEF0dHIgPT09IFwiXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBsaXN0ID0gYWxsb3dlZEF0dHIuc3BsaXQoXCIsXCIpO1xuICAgIGlmIChhbGxvd2VkVHlwZSA9PT0gMCAvKiBURVhUICovICYmIGxpc3QuaW5jbHVkZXMoXCJjaGlsZHJlblwiKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBsaXN0LmluY2x1ZGVzKE1pc21hdGNoVHlwZVN0cmluZ1thbGxvd2VkVHlwZV0pO1xuICB9XG59XG5cbmNvbnN0IHJlcXVlc3RJZGxlQ2FsbGJhY2sgPSBnZXRHbG9iYWxUaGlzKCkucmVxdWVzdElkbGVDYWxsYmFjayB8fCAoKGNiKSA9PiBzZXRUaW1lb3V0KGNiLCAxKSk7XG5jb25zdCBjYW5jZWxJZGxlQ2FsbGJhY2sgPSBnZXRHbG9iYWxUaGlzKCkuY2FuY2VsSWRsZUNhbGxiYWNrIHx8ICgoaWQpID0+IGNsZWFyVGltZW91dChpZCkpO1xuY29uc3QgaHlkcmF0ZU9uSWRsZSA9ICh0aW1lb3V0ID0gMWU0KSA9PiAoaHlkcmF0ZSkgPT4ge1xuICBjb25zdCBpZCA9IHJlcXVlc3RJZGxlQ2FsbGJhY2soaHlkcmF0ZSwgeyB0aW1lb3V0IH0pO1xuICByZXR1cm4gKCkgPT4gY2FuY2VsSWRsZUNhbGxiYWNrKGlkKTtcbn07XG5mdW5jdGlvbiBlbGVtZW50SXNWaXNpYmxlSW5WaWV3cG9ydChlbCkge1xuICBjb25zdCB7IHRvcCwgbGVmdCwgYm90dG9tLCByaWdodCB9ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IHsgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGggfSA9IHdpbmRvdztcbiAgcmV0dXJuICh0b3AgPiAwICYmIHRvcCA8IGlubmVySGVpZ2h0IHx8IGJvdHRvbSA+IDAgJiYgYm90dG9tIDwgaW5uZXJIZWlnaHQpICYmIChsZWZ0ID4gMCAmJiBsZWZ0IDwgaW5uZXJXaWR0aCB8fCByaWdodCA+IDAgJiYgcmlnaHQgPCBpbm5lcldpZHRoKTtcbn1cbmNvbnN0IGh5ZHJhdGVPblZpc2libGUgPSAob3B0cykgPT4gKGh5ZHJhdGUsIGZvckVhY2gpID0+IHtcbiAgY29uc3Qgb2IgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcbiAgICBmb3IgKGNvbnN0IGUgb2YgZW50cmllcykge1xuICAgICAgaWYgKCFlLmlzSW50ZXJzZWN0aW5nKSBjb250aW51ZTtcbiAgICAgIG9iLmRpc2Nvbm5lY3QoKTtcbiAgICAgIGh5ZHJhdGUoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSwgb3B0cyk7XG4gIGZvckVhY2goKGVsKSA9PiB7XG4gICAgaWYgKCEoZWwgaW5zdGFuY2VvZiBFbGVtZW50KSkgcmV0dXJuO1xuICAgIGlmIChlbGVtZW50SXNWaXNpYmxlSW5WaWV3cG9ydChlbCkpIHtcbiAgICAgIGh5ZHJhdGUoKTtcbiAgICAgIG9iLmRpc2Nvbm5lY3QoKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb2Iub2JzZXJ2ZShlbCk7XG4gIH0pO1xuICByZXR1cm4gKCkgPT4gb2IuZGlzY29ubmVjdCgpO1xufTtcbmNvbnN0IGh5ZHJhdGVPbk1lZGlhUXVlcnkgPSAocXVlcnkpID0+IChoeWRyYXRlKSA9PiB7XG4gIGlmIChxdWVyeSkge1xuICAgIGNvbnN0IG1xbCA9IG1hdGNoTWVkaWEocXVlcnkpO1xuICAgIGlmIChtcWwubWF0Y2hlcykge1xuICAgICAgaHlkcmF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtcWwuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBoeWRyYXRlLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgICByZXR1cm4gKCkgPT4gbXFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgaHlkcmF0ZSk7XG4gICAgfVxuICB9XG59O1xuY29uc3QgaHlkcmF0ZU9uSW50ZXJhY3Rpb24gPSAoaW50ZXJhY3Rpb25zID0gW10pID0+IChoeWRyYXRlLCBmb3JFYWNoKSA9PiB7XG4gIGlmIChpc1N0cmluZyhpbnRlcmFjdGlvbnMpKSBpbnRlcmFjdGlvbnMgPSBbaW50ZXJhY3Rpb25zXTtcbiAgbGV0IGhhc0h5ZHJhdGVkID0gZmFsc2U7XG4gIGNvbnN0IGRvSHlkcmF0ZSA9IChlKSA9PiB7XG4gICAgaWYgKCFoYXNIeWRyYXRlZCkge1xuICAgICAgaGFzSHlkcmF0ZWQgPSB0cnVlO1xuICAgICAgdGVhcmRvd24oKTtcbiAgICAgIGh5ZHJhdGUoKTtcbiAgICAgIGUudGFyZ2V0LmRpc3BhdGNoRXZlbnQobmV3IGUuY29uc3RydWN0b3IoZS50eXBlLCBlKSk7XG4gICAgfVxuICB9O1xuICBjb25zdCB0ZWFyZG93biA9ICgpID0+IHtcbiAgICBmb3JFYWNoKChlbCkgPT4ge1xuICAgICAgZm9yIChjb25zdCBpIG9mIGludGVyYWN0aW9ucykge1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGksIGRvSHlkcmF0ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIGZvckVhY2goKGVsKSA9PiB7XG4gICAgZm9yIChjb25zdCBpIG9mIGludGVyYWN0aW9ucykge1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihpLCBkb0h5ZHJhdGUsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gdGVhcmRvd247XG59O1xuZnVuY3Rpb24gZm9yRWFjaEVsZW1lbnQobm9kZSwgY2IpIHtcbiAgaWYgKGlzQ29tbWVudChub2RlKSAmJiBub2RlLmRhdGEgPT09IFwiW1wiKSB7XG4gICAgbGV0IGRlcHRoID0gMTtcbiAgICBsZXQgbmV4dCA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgd2hpbGUgKG5leHQpIHtcbiAgICAgIGlmIChuZXh0Lm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNiKG5leHQpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzQ29tbWVudChuZXh0KSkge1xuICAgICAgICBpZiAobmV4dC5kYXRhID09PSBcIl1cIikge1xuICAgICAgICAgIGlmICgtLWRlcHRoID09PSAwKSBicmVhaztcbiAgICAgICAgfSBlbHNlIGlmIChuZXh0LmRhdGEgPT09IFwiW1wiKSB7XG4gICAgICAgICAgZGVwdGgrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbmV4dCA9IG5leHQubmV4dFNpYmxpbmc7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNiKG5vZGUpO1xuICB9XG59XG5cbmNvbnN0IGlzQXN5bmNXcmFwcGVyID0gKGkpID0+ICEhaS50eXBlLl9fYXN5bmNMb2FkZXI7XG4vLyBAX19OT19TSURFX0VGRkVDVFNfX1xuZnVuY3Rpb24gZGVmaW5lQXN5bmNDb21wb25lbnQoc291cmNlKSB7XG4gIGlmIChpc0Z1bmN0aW9uKHNvdXJjZSkpIHtcbiAgICBzb3VyY2UgPSB7IGxvYWRlcjogc291cmNlIH07XG4gIH1cbiAgY29uc3Qge1xuICAgIGxvYWRlcixcbiAgICBsb2FkaW5nQ29tcG9uZW50LFxuICAgIGVycm9yQ29tcG9uZW50LFxuICAgIGRlbGF5ID0gMjAwLFxuICAgIGh5ZHJhdGU6IGh5ZHJhdGVTdHJhdGVneSxcbiAgICB0aW1lb3V0LFxuICAgIC8vIHVuZGVmaW5lZCA9IG5ldmVyIHRpbWVzIG91dFxuICAgIHN1c3BlbnNpYmxlID0gdHJ1ZSxcbiAgICBvbkVycm9yOiB1c2VyT25FcnJvclxuICB9ID0gc291cmNlO1xuICBsZXQgcGVuZGluZ1JlcXVlc3QgPSBudWxsO1xuICBsZXQgcmVzb2x2ZWRDb21wO1xuICBsZXQgcmV0cmllcyA9IDA7XG4gIGNvbnN0IHJldHJ5ID0gKCkgPT4ge1xuICAgIHJldHJpZXMrKztcbiAgICBwZW5kaW5nUmVxdWVzdCA9IG51bGw7XG4gICAgcmV0dXJuIGxvYWQoKTtcbiAgfTtcbiAgY29uc3QgbG9hZCA9ICgpID0+IHtcbiAgICBsZXQgdGhpc1JlcXVlc3Q7XG4gICAgcmV0dXJuIHBlbmRpbmdSZXF1ZXN0IHx8ICh0aGlzUmVxdWVzdCA9IHBlbmRpbmdSZXF1ZXN0ID0gbG9hZGVyKCkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgZXJyID0gZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIgOiBuZXcgRXJyb3IoU3RyaW5nKGVycikpO1xuICAgICAgaWYgKHVzZXJPbkVycm9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgY29uc3QgdXNlclJldHJ5ID0gKCkgPT4gcmVzb2x2ZShyZXRyeSgpKTtcbiAgICAgICAgICBjb25zdCB1c2VyRmFpbCA9ICgpID0+IHJlamVjdChlcnIpO1xuICAgICAgICAgIHVzZXJPbkVycm9yKGVyciwgdXNlclJldHJ5LCB1c2VyRmFpbCwgcmV0cmllcyArIDEpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9KS50aGVuKChjb21wKSA9PiB7XG4gICAgICBpZiAodGhpc1JlcXVlc3QgIT09IHBlbmRpbmdSZXF1ZXN0ICYmIHBlbmRpbmdSZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybiBwZW5kaW5nUmVxdWVzdDtcbiAgICAgIH1cbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFjb21wKSB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBgQXN5bmMgY29tcG9uZW50IGxvYWRlciByZXNvbHZlZCB0byB1bmRlZmluZWQuIElmIHlvdSBhcmUgdXNpbmcgcmV0cnkoKSwgbWFrZSBzdXJlIHRvIHJldHVybiBpdHMgcmV0dXJuIHZhbHVlLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wICYmIChjb21wLl9fZXNNb2R1bGUgfHwgY29tcFtTeW1ib2wudG9TdHJpbmdUYWddID09PSBcIk1vZHVsZVwiKSkge1xuICAgICAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICAgICAgfVxuICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgY29tcCAmJiAhaXNPYmplY3QoY29tcCkgJiYgIWlzRnVuY3Rpb24oY29tcCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGFzeW5jIGNvbXBvbmVudCBsb2FkIHJlc3VsdDogJHtjb21wfWApO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZWRDb21wID0gY29tcDtcbiAgICAgIHJldHVybiBjb21wO1xuICAgIH0pKTtcbiAgfTtcbiAgcmV0dXJuIGRlZmluZUNvbXBvbmVudCh7XG4gICAgbmFtZTogXCJBc3luY0NvbXBvbmVudFdyYXBwZXJcIixcbiAgICBfX2FzeW5jTG9hZGVyOiBsb2FkLFxuICAgIF9fYXN5bmNIeWRyYXRlKGVsLCBpbnN0YW5jZSwgaHlkcmF0ZSkge1xuICAgICAgbGV0IHBhdGNoZWQgPSBmYWxzZTtcbiAgICAgIChpbnN0YW5jZS5idSB8fCAoaW5zdGFuY2UuYnUgPSBbXSkpLnB1c2goKCkgPT4gcGF0Y2hlZCA9IHRydWUpO1xuICAgICAgY29uc3QgcGVyZm9ybUh5ZHJhdGUgPSAoKSA9PiB7XG4gICAgICAgIGlmIChwYXRjaGVkKSB7XG4gICAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgYFNraXBwaW5nIGxhenkgaHlkcmF0aW9uIGZvciBjb21wb25lbnQgJyR7Z2V0Q29tcG9uZW50TmFtZShyZXNvbHZlZENvbXApIHx8IHJlc29sdmVkQ29tcC5fX2ZpbGV9JzogaXQgd2FzIHVwZGF0ZWQgYmVmb3JlIGxhenkgaHlkcmF0aW9uIHBlcmZvcm1lZC5gXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaHlkcmF0ZSgpO1xuICAgICAgfTtcbiAgICAgIGNvbnN0IGRvSHlkcmF0ZSA9IGh5ZHJhdGVTdHJhdGVneSA/ICgpID0+IHtcbiAgICAgICAgY29uc3QgdGVhcmRvd24gPSBoeWRyYXRlU3RyYXRlZ3koXG4gICAgICAgICAgcGVyZm9ybUh5ZHJhdGUsXG4gICAgICAgICAgKGNiKSA9PiBmb3JFYWNoRWxlbWVudChlbCwgY2IpXG4gICAgICAgICk7XG4gICAgICAgIGlmICh0ZWFyZG93bikge1xuICAgICAgICAgIChpbnN0YW5jZS5idW0gfHwgKGluc3RhbmNlLmJ1bSA9IFtdKSkucHVzaCh0ZWFyZG93bik7XG4gICAgICAgIH1cbiAgICAgIH0gOiBwZXJmb3JtSHlkcmF0ZTtcbiAgICAgIGlmIChyZXNvbHZlZENvbXApIHtcbiAgICAgICAgZG9IeWRyYXRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2FkKCkudGhlbigoKSA9PiAhaW5zdGFuY2UuaXNVbm1vdW50ZWQgJiYgZG9IeWRyYXRlKCkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0IF9fYXN5bmNSZXNvbHZlZCgpIHtcbiAgICAgIHJldHVybiByZXNvbHZlZENvbXA7XG4gICAgfSxcbiAgICBzZXR1cCgpIHtcbiAgICAgIGNvbnN0IGluc3RhbmNlID0gY3VycmVudEluc3RhbmNlO1xuICAgICAgbWFya0FzeW5jQm91bmRhcnkoaW5zdGFuY2UpO1xuICAgICAgaWYgKHJlc29sdmVkQ29tcCkge1xuICAgICAgICByZXR1cm4gKCkgPT4gY3JlYXRlSW5uZXJDb21wKHJlc29sdmVkQ29tcCwgaW5zdGFuY2UpO1xuICAgICAgfVxuICAgICAgY29uc3Qgb25FcnJvciA9IChlcnIpID0+IHtcbiAgICAgICAgcGVuZGluZ1JlcXVlc3QgPSBudWxsO1xuICAgICAgICBoYW5kbGVFcnJvcihcbiAgICAgICAgICBlcnIsXG4gICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgMTMsXG4gICAgICAgICAgIWVycm9yQ29tcG9uZW50XG4gICAgICAgICk7XG4gICAgICB9O1xuICAgICAgaWYgKHN1c3BlbnNpYmxlICYmIGluc3RhbmNlLnN1c3BlbnNlIHx8IGlzSW5TU1JDb21wb25lbnRTZXR1cCkge1xuICAgICAgICByZXR1cm4gbG9hZCgpLnRoZW4oKGNvbXApID0+IHtcbiAgICAgICAgICByZXR1cm4gKCkgPT4gY3JlYXRlSW5uZXJDb21wKGNvbXAsIGluc3RhbmNlKTtcbiAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgICAgICByZXR1cm4gKCkgPT4gZXJyb3JDb21wb25lbnQgPyBjcmVhdGVWTm9kZShlcnJvckNvbXBvbmVudCwge1xuICAgICAgICAgICAgZXJyb3I6IGVyclxuICAgICAgICAgIH0pIDogbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjb25zdCBsb2FkZWQgPSByZWYoZmFsc2UpO1xuICAgICAgY29uc3QgZXJyb3IgPSByZWYoKTtcbiAgICAgIGNvbnN0IGRlbGF5ZWQgPSByZWYoISFkZWxheSk7XG4gICAgICBpZiAoZGVsYXkpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgZGVsYXllZC52YWx1ZSA9IGZhbHNlO1xuICAgICAgICB9LCBkZWxheSk7XG4gICAgICB9XG4gICAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmICghbG9hZGVkLnZhbHVlICYmICFlcnJvci52YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFxuICAgICAgICAgICAgICBgQXN5bmMgY29tcG9uZW50IHRpbWVkIG91dCBhZnRlciAke3RpbWVvdXR9bXMuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgICAgICAgIGVycm9yLnZhbHVlID0gZXJyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICB9XG4gICAgICBsb2FkKCkudGhlbigoKSA9PiB7XG4gICAgICAgIGxvYWRlZC52YWx1ZSA9IHRydWU7XG4gICAgICAgIGlmIChpbnN0YW5jZS5wYXJlbnQgJiYgaXNLZWVwQWxpdmUoaW5zdGFuY2UucGFyZW50LnZub2RlKSkge1xuICAgICAgICAgIGluc3RhbmNlLnBhcmVudC51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBvbkVycm9yKGVycik7XG4gICAgICAgIGVycm9yLnZhbHVlID0gZXJyO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAobG9hZGVkLnZhbHVlICYmIHJlc29sdmVkQ29tcCkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVJbm5lckNvbXAocmVzb2x2ZWRDb21wLCBpbnN0YW5jZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXJyb3IudmFsdWUgJiYgZXJyb3JDb21wb25lbnQpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoZXJyb3JDb21wb25lbnQsIHtcbiAgICAgICAgICAgIGVycm9yOiBlcnJvci52YWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGxvYWRpbmdDb21wb25lbnQgJiYgIWRlbGF5ZWQudmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUobG9hZGluZ0NvbXBvbmVudCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUlubmVyQ29tcChjb21wLCBwYXJlbnQpIHtcbiAgY29uc3QgeyByZWY6IHJlZjIsIHByb3BzLCBjaGlsZHJlbiwgY2UgfSA9IHBhcmVudC52bm9kZTtcbiAgY29uc3Qgdm5vZGUgPSBjcmVhdGVWTm9kZShjb21wLCBwcm9wcywgY2hpbGRyZW4pO1xuICB2bm9kZS5yZWYgPSByZWYyO1xuICB2bm9kZS5jZSA9IGNlO1xuICBkZWxldGUgcGFyZW50LnZub2RlLmNlO1xuICByZXR1cm4gdm5vZGU7XG59XG5cbmNvbnN0IGlzS2VlcEFsaXZlID0gKHZub2RlKSA9PiB2bm9kZS50eXBlLl9faXNLZWVwQWxpdmU7XG5jb25zdCBLZWVwQWxpdmVJbXBsID0ge1xuICBuYW1lOiBgS2VlcEFsaXZlYCxcbiAgLy8gTWFya2VyIGZvciBzcGVjaWFsIGhhbmRsaW5nIGluc2lkZSB0aGUgcmVuZGVyZXIuIFdlIGFyZSBub3QgdXNpbmcgYSA9PT1cbiAgLy8gY2hlY2sgZGlyZWN0bHkgb24gS2VlcEFsaXZlIGluIHRoZSByZW5kZXJlciwgYmVjYXVzZSBpbXBvcnRpbmcgaXQgZGlyZWN0bHlcbiAgLy8gd291bGQgcHJldmVudCBpdCBmcm9tIGJlaW5nIHRyZWUtc2hha2VuLlxuICBfX2lzS2VlcEFsaXZlOiB0cnVlLFxuICBwcm9wczoge1xuICAgIGluY2x1ZGU6IFtTdHJpbmcsIFJlZ0V4cCwgQXJyYXldLFxuICAgIGV4Y2x1ZGU6IFtTdHJpbmcsIFJlZ0V4cCwgQXJyYXldLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICBjb25zdCBzaGFyZWRDb250ZXh0ID0gaW5zdGFuY2UuY3R4O1xuICAgIGlmICghc2hhcmVkQ29udGV4dC5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBjYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgY29uc3Qga2V5cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgbGV0IGN1cnJlbnQgPSBudWxsO1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgaW5zdGFuY2UuX192X2NhY2hlID0gY2FjaGU7XG4gICAgfVxuICAgIGNvbnN0IHBhcmVudFN1c3BlbnNlID0gaW5zdGFuY2Uuc3VzcGVuc2U7XG4gICAgY29uc3Qge1xuICAgICAgcmVuZGVyZXI6IHtcbiAgICAgICAgcDogcGF0Y2gsXG4gICAgICAgIG06IG1vdmUsXG4gICAgICAgIHVtOiBfdW5tb3VudCxcbiAgICAgICAgbzogeyBjcmVhdGVFbGVtZW50IH1cbiAgICAgIH1cbiAgICB9ID0gc2hhcmVkQ29udGV4dDtcbiAgICBjb25zdCBzdG9yYWdlQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBzaGFyZWRDb250ZXh0LmFjdGl2YXRlID0gKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgbmFtZXNwYWNlLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgIGNvbnN0IGluc3RhbmNlMiA9IHZub2RlLmNvbXBvbmVudDtcbiAgICAgIG1vdmUodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCAwLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICBwYXRjaChcbiAgICAgICAgaW5zdGFuY2UyLnZub2RlLFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBhbmNob3IsXG4gICAgICAgIGluc3RhbmNlMixcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgdm5vZGUuc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICk7XG4gICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpbnN0YW5jZTIuaXNEZWFjdGl2YXRlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoaW5zdGFuY2UyLmEpIHtcbiAgICAgICAgICBpbnZva2VBcnJheUZucyhpbnN0YW5jZTIuYSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgdm5vZGVIb29rID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25Wbm9kZU1vdW50ZWQ7XG4gICAgICAgIGlmICh2bm9kZUhvb2spIHtcbiAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBpbnN0YW5jZTIucGFyZW50LCB2bm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICBkZXZ0b29sc0NvbXBvbmVudEFkZGVkKGluc3RhbmNlMik7XG4gICAgICB9XG4gICAgfTtcbiAgICBzaGFyZWRDb250ZXh0LmRlYWN0aXZhdGUgPSAodm5vZGUpID0+IHtcbiAgICAgIGNvbnN0IGluc3RhbmNlMiA9IHZub2RlLmNvbXBvbmVudDtcbiAgICAgIGludmFsaWRhdGVNb3VudChpbnN0YW5jZTIubSk7XG4gICAgICBpbnZhbGlkYXRlTW91bnQoaW5zdGFuY2UyLmEpO1xuICAgICAgbW92ZSh2bm9kZSwgc3RvcmFnZUNvbnRhaW5lciwgbnVsbCwgMSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKGluc3RhbmNlMi5kYSkge1xuICAgICAgICAgIGludm9rZUFycmF5Rm5zKGluc3RhbmNlMi5kYSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgdm5vZGVIb29rID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25Wbm9kZVVubW91bnRlZDtcbiAgICAgICAgaWYgKHZub2RlSG9vaykge1xuICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIGluc3RhbmNlMi5wYXJlbnQsIHZub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnN0YW5jZTIuaXNEZWFjdGl2YXRlZCA9IHRydWU7XG4gICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgZGV2dG9vbHNDb21wb25lbnRBZGRlZChpbnN0YW5jZTIpO1xuICAgICAgfVxuICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgdHJ1ZSkge1xuICAgICAgICBpbnN0YW5jZTIuX19rZWVwQWxpdmVTdG9yYWdlQ29udGFpbmVyID0gc3RvcmFnZUNvbnRhaW5lcjtcbiAgICAgIH1cbiAgICB9O1xuICAgIGZ1bmN0aW9uIHVubW91bnQodm5vZGUpIHtcbiAgICAgIHJlc2V0U2hhcGVGbGFnKHZub2RlKTtcbiAgICAgIF91bm1vdW50KHZub2RlLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcnVuZUNhY2hlKGZpbHRlcikge1xuICAgICAgY2FjaGUuZm9yRWFjaCgodm5vZGUsIGtleSkgPT4ge1xuICAgICAgICBjb25zdCBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZSh2bm9kZS50eXBlKTtcbiAgICAgICAgaWYgKG5hbWUgJiYgIWZpbHRlcihuYW1lKSkge1xuICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShrZXkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5KGtleSkge1xuICAgICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGtleSk7XG4gICAgICBpZiAoY2FjaGVkICYmICghY3VycmVudCB8fCAhaXNTYW1lVk5vZGVUeXBlKGNhY2hlZCwgY3VycmVudCkpKSB7XG4gICAgICAgIHVubW91bnQoY2FjaGVkKTtcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudCkge1xuICAgICAgICByZXNldFNoYXBlRmxhZyhjdXJyZW50KTtcbiAgICAgIH1cbiAgICAgIGNhY2hlLmRlbGV0ZShrZXkpO1xuICAgICAga2V5cy5kZWxldGUoa2V5KTtcbiAgICB9XG4gICAgd2F0Y2goXG4gICAgICAoKSA9PiBbcHJvcHMuaW5jbHVkZSwgcHJvcHMuZXhjbHVkZV0sXG4gICAgICAoW2luY2x1ZGUsIGV4Y2x1ZGVdKSA9PiB7XG4gICAgICAgIGluY2x1ZGUgJiYgcHJ1bmVDYWNoZSgobmFtZSkgPT4gbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSk7XG4gICAgICAgIGV4Y2x1ZGUgJiYgcHJ1bmVDYWNoZSgobmFtZSkgPT4gIW1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpO1xuICAgICAgfSxcbiAgICAgIC8vIHBydW5lIHBvc3QtcmVuZGVyIGFmdGVyIGBjdXJyZW50YCBoYXMgYmVlbiB1cGRhdGVkXG4gICAgICB7IGZsdXNoOiBcInBvc3RcIiwgZGVlcDogdHJ1ZSB9XG4gICAgKTtcbiAgICBsZXQgcGVuZGluZ0NhY2hlS2V5ID0gbnVsbDtcbiAgICBjb25zdCBjYWNoZVN1YnRyZWUgPSAoKSA9PiB7XG4gICAgICBpZiAocGVuZGluZ0NhY2hlS2V5ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzU3VzcGVuc2UoaW5zdGFuY2Uuc3ViVHJlZS50eXBlKSkge1xuICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBjYWNoZS5zZXQocGVuZGluZ0NhY2hlS2V5LCBnZXRJbm5lckNoaWxkKGluc3RhbmNlLnN1YlRyZWUpKTtcbiAgICAgICAgICB9LCBpbnN0YW5jZS5zdWJUcmVlLnN1c3BlbnNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWNoZS5zZXQocGVuZGluZ0NhY2hlS2V5LCBnZXRJbm5lckNoaWxkKGluc3RhbmNlLnN1YlRyZWUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgb25Nb3VudGVkKGNhY2hlU3VidHJlZSk7XG4gICAgb25VcGRhdGVkKGNhY2hlU3VidHJlZSk7XG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICAgIGNhY2hlLmZvckVhY2goKGNhY2hlZCkgPT4ge1xuICAgICAgICBjb25zdCB7IHN1YlRyZWUsIHN1c3BlbnNlIH0gPSBpbnN0YW5jZTtcbiAgICAgICAgY29uc3Qgdm5vZGUgPSBnZXRJbm5lckNoaWxkKHN1YlRyZWUpO1xuICAgICAgICBpZiAoY2FjaGVkLnR5cGUgPT09IHZub2RlLnR5cGUgJiYgY2FjaGVkLmtleSA9PT0gdm5vZGUua2V5KSB7XG4gICAgICAgICAgcmVzZXRTaGFwZUZsYWcodm5vZGUpO1xuICAgICAgICAgIGNvbnN0IGRhID0gdm5vZGUuY29tcG9uZW50LmRhO1xuICAgICAgICAgIGRhICYmIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChkYSwgc3VzcGVuc2UpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB1bm1vdW50KGNhY2hlZCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgcGVuZGluZ0NhY2hlS2V5ID0gbnVsbDtcbiAgICAgIGlmICghc2xvdHMuZGVmYXVsdCkge1xuICAgICAgICByZXR1cm4gY3VycmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IHNsb3RzLmRlZmF1bHQoKTtcbiAgICAgIGNvbnN0IHJhd1ZOb2RlID0gY2hpbGRyZW5bMF07XG4gICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgIHdhcm4kMShgS2VlcEFsaXZlIHNob3VsZCBjb250YWluIGV4YWN0bHkgb25lIGNvbXBvbmVudCBjaGlsZC5gKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgfSBlbHNlIGlmICghaXNWTm9kZShyYXdWTm9kZSkgfHwgIShyYXdWTm9kZS5zaGFwZUZsYWcgJiA0KSAmJiAhKHJhd1ZOb2RlLnNoYXBlRmxhZyAmIDEyOCkpIHtcbiAgICAgICAgY3VycmVudCA9IG51bGw7XG4gICAgICAgIHJldHVybiByYXdWTm9kZTtcbiAgICAgIH1cbiAgICAgIGxldCB2bm9kZSA9IGdldElubmVyQ2hpbGQocmF3Vk5vZGUpO1xuICAgICAgaWYgKHZub2RlLnR5cGUgPT09IENvbW1lbnQpIHtcbiAgICAgICAgY3VycmVudCA9IG51bGw7XG4gICAgICAgIHJldHVybiB2bm9kZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbXAgPSB2bm9kZS50eXBlO1xuICAgICAgY29uc3QgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoXG4gICAgICAgIGlzQXN5bmNXcmFwcGVyKHZub2RlKSA/IHZub2RlLnR5cGUuX19hc3luY1Jlc29sdmVkIHx8IHt9IDogY29tcFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHsgaW5jbHVkZSwgZXhjbHVkZSwgbWF4IH0gPSBwcm9wcztcbiAgICAgIGlmIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkgfHwgZXhjbHVkZSAmJiBuYW1lICYmIG1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpIHtcbiAgICAgICAgdm5vZGUuc2hhcGVGbGFnICY9IC0yNTc7XG4gICAgICAgIGN1cnJlbnQgPSB2bm9kZTtcbiAgICAgICAgcmV0dXJuIHJhd1ZOb2RlO1xuICAgICAgfVxuICAgICAgY29uc3Qga2V5ID0gdm5vZGUua2V5ID09IG51bGwgPyBjb21wIDogdm5vZGUua2V5O1xuICAgICAgY29uc3QgY2FjaGVkVk5vZGUgPSBjYWNoZS5nZXQoa2V5KTtcbiAgICAgIGlmICh2bm9kZS5lbCkge1xuICAgICAgICB2bm9kZSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgICAgICBpZiAocmF3Vk5vZGUuc2hhcGVGbGFnICYgMTI4KSB7XG4gICAgICAgICAgcmF3Vk5vZGUuc3NDb250ZW50ID0gdm5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBlbmRpbmdDYWNoZUtleSA9IGtleTtcbiAgICAgIGlmIChjYWNoZWRWTm9kZSkge1xuICAgICAgICB2bm9kZS5lbCA9IGNhY2hlZFZOb2RlLmVsO1xuICAgICAgICB2bm9kZS5jb21wb25lbnQgPSBjYWNoZWRWTm9kZS5jb21wb25lbnQ7XG4gICAgICAgIGlmICh2bm9kZS50cmFuc2l0aW9uKSB7XG4gICAgICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKHZub2RlLCB2bm9kZS50cmFuc2l0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICB2bm9kZS5zaGFwZUZsYWcgfD0gNTEyO1xuICAgICAgICBrZXlzLmRlbGV0ZShrZXkpO1xuICAgICAgICBrZXlzLmFkZChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAga2V5cy5hZGQoa2V5KTtcbiAgICAgICAgaWYgKG1heCAmJiBrZXlzLnNpemUgPiBwYXJzZUludChtYXgsIDEwKSkge1xuICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShrZXlzLnZhbHVlcygpLm5leHQoKS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZub2RlLnNoYXBlRmxhZyB8PSAyNTY7XG4gICAgICBjdXJyZW50ID0gdm5vZGU7XG4gICAgICByZXR1cm4gaXNTdXNwZW5zZShyYXdWTm9kZS50eXBlKSA/IHJhd1ZOb2RlIDogdm5vZGU7XG4gICAgfTtcbiAgfVxufTtcbmNvbnN0IEtlZXBBbGl2ZSA9IEtlZXBBbGl2ZUltcGw7XG5mdW5jdGlvbiBtYXRjaGVzKHBhdHRlcm4sIG5hbWUpIHtcbiAgaWYgKGlzQXJyYXkocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi5zb21lKChwKSA9PiBtYXRjaGVzKHAsIG5hbWUpKTtcbiAgfSBlbHNlIGlmIChpc1N0cmluZyhwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KFwiLFwiKS5pbmNsdWRlcyhuYW1lKTtcbiAgfSBlbHNlIGlmIChpc1JlZ0V4cChwYXR0ZXJuKSkge1xuICAgIHBhdHRlcm4ubGFzdEluZGV4ID0gMDtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIG9uQWN0aXZhdGVkKGhvb2ssIHRhcmdldCkge1xuICByZWdpc3RlcktlZXBBbGl2ZUhvb2soaG9vaywgXCJhXCIsIHRhcmdldCk7XG59XG5mdW5jdGlvbiBvbkRlYWN0aXZhdGVkKGhvb2ssIHRhcmdldCkge1xuICByZWdpc3RlcktlZXBBbGl2ZUhvb2soaG9vaywgXCJkYVwiLCB0YXJnZXQpO1xufVxuZnVuY3Rpb24gcmVnaXN0ZXJLZWVwQWxpdmVIb29rKGhvb2ssIHR5cGUsIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSkge1xuICBjb25zdCB3cmFwcGVkSG9vayA9IGhvb2suX193ZGMgfHwgKGhvb2suX193ZGMgPSAoKSA9PiB7XG4gICAgbGV0IGN1cnJlbnQgPSB0YXJnZXQ7XG4gICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgIGlmIChjdXJyZW50LmlzRGVhY3RpdmF0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gaG9vaygpO1xuICB9KTtcbiAgaW5qZWN0SG9vayh0eXBlLCB3cmFwcGVkSG9vaywgdGFyZ2V0KTtcbiAgaWYgKHRhcmdldCkge1xuICAgIGxldCBjdXJyZW50ID0gdGFyZ2V0LnBhcmVudDtcbiAgICB3aGlsZSAoY3VycmVudCAmJiBjdXJyZW50LnBhcmVudCkge1xuICAgICAgaWYgKGlzS2VlcEFsaXZlKGN1cnJlbnQucGFyZW50LnZub2RlKSkge1xuICAgICAgICBpbmplY3RUb0tlZXBBbGl2ZVJvb3Qod3JhcHBlZEhvb2ssIHR5cGUsIHRhcmdldCwgY3VycmVudCk7XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBpbmplY3RUb0tlZXBBbGl2ZVJvb3QoaG9vaywgdHlwZSwgdGFyZ2V0LCBrZWVwQWxpdmVSb290KSB7XG4gIGNvbnN0IGluamVjdGVkID0gaW5qZWN0SG9vayhcbiAgICB0eXBlLFxuICAgIGhvb2ssXG4gICAga2VlcEFsaXZlUm9vdCxcbiAgICB0cnVlXG4gICAgLyogcHJlcGVuZCAqL1xuICApO1xuICBvblVubW91bnRlZCgoKSA9PiB7XG4gICAgcmVtb3ZlKGtlZXBBbGl2ZVJvb3RbdHlwZV0sIGluamVjdGVkKTtcbiAgfSwgdGFyZ2V0KTtcbn1cbmZ1bmN0aW9uIHJlc2V0U2hhcGVGbGFnKHZub2RlKSB7XG4gIHZub2RlLnNoYXBlRmxhZyAmPSAtMjU3O1xuICB2bm9kZS5zaGFwZUZsYWcgJj0gLTUxMztcbn1cbmZ1bmN0aW9uIGdldElubmVyQ2hpbGQodm5vZGUpIHtcbiAgcmV0dXJuIHZub2RlLnNoYXBlRmxhZyAmIDEyOCA/IHZub2RlLnNzQ29udGVudCA6IHZub2RlO1xufVxuXG5mdW5jdGlvbiBpbmplY3RIb29rKHR5cGUsIGhvb2ssIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSwgcHJlcGVuZCA9IGZhbHNlKSB7XG4gIGlmICh0YXJnZXQpIHtcbiAgICBjb25zdCBob29rcyA9IHRhcmdldFt0eXBlXSB8fCAodGFyZ2V0W3R5cGVdID0gW10pO1xuICAgIGNvbnN0IHdyYXBwZWRIb29rID0gaG9vay5fX3dlaCB8fCAoaG9vay5fX3dlaCA9ICguLi5hcmdzKSA9PiB7XG4gICAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgICBjb25zdCByZXNldCA9IHNldEN1cnJlbnRJbnN0YW5jZSh0YXJnZXQpO1xuICAgICAgY29uc3QgcmVzID0gY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoaG9vaywgdGFyZ2V0LCB0eXBlLCBhcmdzKTtcbiAgICAgIHJlc2V0KCk7XG4gICAgICByZXNldFRyYWNraW5nKCk7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0pO1xuICAgIGlmIChwcmVwZW5kKSB7XG4gICAgICBob29rcy51bnNoaWZ0KHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaG9va3MucHVzaCh3cmFwcGVkSG9vayk7XG4gICAgfVxuICAgIHJldHVybiB3cmFwcGVkSG9vaztcbiAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgY29uc3QgYXBpTmFtZSA9IHRvSGFuZGxlcktleShFcnJvclR5cGVTdHJpbmdzJDFbdHlwZV0ucmVwbGFjZSgvIGhvb2skLywgXCJcIikpO1xuICAgIHdhcm4kMShcbiAgICAgIGAke2FwaU5hbWV9IGlzIGNhbGxlZCB3aGVuIHRoZXJlIGlzIG5vIGFjdGl2ZSBjb21wb25lbnQgaW5zdGFuY2UgdG8gYmUgYXNzb2NpYXRlZCB3aXRoLiBMaWZlY3ljbGUgaW5qZWN0aW9uIEFQSXMgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgZXhlY3V0aW9uIG9mIHNldHVwKCkuYCArIChgIElmIHlvdSBhcmUgdXNpbmcgYXN5bmMgc2V0dXAoKSwgbWFrZSBzdXJlIHRvIHJlZ2lzdGVyIGxpZmVjeWNsZSBob29rcyBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0IHN0YXRlbWVudC5gIClcbiAgICApO1xuICB9XG59XG5jb25zdCBjcmVhdGVIb29rID0gKGxpZmVjeWNsZSkgPT4gKGhvb2ssIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSkgPT4ge1xuICBpZiAoIWlzSW5TU1JDb21wb25lbnRTZXR1cCB8fCBsaWZlY3ljbGUgPT09IFwic3BcIikge1xuICAgIGluamVjdEhvb2sobGlmZWN5Y2xlLCAoLi4uYXJncykgPT4gaG9vayguLi5hcmdzKSwgdGFyZ2V0KTtcbiAgfVxufTtcbmNvbnN0IG9uQmVmb3JlTW91bnQgPSBjcmVhdGVIb29rKFwiYm1cIik7XG5jb25zdCBvbk1vdW50ZWQgPSBjcmVhdGVIb29rKFwibVwiKTtcbmNvbnN0IG9uQmVmb3JlVXBkYXRlID0gY3JlYXRlSG9vayhcbiAgXCJidVwiXG4pO1xuY29uc3Qgb25VcGRhdGVkID0gY3JlYXRlSG9vayhcInVcIik7XG5jb25zdCBvbkJlZm9yZVVubW91bnQgPSBjcmVhdGVIb29rKFxuICBcImJ1bVwiXG4pO1xuY29uc3Qgb25Vbm1vdW50ZWQgPSBjcmVhdGVIb29rKFwidW1cIik7XG5jb25zdCBvblNlcnZlclByZWZldGNoID0gY3JlYXRlSG9vayhcbiAgXCJzcFwiXG4pO1xuY29uc3Qgb25SZW5kZXJUcmlnZ2VyZWQgPSBjcmVhdGVIb29rKFwicnRnXCIpO1xuY29uc3Qgb25SZW5kZXJUcmFja2VkID0gY3JlYXRlSG9vayhcInJ0Y1wiKTtcbmZ1bmN0aW9uIG9uRXJyb3JDYXB0dXJlZChob29rLCB0YXJnZXQgPSBjdXJyZW50SW5zdGFuY2UpIHtcbiAgaW5qZWN0SG9vayhcImVjXCIsIGhvb2ssIHRhcmdldCk7XG59XG5cbmNvbnN0IENPTVBPTkVOVFMgPSBcImNvbXBvbmVudHNcIjtcbmNvbnN0IERJUkVDVElWRVMgPSBcImRpcmVjdGl2ZXNcIjtcbmZ1bmN0aW9uIHJlc29sdmVDb21wb25lbnQobmFtZSwgbWF5YmVTZWxmUmVmZXJlbmNlKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQoQ09NUE9ORU5UUywgbmFtZSwgdHJ1ZSwgbWF5YmVTZWxmUmVmZXJlbmNlKSB8fCBuYW1lO1xufVxuY29uc3QgTlVMTF9EWU5BTUlDX0NPTVBPTkVOVCA9IFN5bWJvbC5mb3IoXCJ2LW5kY1wiKTtcbmZ1bmN0aW9uIHJlc29sdmVEeW5hbWljQ29tcG9uZW50KGNvbXBvbmVudCkge1xuICBpZiAoaXNTdHJpbmcoY29tcG9uZW50KSkge1xuICAgIHJldHVybiByZXNvbHZlQXNzZXQoQ09NUE9ORU5UUywgY29tcG9uZW50LCBmYWxzZSkgfHwgY29tcG9uZW50O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb21wb25lbnQgfHwgTlVMTF9EWU5BTUlDX0NPTVBPTkVOVDtcbiAgfVxufVxuZnVuY3Rpb24gcmVzb2x2ZURpcmVjdGl2ZShuYW1lKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQoRElSRUNUSVZFUywgbmFtZSk7XG59XG5mdW5jdGlvbiByZXNvbHZlQXNzZXQodHlwZSwgbmFtZSwgd2Fybk1pc3NpbmcgPSB0cnVlLCBtYXliZVNlbGZSZWZlcmVuY2UgPSBmYWxzZSkge1xuICBjb25zdCBpbnN0YW5jZSA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSB8fCBjdXJyZW50SW5zdGFuY2U7XG4gIGlmIChpbnN0YW5jZSkge1xuICAgIGNvbnN0IENvbXBvbmVudCA9IGluc3RhbmNlLnR5cGU7XG4gICAgaWYgKHR5cGUgPT09IENPTVBPTkVOVFMpIHtcbiAgICAgIGNvbnN0IHNlbGZOYW1lID0gZ2V0Q29tcG9uZW50TmFtZShcbiAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICAgIGlmIChzZWxmTmFtZSAmJiAoc2VsZk5hbWUgPT09IG5hbWUgfHwgc2VsZk5hbWUgPT09IGNhbWVsaXplKG5hbWUpIHx8IHNlbGZOYW1lID09PSBjYXBpdGFsaXplKGNhbWVsaXplKG5hbWUpKSkpIHtcbiAgICAgICAgcmV0dXJuIENvbXBvbmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzID0gKFxuICAgICAgLy8gbG9jYWwgcmVnaXN0cmF0aW9uXG4gICAgICAvLyBjaGVjayBpbnN0YW5jZVt0eXBlXSBmaXJzdCB3aGljaCBpcyByZXNvbHZlZCBmb3Igb3B0aW9ucyBBUElcbiAgICAgIHJlc29sdmUoaW5zdGFuY2VbdHlwZV0gfHwgQ29tcG9uZW50W3R5cGVdLCBuYW1lKSB8fCAvLyBnbG9iYWwgcmVnaXN0cmF0aW9uXG4gICAgICByZXNvbHZlKGluc3RhbmNlLmFwcENvbnRleHRbdHlwZV0sIG5hbWUpXG4gICAgKTtcbiAgICBpZiAoIXJlcyAmJiBtYXliZVNlbGZSZWZlcmVuY2UpIHtcbiAgICAgIHJldHVybiBDb21wb25lbnQ7XG4gICAgfVxuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICAgIGNvbnN0IGV4dHJhID0gdHlwZSA9PT0gQ09NUE9ORU5UUyA/IGBcbklmIHRoaXMgaXMgYSBuYXRpdmUgY3VzdG9tIGVsZW1lbnQsIG1ha2Ugc3VyZSB0byBleGNsdWRlIGl0IGZyb20gY29tcG9uZW50IHJlc29sdXRpb24gdmlhIGNvbXBpbGVyT3B0aW9ucy5pc0N1c3RvbUVsZW1lbnQuYCA6IGBgO1xuICAgICAgd2FybiQxKGBGYWlsZWQgdG8gcmVzb2x2ZSAke3R5cGUuc2xpY2UoMCwgLTEpfTogJHtuYW1lfSR7ZXh0cmF9YCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIHdhcm4kMShcbiAgICAgIGByZXNvbHZlJHtjYXBpdGFsaXplKHR5cGUuc2xpY2UoMCwgLTEpKX0gY2FuIG9ubHkgYmUgdXNlZCBpbiByZW5kZXIoKSBvciBzZXR1cCgpLmBcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiByZXNvbHZlKHJlZ2lzdHJ5LCBuYW1lKSB7XG4gIHJldHVybiByZWdpc3RyeSAmJiAocmVnaXN0cnlbbmFtZV0gfHwgcmVnaXN0cnlbY2FtZWxpemUobmFtZSldIHx8IHJlZ2lzdHJ5W2NhcGl0YWxpemUoY2FtZWxpemUobmFtZSkpXSk7XG59XG5cbmZ1bmN0aW9uIHJlbmRlckxpc3Qoc291cmNlLCByZW5kZXJJdGVtLCBjYWNoZSwgaW5kZXgpIHtcbiAgbGV0IHJldDtcbiAgY29uc3QgY2FjaGVkID0gY2FjaGUgJiYgY2FjaGVbaW5kZXhdO1xuICBjb25zdCBzb3VyY2VJc0FycmF5ID0gaXNBcnJheShzb3VyY2UpO1xuICBpZiAoc291cmNlSXNBcnJheSB8fCBpc1N0cmluZyhzb3VyY2UpKSB7XG4gICAgY29uc3Qgc291cmNlSXNSZWFjdGl2ZUFycmF5ID0gc291cmNlSXNBcnJheSAmJiBpc1JlYWN0aXZlKHNvdXJjZSk7XG4gICAgbGV0IG5lZWRzV3JhcCA9IGZhbHNlO1xuICAgIGxldCBpc1JlYWRvbmx5U291cmNlID0gZmFsc2U7XG4gICAgaWYgKHNvdXJjZUlzUmVhY3RpdmVBcnJheSkge1xuICAgICAgbmVlZHNXcmFwID0gIWlzU2hhbGxvdyhzb3VyY2UpO1xuICAgICAgaXNSZWFkb25seVNvdXJjZSA9IGlzUmVhZG9ubHkoc291cmNlKTtcbiAgICAgIHNvdXJjZSA9IHNoYWxsb3dSZWFkQXJyYXkoc291cmNlKTtcbiAgICB9XG4gICAgcmV0ID0gbmV3IEFycmF5KHNvdXJjZS5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gc291cmNlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVySXRlbShcbiAgICAgICAgbmVlZHNXcmFwID8gaXNSZWFkb25seVNvdXJjZSA/IHRvUmVhZG9ubHkodG9SZWFjdGl2ZShzb3VyY2VbaV0pKSA6IHRvUmVhY3RpdmUoc291cmNlW2ldKSA6IHNvdXJjZVtpXSxcbiAgICAgICAgaSxcbiAgICAgICAgdm9pZCAwLFxuICAgICAgICBjYWNoZWQgJiYgY2FjaGVkW2ldXG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2Ygc291cmNlID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgIU51bWJlci5pc0ludGVnZXIoc291cmNlKSkge1xuICAgICAgd2FybiQxKGBUaGUgdi1mb3IgcmFuZ2UgZXhwZWN0IGFuIGludGVnZXIgdmFsdWUgYnV0IGdvdCAke3NvdXJjZX0uYCk7XG4gICAgfVxuICAgIHJldCA9IG5ldyBBcnJheShzb3VyY2UpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlckl0ZW0oaSArIDEsIGksIHZvaWQgMCwgY2FjaGVkICYmIGNhY2hlZFtpXSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICBpZiAoc291cmNlW1N5bWJvbC5pdGVyYXRvcl0pIHtcbiAgICAgIHJldCA9IEFycmF5LmZyb20oXG4gICAgICAgIHNvdXJjZSxcbiAgICAgICAgKGl0ZW0sIGkpID0+IHJlbmRlckl0ZW0oaXRlbSwgaSwgdm9pZCAwLCBjYWNoZWQgJiYgY2FjaGVkW2ldKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gICAgICByZXQgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXJJdGVtKHNvdXJjZVtrZXldLCBrZXksIGksIGNhY2hlZCAmJiBjYWNoZWRbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXQgPSBbXTtcbiAgfVxuICBpZiAoY2FjaGUpIHtcbiAgICBjYWNoZVtpbmRleF0gPSByZXQ7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2xvdHMoc2xvdHMsIGR5bmFtaWNTbG90cykge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGR5bmFtaWNTbG90cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHNsb3QgPSBkeW5hbWljU2xvdHNbaV07XG4gICAgaWYgKGlzQXJyYXkoc2xvdCkpIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2xvdC5sZW5ndGg7IGorKykge1xuICAgICAgICBzbG90c1tzbG90W2pdLm5hbWVdID0gc2xvdFtqXS5mbjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNsb3QpIHtcbiAgICAgIHNsb3RzW3Nsb3QubmFtZV0gPSBzbG90LmtleSA/ICguLi5hcmdzKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcyA9IHNsb3QuZm4oLi4uYXJncyk7XG4gICAgICAgIGlmIChyZXMpIHJlcy5rZXkgPSBzbG90LmtleTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH0gOiBzbG90LmZuO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xvdHM7XG59XG5cbmZ1bmN0aW9uIHJlbmRlclNsb3Qoc2xvdHMsIG5hbWUsIHByb3BzID0ge30sIGZhbGxiYWNrLCBub1Nsb3R0ZWQpIHtcbiAgaWYgKGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZS5jZSB8fCBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UucGFyZW50ICYmIGlzQXN5bmNXcmFwcGVyKGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZS5wYXJlbnQpICYmIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZS5wYXJlbnQuY2UpIHtcbiAgICBpZiAobmFtZSAhPT0gXCJkZWZhdWx0XCIpIHByb3BzLm5hbWUgPSBuYW1lO1xuICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2soXG4gICAgICBGcmFnbWVudCxcbiAgICAgIG51bGwsXG4gICAgICBbY3JlYXRlVk5vZGUoXCJzbG90XCIsIHByb3BzLCBmYWxsYmFjayAmJiBmYWxsYmFjaygpKV0sXG4gICAgICA2NFxuICAgICk7XG4gIH1cbiAgbGV0IHNsb3QgPSBzbG90c1tuYW1lXTtcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgc2xvdCAmJiBzbG90Lmxlbmd0aCA+IDEpIHtcbiAgICB3YXJuJDEoXG4gICAgICBgU1NSLW9wdGltaXplZCBzbG90IGZ1bmN0aW9uIGRldGVjdGVkIGluIGEgbm9uLVNTUi1vcHRpbWl6ZWQgcmVuZGVyIGZ1bmN0aW9uLiBZb3UgbmVlZCB0byBtYXJrIHRoaXMgY29tcG9uZW50IHdpdGggJGR5bmFtaWMtc2xvdHMgaW4gdGhlIHBhcmVudCB0ZW1wbGF0ZS5gXG4gICAgKTtcbiAgICBzbG90ID0gKCkgPT4gW107XG4gIH1cbiAgaWYgKHNsb3QgJiYgc2xvdC5fYykge1xuICAgIHNsb3QuX2QgPSBmYWxzZTtcbiAgfVxuICBvcGVuQmxvY2soKTtcbiAgY29uc3QgdmFsaWRTbG90Q29udGVudCA9IHNsb3QgJiYgZW5zdXJlVmFsaWRWTm9kZShzbG90KHByb3BzKSk7XG4gIGNvbnN0IHNsb3RLZXkgPSBwcm9wcy5rZXkgfHwgLy8gc2xvdCBjb250ZW50IGFycmF5IG9mIGEgZHluYW1pYyBjb25kaXRpb25hbCBzbG90IG1heSBoYXZlIGEgYnJhbmNoXG4gIC8vIGtleSBhdHRhY2hlZCBpbiB0aGUgYGNyZWF0ZVNsb3RzYCBoZWxwZXIsIHJlc3BlY3QgdGhhdFxuICB2YWxpZFNsb3RDb250ZW50ICYmIHZhbGlkU2xvdENvbnRlbnQua2V5O1xuICBjb25zdCByZW5kZXJlZCA9IGNyZWF0ZUJsb2NrKFxuICAgIEZyYWdtZW50LFxuICAgIHtcbiAgICAgIGtleTogKHNsb3RLZXkgJiYgIWlzU3ltYm9sKHNsb3RLZXkpID8gc2xvdEtleSA6IGBfJHtuYW1lfWApICsgLy8gIzcyNTYgZm9yY2UgZGlmZmVyZW50aWF0ZSBmYWxsYmFjayBjb250ZW50IGZyb20gYWN0dWFsIGNvbnRlbnRcbiAgICAgICghdmFsaWRTbG90Q29udGVudCAmJiBmYWxsYmFjayA/IFwiX2ZiXCIgOiBcIlwiKVxuICAgIH0sXG4gICAgdmFsaWRTbG90Q29udGVudCB8fCAoZmFsbGJhY2sgPyBmYWxsYmFjaygpIDogW10pLFxuICAgIHZhbGlkU2xvdENvbnRlbnQgJiYgc2xvdHMuXyA9PT0gMSA/IDY0IDogLTJcbiAgKTtcbiAgaWYgKCFub1Nsb3R0ZWQgJiYgcmVuZGVyZWQuc2NvcGVJZCkge1xuICAgIHJlbmRlcmVkLnNsb3RTY29wZUlkcyA9IFtyZW5kZXJlZC5zY29wZUlkICsgXCItc1wiXTtcbiAgfVxuICBpZiAoc2xvdCAmJiBzbG90Ll9jKSB7XG4gICAgc2xvdC5fZCA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIHJlbmRlcmVkO1xufVxuZnVuY3Rpb24gZW5zdXJlVmFsaWRWTm9kZSh2bm9kZXMpIHtcbiAgcmV0dXJuIHZub2Rlcy5zb21lKChjaGlsZCkgPT4ge1xuICAgIGlmICghaXNWTm9kZShjaGlsZCkpIHJldHVybiB0cnVlO1xuICAgIGlmIChjaGlsZC50eXBlID09PSBDb21tZW50KSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGNoaWxkLnR5cGUgPT09IEZyYWdtZW50ICYmICFlbnN1cmVWYWxpZFZOb2RlKGNoaWxkLmNoaWxkcmVuKSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSkgPyB2bm9kZXMgOiBudWxsO1xufVxuXG5mdW5jdGlvbiB0b0hhbmRsZXJzKG9iaiwgcHJlc2VydmVDYXNlSWZOZWNlc3NhcnkpIHtcbiAgY29uc3QgcmV0ID0ge307XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFpc09iamVjdChvYmopKSB7XG4gICAgd2FybiQxKGB2LW9uIHdpdGggbm8gYXJndW1lbnQgZXhwZWN0cyBhbiBvYmplY3QgdmFsdWUuYCk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICByZXRbcHJlc2VydmVDYXNlSWZOZWNlc3NhcnkgJiYgL1tBLVpdLy50ZXN0KGtleSkgPyBgb246JHtrZXl9YCA6IHRvSGFuZGxlcktleShrZXkpXSA9IG9ialtrZXldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmNvbnN0IGdldFB1YmxpY0luc3RhbmNlID0gKGkpID0+IHtcbiAgaWYgKCFpKSByZXR1cm4gbnVsbDtcbiAgaWYgKGlzU3RhdGVmdWxDb21wb25lbnQoaSkpIHJldHVybiBnZXRDb21wb25lbnRQdWJsaWNJbnN0YW5jZShpKTtcbiAgcmV0dXJuIGdldFB1YmxpY0luc3RhbmNlKGkucGFyZW50KTtcbn07XG5jb25zdCBwdWJsaWNQcm9wZXJ0aWVzTWFwID0gKFxuICAvLyBNb3ZlIFBVUkUgbWFya2VyIHRvIG5ldyBsaW5lIHRvIHdvcmthcm91bmQgY29tcGlsZXIgZGlzY2FyZGluZyBpdFxuICAvLyBkdWUgdG8gdHlwZSBhbm5vdGF0aW9uXG4gIC8qIEBfX1BVUkVfXyAqLyBleHRlbmQoLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCksIHtcbiAgICAkOiAoaSkgPT4gaSxcbiAgICAkZWw6IChpKSA9PiBpLnZub2RlLmVsLFxuICAgICRkYXRhOiAoaSkgPT4gaS5kYXRhLFxuICAgICRwcm9wczogKGkpID0+ICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyBzaGFsbG93UmVhZG9ubHkoaS5wcm9wcykgOiBpLnByb3BzLFxuICAgICRhdHRyczogKGkpID0+ICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyBzaGFsbG93UmVhZG9ubHkoaS5hdHRycykgOiBpLmF0dHJzLFxuICAgICRzbG90czogKGkpID0+ICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyBzaGFsbG93UmVhZG9ubHkoaS5zbG90cykgOiBpLnNsb3RzLFxuICAgICRyZWZzOiAoaSkgPT4gISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSA/IHNoYWxsb3dSZWFkb25seShpLnJlZnMpIDogaS5yZWZzLFxuICAgICRwYXJlbnQ6IChpKSA9PiBnZXRQdWJsaWNJbnN0YW5jZShpLnBhcmVudCksXG4gICAgJHJvb3Q6IChpKSA9PiBnZXRQdWJsaWNJbnN0YW5jZShpLnJvb3QpLFxuICAgICRob3N0OiAoaSkgPT4gaS5jZSxcbiAgICAkZW1pdDogKGkpID0+IGkuZW1pdCxcbiAgICAkb3B0aW9uczogKGkpID0+IF9fVlVFX09QVElPTlNfQVBJX18gPyByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpKSA6IGkudHlwZSxcbiAgICAkZm9yY2VVcGRhdGU6IChpKSA9PiBpLmYgfHwgKGkuZiA9ICgpID0+IHtcbiAgICAgIHF1ZXVlSm9iKGkudXBkYXRlKTtcbiAgICB9KSxcbiAgICAkbmV4dFRpY2s6IChpKSA9PiBpLm4gfHwgKGkubiA9IG5leHRUaWNrLmJpbmQoaS5wcm94eSkpLFxuICAgICR3YXRjaDogKGkpID0+IF9fVlVFX09QVElPTlNfQVBJX18gPyBpbnN0YW5jZVdhdGNoLmJpbmQoaSkgOiBOT09QXG4gIH0pXG4pO1xuY29uc3QgaXNSZXNlcnZlZFByZWZpeCA9IChrZXkpID0+IGtleSA9PT0gXCJfXCIgfHwga2V5ID09PSBcIiRcIjtcbmNvbnN0IGhhc1NldHVwQmluZGluZyA9IChzdGF0ZSwga2V5KSA9PiBzdGF0ZSAhPT0gRU1QVFlfT0JKICYmICFzdGF0ZS5fX2lzU2NyaXB0U2V0dXAgJiYgaGFzT3duKHN0YXRlLCBrZXkpO1xuY29uc3QgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzID0ge1xuICBnZXQoeyBfOiBpbnN0YW5jZSB9LCBrZXkpIHtcbiAgICBpZiAoa2V5ID09PSBcIl9fdl9za2lwXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCB7IGN0eCwgc2V0dXBTdGF0ZSwgZGF0YSwgcHJvcHMsIGFjY2Vzc0NhY2hlLCB0eXBlLCBhcHBDb250ZXh0IH0gPSBpbnN0YW5jZTtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBrZXkgPT09IFwiX19pc1Z1ZVwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbGV0IG5vcm1hbGl6ZWRQcm9wcztcbiAgICBpZiAoa2V5WzBdICE9PSBcIiRcIikge1xuICAgICAgY29uc3QgbiA9IGFjY2Vzc0NhY2hlW2tleV07XG4gICAgICBpZiAobiAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHN3aXRjaCAobikge1xuICAgICAgICAgIGNhc2UgMSAvKiBTRVRVUCAqLzpcbiAgICAgICAgICAgIHJldHVybiBzZXR1cFN0YXRlW2tleV07XG4gICAgICAgICAgY2FzZSAyIC8qIERBVEEgKi86XG4gICAgICAgICAgICByZXR1cm4gZGF0YVtrZXldO1xuICAgICAgICAgIGNhc2UgNCAvKiBDT05URVhUICovOlxuICAgICAgICAgICAgcmV0dXJuIGN0eFtrZXldO1xuICAgICAgICAgIGNhc2UgMyAvKiBQUk9QUyAqLzpcbiAgICAgICAgICAgIHJldHVybiBwcm9wc1trZXldO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGhhc1NldHVwQmluZGluZyhzZXR1cFN0YXRlLCBrZXkpKSB7XG4gICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAxIC8qIFNFVFVQICovO1xuICAgICAgICByZXR1cm4gc2V0dXBTdGF0ZVtrZXldO1xuICAgICAgfSBlbHNlIGlmIChkYXRhICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKGRhdGEsIGtleSkpIHtcbiAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDIgLyogREFUQSAqLztcbiAgICAgICAgcmV0dXJuIGRhdGFba2V5XTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIC8vIG9ubHkgY2FjaGUgb3RoZXIgcHJvcGVydGllcyB3aGVuIGluc3RhbmNlIGhhcyBkZWNsYXJlZCAodGh1cyBzdGFibGUpXG4gICAgICAgIC8vIHByb3BzXG4gICAgICAgIChub3JtYWxpemVkUHJvcHMgPSBpbnN0YW5jZS5wcm9wc09wdGlvbnNbMF0pICYmIGhhc093bihub3JtYWxpemVkUHJvcHMsIGtleSlcbiAgICAgICkge1xuICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMyAvKiBQUk9QUyAqLztcbiAgICAgICAgcmV0dXJuIHByb3BzW2tleV07XG4gICAgICB9IGVsc2UgaWYgKGN0eCAhPT0gRU1QVFlfT0JKICYmIGhhc093bihjdHgsIGtleSkpIHtcbiAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDQgLyogQ09OVEVYVCAqLztcbiAgICAgICAgcmV0dXJuIGN0eFtrZXldO1xuICAgICAgfSBlbHNlIGlmICghX19WVUVfT1BUSU9OU19BUElfXyB8fCBzaG91bGRDYWNoZUFjY2Vzcykge1xuICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMCAvKiBPVEhFUiAqLztcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcHVibGljR2V0dGVyID0gcHVibGljUHJvcGVydGllc01hcFtrZXldO1xuICAgIGxldCBjc3NNb2R1bGUsIGdsb2JhbFByb3BlcnRpZXM7XG4gICAgaWYgKHB1YmxpY0dldHRlcikge1xuICAgICAgaWYgKGtleSA9PT0gXCIkYXR0cnNcIikge1xuICAgICAgICB0cmFjayhpbnN0YW5jZS5hdHRycywgXCJnZXRcIiwgXCJcIik7XG4gICAgICAgICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgbWFya0F0dHJzQWNjZXNzZWQoKTtcbiAgICAgIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBrZXkgPT09IFwiJHNsb3RzXCIpIHtcbiAgICAgICAgdHJhY2soaW5zdGFuY2UsIFwiZ2V0XCIsIGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHVibGljR2V0dGVyKGluc3RhbmNlKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgLy8gY3NzIG1vZHVsZSAoaW5qZWN0ZWQgYnkgdnVlLWxvYWRlcilcbiAgICAgIChjc3NNb2R1bGUgPSB0eXBlLl9fY3NzTW9kdWxlcykgJiYgKGNzc01vZHVsZSA9IGNzc01vZHVsZVtrZXldKVxuICAgICkge1xuICAgICAgcmV0dXJuIGNzc01vZHVsZTtcbiAgICB9IGVsc2UgaWYgKGN0eCAhPT0gRU1QVFlfT0JKICYmIGhhc093bihjdHgsIGtleSkpIHtcbiAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSA0IC8qIENPTlRFWFQgKi87XG4gICAgICByZXR1cm4gY3R4W2tleV07XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIC8vIGdsb2JhbCBwcm9wZXJ0aWVzXG4gICAgICBnbG9iYWxQcm9wZXJ0aWVzID0gYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcywgaGFzT3duKGdsb2JhbFByb3BlcnRpZXMsIGtleSlcbiAgICApIHtcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbFByb3BlcnRpZXNba2V5XTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlICYmICghaXNTdHJpbmcoa2V5KSB8fCAvLyAjMTA5MSBhdm9pZCBpbnRlcm5hbCBpc1JlZi9pc1ZOb2RlIGNoZWNrcyBvbiBjb21wb25lbnQgaW5zdGFuY2UgbGVhZGluZ1xuICAgIC8vIHRvIGluZmluaXRlIHdhcm5pbmcgbG9vcFxuICAgIGtleS5pbmRleE9mKFwiX192XCIpICE9PSAwKSkge1xuICAgICAgaWYgKGRhdGEgIT09IEVNUFRZX09CSiAmJiBpc1Jlc2VydmVkUHJlZml4KGtleVswXSkgJiYgaGFzT3duKGRhdGEsIGtleSkpIHtcbiAgICAgICAgd2FybiQxKFxuICAgICAgICAgIGBQcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAga2V5XG4gICAgICAgICAgKX0gbXVzdCBiZSBhY2Nlc3NlZCB2aWEgJGRhdGEgYmVjYXVzZSBpdCBzdGFydHMgd2l0aCBhIHJlc2VydmVkIGNoYXJhY3RlciAoXCIkXCIgb3IgXCJfXCIpIGFuZCBpcyBub3QgcHJveGllZCBvbiB0aGUgcmVuZGVyIGNvbnRleHQuYFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChpbnN0YW5jZSA9PT0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlKSB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBgUHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShrZXkpfSB3YXMgYWNjZXNzZWQgZHVyaW5nIHJlbmRlciBidXQgaXMgbm90IGRlZmluZWQgb24gaW5zdGFuY2UuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgc2V0KHsgXzogaW5zdGFuY2UgfSwga2V5LCB2YWx1ZSkge1xuICAgIGNvbnN0IHsgZGF0YSwgc2V0dXBTdGF0ZSwgY3R4IH0gPSBpbnN0YW5jZTtcbiAgICBpZiAoaGFzU2V0dXBCaW5kaW5nKHNldHVwU3RhdGUsIGtleSkpIHtcbiAgICAgIHNldHVwU3RhdGVba2V5XSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHNldHVwU3RhdGUuX19pc1NjcmlwdFNldHVwICYmIGhhc093bihzZXR1cFN0YXRlLCBrZXkpKSB7XG4gICAgICB3YXJuJDEoYENhbm5vdCBtdXRhdGUgPHNjcmlwdCBzZXR1cD4gYmluZGluZyBcIiR7a2V5fVwiIGZyb20gT3B0aW9ucyBBUEkuYCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChkYXRhICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKGRhdGEsIGtleSkpIHtcbiAgICAgIGRhdGFba2V5XSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChoYXNPd24oaW5zdGFuY2UucHJvcHMsIGtleSkpIHtcbiAgICAgICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgd2FybiQxKGBBdHRlbXB0aW5nIHRvIG11dGF0ZSBwcm9wIFwiJHtrZXl9XCIuIFByb3BzIGFyZSByZWFkb25seS5gKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGtleVswXSA9PT0gXCIkXCIgJiYga2V5LnNsaWNlKDEpIGluIGluc3RhbmNlKSB7XG4gICAgICAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHdhcm4kMShcbiAgICAgICAgYEF0dGVtcHRpbmcgdG8gbXV0YXRlIHB1YmxpYyBwcm9wZXJ0eSBcIiR7a2V5fVwiLiBQcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggJCBhcmUgcmVzZXJ2ZWQgYW5kIHJlYWRvbmx5LmBcbiAgICAgICk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIGtleSBpbiBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3R4W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGhhcyh7XG4gICAgXzogeyBkYXRhLCBzZXR1cFN0YXRlLCBhY2Nlc3NDYWNoZSwgY3R4LCBhcHBDb250ZXh0LCBwcm9wc09wdGlvbnMsIHR5cGUgfVxuICB9LCBrZXkpIHtcbiAgICBsZXQgbm9ybWFsaXplZFByb3BzLCBjc3NNb2R1bGVzO1xuICAgIHJldHVybiAhIShhY2Nlc3NDYWNoZVtrZXldIHx8IGRhdGEgIT09IEVNUFRZX09CSiAmJiBrZXlbMF0gIT09IFwiJFwiICYmIGhhc093bihkYXRhLCBrZXkpIHx8IGhhc1NldHVwQmluZGluZyhzZXR1cFN0YXRlLCBrZXkpIHx8IChub3JtYWxpemVkUHJvcHMgPSBwcm9wc09wdGlvbnNbMF0pICYmIGhhc093bihub3JtYWxpemVkUHJvcHMsIGtleSkgfHwgaGFzT3duKGN0eCwga2V5KSB8fCBoYXNPd24ocHVibGljUHJvcGVydGllc01hcCwga2V5KSB8fCBoYXNPd24oYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcywga2V5KSB8fCAoY3NzTW9kdWxlcyA9IHR5cGUuX19jc3NNb2R1bGVzKSAmJiBjc3NNb2R1bGVzW2tleV0pO1xuICB9LFxuICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcikge1xuICAgIGlmIChkZXNjcmlwdG9yLmdldCAhPSBudWxsKSB7XG4gICAgICB0YXJnZXQuXy5hY2Nlc3NDYWNoZVtrZXldID0gMDtcbiAgICB9IGVsc2UgaWYgKGhhc093bihkZXNjcmlwdG9yLCBcInZhbHVlXCIpKSB7XG4gICAgICB0aGlzLnNldCh0YXJnZXQsIGtleSwgZGVzY3JpcHRvci52YWx1ZSwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufTtcbmlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHRydWUpIHtcbiAgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLm93bktleXMgPSAodGFyZ2V0KSA9PiB7XG4gICAgd2FybiQxKFxuICAgICAgYEF2b2lkIGFwcCBsb2dpYyB0aGF0IHJlbGllcyBvbiBlbnVtZXJhdGluZyBrZXlzIG9uIGEgY29tcG9uZW50IGluc3RhbmNlLiBUaGUga2V5cyB3aWxsIGJlIGVtcHR5IGluIHByb2R1Y3Rpb24gbW9kZSB0byBhdm9pZCBwZXJmb3JtYW5jZSBvdmVyaGVhZC5gXG4gICAgKTtcbiAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHRhcmdldCk7XG4gIH07XG59XG5jb25zdCBSdW50aW1lQ29tcGlsZWRQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMgPSAvKiBAX19QVVJFX18gKi8gZXh0ZW5kKHt9LCBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMsIHtcbiAgZ2V0KHRhcmdldCwga2V5KSB7XG4gICAgaWYgKGtleSA9PT0gU3ltYm9sLnVuc2NvcGFibGVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMuZ2V0KHRhcmdldCwga2V5LCB0YXJnZXQpO1xuICB9LFxuICBoYXMoXywga2V5KSB7XG4gICAgY29uc3QgaGFzID0ga2V5WzBdICE9PSBcIl9cIiAmJiAhaXNHbG9iYWxseUFsbG93ZWQoa2V5KTtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAhaGFzICYmIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycy5oYXMoXywga2V5KSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgUHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICBrZXlcbiAgICAgICAgKX0gc2hvdWxkIG5vdCBzdGFydCB3aXRoIF8gd2hpY2ggaXMgYSByZXNlcnZlZCBwcmVmaXggZm9yIFZ1ZSBpbnRlcm5hbHMuYFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGhhcztcbiAgfVxufSk7XG5mdW5jdGlvbiBjcmVhdGVEZXZSZW5kZXJDb250ZXh0KGluc3RhbmNlKSB7XG4gIGNvbnN0IHRhcmdldCA9IHt9O1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBgX2AsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgZ2V0OiAoKSA9PiBpbnN0YW5jZVxuICB9KTtcbiAgT2JqZWN0LmtleXMocHVibGljUHJvcGVydGllc01hcCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGdldDogKCkgPT4gcHVibGljUHJvcGVydGllc01hcFtrZXldKGluc3RhbmNlKSxcbiAgICAgIC8vIGludGVyY2VwdGVkIGJ5IHRoZSBwcm94eSBzbyBubyBuZWVkIGZvciBpbXBsZW1lbnRhdGlvbixcbiAgICAgIC8vIGJ1dCBuZWVkZWQgdG8gcHJldmVudCBzZXQgZXJyb3JzXG4gICAgICBzZXQ6IE5PT1BcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBleHBvc2VQcm9wc09uUmVuZGVyQ29udGV4dChpbnN0YW5jZSkge1xuICBjb25zdCB7XG4gICAgY3R4LFxuICAgIHByb3BzT3B0aW9uczogW3Byb3BzT3B0aW9uc11cbiAgfSA9IGluc3RhbmNlO1xuICBpZiAocHJvcHNPcHRpb25zKSB7XG4gICAgT2JqZWN0LmtleXMocHJvcHNPcHRpb25zKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGdldDogKCkgPT4gaW5zdGFuY2UucHJvcHNba2V5XSxcbiAgICAgICAgc2V0OiBOT09QXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gZXhwb3NlU2V0dXBTdGF0ZU9uUmVuZGVyQ29udGV4dChpbnN0YW5jZSkge1xuICBjb25zdCB7IGN0eCwgc2V0dXBTdGF0ZSB9ID0gaW5zdGFuY2U7XG4gIE9iamVjdC5rZXlzKHRvUmF3KHNldHVwU3RhdGUpKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBpZiAoIXNldHVwU3RhdGUuX19pc1NjcmlwdFNldHVwKSB7XG4gICAgICBpZiAoaXNSZXNlcnZlZFByZWZpeChrZXlbMF0pKSB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBgc2V0dXAoKSByZXR1cm4gcHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgIGtleVxuICAgICAgICAgICl9IHNob3VsZCBub3Qgc3RhcnQgd2l0aCBcIiRcIiBvciBcIl9cIiB3aGljaCBhcmUgcmVzZXJ2ZWQgcHJlZml4ZXMgZm9yIFZ1ZSBpbnRlcm5hbHMuYFxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6ICgpID0+IHNldHVwU3RhdGVba2V5XSxcbiAgICAgICAgc2V0OiBOT09QXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5jb25zdCB3YXJuUnVudGltZVVzYWdlID0gKG1ldGhvZCkgPT4gd2FybiQxKFxuICBgJHttZXRob2R9KCkgaXMgYSBjb21waWxlci1oaW50IGhlbHBlciB0aGF0IGlzIG9ubHkgdXNhYmxlIGluc2lkZSA8c2NyaXB0IHNldHVwPiBvZiBhIHNpbmdsZSBmaWxlIGNvbXBvbmVudC4gSXRzIGFyZ3VtZW50cyBzaG91bGQgYmUgY29tcGlsZWQgYXdheSBhbmQgcGFzc2luZyBpdCBhdCBydW50aW1lIGhhcyBubyBlZmZlY3QuYFxuKTtcbmZ1bmN0aW9uIGRlZmluZVByb3BzKCkge1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIHdhcm5SdW50aW1lVXNhZ2UoYGRlZmluZVByb3BzYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBkZWZpbmVFbWl0cygpIHtcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICB3YXJuUnVudGltZVVzYWdlKGBkZWZpbmVFbWl0c2ApO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZGVmaW5lRXhwb3NlKGV4cG9zZWQpIHtcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICB3YXJuUnVudGltZVVzYWdlKGBkZWZpbmVFeHBvc2VgKTtcbiAgfVxufVxuZnVuY3Rpb24gZGVmaW5lT3B0aW9ucyhvcHRpb25zKSB7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgd2FyblJ1bnRpbWVVc2FnZShgZGVmaW5lT3B0aW9uc2ApO1xuICB9XG59XG5mdW5jdGlvbiBkZWZpbmVTbG90cygpIHtcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICB3YXJuUnVudGltZVVzYWdlKGBkZWZpbmVTbG90c2ApO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZGVmaW5lTW9kZWwoKSB7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgd2FyblJ1bnRpbWVVc2FnZShcImRlZmluZU1vZGVsXCIpO1xuICB9XG59XG5mdW5jdGlvbiB3aXRoRGVmYXVsdHMocHJvcHMsIGRlZmF1bHRzKSB7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgd2FyblJ1bnRpbWVVc2FnZShgd2l0aERlZmF1bHRzYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiB1c2VTbG90cygpIHtcbiAgcmV0dXJuIGdldENvbnRleHQoXCJ1c2VTbG90c1wiKS5zbG90cztcbn1cbmZ1bmN0aW9uIHVzZUF0dHJzKCkge1xuICByZXR1cm4gZ2V0Q29udGV4dChcInVzZUF0dHJzXCIpLmF0dHJzO1xufVxuZnVuY3Rpb24gZ2V0Q29udGV4dChjYWxsZWRGdW5jdGlvbk5hbWUpIHtcbiAgY29uc3QgaSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAhaSkge1xuICAgIHdhcm4kMShgJHtjYWxsZWRGdW5jdGlvbk5hbWV9KCkgY2FsbGVkIHdpdGhvdXQgYWN0aXZlIGluc3RhbmNlLmApO1xuICB9XG4gIHJldHVybiBpLnNldHVwQ29udGV4dCB8fCAoaS5zZXR1cENvbnRleHQgPSBjcmVhdGVTZXR1cENvbnRleHQoaSkpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHNPckVtaXRzKHByb3BzKSB7XG4gIHJldHVybiBpc0FycmF5KHByb3BzKSA/IHByb3BzLnJlZHVjZShcbiAgICAobm9ybWFsaXplZCwgcCkgPT4gKG5vcm1hbGl6ZWRbcF0gPSBudWxsLCBub3JtYWxpemVkKSxcbiAgICB7fVxuICApIDogcHJvcHM7XG59XG5mdW5jdGlvbiBtZXJnZURlZmF1bHRzKHJhdywgZGVmYXVsdHMpIHtcbiAgY29uc3QgcHJvcHMgPSBub3JtYWxpemVQcm9wc09yRW1pdHMocmF3KTtcbiAgZm9yIChjb25zdCBrZXkgaW4gZGVmYXVsdHMpIHtcbiAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJfX3NraXBcIikpIGNvbnRpbnVlO1xuICAgIGxldCBvcHQgPSBwcm9wc1trZXldO1xuICAgIGlmIChvcHQpIHtcbiAgICAgIGlmIChpc0FycmF5KG9wdCkgfHwgaXNGdW5jdGlvbihvcHQpKSB7XG4gICAgICAgIG9wdCA9IHByb3BzW2tleV0gPSB7IHR5cGU6IG9wdCwgZGVmYXVsdDogZGVmYXVsdHNba2V5XSB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0LmRlZmF1bHQgPSBkZWZhdWx0c1trZXldO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3B0ID09PSBudWxsKSB7XG4gICAgICBvcHQgPSBwcm9wc1trZXldID0geyBkZWZhdWx0OiBkZWZhdWx0c1trZXldIH07XG4gICAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICB3YXJuJDEoYHByb3BzIGRlZmF1bHQga2V5IFwiJHtrZXl9XCIgaGFzIG5vIGNvcnJlc3BvbmRpbmcgZGVjbGFyYXRpb24uYCk7XG4gICAgfVxuICAgIGlmIChvcHQgJiYgZGVmYXVsdHNbYF9fc2tpcF8ke2tleX1gXSkge1xuICAgICAgb3B0LnNraXBGYWN0b3J5ID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHByb3BzO1xufVxuZnVuY3Rpb24gbWVyZ2VNb2RlbHMoYSwgYikge1xuICBpZiAoIWEgfHwgIWIpIHJldHVybiBhIHx8IGI7XG4gIGlmIChpc0FycmF5KGEpICYmIGlzQXJyYXkoYikpIHJldHVybiBhLmNvbmNhdChiKTtcbiAgcmV0dXJuIGV4dGVuZCh7fSwgbm9ybWFsaXplUHJvcHNPckVtaXRzKGEpLCBub3JtYWxpemVQcm9wc09yRW1pdHMoYikpO1xufVxuZnVuY3Rpb24gY3JlYXRlUHJvcHNSZXN0UHJveHkocHJvcHMsIGV4Y2x1ZGVkS2V5cykge1xuICBjb25zdCByZXQgPSB7fTtcbiAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcbiAgICBpZiAoIWV4Y2x1ZGVkS2V5cy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmV0LCBrZXksIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiAoKSA9PiBwcm9wc1trZXldXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIHdpdGhBc3luY0NvbnRleHQoZ2V0QXdhaXRhYmxlKSB7XG4gIGNvbnN0IGN0eCA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAhY3R4KSB7XG4gICAgd2FybiQxKFxuICAgICAgYHdpdGhBc3luY0NvbnRleHQgY2FsbGVkIHdpdGhvdXQgYWN0aXZlIGN1cnJlbnQgaW5zdGFuY2UuIFRoaXMgaXMgbGlrZWx5IGEgYnVnLmBcbiAgICApO1xuICB9XG4gIGxldCBhd2FpdGFibGUgPSBnZXRBd2FpdGFibGUoKTtcbiAgdW5zZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgaWYgKGlzUHJvbWlzZShhd2FpdGFibGUpKSB7XG4gICAgYXdhaXRhYmxlID0gYXdhaXRhYmxlLmNhdGNoKChlKSA9PiB7XG4gICAgICBzZXRDdXJyZW50SW5zdGFuY2UoY3R4KTtcbiAgICAgIHRocm93IGU7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIFthd2FpdGFibGUsICgpID0+IHNldEN1cnJlbnRJbnN0YW5jZShjdHgpXTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRHVwbGljYXRlQ2hlY2tlcigpIHtcbiAgY29uc3QgY2FjaGUgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuICh0eXBlLCBrZXkpID0+IHtcbiAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgd2FybiQxKGAke3R5cGV9IHByb3BlcnR5IFwiJHtrZXl9XCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluICR7Y2FjaGVba2V5XX0uYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhY2hlW2tleV0gPSB0eXBlO1xuICAgIH1cbiAgfTtcbn1cbmxldCBzaG91bGRDYWNoZUFjY2VzcyA9IHRydWU7XG5mdW5jdGlvbiBhcHBseU9wdGlvbnMoaW5zdGFuY2UpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IHJlc29sdmVNZXJnZWRPcHRpb25zKGluc3RhbmNlKTtcbiAgY29uc3QgcHVibGljVGhpcyA9IGluc3RhbmNlLnByb3h5O1xuICBjb25zdCBjdHggPSBpbnN0YW5jZS5jdHg7XG4gIHNob3VsZENhY2hlQWNjZXNzID0gZmFsc2U7XG4gIGlmIChvcHRpb25zLmJlZm9yZUNyZWF0ZSkge1xuICAgIGNhbGxIb29rKG9wdGlvbnMuYmVmb3JlQ3JlYXRlLCBpbnN0YW5jZSwgXCJiY1wiKTtcbiAgfVxuICBjb25zdCB7XG4gICAgLy8gc3RhdGVcbiAgICBkYXRhOiBkYXRhT3B0aW9ucyxcbiAgICBjb21wdXRlZDogY29tcHV0ZWRPcHRpb25zLFxuICAgIG1ldGhvZHMsXG4gICAgd2F0Y2g6IHdhdGNoT3B0aW9ucyxcbiAgICBwcm92aWRlOiBwcm92aWRlT3B0aW9ucyxcbiAgICBpbmplY3Q6IGluamVjdE9wdGlvbnMsXG4gICAgLy8gbGlmZWN5Y2xlXG4gICAgY3JlYXRlZCxcbiAgICBiZWZvcmVNb3VudCxcbiAgICBtb3VudGVkLFxuICAgIGJlZm9yZVVwZGF0ZSxcbiAgICB1cGRhdGVkLFxuICAgIGFjdGl2YXRlZCxcbiAgICBkZWFjdGl2YXRlZCxcbiAgICBiZWZvcmVEZXN0cm95LFxuICAgIGJlZm9yZVVubW91bnQsXG4gICAgZGVzdHJveWVkLFxuICAgIHVubW91bnRlZCxcbiAgICByZW5kZXIsXG4gICAgcmVuZGVyVHJhY2tlZCxcbiAgICByZW5kZXJUcmlnZ2VyZWQsXG4gICAgZXJyb3JDYXB0dXJlZCxcbiAgICBzZXJ2ZXJQcmVmZXRjaCxcbiAgICAvLyBwdWJsaWMgQVBJXG4gICAgZXhwb3NlLFxuICAgIGluaGVyaXRBdHRycyxcbiAgICAvLyBhc3NldHNcbiAgICBjb21wb25lbnRzLFxuICAgIGRpcmVjdGl2ZXMsXG4gICAgZmlsdGVyc1xuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzID0gISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSA/IGNyZWF0ZUR1cGxpY2F0ZUNoZWNrZXIoKSA6IG51bGw7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgY29uc3QgW3Byb3BzT3B0aW9uc10gPSBpbnN0YW5jZS5wcm9wc09wdGlvbnM7XG4gICAgaWYgKHByb3BzT3B0aW9ucykge1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHNPcHRpb25zKSB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIlByb3BzXCIgLyogUFJPUFMgKi8sIGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChpbmplY3RPcHRpb25zKSB7XG4gICAgcmVzb2x2ZUluamVjdGlvbnMoaW5qZWN0T3B0aW9ucywgY3R4LCBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMpO1xuICB9XG4gIGlmIChtZXRob2RzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gbWV0aG9kcykge1xuICAgICAgY29uc3QgbWV0aG9kSGFuZGxlciA9IG1ldGhvZHNba2V5XTtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKG1ldGhvZEhhbmRsZXIpKSB7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgICAgICB2YWx1ZTogbWV0aG9kSGFuZGxlci5iaW5kKHB1YmxpY1RoaXMpLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3R4W2tleV0gPSBtZXRob2RIYW5kbGVyLmJpbmQocHVibGljVGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJNZXRob2RzXCIgLyogTUVUSE9EUyAqLywga2V5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBgTWV0aG9kIFwiJHtrZXl9XCIgaGFzIHR5cGUgXCIke3R5cGVvZiBtZXRob2RIYW5kbGVyfVwiIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChkYXRhT3B0aW9ucykge1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFpc0Z1bmN0aW9uKGRhdGFPcHRpb25zKSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgVGhlIGRhdGEgb3B0aW9uIG11c3QgYmUgYSBmdW5jdGlvbi4gUGxhaW4gb2JqZWN0IHVzYWdlIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQuYFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGRhdGFPcHRpb25zLmNhbGwocHVibGljVGhpcywgcHVibGljVGhpcyk7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgaXNQcm9taXNlKGRhdGEpKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIGBkYXRhKCkgcmV0dXJuZWQgYSBQcm9taXNlIC0gbm90ZSBkYXRhKCkgY2Fubm90IGJlIGFzeW5jOyBJZiB5b3UgaW50ZW5kIHRvIHBlcmZvcm0gZGF0YSBmZXRjaGluZyBiZWZvcmUgY29tcG9uZW50IHJlbmRlcnMsIHVzZSBhc3luYyBzZXR1cCgpICsgPFN1c3BlbnNlPi5gXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHdhcm4kMShgZGF0YSgpIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0LmApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0YW5jZS5kYXRhID0gcmVhY3RpdmUoZGF0YSk7XG4gICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiRGF0YVwiIC8qIERBVEEgKi8sIGtleSk7XG4gICAgICAgICAgaWYgKCFpc1Jlc2VydmVkUHJlZml4KGtleVswXSkpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xuICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgIGdldDogKCkgPT4gZGF0YVtrZXldLFxuICAgICAgICAgICAgICBzZXQ6IE5PT1BcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBzaG91bGRDYWNoZUFjY2VzcyA9IHRydWU7XG4gIGlmIChjb21wdXRlZE9wdGlvbnMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBjb21wdXRlZE9wdGlvbnMpIHtcbiAgICAgIGNvbnN0IG9wdCA9IGNvbXB1dGVkT3B0aW9uc1trZXldO1xuICAgICAgY29uc3QgZ2V0ID0gaXNGdW5jdGlvbihvcHQpID8gb3B0LmJpbmQocHVibGljVGhpcywgcHVibGljVGhpcykgOiBpc0Z1bmN0aW9uKG9wdC5nZXQpID8gb3B0LmdldC5iaW5kKHB1YmxpY1RoaXMsIHB1YmxpY1RoaXMpIDogTk9PUDtcbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIGdldCA9PT0gTk9PUCkge1xuICAgICAgICB3YXJuJDEoYENvbXB1dGVkIHByb3BlcnR5IFwiJHtrZXl9XCIgaGFzIG5vIGdldHRlci5gKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNldCA9ICFpc0Z1bmN0aW9uKG9wdCkgJiYgaXNGdW5jdGlvbihvcHQuc2V0KSA/IG9wdC5zZXQuYmluZChwdWJsaWNUaGlzKSA6ICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyAoKSA9PiB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBgV3JpdGUgb3BlcmF0aW9uIGZhaWxlZDogY29tcHV0ZWQgcHJvcGVydHkgXCIke2tleX1cIiBpcyByZWFkb25seS5gXG4gICAgICAgICk7XG4gICAgICB9IDogTk9PUDtcbiAgICAgIGNvbnN0IGMgPSBjb21wdXRlZCh7XG4gICAgICAgIGdldCxcbiAgICAgICAgc2V0XG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGdldDogKCkgPT4gYy52YWx1ZSxcbiAgICAgICAgc2V0OiAodikgPT4gYy52YWx1ZSA9IHZcbiAgICAgIH0pO1xuICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiQ29tcHV0ZWRcIiAvKiBDT01QVVRFRCAqLywga2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHdhdGNoT3B0aW9ucykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHdhdGNoT3B0aW9ucykge1xuICAgICAgY3JlYXRlV2F0Y2hlcih3YXRjaE9wdGlvbnNba2V5XSwgY3R4LCBwdWJsaWNUaGlzLCBrZXkpO1xuICAgIH1cbiAgfVxuICBpZiAocHJvdmlkZU9wdGlvbnMpIHtcbiAgICBjb25zdCBwcm92aWRlcyA9IGlzRnVuY3Rpb24ocHJvdmlkZU9wdGlvbnMpID8gcHJvdmlkZU9wdGlvbnMuY2FsbChwdWJsaWNUaGlzKSA6IHByb3ZpZGVPcHRpb25zO1xuICAgIFJlZmxlY3Qub3duS2V5cyhwcm92aWRlcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBwcm92aWRlKGtleSwgcHJvdmlkZXNba2V5XSk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKGNyZWF0ZWQpIHtcbiAgICBjYWxsSG9vayhjcmVhdGVkLCBpbnN0YW5jZSwgXCJjXCIpO1xuICB9XG4gIGZ1bmN0aW9uIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhyZWdpc3RlciwgaG9vaykge1xuICAgIGlmIChpc0FycmF5KGhvb2spKSB7XG4gICAgICBob29rLmZvckVhY2goKF9ob29rKSA9PiByZWdpc3RlcihfaG9vay5iaW5kKHB1YmxpY1RoaXMpKSk7XG4gICAgfSBlbHNlIGlmIChob29rKSB7XG4gICAgICByZWdpc3Rlcihob29rLmJpbmQocHVibGljVGhpcykpO1xuICAgIH1cbiAgfVxuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25CZWZvcmVNb3VudCwgYmVmb3JlTW91bnQpO1xuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25Nb3VudGVkLCBtb3VudGVkKTtcbiAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uQmVmb3JlVXBkYXRlLCBiZWZvcmVVcGRhdGUpO1xuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25VcGRhdGVkLCB1cGRhdGVkKTtcbiAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uQWN0aXZhdGVkLCBhY3RpdmF0ZWQpO1xuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25EZWFjdGl2YXRlZCwgZGVhY3RpdmF0ZWQpO1xuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25FcnJvckNhcHR1cmVkLCBlcnJvckNhcHR1cmVkKTtcbiAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uUmVuZGVyVHJhY2tlZCwgcmVuZGVyVHJhY2tlZCk7XG4gIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvblJlbmRlclRyaWdnZXJlZCwgcmVuZGVyVHJpZ2dlcmVkKTtcbiAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uQmVmb3JlVW5tb3VudCwgYmVmb3JlVW5tb3VudCk7XG4gIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvblVubW91bnRlZCwgdW5tb3VudGVkKTtcbiAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uU2VydmVyUHJlZmV0Y2gsIHNlcnZlclByZWZldGNoKTtcbiAgaWYgKGlzQXJyYXkoZXhwb3NlKSkge1xuICAgIGlmIChleHBvc2UubGVuZ3RoKSB7XG4gICAgICBjb25zdCBleHBvc2VkID0gaW5zdGFuY2UuZXhwb3NlZCB8fCAoaW5zdGFuY2UuZXhwb3NlZCA9IHt9KTtcbiAgICAgIGV4cG9zZS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9zZWQsIGtleSwge1xuICAgICAgICAgIGdldDogKCkgPT4gcHVibGljVGhpc1trZXldLFxuICAgICAgICAgIHNldDogKHZhbCkgPT4gcHVibGljVGhpc1trZXldID0gdmFsLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFpbnN0YW5jZS5leHBvc2VkKSB7XG4gICAgICBpbnN0YW5jZS5leHBvc2VkID0ge307XG4gICAgfVxuICB9XG4gIGlmIChyZW5kZXIgJiYgaW5zdGFuY2UucmVuZGVyID09PSBOT09QKSB7XG4gICAgaW5zdGFuY2UucmVuZGVyID0gcmVuZGVyO1xuICB9XG4gIGlmIChpbmhlcml0QXR0cnMgIT0gbnVsbCkge1xuICAgIGluc3RhbmNlLmluaGVyaXRBdHRycyA9IGluaGVyaXRBdHRycztcbiAgfVxuICBpZiAoY29tcG9uZW50cykgaW5zdGFuY2UuY29tcG9uZW50cyA9IGNvbXBvbmVudHM7XG4gIGlmIChkaXJlY3RpdmVzKSBpbnN0YW5jZS5kaXJlY3RpdmVzID0gZGlyZWN0aXZlcztcbiAgaWYgKHNlcnZlclByZWZldGNoKSB7XG4gICAgbWFya0FzeW5jQm91bmRhcnkoaW5zdGFuY2UpO1xuICB9XG59XG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0aW9ucyhpbmplY3RPcHRpb25zLCBjdHgsIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyA9IE5PT1ApIHtcbiAgaWYgKGlzQXJyYXkoaW5qZWN0T3B0aW9ucykpIHtcbiAgICBpbmplY3RPcHRpb25zID0gbm9ybWFsaXplSW5qZWN0KGluamVjdE9wdGlvbnMpO1xuICB9XG4gIGZvciAoY29uc3Qga2V5IGluIGluamVjdE9wdGlvbnMpIHtcbiAgICBjb25zdCBvcHQgPSBpbmplY3RPcHRpb25zW2tleV07XG4gICAgbGV0IGluamVjdGVkO1xuICAgIGlmIChpc09iamVjdChvcHQpKSB7XG4gICAgICBpZiAoXCJkZWZhdWx0XCIgaW4gb3B0KSB7XG4gICAgICAgIGluamVjdGVkID0gaW5qZWN0KFxuICAgICAgICAgIG9wdC5mcm9tIHx8IGtleSxcbiAgICAgICAgICBvcHQuZGVmYXVsdCxcbiAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbmplY3RlZCA9IGluamVjdChvcHQuZnJvbSB8fCBrZXkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbmplY3RlZCA9IGluamVjdChvcHQpO1xuICAgIH1cbiAgICBpZiAoaXNSZWYoaW5qZWN0ZWQpKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6ICgpID0+IGluamVjdGVkLnZhbHVlLFxuICAgICAgICBzZXQ6ICh2KSA9PiBpbmplY3RlZC52YWx1ZSA9IHZcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdHhba2V5XSA9IGluamVjdGVkO1xuICAgIH1cbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiSW5qZWN0XCIgLyogSU5KRUNUICovLCBrZXkpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gY2FsbEhvb2soaG9vaywgaW5zdGFuY2UsIHR5cGUpIHtcbiAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoXG4gICAgaXNBcnJheShob29rKSA/IGhvb2subWFwKChoKSA9PiBoLmJpbmQoaW5zdGFuY2UucHJveHkpKSA6IGhvb2suYmluZChpbnN0YW5jZS5wcm94eSksXG4gICAgaW5zdGFuY2UsXG4gICAgdHlwZVxuICApO1xufVxuZnVuY3Rpb24gY3JlYXRlV2F0Y2hlcihyYXcsIGN0eCwgcHVibGljVGhpcywga2V5KSB7XG4gIGxldCBnZXR0ZXIgPSBrZXkuaW5jbHVkZXMoXCIuXCIpID8gY3JlYXRlUGF0aEdldHRlcihwdWJsaWNUaGlzLCBrZXkpIDogKCkgPT4gcHVibGljVGhpc1trZXldO1xuICBpZiAoaXNTdHJpbmcocmF3KSkge1xuICAgIGNvbnN0IGhhbmRsZXIgPSBjdHhbcmF3XTtcbiAgICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgICAge1xuICAgICAgICB3YXRjaChnZXR0ZXIsIGhhbmRsZXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgd2FybiQxKGBJbnZhbGlkIHdhdGNoIGhhbmRsZXIgc3BlY2lmaWVkIGJ5IGtleSBcIiR7cmF3fVwiYCwgaGFuZGxlcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24ocmF3KSkge1xuICAgIHtcbiAgICAgIHdhdGNoKGdldHRlciwgcmF3LmJpbmQocHVibGljVGhpcykpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChyYXcpKSB7XG4gICAgaWYgKGlzQXJyYXkocmF3KSkge1xuICAgICAgcmF3LmZvckVhY2goKHIpID0+IGNyZWF0ZVdhdGNoZXIociwgY3R4LCBwdWJsaWNUaGlzLCBrZXkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaGFuZGxlciA9IGlzRnVuY3Rpb24ocmF3LmhhbmRsZXIpID8gcmF3LmhhbmRsZXIuYmluZChwdWJsaWNUaGlzKSA6IGN0eFtyYXcuaGFuZGxlcl07XG4gICAgICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgICAgICB3YXRjaChnZXR0ZXIsIGhhbmRsZXIsIHJhdyk7XG4gICAgICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgd2FybiQxKGBJbnZhbGlkIHdhdGNoIGhhbmRsZXIgc3BlY2lmaWVkIGJ5IGtleSBcIiR7cmF3LmhhbmRsZXJ9XCJgLCBoYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIHdhcm4kMShgSW52YWxpZCB3YXRjaCBvcHRpb246IFwiJHtrZXl9XCJgLCByYXcpO1xuICB9XG59XG5mdW5jdGlvbiByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpbnN0YW5jZSkge1xuICBjb25zdCBiYXNlID0gaW5zdGFuY2UudHlwZTtcbiAgY29uc3QgeyBtaXhpbnMsIGV4dGVuZHM6IGV4dGVuZHNPcHRpb25zIH0gPSBiYXNlO1xuICBjb25zdCB7XG4gICAgbWl4aW5zOiBnbG9iYWxNaXhpbnMsXG4gICAgb3B0aW9uc0NhY2hlOiBjYWNoZSxcbiAgICBjb25maWc6IHsgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzIH1cbiAgfSA9IGluc3RhbmNlLmFwcENvbnRleHQ7XG4gIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldChiYXNlKTtcbiAgbGV0IHJlc29sdmVkO1xuICBpZiAoY2FjaGVkKSB7XG4gICAgcmVzb2x2ZWQgPSBjYWNoZWQ7XG4gIH0gZWxzZSBpZiAoIWdsb2JhbE1peGlucy5sZW5ndGggJiYgIW1peGlucyAmJiAhZXh0ZW5kc09wdGlvbnMpIHtcbiAgICB7XG4gICAgICByZXNvbHZlZCA9IGJhc2U7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlc29sdmVkID0ge307XG4gICAgaWYgKGdsb2JhbE1peGlucy5sZW5ndGgpIHtcbiAgICAgIGdsb2JhbE1peGlucy5mb3JFYWNoKFxuICAgICAgICAobSkgPT4gbWVyZ2VPcHRpb25zKHJlc29sdmVkLCBtLCBvcHRpb25NZXJnZVN0cmF0ZWdpZXMsIHRydWUpXG4gICAgICApO1xuICAgIH1cbiAgICBtZXJnZU9wdGlvbnMocmVzb2x2ZWQsIGJhc2UsIG9wdGlvbk1lcmdlU3RyYXRlZ2llcyk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KGJhc2UpKSB7XG4gICAgY2FjaGUuc2V0KGJhc2UsIHJlc29sdmVkKTtcbiAgfVxuICByZXR1cm4gcmVzb2x2ZWQ7XG59XG5mdW5jdGlvbiBtZXJnZU9wdGlvbnModG8sIGZyb20sIHN0cmF0cywgYXNNaXhpbiA9IGZhbHNlKSB7XG4gIGNvbnN0IHsgbWl4aW5zLCBleHRlbmRzOiBleHRlbmRzT3B0aW9ucyB9ID0gZnJvbTtcbiAgaWYgKGV4dGVuZHNPcHRpb25zKSB7XG4gICAgbWVyZ2VPcHRpb25zKHRvLCBleHRlbmRzT3B0aW9ucywgc3RyYXRzLCB0cnVlKTtcbiAgfVxuICBpZiAobWl4aW5zKSB7XG4gICAgbWl4aW5zLmZvckVhY2goXG4gICAgICAobSkgPT4gbWVyZ2VPcHRpb25zKHRvLCBtLCBzdHJhdHMsIHRydWUpXG4gICAgKTtcbiAgfVxuICBmb3IgKGNvbnN0IGtleSBpbiBmcm9tKSB7XG4gICAgaWYgKGFzTWl4aW4gJiYga2V5ID09PSBcImV4cG9zZVwiKSB7XG4gICAgICAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHdhcm4kMShcbiAgICAgICAgYFwiZXhwb3NlXCIgb3B0aW9uIGlzIGlnbm9yZWQgd2hlbiBkZWNsYXJlZCBpbiBtaXhpbnMgb3IgZXh0ZW5kcy4gSXQgc2hvdWxkIG9ubHkgYmUgZGVjbGFyZWQgaW4gdGhlIGJhc2UgY29tcG9uZW50IGl0c2VsZi5gXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzdHJhdCA9IGludGVybmFsT3B0aW9uTWVyZ2VTdHJhdHNba2V5XSB8fCBzdHJhdHMgJiYgc3RyYXRzW2tleV07XG4gICAgICB0b1trZXldID0gc3RyYXQgPyBzdHJhdCh0b1trZXldLCBmcm9tW2tleV0pIDogZnJvbVtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG87XG59XG5jb25zdCBpbnRlcm5hbE9wdGlvbk1lcmdlU3RyYXRzID0ge1xuICBkYXRhOiBtZXJnZURhdGFGbixcbiAgcHJvcHM6IG1lcmdlRW1pdHNPclByb3BzT3B0aW9ucyxcbiAgZW1pdHM6IG1lcmdlRW1pdHNPclByb3BzT3B0aW9ucyxcbiAgLy8gb2JqZWN0c1xuICBtZXRob2RzOiBtZXJnZU9iamVjdE9wdGlvbnMsXG4gIGNvbXB1dGVkOiBtZXJnZU9iamVjdE9wdGlvbnMsXG4gIC8vIGxpZmVjeWNsZVxuICBiZWZvcmVDcmVhdGU6IG1lcmdlQXNBcnJheSxcbiAgY3JlYXRlZDogbWVyZ2VBc0FycmF5LFxuICBiZWZvcmVNb3VudDogbWVyZ2VBc0FycmF5LFxuICBtb3VudGVkOiBtZXJnZUFzQXJyYXksXG4gIGJlZm9yZVVwZGF0ZTogbWVyZ2VBc0FycmF5LFxuICB1cGRhdGVkOiBtZXJnZUFzQXJyYXksXG4gIGJlZm9yZURlc3Ryb3k6IG1lcmdlQXNBcnJheSxcbiAgYmVmb3JlVW5tb3VudDogbWVyZ2VBc0FycmF5LFxuICBkZXN0cm95ZWQ6IG1lcmdlQXNBcnJheSxcbiAgdW5tb3VudGVkOiBtZXJnZUFzQXJyYXksXG4gIGFjdGl2YXRlZDogbWVyZ2VBc0FycmF5LFxuICBkZWFjdGl2YXRlZDogbWVyZ2VBc0FycmF5LFxuICBlcnJvckNhcHR1cmVkOiBtZXJnZUFzQXJyYXksXG4gIHNlcnZlclByZWZldGNoOiBtZXJnZUFzQXJyYXksXG4gIC8vIGFzc2V0c1xuICBjb21wb25lbnRzOiBtZXJnZU9iamVjdE9wdGlvbnMsXG4gIGRpcmVjdGl2ZXM6IG1lcmdlT2JqZWN0T3B0aW9ucyxcbiAgLy8gd2F0Y2hcbiAgd2F0Y2g6IG1lcmdlV2F0Y2hPcHRpb25zLFxuICAvLyBwcm92aWRlIC8gaW5qZWN0XG4gIHByb3ZpZGU6IG1lcmdlRGF0YUZuLFxuICBpbmplY3Q6IG1lcmdlSW5qZWN0XG59O1xuZnVuY3Rpb24gbWVyZ2VEYXRhRm4odG8sIGZyb20pIHtcbiAgaWYgKCFmcm9tKSB7XG4gICAgcmV0dXJuIHRvO1xuICB9XG4gIGlmICghdG8pIHtcbiAgICByZXR1cm4gZnJvbTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuKCkge1xuICAgIHJldHVybiAoZXh0ZW5kKShcbiAgICAgIGlzRnVuY3Rpb24odG8pID8gdG8uY2FsbCh0aGlzLCB0aGlzKSA6IHRvLFxuICAgICAgaXNGdW5jdGlvbihmcm9tKSA/IGZyb20uY2FsbCh0aGlzLCB0aGlzKSA6IGZyb21cbiAgICApO1xuICB9O1xufVxuZnVuY3Rpb24gbWVyZ2VJbmplY3QodG8sIGZyb20pIHtcbiAgcmV0dXJuIG1lcmdlT2JqZWN0T3B0aW9ucyhub3JtYWxpemVJbmplY3QodG8pLCBub3JtYWxpemVJbmplY3QoZnJvbSkpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplSW5qZWN0KHJhdykge1xuICBpZiAoaXNBcnJheShyYXcpKSB7XG4gICAgY29uc3QgcmVzID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYXcubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc1tyYXdbaV1dID0gcmF3W2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIHJldHVybiByYXc7XG59XG5mdW5jdGlvbiBtZXJnZUFzQXJyYXkodG8sIGZyb20pIHtcbiAgcmV0dXJuIHRvID8gWy4uLm5ldyBTZXQoW10uY29uY2F0KHRvLCBmcm9tKSldIDogZnJvbTtcbn1cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0T3B0aW9ucyh0bywgZnJvbSkge1xuICByZXR1cm4gdG8gPyBleHRlbmQoLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCksIHRvLCBmcm9tKSA6IGZyb207XG59XG5mdW5jdGlvbiBtZXJnZUVtaXRzT3JQcm9wc09wdGlvbnModG8sIGZyb20pIHtcbiAgaWYgKHRvKSB7XG4gICAgaWYgKGlzQXJyYXkodG8pICYmIGlzQXJyYXkoZnJvbSkpIHtcbiAgICAgIHJldHVybiBbLi4uLyogQF9fUFVSRV9fICovIG5ldyBTZXQoWy4uLnRvLCAuLi5mcm9tXSldO1xuICAgIH1cbiAgICByZXR1cm4gZXh0ZW5kKFxuICAgICAgLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBub3JtYWxpemVQcm9wc09yRW1pdHModG8pLFxuICAgICAgbm9ybWFsaXplUHJvcHNPckVtaXRzKGZyb20gIT0gbnVsbCA/IGZyb20gOiB7fSlcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmcm9tO1xuICB9XG59XG5mdW5jdGlvbiBtZXJnZVdhdGNoT3B0aW9ucyh0bywgZnJvbSkge1xuICBpZiAoIXRvKSByZXR1cm4gZnJvbTtcbiAgaWYgKCFmcm9tKSByZXR1cm4gdG87XG4gIGNvbnN0IG1lcmdlZCA9IGV4dGVuZCgvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKSwgdG8pO1xuICBmb3IgKGNvbnN0IGtleSBpbiBmcm9tKSB7XG4gICAgbWVyZ2VkW2tleV0gPSBtZXJnZUFzQXJyYXkodG9ba2V5XSwgZnJvbVtrZXldKTtcbiAgfVxuICByZXR1cm4gbWVyZ2VkO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBcHBDb250ZXh0KCkge1xuICByZXR1cm4ge1xuICAgIGFwcDogbnVsbCxcbiAgICBjb25maWc6IHtcbiAgICAgIGlzTmF0aXZlVGFnOiBOTyxcbiAgICAgIHBlcmZvcm1hbmNlOiBmYWxzZSxcbiAgICAgIGdsb2JhbFByb3BlcnRpZXM6IHt9LFxuICAgICAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiB7fSxcbiAgICAgIGVycm9ySGFuZGxlcjogdm9pZCAwLFxuICAgICAgd2FybkhhbmRsZXI6IHZvaWQgMCxcbiAgICAgIGNvbXBpbGVyT3B0aW9uczoge31cbiAgICB9LFxuICAgIG1peGluczogW10sXG4gICAgY29tcG9uZW50czoge30sXG4gICAgZGlyZWN0aXZlczoge30sXG4gICAgcHJvdmlkZXM6IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgIG9wdGlvbnNDYWNoZTogLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCksXG4gICAgcHJvcHNDYWNoZTogLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCksXG4gICAgZW1pdHNDYWNoZTogLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKClcbiAgfTtcbn1cbmxldCB1aWQkMSA9IDA7XG5mdW5jdGlvbiBjcmVhdGVBcHBBUEkocmVuZGVyLCBoeWRyYXRlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVBcHAocm9vdENvbXBvbmVudCwgcm9vdFByb3BzID0gbnVsbCkge1xuICAgIGlmICghaXNGdW5jdGlvbihyb290Q29tcG9uZW50KSkge1xuICAgICAgcm9vdENvbXBvbmVudCA9IGV4dGVuZCh7fSwgcm9vdENvbXBvbmVudCk7XG4gICAgfVxuICAgIGlmIChyb290UHJvcHMgIT0gbnVsbCAmJiAhaXNPYmplY3Qocm9vdFByb3BzKSkge1xuICAgICAgISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiB3YXJuJDEoYHJvb3QgcHJvcHMgcGFzc2VkIHRvIGFwcC5tb3VudCgpIG11c3QgYmUgYW4gb2JqZWN0LmApO1xuICAgICAgcm9vdFByb3BzID0gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgY29udGV4dCA9IGNyZWF0ZUFwcENvbnRleHQoKTtcbiAgICBjb25zdCBpbnN0YWxsZWRQbHVnaW5zID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrU2V0KCk7XG4gICAgY29uc3QgcGx1Z2luQ2xlYW51cEZucyA9IFtdO1xuICAgIGxldCBpc01vdW50ZWQgPSBmYWxzZTtcbiAgICBjb25zdCBhcHAgPSBjb250ZXh0LmFwcCA9IHtcbiAgICAgIF91aWQ6IHVpZCQxKyssXG4gICAgICBfY29tcG9uZW50OiByb290Q29tcG9uZW50LFxuICAgICAgX3Byb3BzOiByb290UHJvcHMsXG4gICAgICBfY29udGFpbmVyOiBudWxsLFxuICAgICAgX2NvbnRleHQ6IGNvbnRleHQsXG4gICAgICBfaW5zdGFuY2U6IG51bGwsXG4gICAgICB2ZXJzaW9uLFxuICAgICAgZ2V0IGNvbmZpZygpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQuY29uZmlnO1xuICAgICAgfSxcbiAgICAgIHNldCBjb25maWcodikge1xuICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIGBhcHAuY29uZmlnIGNhbm5vdCBiZSByZXBsYWNlZC4gTW9kaWZ5IGluZGl2aWR1YWwgb3B0aW9ucyBpbnN0ZWFkLmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdXNlKHBsdWdpbiwgLi4ub3B0aW9ucykge1xuICAgICAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5oYXMocGx1Z2luKSkge1xuICAgICAgICAgICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgd2FybiQxKGBQbHVnaW4gaGFzIGFscmVhZHkgYmVlbiBhcHBsaWVkIHRvIHRhcmdldCBhcHAuYCk7XG4gICAgICAgIH0gZWxzZSBpZiAocGx1Z2luICYmIGlzRnVuY3Rpb24ocGx1Z2luLmluc3RhbGwpKSB7XG4gICAgICAgICAgaW5zdGFsbGVkUGx1Z2lucy5hZGQocGx1Z2luKTtcbiAgICAgICAgICBwbHVnaW4uaW5zdGFsbChhcHAsIC4uLm9wdGlvbnMpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24ocGx1Z2luKSkge1xuICAgICAgICAgIGluc3RhbGxlZFBsdWdpbnMuYWRkKHBsdWdpbik7XG4gICAgICAgICAgcGx1Z2luKGFwcCwgLi4ub3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIGBBIHBsdWdpbiBtdXN0IGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdCB3aXRoIGFuIFwiaW5zdGFsbFwiIGZ1bmN0aW9uLmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHA7XG4gICAgICB9LFxuICAgICAgbWl4aW4obWl4aW4pIHtcbiAgICAgICAgaWYgKF9fVlVFX09QVElPTlNfQVBJX18pIHtcbiAgICAgICAgICBpZiAoIWNvbnRleHQubWl4aW5zLmluY2x1ZGVzKG1peGluKSkge1xuICAgICAgICAgICAgY29udGV4dC5taXhpbnMucHVzaChtaXhpbik7XG4gICAgICAgICAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAgIFwiTWl4aW4gaGFzIGFscmVhZHkgYmVlbiBhcHBsaWVkIHRvIHRhcmdldCBhcHBcIiArIChtaXhpbi5uYW1lID8gYDogJHttaXhpbi5uYW1lfWAgOiBcIlwiKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgIHdhcm4kMShcIk1peGlucyBhcmUgb25seSBhdmFpbGFibGUgaW4gYnVpbGRzIHN1cHBvcnRpbmcgT3B0aW9ucyBBUElcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcDtcbiAgICAgIH0sXG4gICAgICBjb21wb25lbnQobmFtZSwgY29tcG9uZW50KSB7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUsIGNvbnRleHQuY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgICAgIHJldHVybiBjb250ZXh0LmNvbXBvbmVudHNbbmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgY29udGV4dC5jb21wb25lbnRzW25hbWVdKSB7XG4gICAgICAgICAgd2FybiQxKGBDb21wb25lbnQgXCIke25hbWV9XCIgaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkIGluIHRhcmdldCBhcHAuYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dC5jb21wb25lbnRzW25hbWVdID0gY29tcG9uZW50O1xuICAgICAgICByZXR1cm4gYXBwO1xuICAgICAgfSxcbiAgICAgIGRpcmVjdGl2ZShuYW1lLCBkaXJlY3RpdmUpIHtcbiAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICB2YWxpZGF0ZURpcmVjdGl2ZU5hbWUobmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkaXJlY3RpdmUpIHtcbiAgICAgICAgICByZXR1cm4gY29udGV4dC5kaXJlY3RpdmVzW25hbWVdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIGNvbnRleHQuZGlyZWN0aXZlc1tuYW1lXSkge1xuICAgICAgICAgIHdhcm4kMShgRGlyZWN0aXZlIFwiJHtuYW1lfVwiIGhhcyBhbHJlYWR5IGJlZW4gcmVnaXN0ZXJlZCBpbiB0YXJnZXQgYXBwLmApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuZGlyZWN0aXZlc1tuYW1lXSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgcmV0dXJuIGFwcDtcbiAgICAgIH0sXG4gICAgICBtb3VudChyb290Q29udGFpbmVyLCBpc0h5ZHJhdGUsIG5hbWVzcGFjZSkge1xuICAgICAgICBpZiAoIWlzTW91bnRlZCkge1xuICAgICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHJvb3RDb250YWluZXIuX192dWVfYXBwX18pIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgYFRoZXJlIGlzIGFscmVhZHkgYW4gYXBwIGluc3RhbmNlIG1vdW50ZWQgb24gdGhlIGhvc3QgY29udGFpbmVyLlxuIElmIHlvdSB3YW50IHRvIG1vdW50IGFub3RoZXIgYXBwIG9uIHRoZSBzYW1lIGhvc3QgY29udGFpbmVyLCB5b3UgbmVlZCB0byB1bm1vdW50IHRoZSBwcmV2aW91cyBhcHAgYnkgY2FsbGluZyBcXGBhcHAudW5tb3VudCgpXFxgIGZpcnN0LmBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHZub2RlID0gYXBwLl9jZVZOb2RlIHx8IGNyZWF0ZVZOb2RlKHJvb3RDb21wb25lbnQsIHJvb3RQcm9wcyk7XG4gICAgICAgICAgdm5vZGUuYXBwQ29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgICAgaWYgKG5hbWVzcGFjZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgbmFtZXNwYWNlID0gXCJzdmdcIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5hbWVzcGFjZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIG5hbWVzcGFjZSA9IHZvaWQgMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICAgIGNvbnRleHQucmVsb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBjbG9uZWQgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICAgICAgICAgICAgY2xvbmVkLmVsID0gbnVsbDtcbiAgICAgICAgICAgICAgcmVuZGVyKGNsb25lZCwgcm9vdENvbnRhaW5lciwgbmFtZXNwYWNlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc0h5ZHJhdGUgJiYgaHlkcmF0ZSkge1xuICAgICAgICAgICAgaHlkcmF0ZSh2bm9kZSwgcm9vdENvbnRhaW5lcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlbmRlcih2bm9kZSwgcm9vdENvbnRhaW5lciwgbmFtZXNwYWNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgICAgICBhcHAuX2NvbnRhaW5lciA9IHJvb3RDb250YWluZXI7XG4gICAgICAgICAgcm9vdENvbnRhaW5lci5fX3Z1ZV9hcHBfXyA9IGFwcDtcbiAgICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgICAgIGFwcC5faW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnQ7XG4gICAgICAgICAgICBkZXZ0b29sc0luaXRBcHAoYXBwLCB2ZXJzaW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGdldENvbXBvbmVudFB1YmxpY0luc3RhbmNlKHZub2RlLmNvbXBvbmVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIGBBcHAgaGFzIGFscmVhZHkgYmVlbiBtb3VudGVkLlxuSWYgeW91IHdhbnQgdG8gcmVtb3VudCB0aGUgc2FtZSBhcHAsIG1vdmUgeW91ciBhcHAgY3JlYXRpb24gbG9naWMgaW50byBhIGZhY3RvcnkgZnVuY3Rpb24gYW5kIGNyZWF0ZSBmcmVzaCBhcHAgaW5zdGFuY2VzIGZvciBlYWNoIG1vdW50IC0gZS5nLiBcXGBjb25zdCBjcmVhdGVNeUFwcCA9ICgpID0+IGNyZWF0ZUFwcChBcHApXFxgYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblVubW91bnQoY2xlYW51cEZuKSB7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHR5cGVvZiBjbGVhbnVwRm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIGBFeHBlY3RlZCBmdW5jdGlvbiBhcyBmaXJzdCBhcmd1bWVudCB0byBhcHAub25Vbm1vdW50KCksIGJ1dCBnb3QgJHt0eXBlb2YgY2xlYW51cEZufWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHBsdWdpbkNsZWFudXBGbnMucHVzaChjbGVhbnVwRm4pO1xuICAgICAgfSxcbiAgICAgIHVubW91bnQoKSB7XG4gICAgICAgIGlmIChpc01vdW50ZWQpIHtcbiAgICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhcbiAgICAgICAgICAgIHBsdWdpbkNsZWFudXBGbnMsXG4gICAgICAgICAgICBhcHAuX2luc3RhbmNlLFxuICAgICAgICAgICAgMTZcbiAgICAgICAgICApO1xuICAgICAgICAgIHJlbmRlcihudWxsLCBhcHAuX2NvbnRhaW5lcik7XG4gICAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgICAgICBhcHAuX2luc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgIGRldnRvb2xzVW5tb3VudEFwcChhcHApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWxldGUgYXBwLl9jb250YWluZXIuX192dWVfYXBwX187XG4gICAgICAgIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgIHdhcm4kMShgQ2Fubm90IHVubW91bnQgYW4gYXBwIHRoYXQgaXMgbm90IG1vdW50ZWQuYCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwcm92aWRlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYga2V5IGluIGNvbnRleHQucHJvdmlkZXMpIHtcbiAgICAgICAgICBpZiAoaGFzT3duKGNvbnRleHQucHJvdmlkZXMsIGtleSkpIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgYEFwcCBhbHJlYWR5IHByb3ZpZGVzIHByb3BlcnR5IHdpdGgga2V5IFwiJHtTdHJpbmcoa2V5KX1cIi4gSXQgd2lsbCBiZSBvdmVyd3JpdHRlbiB3aXRoIHRoZSBuZXcgdmFsdWUuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgICBgQXBwIGFscmVhZHkgcHJvdmlkZXMgcHJvcGVydHkgd2l0aCBrZXkgXCIke1N0cmluZyhrZXkpfVwiIGluaGVyaXRlZCBmcm9tIGl0cyBwYXJlbnQgZWxlbWVudC4gSXQgd2lsbCBiZSBvdmVyd3JpdHRlbiB3aXRoIHRoZSBuZXcgdmFsdWUuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dC5wcm92aWRlc1trZXldID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBhcHA7XG4gICAgICB9LFxuICAgICAgcnVuV2l0aENvbnRleHQoZm4pIHtcbiAgICAgICAgY29uc3QgbGFzdEFwcCA9IGN1cnJlbnRBcHA7XG4gICAgICAgIGN1cnJlbnRBcHAgPSBhcHA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGZuKCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgY3VycmVudEFwcCA9IGxhc3RBcHA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhcHA7XG4gIH07XG59XG5sZXQgY3VycmVudEFwcCA9IG51bGw7XG5cbmZ1bmN0aW9uIHByb3ZpZGUoa2V5LCB2YWx1ZSkge1xuICBpZiAoIWN1cnJlbnRJbnN0YW5jZSkge1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICB3YXJuJDEoYHByb3ZpZGUoKSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBzZXR1cCgpLmApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgcHJvdmlkZXMgPSBjdXJyZW50SW5zdGFuY2UucHJvdmlkZXM7XG4gICAgY29uc3QgcGFyZW50UHJvdmlkZXMgPSBjdXJyZW50SW5zdGFuY2UucGFyZW50ICYmIGN1cnJlbnRJbnN0YW5jZS5wYXJlbnQucHJvdmlkZXM7XG4gICAgaWYgKHBhcmVudFByb3ZpZGVzID09PSBwcm92aWRlcykge1xuICAgICAgcHJvdmlkZXMgPSBjdXJyZW50SW5zdGFuY2UucHJvdmlkZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFByb3ZpZGVzKTtcbiAgICB9XG4gICAgcHJvdmlkZXNba2V5XSA9IHZhbHVlO1xuICB9XG59XG5mdW5jdGlvbiBpbmplY3Qoa2V5LCBkZWZhdWx0VmFsdWUsIHRyZWF0RGVmYXVsdEFzRmFjdG9yeSA9IGZhbHNlKSB7XG4gIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gIGlmIChpbnN0YW5jZSB8fCBjdXJyZW50QXBwKSB7XG4gICAgbGV0IHByb3ZpZGVzID0gY3VycmVudEFwcCA/IGN1cnJlbnRBcHAuX2NvbnRleHQucHJvdmlkZXMgOiBpbnN0YW5jZSA/IGluc3RhbmNlLnBhcmVudCA9PSBudWxsIHx8IGluc3RhbmNlLmNlID8gaW5zdGFuY2Uudm5vZGUuYXBwQ29udGV4dCAmJiBpbnN0YW5jZS52bm9kZS5hcHBDb250ZXh0LnByb3ZpZGVzIDogaW5zdGFuY2UucGFyZW50LnByb3ZpZGVzIDogdm9pZCAwO1xuICAgIGlmIChwcm92aWRlcyAmJiBrZXkgaW4gcHJvdmlkZXMpIHtcbiAgICAgIHJldHVybiBwcm92aWRlc1trZXldO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJldHVybiB0cmVhdERlZmF1bHRBc0ZhY3RvcnkgJiYgaXNGdW5jdGlvbihkZWZhdWx0VmFsdWUpID8gZGVmYXVsdFZhbHVlLmNhbGwoaW5zdGFuY2UgJiYgaW5zdGFuY2UucHJveHkpIDogZGVmYXVsdFZhbHVlO1xuICAgIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgd2FybiQxKGBpbmplY3Rpb24gXCIke1N0cmluZyhrZXkpfVwiIG5vdCBmb3VuZC5gKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIHdhcm4kMShgaW5qZWN0KCkgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgc2V0dXAoKSBvciBmdW5jdGlvbmFsIGNvbXBvbmVudHMuYCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGhhc0luamVjdGlvbkNvbnRleHQoKSB7XG4gIHJldHVybiAhIShnZXRDdXJyZW50SW5zdGFuY2UoKSB8fCBjdXJyZW50QXBwKTtcbn1cblxuY29uc3QgaW50ZXJuYWxPYmplY3RQcm90byA9IHt9O1xuY29uc3QgY3JlYXRlSW50ZXJuYWxPYmplY3QgPSAoKSA9PiBPYmplY3QuY3JlYXRlKGludGVybmFsT2JqZWN0UHJvdG8pO1xuY29uc3QgaXNJbnRlcm5hbE9iamVjdCA9IChvYmopID0+IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBpbnRlcm5hbE9iamVjdFByb3RvO1xuXG5mdW5jdGlvbiBpbml0UHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBpc1N0YXRlZnVsLCBpc1NTUiA9IGZhbHNlKSB7XG4gIGNvbnN0IHByb3BzID0ge307XG4gIGNvbnN0IGF0dHJzID0gY3JlYXRlSW50ZXJuYWxPYmplY3QoKTtcbiAgaW5zdGFuY2UucHJvcHNEZWZhdWx0cyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzZXRGdWxsUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBwcm9wcywgYXR0cnMpO1xuICBmb3IgKGNvbnN0IGtleSBpbiBpbnN0YW5jZS5wcm9wc09wdGlvbnNbMF0pIHtcbiAgICBpZiAoIShrZXkgaW4gcHJvcHMpKSB7XG4gICAgICBwcm9wc1trZXldID0gdm9pZCAwO1xuICAgIH1cbiAgfVxuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIHZhbGlkYXRlUHJvcHMocmF3UHJvcHMgfHwge30sIHByb3BzLCBpbnN0YW5jZSk7XG4gIH1cbiAgaWYgKGlzU3RhdGVmdWwpIHtcbiAgICBpbnN0YW5jZS5wcm9wcyA9IGlzU1NSID8gcHJvcHMgOiBzaGFsbG93UmVhY3RpdmUocHJvcHMpO1xuICB9IGVsc2Uge1xuICAgIGlmICghaW5zdGFuY2UudHlwZS5wcm9wcykge1xuICAgICAgaW5zdGFuY2UucHJvcHMgPSBhdHRycztcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zdGFuY2UucHJvcHMgPSBwcm9wcztcbiAgICB9XG4gIH1cbiAgaW5zdGFuY2UuYXR0cnMgPSBhdHRycztcbn1cbmZ1bmN0aW9uIGlzSW5IbXJDb250ZXh0KGluc3RhbmNlKSB7XG4gIHdoaWxlIChpbnN0YW5jZSkge1xuICAgIGlmIChpbnN0YW5jZS50eXBlLl9faG1ySWQpIHJldHVybiB0cnVlO1xuICAgIGluc3RhbmNlID0gaW5zdGFuY2UucGFyZW50O1xuICB9XG59XG5mdW5jdGlvbiB1cGRhdGVQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHJhd1ByZXZQcm9wcywgb3B0aW1pemVkKSB7XG4gIGNvbnN0IHtcbiAgICBwcm9wcyxcbiAgICBhdHRycyxcbiAgICB2bm9kZTogeyBwYXRjaEZsYWcgfVxuICB9ID0gaW5zdGFuY2U7XG4gIGNvbnN0IHJhd0N1cnJlbnRQcm9wcyA9IHRvUmF3KHByb3BzKTtcbiAgY29uc3QgW29wdGlvbnNdID0gaW5zdGFuY2UucHJvcHNPcHRpb25zO1xuICBsZXQgaGFzQXR0cnNDaGFuZ2VkID0gZmFsc2U7XG4gIGlmIChcbiAgICAvLyBhbHdheXMgZm9yY2UgZnVsbCBkaWZmIGluIGRldlxuICAgIC8vIC0gIzE5NDIgaWYgaG1yIGlzIGVuYWJsZWQgd2l0aCBzZmMgY29tcG9uZW50XG4gICAgLy8gLSB2aXRlIzg3MiBub24tc2ZjIGNvbXBvbmVudCB1c2VkIGJ5IHNmYyBjb21wb25lbnRcbiAgICAhKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgaXNJbkhtckNvbnRleHQoaW5zdGFuY2UpKSAmJiAob3B0aW1pemVkIHx8IHBhdGNoRmxhZyA+IDApICYmICEocGF0Y2hGbGFnICYgMTYpXG4gICkge1xuICAgIGlmIChwYXRjaEZsYWcgJiA4KSB7XG4gICAgICBjb25zdCBwcm9wc1RvVXBkYXRlID0gaW5zdGFuY2Uudm5vZGUuZHluYW1pY1Byb3BzO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wc1RvVXBkYXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBrZXkgPSBwcm9wc1RvVXBkYXRlW2ldO1xuICAgICAgICBpZiAoaXNFbWl0TGlzdGVuZXIoaW5zdGFuY2UuZW1pdHNPcHRpb25zLCBrZXkpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSByYXdQcm9wc1trZXldO1xuICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgIGlmIChoYXNPd24oYXR0cnMsIGtleSkpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gYXR0cnNba2V5XSkge1xuICAgICAgICAgICAgICBhdHRyc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgICAgICBwcm9wc1tjYW1lbGl6ZWRLZXldID0gcmVzb2x2ZVByb3BWYWx1ZShcbiAgICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgICAgcmF3Q3VycmVudFByb3BzLFxuICAgICAgICAgICAgICBjYW1lbGl6ZWRLZXksXG4gICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh2YWx1ZSAhPT0gYXR0cnNba2V5XSkge1xuICAgICAgICAgICAgYXR0cnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNldEZ1bGxQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHByb3BzLCBhdHRycykpIHtcbiAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XG4gICAgfVxuICAgIGxldCBrZWJhYktleTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiByYXdDdXJyZW50UHJvcHMpIHtcbiAgICAgIGlmICghcmF3UHJvcHMgfHwgLy8gZm9yIGNhbWVsQ2FzZVxuICAgICAgIWhhc093bihyYXdQcm9wcywga2V5KSAmJiAvLyBpdCdzIHBvc3NpYmxlIHRoZSBvcmlnaW5hbCBwcm9wcyB3YXMgcGFzc2VkIGluIGFzIGtlYmFiLWNhc2VcbiAgICAgIC8vIGFuZCBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlICgjOTU1KVxuICAgICAgKChrZWJhYktleSA9IGh5cGhlbmF0ZShrZXkpKSA9PT0ga2V5IHx8ICFoYXNPd24ocmF3UHJvcHMsIGtlYmFiS2V5KSkpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAocmF3UHJldlByb3BzICYmIC8vIGZvciBjYW1lbENhc2VcbiAgICAgICAgICAocmF3UHJldlByb3BzW2tleV0gIT09IHZvaWQgMCB8fCAvLyBmb3Iga2ViYWItY2FzZVxuICAgICAgICAgIHJhd1ByZXZQcm9wc1trZWJhYktleV0gIT09IHZvaWQgMCkpIHtcbiAgICAgICAgICAgIHByb3BzW2tleV0gPSByZXNvbHZlUHJvcFZhbHVlKFxuICAgICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgICByYXdDdXJyZW50UHJvcHMsXG4gICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHByb3BzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGF0dHJzICE9PSByYXdDdXJyZW50UHJvcHMpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XG4gICAgICAgIGlmICghcmF3UHJvcHMgfHwgIWhhc093bihyYXdQcm9wcywga2V5KSAmJiB0cnVlKSB7XG4gICAgICAgICAgZGVsZXRlIGF0dHJzW2tleV07XG4gICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoaGFzQXR0cnNDaGFuZ2VkKSB7XG4gICAgdHJpZ2dlcihpbnN0YW5jZS5hdHRycywgXCJzZXRcIiwgXCJcIik7XG4gIH1cbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICB2YWxpZGF0ZVByb3BzKHJhd1Byb3BzIHx8IHt9LCBwcm9wcywgaW5zdGFuY2UpO1xuICB9XG59XG5mdW5jdGlvbiBzZXRGdWxsUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBwcm9wcywgYXR0cnMpIHtcbiAgY29uc3QgW29wdGlvbnMsIG5lZWRDYXN0S2V5c10gPSBpbnN0YW5jZS5wcm9wc09wdGlvbnM7XG4gIGxldCBoYXNBdHRyc0NoYW5nZWQgPSBmYWxzZTtcbiAgbGV0IHJhd0Nhc3RWYWx1ZXM7XG4gIGlmIChyYXdQcm9wcykge1xuICAgIGZvciAobGV0IGtleSBpbiByYXdQcm9wcykge1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRQcm9wKGtleSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCB2YWx1ZSA9IHJhd1Byb3BzW2tleV07XG4gICAgICBsZXQgY2FtZWxLZXk7XG4gICAgICBpZiAob3B0aW9ucyAmJiBoYXNPd24ob3B0aW9ucywgY2FtZWxLZXkgPSBjYW1lbGl6ZShrZXkpKSkge1xuICAgICAgICBpZiAoIW5lZWRDYXN0S2V5cyB8fCAhbmVlZENhc3RLZXlzLmluY2x1ZGVzKGNhbWVsS2V5KSkge1xuICAgICAgICAgIHByb3BzW2NhbWVsS2V5XSA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIChyYXdDYXN0VmFsdWVzIHx8IChyYXdDYXN0VmFsdWVzID0ge30pKVtjYW1lbEtleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghaXNFbWl0TGlzdGVuZXIoaW5zdGFuY2UuZW1pdHNPcHRpb25zLCBrZXkpKSB7XG4gICAgICAgIGlmICghKGtleSBpbiBhdHRycykgfHwgdmFsdWUgIT09IGF0dHJzW2tleV0pIHtcbiAgICAgICAgICBhdHRyc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAobmVlZENhc3RLZXlzKSB7XG4gICAgY29uc3QgcmF3Q3VycmVudFByb3BzID0gdG9SYXcocHJvcHMpO1xuICAgIGNvbnN0IGNhc3RWYWx1ZXMgPSByYXdDYXN0VmFsdWVzIHx8IEVNUFRZX09CSjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5lZWRDYXN0S2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0gbmVlZENhc3RLZXlzW2ldO1xuICAgICAgcHJvcHNba2V5XSA9IHJlc29sdmVQcm9wVmFsdWUoXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIHJhd0N1cnJlbnRQcm9wcyxcbiAgICAgICAga2V5LFxuICAgICAgICBjYXN0VmFsdWVzW2tleV0sXG4gICAgICAgIGluc3RhbmNlLFxuICAgICAgICAhaGFzT3duKGNhc3RWYWx1ZXMsIGtleSlcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBoYXNBdHRyc0NoYW5nZWQ7XG59XG5mdW5jdGlvbiByZXNvbHZlUHJvcFZhbHVlKG9wdGlvbnMsIHByb3BzLCBrZXksIHZhbHVlLCBpbnN0YW5jZSwgaXNBYnNlbnQpIHtcbiAgY29uc3Qgb3B0ID0gb3B0aW9uc1trZXldO1xuICBpZiAob3B0ICE9IG51bGwpIHtcbiAgICBjb25zdCBoYXNEZWZhdWx0ID0gaGFzT3duKG9wdCwgXCJkZWZhdWx0XCIpO1xuICAgIGlmIChoYXNEZWZhdWx0ICYmIHZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IG9wdC5kZWZhdWx0O1xuICAgICAgaWYgKG9wdC50eXBlICE9PSBGdW5jdGlvbiAmJiAhb3B0LnNraXBGYWN0b3J5ICYmIGlzRnVuY3Rpb24oZGVmYXVsdFZhbHVlKSkge1xuICAgICAgICBjb25zdCB7IHByb3BzRGVmYXVsdHMgfSA9IGluc3RhbmNlO1xuICAgICAgICBpZiAoa2V5IGluIHByb3BzRGVmYXVsdHMpIHtcbiAgICAgICAgICB2YWx1ZSA9IHByb3BzRGVmYXVsdHNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCByZXNldCA9IHNldEN1cnJlbnRJbnN0YW5jZShpbnN0YW5jZSk7XG4gICAgICAgICAgdmFsdWUgPSBwcm9wc0RlZmF1bHRzW2tleV0gPSBkZWZhdWx0VmFsdWUuY2FsbChcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBwcm9wc1xuICAgICAgICAgICk7XG4gICAgICAgICAgcmVzZXQoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaW5zdGFuY2UuY2UpIHtcbiAgICAgICAgaW5zdGFuY2UuY2UuX3NldFByb3Aoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRbMCAvKiBzaG91bGRDYXN0ICovXSkge1xuICAgICAgaWYgKGlzQWJzZW50ICYmICFoYXNEZWZhdWx0KSB7XG4gICAgICAgIHZhbHVlID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKG9wdFsxIC8qIHNob3VsZENhc3RUcnVlICovXSAmJiAodmFsdWUgPT09IFwiXCIgfHwgdmFsdWUgPT09IGh5cGhlbmF0ZShrZXkpKSkge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmNvbnN0IG1peGluUHJvcHNDYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHNPcHRpb25zKGNvbXAsIGFwcENvbnRleHQsIGFzTWl4aW4gPSBmYWxzZSkge1xuICBjb25zdCBjYWNoZSA9IF9fVlVFX09QVElPTlNfQVBJX18gJiYgYXNNaXhpbiA/IG1peGluUHJvcHNDYWNoZSA6IGFwcENvbnRleHQucHJvcHNDYWNoZTtcbiAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGNvbXApO1xuICBpZiAoY2FjaGVkKSB7XG4gICAgcmV0dXJuIGNhY2hlZDtcbiAgfVxuICBjb25zdCByYXcgPSBjb21wLnByb3BzO1xuICBjb25zdCBub3JtYWxpemVkID0ge307XG4gIGNvbnN0IG5lZWRDYXN0S2V5cyA9IFtdO1xuICBsZXQgaGFzRXh0ZW5kcyA9IGZhbHNlO1xuICBpZiAoX19WVUVfT1BUSU9OU19BUElfXyAmJiAhaXNGdW5jdGlvbihjb21wKSkge1xuICAgIGNvbnN0IGV4dGVuZFByb3BzID0gKHJhdzIpID0+IHtcbiAgICAgIGhhc0V4dGVuZHMgPSB0cnVlO1xuICAgICAgY29uc3QgW3Byb3BzLCBrZXlzXSA9IG5vcm1hbGl6ZVByb3BzT3B0aW9ucyhyYXcyLCBhcHBDb250ZXh0LCB0cnVlKTtcbiAgICAgIGV4dGVuZChub3JtYWxpemVkLCBwcm9wcyk7XG4gICAgICBpZiAoa2V5cykgbmVlZENhc3RLZXlzLnB1c2goLi4ua2V5cyk7XG4gICAgfTtcbiAgICBpZiAoIWFzTWl4aW4gJiYgYXBwQ29udGV4dC5taXhpbnMubGVuZ3RoKSB7XG4gICAgICBhcHBDb250ZXh0Lm1peGlucy5mb3JFYWNoKGV4dGVuZFByb3BzKTtcbiAgICB9XG4gICAgaWYgKGNvbXAuZXh0ZW5kcykge1xuICAgICAgZXh0ZW5kUHJvcHMoY29tcC5leHRlbmRzKTtcbiAgICB9XG4gICAgaWYgKGNvbXAubWl4aW5zKSB7XG4gICAgICBjb21wLm1peGlucy5mb3JFYWNoKGV4dGVuZFByb3BzKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFyYXcgJiYgIWhhc0V4dGVuZHMpIHtcbiAgICBpZiAoaXNPYmplY3QoY29tcCkpIHtcbiAgICAgIGNhY2hlLnNldChjb21wLCBFTVBUWV9BUlIpO1xuICAgIH1cbiAgICByZXR1cm4gRU1QVFlfQVJSO1xuICB9XG4gIGlmIChpc0FycmF5KHJhdykpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhdy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgIWlzU3RyaW5nKHJhd1tpXSkpIHtcbiAgICAgICAgd2FybiQxKGBwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguYCwgcmF3W2ldKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRLZXkgPSBjYW1lbGl6ZShyYXdbaV0pO1xuICAgICAgaWYgKHZhbGlkYXRlUHJvcE5hbWUobm9ybWFsaXplZEtleSkpIHtcbiAgICAgICAgbm9ybWFsaXplZFtub3JtYWxpemVkS2V5XSA9IEVNUFRZX09CSjtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAocmF3KSB7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgIWlzT2JqZWN0KHJhdykpIHtcbiAgICAgIHdhcm4kMShgaW52YWxpZCBwcm9wcyBvcHRpb25zYCwgcmF3KTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcmF3KSB7XG4gICAgICBjb25zdCBub3JtYWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcbiAgICAgIGlmICh2YWxpZGF0ZVByb3BOYW1lKG5vcm1hbGl6ZWRLZXkpKSB7XG4gICAgICAgIGNvbnN0IG9wdCA9IHJhd1trZXldO1xuICAgICAgICBjb25zdCBwcm9wID0gbm9ybWFsaXplZFtub3JtYWxpemVkS2V5XSA9IGlzQXJyYXkob3B0KSB8fCBpc0Z1bmN0aW9uKG9wdCkgPyB7IHR5cGU6IG9wdCB9IDogZXh0ZW5kKHt9LCBvcHQpO1xuICAgICAgICBjb25zdCBwcm9wVHlwZSA9IHByb3AudHlwZTtcbiAgICAgICAgbGV0IHNob3VsZENhc3QgPSBmYWxzZTtcbiAgICAgICAgbGV0IHNob3VsZENhc3RUcnVlID0gdHJ1ZTtcbiAgICAgICAgaWYgKGlzQXJyYXkocHJvcFR5cGUpKSB7XG4gICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHByb3BUeXBlLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHByb3BUeXBlW2luZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IHR5cGVOYW1lID0gaXNGdW5jdGlvbih0eXBlKSAmJiB0eXBlLm5hbWU7XG4gICAgICAgICAgICBpZiAodHlwZU5hbWUgPT09IFwiQm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgIHNob3VsZENhc3QgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZU5hbWUgPT09IFwiU3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgc2hvdWxkQ2FzdFRydWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2hvdWxkQ2FzdCA9IGlzRnVuY3Rpb24ocHJvcFR5cGUpICYmIHByb3BUeXBlLm5hbWUgPT09IFwiQm9vbGVhblwiO1xuICAgICAgICB9XG4gICAgICAgIHByb3BbMCAvKiBzaG91bGRDYXN0ICovXSA9IHNob3VsZENhc3Q7XG4gICAgICAgIHByb3BbMSAvKiBzaG91bGRDYXN0VHJ1ZSAqL10gPSBzaG91bGRDYXN0VHJ1ZTtcbiAgICAgICAgaWYgKHNob3VsZENhc3QgfHwgaGFzT3duKHByb3AsIFwiZGVmYXVsdFwiKSkge1xuICAgICAgICAgIG5lZWRDYXN0S2V5cy5wdXNoKG5vcm1hbGl6ZWRLZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IHJlcyA9IFtub3JtYWxpemVkLCBuZWVkQ2FzdEtleXNdO1xuICBpZiAoaXNPYmplY3QoY29tcCkpIHtcbiAgICBjYWNoZS5zZXQoY29tcCwgcmVzKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wTmFtZShrZXkpIHtcbiAgaWYgKGtleVswXSAhPT0gXCIkXCIgJiYgIWlzUmVzZXJ2ZWRQcm9wKGtleSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgd2FybiQxKGBJbnZhbGlkIHByb3AgbmFtZTogXCIke2tleX1cIiBpcyBhIHJlc2VydmVkIHByb3BlcnR5LmApO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGdldFR5cGUoY3Rvcikge1xuICBpZiAoY3RvciA9PT0gbnVsbCkge1xuICAgIHJldHVybiBcIm51bGxcIjtcbiAgfVxuICBpZiAodHlwZW9mIGN0b3IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBjdG9yLm5hbWUgfHwgXCJcIjtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY3RvciA9PT0gXCJvYmplY3RcIikge1xuICAgIGNvbnN0IG5hbWUgPSBjdG9yLmNvbnN0cnVjdG9yICYmIGN0b3IuY29uc3RydWN0b3IubmFtZTtcbiAgICByZXR1cm4gbmFtZSB8fCBcIlwiO1xuICB9XG4gIHJldHVybiBcIlwiO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wcyhyYXdQcm9wcywgcHJvcHMsIGluc3RhbmNlKSB7XG4gIGNvbnN0IHJlc29sdmVkVmFsdWVzID0gdG9SYXcocHJvcHMpO1xuICBjb25zdCBvcHRpb25zID0gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdO1xuICBjb25zdCBjYW1lbGl6ZVByb3BzS2V5ID0gT2JqZWN0LmtleXMocmF3UHJvcHMpLm1hcCgoa2V5KSA9PiBjYW1lbGl6ZShrZXkpKTtcbiAgZm9yIChjb25zdCBrZXkgaW4gb3B0aW9ucykge1xuICAgIGxldCBvcHQgPSBvcHRpb25zW2tleV07XG4gICAgaWYgKG9wdCA9PSBudWxsKSBjb250aW51ZTtcbiAgICB2YWxpZGF0ZVByb3AoXG4gICAgICBrZXksXG4gICAgICByZXNvbHZlZFZhbHVlc1trZXldLFxuICAgICAgb3B0LFxuICAgICAgISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSA/IHNoYWxsb3dSZWFkb25seShyZXNvbHZlZFZhbHVlcykgOiByZXNvbHZlZFZhbHVlcyxcbiAgICAgICFjYW1lbGl6ZVByb3BzS2V5LmluY2x1ZGVzKGtleSlcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AobmFtZSwgdmFsdWUsIHByb3AsIHByb3BzLCBpc0Fic2VudCkge1xuICBjb25zdCB7IHR5cGUsIHJlcXVpcmVkLCB2YWxpZGF0b3IsIHNraXBDaGVjayB9ID0gcHJvcDtcbiAgaWYgKHJlcXVpcmVkICYmIGlzQWJzZW50KSB7XG4gICAgd2FybiQxKCdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgJiYgIXJlcXVpcmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0eXBlICE9IG51bGwgJiYgdHlwZSAhPT0gdHJ1ZSAmJiAhc2tpcENoZWNrKSB7XG4gICAgbGV0IGlzVmFsaWQgPSBmYWxzZTtcbiAgICBjb25zdCB0eXBlcyA9IGlzQXJyYXkodHlwZSkgPyB0eXBlIDogW3R5cGVdO1xuICAgIGNvbnN0IGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aCAmJiAhaXNWYWxpZDsgaSsrKSB7XG4gICAgICBjb25zdCB7IHZhbGlkLCBleHBlY3RlZFR5cGUgfSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVzW2ldKTtcbiAgICAgIGV4cGVjdGVkVHlwZXMucHVzaChleHBlY3RlZFR5cGUgfHwgXCJcIik7XG4gICAgICBpc1ZhbGlkID0gdmFsaWQ7XG4gICAgfVxuICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgd2FybiQxKGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAodmFsaWRhdG9yICYmICF2YWxpZGF0b3IodmFsdWUsIHByb3BzKSkge1xuICAgIHdhcm4kMSgnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicpO1xuICB9XG59XG5jb25zdCBpc1NpbXBsZVR5cGUgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcbiAgXCJTdHJpbmcsTnVtYmVyLEJvb2xlYW4sRnVuY3Rpb24sU3ltYm9sLEJpZ0ludFwiXG4pO1xuZnVuY3Rpb24gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZSkge1xuICBsZXQgdmFsaWQ7XG4gIGNvbnN0IGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gIGlmIChleHBlY3RlZFR5cGUgPT09IFwibnVsbFwiKSB7XG4gICAgdmFsaWQgPSB2YWx1ZSA9PT0gbnVsbDtcbiAgfSBlbHNlIGlmIChpc1NpbXBsZVR5cGUoZXhwZWN0ZWRUeXBlKSkge1xuICAgIGNvbnN0IHQgPSB0eXBlb2YgdmFsdWU7XG4gICAgdmFsaWQgPSB0ID09PSBleHBlY3RlZFR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoIXZhbGlkICYmIHQgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IFwiT2JqZWN0XCIpIHtcbiAgICB2YWxpZCA9IGlzT2JqZWN0KHZhbHVlKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IFwiQXJyYXlcIikge1xuICAgIHZhbGlkID0gaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZCxcbiAgICBleHBlY3RlZFR5cGVcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gYFByb3AgdHlwZSBbXSBmb3IgcHJvcCBcIiR7bmFtZX1cIiB3b24ndCBtYXRjaCBhbnl0aGluZy4gRGlkIHlvdSBtZWFuIHRvIHVzZSB0eXBlIEFycmF5IGluc3RlYWQ/YDtcbiAgfVxuICBsZXQgbWVzc2FnZSA9IGBJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJHtuYW1lfVwiLiBFeHBlY3RlZCAke2V4cGVjdGVkVHlwZXMubWFwKGNhcGl0YWxpemUpLmpvaW4oXCIgfCBcIil9YDtcbiAgY29uc3QgZXhwZWN0ZWRUeXBlID0gZXhwZWN0ZWRUeXBlc1swXTtcbiAgY29uc3QgcmVjZWl2ZWRUeXBlID0gdG9SYXdUeXBlKHZhbHVlKTtcbiAgY29uc3QgZXhwZWN0ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIGV4cGVjdGVkVHlwZSk7XG4gIGNvbnN0IHJlY2VpdmVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCByZWNlaXZlZFR5cGUpO1xuICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiYgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiYgIWlzQm9vbGVhbihleHBlY3RlZFR5cGUsIHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IGAgd2l0aCB2YWx1ZSAke2V4cGVjdGVkVmFsdWV9YDtcbiAgfVxuICBtZXNzYWdlICs9IGAsIGdvdCAke3JlY2VpdmVkVHlwZX0gYDtcbiAgaWYgKGlzRXhwbGljYWJsZShyZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBgd2l0aCB2YWx1ZSAke3JlY2VpdmVkVmFsdWV9LmA7XG4gIH1cbiAgcmV0dXJuIG1lc3NhZ2U7XG59XG5mdW5jdGlvbiBzdHlsZVZhbHVlKHZhbHVlLCB0eXBlKSB7XG4gIGlmICh0eXBlID09PSBcIlN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGBcIiR7dmFsdWV9XCJgO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiTnVtYmVyXCIpIHtcbiAgICByZXR1cm4gYCR7TnVtYmVyKHZhbHVlKX1gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBgJHt2YWx1ZX1gO1xuICB9XG59XG5mdW5jdGlvbiBpc0V4cGxpY2FibGUodHlwZSkge1xuICBjb25zdCBleHBsaWNpdFR5cGVzID0gW1wic3RyaW5nXCIsIFwibnVtYmVyXCIsIFwiYm9vbGVhblwiXTtcbiAgcmV0dXJuIGV4cGxpY2l0VHlwZXMuc29tZSgoZWxlbSkgPT4gdHlwZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtKTtcbn1cbmZ1bmN0aW9uIGlzQm9vbGVhbiguLi5hcmdzKSB7XG4gIHJldHVybiBhcmdzLnNvbWUoKGVsZW0pID0+IGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gXCJib29sZWFuXCIpO1xufVxuXG5jb25zdCBpc0ludGVybmFsS2V5ID0gKGtleSkgPT4ga2V5ID09PSBcIl9cIiB8fCBrZXkgPT09IFwiX2N0eFwiIHx8IGtleSA9PT0gXCIkc3RhYmxlXCI7XG5jb25zdCBub3JtYWxpemVTbG90VmFsdWUgPSAodmFsdWUpID0+IGlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKG5vcm1hbGl6ZVZOb2RlKSA6IFtub3JtYWxpemVWTm9kZSh2YWx1ZSldO1xuY29uc3Qgbm9ybWFsaXplU2xvdCA9IChrZXksIHJhd1Nsb3QsIGN0eCkgPT4ge1xuICBpZiAocmF3U2xvdC5fbikge1xuICAgIHJldHVybiByYXdTbG90O1xuICB9XG4gIGNvbnN0IG5vcm1hbGl6ZWQgPSB3aXRoQ3R4KCguLi5hcmdzKSA9PiB7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgY3VycmVudEluc3RhbmNlICYmICEoY3R4ID09PSBudWxsICYmIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSkgJiYgIShjdHggJiYgY3R4LnJvb3QgIT09IGN1cnJlbnRJbnN0YW5jZS5yb290KSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgU2xvdCBcIiR7a2V5fVwiIGludm9rZWQgb3V0c2lkZSBvZiB0aGUgcmVuZGVyIGZ1bmN0aW9uOiB0aGlzIHdpbGwgbm90IHRyYWNrIGRlcGVuZGVuY2llcyB1c2VkIGluIHRoZSBzbG90LiBJbnZva2UgdGhlIHNsb3QgZnVuY3Rpb24gaW5zaWRlIHRoZSByZW5kZXIgZnVuY3Rpb24gaW5zdGVhZC5gXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbm9ybWFsaXplU2xvdFZhbHVlKHJhd1Nsb3QoLi4uYXJncykpO1xuICB9LCBjdHgpO1xuICBub3JtYWxpemVkLl9jID0gZmFsc2U7XG4gIHJldHVybiBub3JtYWxpemVkO1xufTtcbmNvbnN0IG5vcm1hbGl6ZU9iamVjdFNsb3RzID0gKHJhd1Nsb3RzLCBzbG90cywgaW5zdGFuY2UpID0+IHtcbiAgY29uc3QgY3R4ID0gcmF3U2xvdHMuX2N0eDtcbiAgZm9yIChjb25zdCBrZXkgaW4gcmF3U2xvdHMpIHtcbiAgICBpZiAoaXNJbnRlcm5hbEtleShrZXkpKSBjb250aW51ZTtcbiAgICBjb25zdCB2YWx1ZSA9IHJhd1Nsb3RzW2tleV07XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICBzbG90c1trZXldID0gbm9ybWFsaXplU2xvdChrZXksIHZhbHVlLCBjdHgpO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgdHJ1ZSkge1xuICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgYE5vbi1mdW5jdGlvbiB2YWx1ZSBlbmNvdW50ZXJlZCBmb3Igc2xvdCBcIiR7a2V5fVwiLiBQcmVmZXIgZnVuY3Rpb24gc2xvdHMgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplU2xvdFZhbHVlKHZhbHVlKTtcbiAgICAgIHNsb3RzW2tleV0gPSAoKSA9PiBub3JtYWxpemVkO1xuICAgIH1cbiAgfVxufTtcbmNvbnN0IG5vcm1hbGl6ZVZOb2RlU2xvdHMgPSAoaW5zdGFuY2UsIGNoaWxkcmVuKSA9PiB7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFpc0tlZXBBbGl2ZShpbnN0YW5jZS52bm9kZSkgJiYgdHJ1ZSkge1xuICAgIHdhcm4kMShcbiAgICAgIGBOb24tZnVuY3Rpb24gdmFsdWUgZW5jb3VudGVyZWQgZm9yIGRlZmF1bHQgc2xvdC4gUHJlZmVyIGZ1bmN0aW9uIHNsb3RzIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuYFxuICAgICk7XG4gIH1cbiAgY29uc3Qgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZVNsb3RWYWx1ZShjaGlsZHJlbik7XG4gIGluc3RhbmNlLnNsb3RzLmRlZmF1bHQgPSAoKSA9PiBub3JtYWxpemVkO1xufTtcbmNvbnN0IGFzc2lnblNsb3RzID0gKHNsb3RzLCBjaGlsZHJlbiwgb3B0aW1pemVkKSA9PiB7XG4gIGZvciAoY29uc3Qga2V5IGluIGNoaWxkcmVuKSB7XG4gICAgaWYgKG9wdGltaXplZCB8fCAhaXNJbnRlcm5hbEtleShrZXkpKSB7XG4gICAgICBzbG90c1trZXldID0gY2hpbGRyZW5ba2V5XTtcbiAgICB9XG4gIH1cbn07XG5jb25zdCBpbml0U2xvdHMgPSAoaW5zdGFuY2UsIGNoaWxkcmVuLCBvcHRpbWl6ZWQpID0+IHtcbiAgY29uc3Qgc2xvdHMgPSBpbnN0YW5jZS5zbG90cyA9IGNyZWF0ZUludGVybmFsT2JqZWN0KCk7XG4gIGlmIChpbnN0YW5jZS52bm9kZS5zaGFwZUZsYWcgJiAzMikge1xuICAgIGNvbnN0IHR5cGUgPSBjaGlsZHJlbi5fO1xuICAgIGlmICh0eXBlKSB7XG4gICAgICBhc3NpZ25TbG90cyhzbG90cywgY2hpbGRyZW4sIG9wdGltaXplZCk7XG4gICAgICBpZiAob3B0aW1pemVkKSB7XG4gICAgICAgIGRlZihzbG90cywgXCJfXCIsIHR5cGUsIHRydWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBub3JtYWxpemVPYmplY3RTbG90cyhjaGlsZHJlbiwgc2xvdHMpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChjaGlsZHJlbikge1xuICAgIG5vcm1hbGl6ZVZOb2RlU2xvdHMoaW5zdGFuY2UsIGNoaWxkcmVuKTtcbiAgfVxufTtcbmNvbnN0IHVwZGF0ZVNsb3RzID0gKGluc3RhbmNlLCBjaGlsZHJlbiwgb3B0aW1pemVkKSA9PiB7XG4gIGNvbnN0IHsgdm5vZGUsIHNsb3RzIH0gPSBpbnN0YW5jZTtcbiAgbGV0IG5lZWREZWxldGlvbkNoZWNrID0gdHJ1ZTtcbiAgbGV0IGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IEVNUFRZX09CSjtcbiAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDMyKSB7XG4gICAgY29uc3QgdHlwZSA9IGNoaWxkcmVuLl87XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIGlzSG1yVXBkYXRpbmcpIHtcbiAgICAgICAgYXNzaWduU2xvdHMoc2xvdHMsIGNoaWxkcmVuLCBvcHRpbWl6ZWQpO1xuICAgICAgICB0cmlnZ2VyKGluc3RhbmNlLCBcInNldFwiLCBcIiRzbG90c1wiKTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW1pemVkICYmIHR5cGUgPT09IDEpIHtcbiAgICAgICAgbmVlZERlbGV0aW9uQ2hlY2sgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFzc2lnblNsb3RzKHNsb3RzLCBjaGlsZHJlbiwgb3B0aW1pemVkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbmVlZERlbGV0aW9uQ2hlY2sgPSAhY2hpbGRyZW4uJHN0YWJsZTtcbiAgICAgIG5vcm1hbGl6ZU9iamVjdFNsb3RzKGNoaWxkcmVuLCBzbG90cyk7XG4gICAgfVxuICAgIGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IGNoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuKSB7XG4gICAgbm9ybWFsaXplVk5vZGVTbG90cyhpbnN0YW5jZSwgY2hpbGRyZW4pO1xuICAgIGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IHsgZGVmYXVsdDogMSB9O1xuICB9XG4gIGlmIChuZWVkRGVsZXRpb25DaGVjaykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHNsb3RzKSB7XG4gICAgICBpZiAoIWlzSW50ZXJuYWxLZXkoa2V5KSAmJiBkZWxldGlvbkNvbXBhcmlzb25UYXJnZXRba2V5XSA9PSBudWxsKSB7XG4gICAgICAgIGRlbGV0ZSBzbG90c1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxubGV0IHN1cHBvcnRlZDtcbmxldCBwZXJmO1xuZnVuY3Rpb24gc3RhcnRNZWFzdXJlKGluc3RhbmNlLCB0eXBlKSB7XG4gIGlmIChpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5wZXJmb3JtYW5jZSAmJiBpc1N1cHBvcnRlZCgpKSB7XG4gICAgcGVyZi5tYXJrKGB2dWUtJHt0eXBlfS0ke2luc3RhbmNlLnVpZH1gKTtcbiAgfVxuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICBkZXZ0b29sc1BlcmZTdGFydChpbnN0YW5jZSwgdHlwZSwgaXNTdXBwb3J0ZWQoKSA/IHBlcmYubm93KCkgOiBEYXRlLm5vdygpKTtcbiAgfVxufVxuZnVuY3Rpb24gZW5kTWVhc3VyZShpbnN0YW5jZSwgdHlwZSkge1xuICBpZiAoaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcucGVyZm9ybWFuY2UgJiYgaXNTdXBwb3J0ZWQoKSkge1xuICAgIGNvbnN0IHN0YXJ0VGFnID0gYHZ1ZS0ke3R5cGV9LSR7aW5zdGFuY2UudWlkfWA7XG4gICAgY29uc3QgZW5kVGFnID0gc3RhcnRUYWcgKyBgOmVuZGA7XG4gICAgY29uc3QgbWVhc3VyZU5hbWUgPSBgPCR7Zm9ybWF0Q29tcG9uZW50TmFtZShpbnN0YW5jZSwgaW5zdGFuY2UudHlwZSl9PiAke3R5cGV9YDtcbiAgICBwZXJmLm1hcmsoZW5kVGFnKTtcbiAgICBwZXJmLm1lYXN1cmUobWVhc3VyZU5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIHBlcmYuY2xlYXJNZWFzdXJlcyhtZWFzdXJlTmFtZSk7XG4gICAgcGVyZi5jbGVhck1hcmtzKHN0YXJ0VGFnKTtcbiAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgfVxuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICBkZXZ0b29sc1BlcmZFbmQoaW5zdGFuY2UsIHR5cGUsIGlzU3VwcG9ydGVkKCkgPyBwZXJmLm5vdygpIDogRGF0ZS5ub3coKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzU3VwcG9ydGVkKCkge1xuICBpZiAoc3VwcG9ydGVkICE9PSB2b2lkIDApIHtcbiAgICByZXR1cm4gc3VwcG9ydGVkO1xuICB9XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5wZXJmb3JtYW5jZSkge1xuICAgIHN1cHBvcnRlZCA9IHRydWU7XG4gICAgcGVyZiA9IHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgfSBlbHNlIHtcbiAgICBzdXBwb3J0ZWQgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gc3VwcG9ydGVkO1xufVxuXG5mdW5jdGlvbiBpbml0RmVhdHVyZUZsYWdzKCkge1xuICBjb25zdCBuZWVkV2FybiA9IFtdO1xuICBpZiAodHlwZW9mIF9fVlVFX09QVElPTlNfQVBJX18gIT09IFwiYm9vbGVhblwiKSB7XG4gICAgISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBuZWVkV2Fybi5wdXNoKGBfX1ZVRV9PUFRJT05TX0FQSV9fYCk7XG4gICAgZ2V0R2xvYmFsVGhpcygpLl9fVlVFX09QVElPTlNfQVBJX18gPSB0cnVlO1xuICB9XG4gIGlmICh0eXBlb2YgX19WVUVfUFJPRF9ERVZUT09MU19fICE9PSBcImJvb2xlYW5cIikge1xuICAgICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgbmVlZFdhcm4ucHVzaChgX19WVUVfUFJPRF9ERVZUT09MU19fYCk7XG4gICAgZ2V0R2xvYmFsVGhpcygpLl9fVlVFX1BST0RfREVWVE9PTFNfXyA9IGZhbHNlO1xuICB9XG4gIGlmICh0eXBlb2YgX19WVUVfUFJPRF9IWURSQVRJT05fTUlTTUFUQ0hfREVUQUlMU19fICE9PSBcImJvb2xlYW5cIikge1xuICAgICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgbmVlZFdhcm4ucHVzaChgX19WVUVfUFJPRF9IWURSQVRJT05fTUlTTUFUQ0hfREVUQUlMU19fYCk7XG4gICAgZ2V0R2xvYmFsVGhpcygpLl9fVlVFX1BST0RfSFlEUkFUSU9OX01JU01BVENIX0RFVEFJTFNfXyA9IGZhbHNlO1xuICB9XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIG5lZWRXYXJuLmxlbmd0aCkge1xuICAgIGNvbnN0IG11bHRpID0gbmVlZFdhcm4ubGVuZ3RoID4gMTtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBgRmVhdHVyZSBmbGFnJHttdWx0aSA/IGBzYCA6IGBgfSAke25lZWRXYXJuLmpvaW4oXCIsIFwiKX0gJHttdWx0aSA/IGBhcmVgIDogYGlzYH0gbm90IGV4cGxpY2l0bHkgZGVmaW5lZC4gWW91IGFyZSBydW5uaW5nIHRoZSBlc20tYnVuZGxlciBidWlsZCBvZiBWdWUsIHdoaWNoIGV4cGVjdHMgdGhlc2UgY29tcGlsZS10aW1lIGZlYXR1cmUgZmxhZ3MgdG8gYmUgZ2xvYmFsbHkgaW5qZWN0ZWQgdmlhIHRoZSBidW5kbGVyIGNvbmZpZyBpbiBvcmRlciB0byBnZXQgYmV0dGVyIHRyZWUtc2hha2luZyBpbiB0aGUgcHJvZHVjdGlvbiBidW5kbGUuXG5cbkZvciBtb3JlIGRldGFpbHMsIHNlZSBodHRwczovL2xpbmsudnVlanMub3JnL2ZlYXR1cmUtZmxhZ3MuYFxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgcXVldWVQb3N0UmVuZGVyRWZmZWN0ID0gcXVldWVFZmZlY3RXaXRoU3VzcGVuc2UgO1xuZnVuY3Rpb24gY3JlYXRlUmVuZGVyZXIob3B0aW9ucykge1xuICByZXR1cm4gYmFzZUNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIob3B0aW9ucykge1xuICByZXR1cm4gYmFzZUNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMsIGNyZWF0ZUh5ZHJhdGlvbkZ1bmN0aW9ucyk7XG59XG5mdW5jdGlvbiBiYXNlQ3JlYXRlUmVuZGVyZXIob3B0aW9ucywgY3JlYXRlSHlkcmF0aW9uRm5zKSB7XG4gIHtcbiAgICBpbml0RmVhdHVyZUZsYWdzKCk7XG4gIH1cbiAgY29uc3QgdGFyZ2V0ID0gZ2V0R2xvYmFsVGhpcygpO1xuICB0YXJnZXQuX19WVUVfXyA9IHRydWU7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgIHNldERldnRvb2xzSG9vayQxKHRhcmdldC5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fLCB0YXJnZXQpO1xuICB9XG4gIGNvbnN0IHtcbiAgICBpbnNlcnQ6IGhvc3RJbnNlcnQsXG4gICAgcmVtb3ZlOiBob3N0UmVtb3ZlLFxuICAgIHBhdGNoUHJvcDogaG9zdFBhdGNoUHJvcCxcbiAgICBjcmVhdGVFbGVtZW50OiBob3N0Q3JlYXRlRWxlbWVudCxcbiAgICBjcmVhdGVUZXh0OiBob3N0Q3JlYXRlVGV4dCxcbiAgICBjcmVhdGVDb21tZW50OiBob3N0Q3JlYXRlQ29tbWVudCxcbiAgICBzZXRUZXh0OiBob3N0U2V0VGV4dCxcbiAgICBzZXRFbGVtZW50VGV4dDogaG9zdFNldEVsZW1lbnRUZXh0LFxuICAgIHBhcmVudE5vZGU6IGhvc3RQYXJlbnROb2RlLFxuICAgIG5leHRTaWJsaW5nOiBob3N0TmV4dFNpYmxpbmcsXG4gICAgc2V0U2NvcGVJZDogaG9zdFNldFNjb3BlSWQgPSBOT09QLFxuICAgIGluc2VydFN0YXRpY0NvbnRlbnQ6IGhvc3RJbnNlcnRTdGF0aWNDb250ZW50XG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCBwYXRjaCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yID0gbnVsbCwgcGFyZW50Q29tcG9uZW50ID0gbnVsbCwgcGFyZW50U3VzcGVuc2UgPSBudWxsLCBuYW1lc3BhY2UgPSB2b2lkIDAsIHNsb3RTY29wZUlkcyA9IG51bGwsIG9wdGltaXplZCA9ICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgaXNIbXJVcGRhdGluZyA/IGZhbHNlIDogISFuMi5keW5hbWljQ2hpbGRyZW4pID0+IHtcbiAgICBpZiAobjEgPT09IG4yKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChuMSAmJiAhaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikpIHtcbiAgICAgIGFuY2hvciA9IGdldE5leHRIb3N0Tm9kZShuMSk7XG4gICAgICB1bm1vdW50KG4xLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcbiAgICAgIG4xID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKG4yLnBhdGNoRmxhZyA9PT0gLTIpIHtcbiAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xuICAgICAgbjIuZHluYW1pY0NoaWxkcmVuID0gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgeyB0eXBlLCByZWYsIHNoYXBlRmxhZyB9ID0gbjI7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFRleHQ6XG4gICAgICAgIHByb2Nlc3NUZXh0KG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQ29tbWVudDpcbiAgICAgICAgcHJvY2Vzc0NvbW1lbnROb2RlKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgU3RhdGljOlxuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgICAgIG1vdW50U3RhdGljTm9kZShuMiwgY29udGFpbmVyLCBhbmNob3IsIG5hbWVzcGFjZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgIHBhdGNoU3RhdGljTm9kZShuMSwgbjIsIGNvbnRhaW5lciwgbmFtZXNwYWNlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRnJhZ21lbnQ6XG4gICAgICAgIHByb2Nlc3NGcmFnbWVudChcbiAgICAgICAgICBuMSxcbiAgICAgICAgICBuMixcbiAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiAxKSB7XG4gICAgICAgICAgcHJvY2Vzc0VsZW1lbnQoXG4gICAgICAgICAgICBuMSxcbiAgICAgICAgICAgIG4yLFxuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlRmxhZyAmIDYpIHtcbiAgICAgICAgICBwcm9jZXNzQ29tcG9uZW50KFxuICAgICAgICAgICAgbjEsXG4gICAgICAgICAgICBuMixcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZUZsYWcgJiA2NCkge1xuICAgICAgICAgIHR5cGUucHJvY2VzcyhcbiAgICAgICAgICAgIG4xLFxuICAgICAgICAgICAgbjIsXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgIG9wdGltaXplZCxcbiAgICAgICAgICAgIGludGVybmFsc1xuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVGbGFnICYgMTI4KSB7XG4gICAgICAgICAgdHlwZS5wcm9jZXNzKFxuICAgICAgICAgICAgbjEsXG4gICAgICAgICAgICBuMixcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkLFxuICAgICAgICAgICAgaW50ZXJuYWxzXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgd2FybiQxKFwiSW52YWxpZCBWTm9kZSB0eXBlOlwiLCB0eXBlLCBgKCR7dHlwZW9mIHR5cGV9KWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChyZWYgIT0gbnVsbCAmJiBwYXJlbnRDb21wb25lbnQpIHtcbiAgICAgIHNldFJlZihyZWYsIG4xICYmIG4xLnJlZiwgcGFyZW50U3VzcGVuc2UsIG4yIHx8IG4xLCAhbjIpO1xuICAgIH0gZWxzZSBpZiAocmVmID09IG51bGwgJiYgbjEgJiYgbjEucmVmICE9IG51bGwpIHtcbiAgICAgIHNldFJlZihuMS5yZWYsIG51bGwsIHBhcmVudFN1c3BlbnNlLCBuMSwgdHJ1ZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBwcm9jZXNzVGV4dCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yKSA9PiB7XG4gICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgIGhvc3RJbnNlcnQoXG4gICAgICAgIG4yLmVsID0gaG9zdENyZWF0ZVRleHQobjIuY2hpbGRyZW4pLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGFuY2hvclxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZWwgPSBuMi5lbCA9IG4xLmVsO1xuICAgICAgaWYgKG4yLmNoaWxkcmVuICE9PSBuMS5jaGlsZHJlbikge1xuICAgICAgICBob3N0U2V0VGV4dChlbCwgbjIuY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgcHJvY2Vzc0NvbW1lbnROb2RlID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IpID0+IHtcbiAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgaG9zdEluc2VydChcbiAgICAgICAgbjIuZWwgPSBob3N0Q3JlYXRlQ29tbWVudChuMi5jaGlsZHJlbiB8fCBcIlwiKSxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBhbmNob3JcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG4yLmVsID0gbjEuZWw7XG4gICAgfVxuICB9O1xuICBjb25zdCBtb3VudFN0YXRpY05vZGUgPSAobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBuYW1lc3BhY2UpID0+IHtcbiAgICBbbjIuZWwsIG4yLmFuY2hvcl0gPSBob3N0SW5zZXJ0U3RhdGljQ29udGVudChcbiAgICAgIG4yLmNoaWxkcmVuLFxuICAgICAgY29udGFpbmVyLFxuICAgICAgYW5jaG9yLFxuICAgICAgbmFtZXNwYWNlLFxuICAgICAgbjIuZWwsXG4gICAgICBuMi5hbmNob3JcbiAgICApO1xuICB9O1xuICBjb25zdCBwYXRjaFN0YXRpY05vZGUgPSAobjEsIG4yLCBjb250YWluZXIsIG5hbWVzcGFjZSkgPT4ge1xuICAgIGlmIChuMi5jaGlsZHJlbiAhPT0gbjEuY2hpbGRyZW4pIHtcbiAgICAgIGNvbnN0IGFuY2hvciA9IGhvc3ROZXh0U2libGluZyhuMS5hbmNob3IpO1xuICAgICAgcmVtb3ZlU3RhdGljTm9kZShuMSk7XG4gICAgICBbbjIuZWwsIG4yLmFuY2hvcl0gPSBob3N0SW5zZXJ0U3RhdGljQ29udGVudChcbiAgICAgICAgbjIuY2hpbGRyZW4sXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBuYW1lc3BhY2VcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG4yLmVsID0gbjEuZWw7XG4gICAgICBuMi5hbmNob3IgPSBuMS5hbmNob3I7XG4gICAgfVxuICB9O1xuICBjb25zdCBtb3ZlU3RhdGljTm9kZSA9ICh7IGVsLCBhbmNob3IgfSwgY29udGFpbmVyLCBuZXh0U2libGluZykgPT4ge1xuICAgIGxldCBuZXh0O1xuICAgIHdoaWxlIChlbCAmJiBlbCAhPT0gYW5jaG9yKSB7XG4gICAgICBuZXh0ID0gaG9zdE5leHRTaWJsaW5nKGVsKTtcbiAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgbmV4dFNpYmxpbmcpO1xuICAgICAgZWwgPSBuZXh0O1xuICAgIH1cbiAgICBob3N0SW5zZXJ0KGFuY2hvciwgY29udGFpbmVyLCBuZXh0U2libGluZyk7XG4gIH07XG4gIGNvbnN0IHJlbW92ZVN0YXRpY05vZGUgPSAoeyBlbCwgYW5jaG9yIH0pID0+IHtcbiAgICBsZXQgbmV4dDtcbiAgICB3aGlsZSAoZWwgJiYgZWwgIT09IGFuY2hvcikge1xuICAgICAgbmV4dCA9IGhvc3ROZXh0U2libGluZyhlbCk7XG4gICAgICBob3N0UmVtb3ZlKGVsKTtcbiAgICAgIGVsID0gbmV4dDtcbiAgICB9XG4gICAgaG9zdFJlbW92ZShhbmNob3IpO1xuICB9O1xuICBjb25zdCBwcm9jZXNzRWxlbWVudCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgaWYgKG4yLnR5cGUgPT09IFwic3ZnXCIpIHtcbiAgICAgIG5hbWVzcGFjZSA9IFwic3ZnXCI7XG4gICAgfSBlbHNlIGlmIChuMi50eXBlID09PSBcIm1hdGhcIikge1xuICAgICAgbmFtZXNwYWNlID0gXCJtYXRobWxcIjtcbiAgICB9XG4gICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgIG1vdW50RWxlbWVudChcbiAgICAgICAgbjIsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRjaEVsZW1lbnQoXG4gICAgICAgIG4xLFxuICAgICAgICBuMixcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgIG9wdGltaXplZFxuICAgICAgKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG1vdW50RWxlbWVudCA9ICh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG5hbWVzcGFjZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBsZXQgZWw7XG4gICAgbGV0IHZub2RlSG9vaztcbiAgICBjb25zdCB7IHByb3BzLCBzaGFwZUZsYWcsIHRyYW5zaXRpb24sIGRpcnMgfSA9IHZub2RlO1xuICAgIGVsID0gdm5vZGUuZWwgPSBob3N0Q3JlYXRlRWxlbWVudChcbiAgICAgIHZub2RlLnR5cGUsXG4gICAgICBuYW1lc3BhY2UsXG4gICAgICBwcm9wcyAmJiBwcm9wcy5pcyxcbiAgICAgIHByb3BzXG4gICAgKTtcbiAgICBpZiAoc2hhcGVGbGFnICYgOCkge1xuICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGVsLCB2bm9kZS5jaGlsZHJlbik7XG4gICAgfSBlbHNlIGlmIChzaGFwZUZsYWcgJiAxNikge1xuICAgICAgbW91bnRDaGlsZHJlbihcbiAgICAgICAgdm5vZGUuY2hpbGRyZW4sXG4gICAgICAgIGVsLFxuICAgICAgICBudWxsLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICByZXNvbHZlQ2hpbGRyZW5OYW1lc3BhY2Uodm5vZGUsIG5hbWVzcGFjZSksXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZGlycykge1xuICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBcImNyZWF0ZWRcIik7XG4gICAgfVxuICAgIHNldFNjb3BlSWQoZWwsIHZub2RlLCB2bm9kZS5zY29wZUlkLCBzbG90U2NvcGVJZHMsIHBhcmVudENvbXBvbmVudCk7XG4gICAgaWYgKHByb3BzKSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgICAgICBpZiAoa2V5ICE9PSBcInZhbHVlXCIgJiYgIWlzUmVzZXJ2ZWRQcm9wKGtleSkpIHtcbiAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBrZXksIG51bGwsIHByb3BzW2tleV0sIG5hbWVzcGFjZSwgcGFyZW50Q29tcG9uZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKFwidmFsdWVcIiBpbiBwcm9wcykge1xuICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBcInZhbHVlXCIsIG51bGwsIHByb3BzLnZhbHVlLCBuYW1lc3BhY2UpO1xuICAgICAgfVxuICAgICAgaWYgKHZub2RlSG9vayA9IHByb3BzLm9uVm5vZGVCZWZvcmVNb3VudCkge1xuICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICBkZWYoZWwsIFwiX192bm9kZVwiLCB2bm9kZSwgdHJ1ZSk7XG4gICAgICBkZWYoZWwsIFwiX192dWVQYXJlbnRDb21wb25lbnRcIiwgcGFyZW50Q29tcG9uZW50LCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKGRpcnMpIHtcbiAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgXCJiZWZvcmVNb3VudFwiKTtcbiAgICB9XG4gICAgY29uc3QgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgPSBuZWVkVHJhbnNpdGlvbihwYXJlbnRTdXNwZW5zZSwgdHJhbnNpdGlvbik7XG4gICAgaWYgKG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzKSB7XG4gICAgICB0cmFuc2l0aW9uLmJlZm9yZUVudGVyKGVsKTtcbiAgICB9XG4gICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgIGlmICgodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZU1vdW50ZWQpIHx8IG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzIHx8IGRpcnMpIHtcbiAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHZub2RlSG9vayAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcbiAgICAgICAgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgJiYgdHJhbnNpdGlvbi5lbnRlcihlbCk7XG4gICAgICAgIGRpcnMgJiYgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBcIm1vdW50ZWRcIik7XG4gICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBzZXRTY29wZUlkID0gKGVsLCB2bm9kZSwgc2NvcGVJZCwgc2xvdFNjb3BlSWRzLCBwYXJlbnRDb21wb25lbnQpID0+IHtcbiAgICBpZiAoc2NvcGVJZCkge1xuICAgICAgaG9zdFNldFNjb3BlSWQoZWwsIHNjb3BlSWQpO1xuICAgIH1cbiAgICBpZiAoc2xvdFNjb3BlSWRzKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsb3RTY29wZUlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBob3N0U2V0U2NvcGVJZChlbCwgc2xvdFNjb3BlSWRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcmVudENvbXBvbmVudCkge1xuICAgICAgbGV0IHN1YlRyZWUgPSBwYXJlbnRDb21wb25lbnQuc3ViVHJlZTtcbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHN1YlRyZWUucGF0Y2hGbGFnID4gMCAmJiBzdWJUcmVlLnBhdGNoRmxhZyAmIDIwNDgpIHtcbiAgICAgICAgc3ViVHJlZSA9IGZpbHRlclNpbmdsZVJvb3Qoc3ViVHJlZS5jaGlsZHJlbikgfHwgc3ViVHJlZTtcbiAgICAgIH1cbiAgICAgIGlmICh2bm9kZSA9PT0gc3ViVHJlZSB8fCBpc1N1c3BlbnNlKHN1YlRyZWUudHlwZSkgJiYgKHN1YlRyZWUuc3NDb250ZW50ID09PSB2bm9kZSB8fCBzdWJUcmVlLnNzRmFsbGJhY2sgPT09IHZub2RlKSkge1xuICAgICAgICBjb25zdCBwYXJlbnRWTm9kZSA9IHBhcmVudENvbXBvbmVudC52bm9kZTtcbiAgICAgICAgc2V0U2NvcGVJZChcbiAgICAgICAgICBlbCxcbiAgICAgICAgICBwYXJlbnRWTm9kZSxcbiAgICAgICAgICBwYXJlbnRWTm9kZS5zY29wZUlkLFxuICAgICAgICAgIHBhcmVudFZOb2RlLnNsb3RTY29wZUlkcyxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQucGFyZW50XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBtb3VudENoaWxkcmVuID0gKGNoaWxkcmVuLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgc3RhcnQgPSAwKSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV0gPSBvcHRpbWl6ZWQgPyBjbG9uZUlmTW91bnRlZChjaGlsZHJlbltpXSkgOiBub3JtYWxpemVWTm9kZShjaGlsZHJlbltpXSk7XG4gICAgICBwYXRjaChcbiAgICAgICAgbnVsbCxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkXG4gICAgICApO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcGF0Y2hFbGVtZW50ID0gKG4xLCBuMiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgIGNvbnN0IGVsID0gbjIuZWwgPSBuMS5lbDtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgIGVsLl9fdm5vZGUgPSBuMjtcbiAgICB9XG4gICAgbGV0IHsgcGF0Y2hGbGFnLCBkeW5hbWljQ2hpbGRyZW4sIGRpcnMgfSA9IG4yO1xuICAgIHBhdGNoRmxhZyB8PSBuMS5wYXRjaEZsYWcgJiAxNjtcbiAgICBjb25zdCBvbGRQcm9wcyA9IG4xLnByb3BzIHx8IEVNUFRZX09CSjtcbiAgICBjb25zdCBuZXdQcm9wcyA9IG4yLnByb3BzIHx8IEVNUFRZX09CSjtcbiAgICBsZXQgdm5vZGVIb29rO1xuICAgIHBhcmVudENvbXBvbmVudCAmJiB0b2dnbGVSZWN1cnNlKHBhcmVudENvbXBvbmVudCwgZmFsc2UpO1xuICAgIGlmICh2bm9kZUhvb2sgPSBuZXdQcm9wcy5vblZub2RlQmVmb3JlVXBkYXRlKSB7XG4gICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIG4yLCBuMSk7XG4gICAgfVxuICAgIGlmIChkaXJzKSB7XG4gICAgICBpbnZva2VEaXJlY3RpdmVIb29rKG4yLCBuMSwgcGFyZW50Q29tcG9uZW50LCBcImJlZm9yZVVwZGF0ZVwiKTtcbiAgICB9XG4gICAgcGFyZW50Q29tcG9uZW50ICYmIHRvZ2dsZVJlY3Vyc2UocGFyZW50Q29tcG9uZW50LCB0cnVlKTtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBpc0htclVwZGF0aW5nKSB7XG4gICAgICBwYXRjaEZsYWcgPSAwO1xuICAgICAgb3B0aW1pemVkID0gZmFsc2U7XG4gICAgICBkeW5hbWljQ2hpbGRyZW4gPSBudWxsO1xuICAgIH1cbiAgICBpZiAob2xkUHJvcHMuaW5uZXJIVE1MICYmIG5ld1Byb3BzLmlubmVySFRNTCA9PSBudWxsIHx8IG9sZFByb3BzLnRleHRDb250ZW50ICYmIG5ld1Byb3BzLnRleHRDb250ZW50ID09IG51bGwpIHtcbiAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChlbCwgXCJcIik7XG4gICAgfVxuICAgIGlmIChkeW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgIHBhdGNoQmxvY2tDaGlsZHJlbihcbiAgICAgICAgbjEuZHluYW1pY0NoaWxkcmVuLFxuICAgICAgICBkeW5hbWljQ2hpbGRyZW4sXG4gICAgICAgIGVsLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICByZXNvbHZlQ2hpbGRyZW5OYW1lc3BhY2UobjIsIG5hbWVzcGFjZSksXG4gICAgICAgIHNsb3RTY29wZUlkc1xuICAgICAgKTtcbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFvcHRpbWl6ZWQpIHtcbiAgICAgIHBhdGNoQ2hpbGRyZW4oXG4gICAgICAgIG4xLFxuICAgICAgICBuMixcbiAgICAgICAgZWwsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIHJlc29sdmVDaGlsZHJlbk5hbWVzcGFjZShuMiwgbmFtZXNwYWNlKSxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHBhdGNoRmxhZyA+IDApIHtcbiAgICAgIGlmIChwYXRjaEZsYWcgJiAxNikge1xuICAgICAgICBwYXRjaFByb3BzKGVsLCBvbGRQcm9wcywgbmV3UHJvcHMsIHBhcmVudENvbXBvbmVudCwgbmFtZXNwYWNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwYXRjaEZsYWcgJiAyKSB7XG4gICAgICAgICAgaWYgKG9sZFByb3BzLmNsYXNzICE9PSBuZXdQcm9wcy5jbGFzcykge1xuICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwgXCJjbGFzc1wiLCBudWxsLCBuZXdQcm9wcy5jbGFzcywgbmFtZXNwYWNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDQpIHtcbiAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBcInN0eWxlXCIsIG9sZFByb3BzLnN0eWxlLCBuZXdQcm9wcy5zdHlsZSwgbmFtZXNwYWNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF0Y2hGbGFnICYgOCkge1xuICAgICAgICAgIGNvbnN0IHByb3BzVG9VcGRhdGUgPSBuMi5keW5hbWljUHJvcHM7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wc1RvVXBkYXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBwcm9wc1RvVXBkYXRlW2ldO1xuICAgICAgICAgICAgY29uc3QgcHJldiA9IG9sZFByb3BzW2tleV07XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gbmV3UHJvcHNba2V5XTtcbiAgICAgICAgICAgIGlmIChuZXh0ICE9PSBwcmV2IHx8IGtleSA9PT0gXCJ2YWx1ZVwiKSB7XG4gICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIGtleSwgcHJldiwgbmV4dCwgbmFtZXNwYWNlLCBwYXJlbnRDb21wb25lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBhdGNoRmxhZyAmIDEpIHtcbiAgICAgICAgaWYgKG4xLmNoaWxkcmVuICE9PSBuMi5jaGlsZHJlbikge1xuICAgICAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChlbCwgbjIuY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghb3B0aW1pemVkICYmIGR5bmFtaWNDaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgICBwYXRjaFByb3BzKGVsLCBvbGRQcm9wcywgbmV3UHJvcHMsIHBhcmVudENvbXBvbmVudCwgbmFtZXNwYWNlKTtcbiAgICB9XG4gICAgaWYgKCh2bm9kZUhvb2sgPSBuZXdQcm9wcy5vblZub2RlVXBkYXRlZCkgfHwgZGlycykge1xuICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgICAgdm5vZGVIb29rICYmIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgbjIsIG4xKTtcbiAgICAgICAgZGlycyAmJiBpbnZva2VEaXJlY3RpdmVIb29rKG4yLCBuMSwgcGFyZW50Q29tcG9uZW50LCBcInVwZGF0ZWRcIik7XG4gICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBwYXRjaEJsb2NrQ2hpbGRyZW4gPSAob2xkQ2hpbGRyZW4sIG5ld0NoaWxkcmVuLCBmYWxsYmFja0NvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMpID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBvbGRWTm9kZSA9IG9sZENoaWxkcmVuW2ldO1xuICAgICAgY29uc3QgbmV3Vk5vZGUgPSBuZXdDaGlsZHJlbltpXTtcbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IChcbiAgICAgICAgLy8gb2xkVk5vZGUgbWF5IGJlIGFuIGVycm9yZWQgYXN5bmMgc2V0dXAoKSBjb21wb25lbnQgaW5zaWRlIFN1c3BlbnNlXG4gICAgICAgIC8vIHdoaWNoIHdpbGwgbm90IGhhdmUgYSBtb3VudGVkIGVsZW1lbnRcbiAgICAgICAgb2xkVk5vZGUuZWwgJiYgLy8gLSBJbiB0aGUgY2FzZSBvZiBhIEZyYWdtZW50LCB3ZSBuZWVkIHRvIHByb3ZpZGUgdGhlIGFjdHVhbCBwYXJlbnRcbiAgICAgICAgLy8gb2YgdGhlIEZyYWdtZW50IGl0c2VsZiBzbyBpdCBjYW4gbW92ZSBpdHMgY2hpbGRyZW4uXG4gICAgICAgIChvbGRWTm9kZS50eXBlID09PSBGcmFnbWVudCB8fCAvLyAtIEluIHRoZSBjYXNlIG9mIGRpZmZlcmVudCBub2RlcywgdGhlcmUgaXMgZ29pbmcgdG8gYmUgYSByZXBsYWNlbWVudFxuICAgICAgICAvLyB3aGljaCBhbHNvIHJlcXVpcmVzIHRoZSBjb3JyZWN0IHBhcmVudCBjb250YWluZXJcbiAgICAgICAgIWlzU2FtZVZOb2RlVHlwZShvbGRWTm9kZSwgbmV3Vk5vZGUpIHx8IC8vIC0gSW4gdGhlIGNhc2Ugb2YgYSBjb21wb25lbnQsIGl0IGNvdWxkIGNvbnRhaW4gYW55dGhpbmcuXG4gICAgICAgIG9sZFZOb2RlLnNoYXBlRmxhZyAmICg2IHwgNjQgfCAxMjgpKSA/IGhvc3RQYXJlbnROb2RlKG9sZFZOb2RlLmVsKSA6IChcbiAgICAgICAgICAvLyBJbiBvdGhlciBjYXNlcywgdGhlIHBhcmVudCBjb250YWluZXIgaXMgbm90IGFjdHVhbGx5IHVzZWQgc28gd2VcbiAgICAgICAgICAvLyBqdXN0IHBhc3MgdGhlIGJsb2NrIGVsZW1lbnQgaGVyZSB0byBhdm9pZCBhIERPTSBwYXJlbnROb2RlIGNhbGwuXG4gICAgICAgICAgZmFsbGJhY2tDb250YWluZXJcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIHBhdGNoKFxuICAgICAgICBvbGRWTm9kZSxcbiAgICAgICAgbmV3Vk5vZGUsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgIHRydWVcbiAgICAgICk7XG4gICAgfVxuICB9O1xuICBjb25zdCBwYXRjaFByb3BzID0gKGVsLCBvbGRQcm9wcywgbmV3UHJvcHMsIHBhcmVudENvbXBvbmVudCwgbmFtZXNwYWNlKSA9PiB7XG4gICAgaWYgKG9sZFByb3BzICE9PSBuZXdQcm9wcykge1xuICAgICAgaWYgKG9sZFByb3BzICE9PSBFTVBUWV9PQkopIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2xkUHJvcHMpIHtcbiAgICAgICAgICBpZiAoIWlzUmVzZXJ2ZWRQcm9wKGtleSkgJiYgIShrZXkgaW4gbmV3UHJvcHMpKSB7XG4gICAgICAgICAgICBob3N0UGF0Y2hQcm9wKFxuICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICBvbGRQcm9wc1trZXldLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICAgIHBhcmVudENvbXBvbmVudFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3Qga2V5IGluIG5ld1Byb3BzKSB7XG4gICAgICAgIGlmIChpc1Jlc2VydmVkUHJvcChrZXkpKSBjb250aW51ZTtcbiAgICAgICAgY29uc3QgbmV4dCA9IG5ld1Byb3BzW2tleV07XG4gICAgICAgIGNvbnN0IHByZXYgPSBvbGRQcm9wc1trZXldO1xuICAgICAgICBpZiAobmV4dCAhPT0gcHJldiAmJiBrZXkgIT09IFwidmFsdWVcIikge1xuICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIGtleSwgcHJldiwgbmV4dCwgbmFtZXNwYWNlLCBwYXJlbnRDb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIG5ld1Byb3BzKSB7XG4gICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIFwidmFsdWVcIiwgb2xkUHJvcHMudmFsdWUsIG5ld1Byb3BzLnZhbHVlLCBuYW1lc3BhY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgcHJvY2Vzc0ZyYWdtZW50ID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG5hbWVzcGFjZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBjb25zdCBmcmFnbWVudFN0YXJ0QW5jaG9yID0gbjIuZWwgPSBuMSA/IG4xLmVsIDogaG9zdENyZWF0ZVRleHQoXCJcIik7XG4gICAgY29uc3QgZnJhZ21lbnRFbmRBbmNob3IgPSBuMi5hbmNob3IgPSBuMSA/IG4xLmFuY2hvciA6IGhvc3RDcmVhdGVUZXh0KFwiXCIpO1xuICAgIGxldCB7IHBhdGNoRmxhZywgZHluYW1pY0NoaWxkcmVuLCBzbG90U2NvcGVJZHM6IGZyYWdtZW50U2xvdFNjb3BlSWRzIH0gPSBuMjtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAvLyAjNTUyMyBkZXYgcm9vdCBmcmFnbWVudCBtYXkgaW5oZXJpdCBkaXJlY3RpdmVzXG4gICAgKGlzSG1yVXBkYXRpbmcgfHwgcGF0Y2hGbGFnICYgMjA0OCkpIHtcbiAgICAgIHBhdGNoRmxhZyA9IDA7XG4gICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcbiAgICAgIGR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XG4gICAgfVxuICAgIGlmIChmcmFnbWVudFNsb3RTY29wZUlkcykge1xuICAgICAgc2xvdFNjb3BlSWRzID0gc2xvdFNjb3BlSWRzID8gc2xvdFNjb3BlSWRzLmNvbmNhdChmcmFnbWVudFNsb3RTY29wZUlkcykgOiBmcmFnbWVudFNsb3RTY29wZUlkcztcbiAgICB9XG4gICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgIGhvc3RJbnNlcnQoZnJhZ21lbnRTdGFydEFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgaG9zdEluc2VydChmcmFnbWVudEVuZEFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgbW91bnRDaGlsZHJlbihcbiAgICAgICAgLy8gIzEwMDA3XG4gICAgICAgIC8vIHN1Y2ggZnJhZ21lbnQgbGlrZSBgPD48Lz5gIHdpbGwgYmUgY29tcGlsZWQgaW50b1xuICAgICAgICAvLyBhIGZyYWdtZW50IHdoaWNoIGRvZXNuJ3QgaGF2ZSBhIGNoaWxkcmVuLlxuICAgICAgICAvLyBJbiB0aGlzIGNhc2UgZmFsbGJhY2sgdG8gYW4gZW1wdHkgYXJyYXlcbiAgICAgICAgbjIuY2hpbGRyZW4gfHwgW10sXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgZnJhZ21lbnRFbmRBbmNob3IsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwYXRjaEZsYWcgPiAwICYmIHBhdGNoRmxhZyAmIDY0ICYmIGR5bmFtaWNDaGlsZHJlbiAmJiAvLyAjMjcxNSB0aGUgcHJldmlvdXMgZnJhZ21lbnQgY291bGQndmUgYmVlbiBhIEJBSUxlZCBvbmUgYXMgYSByZXN1bHRcbiAgICAgIC8vIG9mIHJlbmRlclNsb3QoKSB3aXRoIG5vIHZhbGlkIGNoaWxkcmVuXG4gICAgICBuMS5keW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgICAgcGF0Y2hCbG9ja0NoaWxkcmVuKFxuICAgICAgICAgIG4xLmR5bmFtaWNDaGlsZHJlbixcbiAgICAgICAgICBkeW5hbWljQ2hpbGRyZW4sXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzXG4gICAgICAgICk7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIpO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIC8vICMyMDgwIGlmIHRoZSBzdGFibGUgZnJhZ21lbnQgaGFzIGEga2V5LCBpdCdzIGEgPHRlbXBsYXRlIHYtZm9yPiB0aGF0IG1heVxuICAgICAgICAgIC8vICBnZXQgbW92ZWQgYXJvdW5kLiBNYWtlIHN1cmUgYWxsIHJvb3QgbGV2ZWwgdm5vZGVzIGluaGVyaXQgZWwuXG4gICAgICAgICAgLy8gIzIxMzQgb3IgaWYgaXQncyBhIGNvbXBvbmVudCByb290LCBpdCBtYXkgYWxzbyBnZXQgbW92ZWQgYXJvdW5kXG4gICAgICAgICAgLy8gYXMgdGhlIGNvbXBvbmVudCBpcyBiZWluZyBtb3ZlZC5cbiAgICAgICAgICBuMi5rZXkgIT0gbnVsbCB8fCBwYXJlbnRDb21wb25lbnQgJiYgbjIgPT09IHBhcmVudENvbXBvbmVudC5zdWJUcmVlXG4gICAgICAgICkge1xuICAgICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4oXG4gICAgICAgICAgICBuMSxcbiAgICAgICAgICAgIG4yLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgLyogc2hhbGxvdyAqL1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhdGNoQ2hpbGRyZW4oXG4gICAgICAgICAgbjEsXG4gICAgICAgICAgbjIsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIGZyYWdtZW50RW5kQW5jaG9yLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgcHJvY2Vzc0NvbXBvbmVudCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgbjIuc2xvdFNjb3BlSWRzID0gc2xvdFNjb3BlSWRzO1xuICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICBpZiAobjIuc2hhcGVGbGFnICYgNTEyKSB7XG4gICAgICAgIHBhcmVudENvbXBvbmVudC5jdHguYWN0aXZhdGUoXG4gICAgICAgICAgbjIsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb3VudENvbXBvbmVudChcbiAgICAgICAgICBuMixcbiAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZUNvbXBvbmVudChuMSwgbjIsIG9wdGltaXplZCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBtb3VudENvbXBvbmVudCA9IChpbml0aWFsVk5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIG9wdGltaXplZCkgPT4ge1xuICAgIGNvbnN0IGluc3RhbmNlID0gKGluaXRpYWxWTm9kZS5jb21wb25lbnQgPSBjcmVhdGVDb21wb25lbnRJbnN0YW5jZShcbiAgICAgIGluaXRpYWxWTm9kZSxcbiAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgIHBhcmVudFN1c3BlbnNlXG4gICAgKSk7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgaW5zdGFuY2UudHlwZS5fX2htcklkKSB7XG4gICAgICByZWdpc3RlckhNUihpbnN0YW5jZSk7XG4gICAgfVxuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICBwdXNoV2FybmluZ0NvbnRleHQoaW5pdGlhbFZOb2RlKTtcbiAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYG1vdW50YCk7XG4gICAgfVxuICAgIGlmIChpc0tlZXBBbGl2ZShpbml0aWFsVk5vZGUpKSB7XG4gICAgICBpbnN0YW5jZS5jdHgucmVuZGVyZXIgPSBpbnRlcm5hbHM7XG4gICAgfVxuICAgIHtcbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYGluaXRgKTtcbiAgICAgIH1cbiAgICAgIHNldHVwQ29tcG9uZW50KGluc3RhbmNlLCBmYWxzZSwgb3B0aW1pemVkKTtcbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBpbml0YCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIGlzSG1yVXBkYXRpbmcpIGluaXRpYWxWTm9kZS5lbCA9IG51bGw7XG4gICAgaWYgKGluc3RhbmNlLmFzeW5jRGVwKSB7XG4gICAgICBwYXJlbnRTdXNwZW5zZSAmJiBwYXJlbnRTdXNwZW5zZS5yZWdpc3RlckRlcChpbnN0YW5jZSwgc2V0dXBSZW5kZXJFZmZlY3QsIG9wdGltaXplZCk7XG4gICAgICBpZiAoIWluaXRpYWxWTm9kZS5lbCkge1xuICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IGluc3RhbmNlLnN1YlRyZWUgPSBjcmVhdGVWTm9kZShDb21tZW50KTtcbiAgICAgICAgcHJvY2Vzc0NvbW1lbnROb2RlKG51bGwsIHBsYWNlaG9sZGVyLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgIGluaXRpYWxWTm9kZS5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyLmVsO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZXR1cFJlbmRlckVmZmVjdChcbiAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgIGluaXRpYWxWTm9kZSxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBhbmNob3IsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIG9wdGltaXplZFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XG4gICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgbW91bnRgKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHVwZGF0ZUNvbXBvbmVudCA9IChuMSwgbjIsIG9wdGltaXplZCkgPT4ge1xuICAgIGNvbnN0IGluc3RhbmNlID0gbjIuY29tcG9uZW50ID0gbjEuY29tcG9uZW50O1xuICAgIGlmIChzaG91bGRVcGRhdGVDb21wb25lbnQobjEsIG4yLCBvcHRpbWl6ZWQpKSB7XG4gICAgICBpZiAoaW5zdGFuY2UuYXN5bmNEZXAgJiYgIWluc3RhbmNlLmFzeW5jUmVzb2x2ZWQpIHtcbiAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICBwdXNoV2FybmluZ0NvbnRleHQobjIpO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZUNvbXBvbmVudFByZVJlbmRlcihpbnN0YW5jZSwgbjIsIG9wdGltaXplZCk7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnN0YW5jZS5uZXh0ID0gbjI7XG4gICAgICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBuMi5lbCA9IG4xLmVsO1xuICAgICAgaW5zdGFuY2Uudm5vZGUgPSBuMjtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHNldHVwUmVuZGVyRWZmZWN0ID0gKGluc3RhbmNlLCBpbml0aWFsVk5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBjb25zdCBjb21wb25lbnRVcGRhdGVGbiA9ICgpID0+IHtcbiAgICAgIGlmICghaW5zdGFuY2UuaXNNb3VudGVkKSB7XG4gICAgICAgIGxldCB2bm9kZUhvb2s7XG4gICAgICAgIGNvbnN0IHsgZWwsIHByb3BzIH0gPSBpbml0aWFsVk5vZGU7XG4gICAgICAgIGNvbnN0IHsgYm0sIG0sIHBhcmVudCwgcm9vdCwgdHlwZSB9ID0gaW5zdGFuY2U7XG4gICAgICAgIGNvbnN0IGlzQXN5bmNXcmFwcGVyVk5vZGUgPSBpc0FzeW5jV3JhcHBlcihpbml0aWFsVk5vZGUpO1xuICAgICAgICB0b2dnbGVSZWN1cnNlKGluc3RhbmNlLCBmYWxzZSk7XG4gICAgICAgIGlmIChibSkge1xuICAgICAgICAgIGludm9rZUFycmF5Rm5zKGJtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXN5bmNXcmFwcGVyVk5vZGUgJiYgKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVCZWZvcmVNb3VudCkpIHtcbiAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIGluaXRpYWxWTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdG9nZ2xlUmVjdXJzZShpbnN0YW5jZSwgdHJ1ZSk7XG4gICAgICAgIGlmIChlbCAmJiBoeWRyYXRlTm9kZSkge1xuICAgICAgICAgIGNvbnN0IGh5ZHJhdGVTdWJUcmVlID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnN0YW5jZS5zdWJUcmVlID0gcmVuZGVyQ29tcG9uZW50Um9vdChpbnN0YW5jZSk7XG4gICAgICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBoeWRyYXRlYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoeWRyYXRlTm9kZShcbiAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgIGluc3RhbmNlLnN1YlRyZWUsXG4gICAgICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBoeWRyYXRlYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAoaXNBc3luY1dyYXBwZXJWTm9kZSAmJiB0eXBlLl9fYXN5bmNIeWRyYXRlKSB7XG4gICAgICAgICAgICB0eXBlLl9fYXN5bmNIeWRyYXRlKFxuICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgICAgIGh5ZHJhdGVTdWJUcmVlXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoeWRyYXRlU3ViVHJlZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAocm9vdC5jZSAmJiAvLyBAdHMtZXhwZWN0LWVycm9yIF9kZWYgaXMgcHJpdmF0ZVxuICAgICAgICAgIHJvb3QuY2UuX2RlZi5zaGFkb3dSb290ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgcm9vdC5jZS5faW5qZWN0Q2hpbGRTdHlsZSh0eXBlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBzdWJUcmVlID0gaW5zdGFuY2Uuc3ViVHJlZSA9IHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpO1xuICAgICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBwYXRjaGApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYXRjaChcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBzdWJUcmVlLFxuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIG5hbWVzcGFjZVxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBwYXRjaGApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbml0aWFsVk5vZGUuZWwgPSBzdWJUcmVlLmVsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KG0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXN5bmNXcmFwcGVyVk5vZGUgJiYgKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVNb3VudGVkKSkge1xuICAgICAgICAgIGNvbnN0IHNjb3BlZEluaXRpYWxWTm9kZSA9IGluaXRpYWxWTm9kZTtcbiAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoXG4gICAgICAgICAgICAoKSA9PiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIHNjb3BlZEluaXRpYWxWTm9kZSksXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluaXRpYWxWTm9kZS5zaGFwZUZsYWcgJiAyNTYgfHwgcGFyZW50ICYmIGlzQXN5bmNXcmFwcGVyKHBhcmVudC52bm9kZSkgJiYgcGFyZW50LnZub2RlLnNoYXBlRmxhZyAmIDI1Nikge1xuICAgICAgICAgIGluc3RhbmNlLmEgJiYgcXVldWVQb3N0UmVuZGVyRWZmZWN0KGluc3RhbmNlLmEsIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnN0YW5jZS5pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudEFkZGVkKGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgICBpbml0aWFsVk5vZGUgPSBjb250YWluZXIgPSBhbmNob3IgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHsgbmV4dCwgYnUsIHUsIHBhcmVudCwgdm5vZGUgfSA9IGluc3RhbmNlO1xuICAgICAgICB7XG4gICAgICAgICAgY29uc3Qgbm9uSHlkcmF0ZWRBc3luY1Jvb3QgPSBsb2NhdGVOb25IeWRyYXRlZEFzeW5jUm9vdChpbnN0YW5jZSk7XG4gICAgICAgICAgaWYgKG5vbkh5ZHJhdGVkQXN5bmNSb290KSB7XG4gICAgICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgICAgICBuZXh0LmVsID0gdm5vZGUuZWw7XG4gICAgICAgICAgICAgIHVwZGF0ZUNvbXBvbmVudFByZVJlbmRlcihpbnN0YW5jZSwgbmV4dCwgb3B0aW1pemVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vbkh5ZHJhdGVkQXN5bmNSb290LmFzeW5jRGVwLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoIWluc3RhbmNlLmlzVW5tb3VudGVkKSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50VXBkYXRlRm4oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBvcmlnaW5OZXh0ID0gbmV4dDtcbiAgICAgICAgbGV0IHZub2RlSG9vaztcbiAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICBwdXNoV2FybmluZ0NvbnRleHQobmV4dCB8fCBpbnN0YW5jZS52bm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdG9nZ2xlUmVjdXJzZShpbnN0YW5jZSwgZmFsc2UpO1xuICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgIG5leHQuZWwgPSB2bm9kZS5lbDtcbiAgICAgICAgICB1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIoaW5zdGFuY2UsIG5leHQsIG9wdGltaXplZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dCA9IHZub2RlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChidSkge1xuICAgICAgICAgIGludm9rZUFycmF5Rm5zKGJ1KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodm5vZGVIb29rID0gbmV4dC5wcm9wcyAmJiBuZXh0LnByb3BzLm9uVm5vZGVCZWZvcmVVcGRhdGUpIHtcbiAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIG5leHQsIHZub2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0b2dnbGVSZWN1cnNlKGluc3RhbmNlLCB0cnVlKTtcbiAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXh0VHJlZSA9IHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpO1xuICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmV2VHJlZSA9IGluc3RhbmNlLnN1YlRyZWU7XG4gICAgICAgIGluc3RhbmNlLnN1YlRyZWUgPSBuZXh0VHJlZTtcbiAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBwYXRjaGApO1xuICAgICAgICB9XG4gICAgICAgIHBhdGNoKFxuICAgICAgICAgIHByZXZUcmVlLFxuICAgICAgICAgIG5leHRUcmVlLFxuICAgICAgICAgIC8vIHBhcmVudCBtYXkgaGF2ZSBjaGFuZ2VkIGlmIGl0J3MgaW4gYSB0ZWxlcG9ydFxuICAgICAgICAgIGhvc3RQYXJlbnROb2RlKHByZXZUcmVlLmVsKSxcbiAgICAgICAgICAvLyBhbmNob3IgbWF5IGhhdmUgY2hhbmdlZCBpZiBpdCdzIGluIGEgZnJhZ21lbnRcbiAgICAgICAgICBnZXROZXh0SG9zdE5vZGUocHJldlRyZWUpLFxuICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgIG5hbWVzcGFjZVxuICAgICAgICApO1xuICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBwYXRjaGApO1xuICAgICAgICB9XG4gICAgICAgIG5leHQuZWwgPSBuZXh0VHJlZS5lbDtcbiAgICAgICAgaWYgKG9yaWdpbk5leHQgPT09IG51bGwpIHtcbiAgICAgICAgICB1cGRhdGVIT0NIb3N0RWwoaW5zdGFuY2UsIG5leHRUcmVlLmVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodSkge1xuICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCh1LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZub2RlSG9vayA9IG5leHQucHJvcHMgJiYgbmV4dC5wcm9wcy5vblZub2RlVXBkYXRlZCkge1xuICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChcbiAgICAgICAgICAgICgpID0+IGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudCwgbmV4dCwgdm5vZGUpLFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2VcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICAgIGRldnRvb2xzQ29tcG9uZW50VXBkYXRlZChpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBpbnN0YW5jZS5zY29wZS5vbigpO1xuICAgIGNvbnN0IGVmZmVjdCA9IGluc3RhbmNlLmVmZmVjdCA9IG5ldyBSZWFjdGl2ZUVmZmVjdChjb21wb25lbnRVcGRhdGVGbik7XG4gICAgaW5zdGFuY2Uuc2NvcGUub2ZmKCk7XG4gICAgY29uc3QgdXBkYXRlID0gaW5zdGFuY2UudXBkYXRlID0gZWZmZWN0LnJ1bi5iaW5kKGVmZmVjdCk7XG4gICAgY29uc3Qgam9iID0gaW5zdGFuY2Uuam9iID0gZWZmZWN0LnJ1bklmRGlydHkuYmluZChlZmZlY3QpO1xuICAgIGpvYi5pID0gaW5zdGFuY2U7XG4gICAgam9iLmlkID0gaW5zdGFuY2UudWlkO1xuICAgIGVmZmVjdC5zY2hlZHVsZXIgPSAoKSA9PiBxdWV1ZUpvYihqb2IpO1xuICAgIHRvZ2dsZVJlY3Vyc2UoaW5zdGFuY2UsIHRydWUpO1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICBlZmZlY3Qub25UcmFjayA9IGluc3RhbmNlLnJ0YyA/IChlKSA9PiBpbnZva2VBcnJheUZucyhpbnN0YW5jZS5ydGMsIGUpIDogdm9pZCAwO1xuICAgICAgZWZmZWN0Lm9uVHJpZ2dlciA9IGluc3RhbmNlLnJ0ZyA/IChlKSA9PiBpbnZva2VBcnJheUZucyhpbnN0YW5jZS5ydGcsIGUpIDogdm9pZCAwO1xuICAgIH1cbiAgICB1cGRhdGUoKTtcbiAgfTtcbiAgY29uc3QgdXBkYXRlQ29tcG9uZW50UHJlUmVuZGVyID0gKGluc3RhbmNlLCBuZXh0Vk5vZGUsIG9wdGltaXplZCkgPT4ge1xuICAgIG5leHRWTm9kZS5jb21wb25lbnQgPSBpbnN0YW5jZTtcbiAgICBjb25zdCBwcmV2UHJvcHMgPSBpbnN0YW5jZS52bm9kZS5wcm9wcztcbiAgICBpbnN0YW5jZS52bm9kZSA9IG5leHRWTm9kZTtcbiAgICBpbnN0YW5jZS5uZXh0ID0gbnVsbDtcbiAgICB1cGRhdGVQcm9wcyhpbnN0YW5jZSwgbmV4dFZOb2RlLnByb3BzLCBwcmV2UHJvcHMsIG9wdGltaXplZCk7XG4gICAgdXBkYXRlU2xvdHMoaW5zdGFuY2UsIG5leHRWTm9kZS5jaGlsZHJlbiwgb3B0aW1pemVkKTtcbiAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgZmx1c2hQcmVGbHVzaENicyhpbnN0YW5jZSk7XG4gICAgcmVzZXRUcmFja2luZygpO1xuICB9O1xuICBjb25zdCBwYXRjaENoaWxkcmVuID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG5hbWVzcGFjZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQgPSBmYWxzZSkgPT4ge1xuICAgIGNvbnN0IGMxID0gbjEgJiYgbjEuY2hpbGRyZW47XG4gICAgY29uc3QgcHJldlNoYXBlRmxhZyA9IG4xID8gbjEuc2hhcGVGbGFnIDogMDtcbiAgICBjb25zdCBjMiA9IG4yLmNoaWxkcmVuO1xuICAgIGNvbnN0IHsgcGF0Y2hGbGFnLCBzaGFwZUZsYWcgfSA9IG4yO1xuICAgIGlmIChwYXRjaEZsYWcgPiAwKSB7XG4gICAgICBpZiAocGF0Y2hGbGFnICYgMTI4KSB7XG4gICAgICAgIHBhdGNoS2V5ZWRDaGlsZHJlbihcbiAgICAgICAgICBjMSxcbiAgICAgICAgICBjMixcbiAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKHBhdGNoRmxhZyAmIDI1Nikge1xuICAgICAgICBwYXRjaFVua2V5ZWRDaGlsZHJlbihcbiAgICAgICAgICBjMSxcbiAgICAgICAgICBjMixcbiAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzaGFwZUZsYWcgJiA4KSB7XG4gICAgICBpZiAocHJldlNoYXBlRmxhZyAmIDE2KSB7XG4gICAgICAgIHVubW91bnRDaGlsZHJlbihjMSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICB9XG4gICAgICBpZiAoYzIgIT09IGMxKSB7XG4gICAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChjb250YWluZXIsIGMyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByZXZTaGFwZUZsYWcgJiAxNikge1xuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYpIHtcbiAgICAgICAgICBwYXRjaEtleWVkQ2hpbGRyZW4oXG4gICAgICAgICAgICBjMSxcbiAgICAgICAgICAgIGMyLFxuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVubW91bnRDaGlsZHJlbihjMSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcmV2U2hhcGVGbGFnICYgOCkge1xuICAgICAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChjb250YWluZXIsIFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNikge1xuICAgICAgICAgIG1vdW50Q2hpbGRyZW4oXG4gICAgICAgICAgICBjMixcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgcGF0Y2hVbmtleWVkQ2hpbGRyZW4gPSAoYzEsIGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgIGMxID0gYzEgfHwgRU1QVFlfQVJSO1xuICAgIGMyID0gYzIgfHwgRU1QVFlfQVJSO1xuICAgIGNvbnN0IG9sZExlbmd0aCA9IGMxLmxlbmd0aDtcbiAgICBjb25zdCBuZXdMZW5ndGggPSBjMi5sZW5ndGg7XG4gICAgY29uc3QgY29tbW9uTGVuZ3RoID0gTWF0aC5taW4ob2xkTGVuZ3RoLCBuZXdMZW5ndGgpO1xuICAgIGxldCBpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBjb21tb25MZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbmV4dENoaWxkID0gYzJbaV0gPSBvcHRpbWl6ZWQgPyBjbG9uZUlmTW91bnRlZChjMltpXSkgOiBub3JtYWxpemVWTm9kZShjMltpXSk7XG4gICAgICBwYXRjaChcbiAgICAgICAgYzFbaV0sXG4gICAgICAgIG5leHRDaGlsZCxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBudWxsLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAob2xkTGVuZ3RoID4gbmV3TGVuZ3RoKSB7XG4gICAgICB1bm1vdW50Q2hpbGRyZW4oXG4gICAgICAgIGMxLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICB0cnVlLFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgY29tbW9uTGVuZ3RoXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBtb3VudENoaWxkcmVuKFxuICAgICAgICBjMixcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBhbmNob3IsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWQsXG4gICAgICAgIGNvbW1vbkxlbmd0aFxuICAgICAgKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHBhdGNoS2V5ZWRDaGlsZHJlbiA9IChjMSwgYzIsIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgbGV0IGkgPSAwO1xuICAgIGNvbnN0IGwyID0gYzIubGVuZ3RoO1xuICAgIGxldCBlMSA9IGMxLmxlbmd0aCAtIDE7XG4gICAgbGV0IGUyID0gbDIgLSAxO1xuICAgIHdoaWxlIChpIDw9IGUxICYmIGkgPD0gZTIpIHtcbiAgICAgIGNvbnN0IG4xID0gYzFbaV07XG4gICAgICBjb25zdCBuMiA9IGMyW2ldID0gb3B0aW1pemVkID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pIDogbm9ybWFsaXplVk5vZGUoYzJbaV0pO1xuICAgICAgaWYgKGlzU2FtZVZOb2RlVHlwZShuMSwgbjIpKSB7XG4gICAgICAgIHBhdGNoKFxuICAgICAgICAgIG4xLFxuICAgICAgICAgIG4yLFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpKys7XG4gICAgfVxuICAgIHdoaWxlIChpIDw9IGUxICYmIGkgPD0gZTIpIHtcbiAgICAgIGNvbnN0IG4xID0gYzFbZTFdO1xuICAgICAgY29uc3QgbjIgPSBjMltlMl0gPSBvcHRpbWl6ZWQgPyBjbG9uZUlmTW91bnRlZChjMltlMl0pIDogbm9ybWFsaXplVk5vZGUoYzJbZTJdKTtcbiAgICAgIGlmIChpc1NhbWVWTm9kZVR5cGUobjEsIG4yKSkge1xuICAgICAgICBwYXRjaChcbiAgICAgICAgICBuMSxcbiAgICAgICAgICBuMixcbiAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZTEtLTtcbiAgICAgIGUyLS07XG4gICAgfVxuICAgIGlmIChpID4gZTEpIHtcbiAgICAgIGlmIChpIDw9IGUyKSB7XG4gICAgICAgIGNvbnN0IG5leHRQb3MgPSBlMiArIDE7XG4gICAgICAgIGNvbnN0IGFuY2hvciA9IG5leHRQb3MgPCBsMiA/IGMyW25leHRQb3NdLmVsIDogcGFyZW50QW5jaG9yO1xuICAgICAgICB3aGlsZSAoaSA8PSBlMikge1xuICAgICAgICAgIHBhdGNoKFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGMyW2ldID0gb3B0aW1pemVkID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pIDogbm9ybWFsaXplVk5vZGUoYzJbaV0pLFxuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICApO1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaSA+IGUyKSB7XG4gICAgICB3aGlsZSAoaSA8PSBlMSkge1xuICAgICAgICB1bm1vdW50KGMxW2ldLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzMSA9IGk7XG4gICAgICBjb25zdCBzMiA9IGk7XG4gICAgICBjb25zdCBrZXlUb05ld0luZGV4TWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICAgIGZvciAoaSA9IHMyOyBpIDw9IGUyOyBpKyspIHtcbiAgICAgICAgY29uc3QgbmV4dENoaWxkID0gYzJbaV0gPSBvcHRpbWl6ZWQgPyBjbG9uZUlmTW91bnRlZChjMltpXSkgOiBub3JtYWxpemVWTm9kZShjMltpXSk7XG4gICAgICAgIGlmIChuZXh0Q2hpbGQua2V5ICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBrZXlUb05ld0luZGV4TWFwLmhhcyhuZXh0Q2hpbGQua2V5KSkge1xuICAgICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgICBgRHVwbGljYXRlIGtleXMgZm91bmQgZHVyaW5nIHVwZGF0ZTpgLFxuICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShuZXh0Q2hpbGQua2V5KSxcbiAgICAgICAgICAgICAgYE1ha2Ugc3VyZSBrZXlzIGFyZSB1bmlxdWUuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAga2V5VG9OZXdJbmRleE1hcC5zZXQobmV4dENoaWxkLmtleSwgaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBqO1xuICAgICAgbGV0IHBhdGNoZWQgPSAwO1xuICAgICAgY29uc3QgdG9CZVBhdGNoZWQgPSBlMiAtIHMyICsgMTtcbiAgICAgIGxldCBtb3ZlZCA9IGZhbHNlO1xuICAgICAgbGV0IG1heE5ld0luZGV4U29GYXIgPSAwO1xuICAgICAgY29uc3QgbmV3SW5kZXhUb09sZEluZGV4TWFwID0gbmV3IEFycmF5KHRvQmVQYXRjaGVkKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0b0JlUGF0Y2hlZDsgaSsrKSBuZXdJbmRleFRvT2xkSW5kZXhNYXBbaV0gPSAwO1xuICAgICAgZm9yIChpID0gczE7IGkgPD0gZTE7IGkrKykge1xuICAgICAgICBjb25zdCBwcmV2Q2hpbGQgPSBjMVtpXTtcbiAgICAgICAgaWYgKHBhdGNoZWQgPj0gdG9CZVBhdGNoZWQpIHtcbiAgICAgICAgICB1bm1vdW50KHByZXZDaGlsZCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5ld0luZGV4O1xuICAgICAgICBpZiAocHJldkNoaWxkLmtleSAhPSBudWxsKSB7XG4gICAgICAgICAgbmV3SW5kZXggPSBrZXlUb05ld0luZGV4TWFwLmdldChwcmV2Q2hpbGQua2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3IgKGogPSBzMjsgaiA8PSBlMjsgaisrKSB7XG4gICAgICAgICAgICBpZiAobmV3SW5kZXhUb09sZEluZGV4TWFwW2ogLSBzMl0gPT09IDAgJiYgaXNTYW1lVk5vZGVUeXBlKHByZXZDaGlsZCwgYzJbal0pKSB7XG4gICAgICAgICAgICAgIG5ld0luZGV4ID0gajtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChuZXdJbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgdW5tb3VudChwcmV2Q2hpbGQsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0luZGV4VG9PbGRJbmRleE1hcFtuZXdJbmRleCAtIHMyXSA9IGkgKyAxO1xuICAgICAgICAgIGlmIChuZXdJbmRleCA+PSBtYXhOZXdJbmRleFNvRmFyKSB7XG4gICAgICAgICAgICBtYXhOZXdJbmRleFNvRmFyID0gbmV3SW5kZXg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGF0Y2goXG4gICAgICAgICAgICBwcmV2Q2hpbGQsXG4gICAgICAgICAgICBjMltuZXdJbmRleF0sXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICApO1xuICAgICAgICAgIHBhdGNoZWQrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgaW5jcmVhc2luZ05ld0luZGV4U2VxdWVuY2UgPSBtb3ZlZCA/IGdldFNlcXVlbmNlKG5ld0luZGV4VG9PbGRJbmRleE1hcCkgOiBFTVBUWV9BUlI7XG4gICAgICBqID0gaW5jcmVhc2luZ05ld0luZGV4U2VxdWVuY2UubGVuZ3RoIC0gMTtcbiAgICAgIGZvciAoaSA9IHRvQmVQYXRjaGVkIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gczIgKyBpO1xuICAgICAgICBjb25zdCBuZXh0Q2hpbGQgPSBjMltuZXh0SW5kZXhdO1xuICAgICAgICBjb25zdCBhbmNob3JWTm9kZSA9IGMyW25leHRJbmRleCArIDFdO1xuICAgICAgICBjb25zdCBhbmNob3IgPSBuZXh0SW5kZXggKyAxIDwgbDIgPyAoXG4gICAgICAgICAgLy8gIzEzNTU5LCBmYWxsYmFjayB0byBlbCBwbGFjZWhvbGRlciBmb3IgdW5yZXNvbHZlZCBhc3luYyBjb21wb25lbnRcbiAgICAgICAgICBhbmNob3JWTm9kZS5lbCB8fCBhbmNob3JWTm9kZS5wbGFjZWhvbGRlclxuICAgICAgICApIDogcGFyZW50QW5jaG9yO1xuICAgICAgICBpZiAobmV3SW5kZXhUb09sZEluZGV4TWFwW2ldID09PSAwKSB7XG4gICAgICAgICAgcGF0Y2goXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbmV4dENoaWxkLFxuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKG1vdmVkKSB7XG4gICAgICAgICAgaWYgKGogPCAwIHx8IGkgIT09IGluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlW2pdKSB7XG4gICAgICAgICAgICBtb3ZlKG5leHRDaGlsZCwgY29udGFpbmVyLCBhbmNob3IsIDIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBqLS07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBtb3ZlID0gKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUsIHBhcmVudFN1c3BlbnNlID0gbnVsbCkgPT4ge1xuICAgIGNvbnN0IHsgZWwsIHR5cGUsIHRyYW5zaXRpb24sIGNoaWxkcmVuLCBzaGFwZUZsYWcgfSA9IHZub2RlO1xuICAgIGlmIChzaGFwZUZsYWcgJiA2KSB7XG4gICAgICBtb3ZlKHZub2RlLmNvbXBvbmVudC5zdWJUcmVlLCBjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc2hhcGVGbGFnICYgMTI4KSB7XG4gICAgICB2bm9kZS5zdXNwZW5zZS5tb3ZlKGNvbnRhaW5lciwgYW5jaG9yLCBtb3ZlVHlwZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzaGFwZUZsYWcgJiA2NCkge1xuICAgICAgdHlwZS5tb3ZlKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgaW50ZXJuYWxzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09IEZyYWdtZW50KSB7XG4gICAgICBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1vdmUoY2hpbGRyZW5baV0sIGNvbnRhaW5lciwgYW5jaG9yLCBtb3ZlVHlwZSk7XG4gICAgICB9XG4gICAgICBob3N0SW5zZXJ0KHZub2RlLmFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gU3RhdGljKSB7XG4gICAgICBtb3ZlU3RhdGljTm9kZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBuZWVkVHJhbnNpdGlvbjIgPSBtb3ZlVHlwZSAhPT0gMiAmJiBzaGFwZUZsYWcgJiAxICYmIHRyYW5zaXRpb247XG4gICAgaWYgKG5lZWRUcmFuc2l0aW9uMikge1xuICAgICAgaWYgKG1vdmVUeXBlID09PSAwKSB7XG4gICAgICAgIHRyYW5zaXRpb24uYmVmb3JlRW50ZXIoZWwpO1xuICAgICAgICBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB0cmFuc2l0aW9uLmVudGVyKGVsKSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgeyBsZWF2ZSwgZGVsYXlMZWF2ZSwgYWZ0ZXJMZWF2ZSB9ID0gdHJhbnNpdGlvbjtcbiAgICAgICAgY29uc3QgcmVtb3ZlMiA9ICgpID0+IHtcbiAgICAgICAgICBpZiAodm5vZGUuY3R4LmlzVW5tb3VudGVkKSB7XG4gICAgICAgICAgICBob3N0UmVtb3ZlKGVsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcGVyZm9ybUxlYXZlID0gKCkgPT4ge1xuICAgICAgICAgIGlmIChlbC5faXNMZWF2aW5nKSB7XG4gICAgICAgICAgICBlbFtsZWF2ZUNiS2V5XShcbiAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAvKiBjYW5jZWxsZWQgKi9cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlYXZlKGVsLCAoKSA9PiB7XG4gICAgICAgICAgICByZW1vdmUyKCk7XG4gICAgICAgICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICAgICAgICBkZWxheUxlYXZlKGVsLCByZW1vdmUyLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlcmZvcm1MZWF2ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHVubW91bnQgPSAodm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlID0gZmFsc2UsIG9wdGltaXplZCA9IGZhbHNlKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgdHlwZSxcbiAgICAgIHByb3BzLFxuICAgICAgcmVmLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBkeW5hbWljQ2hpbGRyZW4sXG4gICAgICBzaGFwZUZsYWcsXG4gICAgICBwYXRjaEZsYWcsXG4gICAgICBkaXJzLFxuICAgICAgY2FjaGVJbmRleFxuICAgIH0gPSB2bm9kZTtcbiAgICBpZiAocGF0Y2hGbGFnID09PSAtMikge1xuICAgICAgb3B0aW1pemVkID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChyZWYgIT0gbnVsbCkge1xuICAgICAgcGF1c2VUcmFja2luZygpO1xuICAgICAgc2V0UmVmKHJlZiwgbnVsbCwgcGFyZW50U3VzcGVuc2UsIHZub2RlLCB0cnVlKTtcbiAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICB9XG4gICAgaWYgKGNhY2hlSW5kZXggIT0gbnVsbCkge1xuICAgICAgcGFyZW50Q29tcG9uZW50LnJlbmRlckNhY2hlW2NhY2hlSW5kZXhdID0gdm9pZCAwO1xuICAgIH1cbiAgICBpZiAoc2hhcGVGbGFnICYgMjU2KSB7XG4gICAgICBwYXJlbnRDb21wb25lbnQuY3R4LmRlYWN0aXZhdGUodm5vZGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzaG91bGRJbnZva2VEaXJzID0gc2hhcGVGbGFnICYgMSAmJiBkaXJzO1xuICAgIGNvbnN0IHNob3VsZEludm9rZVZub2RlSG9vayA9ICFpc0FzeW5jV3JhcHBlcih2bm9kZSk7XG4gICAgbGV0IHZub2RlSG9vaztcbiAgICBpZiAoc2hvdWxkSW52b2tlVm5vZGVIb29rICYmICh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlQmVmb3JlVW5tb3VudCkpIHtcbiAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgIH1cbiAgICBpZiAoc2hhcGVGbGFnICYgNikge1xuICAgICAgdW5tb3VudENvbXBvbmVudCh2bm9kZS5jb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzaGFwZUZsYWcgJiAxMjgpIHtcbiAgICAgICAgdm5vZGUuc3VzcGVuc2UudW5tb3VudChwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoc2hvdWxkSW52b2tlRGlycykge1xuICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIFwiYmVmb3JlVW5tb3VudFwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChzaGFwZUZsYWcgJiA2NCkge1xuICAgICAgICB2bm9kZS50eXBlLnJlbW92ZShcbiAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgaW50ZXJuYWxzLFxuICAgICAgICAgIGRvUmVtb3ZlXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKGR5bmFtaWNDaGlsZHJlbiAmJiAvLyAjNTE1NFxuICAgICAgLy8gd2hlbiB2LW9uY2UgaXMgdXNlZCBpbnNpZGUgYSBibG9jaywgc2V0QmxvY2tUcmFja2luZygtMSkgbWFya3MgdGhlXG4gICAgICAvLyBwYXJlbnQgYmxvY2sgd2l0aCBoYXNPbmNlOiB0cnVlXG4gICAgICAvLyBzbyB0aGF0IGl0IGRvZXNuJ3QgdGFrZSB0aGUgZmFzdCBwYXRoIGR1cmluZyB1bm1vdW50IC0gb3RoZXJ3aXNlXG4gICAgICAvLyBjb21wb25lbnRzIG5lc3RlZCBpbiB2LW9uY2UgYXJlIG5ldmVyIHVubW91bnRlZC5cbiAgICAgICFkeW5hbWljQ2hpbGRyZW4uaGFzT25jZSAmJiAvLyAjMTE1MzogZmFzdCBwYXRoIHNob3VsZCBub3QgYmUgdGFrZW4gZm9yIG5vbi1zdGFibGUgKHYtZm9yKSBmcmFnbWVudHNcbiAgICAgICh0eXBlICE9PSBGcmFnbWVudCB8fCBwYXRjaEZsYWcgPiAwICYmIHBhdGNoRmxhZyAmIDY0KSkge1xuICAgICAgICB1bm1vdW50Q2hpbGRyZW4oXG4gICAgICAgICAgZHluYW1pY0NoaWxkcmVuLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IEZyYWdtZW50ICYmIHBhdGNoRmxhZyAmICgxMjggfCAyNTYpIHx8ICFvcHRpbWl6ZWQgJiYgc2hhcGVGbGFnICYgMTYpIHtcbiAgICAgICAgdW5tb3VudENoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgIH1cbiAgICAgIGlmIChkb1JlbW92ZSkge1xuICAgICAgICByZW1vdmUodm5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2hvdWxkSW52b2tlVm5vZGVIb29rICYmICh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlVW5tb3VudGVkKSB8fCBzaG91bGRJbnZva2VEaXJzKSB7XG4gICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgICB2bm9kZUhvb2sgJiYgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XG4gICAgICAgIHNob3VsZEludm9rZURpcnMgJiYgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBcInVubW91bnRlZFwiKTtcbiAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHJlbW92ZSA9ICh2bm9kZSkgPT4ge1xuICAgIGNvbnN0IHsgdHlwZSwgZWwsIGFuY2hvciwgdHJhbnNpdGlvbiB9ID0gdm5vZGU7XG4gICAgaWYgKHR5cGUgPT09IEZyYWdtZW50KSB7XG4gICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiB2bm9kZS5wYXRjaEZsYWcgPiAwICYmIHZub2RlLnBhdGNoRmxhZyAmIDIwNDggJiYgdHJhbnNpdGlvbiAmJiAhdHJhbnNpdGlvbi5wZXJzaXN0ZWQpIHtcbiAgICAgICAgdm5vZGUuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gQ29tbWVudCkge1xuICAgICAgICAgICAgaG9zdFJlbW92ZShjaGlsZC5lbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlbW92ZShjaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlbW92ZUZyYWdtZW50KGVsLCBhbmNob3IpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gU3RhdGljKSB7XG4gICAgICByZW1vdmVTdGF0aWNOb2RlKHZub2RlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcGVyZm9ybVJlbW92ZSA9ICgpID0+IHtcbiAgICAgIGhvc3RSZW1vdmUoZWwpO1xuICAgICAgaWYgKHRyYW5zaXRpb24gJiYgIXRyYW5zaXRpb24ucGVyc2lzdGVkICYmIHRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSkge1xuICAgICAgICB0cmFuc2l0aW9uLmFmdGVyTGVhdmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxICYmIHRyYW5zaXRpb24gJiYgIXRyYW5zaXRpb24ucGVyc2lzdGVkKSB7XG4gICAgICBjb25zdCB7IGxlYXZlLCBkZWxheUxlYXZlIH0gPSB0cmFuc2l0aW9uO1xuICAgICAgY29uc3QgcGVyZm9ybUxlYXZlID0gKCkgPT4gbGVhdmUoZWwsIHBlcmZvcm1SZW1vdmUpO1xuICAgICAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICAgICAgZGVsYXlMZWF2ZSh2bm9kZS5lbCwgcGVyZm9ybVJlbW92ZSwgcGVyZm9ybUxlYXZlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlcmZvcm1MZWF2ZSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZXJmb3JtUmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICBjb25zdCByZW1vdmVGcmFnbWVudCA9IChjdXIsIGVuZCkgPT4ge1xuICAgIGxldCBuZXh0O1xuICAgIHdoaWxlIChjdXIgIT09IGVuZCkge1xuICAgICAgbmV4dCA9IGhvc3ROZXh0U2libGluZyhjdXIpO1xuICAgICAgaG9zdFJlbW92ZShjdXIpO1xuICAgICAgY3VyID0gbmV4dDtcbiAgICB9XG4gICAgaG9zdFJlbW92ZShlbmQpO1xuICB9O1xuICBjb25zdCB1bm1vdW50Q29tcG9uZW50ID0gKGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpID0+IHtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBpbnN0YW5jZS50eXBlLl9faG1ySWQpIHtcbiAgICAgIHVucmVnaXN0ZXJITVIoaW5zdGFuY2UpO1xuICAgIH1cbiAgICBjb25zdCB7IGJ1bSwgc2NvcGUsIGpvYiwgc3ViVHJlZSwgdW0sIG0sIGEgfSA9IGluc3RhbmNlO1xuICAgIGludmFsaWRhdGVNb3VudChtKTtcbiAgICBpbnZhbGlkYXRlTW91bnQoYSk7XG4gICAgaWYgKGJ1bSkge1xuICAgICAgaW52b2tlQXJyYXlGbnMoYnVtKTtcbiAgICB9XG4gICAgc2NvcGUuc3RvcCgpO1xuICAgIGlmIChqb2IpIHtcbiAgICAgIGpvYi5mbGFncyB8PSA4O1xuICAgICAgdW5tb3VudChzdWJUcmVlLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKTtcbiAgICB9XG4gICAgaWYgKHVtKSB7XG4gICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QodW0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICB9XG4gICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgIGluc3RhbmNlLmlzVW5tb3VudGVkID0gdHJ1ZTtcbiAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICBkZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQoaW5zdGFuY2UpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdW5tb3VudENoaWxkcmVuID0gKGNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSA9IGZhbHNlLCBvcHRpbWl6ZWQgPSBmYWxzZSwgc3RhcnQgPSAwKSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHVubW91bnQoY2hpbGRyZW5baV0sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlLCBvcHRpbWl6ZWQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZ2V0TmV4dEhvc3ROb2RlID0gKHZub2RlKSA9PiB7XG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDYpIHtcbiAgICAgIHJldHVybiBnZXROZXh0SG9zdE5vZGUodm5vZGUuY29tcG9uZW50LnN1YlRyZWUpO1xuICAgIH1cbiAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMTI4KSB7XG4gICAgICByZXR1cm4gdm5vZGUuc3VzcGVuc2UubmV4dCgpO1xuICAgIH1cbiAgICBjb25zdCBlbCA9IGhvc3ROZXh0U2libGluZyh2bm9kZS5hbmNob3IgfHwgdm5vZGUuZWwpO1xuICAgIGNvbnN0IHRlbGVwb3J0RW5kID0gZWwgJiYgZWxbVGVsZXBvcnRFbmRLZXldO1xuICAgIHJldHVybiB0ZWxlcG9ydEVuZCA/IGhvc3ROZXh0U2libGluZyh0ZWxlcG9ydEVuZCkgOiBlbDtcbiAgfTtcbiAgbGV0IGlzRmx1c2hpbmcgPSBmYWxzZTtcbiAgY29uc3QgcmVuZGVyID0gKHZub2RlLCBjb250YWluZXIsIG5hbWVzcGFjZSkgPT4ge1xuICAgIGlmICh2bm9kZSA9PSBudWxsKSB7XG4gICAgICBpZiAoY29udGFpbmVyLl92bm9kZSkge1xuICAgICAgICB1bm1vdW50KGNvbnRhaW5lci5fdm5vZGUsIG51bGwsIG51bGwsIHRydWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXRjaChcbiAgICAgICAgY29udGFpbmVyLl92bm9kZSB8fCBudWxsLFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBuYW1lc3BhY2VcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnRhaW5lci5fdm5vZGUgPSB2bm9kZTtcbiAgICBpZiAoIWlzRmx1c2hpbmcpIHtcbiAgICAgIGlzRmx1c2hpbmcgPSB0cnVlO1xuICAgICAgZmx1c2hQcmVGbHVzaENicygpO1xuICAgICAgZmx1c2hQb3N0Rmx1c2hDYnMoKTtcbiAgICAgIGlzRmx1c2hpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGludGVybmFscyA9IHtcbiAgICBwOiBwYXRjaCxcbiAgICB1bTogdW5tb3VudCxcbiAgICBtOiBtb3ZlLFxuICAgIHI6IHJlbW92ZSxcbiAgICBtdDogbW91bnRDb21wb25lbnQsXG4gICAgbWM6IG1vdW50Q2hpbGRyZW4sXG4gICAgcGM6IHBhdGNoQ2hpbGRyZW4sXG4gICAgcGJjOiBwYXRjaEJsb2NrQ2hpbGRyZW4sXG4gICAgbjogZ2V0TmV4dEhvc3ROb2RlLFxuICAgIG86IG9wdGlvbnNcbiAgfTtcbiAgbGV0IGh5ZHJhdGU7XG4gIGxldCBoeWRyYXRlTm9kZTtcbiAgaWYgKGNyZWF0ZUh5ZHJhdGlvbkZucykge1xuICAgIFtoeWRyYXRlLCBoeWRyYXRlTm9kZV0gPSBjcmVhdGVIeWRyYXRpb25GbnMoXG4gICAgICBpbnRlcm5hbHNcbiAgICApO1xuICB9XG4gIHJldHVybiB7XG4gICAgcmVuZGVyLFxuICAgIGh5ZHJhdGUsXG4gICAgY3JlYXRlQXBwOiBjcmVhdGVBcHBBUEkocmVuZGVyLCBoeWRyYXRlKVxuICB9O1xufVxuZnVuY3Rpb24gcmVzb2x2ZUNoaWxkcmVuTmFtZXNwYWNlKHsgdHlwZSwgcHJvcHMgfSwgY3VycmVudE5hbWVzcGFjZSkge1xuICByZXR1cm4gY3VycmVudE5hbWVzcGFjZSA9PT0gXCJzdmdcIiAmJiB0eXBlID09PSBcImZvcmVpZ25PYmplY3RcIiB8fCBjdXJyZW50TmFtZXNwYWNlID09PSBcIm1hdGhtbFwiICYmIHR5cGUgPT09IFwiYW5ub3RhdGlvbi14bWxcIiAmJiBwcm9wcyAmJiBwcm9wcy5lbmNvZGluZyAmJiBwcm9wcy5lbmNvZGluZy5pbmNsdWRlcyhcImh0bWxcIikgPyB2b2lkIDAgOiBjdXJyZW50TmFtZXNwYWNlO1xufVxuZnVuY3Rpb24gdG9nZ2xlUmVjdXJzZSh7IGVmZmVjdCwgam9iIH0sIGFsbG93ZWQpIHtcbiAgaWYgKGFsbG93ZWQpIHtcbiAgICBlZmZlY3QuZmxhZ3MgfD0gMzI7XG4gICAgam9iLmZsYWdzIHw9IDQ7XG4gIH0gZWxzZSB7XG4gICAgZWZmZWN0LmZsYWdzICY9IC0zMztcbiAgICBqb2IuZmxhZ3MgJj0gLTU7XG4gIH1cbn1cbmZ1bmN0aW9uIG5lZWRUcmFuc2l0aW9uKHBhcmVudFN1c3BlbnNlLCB0cmFuc2l0aW9uKSB7XG4gIHJldHVybiAoIXBhcmVudFN1c3BlbnNlIHx8IHBhcmVudFN1c3BlbnNlICYmICFwYXJlbnRTdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSAmJiB0cmFuc2l0aW9uICYmICF0cmFuc2l0aW9uLnBlcnNpc3RlZDtcbn1cbmZ1bmN0aW9uIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yLCBzaGFsbG93ID0gZmFsc2UpIHtcbiAgY29uc3QgY2gxID0gbjEuY2hpbGRyZW47XG4gIGNvbnN0IGNoMiA9IG4yLmNoaWxkcmVuO1xuICBpZiAoaXNBcnJheShjaDEpICYmIGlzQXJyYXkoY2gyKSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2gxLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjMSA9IGNoMVtpXTtcbiAgICAgIGxldCBjMiA9IGNoMltpXTtcbiAgICAgIGlmIChjMi5zaGFwZUZsYWcgJiAxICYmICFjMi5keW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKGMyLnBhdGNoRmxhZyA8PSAwIHx8IGMyLnBhdGNoRmxhZyA9PT0gMzIpIHtcbiAgICAgICAgICBjMiA9IGNoMltpXSA9IGNsb25lSWZNb3VudGVkKGNoMltpXSk7XG4gICAgICAgICAgYzIuZWwgPSBjMS5lbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNoYWxsb3cgJiYgYzIucGF0Y2hGbGFnICE9PSAtMilcbiAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKGMxLCBjMik7XG4gICAgICB9XG4gICAgICBpZiAoYzIudHlwZSA9PT0gVGV4dCAmJiAvLyBhdm9pZCBjYWNoZWQgdGV4dCBub2RlcyByZXRhaW5pbmcgZGV0YWNoZWQgZG9tIG5vZGVzXG4gICAgICBjMi5wYXRjaEZsYWcgIT09IC0xKSB7XG4gICAgICAgIGMyLmVsID0gYzEuZWw7XG4gICAgICB9XG4gICAgICBpZiAoYzIudHlwZSA9PT0gQ29tbWVudCAmJiAhYzIuZWwpIHtcbiAgICAgICAgYzIuZWwgPSBjMS5lbDtcbiAgICAgIH1cbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgIGMyLmVsICYmIChjMi5lbC5fX3Zub2RlID0gYzIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2V0U2VxdWVuY2UoYXJyKSB7XG4gIGNvbnN0IHAgPSBhcnIuc2xpY2UoKTtcbiAgY29uc3QgcmVzdWx0ID0gWzBdO1xuICBsZXQgaSwgaiwgdSwgdiwgYztcbiAgY29uc3QgbGVuID0gYXJyLmxlbmd0aDtcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY29uc3QgYXJySSA9IGFycltpXTtcbiAgICBpZiAoYXJySSAhPT0gMCkge1xuICAgICAgaiA9IHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV07XG4gICAgICBpZiAoYXJyW2pdIDwgYXJySSkge1xuICAgICAgICBwW2ldID0gajtcbiAgICAgICAgcmVzdWx0LnB1c2goaSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdSA9IDA7XG4gICAgICB2ID0gcmVzdWx0Lmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAodSA8IHYpIHtcbiAgICAgICAgYyA9IHUgKyB2ID4+IDE7XG4gICAgICAgIGlmIChhcnJbcmVzdWx0W2NdXSA8IGFyckkpIHtcbiAgICAgICAgICB1ID0gYyArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdiA9IGM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChhcnJJIDwgYXJyW3Jlc3VsdFt1XV0pIHtcbiAgICAgICAgaWYgKHUgPiAwKSB7XG4gICAgICAgICAgcFtpXSA9IHJlc3VsdFt1IC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0W3VdID0gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdSA9IHJlc3VsdC5sZW5ndGg7XG4gIHYgPSByZXN1bHRbdSAtIDFdO1xuICB3aGlsZSAodS0tID4gMCkge1xuICAgIHJlc3VsdFt1XSA9IHY7XG4gICAgdiA9IHBbdl07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGxvY2F0ZU5vbkh5ZHJhdGVkQXN5bmNSb290KGluc3RhbmNlKSB7XG4gIGNvbnN0IHN1YkNvbXBvbmVudCA9IGluc3RhbmNlLnN1YlRyZWUuY29tcG9uZW50O1xuICBpZiAoc3ViQ29tcG9uZW50KSB7XG4gICAgaWYgKHN1YkNvbXBvbmVudC5hc3luY0RlcCAmJiAhc3ViQ29tcG9uZW50LmFzeW5jUmVzb2x2ZWQpIHtcbiAgICAgIHJldHVybiBzdWJDb21wb25lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBsb2NhdGVOb25IeWRyYXRlZEFzeW5jUm9vdChzdWJDb21wb25lbnQpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gaW52YWxpZGF0ZU1vdW50KGhvb2tzKSB7XG4gIGlmIChob29rcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspXG4gICAgICBob29rc1tpXS5mbGFncyB8PSA4O1xuICB9XG59XG5cbmNvbnN0IHNzckNvbnRleHRLZXkgPSBTeW1ib2wuZm9yKFwidi1zY3hcIik7XG5jb25zdCB1c2VTU1JDb250ZXh0ID0gKCkgPT4ge1xuICB7XG4gICAgY29uc3QgY3R4ID0gaW5qZWN0KHNzckNvbnRleHRLZXkpO1xuICAgIGlmICghY3R4KSB7XG4gICAgICAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHdhcm4kMShcbiAgICAgICAgYFNlcnZlciByZW5kZXJpbmcgY29udGV4dCBub3QgcHJvdmlkZWQuIE1ha2Ugc3VyZSB0byBvbmx5IGNhbGwgdXNlU1NSQ29udGV4dCgpIGNvbmRpdGlvbmFsbHkgaW4gdGhlIHNlcnZlciBidWlsZC5gXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gY3R4O1xuICB9XG59O1xuXG5mdW5jdGlvbiB3YXRjaEVmZmVjdChlZmZlY3QsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGRvV2F0Y2goZWZmZWN0LCBudWxsLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHdhdGNoUG9zdEVmZmVjdChlZmZlY3QsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGRvV2F0Y2goXG4gICAgZWZmZWN0LFxuICAgIG51bGwsXG4gICAgISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSA/IGV4dGVuZCh7fSwgb3B0aW9ucywgeyBmbHVzaDogXCJwb3N0XCIgfSkgOiB7IGZsdXNoOiBcInBvc3RcIiB9XG4gICk7XG59XG5mdW5jdGlvbiB3YXRjaFN5bmNFZmZlY3QoZWZmZWN0LCBvcHRpb25zKSB7XG4gIHJldHVybiBkb1dhdGNoKFxuICAgIGVmZmVjdCxcbiAgICBudWxsLFxuICAgICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyBleHRlbmQoe30sIG9wdGlvbnMsIHsgZmx1c2g6IFwic3luY1wiIH0pIDogeyBmbHVzaDogXCJzeW5jXCIgfVxuICApO1xufVxuZnVuY3Rpb24gd2F0Y2goc291cmNlLCBjYiwgb3B0aW9ucykge1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAhaXNGdW5jdGlvbihjYikpIHtcbiAgICB3YXJuJDEoXG4gICAgICBgXFxgd2F0Y2goZm4sIG9wdGlvbnM/KVxcYCBzaWduYXR1cmUgaGFzIGJlZW4gbW92ZWQgdG8gYSBzZXBhcmF0ZSBBUEkuIFVzZSBcXGB3YXRjaEVmZmVjdChmbiwgb3B0aW9ucz8pXFxgIGluc3RlYWQuIFxcYHdhdGNoXFxgIG5vdyBvbmx5IHN1cHBvcnRzIFxcYHdhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnM/KSBzaWduYXR1cmUuYFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGRvV2F0Y2goc291cmNlLCBjYiwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBkb1dhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnMgPSBFTVBUWV9PQkopIHtcbiAgY29uc3QgeyBpbW1lZGlhdGUsIGRlZXAsIGZsdXNoLCBvbmNlIH0gPSBvcHRpb25zO1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAhY2IpIHtcbiAgICBpZiAoaW1tZWRpYXRlICE9PSB2b2lkIDApIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYHdhdGNoKCkgXCJpbW1lZGlhdGVcIiBvcHRpb24gaXMgb25seSByZXNwZWN0ZWQgd2hlbiB1c2luZyB0aGUgd2F0Y2goc291cmNlLCBjYWxsYmFjaywgb3B0aW9ucz8pIHNpZ25hdHVyZS5gXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZGVlcCAhPT0gdm9pZCAwKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIGB3YXRjaCgpIFwiZGVlcFwiIG9wdGlvbiBpcyBvbmx5IHJlc3BlY3RlZCB3aGVuIHVzaW5nIHRoZSB3YXRjaChzb3VyY2UsIGNhbGxiYWNrLCBvcHRpb25zPykgc2lnbmF0dXJlLmBcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChvbmNlICE9PSB2b2lkIDApIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYHdhdGNoKCkgXCJvbmNlXCIgb3B0aW9uIGlzIG9ubHkgcmVzcGVjdGVkIHdoZW4gdXNpbmcgdGhlIHdhdGNoKHNvdXJjZSwgY2FsbGJhY2ssIG9wdGlvbnM/KSBzaWduYXR1cmUuYFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgYmFzZVdhdGNoT3B0aW9ucyA9IGV4dGVuZCh7fSwgb3B0aW9ucyk7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSBiYXNlV2F0Y2hPcHRpb25zLm9uV2FybiA9IHdhcm4kMTtcbiAgY29uc3QgcnVuc0ltbWVkaWF0ZWx5ID0gY2IgJiYgaW1tZWRpYXRlIHx8ICFjYiAmJiBmbHVzaCAhPT0gXCJwb3N0XCI7XG4gIGxldCBzc3JDbGVhbnVwO1xuICBpZiAoaXNJblNTUkNvbXBvbmVudFNldHVwKSB7XG4gICAgaWYgKGZsdXNoID09PSBcInN5bmNcIikge1xuICAgICAgY29uc3QgY3R4ID0gdXNlU1NSQ29udGV4dCgpO1xuICAgICAgc3NyQ2xlYW51cCA9IGN0eC5fX3dhdGNoZXJIYW5kbGVzIHx8IChjdHguX193YXRjaGVySGFuZGxlcyA9IFtdKTtcbiAgICB9IGVsc2UgaWYgKCFydW5zSW1tZWRpYXRlbHkpIHtcbiAgICAgIGNvbnN0IHdhdGNoU3RvcEhhbmRsZSA9ICgpID0+IHtcbiAgICAgIH07XG4gICAgICB3YXRjaFN0b3BIYW5kbGUuc3RvcCA9IE5PT1A7XG4gICAgICB3YXRjaFN0b3BIYW5kbGUucmVzdW1lID0gTk9PUDtcbiAgICAgIHdhdGNoU3RvcEhhbmRsZS5wYXVzZSA9IE5PT1A7XG4gICAgICByZXR1cm4gd2F0Y2hTdG9wSGFuZGxlO1xuICAgIH1cbiAgfVxuICBjb25zdCBpbnN0YW5jZSA9IGN1cnJlbnRJbnN0YW5jZTtcbiAgYmFzZVdhdGNoT3B0aW9ucy5jYWxsID0gKGZuLCB0eXBlLCBhcmdzKSA9PiBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhmbiwgaW5zdGFuY2UsIHR5cGUsIGFyZ3MpO1xuICBsZXQgaXNQcmUgPSBmYWxzZTtcbiAgaWYgKGZsdXNoID09PSBcInBvc3RcIikge1xuICAgIGJhc2VXYXRjaE9wdGlvbnMuc2NoZWR1bGVyID0gKGpvYikgPT4ge1xuICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KGpvYiwgaW5zdGFuY2UgJiYgaW5zdGFuY2Uuc3VzcGVuc2UpO1xuICAgIH07XG4gIH0gZWxzZSBpZiAoZmx1c2ggIT09IFwic3luY1wiKSB7XG4gICAgaXNQcmUgPSB0cnVlO1xuICAgIGJhc2VXYXRjaE9wdGlvbnMuc2NoZWR1bGVyID0gKGpvYiwgaXNGaXJzdFJ1bikgPT4ge1xuICAgICAgaWYgKGlzRmlyc3RSdW4pIHtcbiAgICAgICAgam9iKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUpvYihqb2IpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgYmFzZVdhdGNoT3B0aW9ucy5hdWdtZW50Sm9iID0gKGpvYikgPT4ge1xuICAgIGlmIChjYikge1xuICAgICAgam9iLmZsYWdzIHw9IDQ7XG4gICAgfVxuICAgIGlmIChpc1ByZSkge1xuICAgICAgam9iLmZsYWdzIHw9IDI7XG4gICAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgICAgam9iLmlkID0gaW5zdGFuY2UudWlkO1xuICAgICAgICBqb2IuaSA9IGluc3RhbmNlO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3Qgd2F0Y2hIYW5kbGUgPSB3YXRjaCQxKHNvdXJjZSwgY2IsIGJhc2VXYXRjaE9wdGlvbnMpO1xuICBpZiAoaXNJblNTUkNvbXBvbmVudFNldHVwKSB7XG4gICAgaWYgKHNzckNsZWFudXApIHtcbiAgICAgIHNzckNsZWFudXAucHVzaCh3YXRjaEhhbmRsZSk7XG4gICAgfSBlbHNlIGlmIChydW5zSW1tZWRpYXRlbHkpIHtcbiAgICAgIHdhdGNoSGFuZGxlKCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB3YXRjaEhhbmRsZTtcbn1cbmZ1bmN0aW9uIGluc3RhbmNlV2F0Y2goc291cmNlLCB2YWx1ZSwgb3B0aW9ucykge1xuICBjb25zdCBwdWJsaWNUaGlzID0gdGhpcy5wcm94eTtcbiAgY29uc3QgZ2V0dGVyID0gaXNTdHJpbmcoc291cmNlKSA/IHNvdXJjZS5pbmNsdWRlcyhcIi5cIikgPyBjcmVhdGVQYXRoR2V0dGVyKHB1YmxpY1RoaXMsIHNvdXJjZSkgOiAoKSA9PiBwdWJsaWNUaGlzW3NvdXJjZV0gOiBzb3VyY2UuYmluZChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKTtcbiAgbGV0IGNiO1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICBjYiA9IHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIGNiID0gdmFsdWUuaGFuZGxlcjtcbiAgICBvcHRpb25zID0gdmFsdWU7XG4gIH1cbiAgY29uc3QgcmVzZXQgPSBzZXRDdXJyZW50SW5zdGFuY2UodGhpcyk7XG4gIGNvbnN0IHJlcyA9IGRvV2F0Y2goZ2V0dGVyLCBjYi5iaW5kKHB1YmxpY1RoaXMpLCBvcHRpb25zKTtcbiAgcmVzZXQoKTtcbiAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGhHZXR0ZXIoY3R4LCBwYXRoKSB7XG4gIGNvbnN0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi5cIik7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgbGV0IGN1ciA9IGN0eDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aCAmJiBjdXI7IGkrKykge1xuICAgICAgY3VyID0gY3VyW3NlZ21lbnRzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIGN1cjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXNlTW9kZWwocHJvcHMsIG5hbWUsIG9wdGlvbnMgPSBFTVBUWV9PQkopIHtcbiAgY29uc3QgaSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAhaSkge1xuICAgIHdhcm4kMShgdXNlTW9kZWwoKSBjYWxsZWQgd2l0aG91dCBhY3RpdmUgaW5zdGFuY2UuYCk7XG4gICAgcmV0dXJuIHJlZigpO1xuICB9XG4gIGNvbnN0IGNhbWVsaXplZE5hbWUgPSBjYW1lbGl6ZShuYW1lKTtcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgIWkucHJvcHNPcHRpb25zWzBdW2NhbWVsaXplZE5hbWVdKSB7XG4gICAgd2FybiQxKGB1c2VNb2RlbCgpIGNhbGxlZCB3aXRoIHByb3AgXCIke25hbWV9XCIgd2hpY2ggaXMgbm90IGRlY2xhcmVkLmApO1xuICAgIHJldHVybiByZWYoKTtcbiAgfVxuICBjb25zdCBoeXBoZW5hdGVkTmFtZSA9IGh5cGhlbmF0ZShuYW1lKTtcbiAgY29uc3QgbW9kaWZpZXJzID0gZ2V0TW9kZWxNb2RpZmllcnMocHJvcHMsIGNhbWVsaXplZE5hbWUpO1xuICBjb25zdCByZXMgPSBjdXN0b21SZWYoKHRyYWNrLCB0cmlnZ2VyKSA9PiB7XG4gICAgbGV0IGxvY2FsVmFsdWU7XG4gICAgbGV0IHByZXZTZXRWYWx1ZSA9IEVNUFRZX09CSjtcbiAgICBsZXQgcHJldkVtaXR0ZWRWYWx1ZTtcbiAgICB3YXRjaFN5bmNFZmZlY3QoKCkgPT4ge1xuICAgICAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbY2FtZWxpemVkTmFtZV07XG4gICAgICBpZiAoaGFzQ2hhbmdlZChsb2NhbFZhbHVlLCBwcm9wVmFsdWUpKSB7XG4gICAgICAgIGxvY2FsVmFsdWUgPSBwcm9wVmFsdWU7XG4gICAgICAgIHRyaWdnZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0KCkge1xuICAgICAgICB0cmFjaygpO1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5nZXQgPyBvcHRpb25zLmdldChsb2NhbFZhbHVlKSA6IGxvY2FsVmFsdWU7XG4gICAgICB9LFxuICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGVtaXR0ZWRWYWx1ZSA9IG9wdGlvbnMuc2V0ID8gb3B0aW9ucy5zZXQodmFsdWUpIDogdmFsdWU7XG4gICAgICAgIGlmICghaGFzQ2hhbmdlZChlbWl0dGVkVmFsdWUsIGxvY2FsVmFsdWUpICYmICEocHJldlNldFZhbHVlICE9PSBFTVBUWV9PQkogJiYgaGFzQ2hhbmdlZCh2YWx1ZSwgcHJldlNldFZhbHVlKSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmF3UHJvcHMgPSBpLnZub2RlLnByb3BzO1xuICAgICAgICBpZiAoIShyYXdQcm9wcyAmJiAvLyBjaGVjayBpZiBwYXJlbnQgaGFzIHBhc3NlZCB2LW1vZGVsXG4gICAgICAgIChuYW1lIGluIHJhd1Byb3BzIHx8IGNhbWVsaXplZE5hbWUgaW4gcmF3UHJvcHMgfHwgaHlwaGVuYXRlZE5hbWUgaW4gcmF3UHJvcHMpICYmIChgb25VcGRhdGU6JHtuYW1lfWAgaW4gcmF3UHJvcHMgfHwgYG9uVXBkYXRlOiR7Y2FtZWxpemVkTmFtZX1gIGluIHJhd1Byb3BzIHx8IGBvblVwZGF0ZToke2h5cGhlbmF0ZWROYW1lfWAgaW4gcmF3UHJvcHMpKSkge1xuICAgICAgICAgIGxvY2FsVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICB0cmlnZ2VyKCk7XG4gICAgICAgIH1cbiAgICAgICAgaS5lbWl0KGB1cGRhdGU6JHtuYW1lfWAsIGVtaXR0ZWRWYWx1ZSk7XG4gICAgICAgIGlmIChoYXNDaGFuZ2VkKHZhbHVlLCBlbWl0dGVkVmFsdWUpICYmIGhhc0NoYW5nZWQodmFsdWUsIHByZXZTZXRWYWx1ZSkgJiYgIWhhc0NoYW5nZWQoZW1pdHRlZFZhbHVlLCBwcmV2RW1pdHRlZFZhbHVlKSkge1xuICAgICAgICAgIHRyaWdnZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBwcmV2U2V0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcHJldkVtaXR0ZWRWYWx1ZSA9IGVtaXR0ZWRWYWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbiAgcmVzW1N5bWJvbC5pdGVyYXRvcl0gPSAoKSA9PiB7XG4gICAgbGV0IGkyID0gMDtcbiAgICByZXR1cm4ge1xuICAgICAgbmV4dCgpIHtcbiAgICAgICAgaWYgKGkyIDwgMikge1xuICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBpMisrID8gbW9kaWZpZXJzIHx8IEVNUFRZX09CSiA6IHJlcywgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICByZXR1cm4gcmVzO1xufVxuY29uc3QgZ2V0TW9kZWxNb2RpZmllcnMgPSAocHJvcHMsIG1vZGVsTmFtZSkgPT4ge1xuICByZXR1cm4gbW9kZWxOYW1lID09PSBcIm1vZGVsVmFsdWVcIiB8fCBtb2RlbE5hbWUgPT09IFwibW9kZWwtdmFsdWVcIiA/IHByb3BzLm1vZGVsTW9kaWZpZXJzIDogcHJvcHNbYCR7bW9kZWxOYW1lfU1vZGlmaWVyc2BdIHx8IHByb3BzW2Ake2NhbWVsaXplKG1vZGVsTmFtZSl9TW9kaWZpZXJzYF0gfHwgcHJvcHNbYCR7aHlwaGVuYXRlKG1vZGVsTmFtZSl9TW9kaWZpZXJzYF07XG59O1xuXG5mdW5jdGlvbiBlbWl0KGluc3RhbmNlLCBldmVudCwgLi4ucmF3QXJncykge1xuICBpZiAoaW5zdGFuY2UuaXNVbm1vdW50ZWQpIHJldHVybjtcbiAgY29uc3QgcHJvcHMgPSBpbnN0YW5jZS52bm9kZS5wcm9wcyB8fCBFTVBUWV9PQko7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgY29uc3Qge1xuICAgICAgZW1pdHNPcHRpb25zLFxuICAgICAgcHJvcHNPcHRpb25zOiBbcHJvcHNPcHRpb25zXVxuICAgIH0gPSBpbnN0YW5jZTtcbiAgICBpZiAoZW1pdHNPcHRpb25zKSB7XG4gICAgICBpZiAoIShldmVudCBpbiBlbWl0c09wdGlvbnMpICYmIHRydWUpIHtcbiAgICAgICAgaWYgKCFwcm9wc09wdGlvbnMgfHwgISh0b0hhbmRsZXJLZXkoY2FtZWxpemUoZXZlbnQpKSBpbiBwcm9wc09wdGlvbnMpKSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgYENvbXBvbmVudCBlbWl0dGVkIGV2ZW50IFwiJHtldmVudH1cIiBidXQgaXQgaXMgbmVpdGhlciBkZWNsYXJlZCBpbiB0aGUgZW1pdHMgb3B0aW9uIG5vciBhcyBhbiBcIiR7dG9IYW5kbGVyS2V5KGNhbWVsaXplKGV2ZW50KSl9XCIgcHJvcC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgdmFsaWRhdG9yID0gZW1pdHNPcHRpb25zW2V2ZW50XTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsaWRhdG9yKSkge1xuICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSB2YWxpZGF0b3IoLi4ucmF3QXJncyk7XG4gICAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAgIGBJbnZhbGlkIGV2ZW50IGFyZ3VtZW50czogZXZlbnQgdmFsaWRhdGlvbiBmYWlsZWQgZm9yIGV2ZW50IFwiJHtldmVudH1cIi5gXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBsZXQgYXJncyA9IHJhd0FyZ3M7XG4gIGNvbnN0IGlzTW9kZWxMaXN0ZW5lciA9IGV2ZW50LnN0YXJ0c1dpdGgoXCJ1cGRhdGU6XCIpO1xuICBjb25zdCBtb2RpZmllcnMgPSBpc01vZGVsTGlzdGVuZXIgJiYgZ2V0TW9kZWxNb2RpZmllcnMocHJvcHMsIGV2ZW50LnNsaWNlKDcpKTtcbiAgaWYgKG1vZGlmaWVycykge1xuICAgIGlmIChtb2RpZmllcnMudHJpbSkge1xuICAgICAgYXJncyA9IHJhd0FyZ3MubWFwKChhKSA9PiBpc1N0cmluZyhhKSA/IGEudHJpbSgpIDogYSk7XG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMubnVtYmVyKSB7XG4gICAgICBhcmdzID0gcmF3QXJncy5tYXAobG9vc2VUb051bWJlcik7XG4gICAgfVxuICB9XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgIGRldnRvb2xzQ29tcG9uZW50RW1pdChpbnN0YW5jZSwgZXZlbnQsIGFyZ3MpO1xuICB9XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgY29uc3QgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgcHJvcHNbdG9IYW5kbGVyS2V5KGxvd2VyQ2FzZUV2ZW50KV0pIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYEV2ZW50IFwiJHtsb3dlckNhc2VFdmVudH1cIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCAke2Zvcm1hdENvbXBvbmVudE5hbWUoXG4gICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgaW5zdGFuY2UudHlwZVxuICAgICAgICApfSBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXCIke2V2ZW50fVwiLiBOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCB5b3UgY2Fubm90IHVzZSB2LW9uIHRvIGxpc3RlbiB0byBjYW1lbENhc2UgZXZlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIHRlbXBsYXRlcy4gWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXCIke2h5cGhlbmF0ZShcbiAgICAgICAgICBldmVudFxuICAgICAgICApfVwiIGluc3RlYWQgb2YgXCIke2V2ZW50fVwiLmBcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGxldCBoYW5kbGVyTmFtZTtcbiAgbGV0IGhhbmRsZXIgPSBwcm9wc1toYW5kbGVyTmFtZSA9IHRvSGFuZGxlcktleShldmVudCldIHx8IC8vIGFsc28gdHJ5IGNhbWVsQ2FzZSBldmVudCBoYW5kbGVyICgjMjI0OSlcbiAgcHJvcHNbaGFuZGxlck5hbWUgPSB0b0hhbmRsZXJLZXkoY2FtZWxpemUoZXZlbnQpKV07XG4gIGlmICghaGFuZGxlciAmJiBpc01vZGVsTGlzdGVuZXIpIHtcbiAgICBoYW5kbGVyID0gcHJvcHNbaGFuZGxlck5hbWUgPSB0b0hhbmRsZXJLZXkoaHlwaGVuYXRlKGV2ZW50KSldO1xuICB9XG4gIGlmIChoYW5kbGVyKSB7XG4gICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoXG4gICAgICBoYW5kbGVyLFxuICAgICAgaW5zdGFuY2UsXG4gICAgICA2LFxuICAgICAgYXJnc1xuICAgICk7XG4gIH1cbiAgY29uc3Qgb25jZUhhbmRsZXIgPSBwcm9wc1toYW5kbGVyTmFtZSArIGBPbmNlYF07XG4gIGlmIChvbmNlSGFuZGxlcikge1xuICAgIGlmICghaW5zdGFuY2UuZW1pdHRlZCkge1xuICAgICAgaW5zdGFuY2UuZW1pdHRlZCA9IHt9O1xuICAgIH0gZWxzZSBpZiAoaW5zdGFuY2UuZW1pdHRlZFtoYW5kbGVyTmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW5zdGFuY2UuZW1pdHRlZFtoYW5kbGVyTmFtZV0gPSB0cnVlO1xuICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKFxuICAgICAgb25jZUhhbmRsZXIsXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIDYsXG4gICAgICBhcmdzXG4gICAgKTtcbiAgfVxufVxuY29uc3QgbWl4aW5FbWl0c0NhY2hlID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBub3JtYWxpemVFbWl0c09wdGlvbnMoY29tcCwgYXBwQ29udGV4dCwgYXNNaXhpbiA9IGZhbHNlKSB7XG4gIGNvbnN0IGNhY2hlID0gX19WVUVfT1BUSU9OU19BUElfXyAmJiBhc01peGluID8gbWl4aW5FbWl0c0NhY2hlIDogYXBwQ29udGV4dC5lbWl0c0NhY2hlO1xuICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoY29tcCk7XG4gIGlmIChjYWNoZWQgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiBjYWNoZWQ7XG4gIH1cbiAgY29uc3QgcmF3ID0gY29tcC5lbWl0cztcbiAgbGV0IG5vcm1hbGl6ZWQgPSB7fTtcbiAgbGV0IGhhc0V4dGVuZHMgPSBmYWxzZTtcbiAgaWYgKF9fVlVFX09QVElPTlNfQVBJX18gJiYgIWlzRnVuY3Rpb24oY29tcCkpIHtcbiAgICBjb25zdCBleHRlbmRFbWl0cyA9IChyYXcyKSA9PiB7XG4gICAgICBjb25zdCBub3JtYWxpemVkRnJvbUV4dGVuZCA9IG5vcm1hbGl6ZUVtaXRzT3B0aW9ucyhyYXcyLCBhcHBDb250ZXh0LCB0cnVlKTtcbiAgICAgIGlmIChub3JtYWxpemVkRnJvbUV4dGVuZCkge1xuICAgICAgICBoYXNFeHRlbmRzID0gdHJ1ZTtcbiAgICAgICAgZXh0ZW5kKG5vcm1hbGl6ZWQsIG5vcm1hbGl6ZWRGcm9tRXh0ZW5kKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmICghYXNNaXhpbiAmJiBhcHBDb250ZXh0Lm1peGlucy5sZW5ndGgpIHtcbiAgICAgIGFwcENvbnRleHQubWl4aW5zLmZvckVhY2goZXh0ZW5kRW1pdHMpO1xuICAgIH1cbiAgICBpZiAoY29tcC5leHRlbmRzKSB7XG4gICAgICBleHRlbmRFbWl0cyhjb21wLmV4dGVuZHMpO1xuICAgIH1cbiAgICBpZiAoY29tcC5taXhpbnMpIHtcbiAgICAgIGNvbXAubWl4aW5zLmZvckVhY2goZXh0ZW5kRW1pdHMpO1xuICAgIH1cbiAgfVxuICBpZiAoIXJhdyAmJiAhaGFzRXh0ZW5kcykge1xuICAgIGlmIChpc09iamVjdChjb21wKSkge1xuICAgICAgY2FjaGUuc2V0KGNvbXAsIG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoaXNBcnJheShyYXcpKSB7XG4gICAgcmF3LmZvckVhY2goKGtleSkgPT4gbm9ybWFsaXplZFtrZXldID0gbnVsbCk7XG4gIH0gZWxzZSB7XG4gICAgZXh0ZW5kKG5vcm1hbGl6ZWQsIHJhdyk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KGNvbXApKSB7XG4gICAgY2FjaGUuc2V0KGNvbXAsIG5vcm1hbGl6ZWQpO1xuICB9XG4gIHJldHVybiBub3JtYWxpemVkO1xufVxuZnVuY3Rpb24gaXNFbWl0TGlzdGVuZXIob3B0aW9ucywga2V5KSB7XG4gIGlmICghb3B0aW9ucyB8fCAhaXNPbihrZXkpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGtleSA9IGtleS5zbGljZSgyKS5yZXBsYWNlKC9PbmNlJC8sIFwiXCIpO1xuICByZXR1cm4gaGFzT3duKG9wdGlvbnMsIGtleVswXS50b0xvd2VyQ2FzZSgpICsga2V5LnNsaWNlKDEpKSB8fCBoYXNPd24ob3B0aW9ucywgaHlwaGVuYXRlKGtleSkpIHx8IGhhc093bihvcHRpb25zLCBrZXkpO1xufVxuXG5sZXQgYWNjZXNzZWRBdHRycyA9IGZhbHNlO1xuZnVuY3Rpb24gbWFya0F0dHJzQWNjZXNzZWQoKSB7XG4gIGFjY2Vzc2VkQXR0cnMgPSB0cnVlO1xufVxuZnVuY3Rpb24gcmVuZGVyQ29tcG9uZW50Um9vdChpbnN0YW5jZSkge1xuICBjb25zdCB7XG4gICAgdHlwZTogQ29tcG9uZW50LFxuICAgIHZub2RlLFxuICAgIHByb3h5LFxuICAgIHdpdGhQcm94eSxcbiAgICBwcm9wc09wdGlvbnM6IFtwcm9wc09wdGlvbnNdLFxuICAgIHNsb3RzLFxuICAgIGF0dHJzLFxuICAgIGVtaXQsXG4gICAgcmVuZGVyLFxuICAgIHJlbmRlckNhY2hlLFxuICAgIHByb3BzLFxuICAgIGRhdGEsXG4gICAgc2V0dXBTdGF0ZSxcbiAgICBjdHgsXG4gICAgaW5oZXJpdEF0dHJzXG4gIH0gPSBpbnN0YW5jZTtcbiAgY29uc3QgcHJldiA9IHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShpbnN0YW5jZSk7XG4gIGxldCByZXN1bHQ7XG4gIGxldCBmYWxsdGhyb3VnaEF0dHJzO1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIGFjY2Vzc2VkQXR0cnMgPSBmYWxzZTtcbiAgfVxuICB0cnkge1xuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA0KSB7XG4gICAgICBjb25zdCBwcm94eVRvVXNlID0gd2l0aFByb3h5IHx8IHByb3h5O1xuICAgICAgY29uc3QgdGhpc1Byb3h5ID0gISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBzZXR1cFN0YXRlLl9faXNTY3JpcHRTZXR1cCA/IG5ldyBQcm94eShwcm94eVRvVXNlLCB7XG4gICAgICAgIGdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBgUHJvcGVydHkgJyR7U3RyaW5nKFxuICAgICAgICAgICAgICBrZXlcbiAgICAgICAgICAgICl9JyB3YXMgYWNjZXNzZWQgdmlhICd0aGlzJy4gQXZvaWQgdXNpbmcgJ3RoaXMnIGluIHRlbXBsYXRlcy5gXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCBrZXksIHJlY2VpdmVyKTtcbiAgICAgICAgfVxuICAgICAgfSkgOiBwcm94eVRvVXNlO1xuICAgICAgcmVzdWx0ID0gbm9ybWFsaXplVk5vZGUoXG4gICAgICAgIHJlbmRlci5jYWxsKFxuICAgICAgICAgIHRoaXNQcm94eSxcbiAgICAgICAgICBwcm94eVRvVXNlLFxuICAgICAgICAgIHJlbmRlckNhY2hlLFxuICAgICAgICAgICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyBzaGFsbG93UmVhZG9ubHkocHJvcHMpIDogcHJvcHMsXG4gICAgICAgICAgc2V0dXBTdGF0ZSxcbiAgICAgICAgICBkYXRhLFxuICAgICAgICAgIGN0eFxuICAgICAgICApXG4gICAgICApO1xuICAgICAgZmFsbHRocm91Z2hBdHRycyA9IGF0dHJzO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCByZW5kZXIyID0gQ29tcG9uZW50O1xuICAgICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgYXR0cnMgPT09IHByb3BzKSB7XG4gICAgICAgIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBub3JtYWxpemVWTm9kZShcbiAgICAgICAgcmVuZGVyMi5sZW5ndGggPiAxID8gcmVuZGVyMihcbiAgICAgICAgICAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpID8gc2hhbGxvd1JlYWRvbmx5KHByb3BzKSA6IHByb3BzLFxuICAgICAgICAgICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyB7XG4gICAgICAgICAgICBnZXQgYXR0cnMoKSB7XG4gICAgICAgICAgICAgIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XG4gICAgICAgICAgICAgIHJldHVybiBzaGFsbG93UmVhZG9ubHkoYXR0cnMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNsb3RzLFxuICAgICAgICAgICAgZW1pdFxuICAgICAgICAgIH0gOiB7IGF0dHJzLCBzbG90cywgZW1pdCB9XG4gICAgICAgICkgOiByZW5kZXIyKFxuICAgICAgICAgICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyBzaGFsbG93UmVhZG9ubHkocHJvcHMpIDogcHJvcHMsXG4gICAgICAgICAgbnVsbFxuICAgICAgICApXG4gICAgICApO1xuICAgICAgZmFsbHRocm91Z2hBdHRycyA9IENvbXBvbmVudC5wcm9wcyA/IGF0dHJzIDogZ2V0RnVuY3Rpb25hbEZhbGx0aHJvdWdoKGF0dHJzKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGJsb2NrU3RhY2subGVuZ3RoID0gMDtcbiAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCAxKTtcbiAgICByZXN1bHQgPSBjcmVhdGVWTm9kZShDb21tZW50KTtcbiAgfVxuICBsZXQgcm9vdCA9IHJlc3VsdDtcbiAgbGV0IHNldFJvb3QgPSB2b2lkIDA7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHJlc3VsdC5wYXRjaEZsYWcgPiAwICYmIHJlc3VsdC5wYXRjaEZsYWcgJiAyMDQ4KSB7XG4gICAgW3Jvb3QsIHNldFJvb3RdID0gZ2V0Q2hpbGRSb290KHJlc3VsdCk7XG4gIH1cbiAgaWYgKGZhbGx0aHJvdWdoQXR0cnMgJiYgaW5oZXJpdEF0dHJzICE9PSBmYWxzZSkge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhmYWxsdGhyb3VnaEF0dHJzKTtcbiAgICBjb25zdCB7IHNoYXBlRmxhZyB9ID0gcm9vdDtcbiAgICBpZiAoa2V5cy5sZW5ndGgpIHtcbiAgICAgIGlmIChzaGFwZUZsYWcgJiAoMSB8IDYpKSB7XG4gICAgICAgIGlmIChwcm9wc09wdGlvbnMgJiYga2V5cy5zb21lKGlzTW9kZWxMaXN0ZW5lcikpIHtcbiAgICAgICAgICBmYWxsdGhyb3VnaEF0dHJzID0gZmlsdGVyTW9kZWxMaXN0ZW5lcnMoXG4gICAgICAgICAgICBmYWxsdGhyb3VnaEF0dHJzLFxuICAgICAgICAgICAgcHJvcHNPcHRpb25zXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByb290ID0gY2xvbmVWTm9kZShyb290LCBmYWxsdGhyb3VnaEF0dHJzLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgIWFjY2Vzc2VkQXR0cnMgJiYgcm9vdC50eXBlICE9PSBDb21tZW50KSB7XG4gICAgICAgIGNvbnN0IGFsbEF0dHJzID0gT2JqZWN0LmtleXMoYXR0cnMpO1xuICAgICAgICBjb25zdCBldmVudEF0dHJzID0gW107XG4gICAgICAgIGNvbnN0IGV4dHJhQXR0cnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhbGxBdHRycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBrZXkgPSBhbGxBdHRyc1tpXTtcbiAgICAgICAgICBpZiAoaXNPbihrZXkpKSB7XG4gICAgICAgICAgICBpZiAoIWlzTW9kZWxMaXN0ZW5lcihrZXkpKSB7XG4gICAgICAgICAgICAgIGV2ZW50QXR0cnMucHVzaChrZXlbMl0udG9Mb3dlckNhc2UoKSArIGtleS5zbGljZSgzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4dHJhQXR0cnMucHVzaChrZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZXh0cmFBdHRycy5sZW5ndGgpIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBgRXh0cmFuZW91cyBub24tcHJvcHMgYXR0cmlidXRlcyAoJHtleHRyYUF0dHJzLmpvaW4oXCIsIFwiKX0pIHdlcmUgcGFzc2VkIHRvIGNvbXBvbmVudCBidXQgY291bGQgbm90IGJlIGF1dG9tYXRpY2FsbHkgaW5oZXJpdGVkIGJlY2F1c2UgY29tcG9uZW50IHJlbmRlcnMgZnJhZ21lbnQgb3IgdGV4dCBvciB0ZWxlcG9ydCByb290IG5vZGVzLmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudEF0dHJzLmxlbmd0aCkge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIGBFeHRyYW5lb3VzIG5vbi1lbWl0cyBldmVudCBsaXN0ZW5lcnMgKCR7ZXZlbnRBdHRycy5qb2luKFwiLCBcIil9KSB3ZXJlIHBhc3NlZCB0byBjb21wb25lbnQgYnV0IGNvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGluaGVyaXRlZCBiZWNhdXNlIGNvbXBvbmVudCByZW5kZXJzIGZyYWdtZW50IG9yIHRleHQgcm9vdCBub2Rlcy4gSWYgdGhlIGxpc3RlbmVyIGlzIGludGVuZGVkIHRvIGJlIGEgY29tcG9uZW50IGN1c3RvbSBldmVudCBsaXN0ZW5lciBvbmx5LCBkZWNsYXJlIGl0IHVzaW5nIHRoZSBcImVtaXRzXCIgb3B0aW9uLmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICh2bm9kZS5kaXJzKSB7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgIWlzRWxlbWVudFJvb3Qocm9vdCkpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYFJ1bnRpbWUgZGlyZWN0aXZlIHVzZWQgb24gY29tcG9uZW50IHdpdGggbm9uLWVsZW1lbnQgcm9vdCBub2RlLiBUaGUgZGlyZWN0aXZlcyB3aWxsIG5vdCBmdW5jdGlvbiBhcyBpbnRlbmRlZC5gXG4gICAgICApO1xuICAgIH1cbiAgICByb290ID0gY2xvbmVWTm9kZShyb290LCBudWxsLCBmYWxzZSwgdHJ1ZSk7XG4gICAgcm9vdC5kaXJzID0gcm9vdC5kaXJzID8gcm9vdC5kaXJzLmNvbmNhdCh2bm9kZS5kaXJzKSA6IHZub2RlLmRpcnM7XG4gIH1cbiAgaWYgKHZub2RlLnRyYW5zaXRpb24pIHtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAhaXNFbGVtZW50Um9vdChyb290KSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgQ29tcG9uZW50IGluc2lkZSA8VHJhbnNpdGlvbj4gcmVuZGVycyBub24tZWxlbWVudCByb290IG5vZGUgdGhhdCBjYW5ub3QgYmUgYW5pbWF0ZWQuYFxuICAgICAgKTtcbiAgICB9XG4gICAgc2V0VHJhbnNpdGlvbkhvb2tzKHJvb3QsIHZub2RlLnRyYW5zaXRpb24pO1xuICB9XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHNldFJvb3QpIHtcbiAgICBzZXRSb290KHJvb3QpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IHJvb3Q7XG4gIH1cbiAgc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlKHByZXYpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuY29uc3QgZ2V0Q2hpbGRSb290ID0gKHZub2RlKSA9PiB7XG4gIGNvbnN0IHJhd0NoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gIGNvbnN0IGR5bmFtaWNDaGlsZHJlbiA9IHZub2RlLmR5bmFtaWNDaGlsZHJlbjtcbiAgY29uc3QgY2hpbGRSb290ID0gZmlsdGVyU2luZ2xlUm9vdChyYXdDaGlsZHJlbiwgZmFsc2UpO1xuICBpZiAoIWNoaWxkUm9vdCkge1xuICAgIHJldHVybiBbdm5vZGUsIHZvaWQgMF07XG4gIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBjaGlsZFJvb3QucGF0Y2hGbGFnID4gMCAmJiBjaGlsZFJvb3QucGF0Y2hGbGFnICYgMjA0OCkge1xuICAgIHJldHVybiBnZXRDaGlsZFJvb3QoY2hpbGRSb290KTtcbiAgfVxuICBjb25zdCBpbmRleCA9IHJhd0NoaWxkcmVuLmluZGV4T2YoY2hpbGRSb290KTtcbiAgY29uc3QgZHluYW1pY0luZGV4ID0gZHluYW1pY0NoaWxkcmVuID8gZHluYW1pY0NoaWxkcmVuLmluZGV4T2YoY2hpbGRSb290KSA6IC0xO1xuICBjb25zdCBzZXRSb290ID0gKHVwZGF0ZWRSb290KSA9PiB7XG4gICAgcmF3Q2hpbGRyZW5baW5kZXhdID0gdXBkYXRlZFJvb3Q7XG4gICAgaWYgKGR5bmFtaWNDaGlsZHJlbikge1xuICAgICAgaWYgKGR5bmFtaWNJbmRleCA+IC0xKSB7XG4gICAgICAgIGR5bmFtaWNDaGlsZHJlbltkeW5hbWljSW5kZXhdID0gdXBkYXRlZFJvb3Q7XG4gICAgICB9IGVsc2UgaWYgKHVwZGF0ZWRSb290LnBhdGNoRmxhZyA+IDApIHtcbiAgICAgICAgdm5vZGUuZHluYW1pY0NoaWxkcmVuID0gWy4uLmR5bmFtaWNDaGlsZHJlbiwgdXBkYXRlZFJvb3RdO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIFtub3JtYWxpemVWTm9kZShjaGlsZFJvb3QpLCBzZXRSb290XTtcbn07XG5mdW5jdGlvbiBmaWx0ZXJTaW5nbGVSb290KGNoaWxkcmVuLCByZWN1cnNlID0gdHJ1ZSkge1xuICBsZXQgc2luZ2xlUm9vdDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgaWYgKGlzVk5vZGUoY2hpbGQpKSB7XG4gICAgICBpZiAoY2hpbGQudHlwZSAhPT0gQ29tbWVudCB8fCBjaGlsZC5jaGlsZHJlbiA9PT0gXCJ2LWlmXCIpIHtcbiAgICAgICAgaWYgKHNpbmdsZVJvb3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2luZ2xlUm9vdCA9IGNoaWxkO1xuICAgICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHJlY3Vyc2UgJiYgc2luZ2xlUm9vdC5wYXRjaEZsYWcgPiAwICYmIHNpbmdsZVJvb3QucGF0Y2hGbGFnICYgMjA0OCkge1xuICAgICAgICAgICAgcmV0dXJuIGZpbHRlclNpbmdsZVJvb3Qoc2luZ2xlUm9vdC5jaGlsZHJlbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNpbmdsZVJvb3Q7XG59XG5jb25zdCBnZXRGdW5jdGlvbmFsRmFsbHRocm91Z2ggPSAoYXR0cnMpID0+IHtcbiAgbGV0IHJlcztcbiAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcbiAgICBpZiAoa2V5ID09PSBcImNsYXNzXCIgfHwga2V5ID09PSBcInN0eWxlXCIgfHwgaXNPbihrZXkpKSB7XG4gICAgICAocmVzIHx8IChyZXMgPSB7fSkpW2tleV0gPSBhdHRyc1trZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufTtcbmNvbnN0IGZpbHRlck1vZGVsTGlzdGVuZXJzID0gKGF0dHJzLCBwcm9wcykgPT4ge1xuICBjb25zdCByZXMgPSB7fTtcbiAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcbiAgICBpZiAoIWlzTW9kZWxMaXN0ZW5lcihrZXkpIHx8ICEoa2V5LnNsaWNlKDkpIGluIHByb3BzKSkge1xuICAgICAgcmVzW2tleV0gPSBhdHRyc1trZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufTtcbmNvbnN0IGlzRWxlbWVudFJvb3QgPSAodm5vZGUpID0+IHtcbiAgcmV0dXJuIHZub2RlLnNoYXBlRmxhZyAmICg2IHwgMSkgfHwgdm5vZGUudHlwZSA9PT0gQ29tbWVudDtcbn07XG5mdW5jdGlvbiBzaG91bGRVcGRhdGVDb21wb25lbnQocHJldlZOb2RlLCBuZXh0Vk5vZGUsIG9wdGltaXplZCkge1xuICBjb25zdCB7IHByb3BzOiBwcmV2UHJvcHMsIGNoaWxkcmVuOiBwcmV2Q2hpbGRyZW4sIGNvbXBvbmVudCB9ID0gcHJldlZOb2RlO1xuICBjb25zdCB7IHByb3BzOiBuZXh0UHJvcHMsIGNoaWxkcmVuOiBuZXh0Q2hpbGRyZW4sIHBhdGNoRmxhZyB9ID0gbmV4dFZOb2RlO1xuICBjb25zdCBlbWl0cyA9IGNvbXBvbmVudC5lbWl0c09wdGlvbnM7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIChwcmV2Q2hpbGRyZW4gfHwgbmV4dENoaWxkcmVuKSAmJiBpc0htclVwZGF0aW5nKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKG5leHRWTm9kZS5kaXJzIHx8IG5leHRWTm9kZS50cmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKG9wdGltaXplZCAmJiBwYXRjaEZsYWcgPj0gMCkge1xuICAgIGlmIChwYXRjaEZsYWcgJiAxMDI0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHBhdGNoRmxhZyAmIDE2KSB7XG4gICAgICBpZiAoIXByZXZQcm9wcykge1xuICAgICAgICByZXR1cm4gISFuZXh0UHJvcHM7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzUHJvcHNDaGFuZ2VkKHByZXZQcm9wcywgbmV4dFByb3BzLCBlbWl0cyk7XG4gICAgfSBlbHNlIGlmIChwYXRjaEZsYWcgJiA4KSB7XG4gICAgICBjb25zdCBkeW5hbWljUHJvcHMgPSBuZXh0Vk5vZGUuZHluYW1pY1Byb3BzO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkeW5hbWljUHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0gZHluYW1pY1Byb3BzW2ldO1xuICAgICAgICBpZiAobmV4dFByb3BzW2tleV0gIT09IHByZXZQcm9wc1trZXldICYmICFpc0VtaXRMaXN0ZW5lcihlbWl0cywga2V5KSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChwcmV2Q2hpbGRyZW4gfHwgbmV4dENoaWxkcmVuKSB7XG4gICAgICBpZiAoIW5leHRDaGlsZHJlbiB8fCAhbmV4dENoaWxkcmVuLiRzdGFibGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcmV2UHJvcHMgPT09IG5leHRQcm9wcykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIXByZXZQcm9wcykge1xuICAgICAgcmV0dXJuICEhbmV4dFByb3BzO1xuICAgIH1cbiAgICBpZiAoIW5leHRQcm9wcykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBoYXNQcm9wc0NoYW5nZWQocHJldlByb3BzLCBuZXh0UHJvcHMsIGVtaXRzKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBoYXNQcm9wc0NoYW5nZWQocHJldlByb3BzLCBuZXh0UHJvcHMsIGVtaXRzT3B0aW9ucykge1xuICBjb25zdCBuZXh0S2V5cyA9IE9iamVjdC5rZXlzKG5leHRQcm9wcyk7XG4gIGlmIChuZXh0S2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHByZXZQcm9wcykubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXh0S2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGtleSA9IG5leHRLZXlzW2ldO1xuICAgIGlmIChuZXh0UHJvcHNba2V5XSAhPT0gcHJldlByb3BzW2tleV0gJiYgIWlzRW1pdExpc3RlbmVyKGVtaXRzT3B0aW9ucywga2V5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUhPQ0hvc3RFbCh7IHZub2RlLCBwYXJlbnQgfSwgZWwpIHtcbiAgd2hpbGUgKHBhcmVudCkge1xuICAgIGNvbnN0IHJvb3QgPSBwYXJlbnQuc3ViVHJlZTtcbiAgICBpZiAocm9vdC5zdXNwZW5zZSAmJiByb290LnN1c3BlbnNlLmFjdGl2ZUJyYW5jaCA9PT0gdm5vZGUpIHtcbiAgICAgIHJvb3QuZWwgPSB2bm9kZS5lbDtcbiAgICB9XG4gICAgaWYgKHJvb3QgPT09IHZub2RlKSB7XG4gICAgICAodm5vZGUgPSBwYXJlbnQudm5vZGUpLmVsID0gZWw7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgaXNTdXNwZW5zZSA9ICh0eXBlKSA9PiB0eXBlLl9faXNTdXNwZW5zZTtcbmxldCBzdXNwZW5zZUlkID0gMDtcbmNvbnN0IFN1c3BlbnNlSW1wbCA9IHtcbiAgbmFtZTogXCJTdXNwZW5zZVwiLFxuICAvLyBJbiBvcmRlciB0byBtYWtlIFN1c3BlbnNlIHRyZWUtc2hha2FibGUsIHdlIG5lZWQgdG8gYXZvaWQgaW1wb3J0aW5nIGl0XG4gIC8vIGRpcmVjdGx5IGluIHRoZSByZW5kZXJlci4gVGhlIHJlbmRlcmVyIGNoZWNrcyBmb3IgdGhlIF9faXNTdXNwZW5zZSBmbGFnXG4gIC8vIG9uIGEgdm5vZGUncyB0eXBlIGFuZCBjYWxscyB0aGUgYHByb2Nlc3NgIG1ldGhvZCwgcGFzc2luZyBpbiByZW5kZXJlclxuICAvLyBpbnRlcm5hbHMuXG4gIF9faXNTdXNwZW5zZTogdHJ1ZSxcbiAgcHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscykge1xuICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICBtb3VudFN1c3BlbnNlKFxuICAgICAgICBuMixcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBhbmNob3IsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWQsXG4gICAgICAgIHJlbmRlcmVySW50ZXJuYWxzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGFyZW50U3VzcGVuc2UgJiYgcGFyZW50U3VzcGVuc2UuZGVwcyA+IDAgJiYgIW4xLnN1c3BlbnNlLmlzSW5GYWxsYmFjaykge1xuICAgICAgICBuMi5zdXNwZW5zZSA9IG4xLnN1c3BlbnNlO1xuICAgICAgICBuMi5zdXNwZW5zZS52bm9kZSA9IG4yO1xuICAgICAgICBuMi5lbCA9IG4xLmVsO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBwYXRjaFN1c3BlbnNlKFxuICAgICAgICBuMSxcbiAgICAgICAgbjIsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWQsXG4gICAgICAgIHJlbmRlcmVySW50ZXJuYWxzXG4gICAgICApO1xuICAgIH1cbiAgfSxcbiAgaHlkcmF0ZTogaHlkcmF0ZVN1c3BlbnNlLFxuICBub3JtYWxpemU6IG5vcm1hbGl6ZVN1c3BlbnNlQ2hpbGRyZW5cbn07XG5jb25zdCBTdXNwZW5zZSA9IFN1c3BlbnNlSW1wbCA7XG5mdW5jdGlvbiB0cmlnZ2VyRXZlbnQodm5vZGUsIG5hbWUpIHtcbiAgY29uc3QgZXZlbnRMaXN0ZW5lciA9IHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzW25hbWVdO1xuICBpZiAoaXNGdW5jdGlvbihldmVudExpc3RlbmVyKSkge1xuICAgIGV2ZW50TGlzdGVuZXIoKTtcbiAgfVxufVxuZnVuY3Rpb24gbW91bnRTdXNwZW5zZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG5hbWVzcGFjZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzKSB7XG4gIGNvbnN0IHtcbiAgICBwOiBwYXRjaCxcbiAgICBvOiB7IGNyZWF0ZUVsZW1lbnQgfVxuICB9ID0gcmVuZGVyZXJJbnRlcm5hbHM7XG4gIGNvbnN0IGhpZGRlbkNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IHN1c3BlbnNlID0gdm5vZGUuc3VzcGVuc2UgPSBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KFxuICAgIHZub2RlLFxuICAgIHBhcmVudFN1c3BlbnNlLFxuICAgIHBhcmVudENvbXBvbmVudCxcbiAgICBjb250YWluZXIsXG4gICAgaGlkZGVuQ29udGFpbmVyLFxuICAgIGFuY2hvcixcbiAgICBuYW1lc3BhY2UsXG4gICAgc2xvdFNjb3BlSWRzLFxuICAgIG9wdGltaXplZCxcbiAgICByZW5kZXJlckludGVybmFsc1xuICApO1xuICBwYXRjaChcbiAgICBudWxsLFxuICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSB2bm9kZS5zc0NvbnRlbnQsXG4gICAgaGlkZGVuQ29udGFpbmVyLFxuICAgIG51bGwsXG4gICAgcGFyZW50Q29tcG9uZW50LFxuICAgIHN1c3BlbnNlLFxuICAgIG5hbWVzcGFjZSxcbiAgICBzbG90U2NvcGVJZHNcbiAgKTtcbiAgaWYgKHN1c3BlbnNlLmRlcHMgPiAwKSB7XG4gICAgdHJpZ2dlckV2ZW50KHZub2RlLCBcIm9uUGVuZGluZ1wiKTtcbiAgICB0cmlnZ2VyRXZlbnQodm5vZGUsIFwib25GYWxsYmFja1wiKTtcbiAgICBwYXRjaChcbiAgICAgIG51bGwsXG4gICAgICB2bm9kZS5zc0ZhbGxiYWNrLFxuICAgICAgY29udGFpbmVyLFxuICAgICAgYW5jaG9yLFxuICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgbnVsbCxcbiAgICAgIC8vIGZhbGxiYWNrIHRyZWUgd2lsbCBub3QgaGF2ZSBzdXNwZW5zZSBjb250ZXh0XG4gICAgICBuYW1lc3BhY2UsXG4gICAgICBzbG90U2NvcGVJZHNcbiAgICApO1xuICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgdm5vZGUuc3NGYWxsYmFjayk7XG4gIH0gZWxzZSB7XG4gICAgc3VzcGVuc2UucmVzb2x2ZShmYWxzZSwgdHJ1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHBhdGNoU3VzcGVuc2UobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCB7IHA6IHBhdGNoLCB1bTogdW5tb3VudCwgbzogeyBjcmVhdGVFbGVtZW50IH0gfSkge1xuICBjb25zdCBzdXNwZW5zZSA9IG4yLnN1c3BlbnNlID0gbjEuc3VzcGVuc2U7XG4gIHN1c3BlbnNlLnZub2RlID0gbjI7XG4gIG4yLmVsID0gbjEuZWw7XG4gIGNvbnN0IG5ld0JyYW5jaCA9IG4yLnNzQ29udGVudDtcbiAgY29uc3QgbmV3RmFsbGJhY2sgPSBuMi5zc0ZhbGxiYWNrO1xuICBjb25zdCB7IGFjdGl2ZUJyYW5jaCwgcGVuZGluZ0JyYW5jaCwgaXNJbkZhbGxiYWNrLCBpc0h5ZHJhdGluZyB9ID0gc3VzcGVuc2U7XG4gIGlmIChwZW5kaW5nQnJhbmNoKSB7XG4gICAgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IG5ld0JyYW5jaDtcbiAgICBpZiAoaXNTYW1lVk5vZGVUeXBlKHBlbmRpbmdCcmFuY2gsIG5ld0JyYW5jaCkpIHtcbiAgICAgIHBhdGNoKFxuICAgICAgICBwZW5kaW5nQnJhbmNoLFxuICAgICAgICBuZXdCcmFuY2gsXG4gICAgICAgIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lcixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBzdXNwZW5zZSxcbiAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgIG9wdGltaXplZFxuICAgICAgKTtcbiAgICAgIGlmIChzdXNwZW5zZS5kZXBzIDw9IDApIHtcbiAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIGlmIChpc0luRmFsbGJhY2spIHtcbiAgICAgICAgaWYgKCFpc0h5ZHJhdGluZykge1xuICAgICAgICAgIHBhdGNoKFxuICAgICAgICAgICAgYWN0aXZlQnJhbmNoLFxuICAgICAgICAgICAgbmV3RmFsbGJhY2ssXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcbiAgICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICAgICk7XG4gICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBuZXdGYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3VzcGVuc2UucGVuZGluZ0lkID0gc3VzcGVuc2VJZCsrO1xuICAgICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICAgIHN1c3BlbnNlLmlzSHlkcmF0aW5nID0gZmFsc2U7XG4gICAgICAgIHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCA9IHBlbmRpbmdCcmFuY2g7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1bm1vdW50KHBlbmRpbmdCcmFuY2gsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UpO1xuICAgICAgfVxuICAgICAgc3VzcGVuc2UuZGVwcyA9IDA7XG4gICAgICBzdXNwZW5zZS5lZmZlY3RzLmxlbmd0aCA9IDA7XG4gICAgICBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgaWYgKGlzSW5GYWxsYmFjaykge1xuICAgICAgICBwYXRjaChcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIG5ld0JyYW5jaCxcbiAgICAgICAgICBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgc3VzcGVuc2UsXG4gICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHN1c3BlbnNlLmRlcHMgPD0gMCkge1xuICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXRjaChcbiAgICAgICAgICAgIGFjdGl2ZUJyYW5jaCxcbiAgICAgICAgICAgIG5ld0ZhbGxiYWNrLFxuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIC8vIGZhbGxiYWNrIHRyZWUgd2lsbCBub3QgaGF2ZSBzdXNwZW5zZSBjb250ZXh0XG4gICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICApO1xuICAgICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgbmV3RmFsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFjdGl2ZUJyYW5jaCAmJiBpc1NhbWVWTm9kZVR5cGUoYWN0aXZlQnJhbmNoLCBuZXdCcmFuY2gpKSB7XG4gICAgICAgIHBhdGNoKFxuICAgICAgICAgIGFjdGl2ZUJyYW5jaCxcbiAgICAgICAgICBuZXdCcmFuY2gsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgc3VzcGVuc2UsXG4gICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgKTtcbiAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSh0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhdGNoKFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgbmV3QnJhbmNoLFxuICAgICAgICAgIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lcixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBzdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XG4gICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChhY3RpdmVCcmFuY2ggJiYgaXNTYW1lVk5vZGVUeXBlKGFjdGl2ZUJyYW5jaCwgbmV3QnJhbmNoKSkge1xuICAgICAgcGF0Y2goXG4gICAgICAgIGFjdGl2ZUJyYW5jaCxcbiAgICAgICAgbmV3QnJhbmNoLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGFuY2hvcixcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBzdXNwZW5zZSxcbiAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgIG9wdGltaXplZFxuICAgICAgKTtcbiAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgbmV3QnJhbmNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJpZ2dlckV2ZW50KG4yLCBcIm9uUGVuZGluZ1wiKTtcbiAgICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSBuZXdCcmFuY2g7XG4gICAgICBpZiAobmV3QnJhbmNoLnNoYXBlRmxhZyAmIDUxMikge1xuICAgICAgICBzdXNwZW5zZS5wZW5kaW5nSWQgPSBuZXdCcmFuY2guY29tcG9uZW50LnN1c3BlbnNlSWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdXNwZW5zZS5wZW5kaW5nSWQgPSBzdXNwZW5zZUlkKys7XG4gICAgICB9XG4gICAgICBwYXRjaChcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbmV3QnJhbmNoLFxuICAgICAgICBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgc3VzcGVuc2UsXG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICk7XG4gICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XG4gICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHsgdGltZW91dCwgcGVuZGluZ0lkIH0gPSBzdXNwZW5zZTtcbiAgICAgICAgaWYgKHRpbWVvdXQgPiAwKSB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoc3VzcGVuc2UucGVuZGluZ0lkID09PSBwZW5kaW5nSWQpIHtcbiAgICAgICAgICAgICAgc3VzcGVuc2UuZmFsbGJhY2sobmV3RmFsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRpbWVvdXQgPT09IDApIHtcbiAgICAgICAgICBzdXNwZW5zZS5mYWxsYmFjayhuZXdGYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmxldCBoYXNXYXJuZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIGNyZWF0ZVN1c3BlbnNlQm91bmRhcnkodm5vZGUsIHBhcmVudFN1c3BlbnNlLCBwYXJlbnRDb21wb25lbnQsIGNvbnRhaW5lciwgaGlkZGVuQ29udGFpbmVyLCBhbmNob3IsIG5hbWVzcGFjZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCBpc0h5ZHJhdGluZyA9IGZhbHNlKSB7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHRydWUgJiYgIWhhc1dhcm5lZCkge1xuICAgIGhhc1dhcm5lZCA9IHRydWU7XG4gICAgY29uc29sZVtjb25zb2xlLmluZm8gPyBcImluZm9cIiA6IFwibG9nXCJdKFxuICAgICAgYDxTdXNwZW5zZT4gaXMgYW4gZXhwZXJpbWVudGFsIGZlYXR1cmUgYW5kIGl0cyBBUEkgd2lsbCBsaWtlbHkgY2hhbmdlLmBcbiAgICApO1xuICB9XG4gIGNvbnN0IHtcbiAgICBwOiBwYXRjaCxcbiAgICBtOiBtb3ZlLFxuICAgIHVtOiB1bm1vdW50LFxuICAgIG46IG5leHQsXG4gICAgbzogeyBwYXJlbnROb2RlLCByZW1vdmUgfVxuICB9ID0gcmVuZGVyZXJJbnRlcm5hbHM7XG4gIGxldCBwYXJlbnRTdXNwZW5zZUlkO1xuICBjb25zdCBpc1N1c3BlbnNpYmxlID0gaXNWTm9kZVN1c3BlbnNpYmxlKHZub2RlKTtcbiAgaWYgKGlzU3VzcGVuc2libGUpIHtcbiAgICBpZiAocGFyZW50U3VzcGVuc2UgJiYgcGFyZW50U3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xuICAgICAgcGFyZW50U3VzcGVuc2VJZCA9IHBhcmVudFN1c3BlbnNlLnBlbmRpbmdJZDtcbiAgICAgIHBhcmVudFN1c3BlbnNlLmRlcHMrKztcbiAgICB9XG4gIH1cbiAgY29uc3QgdGltZW91dCA9IHZub2RlLnByb3BzID8gdG9OdW1iZXIodm5vZGUucHJvcHMudGltZW91dCkgOiB2b2lkIDA7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgYXNzZXJ0TnVtYmVyKHRpbWVvdXQsIGBTdXNwZW5zZSB0aW1lb3V0YCk7XG4gIH1cbiAgY29uc3QgaW5pdGlhbEFuY2hvciA9IGFuY2hvcjtcbiAgY29uc3Qgc3VzcGVuc2UgPSB7XG4gICAgdm5vZGUsXG4gICAgcGFyZW50OiBwYXJlbnRTdXNwZW5zZSxcbiAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgbmFtZXNwYWNlLFxuICAgIGNvbnRhaW5lcixcbiAgICBoaWRkZW5Db250YWluZXIsXG4gICAgZGVwczogMCxcbiAgICBwZW5kaW5nSWQ6IHN1c3BlbnNlSWQrKyxcbiAgICB0aW1lb3V0OiB0eXBlb2YgdGltZW91dCA9PT0gXCJudW1iZXJcIiA/IHRpbWVvdXQgOiAtMSxcbiAgICBhY3RpdmVCcmFuY2g6IG51bGwsXG4gICAgcGVuZGluZ0JyYW5jaDogbnVsbCxcbiAgICBpc0luRmFsbGJhY2s6ICFpc0h5ZHJhdGluZyxcbiAgICBpc0h5ZHJhdGluZyxcbiAgICBpc1VubW91bnRlZDogZmFsc2UsXG4gICAgZWZmZWN0czogW10sXG4gICAgcmVzb2x2ZShyZXN1bWUgPSBmYWxzZSwgc3luYyA9IGZhbHNlKSB7XG4gICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICBpZiAoIXJlc3VtZSAmJiAhc3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBzdXNwZW5zZS5yZXNvbHZlKCkgaXMgY2FsbGVkIHdpdGhvdXQgYSBwZW5kaW5nIGJyYW5jaC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3VzcGVuc2UuaXNVbm1vdW50ZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgc3VzcGVuc2UucmVzb2x2ZSgpIGlzIGNhbGxlZCBvbiBhbiBhbHJlYWR5IHVubW91bnRlZCBzdXNwZW5zZSBib3VuZGFyeS5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3Qge1xuICAgICAgICB2bm9kZTogdm5vZGUyLFxuICAgICAgICBhY3RpdmVCcmFuY2gsXG4gICAgICAgIHBlbmRpbmdCcmFuY2gsXG4gICAgICAgIHBlbmRpbmdJZCxcbiAgICAgICAgZWZmZWN0cyxcbiAgICAgICAgcGFyZW50Q29tcG9uZW50OiBwYXJlbnRDb21wb25lbnQyLFxuICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lcjJcbiAgICAgIH0gPSBzdXNwZW5zZTtcbiAgICAgIGxldCBkZWxheUVudGVyID0gZmFsc2U7XG4gICAgICBpZiAoc3VzcGVuc2UuaXNIeWRyYXRpbmcpIHtcbiAgICAgICAgc3VzcGVuc2UuaXNIeWRyYXRpbmcgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoIXJlc3VtZSkge1xuICAgICAgICBkZWxheUVudGVyID0gYWN0aXZlQnJhbmNoICYmIHBlbmRpbmdCcmFuY2gudHJhbnNpdGlvbiAmJiBwZW5kaW5nQnJhbmNoLnRyYW5zaXRpb24ubW9kZSA9PT0gXCJvdXQtaW5cIjtcbiAgICAgICAgaWYgKGRlbGF5RW50ZXIpIHtcbiAgICAgICAgICBhY3RpdmVCcmFuY2gudHJhbnNpdGlvbi5hZnRlckxlYXZlID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBlbmRpbmdJZCA9PT0gc3VzcGVuc2UucGVuZGluZ0lkKSB7XG4gICAgICAgICAgICAgIG1vdmUoXG4gICAgICAgICAgICAgICAgcGVuZGluZ0JyYW5jaCxcbiAgICAgICAgICAgICAgICBjb250YWluZXIyLFxuICAgICAgICAgICAgICAgIGFuY2hvciA9PT0gaW5pdGlhbEFuY2hvciA/IG5leHQoYWN0aXZlQnJhbmNoKSA6IGFuY2hvcixcbiAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHF1ZXVlUG9zdEZsdXNoQ2IoZWZmZWN0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aXZlQnJhbmNoKSB7XG4gICAgICAgICAgaWYgKHBhcmVudE5vZGUoYWN0aXZlQnJhbmNoLmVsKSA9PT0gY29udGFpbmVyMikge1xuICAgICAgICAgICAgYW5jaG9yID0gbmV4dChhY3RpdmVCcmFuY2gpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB1bm1vdW50KGFjdGl2ZUJyYW5jaCwgcGFyZW50Q29tcG9uZW50Miwgc3VzcGVuc2UsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVsYXlFbnRlcikge1xuICAgICAgICAgIG1vdmUocGVuZGluZ0JyYW5jaCwgY29udGFpbmVyMiwgYW5jaG9yLCAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBwZW5kaW5nQnJhbmNoKTtcbiAgICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSBudWxsO1xuICAgICAgc3VzcGVuc2UuaXNJbkZhbGxiYWNrID0gZmFsc2U7XG4gICAgICBsZXQgcGFyZW50ID0gc3VzcGVuc2UucGFyZW50O1xuICAgICAgbGV0IGhhc1VucmVzb2x2ZWRBbmNlc3RvciA9IGZhbHNlO1xuICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICBpZiAocGFyZW50LnBlbmRpbmdCcmFuY2gpIHtcbiAgICAgICAgICBwYXJlbnQuZWZmZWN0cy5wdXNoKC4uLmVmZmVjdHMpO1xuICAgICAgICAgIGhhc1VucmVzb2x2ZWRBbmNlc3RvciA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmICghaGFzVW5yZXNvbHZlZEFuY2VzdG9yICYmICFkZWxheUVudGVyKSB7XG4gICAgICAgIHF1ZXVlUG9zdEZsdXNoQ2IoZWZmZWN0cyk7XG4gICAgICB9XG4gICAgICBzdXNwZW5zZS5lZmZlY3RzID0gW107XG4gICAgICBpZiAoaXNTdXNwZW5zaWJsZSkge1xuICAgICAgICBpZiAocGFyZW50U3VzcGVuc2UgJiYgcGFyZW50U3VzcGVuc2UucGVuZGluZ0JyYW5jaCAmJiBwYXJlbnRTdXNwZW5zZUlkID09PSBwYXJlbnRTdXNwZW5zZS5wZW5kaW5nSWQpIHtcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZS5kZXBzLS07XG4gICAgICAgICAgaWYgKHBhcmVudFN1c3BlbnNlLmRlcHMgPT09IDAgJiYgIXN5bmMpIHtcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRyaWdnZXJFdmVudCh2bm9kZTIsIFwib25SZXNvbHZlXCIpO1xuICAgIH0sXG4gICAgZmFsbGJhY2soZmFsbGJhY2tWTm9kZSkge1xuICAgICAgaWYgKCFzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgdm5vZGU6IHZub2RlMiwgYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQ6IHBhcmVudENvbXBvbmVudDIsIGNvbnRhaW5lcjogY29udGFpbmVyMiwgbmFtZXNwYWNlOiBuYW1lc3BhY2UyIH0gPSBzdXNwZW5zZTtcbiAgICAgIHRyaWdnZXJFdmVudCh2bm9kZTIsIFwib25GYWxsYmFja1wiKTtcbiAgICAgIGNvbnN0IGFuY2hvcjIgPSBuZXh0KGFjdGl2ZUJyYW5jaCk7XG4gICAgICBjb25zdCBtb3VudEZhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgICBpZiAoIXN1c3BlbnNlLmlzSW5GYWxsYmFjaykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBwYXRjaChcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIGZhbGxiYWNrVk5vZGUsXG4gICAgICAgICAgY29udGFpbmVyMixcbiAgICAgICAgICBhbmNob3IyLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudDIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxuICAgICAgICAgIG5hbWVzcGFjZTIsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIGZhbGxiYWNrVk5vZGUpO1xuICAgICAgfTtcbiAgICAgIGNvbnN0IGRlbGF5RW50ZXIgPSBmYWxsYmFja1ZOb2RlLnRyYW5zaXRpb24gJiYgZmFsbGJhY2tWTm9kZS50cmFuc2l0aW9uLm1vZGUgPT09IFwib3V0LWluXCI7XG4gICAgICBpZiAoZGVsYXlFbnRlcikge1xuICAgICAgICBhY3RpdmVCcmFuY2gudHJhbnNpdGlvbi5hZnRlckxlYXZlID0gbW91bnRGYWxsYmFjaztcbiAgICAgIH1cbiAgICAgIHN1c3BlbnNlLmlzSW5GYWxsYmFjayA9IHRydWU7XG4gICAgICB1bm1vdW50KFxuICAgICAgICBhY3RpdmVCcmFuY2gsXG4gICAgICAgIHBhcmVudENvbXBvbmVudDIsXG4gICAgICAgIG51bGwsXG4gICAgICAgIC8vIG5vIHN1c3BlbnNlIHNvIHVubW91bnQgaG9va3MgZmlyZSBub3dcbiAgICAgICAgdHJ1ZVxuICAgICAgICAvLyBzaG91bGRSZW1vdmVcbiAgICAgICk7XG4gICAgICBpZiAoIWRlbGF5RW50ZXIpIHtcbiAgICAgICAgbW91bnRGYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbW92ZShjb250YWluZXIyLCBhbmNob3IyLCB0eXBlKSB7XG4gICAgICBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggJiYgbW92ZShzdXNwZW5zZS5hY3RpdmVCcmFuY2gsIGNvbnRhaW5lcjIsIGFuY2hvcjIsIHR5cGUpO1xuICAgICAgc3VzcGVuc2UuY29udGFpbmVyID0gY29udGFpbmVyMjtcbiAgICB9LFxuICAgIG5leHQoKSB7XG4gICAgICByZXR1cm4gc3VzcGVuc2UuYWN0aXZlQnJhbmNoICYmIG5leHQoc3VzcGVuc2UuYWN0aXZlQnJhbmNoKTtcbiAgICB9LFxuICAgIHJlZ2lzdGVyRGVwKGluc3RhbmNlLCBzZXR1cFJlbmRlckVmZmVjdCwgb3B0aW1pemVkMikge1xuICAgICAgY29uc3QgaXNJblBlbmRpbmdTdXNwZW5zZSA9ICEhc3VzcGVuc2UucGVuZGluZ0JyYW5jaDtcbiAgICAgIGlmIChpc0luUGVuZGluZ1N1c3BlbnNlKSB7XG4gICAgICAgIHN1c3BlbnNlLmRlcHMrKztcbiAgICAgIH1cbiAgICAgIGNvbnN0IGh5ZHJhdGVkRWwgPSBpbnN0YW5jZS52bm9kZS5lbDtcbiAgICAgIGluc3RhbmNlLmFzeW5jRGVwLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgMCk7XG4gICAgICB9KS50aGVuKChhc3luY1NldHVwUmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChpbnN0YW5jZS5pc1VubW91bnRlZCB8fCBzdXNwZW5zZS5pc1VubW91bnRlZCB8fCBzdXNwZW5zZS5wZW5kaW5nSWQgIT09IGluc3RhbmNlLnN1c3BlbnNlSWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2UuYXN5bmNSZXNvbHZlZCA9IHRydWU7XG4gICAgICAgIGNvbnN0IHsgdm5vZGU6IHZub2RlMiB9ID0gaW5zdGFuY2U7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KHZub2RlMik7XG4gICAgICAgIH1cbiAgICAgICAgaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIGFzeW5jU2V0dXBSZXN1bHQsIGZhbHNlKTtcbiAgICAgICAgaWYgKGh5ZHJhdGVkRWwpIHtcbiAgICAgICAgICB2bm9kZTIuZWwgPSBoeWRyYXRlZEVsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gIWh5ZHJhdGVkRWwgJiYgaW5zdGFuY2Uuc3ViVHJlZS5lbDtcbiAgICAgICAgc2V0dXBSZW5kZXJFZmZlY3QoXG4gICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgdm5vZGUyLFxuICAgICAgICAgIC8vIGNvbXBvbmVudCBtYXkgaGF2ZSBiZWVuIG1vdmVkIGJlZm9yZSByZXNvbHZlLlxuICAgICAgICAgIC8vIGlmIHRoaXMgaXMgbm90IGEgaHlkcmF0aW9uLCBpbnN0YW5jZS5zdWJUcmVlIHdpbGwgYmUgdGhlIGNvbW1lbnRcbiAgICAgICAgICAvLyBwbGFjZWhvbGRlci5cbiAgICAgICAgICBwYXJlbnROb2RlKGh5ZHJhdGVkRWwgfHwgaW5zdGFuY2Uuc3ViVHJlZS5lbCksXG4gICAgICAgICAgLy8gYW5jaG9yIHdpbGwgbm90IGJlIHVzZWQgaWYgdGhpcyBpcyBoeWRyYXRpb24sIHNvIG9ubHkgbmVlZCB0b1xuICAgICAgICAgIC8vIGNvbnNpZGVyIHRoZSBjb21tZW50IHBsYWNlaG9sZGVyIGNhc2UuXG4gICAgICAgICAgaHlkcmF0ZWRFbCA/IG51bGwgOiBuZXh0KGluc3RhbmNlLnN1YlRyZWUpLFxuICAgICAgICAgIHN1c3BlbnNlLFxuICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICBvcHRpbWl6ZWQyXG4gICAgICAgICk7XG4gICAgICAgIGlmIChwbGFjZWhvbGRlcikge1xuICAgICAgICAgIHJlbW92ZShwbGFjZWhvbGRlcik7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlSE9DSG9zdEVsKGluc3RhbmNlLCB2bm9kZTIuZWwpO1xuICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSW5QZW5kaW5nU3VzcGVuc2UgJiYgLS1zdXNwZW5zZS5kZXBzID09PSAwKSB7XG4gICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHVubW91bnQocGFyZW50U3VzcGVuc2UyLCBkb1JlbW92ZSkge1xuICAgICAgc3VzcGVuc2UuaXNVbm1vdW50ZWQgPSB0cnVlO1xuICAgICAgaWYgKHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCkge1xuICAgICAgICB1bm1vdW50KFxuICAgICAgICAgIHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UyLFxuICAgICAgICAgIGRvUmVtb3ZlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xuICAgICAgICB1bm1vdW50KFxuICAgICAgICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2gsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHBhcmVudFN1c3BlbnNlMixcbiAgICAgICAgICBkb1JlbW92ZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHN1c3BlbnNlO1xufVxuZnVuY3Rpb24gaHlkcmF0ZVN1c3BlbnNlKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscywgaHlkcmF0ZU5vZGUpIHtcbiAgY29uc3Qgc3VzcGVuc2UgPSB2bm9kZS5zdXNwZW5zZSA9IGNyZWF0ZVN1c3BlbnNlQm91bmRhcnkoXG4gICAgdm5vZGUsXG4gICAgcGFyZW50U3VzcGVuc2UsXG4gICAgcGFyZW50Q29tcG9uZW50LFxuICAgIG5vZGUucGFyZW50Tm9kZSxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcbiAgICBudWxsLFxuICAgIG5hbWVzcGFjZSxcbiAgICBzbG90U2NvcGVJZHMsXG4gICAgb3B0aW1pemVkLFxuICAgIHJlbmRlcmVySW50ZXJuYWxzLFxuICAgIHRydWVcbiAgKTtcbiAgY29uc3QgcmVzdWx0ID0gaHlkcmF0ZU5vZGUoXG4gICAgbm9kZSxcbiAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gdm5vZGUuc3NDb250ZW50LFxuICAgIHBhcmVudENvbXBvbmVudCxcbiAgICBzdXNwZW5zZSxcbiAgICBzbG90U2NvcGVJZHMsXG4gICAgb3B0aW1pemVkXG4gICk7XG4gIGlmIChzdXNwZW5zZS5kZXBzID09PSAwKSB7XG4gICAgc3VzcGVuc2UucmVzb2x2ZShmYWxzZSwgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVN1c3BlbnNlQ2hpbGRyZW4odm5vZGUpIHtcbiAgY29uc3QgeyBzaGFwZUZsYWcsIGNoaWxkcmVuIH0gPSB2bm9kZTtcbiAgY29uc3QgaXNTbG90Q2hpbGRyZW4gPSBzaGFwZUZsYWcgJiAzMjtcbiAgdm5vZGUuc3NDb250ZW50ID0gbm9ybWFsaXplU3VzcGVuc2VTbG90KFxuICAgIGlzU2xvdENoaWxkcmVuID8gY2hpbGRyZW4uZGVmYXVsdCA6IGNoaWxkcmVuXG4gICk7XG4gIHZub2RlLnNzRmFsbGJhY2sgPSBpc1Nsb3RDaGlsZHJlbiA/IG5vcm1hbGl6ZVN1c3BlbnNlU2xvdChjaGlsZHJlbi5mYWxsYmFjaykgOiBjcmVhdGVWTm9kZShDb21tZW50KTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVN1c3BlbnNlU2xvdChzKSB7XG4gIGxldCBibG9jaztcbiAgaWYgKGlzRnVuY3Rpb24ocykpIHtcbiAgICBjb25zdCB0cmFja0Jsb2NrID0gaXNCbG9ja1RyZWVFbmFibGVkICYmIHMuX2M7XG4gICAgaWYgKHRyYWNrQmxvY2spIHtcbiAgICAgIHMuX2QgPSBmYWxzZTtcbiAgICAgIG9wZW5CbG9jaygpO1xuICAgIH1cbiAgICBzID0gcygpO1xuICAgIGlmICh0cmFja0Jsb2NrKSB7XG4gICAgICBzLl9kID0gdHJ1ZTtcbiAgICAgIGJsb2NrID0gY3VycmVudEJsb2NrO1xuICAgICAgY2xvc2VCbG9jaygpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNBcnJheShzKSkge1xuICAgIGNvbnN0IHNpbmdsZUNoaWxkID0gZmlsdGVyU2luZ2xlUm9vdChzKTtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAhc2luZ2xlQ2hpbGQgJiYgcy5maWx0ZXIoKGNoaWxkKSA9PiBjaGlsZCAhPT0gTlVMTF9EWU5BTUlDX0NPTVBPTkVOVCkubGVuZ3RoID4gMCkge1xuICAgICAgd2FybiQxKGA8U3VzcGVuc2U+IHNsb3RzIGV4cGVjdCBhIHNpbmdsZSByb290IG5vZGUuYCk7XG4gICAgfVxuICAgIHMgPSBzaW5nbGVDaGlsZDtcbiAgfVxuICBzID0gbm9ybWFsaXplVk5vZGUocyk7XG4gIGlmIChibG9jayAmJiAhcy5keW5hbWljQ2hpbGRyZW4pIHtcbiAgICBzLmR5bmFtaWNDaGlsZHJlbiA9IGJsb2NrLmZpbHRlcigoYykgPT4gYyAhPT0gcyk7XG4gIH1cbiAgcmV0dXJuIHM7XG59XG5mdW5jdGlvbiBxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZShmbiwgc3VzcGVuc2UpIHtcbiAgaWYgKHN1c3BlbnNlICYmIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpIHtcbiAgICBpZiAoaXNBcnJheShmbikpIHtcbiAgICAgIHN1c3BlbnNlLmVmZmVjdHMucHVzaCguLi5mbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1c3BlbnNlLmVmZmVjdHMucHVzaChmbik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHF1ZXVlUG9zdEZsdXNoQ2IoZm4pO1xuICB9XG59XG5mdW5jdGlvbiBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIGJyYW5jaCkge1xuICBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggPSBicmFuY2g7XG4gIGNvbnN0IHsgdm5vZGUsIHBhcmVudENvbXBvbmVudCB9ID0gc3VzcGVuc2U7XG4gIGxldCBlbCA9IGJyYW5jaC5lbDtcbiAgd2hpbGUgKCFlbCAmJiBicmFuY2guY29tcG9uZW50KSB7XG4gICAgYnJhbmNoID0gYnJhbmNoLmNvbXBvbmVudC5zdWJUcmVlO1xuICAgIGVsID0gYnJhbmNoLmVsO1xuICB9XG4gIHZub2RlLmVsID0gZWw7XG4gIGlmIChwYXJlbnRDb21wb25lbnQgJiYgcGFyZW50Q29tcG9uZW50LnN1YlRyZWUgPT09IHZub2RlKSB7XG4gICAgcGFyZW50Q29tcG9uZW50LnZub2RlLmVsID0gZWw7XG4gICAgdXBkYXRlSE9DSG9zdEVsKHBhcmVudENvbXBvbmVudCwgZWwpO1xuICB9XG59XG5mdW5jdGlvbiBpc1ZOb2RlU3VzcGVuc2libGUodm5vZGUpIHtcbiAgY29uc3Qgc3VzcGVuc2libGUgPSB2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy5zdXNwZW5zaWJsZTtcbiAgcmV0dXJuIHN1c3BlbnNpYmxlICE9IG51bGwgJiYgc3VzcGVuc2libGUgIT09IGZhbHNlO1xufVxuXG5jb25zdCBGcmFnbWVudCA9IFN5bWJvbC5mb3IoXCJ2LWZndFwiKTtcbmNvbnN0IFRleHQgPSBTeW1ib2wuZm9yKFwidi10eHRcIik7XG5jb25zdCBDb21tZW50ID0gU3ltYm9sLmZvcihcInYtY210XCIpO1xuY29uc3QgU3RhdGljID0gU3ltYm9sLmZvcihcInYtc3RjXCIpO1xuY29uc3QgYmxvY2tTdGFjayA9IFtdO1xubGV0IGN1cnJlbnRCbG9jayA9IG51bGw7XG5mdW5jdGlvbiBvcGVuQmxvY2soZGlzYWJsZVRyYWNraW5nID0gZmFsc2UpIHtcbiAgYmxvY2tTdGFjay5wdXNoKGN1cnJlbnRCbG9jayA9IGRpc2FibGVUcmFja2luZyA/IG51bGwgOiBbXSk7XG59XG5mdW5jdGlvbiBjbG9zZUJsb2NrKCkge1xuICBibG9ja1N0YWNrLnBvcCgpO1xuICBjdXJyZW50QmxvY2sgPSBibG9ja1N0YWNrW2Jsb2NrU3RhY2subGVuZ3RoIC0gMV0gfHwgbnVsbDtcbn1cbmxldCBpc0Jsb2NrVHJlZUVuYWJsZWQgPSAxO1xuZnVuY3Rpb24gc2V0QmxvY2tUcmFja2luZyh2YWx1ZSwgaW5WT25jZSA9IGZhbHNlKSB7XG4gIGlzQmxvY2tUcmVlRW5hYmxlZCArPSB2YWx1ZTtcbiAgaWYgKHZhbHVlIDwgMCAmJiBjdXJyZW50QmxvY2sgJiYgaW5WT25jZSkge1xuICAgIGN1cnJlbnRCbG9jay5oYXNPbmNlID0gdHJ1ZTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0dXBCbG9jayh2bm9kZSkge1xuICB2bm9kZS5keW5hbWljQ2hpbGRyZW4gPSBpc0Jsb2NrVHJlZUVuYWJsZWQgPiAwID8gY3VycmVudEJsb2NrIHx8IEVNUFRZX0FSUiA6IG51bGw7XG4gIGNsb3NlQmxvY2soKTtcbiAgaWYgKGlzQmxvY2tUcmVlRW5hYmxlZCA+IDAgJiYgY3VycmVudEJsb2NrKSB7XG4gICAgY3VycmVudEJsb2NrLnB1c2godm5vZGUpO1xuICB9XG4gIHJldHVybiB2bm9kZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRCbG9jayh0eXBlLCBwcm9wcywgY2hpbGRyZW4sIHBhdGNoRmxhZywgZHluYW1pY1Byb3BzLCBzaGFwZUZsYWcpIHtcbiAgcmV0dXJuIHNldHVwQmxvY2soXG4gICAgY3JlYXRlQmFzZVZOb2RlKFxuICAgICAgdHlwZSxcbiAgICAgIHByb3BzLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBwYXRjaEZsYWcsXG4gICAgICBkeW5hbWljUHJvcHMsXG4gICAgICBzaGFwZUZsYWcsXG4gICAgICB0cnVlXG4gICAgKVxuICApO1xufVxuZnVuY3Rpb24gY3JlYXRlQmxvY2sodHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wcykge1xuICByZXR1cm4gc2V0dXBCbG9jayhcbiAgICBjcmVhdGVWTm9kZShcbiAgICAgIHR5cGUsXG4gICAgICBwcm9wcyxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgcGF0Y2hGbGFnLFxuICAgICAgZHluYW1pY1Byb3BzLFxuICAgICAgdHJ1ZVxuICAgIClcbiAgKTtcbn1cbmZ1bmN0aW9uIGlzVk5vZGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID8gdmFsdWUuX192X2lzVk5vZGUgPT09IHRydWUgOiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzU2FtZVZOb2RlVHlwZShuMSwgbjIpIHtcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgbjIuc2hhcGVGbGFnICYgNiAmJiBuMS5jb21wb25lbnQpIHtcbiAgICBjb25zdCBkaXJ0eUluc3RhbmNlcyA9IGhtckRpcnR5Q29tcG9uZW50cy5nZXQobjIudHlwZSk7XG4gICAgaWYgKGRpcnR5SW5zdGFuY2VzICYmIGRpcnR5SW5zdGFuY2VzLmhhcyhuMS5jb21wb25lbnQpKSB7XG4gICAgICBuMS5zaGFwZUZsYWcgJj0gLTI1NztcbiAgICAgIG4yLnNoYXBlRmxhZyAmPSAtNTEzO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbjEudHlwZSA9PT0gbjIudHlwZSAmJiBuMS5rZXkgPT09IG4yLmtleTtcbn1cbmxldCB2bm9kZUFyZ3NUcmFuc2Zvcm1lcjtcbmZ1bmN0aW9uIHRyYW5zZm9ybVZOb2RlQXJncyh0cmFuc2Zvcm1lcikge1xuICB2bm9kZUFyZ3NUcmFuc2Zvcm1lciA9IHRyYW5zZm9ybWVyO1xufVxuY29uc3QgY3JlYXRlVk5vZGVXaXRoQXJnc1RyYW5zZm9ybSA9ICguLi5hcmdzKSA9PiB7XG4gIHJldHVybiBfY3JlYXRlVk5vZGUoXG4gICAgLi4udm5vZGVBcmdzVHJhbnNmb3JtZXIgPyB2bm9kZUFyZ3NUcmFuc2Zvcm1lcihhcmdzLCBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UpIDogYXJnc1xuICApO1xufTtcbmNvbnN0IG5vcm1hbGl6ZUtleSA9ICh7IGtleSB9KSA9PiBrZXkgIT0gbnVsbCA/IGtleSA6IG51bGw7XG5jb25zdCBub3JtYWxpemVSZWYgPSAoe1xuICByZWYsXG4gIHJlZl9rZXksXG4gIHJlZl9mb3Jcbn0pID0+IHtcbiAgaWYgKHR5cGVvZiByZWYgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZWYgPSBcIlwiICsgcmVmO1xuICB9XG4gIHJldHVybiByZWYgIT0gbnVsbCA/IGlzU3RyaW5nKHJlZikgfHwgaXNSZWYocmVmKSB8fCBpc0Z1bmN0aW9uKHJlZikgPyB7IGk6IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSwgcjogcmVmLCBrOiByZWZfa2V5LCBmOiAhIXJlZl9mb3IgfSA6IHJlZiA6IG51bGw7XG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVZOb2RlKHR5cGUsIHByb3BzID0gbnVsbCwgY2hpbGRyZW4gPSBudWxsLCBwYXRjaEZsYWcgPSAwLCBkeW5hbWljUHJvcHMgPSBudWxsLCBzaGFwZUZsYWcgPSB0eXBlID09PSBGcmFnbWVudCA/IDAgOiAxLCBpc0Jsb2NrTm9kZSA9IGZhbHNlLCBuZWVkRnVsbENoaWxkcmVuTm9ybWFsaXphdGlvbiA9IGZhbHNlKSB7XG4gIGNvbnN0IHZub2RlID0ge1xuICAgIF9fdl9pc1ZOb2RlOiB0cnVlLFxuICAgIF9fdl9za2lwOiB0cnVlLFxuICAgIHR5cGUsXG4gICAgcHJvcHMsXG4gICAga2V5OiBwcm9wcyAmJiBub3JtYWxpemVLZXkocHJvcHMpLFxuICAgIHJlZjogcHJvcHMgJiYgbm9ybWFsaXplUmVmKHByb3BzKSxcbiAgICBzY29wZUlkOiBjdXJyZW50U2NvcGVJZCxcbiAgICBzbG90U2NvcGVJZHM6IG51bGwsXG4gICAgY2hpbGRyZW4sXG4gICAgY29tcG9uZW50OiBudWxsLFxuICAgIHN1c3BlbnNlOiBudWxsLFxuICAgIHNzQ29udGVudDogbnVsbCxcbiAgICBzc0ZhbGxiYWNrOiBudWxsLFxuICAgIGRpcnM6IG51bGwsXG4gICAgdHJhbnNpdGlvbjogbnVsbCxcbiAgICBlbDogbnVsbCxcbiAgICBhbmNob3I6IG51bGwsXG4gICAgdGFyZ2V0OiBudWxsLFxuICAgIHRhcmdldFN0YXJ0OiBudWxsLFxuICAgIHRhcmdldEFuY2hvcjogbnVsbCxcbiAgICBzdGF0aWNDb3VudDogMCxcbiAgICBzaGFwZUZsYWcsXG4gICAgcGF0Y2hGbGFnLFxuICAgIGR5bmFtaWNQcm9wcyxcbiAgICBkeW5hbWljQ2hpbGRyZW46IG51bGwsXG4gICAgYXBwQ29udGV4dDogbnVsbCxcbiAgICBjdHg6IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZVxuICB9O1xuICBpZiAobmVlZEZ1bGxDaGlsZHJlbk5vcm1hbGl6YXRpb24pIHtcbiAgICBub3JtYWxpemVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4pO1xuICAgIGlmIChzaGFwZUZsYWcgJiAxMjgpIHtcbiAgICAgIHR5cGUubm9ybWFsaXplKHZub2RlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoY2hpbGRyZW4pIHtcbiAgICB2bm9kZS5zaGFwZUZsYWcgfD0gaXNTdHJpbmcoY2hpbGRyZW4pID8gOCA6IDE2O1xuICB9XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHZub2RlLmtleSAhPT0gdm5vZGUua2V5KSB7XG4gICAgd2FybiQxKGBWTm9kZSBjcmVhdGVkIHdpdGggaW52YWxpZCBrZXkgKE5hTikuIFZOb2RlIHR5cGU6YCwgdm5vZGUudHlwZSk7XG4gIH1cbiAgaWYgKGlzQmxvY2tUcmVlRW5hYmxlZCA+IDAgJiYgLy8gYXZvaWQgYSBibG9jayBub2RlIGZyb20gdHJhY2tpbmcgaXRzZWxmXG4gICFpc0Jsb2NrTm9kZSAmJiAvLyBoYXMgY3VycmVudCBwYXJlbnQgYmxvY2tcbiAgY3VycmVudEJsb2NrICYmIC8vIHByZXNlbmNlIG9mIGEgcGF0Y2ggZmxhZyBpbmRpY2F0ZXMgdGhpcyBub2RlIG5lZWRzIHBhdGNoaW5nIG9uIHVwZGF0ZXMuXG4gIC8vIGNvbXBvbmVudCBub2RlcyBhbHNvIHNob3VsZCBhbHdheXMgYmUgcGF0Y2hlZCwgYmVjYXVzZSBldmVuIGlmIHRoZVxuICAvLyBjb21wb25lbnQgZG9lc24ndCBuZWVkIHRvIHVwZGF0ZSwgaXQgbmVlZHMgdG8gcGVyc2lzdCB0aGUgaW5zdGFuY2Ugb24gdG9cbiAgLy8gdGhlIG5leHQgdm5vZGUgc28gdGhhdCBpdCBjYW4gYmUgcHJvcGVybHkgdW5tb3VudGVkIGxhdGVyLlxuICAodm5vZGUucGF0Y2hGbGFnID4gMCB8fCBzaGFwZUZsYWcgJiA2KSAmJiAvLyB0aGUgRVZFTlRTIGZsYWcgaXMgb25seSBmb3IgaHlkcmF0aW9uIGFuZCBpZiBpdCBpcyB0aGUgb25seSBmbGFnLCB0aGVcbiAgLy8gdm5vZGUgc2hvdWxkIG5vdCBiZSBjb25zaWRlcmVkIGR5bmFtaWMgZHVlIHRvIGhhbmRsZXIgY2FjaGluZy5cbiAgdm5vZGUucGF0Y2hGbGFnICE9PSAzMikge1xuICAgIGN1cnJlbnRCbG9jay5wdXNoKHZub2RlKTtcbiAgfVxuICByZXR1cm4gdm5vZGU7XG59XG5jb25zdCBjcmVhdGVWTm9kZSA9ICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyBjcmVhdGVWTm9kZVdpdGhBcmdzVHJhbnNmb3JtIDogX2NyZWF0ZVZOb2RlO1xuZnVuY3Rpb24gX2NyZWF0ZVZOb2RlKHR5cGUsIHByb3BzID0gbnVsbCwgY2hpbGRyZW4gPSBudWxsLCBwYXRjaEZsYWcgPSAwLCBkeW5hbWljUHJvcHMgPSBudWxsLCBpc0Jsb2NrTm9kZSA9IGZhbHNlKSB7XG4gIGlmICghdHlwZSB8fCB0eXBlID09PSBOVUxMX0RZTkFNSUNfQ09NUE9ORU5UKSB7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgIXR5cGUpIHtcbiAgICAgIHdhcm4kMShgSW52YWxpZCB2bm9kZSB0eXBlIHdoZW4gY3JlYXRpbmcgdm5vZGU6ICR7dHlwZX0uYCk7XG4gICAgfVxuICAgIHR5cGUgPSBDb21tZW50O1xuICB9XG4gIGlmIChpc1ZOb2RlKHR5cGUpKSB7XG4gICAgY29uc3QgY2xvbmVkID0gY2xvbmVWTm9kZShcbiAgICAgIHR5cGUsXG4gICAgICBwcm9wcyxcbiAgICAgIHRydWVcbiAgICAgIC8qIG1lcmdlUmVmOiB0cnVlICovXG4gICAgKTtcbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIG5vcm1hbGl6ZUNoaWxkcmVuKGNsb25lZCwgY2hpbGRyZW4pO1xuICAgIH1cbiAgICBpZiAoaXNCbG9ja1RyZWVFbmFibGVkID4gMCAmJiAhaXNCbG9ja05vZGUgJiYgY3VycmVudEJsb2NrKSB7XG4gICAgICBpZiAoY2xvbmVkLnNoYXBlRmxhZyAmIDYpIHtcbiAgICAgICAgY3VycmVudEJsb2NrW2N1cnJlbnRCbG9jay5pbmRleE9mKHR5cGUpXSA9IGNsb25lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnRCbG9jay5wdXNoKGNsb25lZCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNsb25lZC5wYXRjaEZsYWcgPSAtMjtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG4gIGlmIChpc0NsYXNzQ29tcG9uZW50KHR5cGUpKSB7XG4gICAgdHlwZSA9IHR5cGUuX192Y2NPcHRzO1xuICB9XG4gIGlmIChwcm9wcykge1xuICAgIHByb3BzID0gZ3VhcmRSZWFjdGl2ZVByb3BzKHByb3BzKTtcbiAgICBsZXQgeyBjbGFzczoga2xhc3MsIHN0eWxlIH0gPSBwcm9wcztcbiAgICBpZiAoa2xhc3MgJiYgIWlzU3RyaW5nKGtsYXNzKSkge1xuICAgICAgcHJvcHMuY2xhc3MgPSBub3JtYWxpemVDbGFzcyhrbGFzcyk7XG4gICAgfVxuICAgIGlmIChpc09iamVjdChzdHlsZSkpIHtcbiAgICAgIGlmIChpc1Byb3h5KHN0eWxlKSAmJiAhaXNBcnJheShzdHlsZSkpIHtcbiAgICAgICAgc3R5bGUgPSBleHRlbmQoe30sIHN0eWxlKTtcbiAgICAgIH1cbiAgICAgIHByb3BzLnN0eWxlID0gbm9ybWFsaXplU3R5bGUoc3R5bGUpO1xuICAgIH1cbiAgfVxuICBjb25zdCBzaGFwZUZsYWcgPSBpc1N0cmluZyh0eXBlKSA/IDEgOiBpc1N1c3BlbnNlKHR5cGUpID8gMTI4IDogaXNUZWxlcG9ydCh0eXBlKSA/IDY0IDogaXNPYmplY3QodHlwZSkgPyA0IDogaXNGdW5jdGlvbih0eXBlKSA/IDIgOiAwO1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBzaGFwZUZsYWcgJiA0ICYmIGlzUHJveHkodHlwZSkpIHtcbiAgICB0eXBlID0gdG9SYXcodHlwZSk7XG4gICAgd2FybiQxKFxuICAgICAgYFZ1ZSByZWNlaXZlZCBhIENvbXBvbmVudCB0aGF0IHdhcyBtYWRlIGEgcmVhY3RpdmUgb2JqZWN0LiBUaGlzIGNhbiBsZWFkIHRvIHVubmVjZXNzYXJ5IHBlcmZvcm1hbmNlIG92ZXJoZWFkIGFuZCBzaG91bGQgYmUgYXZvaWRlZCBieSBtYXJraW5nIHRoZSBjb21wb25lbnQgd2l0aCBcXGBtYXJrUmF3XFxgIG9yIHVzaW5nIFxcYHNoYWxsb3dSZWZcXGAgaW5zdGVhZCBvZiBcXGByZWZcXGAuYCxcbiAgICAgIGBcbkNvbXBvbmVudCB0aGF0IHdhcyBtYWRlIHJlYWN0aXZlOiBgLFxuICAgICAgdHlwZVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJhc2VWTm9kZShcbiAgICB0eXBlLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIHBhdGNoRmxhZyxcbiAgICBkeW5hbWljUHJvcHMsXG4gICAgc2hhcGVGbGFnLFxuICAgIGlzQmxvY2tOb2RlLFxuICAgIHRydWVcbiAgKTtcbn1cbmZ1bmN0aW9uIGd1YXJkUmVhY3RpdmVQcm9wcyhwcm9wcykge1xuICBpZiAoIXByb3BzKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIGlzUHJveHkocHJvcHMpIHx8IGlzSW50ZXJuYWxPYmplY3QocHJvcHMpID8gZXh0ZW5kKHt9LCBwcm9wcykgOiBwcm9wcztcbn1cbmZ1bmN0aW9uIGNsb25lVk5vZGUodm5vZGUsIGV4dHJhUHJvcHMsIG1lcmdlUmVmID0gZmFsc2UsIGNsb25lVHJhbnNpdGlvbiA9IGZhbHNlKSB7XG4gIGNvbnN0IHsgcHJvcHMsIHJlZiwgcGF0Y2hGbGFnLCBjaGlsZHJlbiwgdHJhbnNpdGlvbiB9ID0gdm5vZGU7XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gZXh0cmFQcm9wcyA/IG1lcmdlUHJvcHMocHJvcHMgfHwge30sIGV4dHJhUHJvcHMpIDogcHJvcHM7XG4gIGNvbnN0IGNsb25lZCA9IHtcbiAgICBfX3ZfaXNWTm9kZTogdHJ1ZSxcbiAgICBfX3Zfc2tpcDogdHJ1ZSxcbiAgICB0eXBlOiB2bm9kZS50eXBlLFxuICAgIHByb3BzOiBtZXJnZWRQcm9wcyxcbiAgICBrZXk6IG1lcmdlZFByb3BzICYmIG5vcm1hbGl6ZUtleShtZXJnZWRQcm9wcyksXG4gICAgcmVmOiBleHRyYVByb3BzICYmIGV4dHJhUHJvcHMucmVmID8gKFxuICAgICAgLy8gIzIwNzggaW4gdGhlIGNhc2Ugb2YgPGNvbXBvbmVudCA6aXM9XCJ2bm9kZVwiIHJlZj1cImV4dHJhXCIvPlxuICAgICAgLy8gaWYgdGhlIHZub2RlIGl0c2VsZiBhbHJlYWR5IGhhcyBhIHJlZiwgY2xvbmVWTm9kZSB3aWxsIG5lZWQgdG8gbWVyZ2VcbiAgICAgIC8vIHRoZSByZWZzIHNvIHRoZSBzaW5nbGUgdm5vZGUgY2FuIGJlIHNldCBvbiBtdWx0aXBsZSByZWZzXG4gICAgICBtZXJnZVJlZiAmJiByZWYgPyBpc0FycmF5KHJlZikgPyByZWYuY29uY2F0KG5vcm1hbGl6ZVJlZihleHRyYVByb3BzKSkgOiBbcmVmLCBub3JtYWxpemVSZWYoZXh0cmFQcm9wcyldIDogbm9ybWFsaXplUmVmKGV4dHJhUHJvcHMpXG4gICAgKSA6IHJlZixcbiAgICBzY29wZUlkOiB2bm9kZS5zY29wZUlkLFxuICAgIHNsb3RTY29wZUlkczogdm5vZGUuc2xvdFNjb3BlSWRzLFxuICAgIGNoaWxkcmVuOiAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHBhdGNoRmxhZyA9PT0gLTEgJiYgaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlbi5tYXAoZGVlcENsb25lVk5vZGUpIDogY2hpbGRyZW4sXG4gICAgdGFyZ2V0OiB2bm9kZS50YXJnZXQsXG4gICAgdGFyZ2V0U3RhcnQ6IHZub2RlLnRhcmdldFN0YXJ0LFxuICAgIHRhcmdldEFuY2hvcjogdm5vZGUudGFyZ2V0QW5jaG9yLFxuICAgIHN0YXRpY0NvdW50OiB2bm9kZS5zdGF0aWNDb3VudCxcbiAgICBzaGFwZUZsYWc6IHZub2RlLnNoYXBlRmxhZyxcbiAgICAvLyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIHdpdGggZXh0cmEgcHJvcHMsIHdlIGNhbiBubyBsb25nZXIgYXNzdW1lIGl0c1xuICAgIC8vIGV4aXN0aW5nIHBhdGNoIGZsYWcgdG8gYmUgcmVsaWFibGUgYW5kIG5lZWQgdG8gYWRkIHRoZSBGVUxMX1BST1BTIGZsYWcuXG4gICAgLy8gbm90ZTogcHJlc2VydmUgZmxhZyBmb3IgZnJhZ21lbnRzIHNpbmNlIHRoZXkgdXNlIHRoZSBmbGFnIGZvciBjaGlsZHJlblxuICAgIC8vIGZhc3QgcGF0aHMgb25seS5cbiAgICBwYXRjaEZsYWc6IGV4dHJhUHJvcHMgJiYgdm5vZGUudHlwZSAhPT0gRnJhZ21lbnQgPyBwYXRjaEZsYWcgPT09IC0xID8gMTYgOiBwYXRjaEZsYWcgfCAxNiA6IHBhdGNoRmxhZyxcbiAgICBkeW5hbWljUHJvcHM6IHZub2RlLmR5bmFtaWNQcm9wcyxcbiAgICBkeW5hbWljQ2hpbGRyZW46IHZub2RlLmR5bmFtaWNDaGlsZHJlbixcbiAgICBhcHBDb250ZXh0OiB2bm9kZS5hcHBDb250ZXh0LFxuICAgIGRpcnM6IHZub2RlLmRpcnMsXG4gICAgdHJhbnNpdGlvbixcbiAgICAvLyBUaGVzZSBzaG91bGQgdGVjaG5pY2FsbHkgb25seSBiZSBub24tbnVsbCBvbiBtb3VudGVkIFZOb2Rlcy4gSG93ZXZlcixcbiAgICAvLyB0aGV5ICpzaG91bGQqIGJlIGNvcGllZCBmb3Iga2VwdC1hbGl2ZSB2bm9kZXMuIFNvIHdlIGp1c3QgYWx3YXlzIGNvcHlcbiAgICAvLyB0aGVtIHNpbmNlIHRoZW0gYmVpbmcgbm9uLW51bGwgZHVyaW5nIGEgbW91bnQgZG9lc24ndCBhZmZlY3QgdGhlIGxvZ2ljIGFzXG4gICAgLy8gdGhleSB3aWxsIHNpbXBseSBiZSBvdmVyd3JpdHRlbi5cbiAgICBjb21wb25lbnQ6IHZub2RlLmNvbXBvbmVudCxcbiAgICBzdXNwZW5zZTogdm5vZGUuc3VzcGVuc2UsXG4gICAgc3NDb250ZW50OiB2bm9kZS5zc0NvbnRlbnQgJiYgY2xvbmVWTm9kZSh2bm9kZS5zc0NvbnRlbnQpLFxuICAgIHNzRmFsbGJhY2s6IHZub2RlLnNzRmFsbGJhY2sgJiYgY2xvbmVWTm9kZSh2bm9kZS5zc0ZhbGxiYWNrKSxcbiAgICBwbGFjZWhvbGRlcjogdm5vZGUucGxhY2Vob2xkZXIsXG4gICAgZWw6IHZub2RlLmVsLFxuICAgIGFuY2hvcjogdm5vZGUuYW5jaG9yLFxuICAgIGN0eDogdm5vZGUuY3R4LFxuICAgIGNlOiB2bm9kZS5jZVxuICB9O1xuICBpZiAodHJhbnNpdGlvbiAmJiBjbG9uZVRyYW5zaXRpb24pIHtcbiAgICBzZXRUcmFuc2l0aW9uSG9va3MoXG4gICAgICBjbG9uZWQsXG4gICAgICB0cmFuc2l0aW9uLmNsb25lKGNsb25lZClcbiAgICApO1xuICB9XG4gIHJldHVybiBjbG9uZWQ7XG59XG5mdW5jdGlvbiBkZWVwQ2xvbmVWTm9kZSh2bm9kZSkge1xuICBjb25zdCBjbG9uZWQgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgaWYgKGlzQXJyYXkodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgY2xvbmVkLmNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW4ubWFwKGRlZXBDbG9uZVZOb2RlKTtcbiAgfVxuICByZXR1cm4gY2xvbmVkO1xufVxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlKHRleHQgPSBcIiBcIiwgZmxhZyA9IDApIHtcbiAgcmV0dXJuIGNyZWF0ZVZOb2RlKFRleHQsIG51bGwsIHRleHQsIGZsYWcpO1xufVxuZnVuY3Rpb24gY3JlYXRlU3RhdGljVk5vZGUoY29udGVudCwgbnVtYmVyT2ZOb2Rlcykge1xuICBjb25zdCB2bm9kZSA9IGNyZWF0ZVZOb2RlKFN0YXRpYywgbnVsbCwgY29udGVudCk7XG4gIHZub2RlLnN0YXRpY0NvdW50ID0gbnVtYmVyT2ZOb2RlcztcbiAgcmV0dXJuIHZub2RlO1xufVxuZnVuY3Rpb24gY3JlYXRlQ29tbWVudFZOb2RlKHRleHQgPSBcIlwiLCBhc0Jsb2NrID0gZmFsc2UpIHtcbiAgcmV0dXJuIGFzQmxvY2sgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKENvbW1lbnQsIG51bGwsIHRleHQpKSA6IGNyZWF0ZVZOb2RlKENvbW1lbnQsIG51bGwsIHRleHQpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplVk5vZGUoY2hpbGQpIHtcbiAgaWYgKGNoaWxkID09IG51bGwgfHwgdHlwZW9mIGNoaWxkID09PSBcImJvb2xlYW5cIikge1xuICAgIHJldHVybiBjcmVhdGVWTm9kZShDb21tZW50KTtcbiAgfSBlbHNlIGlmIChpc0FycmF5KGNoaWxkKSkge1xuICAgIHJldHVybiBjcmVhdGVWTm9kZShcbiAgICAgIEZyYWdtZW50LFxuICAgICAgbnVsbCxcbiAgICAgIC8vICMzNjY2LCBhdm9pZCByZWZlcmVuY2UgcG9sbHV0aW9uIHdoZW4gcmV1c2luZyB2bm9kZVxuICAgICAgY2hpbGQuc2xpY2UoKVxuICAgICk7XG4gIH0gZWxzZSBpZiAoaXNWTm9kZShjaGlsZCkpIHtcbiAgICByZXR1cm4gY2xvbmVJZk1vdW50ZWQoY2hpbGQpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVWTm9kZShUZXh0LCBudWxsLCBTdHJpbmcoY2hpbGQpKTtcbiAgfVxufVxuZnVuY3Rpb24gY2xvbmVJZk1vdW50ZWQoY2hpbGQpIHtcbiAgcmV0dXJuIGNoaWxkLmVsID09PSBudWxsICYmIGNoaWxkLnBhdGNoRmxhZyAhPT0gLTEgfHwgY2hpbGQubWVtbyA/IGNoaWxkIDogY2xvbmVWTm9kZShjaGlsZCk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4pIHtcbiAgbGV0IHR5cGUgPSAwO1xuICBjb25zdCB7IHNoYXBlRmxhZyB9ID0gdm5vZGU7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgY2hpbGRyZW4gPSBudWxsO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgdHlwZSA9IDE2O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJvYmplY3RcIikge1xuICAgIGlmIChzaGFwZUZsYWcgJiAoMSB8IDY0KSkge1xuICAgICAgY29uc3Qgc2xvdCA9IGNoaWxkcmVuLmRlZmF1bHQ7XG4gICAgICBpZiAoc2xvdCkge1xuICAgICAgICBzbG90Ll9jICYmIChzbG90Ll9kID0gZmFsc2UpO1xuICAgICAgICBub3JtYWxpemVDaGlsZHJlbih2bm9kZSwgc2xvdCgpKTtcbiAgICAgICAgc2xvdC5fYyAmJiAoc2xvdC5fZCA9IHRydWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICB0eXBlID0gMzI7XG4gICAgICBjb25zdCBzbG90RmxhZyA9IGNoaWxkcmVuLl87XG4gICAgICBpZiAoIXNsb3RGbGFnICYmICFpc0ludGVybmFsT2JqZWN0KGNoaWxkcmVuKSkge1xuICAgICAgICBjaGlsZHJlbi5fY3R4ID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xuICAgICAgfSBlbHNlIGlmIChzbG90RmxhZyA9PT0gMyAmJiBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZS5zbG90cy5fID09PSAxKSB7XG4gICAgICAgICAgY2hpbGRyZW4uXyA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hpbGRyZW4uXyA9IDI7XG4gICAgICAgICAgdm5vZGUucGF0Y2hGbGFnIHw9IDEwMjQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihjaGlsZHJlbikpIHtcbiAgICBjaGlsZHJlbiA9IHsgZGVmYXVsdDogY2hpbGRyZW4sIF9jdHg6IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSB9O1xuICAgIHR5cGUgPSAzMjtcbiAgfSBlbHNlIHtcbiAgICBjaGlsZHJlbiA9IFN0cmluZyhjaGlsZHJlbik7XG4gICAgaWYgKHNoYXBlRmxhZyAmIDY0KSB7XG4gICAgICB0eXBlID0gMTY7XG4gICAgICBjaGlsZHJlbiA9IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHlwZSA9IDg7XG4gICAgfVxuICB9XG4gIHZub2RlLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHZub2RlLnNoYXBlRmxhZyB8PSB0eXBlO1xufVxuZnVuY3Rpb24gbWVyZ2VQcm9wcyguLi5hcmdzKSB7XG4gIGNvbnN0IHJldCA9IHt9O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB0b01lcmdlID0gYXJnc1tpXTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0b01lcmdlKSB7XG4gICAgICBpZiAoa2V5ID09PSBcImNsYXNzXCIpIHtcbiAgICAgICAgaWYgKHJldC5jbGFzcyAhPT0gdG9NZXJnZS5jbGFzcykge1xuICAgICAgICAgIHJldC5jbGFzcyA9IG5vcm1hbGl6ZUNsYXNzKFtyZXQuY2xhc3MsIHRvTWVyZ2UuY2xhc3NdKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgPT09IFwic3R5bGVcIikge1xuICAgICAgICByZXQuc3R5bGUgPSBub3JtYWxpemVTdHlsZShbcmV0LnN0eWxlLCB0b01lcmdlLnN0eWxlXSk7XG4gICAgICB9IGVsc2UgaWYgKGlzT24oa2V5KSkge1xuICAgICAgICBjb25zdCBleGlzdGluZyA9IHJldFtrZXldO1xuICAgICAgICBjb25zdCBpbmNvbWluZyA9IHRvTWVyZ2Vba2V5XTtcbiAgICAgICAgaWYgKGluY29taW5nICYmIGV4aXN0aW5nICE9PSBpbmNvbWluZyAmJiAhKGlzQXJyYXkoZXhpc3RpbmcpICYmIGV4aXN0aW5nLmluY2x1ZGVzKGluY29taW5nKSkpIHtcbiAgICAgICAgICByZXRba2V5XSA9IGV4aXN0aW5nID8gW10uY29uY2F0KGV4aXN0aW5nLCBpbmNvbWluZykgOiBpbmNvbWluZztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgIT09IFwiXCIpIHtcbiAgICAgICAgcmV0W2tleV0gPSB0b01lcmdlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiBpbnZva2VWTm9kZUhvb2soaG9vaywgaW5zdGFuY2UsIHZub2RlLCBwcmV2Vk5vZGUgPSBudWxsKSB7XG4gIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIGluc3RhbmNlLCA3LCBbXG4gICAgdm5vZGUsXG4gICAgcHJldlZOb2RlXG4gIF0pO1xufVxuXG5jb25zdCBlbXB0eUFwcENvbnRleHQgPSBjcmVhdGVBcHBDb250ZXh0KCk7XG5sZXQgdWlkID0gMDtcbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlKHZub2RlLCBwYXJlbnQsIHN1c3BlbnNlKSB7XG4gIGNvbnN0IHR5cGUgPSB2bm9kZS50eXBlO1xuICBjb25zdCBhcHBDb250ZXh0ID0gKHBhcmVudCA/IHBhcmVudC5hcHBDb250ZXh0IDogdm5vZGUuYXBwQ29udGV4dCkgfHwgZW1wdHlBcHBDb250ZXh0O1xuICBjb25zdCBpbnN0YW5jZSA9IHtcbiAgICB1aWQ6IHVpZCsrLFxuICAgIHZub2RlLFxuICAgIHR5cGUsXG4gICAgcGFyZW50LFxuICAgIGFwcENvbnRleHQsXG4gICAgcm9vdDogbnVsbCxcbiAgICAvLyB0byBiZSBpbW1lZGlhdGVseSBzZXRcbiAgICBuZXh0OiBudWxsLFxuICAgIHN1YlRyZWU6IG51bGwsXG4gICAgLy8gd2lsbCBiZSBzZXQgc3luY2hyb25vdXNseSByaWdodCBhZnRlciBjcmVhdGlvblxuICAgIGVmZmVjdDogbnVsbCxcbiAgICB1cGRhdGU6IG51bGwsXG4gICAgLy8gd2lsbCBiZSBzZXQgc3luY2hyb25vdXNseSByaWdodCBhZnRlciBjcmVhdGlvblxuICAgIGpvYjogbnVsbCxcbiAgICBzY29wZTogbmV3IEVmZmVjdFNjb3BlKFxuICAgICAgdHJ1ZVxuICAgICAgLyogZGV0YWNoZWQgKi9cbiAgICApLFxuICAgIHJlbmRlcjogbnVsbCxcbiAgICBwcm94eTogbnVsbCxcbiAgICBleHBvc2VkOiBudWxsLFxuICAgIGV4cG9zZVByb3h5OiBudWxsLFxuICAgIHdpdGhQcm94eTogbnVsbCxcbiAgICBwcm92aWRlczogcGFyZW50ID8gcGFyZW50LnByb3ZpZGVzIDogT2JqZWN0LmNyZWF0ZShhcHBDb250ZXh0LnByb3ZpZGVzKSxcbiAgICBpZHM6IHBhcmVudCA/IHBhcmVudC5pZHMgOiBbXCJcIiwgMCwgMF0sXG4gICAgYWNjZXNzQ2FjaGU6IG51bGwsXG4gICAgcmVuZGVyQ2FjaGU6IFtdLFxuICAgIC8vIGxvY2FsIHJlc29sdmVkIGFzc2V0c1xuICAgIGNvbXBvbmVudHM6IG51bGwsXG4gICAgZGlyZWN0aXZlczogbnVsbCxcbiAgICAvLyByZXNvbHZlZCBwcm9wcyBhbmQgZW1pdHMgb3B0aW9uc1xuICAgIHByb3BzT3B0aW9uczogbm9ybWFsaXplUHJvcHNPcHRpb25zKHR5cGUsIGFwcENvbnRleHQpLFxuICAgIGVtaXRzT3B0aW9uczogbm9ybWFsaXplRW1pdHNPcHRpb25zKHR5cGUsIGFwcENvbnRleHQpLFxuICAgIC8vIGVtaXRcbiAgICBlbWl0OiBudWxsLFxuICAgIC8vIHRvIGJlIHNldCBpbW1lZGlhdGVseVxuICAgIGVtaXR0ZWQ6IG51bGwsXG4gICAgLy8gcHJvcHMgZGVmYXVsdCB2YWx1ZVxuICAgIHByb3BzRGVmYXVsdHM6IEVNUFRZX09CSixcbiAgICAvLyBpbmhlcml0QXR0cnNcbiAgICBpbmhlcml0QXR0cnM6IHR5cGUuaW5oZXJpdEF0dHJzLFxuICAgIC8vIHN0YXRlXG4gICAgY3R4OiBFTVBUWV9PQkosXG4gICAgZGF0YTogRU1QVFlfT0JKLFxuICAgIHByb3BzOiBFTVBUWV9PQkosXG4gICAgYXR0cnM6IEVNUFRZX09CSixcbiAgICBzbG90czogRU1QVFlfT0JKLFxuICAgIHJlZnM6IEVNUFRZX09CSixcbiAgICBzZXR1cFN0YXRlOiBFTVBUWV9PQkosXG4gICAgc2V0dXBDb250ZXh0OiBudWxsLFxuICAgIC8vIHN1c3BlbnNlIHJlbGF0ZWRcbiAgICBzdXNwZW5zZSxcbiAgICBzdXNwZW5zZUlkOiBzdXNwZW5zZSA/IHN1c3BlbnNlLnBlbmRpbmdJZCA6IDAsXG4gICAgYXN5bmNEZXA6IG51bGwsXG4gICAgYXN5bmNSZXNvbHZlZDogZmFsc2UsXG4gICAgLy8gbGlmZWN5Y2xlIGhvb2tzXG4gICAgLy8gbm90IHVzaW5nIGVudW1zIGhlcmUgYmVjYXVzZSBpdCByZXN1bHRzIGluIGNvbXB1dGVkIHByb3BlcnRpZXNcbiAgICBpc01vdW50ZWQ6IGZhbHNlLFxuICAgIGlzVW5tb3VudGVkOiBmYWxzZSxcbiAgICBpc0RlYWN0aXZhdGVkOiBmYWxzZSxcbiAgICBiYzogbnVsbCxcbiAgICBjOiBudWxsLFxuICAgIGJtOiBudWxsLFxuICAgIG06IG51bGwsXG4gICAgYnU6IG51bGwsXG4gICAgdTogbnVsbCxcbiAgICB1bTogbnVsbCxcbiAgICBidW06IG51bGwsXG4gICAgZGE6IG51bGwsXG4gICAgYTogbnVsbCxcbiAgICBydGc6IG51bGwsXG4gICAgcnRjOiBudWxsLFxuICAgIGVjOiBudWxsLFxuICAgIHNwOiBudWxsXG4gIH07XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgaW5zdGFuY2UuY3R4ID0gY3JlYXRlRGV2UmVuZGVyQ29udGV4dChpbnN0YW5jZSk7XG4gIH0gZWxzZSB7XG4gICAgaW5zdGFuY2UuY3R4ID0geyBfOiBpbnN0YW5jZSB9O1xuICB9XG4gIGluc3RhbmNlLnJvb3QgPSBwYXJlbnQgPyBwYXJlbnQucm9vdCA6IGluc3RhbmNlO1xuICBpbnN0YW5jZS5lbWl0ID0gZW1pdC5iaW5kKG51bGwsIGluc3RhbmNlKTtcbiAgaWYgKHZub2RlLmNlKSB7XG4gICAgdm5vZGUuY2UoaW5zdGFuY2UpO1xuICB9XG4gIHJldHVybiBpbnN0YW5jZTtcbn1cbmxldCBjdXJyZW50SW5zdGFuY2UgPSBudWxsO1xuY29uc3QgZ2V0Q3VycmVudEluc3RhbmNlID0gKCkgPT4gY3VycmVudEluc3RhbmNlIHx8IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbmxldCBpbnRlcm5hbFNldEN1cnJlbnRJbnN0YW5jZTtcbmxldCBzZXRJblNTUlNldHVwU3RhdGU7XG57XG4gIGNvbnN0IGcgPSBnZXRHbG9iYWxUaGlzKCk7XG4gIGNvbnN0IHJlZ2lzdGVyR2xvYmFsU2V0dGVyID0gKGtleSwgc2V0dGVyKSA9PiB7XG4gICAgbGV0IHNldHRlcnM7XG4gICAgaWYgKCEoc2V0dGVycyA9IGdba2V5XSkpIHNldHRlcnMgPSBnW2tleV0gPSBbXTtcbiAgICBzZXR0ZXJzLnB1c2goc2V0dGVyKTtcbiAgICByZXR1cm4gKHYpID0+IHtcbiAgICAgIGlmIChzZXR0ZXJzLmxlbmd0aCA+IDEpIHNldHRlcnMuZm9yRWFjaCgoc2V0KSA9PiBzZXQodikpO1xuICAgICAgZWxzZSBzZXR0ZXJzWzBdKHYpO1xuICAgIH07XG4gIH07XG4gIGludGVybmFsU2V0Q3VycmVudEluc3RhbmNlID0gcmVnaXN0ZXJHbG9iYWxTZXR0ZXIoXG4gICAgYF9fVlVFX0lOU1RBTkNFX1NFVFRFUlNfX2AsXG4gICAgKHYpID0+IGN1cnJlbnRJbnN0YW5jZSA9IHZcbiAgKTtcbiAgc2V0SW5TU1JTZXR1cFN0YXRlID0gcmVnaXN0ZXJHbG9iYWxTZXR0ZXIoXG4gICAgYF9fVlVFX1NTUl9TRVRURVJTX19gLFxuICAgICh2KSA9PiBpc0luU1NSQ29tcG9uZW50U2V0dXAgPSB2XG4gICk7XG59XG5jb25zdCBzZXRDdXJyZW50SW5zdGFuY2UgPSAoaW5zdGFuY2UpID0+IHtcbiAgY29uc3QgcHJldiA9IGN1cnJlbnRJbnN0YW5jZTtcbiAgaW50ZXJuYWxTZXRDdXJyZW50SW5zdGFuY2UoaW5zdGFuY2UpO1xuICBpbnN0YW5jZS5zY29wZS5vbigpO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGluc3RhbmNlLnNjb3BlLm9mZigpO1xuICAgIGludGVybmFsU2V0Q3VycmVudEluc3RhbmNlKHByZXYpO1xuICB9O1xufTtcbmNvbnN0IHVuc2V0Q3VycmVudEluc3RhbmNlID0gKCkgPT4ge1xuICBjdXJyZW50SW5zdGFuY2UgJiYgY3VycmVudEluc3RhbmNlLnNjb3BlLm9mZigpO1xuICBpbnRlcm5hbFNldEN1cnJlbnRJbnN0YW5jZShudWxsKTtcbn07XG5jb25zdCBpc0J1aWx0SW5UYWcgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcInNsb3QsY29tcG9uZW50XCIpO1xuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUsIHsgaXNOYXRpdmVUYWcgfSkge1xuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGlzTmF0aXZlVGFnKG5hbWUpKSB7XG4gICAgd2FybiQxKFxuICAgICAgXCJEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50IGlkOiBcIiArIG5hbWVcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiBpc1N0YXRlZnVsQ29tcG9uZW50KGluc3RhbmNlKSB7XG4gIHJldHVybiBpbnN0YW5jZS52bm9kZS5zaGFwZUZsYWcgJiA0O1xufVxubGV0IGlzSW5TU1JDb21wb25lbnRTZXR1cCA9IGZhbHNlO1xuZnVuY3Rpb24gc2V0dXBDb21wb25lbnQoaW5zdGFuY2UsIGlzU1NSID0gZmFsc2UsIG9wdGltaXplZCA9IGZhbHNlKSB7XG4gIGlzU1NSICYmIHNldEluU1NSU2V0dXBTdGF0ZShpc1NTUik7XG4gIGNvbnN0IHsgcHJvcHMsIGNoaWxkcmVuIH0gPSBpbnN0YW5jZS52bm9kZTtcbiAgY29uc3QgaXNTdGF0ZWZ1bCA9IGlzU3RhdGVmdWxDb21wb25lbnQoaW5zdGFuY2UpO1xuICBpbml0UHJvcHMoaW5zdGFuY2UsIHByb3BzLCBpc1N0YXRlZnVsLCBpc1NTUik7XG4gIGluaXRTbG90cyhpbnN0YW5jZSwgY2hpbGRyZW4sIG9wdGltaXplZCB8fCBpc1NTUik7XG4gIGNvbnN0IHNldHVwUmVzdWx0ID0gaXNTdGF0ZWZ1bCA/IHNldHVwU3RhdGVmdWxDb21wb25lbnQoaW5zdGFuY2UsIGlzU1NSKSA6IHZvaWQgMDtcbiAgaXNTU1IgJiYgc2V0SW5TU1JTZXR1cFN0YXRlKGZhbHNlKTtcbiAgcmV0dXJuIHNldHVwUmVzdWx0O1xufVxuZnVuY3Rpb24gc2V0dXBTdGF0ZWZ1bENvbXBvbmVudChpbnN0YW5jZSwgaXNTU1IpIHtcbiAgdmFyIF9hO1xuICBjb25zdCBDb21wb25lbnQgPSBpbnN0YW5jZS50eXBlO1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIGlmIChDb21wb25lbnQubmFtZSkge1xuICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKENvbXBvbmVudC5uYW1lLCBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZyk7XG4gICAgfVxuICAgIGlmIChDb21wb25lbnQuY29tcG9uZW50cykge1xuICAgICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhDb21wb25lbnQuY29tcG9uZW50cyk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lc1tpXSwgaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoQ29tcG9uZW50LmRpcmVjdGl2ZXMpIHtcbiAgICAgIGNvbnN0IG5hbWVzID0gT2JqZWN0LmtleXMoQ29tcG9uZW50LmRpcmVjdGl2ZXMpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YWxpZGF0ZURpcmVjdGl2ZU5hbWUobmFtZXNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoQ29tcG9uZW50LmNvbXBpbGVyT3B0aW9ucyAmJiBpc1J1bnRpbWVPbmx5KCkpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYFwiY29tcGlsZXJPcHRpb25zXCIgaXMgb25seSBzdXBwb3J0ZWQgd2hlbiB1c2luZyBhIGJ1aWxkIG9mIFZ1ZSB0aGF0IGluY2x1ZGVzIHRoZSBydW50aW1lIGNvbXBpbGVyLiBTaW5jZSB5b3UgYXJlIHVzaW5nIGEgcnVudGltZS1vbmx5IGJ1aWxkLCB0aGUgb3B0aW9ucyBzaG91bGQgYmUgcGFzc2VkIHZpYSB5b3VyIGJ1aWxkIHRvb2wgY29uZmlnIGluc3RlYWQuYFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaW5zdGFuY2UuYWNjZXNzQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaW5zdGFuY2UucHJveHkgPSBuZXcgUHJveHkoaW5zdGFuY2UuY3R4LCBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMpO1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIGV4cG9zZVByb3BzT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKTtcbiAgfVxuICBjb25zdCB7IHNldHVwIH0gPSBDb21wb25lbnQ7XG4gIGlmIChzZXR1cCkge1xuICAgIHBhdXNlVHJhY2tpbmcoKTtcbiAgICBjb25zdCBzZXR1cENvbnRleHQgPSBpbnN0YW5jZS5zZXR1cENvbnRleHQgPSBzZXR1cC5sZW5ndGggPiAxID8gY3JlYXRlU2V0dXBDb250ZXh0KGluc3RhbmNlKSA6IG51bGw7XG4gICAgY29uc3QgcmVzZXQgPSBzZXRDdXJyZW50SW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgIGNvbnN0IHNldHVwUmVzdWx0ID0gY2FsbFdpdGhFcnJvckhhbmRsaW5nKFxuICAgICAgc2V0dXAsXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIDAsXG4gICAgICBbXG4gICAgICAgICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyBzaGFsbG93UmVhZG9ubHkoaW5zdGFuY2UucHJvcHMpIDogaW5zdGFuY2UucHJvcHMsXG4gICAgICAgIHNldHVwQ29udGV4dFxuICAgICAgXVxuICAgICk7XG4gICAgY29uc3QgaXNBc3luY1NldHVwID0gaXNQcm9taXNlKHNldHVwUmVzdWx0KTtcbiAgICByZXNldFRyYWNraW5nKCk7XG4gICAgcmVzZXQoKTtcbiAgICBpZiAoKGlzQXN5bmNTZXR1cCB8fCBpbnN0YW5jZS5zcCkgJiYgIWlzQXN5bmNXcmFwcGVyKGluc3RhbmNlKSkge1xuICAgICAgbWFya0FzeW5jQm91bmRhcnkoaW5zdGFuY2UpO1xuICAgIH1cbiAgICBpZiAoaXNBc3luY1NldHVwKSB7XG4gICAgICBzZXR1cFJlc3VsdC50aGVuKHVuc2V0Q3VycmVudEluc3RhbmNlLCB1bnNldEN1cnJlbnRJbnN0YW5jZSk7XG4gICAgICBpZiAoaXNTU1IpIHtcbiAgICAgICAgcmV0dXJuIHNldHVwUmVzdWx0LnRoZW4oKHJlc29sdmVkUmVzdWx0KSA9PiB7XG4gICAgICAgICAgaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIHJlc29sdmVkUmVzdWx0LCBpc1NTUik7XG4gICAgICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgaW5zdGFuY2UsIDApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluc3RhbmNlLmFzeW5jRGVwID0gc2V0dXBSZXN1bHQ7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFpbnN0YW5jZS5zdXNwZW5zZSkge1xuICAgICAgICAgIGNvbnN0IG5hbWUgPSAoX2EgPSBDb21wb25lbnQubmFtZSkgIT0gbnVsbCA/IF9hIDogXCJBbm9ueW1vdXNcIjtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBgQ29tcG9uZW50IDwke25hbWV9Pjogc2V0dXAgZnVuY3Rpb24gcmV0dXJuZWQgYSBwcm9taXNlLCBidXQgbm8gPFN1c3BlbnNlPiBib3VuZGFyeSB3YXMgZm91bmQgaW4gdGhlIHBhcmVudCBjb21wb25lbnQgdHJlZS4gQSBjb21wb25lbnQgd2l0aCBhc3luYyBzZXR1cCgpIG11c3QgYmUgbmVzdGVkIGluIGEgPFN1c3BlbnNlPiBpbiBvcmRlciB0byBiZSByZW5kZXJlZC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGVTZXR1cFJlc3VsdChpbnN0YW5jZSwgc2V0dXBSZXN1bHQsIGlzU1NSKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZmluaXNoQ29tcG9uZW50U2V0dXAoaW5zdGFuY2UsIGlzU1NSKTtcbiAgfVxufVxuZnVuY3Rpb24gaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIHNldHVwUmVzdWx0LCBpc1NTUikge1xuICBpZiAoaXNGdW5jdGlvbihzZXR1cFJlc3VsdCkpIHtcbiAgICBpZiAoaW5zdGFuY2UudHlwZS5fX3NzcklubGluZVJlbmRlcikge1xuICAgICAgaW5zdGFuY2Uuc3NyUmVuZGVyID0gc2V0dXBSZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlLnJlbmRlciA9IHNldHVwUmVzdWx0O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChzZXR1cFJlc3VsdCkpIHtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBpc1ZOb2RlKHNldHVwUmVzdWx0KSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgc2V0dXAoKSBzaG91bGQgbm90IHJldHVybiBWTm9kZXMgZGlyZWN0bHkgLSByZXR1cm4gYSByZW5kZXIgZnVuY3Rpb24gaW5zdGVhZC5gXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgIGluc3RhbmNlLmRldnRvb2xzUmF3U2V0dXBTdGF0ZSA9IHNldHVwUmVzdWx0O1xuICAgIH1cbiAgICBpbnN0YW5jZS5zZXR1cFN0YXRlID0gcHJveHlSZWZzKHNldHVwUmVzdWx0KTtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgZXhwb3NlU2V0dXBTdGF0ZU9uUmVuZGVyQ29udGV4dChpbnN0YW5jZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgc2V0dXBSZXN1bHQgIT09IHZvaWQgMCkge1xuICAgIHdhcm4kMShcbiAgICAgIGBzZXR1cCgpIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0LiBSZWNlaXZlZDogJHtzZXR1cFJlc3VsdCA9PT0gbnVsbCA/IFwibnVsbFwiIDogdHlwZW9mIHNldHVwUmVzdWx0fWBcbiAgICApO1xuICB9XG4gIGZpbmlzaENvbXBvbmVudFNldHVwKGluc3RhbmNlLCBpc1NTUik7XG59XG5sZXQgY29tcGlsZTtcbmxldCBpbnN0YWxsV2l0aFByb3h5O1xuZnVuY3Rpb24gcmVnaXN0ZXJSdW50aW1lQ29tcGlsZXIoX2NvbXBpbGUpIHtcbiAgY29tcGlsZSA9IF9jb21waWxlO1xuICBpbnN0YWxsV2l0aFByb3h5ID0gKGkpID0+IHtcbiAgICBpZiAoaS5yZW5kZXIuX3JjKSB7XG4gICAgICBpLndpdGhQcm94eSA9IG5ldyBQcm94eShpLmN0eCwgUnVudGltZUNvbXBpbGVkUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzKTtcbiAgICB9XG4gIH07XG59XG5jb25zdCBpc1J1bnRpbWVPbmx5ID0gKCkgPT4gIWNvbXBpbGU7XG5mdW5jdGlvbiBmaW5pc2hDb21wb25lbnRTZXR1cChpbnN0YW5jZSwgaXNTU1IsIHNraXBPcHRpb25zKSB7XG4gIGNvbnN0IENvbXBvbmVudCA9IGluc3RhbmNlLnR5cGU7XG4gIGlmICghaW5zdGFuY2UucmVuZGVyKSB7XG4gICAgaWYgKCFpc1NTUiAmJiBjb21waWxlICYmICFDb21wb25lbnQucmVuZGVyKSB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IENvbXBvbmVudC50ZW1wbGF0ZSB8fCBfX1ZVRV9PUFRJT05TX0FQSV9fICYmIHJlc29sdmVNZXJnZWRPcHRpb25zKGluc3RhbmNlKS50ZW1wbGF0ZTtcbiAgICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYGNvbXBpbGVgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGlzQ3VzdG9tRWxlbWVudCwgY29tcGlsZXJPcHRpb25zIH0gPSBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZztcbiAgICAgICAgY29uc3QgeyBkZWxpbWl0ZXJzLCBjb21waWxlck9wdGlvbnM6IGNvbXBvbmVudENvbXBpbGVyT3B0aW9ucyB9ID0gQ29tcG9uZW50O1xuICAgICAgICBjb25zdCBmaW5hbENvbXBpbGVyT3B0aW9ucyA9IGV4dGVuZChcbiAgICAgICAgICBleHRlbmQoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlzQ3VzdG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgZGVsaW1pdGVyc1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBpbGVyT3B0aW9uc1xuICAgICAgICAgICksXG4gICAgICAgICAgY29tcG9uZW50Q29tcGlsZXJPcHRpb25zXG4gICAgICAgICk7XG4gICAgICAgIENvbXBvbmVudC5yZW5kZXIgPSBjb21waWxlKHRlbXBsYXRlLCBmaW5hbENvbXBpbGVyT3B0aW9ucyk7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYGNvbXBpbGVgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpbnN0YW5jZS5yZW5kZXIgPSBDb21wb25lbnQucmVuZGVyIHx8IE5PT1A7XG4gICAgaWYgKGluc3RhbGxXaXRoUHJveHkpIHtcbiAgICAgIGluc3RhbGxXaXRoUHJveHkoaW5zdGFuY2UpO1xuICAgIH1cbiAgfVxuICBpZiAoX19WVUVfT1BUSU9OU19BUElfXyAmJiB0cnVlKSB7XG4gICAgY29uc3QgcmVzZXQgPSBzZXRDdXJyZW50SW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgIHBhdXNlVHJhY2tpbmcoKTtcbiAgICB0cnkge1xuICAgICAgYXBwbHlPcHRpb25zKGluc3RhbmNlKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgcmVzZXRUcmFja2luZygpO1xuICAgICAgcmVzZXQoKTtcbiAgICB9XG4gIH1cbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgIUNvbXBvbmVudC5yZW5kZXIgJiYgaW5zdGFuY2UucmVuZGVyID09PSBOT09QICYmICFpc1NTUikge1xuICAgIGlmICghY29tcGlsZSAmJiBDb21wb25lbnQudGVtcGxhdGUpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYENvbXBvbmVudCBwcm92aWRlZCB0ZW1wbGF0ZSBvcHRpb24gYnV0IHJ1bnRpbWUgY29tcGlsYXRpb24gaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJ1aWxkIG9mIFZ1ZS5gICsgKGAgQ29uZmlndXJlIHlvdXIgYnVuZGxlciB0byBhbGlhcyBcInZ1ZVwiIHRvIFwidnVlL2Rpc3QvdnVlLmVzbS1idW5kbGVyLmpzXCIuYCApXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuJDEoYENvbXBvbmVudCBpcyBtaXNzaW5nIHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbjogYCwgQ29tcG9uZW50KTtcbiAgICB9XG4gIH1cbn1cbmNvbnN0IGF0dHJzUHJveHlIYW5kbGVycyA9ICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyB7XG4gIGdldCh0YXJnZXQsIGtleSkge1xuICAgIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XG4gICAgdHJhY2sodGFyZ2V0LCBcImdldFwiLCBcIlwiKTtcbiAgICByZXR1cm4gdGFyZ2V0W2tleV07XG4gIH0sXG4gIHNldCgpIHtcbiAgICB3YXJuJDEoYHNldHVwQ29udGV4dC5hdHRycyBpcyByZWFkb25seS5gKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGRlbGV0ZVByb3BlcnR5KCkge1xuICAgIHdhcm4kMShgc2V0dXBDb250ZXh0LmF0dHJzIGlzIHJlYWRvbmx5LmApO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufSA6IHtcbiAgZ2V0KHRhcmdldCwga2V5KSB7XG4gICAgdHJhY2sodGFyZ2V0LCBcImdldFwiLCBcIlwiKTtcbiAgICByZXR1cm4gdGFyZ2V0W2tleV07XG4gIH1cbn07XG5mdW5jdGlvbiBnZXRTbG90c1Byb3h5KGluc3RhbmNlKSB7XG4gIHJldHVybiBuZXcgUHJveHkoaW5zdGFuY2Uuc2xvdHMsIHtcbiAgICBnZXQodGFyZ2V0LCBrZXkpIHtcbiAgICAgIHRyYWNrKGluc3RhbmNlLCBcImdldFwiLCBcIiRzbG90c1wiKTtcbiAgICAgIHJldHVybiB0YXJnZXRba2V5XTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlU2V0dXBDb250ZXh0KGluc3RhbmNlKSB7XG4gIGNvbnN0IGV4cG9zZSA9IChleHBvc2VkKSA9PiB7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgIGlmIChpbnN0YW5jZS5leHBvc2VkKSB7XG4gICAgICAgIHdhcm4kMShgZXhwb3NlKCkgc2hvdWxkIGJlIGNhbGxlZCBvbmx5IG9uY2UgcGVyIHNldHVwKCkuYCk7XG4gICAgICB9XG4gICAgICBpZiAoZXhwb3NlZCAhPSBudWxsKSB7XG4gICAgICAgIGxldCBleHBvc2VkVHlwZSA9IHR5cGVvZiBleHBvc2VkO1xuICAgICAgICBpZiAoZXhwb3NlZFR5cGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShleHBvc2VkKSkge1xuICAgICAgICAgICAgZXhwb3NlZFR5cGUgPSBcImFycmF5XCI7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc1JlZihleHBvc2VkKSkge1xuICAgICAgICAgICAgZXhwb3NlZFR5cGUgPSBcInJlZlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZXhwb3NlZFR5cGUgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBgZXhwb3NlKCkgc2hvdWxkIGJlIHBhc3NlZCBhIHBsYWluIG9iamVjdCwgcmVjZWl2ZWQgJHtleHBvc2VkVHlwZX0uYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaW5zdGFuY2UuZXhwb3NlZCA9IGV4cG9zZWQgfHwge307XG4gIH07XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgbGV0IGF0dHJzUHJveHk7XG4gICAgbGV0IHNsb3RzUHJveHk7XG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUoe1xuICAgICAgZ2V0IGF0dHJzKCkge1xuICAgICAgICByZXR1cm4gYXR0cnNQcm94eSB8fCAoYXR0cnNQcm94eSA9IG5ldyBQcm94eShpbnN0YW5jZS5hdHRycywgYXR0cnNQcm94eUhhbmRsZXJzKSk7XG4gICAgICB9LFxuICAgICAgZ2V0IHNsb3RzKCkge1xuICAgICAgICByZXR1cm4gc2xvdHNQcm94eSB8fCAoc2xvdHNQcm94eSA9IGdldFNsb3RzUHJveHkoaW5zdGFuY2UpKTtcbiAgICAgIH0sXG4gICAgICBnZXQgZW1pdCgpIHtcbiAgICAgICAgcmV0dXJuIChldmVudCwgLi4uYXJncykgPT4gaW5zdGFuY2UuZW1pdChldmVudCwgLi4uYXJncyk7XG4gICAgICB9LFxuICAgICAgZXhwb3NlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGF0dHJzOiBuZXcgUHJveHkoaW5zdGFuY2UuYXR0cnMsIGF0dHJzUHJveHlIYW5kbGVycyksXG4gICAgICBzbG90czogaW5zdGFuY2Uuc2xvdHMsXG4gICAgICBlbWl0OiBpbnN0YW5jZS5lbWl0LFxuICAgICAgZXhwb3NlXG4gICAgfTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50UHVibGljSW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgaWYgKGluc3RhbmNlLmV4cG9zZWQpIHtcbiAgICByZXR1cm4gaW5zdGFuY2UuZXhwb3NlUHJveHkgfHwgKGluc3RhbmNlLmV4cG9zZVByb3h5ID0gbmV3IFByb3h5KHByb3h5UmVmcyhtYXJrUmF3KGluc3RhbmNlLmV4cG9zZWQpKSwge1xuICAgICAgZ2V0KHRhcmdldCwga2V5KSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHRhcmdldFtrZXldO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSBpbiBwdWJsaWNQcm9wZXJ0aWVzTWFwKSB7XG4gICAgICAgICAgcmV0dXJuIHB1YmxpY1Byb3BlcnRpZXNNYXBba2V5XShpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBoYXModGFyZ2V0LCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIGtleSBpbiB0YXJnZXQgfHwga2V5IGluIHB1YmxpY1Byb3BlcnRpZXNNYXA7XG4gICAgICB9XG4gICAgfSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpbnN0YW5jZS5wcm94eTtcbiAgfVxufVxuY29uc3QgY2xhc3NpZnlSRSA9IC8oPzpefFstX10pXFx3L2c7XG5jb25zdCBjbGFzc2lmeSA9IChzdHIpID0+IHN0ci5yZXBsYWNlKGNsYXNzaWZ5UkUsIChjKSA9PiBjLnRvVXBwZXJDYXNlKCkpLnJlcGxhY2UoL1stX10vZywgXCJcIik7XG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCwgaW5jbHVkZUluZmVycmVkID0gdHJ1ZSkge1xuICByZXR1cm4gaXNGdW5jdGlvbihDb21wb25lbnQpID8gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIDogQ29tcG9uZW50Lm5hbWUgfHwgaW5jbHVkZUluZmVycmVkICYmIENvbXBvbmVudC5fX25hbWU7XG59XG5mdW5jdGlvbiBmb3JtYXRDb21wb25lbnROYW1lKGluc3RhbmNlLCBDb21wb25lbnQsIGlzUm9vdCA9IGZhbHNlKSB7XG4gIGxldCBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQpO1xuICBpZiAoIW5hbWUgJiYgQ29tcG9uZW50Ll9fZmlsZSkge1xuICAgIGNvbnN0IG1hdGNoID0gQ29tcG9uZW50Ll9fZmlsZS5tYXRjaCgvKFteL1xcXFxdKylcXC5cXHcrJC8pO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgbmFtZSA9IG1hdGNoWzFdO1xuICAgIH1cbiAgfVxuICBpZiAoIW5hbWUgJiYgaW5zdGFuY2UgJiYgaW5zdGFuY2UucGFyZW50KSB7XG4gICAgY29uc3QgaW5mZXJGcm9tUmVnaXN0cnkgPSAocmVnaXN0cnkpID0+IHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHJlZ2lzdHJ5KSB7XG4gICAgICAgIGlmIChyZWdpc3RyeVtrZXldID09PSBDb21wb25lbnQpIHtcbiAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBuYW1lID0gaW5mZXJGcm9tUmVnaXN0cnkoXG4gICAgICBpbnN0YW5jZS5jb21wb25lbnRzIHx8IGluc3RhbmNlLnBhcmVudC50eXBlLmNvbXBvbmVudHNcbiAgICApIHx8IGluZmVyRnJvbVJlZ2lzdHJ5KGluc3RhbmNlLmFwcENvbnRleHQuY29tcG9uZW50cyk7XG4gIH1cbiAgcmV0dXJuIG5hbWUgPyBjbGFzc2lmeShuYW1lKSA6IGlzUm9vdCA/IGBBcHBgIDogYEFub255bW91c2A7XG59XG5mdW5jdGlvbiBpc0NsYXNzQ29tcG9uZW50KHZhbHVlKSB7XG4gIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlKSAmJiBcIl9fdmNjT3B0c1wiIGluIHZhbHVlO1xufVxuXG5jb25zdCBjb21wdXRlZCA9IChnZXR0ZXJPck9wdGlvbnMsIGRlYnVnT3B0aW9ucykgPT4ge1xuICBjb25zdCBjID0gY29tcHV0ZWQkMShnZXR0ZXJPck9wdGlvbnMsIGRlYnVnT3B0aW9ucywgaXNJblNTUkNvbXBvbmVudFNldHVwKTtcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICBjb25zdCBpID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgaWYgKGkgJiYgaS5hcHBDb250ZXh0LmNvbmZpZy53YXJuUmVjdXJzaXZlQ29tcHV0ZWQpIHtcbiAgICAgIGMuX3dhcm5SZWN1cnNpdmUgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYztcbn07XG5cbmZ1bmN0aW9uIGgodHlwZSwgcHJvcHNPckNoaWxkcmVuLCBjaGlsZHJlbikge1xuICBjb25zdCBkb0NyZWF0ZVZOb2RlID0gKHR5cGUyLCBwcm9wcywgY2hpbGRyZW4yKSA9PiB7XG4gICAgc2V0QmxvY2tUcmFja2luZygtMSk7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0eXBlMiwgcHJvcHMsIGNoaWxkcmVuMik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldEJsb2NrVHJhY2tpbmcoMSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgaWYgKGwgPT09IDIpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvcHNPckNoaWxkcmVuKSAmJiAhaXNBcnJheShwcm9wc09yQ2hpbGRyZW4pKSB7XG4gICAgICBpZiAoaXNWTm9kZShwcm9wc09yQ2hpbGRyZW4pKSB7XG4gICAgICAgIHJldHVybiBkb0NyZWF0ZVZOb2RlKHR5cGUsIG51bGwsIFtwcm9wc09yQ2hpbGRyZW5dKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkb0NyZWF0ZVZOb2RlKHR5cGUsIHByb3BzT3JDaGlsZHJlbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBkb0NyZWF0ZVZOb2RlKHR5cGUsIG51bGwsIHByb3BzT3JDaGlsZHJlbik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChsID4gMykge1xuICAgICAgY2hpbGRyZW4gPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgIH0gZWxzZSBpZiAobCA9PT0gMyAmJiBpc1ZOb2RlKGNoaWxkcmVuKSkge1xuICAgICAgY2hpbGRyZW4gPSBbY2hpbGRyZW5dO1xuICAgIH1cbiAgICByZXR1cm4gZG9DcmVhdGVWTm9kZSh0eXBlLCBwcm9wc09yQ2hpbGRyZW4sIGNoaWxkcmVuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0Q3VzdG9tRm9ybWF0dGVyKCkge1xuICBpZiAoISEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgfHwgdHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB2dWVTdHlsZSA9IHsgc3R5bGU6IFwiY29sb3I6IzNiYTc3NlwiIH07XG4gIGNvbnN0IG51bWJlclN0eWxlID0geyBzdHlsZTogXCJjb2xvcjojMTY3N2ZmXCIgfTtcbiAgY29uc3Qgc3RyaW5nU3R5bGUgPSB7IHN0eWxlOiBcImNvbG9yOiNmNTIyMmRcIiB9O1xuICBjb25zdCBrZXl3b3JkU3R5bGUgPSB7IHN0eWxlOiBcImNvbG9yOiNlYjJmOTZcIiB9O1xuICBjb25zdCBmb3JtYXR0ZXIgPSB7XG4gICAgX192dWVfY3VzdG9tX2Zvcm1hdHRlcjogdHJ1ZSxcbiAgICBoZWFkZXIob2JqKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAob2JqLl9faXNWdWUpIHtcbiAgICAgICAgcmV0dXJuIFtcImRpdlwiLCB2dWVTdHlsZSwgYFZ1ZUluc3RhbmNlYF07XG4gICAgICB9IGVsc2UgaWYgKGlzUmVmKG9iaikpIHtcbiAgICAgICAgcGF1c2VUcmFja2luZygpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IG9iai52YWx1ZTtcbiAgICAgICAgcmVzZXRUcmFja2luZygpO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge30sXG4gICAgICAgICAgW1wic3BhblwiLCB2dWVTdHlsZSwgZ2VuUmVmRmxhZyhvYmopXSxcbiAgICAgICAgICBcIjxcIixcbiAgICAgICAgICBmb3JtYXRWYWx1ZSh2YWx1ZSksXG4gICAgICAgICAgYD5gXG4gICAgICAgIF07XG4gICAgICB9IGVsc2UgaWYgKGlzUmVhY3RpdmUob2JqKSkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge30sXG4gICAgICAgICAgW1wic3BhblwiLCB2dWVTdHlsZSwgaXNTaGFsbG93KG9iaikgPyBcIlNoYWxsb3dSZWFjdGl2ZVwiIDogXCJSZWFjdGl2ZVwiXSxcbiAgICAgICAgICBcIjxcIixcbiAgICAgICAgICBmb3JtYXRWYWx1ZShvYmopLFxuICAgICAgICAgIGA+JHtpc1JlYWRvbmx5KG9iaikgPyBgIChyZWFkb25seSlgIDogYGB9YFxuICAgICAgICBdO1xuICAgICAgfSBlbHNlIGlmIChpc1JlYWRvbmx5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHt9LFxuICAgICAgICAgIFtcInNwYW5cIiwgdnVlU3R5bGUsIGlzU2hhbGxvdyhvYmopID8gXCJTaGFsbG93UmVhZG9ubHlcIiA6IFwiUmVhZG9ubHlcIl0sXG4gICAgICAgICAgXCI8XCIsXG4gICAgICAgICAgZm9ybWF0VmFsdWUob2JqKSxcbiAgICAgICAgICBcIj5cIlxuICAgICAgICBdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBoYXNCb2R5KG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiBvYmouX19pc1Z1ZTtcbiAgICB9LFxuICAgIGJvZHkob2JqKSB7XG4gICAgICBpZiAob2JqICYmIG9iai5fX2lzVnVlKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7fSxcbiAgICAgICAgICAuLi5mb3JtYXRJbnN0YW5jZShvYmouJClcbiAgICAgICAgXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIGZvcm1hdEluc3RhbmNlKGluc3RhbmNlKSB7XG4gICAgY29uc3QgYmxvY2tzID0gW107XG4gICAgaWYgKGluc3RhbmNlLnR5cGUucHJvcHMgJiYgaW5zdGFuY2UucHJvcHMpIHtcbiAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soXCJwcm9wc1wiLCB0b1JhdyhpbnN0YW5jZS5wcm9wcykpKTtcbiAgICB9XG4gICAgaWYgKGluc3RhbmNlLnNldHVwU3RhdGUgIT09IEVNUFRZX09CSikge1xuICAgICAgYmxvY2tzLnB1c2goY3JlYXRlSW5zdGFuY2VCbG9jayhcInNldHVwXCIsIGluc3RhbmNlLnNldHVwU3RhdGUpKTtcbiAgICB9XG4gICAgaWYgKGluc3RhbmNlLmRhdGEgIT09IEVNUFRZX09CSikge1xuICAgICAgYmxvY2tzLnB1c2goY3JlYXRlSW5zdGFuY2VCbG9jayhcImRhdGFcIiwgdG9SYXcoaW5zdGFuY2UuZGF0YSkpKTtcbiAgICB9XG4gICAgY29uc3QgY29tcHV0ZWQgPSBleHRyYWN0S2V5cyhpbnN0YW5jZSwgXCJjb21wdXRlZFwiKTtcbiAgICBpZiAoY29tcHV0ZWQpIHtcbiAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soXCJjb21wdXRlZFwiLCBjb21wdXRlZCkpO1xuICAgIH1cbiAgICBjb25zdCBpbmplY3RlZCA9IGV4dHJhY3RLZXlzKGluc3RhbmNlLCBcImluamVjdFwiKTtcbiAgICBpZiAoaW5qZWN0ZWQpIHtcbiAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soXCJpbmplY3RlZFwiLCBpbmplY3RlZCkpO1xuICAgIH1cbiAgICBibG9ja3MucHVzaChbXG4gICAgICBcImRpdlwiLFxuICAgICAge30sXG4gICAgICBbXG4gICAgICAgIFwic3BhblwiLFxuICAgICAgICB7XG4gICAgICAgICAgc3R5bGU6IGtleXdvcmRTdHlsZS5zdHlsZSArIFwiO29wYWNpdHk6MC42NlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiJCAoaW50ZXJuYWwpOiBcIlxuICAgICAgXSxcbiAgICAgIFtcIm9iamVjdFwiLCB7IG9iamVjdDogaW5zdGFuY2UgfV1cbiAgICBdKTtcbiAgICByZXR1cm4gYmxvY2tzO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlQmxvY2sodHlwZSwgdGFyZ2V0KSB7XG4gICAgdGFyZ2V0ID0gZXh0ZW5kKHt9LCB0YXJnZXQpO1xuICAgIGlmICghT2JqZWN0LmtleXModGFyZ2V0KS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBbXCJzcGFuXCIsIHt9XTtcbiAgICB9XG4gICAgcmV0dXJuIFtcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0eWxlOiBcImxpbmUtaGVpZ2h0OjEuMjVlbTttYXJnaW4tYm90dG9tOjAuNmVtXCIgfSxcbiAgICAgIFtcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAge1xuICAgICAgICAgIHN0eWxlOiBcImNvbG9yOiM0NzY1ODJcIlxuICAgICAgICB9LFxuICAgICAgICB0eXBlXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICBcImRpdlwiLFxuICAgICAgICB7XG4gICAgICAgICAgc3R5bGU6IFwicGFkZGluZy1sZWZ0OjEuMjVlbVwiXG4gICAgICAgIH0sXG4gICAgICAgIC4uLk9iamVjdC5rZXlzKHRhcmdldCkubWFwKChrZXkpID0+IHtcbiAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgW1wic3BhblwiLCBrZXl3b3JkU3R5bGUsIGtleSArIFwiOiBcIl0sXG4gICAgICAgICAgICBmb3JtYXRWYWx1ZSh0YXJnZXRba2V5XSwgZmFsc2UpXG4gICAgICAgICAgXTtcbiAgICAgICAgfSlcbiAgICAgIF1cbiAgICBdO1xuICB9XG4gIGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHYsIGFzUmF3ID0gdHJ1ZSkge1xuICAgIGlmICh0eXBlb2YgdiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcmV0dXJuIFtcInNwYW5cIiwgbnVtYmVyU3R5bGUsIHZdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHYgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiBbXCJzcGFuXCIsIHN0cmluZ1N0eWxlLCBKU09OLnN0cmluZ2lmeSh2KV07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdiA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHJldHVybiBbXCJzcGFuXCIsIGtleXdvcmRTdHlsZSwgdl07XG4gICAgfSBlbHNlIGlmIChpc09iamVjdCh2KSkge1xuICAgICAgcmV0dXJuIFtcIm9iamVjdFwiLCB7IG9iamVjdDogYXNSYXcgPyB0b1Jhdyh2KSA6IHYgfV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXCJzcGFuXCIsIHN0cmluZ1N0eWxlLCBTdHJpbmcodildO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBleHRyYWN0S2V5cyhpbnN0YW5jZSwgdHlwZSkge1xuICAgIGNvbnN0IENvbXAgPSBpbnN0YW5jZS50eXBlO1xuICAgIGlmIChpc0Z1bmN0aW9uKENvbXApKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGV4dHJhY3RlZCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIGluc3RhbmNlLmN0eCkge1xuICAgICAgaWYgKGlzS2V5T2ZUeXBlKENvbXAsIGtleSwgdHlwZSkpIHtcbiAgICAgICAgZXh0cmFjdGVkW2tleV0gPSBpbnN0YW5jZS5jdHhba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGV4dHJhY3RlZDtcbiAgfVxuICBmdW5jdGlvbiBpc0tleU9mVHlwZShDb21wLCBrZXksIHR5cGUpIHtcbiAgICBjb25zdCBvcHRzID0gQ29tcFt0eXBlXTtcbiAgICBpZiAoaXNBcnJheShvcHRzKSAmJiBvcHRzLmluY2x1ZGVzKGtleSkgfHwgaXNPYmplY3Qob3B0cykgJiYga2V5IGluIG9wdHMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoQ29tcC5leHRlbmRzICYmIGlzS2V5T2ZUeXBlKENvbXAuZXh0ZW5kcywga2V5LCB0eXBlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChDb21wLm1peGlucyAmJiBDb21wLm1peGlucy5zb21lKChtKSA9PiBpc0tleU9mVHlwZShtLCBrZXksIHR5cGUpKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGdlblJlZkZsYWcodikge1xuICAgIGlmIChpc1NoYWxsb3codikpIHtcbiAgICAgIHJldHVybiBgU2hhbGxvd1JlZmA7XG4gICAgfVxuICAgIGlmICh2LmVmZmVjdCkge1xuICAgICAgcmV0dXJuIGBDb21wdXRlZFJlZmA7XG4gICAgfVxuICAgIHJldHVybiBgUmVmYDtcbiAgfVxuICBpZiAod2luZG93LmRldnRvb2xzRm9ybWF0dGVycykge1xuICAgIHdpbmRvdy5kZXZ0b29sc0Zvcm1hdHRlcnMucHVzaChmb3JtYXR0ZXIpO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5kZXZ0b29sc0Zvcm1hdHRlcnMgPSBbZm9ybWF0dGVyXTtcbiAgfVxufVxuXG5mdW5jdGlvbiB3aXRoTWVtbyhtZW1vLCByZW5kZXIsIGNhY2hlLCBpbmRleCkge1xuICBjb25zdCBjYWNoZWQgPSBjYWNoZVtpbmRleF07XG4gIGlmIChjYWNoZWQgJiYgaXNNZW1vU2FtZShjYWNoZWQsIG1lbW8pKSB7XG4gICAgcmV0dXJuIGNhY2hlZDtcbiAgfVxuICBjb25zdCByZXQgPSByZW5kZXIoKTtcbiAgcmV0Lm1lbW8gPSBtZW1vLnNsaWNlKCk7XG4gIHJldC5jYWNoZUluZGV4ID0gaW5kZXg7XG4gIHJldHVybiBjYWNoZVtpbmRleF0gPSByZXQ7XG59XG5mdW5jdGlvbiBpc01lbW9TYW1lKGNhY2hlZCwgbWVtbykge1xuICBjb25zdCBwcmV2ID0gY2FjaGVkLm1lbW87XG4gIGlmIChwcmV2Lmxlbmd0aCAhPSBtZW1vLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHByZXYubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaGFzQ2hhbmdlZChwcmV2W2ldLCBtZW1vW2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBpZiAoaXNCbG9ja1RyZWVFbmFibGVkID4gMCAmJiBjdXJyZW50QmxvY2spIHtcbiAgICBjdXJyZW50QmxvY2sucHVzaChjYWNoZWQpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5jb25zdCB2ZXJzaW9uID0gXCIzLjUuMjFcIjtcbmNvbnN0IHdhcm4gPSAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpID8gd2FybiQxIDogTk9PUDtcbmNvbnN0IEVycm9yVHlwZVN0cmluZ3MgPSBFcnJvclR5cGVTdHJpbmdzJDEgO1xuY29uc3QgZGV2dG9vbHMgPSAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IHRydWUgPyBkZXZ0b29scyQxIDogdm9pZCAwO1xuY29uc3Qgc2V0RGV2dG9vbHNIb29rID0gISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB8fCB0cnVlID8gc2V0RGV2dG9vbHNIb29rJDEgOiBOT09QO1xuY29uc3QgX3NzclV0aWxzID0ge1xuICBjcmVhdGVDb21wb25lbnRJbnN0YW5jZSxcbiAgc2V0dXBDb21wb25lbnQsXG4gIHJlbmRlckNvbXBvbmVudFJvb3QsXG4gIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSxcbiAgaXNWTm9kZTogaXNWTm9kZSxcbiAgbm9ybWFsaXplVk5vZGUsXG4gIGdldENvbXBvbmVudFB1YmxpY0luc3RhbmNlLFxuICBlbnN1cmVWYWxpZFZOb2RlLFxuICBwdXNoV2FybmluZ0NvbnRleHQsXG4gIHBvcFdhcm5pbmdDb250ZXh0XG59O1xuY29uc3Qgc3NyVXRpbHMgPSBfc3NyVXRpbHMgO1xuY29uc3QgcmVzb2x2ZUZpbHRlciA9IG51bGw7XG5jb25zdCBjb21wYXRVdGlscyA9IG51bGw7XG5jb25zdCBEZXByZWNhdGlvblR5cGVzID0gbnVsbDtcblxuZXhwb3J0IHsgQmFzZVRyYW5zaXRpb24sIEJhc2VUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzLCBDb21tZW50LCBEZXByZWNhdGlvblR5cGVzLCBFcnJvckNvZGVzLCBFcnJvclR5cGVTdHJpbmdzLCBGcmFnbWVudCwgS2VlcEFsaXZlLCBTdGF0aWMsIFN1c3BlbnNlLCBUZWxlcG9ydCwgVGV4dCwgYXNzZXJ0TnVtYmVyLCBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZywgY2FsbFdpdGhFcnJvckhhbmRsaW5nLCBjbG9uZVZOb2RlLCBjb21wYXRVdGlscywgY29tcHV0ZWQsIGNyZWF0ZUJsb2NrLCBjcmVhdGVDb21tZW50Vk5vZGUsIGNyZWF0ZUVsZW1lbnRCbG9jaywgY3JlYXRlQmFzZVZOb2RlIGFzIGNyZWF0ZUVsZW1lbnRWTm9kZSwgY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIsIGNyZWF0ZVByb3BzUmVzdFByb3h5LCBjcmVhdGVSZW5kZXJlciwgY3JlYXRlU2xvdHMsIGNyZWF0ZVN0YXRpY1ZOb2RlLCBjcmVhdGVUZXh0Vk5vZGUsIGNyZWF0ZVZOb2RlLCBkZWZpbmVBc3luY0NvbXBvbmVudCwgZGVmaW5lQ29tcG9uZW50LCBkZWZpbmVFbWl0cywgZGVmaW5lRXhwb3NlLCBkZWZpbmVNb2RlbCwgZGVmaW5lT3B0aW9ucywgZGVmaW5lUHJvcHMsIGRlZmluZVNsb3RzLCBkZXZ0b29scywgZ2V0Q3VycmVudEluc3RhbmNlLCBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4sIGd1YXJkUmVhY3RpdmVQcm9wcywgaCwgaGFuZGxlRXJyb3IsIGhhc0luamVjdGlvbkNvbnRleHQsIGh5ZHJhdGVPbklkbGUsIGh5ZHJhdGVPbkludGVyYWN0aW9uLCBoeWRyYXRlT25NZWRpYVF1ZXJ5LCBoeWRyYXRlT25WaXNpYmxlLCBpbml0Q3VzdG9tRm9ybWF0dGVyLCBpbmplY3QsIGlzTWVtb1NhbWUsIGlzUnVudGltZU9ubHksIGlzVk5vZGUsIG1lcmdlRGVmYXVsdHMsIG1lcmdlTW9kZWxzLCBtZXJnZVByb3BzLCBuZXh0VGljaywgb25BY3RpdmF0ZWQsIG9uQmVmb3JlTW91bnQsIG9uQmVmb3JlVW5tb3VudCwgb25CZWZvcmVVcGRhdGUsIG9uRGVhY3RpdmF0ZWQsIG9uRXJyb3JDYXB0dXJlZCwgb25Nb3VudGVkLCBvblJlbmRlclRyYWNrZWQsIG9uUmVuZGVyVHJpZ2dlcmVkLCBvblNlcnZlclByZWZldGNoLCBvblVubW91bnRlZCwgb25VcGRhdGVkLCBvcGVuQmxvY2ssIHBvcFNjb3BlSWQsIHByb3ZpZGUsIHB1c2hTY29wZUlkLCBxdWV1ZVBvc3RGbHVzaENiLCByZWdpc3RlclJ1bnRpbWVDb21waWxlciwgcmVuZGVyTGlzdCwgcmVuZGVyU2xvdCwgcmVzb2x2ZUNvbXBvbmVudCwgcmVzb2x2ZURpcmVjdGl2ZSwgcmVzb2x2ZUR5bmFtaWNDb21wb25lbnQsIHJlc29sdmVGaWx0ZXIsIHJlc29sdmVUcmFuc2l0aW9uSG9va3MsIHNldEJsb2NrVHJhY2tpbmcsIHNldERldnRvb2xzSG9vaywgc2V0VHJhbnNpdGlvbkhvb2tzLCBzc3JDb250ZXh0S2V5LCBzc3JVdGlscywgdG9IYW5kbGVycywgdHJhbnNmb3JtVk5vZGVBcmdzLCB1c2VBdHRycywgdXNlSWQsIHVzZU1vZGVsLCB1c2VTU1JDb250ZXh0LCB1c2VTbG90cywgdXNlVGVtcGxhdGVSZWYsIHVzZVRyYW5zaXRpb25TdGF0ZSwgdmVyc2lvbiwgd2Fybiwgd2F0Y2gsIHdhdGNoRWZmZWN0LCB3YXRjaFBvc3RFZmZlY3QsIHdhdGNoU3luY0VmZmVjdCwgd2l0aEFzeW5jQ29udGV4dCwgd2l0aEN0eCwgd2l0aERlZmF1bHRzLCB3aXRoRGlyZWN0aXZlcywgd2l0aE1lbW8sIHdpdGhTY29wZUlkIH07XG4iLCIvKipcbiogQHZ1ZS9ydW50aW1lLWRvbSB2My41LjIxXG4qIChjKSAyMDE4LXByZXNlbnQgWXV4aSAoRXZhbikgWW91IGFuZCBWdWUgY29udHJpYnV0b3JzXG4qIEBsaWNlbnNlIE1JVFxuKiovXG5pbXBvcnQgeyB3YXJuLCBCYXNlVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycywgaCwgQmFzZVRyYW5zaXRpb24sIGFzc2VydE51bWJlciwgZ2V0Q3VycmVudEluc3RhbmNlLCBvbkJlZm9yZVVwZGF0ZSwgcXVldWVQb3N0Rmx1c2hDYiwgb25Nb3VudGVkLCB3YXRjaCwgb25Vbm1vdW50ZWQsIEZyYWdtZW50LCBTdGF0aWMsIGNhbWVsaXplLCBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZywgZGVmaW5lQ29tcG9uZW50LCBuZXh0VGljaywgdW5yZWYsIGNyZWF0ZVZOb2RlLCB1c2VUcmFuc2l0aW9uU3RhdGUsIG9uVXBkYXRlZCwgdG9SYXcsIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbiwgc2V0VHJhbnNpdGlvbkhvb2tzLCByZXNvbHZlVHJhbnNpdGlvbkhvb2tzLCBUZXh0LCBjcmVhdGVSZW5kZXJlciwgY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIsIGlzUnVudGltZU9ubHkgfSBmcm9tICdAdnVlL3J1bnRpbWUtY29yZSc7XG5leHBvcnQgKiBmcm9tICdAdnVlL3J1bnRpbWUtY29yZSc7XG5pbXBvcnQgeyBleHRlbmQsIGlzT2JqZWN0LCB0b051bWJlciwgaXNBcnJheSwgTk9PUCwgbm9ybWFsaXplQ3NzVmFyVmFsdWUsIGlzU3RyaW5nLCBoeXBoZW5hdGUsIGNhcGl0YWxpemUsIGlzU3BlY2lhbEJvb2xlYW5BdHRyLCBpbmNsdWRlQm9vbGVhbkF0dHIsIGlzU3ltYm9sLCBpc0Z1bmN0aW9uLCBpc09uLCBpc01vZGVsTGlzdGVuZXIsIGNhbWVsaXplIGFzIGNhbWVsaXplJDEsIGlzUGxhaW5PYmplY3QsIGhhc093biwgRU1QVFlfT0JKLCBsb29zZVRvTnVtYmVyLCBsb29zZUluZGV4T2YsIGlzU2V0LCBsb29zZUVxdWFsLCBpbnZva2VBcnJheUZucywgaXNIVE1MVGFnLCBpc1NWR1RhZywgaXNNYXRoTUxUYWcgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmxldCBwb2xpY3kgPSB2b2lkIDA7XG5jb25zdCB0dCA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LnRydXN0ZWRUeXBlcztcbmlmICh0dCkge1xuICB0cnkge1xuICAgIHBvbGljeSA9IC8qIEBfX1BVUkVfXyAqLyB0dC5jcmVhdGVQb2xpY3koXCJ2dWVcIiwge1xuICAgICAgY3JlYXRlSFRNTDogKHZhbCkgPT4gdmFsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHdhcm4oYEVycm9yIGNyZWF0aW5nIHRydXN0ZWQgdHlwZXMgcG9saWN5OiAke2V9YCk7XG4gIH1cbn1cbmNvbnN0IHVuc2FmZVRvVHJ1c3RlZEhUTUwgPSBwb2xpY3kgPyAodmFsKSA9PiBwb2xpY3kuY3JlYXRlSFRNTCh2YWwpIDogKHZhbCkgPT4gdmFsO1xuY29uc3Qgc3ZnTlMgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7XG5jb25zdCBtYXRobWxOUyA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO1xuY29uc3QgZG9jID0gdHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiID8gZG9jdW1lbnQgOiBudWxsO1xuY29uc3QgdGVtcGxhdGVDb250YWluZXIgPSBkb2MgJiYgLyogQF9fUFVSRV9fICovIGRvYy5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7XG5jb25zdCBub2RlT3BzID0ge1xuICBpbnNlcnQ6IChjaGlsZCwgcGFyZW50LCBhbmNob3IpID0+IHtcbiAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBhbmNob3IgfHwgbnVsbCk7XG4gIH0sXG4gIHJlbW92ZTogKGNoaWxkKSA9PiB7XG4gICAgY29uc3QgcGFyZW50ID0gY2hpbGQucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgIH1cbiAgfSxcbiAgY3JlYXRlRWxlbWVudDogKHRhZywgbmFtZXNwYWNlLCBpcywgcHJvcHMpID0+IHtcbiAgICBjb25zdCBlbCA9IG5hbWVzcGFjZSA9PT0gXCJzdmdcIiA/IGRvYy5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsIHRhZykgOiBuYW1lc3BhY2UgPT09IFwibWF0aG1sXCIgPyBkb2MuY3JlYXRlRWxlbWVudE5TKG1hdGhtbE5TLCB0YWcpIDogaXMgPyBkb2MuY3JlYXRlRWxlbWVudCh0YWcsIHsgaXMgfSkgOiBkb2MuY3JlYXRlRWxlbWVudCh0YWcpO1xuICAgIGlmICh0YWcgPT09IFwic2VsZWN0XCIgJiYgcHJvcHMgJiYgcHJvcHMubXVsdGlwbGUgIT0gbnVsbCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKFwibXVsdGlwbGVcIiwgcHJvcHMubXVsdGlwbGUpO1xuICAgIH1cbiAgICByZXR1cm4gZWw7XG4gIH0sXG4gIGNyZWF0ZVRleHQ6ICh0ZXh0KSA9PiBkb2MuY3JlYXRlVGV4dE5vZGUodGV4dCksXG4gIGNyZWF0ZUNvbW1lbnQ6ICh0ZXh0KSA9PiBkb2MuY3JlYXRlQ29tbWVudCh0ZXh0KSxcbiAgc2V0VGV4dDogKG5vZGUsIHRleHQpID0+IHtcbiAgICBub2RlLm5vZGVWYWx1ZSA9IHRleHQ7XG4gIH0sXG4gIHNldEVsZW1lbnRUZXh0OiAoZWwsIHRleHQpID0+IHtcbiAgICBlbC50ZXh0Q29udGVudCA9IHRleHQ7XG4gIH0sXG4gIHBhcmVudE5vZGU6IChub2RlKSA9PiBub2RlLnBhcmVudE5vZGUsXG4gIG5leHRTaWJsaW5nOiAobm9kZSkgPT4gbm9kZS5uZXh0U2libGluZyxcbiAgcXVlcnlTZWxlY3RvcjogKHNlbGVjdG9yKSA9PiBkb2MucXVlcnlTZWxlY3RvcihzZWxlY3RvciksXG4gIHNldFNjb3BlSWQoZWwsIGlkKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKGlkLCBcIlwiKTtcbiAgfSxcbiAgLy8gX19VTlNBRkVfX1xuICAvLyBSZWFzb246IGlubmVySFRNTC5cbiAgLy8gU3RhdGljIGNvbnRlbnQgaGVyZSBjYW4gb25seSBjb21lIGZyb20gY29tcGlsZWQgdGVtcGxhdGVzLlxuICAvLyBBcyBsb25nIGFzIHRoZSB1c2VyIG9ubHkgdXNlcyB0cnVzdGVkIHRlbXBsYXRlcywgdGhpcyBpcyBzYWZlLlxuICBpbnNlcnRTdGF0aWNDb250ZW50KGNvbnRlbnQsIHBhcmVudCwgYW5jaG9yLCBuYW1lc3BhY2UsIHN0YXJ0LCBlbmQpIHtcbiAgICBjb25zdCBiZWZvcmUgPSBhbmNob3IgPyBhbmNob3IucHJldmlvdXNTaWJsaW5nIDogcGFyZW50Lmxhc3RDaGlsZDtcbiAgICBpZiAoc3RhcnQgJiYgKHN0YXJ0ID09PSBlbmQgfHwgc3RhcnQubmV4dFNpYmxpbmcpKSB7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHN0YXJ0LmNsb25lTm9kZSh0cnVlKSwgYW5jaG9yKTtcbiAgICAgICAgaWYgKHN0YXJ0ID09PSBlbmQgfHwgIShzdGFydCA9IHN0YXJ0Lm5leHRTaWJsaW5nKSkgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRlbXBsYXRlQ29udGFpbmVyLmlubmVySFRNTCA9IHVuc2FmZVRvVHJ1c3RlZEhUTUwoXG4gICAgICAgIG5hbWVzcGFjZSA9PT0gXCJzdmdcIiA/IGA8c3ZnPiR7Y29udGVudH08L3N2Zz5gIDogbmFtZXNwYWNlID09PSBcIm1hdGhtbFwiID8gYDxtYXRoPiR7Y29udGVudH08L21hdGg+YCA6IGNvbnRlbnRcbiAgICAgICk7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ29udGFpbmVyLmNvbnRlbnQ7XG4gICAgICBpZiAobmFtZXNwYWNlID09PSBcInN2Z1wiIHx8IG5hbWVzcGFjZSA9PT0gXCJtYXRobWxcIikge1xuICAgICAgICBjb25zdCB3cmFwcGVyID0gdGVtcGxhdGUuZmlyc3RDaGlsZDtcbiAgICAgICAgd2hpbGUgKHdyYXBwZXIuZmlyc3RDaGlsZCkge1xuICAgICAgICAgIHRlbXBsYXRlLmFwcGVuZENoaWxkKHdyYXBwZXIuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGVtcGxhdGUucmVtb3ZlQ2hpbGQod3JhcHBlcik7XG4gICAgICB9XG4gICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRlbXBsYXRlLCBhbmNob3IpO1xuICAgIH1cbiAgICByZXR1cm4gW1xuICAgICAgLy8gZmlyc3RcbiAgICAgIGJlZm9yZSA/IGJlZm9yZS5uZXh0U2libGluZyA6IHBhcmVudC5maXJzdENoaWxkLFxuICAgICAgLy8gbGFzdFxuICAgICAgYW5jaG9yID8gYW5jaG9yLnByZXZpb3VzU2libGluZyA6IHBhcmVudC5sYXN0Q2hpbGRcbiAgICBdO1xuICB9XG59O1xuXG5jb25zdCBUUkFOU0lUSU9OID0gXCJ0cmFuc2l0aW9uXCI7XG5jb25zdCBBTklNQVRJT04gPSBcImFuaW1hdGlvblwiO1xuY29uc3QgdnRjS2V5ID0gU3ltYm9sKFwiX3Z0Y1wiKTtcbmNvbnN0IERPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMgPSB7XG4gIG5hbWU6IFN0cmluZyxcbiAgdHlwZTogU3RyaW5nLFxuICBjc3M6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgZHVyYXRpb246IFtTdHJpbmcsIE51bWJlciwgT2JqZWN0XSxcbiAgZW50ZXJGcm9tQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyRnJvbUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVGcm9tQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVBY3RpdmVDbGFzczogU3RyaW5nLFxuICBsZWF2ZVRvQ2xhc3M6IFN0cmluZ1xufTtcbmNvbnN0IFRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMgPSAvKiBAX19QVVJFX18gKi8gZXh0ZW5kKFxuICB7fSxcbiAgQmFzZVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMsXG4gIERPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnNcbik7XG5jb25zdCBkZWNvcmF0ZSQxID0gKHQpID0+IHtcbiAgdC5kaXNwbGF5TmFtZSA9IFwiVHJhbnNpdGlvblwiO1xuICB0LnByb3BzID0gVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycztcbiAgcmV0dXJuIHQ7XG59O1xuY29uc3QgVHJhbnNpdGlvbiA9IC8qIEBfX1BVUkVfXyAqLyBkZWNvcmF0ZSQxKFxuICAocHJvcHMsIHsgc2xvdHMgfSkgPT4gaChCYXNlVHJhbnNpdGlvbiwgcmVzb2x2ZVRyYW5zaXRpb25Qcm9wcyhwcm9wcyksIHNsb3RzKVxuKTtcbmNvbnN0IGNhbGxIb29rID0gKGhvb2ssIGFyZ3MgPSBbXSkgPT4ge1xuICBpZiAoaXNBcnJheShob29rKSkge1xuICAgIGhvb2suZm9yRWFjaCgoaDIpID0+IGgyKC4uLmFyZ3MpKTtcbiAgfSBlbHNlIGlmIChob29rKSB7XG4gICAgaG9vayguLi5hcmdzKTtcbiAgfVxufTtcbmNvbnN0IGhhc0V4cGxpY2l0Q2FsbGJhY2sgPSAoaG9vaykgPT4ge1xuICByZXR1cm4gaG9vayA/IGlzQXJyYXkoaG9vaykgPyBob29rLnNvbWUoKGgyKSA9PiBoMi5sZW5ndGggPiAxKSA6IGhvb2subGVuZ3RoID4gMSA6IGZhbHNlO1xufTtcbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uUHJvcHMocmF3UHJvcHMpIHtcbiAgY29uc3QgYmFzZVByb3BzID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIHJhd1Byb3BzKSB7XG4gICAgaWYgKCEoa2V5IGluIERPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMpKSB7XG4gICAgICBiYXNlUHJvcHNba2V5XSA9IHJhd1Byb3BzW2tleV07XG4gICAgfVxuICB9XG4gIGlmIChyYXdQcm9wcy5jc3MgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGJhc2VQcm9wcztcbiAgfVxuICBjb25zdCB7XG4gICAgbmFtZSA9IFwidlwiLFxuICAgIHR5cGUsXG4gICAgZHVyYXRpb24sXG4gICAgZW50ZXJGcm9tQ2xhc3MgPSBgJHtuYW1lfS1lbnRlci1mcm9tYCxcbiAgICBlbnRlckFjdGl2ZUNsYXNzID0gYCR7bmFtZX0tZW50ZXItYWN0aXZlYCxcbiAgICBlbnRlclRvQ2xhc3MgPSBgJHtuYW1lfS1lbnRlci10b2AsXG4gICAgYXBwZWFyRnJvbUNsYXNzID0gZW50ZXJGcm9tQ2xhc3MsXG4gICAgYXBwZWFyQWN0aXZlQ2xhc3MgPSBlbnRlckFjdGl2ZUNsYXNzLFxuICAgIGFwcGVhclRvQ2xhc3MgPSBlbnRlclRvQ2xhc3MsXG4gICAgbGVhdmVGcm9tQ2xhc3MgPSBgJHtuYW1lfS1sZWF2ZS1mcm9tYCxcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzID0gYCR7bmFtZX0tbGVhdmUtYWN0aXZlYCxcbiAgICBsZWF2ZVRvQ2xhc3MgPSBgJHtuYW1lfS1sZWF2ZS10b2BcbiAgfSA9IHJhd1Byb3BzO1xuICBjb25zdCBkdXJhdGlvbnMgPSBub3JtYWxpemVEdXJhdGlvbihkdXJhdGlvbik7XG4gIGNvbnN0IGVudGVyRHVyYXRpb24gPSBkdXJhdGlvbnMgJiYgZHVyYXRpb25zWzBdO1xuICBjb25zdCBsZWF2ZUR1cmF0aW9uID0gZHVyYXRpb25zICYmIGR1cmF0aW9uc1sxXTtcbiAgY29uc3Qge1xuICAgIG9uQmVmb3JlRW50ZXIsXG4gICAgb25FbnRlcixcbiAgICBvbkVudGVyQ2FuY2VsbGVkLFxuICAgIG9uTGVhdmUsXG4gICAgb25MZWF2ZUNhbmNlbGxlZCxcbiAgICBvbkJlZm9yZUFwcGVhciA9IG9uQmVmb3JlRW50ZXIsXG4gICAgb25BcHBlYXIgPSBvbkVudGVyLFxuICAgIG9uQXBwZWFyQ2FuY2VsbGVkID0gb25FbnRlckNhbmNlbGxlZFxuICB9ID0gYmFzZVByb3BzO1xuICBjb25zdCBmaW5pc2hFbnRlciA9IChlbCwgaXNBcHBlYXIsIGRvbmUsIGlzQ2FuY2VsbGVkKSA9PiB7XG4gICAgZWwuX2VudGVyQ2FuY2VsbGVkID0gaXNDYW5jZWxsZWQ7XG4gICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBpc0FwcGVhciA/IGFwcGVhclRvQ2xhc3MgOiBlbnRlclRvQ2xhc3MpO1xuICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgaXNBcHBlYXIgPyBhcHBlYXJBY3RpdmVDbGFzcyA6IGVudGVyQWN0aXZlQ2xhc3MpO1xuICAgIGRvbmUgJiYgZG9uZSgpO1xuICB9O1xuICBjb25zdCBmaW5pc2hMZWF2ZSA9IChlbCwgZG9uZSkgPT4ge1xuICAgIGVsLl9pc0xlYXZpbmcgPSBmYWxzZTtcbiAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlRnJvbUNsYXNzKTtcbiAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICBkb25lICYmIGRvbmUoKTtcbiAgfTtcbiAgY29uc3QgbWFrZUVudGVySG9vayA9IChpc0FwcGVhcikgPT4ge1xuICAgIHJldHVybiAoZWwsIGRvbmUpID0+IHtcbiAgICAgIGNvbnN0IGhvb2sgPSBpc0FwcGVhciA/IG9uQXBwZWFyIDogb25FbnRlcjtcbiAgICAgIGNvbnN0IHJlc29sdmUgPSAoKSA9PiBmaW5pc2hFbnRlcihlbCwgaXNBcHBlYXIsIGRvbmUpO1xuICAgICAgY2FsbEhvb2soaG9vaywgW2VsLCByZXNvbHZlXSk7XG4gICAgICBuZXh0RnJhbWUoKCkgPT4ge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGlzQXBwZWFyID8gYXBwZWFyRnJvbUNsYXNzIDogZW50ZXJGcm9tQ2xhc3MpO1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGlzQXBwZWFyID8gYXBwZWFyVG9DbGFzcyA6IGVudGVyVG9DbGFzcyk7XG4gICAgICAgIGlmICghaGFzRXhwbGljaXRDYWxsYmFjayhob29rKSkge1xuICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgZW50ZXJEdXJhdGlvbiwgcmVzb2x2ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG4gIHJldHVybiBleHRlbmQoYmFzZVByb3BzLCB7XG4gICAgb25CZWZvcmVFbnRlcihlbCkge1xuICAgICAgY2FsbEhvb2sob25CZWZvcmVFbnRlciwgW2VsXSk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGVudGVyRnJvbUNsYXNzKTtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgZW50ZXJBY3RpdmVDbGFzcyk7XG4gICAgfSxcbiAgICBvbkJlZm9yZUFwcGVhcihlbCkge1xuICAgICAgY2FsbEhvb2sob25CZWZvcmVBcHBlYXIsIFtlbF0pO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhcHBlYXJGcm9tQ2xhc3MpO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhcHBlYXJBY3RpdmVDbGFzcyk7XG4gICAgfSxcbiAgICBvbkVudGVyOiBtYWtlRW50ZXJIb29rKGZhbHNlKSxcbiAgICBvbkFwcGVhcjogbWFrZUVudGVySG9vayh0cnVlKSxcbiAgICBvbkxlYXZlKGVsLCBkb25lKSB7XG4gICAgICBlbC5faXNMZWF2aW5nID0gdHJ1ZTtcbiAgICAgIGNvbnN0IHJlc29sdmUgPSAoKSA9PiBmaW5pc2hMZWF2ZShlbCwgZG9uZSk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlRnJvbUNsYXNzKTtcbiAgICAgIGlmICghZWwuX2VudGVyQ2FuY2VsbGVkKSB7XG4gICAgICAgIGZvcmNlUmVmbG93KCk7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgICAgICBmb3JjZVJlZmxvdygpO1xuICAgICAgfVxuICAgICAgbmV4dEZyYW1lKCgpID0+IHtcbiAgICAgICAgaWYgKCFlbC5faXNMZWF2aW5nKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVGcm9tQ2xhc3MpO1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgIGlmICghaGFzRXhwbGljaXRDYWxsYmFjayhvbkxlYXZlKSkge1xuICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgbGVhdmVEdXJhdGlvbiwgcmVzb2x2ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY2FsbEhvb2sob25MZWF2ZSwgW2VsLCByZXNvbHZlXSk7XG4gICAgfSxcbiAgICBvbkVudGVyQ2FuY2VsbGVkKGVsKSB7XG4gICAgICBmaW5pc2hFbnRlcihlbCwgZmFsc2UsIHZvaWQgMCwgdHJ1ZSk7XG4gICAgICBjYWxsSG9vayhvbkVudGVyQ2FuY2VsbGVkLCBbZWxdKTtcbiAgICB9LFxuICAgIG9uQXBwZWFyQ2FuY2VsbGVkKGVsKSB7XG4gICAgICBmaW5pc2hFbnRlcihlbCwgdHJ1ZSwgdm9pZCAwLCB0cnVlKTtcbiAgICAgIGNhbGxIb29rKG9uQXBwZWFyQ2FuY2VsbGVkLCBbZWxdKTtcbiAgICB9LFxuICAgIG9uTGVhdmVDYW5jZWxsZWQoZWwpIHtcbiAgICAgIGZpbmlzaExlYXZlKGVsKTtcbiAgICAgIGNhbGxIb29rKG9uTGVhdmVDYW5jZWxsZWQsIFtlbF0pO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVEdXJhdGlvbihkdXJhdGlvbikge1xuICBpZiAoZHVyYXRpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGR1cmF0aW9uKSkge1xuICAgIHJldHVybiBbTnVtYmVyT2YoZHVyYXRpb24uZW50ZXIpLCBOdW1iZXJPZihkdXJhdGlvbi5sZWF2ZSldO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IG4gPSBOdW1iZXJPZihkdXJhdGlvbik7XG4gICAgcmV0dXJuIFtuLCBuXTtcbiAgfVxufVxuZnVuY3Rpb24gTnVtYmVyT2YodmFsKSB7XG4gIGNvbnN0IHJlcyA9IHRvTnVtYmVyKHZhbCk7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgYXNzZXJ0TnVtYmVyKHJlcywgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgZHVyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgY2xzKSB7XG4gIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goKGMpID0+IGMgJiYgZWwuY2xhc3NMaXN0LmFkZChjKSk7XG4gIChlbFt2dGNLZXldIHx8IChlbFt2dGNLZXldID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSkpLmFkZChjbHMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBjbHMpIHtcbiAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaCgoYykgPT4gYyAmJiBlbC5jbGFzc0xpc3QucmVtb3ZlKGMpKTtcbiAgY29uc3QgX3Z0YyA9IGVsW3Z0Y0tleV07XG4gIGlmIChfdnRjKSB7XG4gICAgX3Z0Yy5kZWxldGUoY2xzKTtcbiAgICBpZiAoIV92dGMuc2l6ZSkge1xuICAgICAgZWxbdnRjS2V5XSA9IHZvaWQgMDtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIG5leHRGcmFtZShjYikge1xuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYik7XG4gIH0pO1xufVxubGV0IGVuZElkID0gMDtcbmZ1bmN0aW9uIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgZXhwZWN0ZWRUeXBlLCBleHBsaWNpdFRpbWVvdXQsIHJlc29sdmUpIHtcbiAgY29uc3QgaWQgPSBlbC5fZW5kSWQgPSArK2VuZElkO1xuICBjb25zdCByZXNvbHZlSWZOb3RTdGFsZSA9ICgpID0+IHtcbiAgICBpZiAoaWQgPT09IGVsLl9lbmRJZCkge1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH1cbiAgfTtcbiAgaWYgKGV4cGxpY2l0VGltZW91dCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQocmVzb2x2ZUlmTm90U3RhbGUsIGV4cGxpY2l0VGltZW91dCk7XG4gIH1cbiAgY29uc3QgeyB0eXBlLCB0aW1lb3V0LCBwcm9wQ291bnQgfSA9IGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpO1xuICBpZiAoIXR5cGUpIHtcbiAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICB9XG4gIGNvbnN0IGVuZEV2ZW50ID0gdHlwZSArIFwiZW5kXCI7XG4gIGxldCBlbmRlZCA9IDA7XG4gIGNvbnN0IGVuZCA9ICgpID0+IHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGVuZEV2ZW50LCBvbkVuZCk7XG4gICAgcmVzb2x2ZUlmTm90U3RhbGUoKTtcbiAgfTtcbiAgY29uc3Qgb25FbmQgPSAoZSkgPT4ge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZWwgJiYgKytlbmRlZCA+PSBwcm9wQ291bnQpIHtcbiAgICAgIGVuZCgpO1xuICAgIH1cbiAgfTtcbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH0sIHRpbWVvdXQgKyAxKTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihlbmRFdmVudCwgb25FbmQpO1xufVxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSkge1xuICBjb25zdCBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIGNvbnN0IGdldFN0eWxlUHJvcGVydGllcyA9IChrZXkpID0+IChzdHlsZXNba2V5XSB8fCBcIlwiKS5zcGxpdChcIiwgXCIpO1xuICBjb25zdCB0cmFuc2l0aW9uRGVsYXlzID0gZ2V0U3R5bGVQcm9wZXJ0aWVzKGAke1RSQU5TSVRJT059RGVsYXlgKTtcbiAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IGdldFN0eWxlUHJvcGVydGllcyhgJHtUUkFOU0lUSU9OfUR1cmF0aW9uYCk7XG4gIGNvbnN0IHRyYW5zaXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dCh0cmFuc2l0aW9uRGVsYXlzLCB0cmFuc2l0aW9uRHVyYXRpb25zKTtcbiAgY29uc3QgYW5pbWF0aW9uRGVsYXlzID0gZ2V0U3R5bGVQcm9wZXJ0aWVzKGAke0FOSU1BVElPTn1EZWxheWApO1xuICBjb25zdCBhbmltYXRpb25EdXJhdGlvbnMgPSBnZXRTdHlsZVByb3BlcnRpZXMoYCR7QU5JTUFUSU9OfUR1cmF0aW9uYCk7XG4gIGNvbnN0IGFuaW1hdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KGFuaW1hdGlvbkRlbGF5cywgYW5pbWF0aW9uRHVyYXRpb25zKTtcbiAgbGV0IHR5cGUgPSBudWxsO1xuICBsZXQgdGltZW91dCA9IDA7XG4gIGxldCBwcm9wQ291bnQgPSAwO1xuICBpZiAoZXhwZWN0ZWRUeXBlID09PSBUUkFOU0lUSU9OKSB7XG4gICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IFRSQU5TSVRJT047XG4gICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHtcbiAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBBTklNQVRJT047XG4gICAgICB0aW1lb3V0ID0gYW5pbWF0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XG4gICAgdHlwZSA9IHRpbWVvdXQgPiAwID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0ID8gVFJBTlNJVElPTiA6IEFOSU1BVElPTiA6IG51bGw7XG4gICAgcHJvcENvdW50ID0gdHlwZSA/IHR5cGUgPT09IFRSQU5TSVRJT04gPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aCA6IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGggOiAwO1xuICB9XG4gIGNvbnN0IGhhc1RyYW5zZm9ybSA9IHR5cGUgPT09IFRSQU5TSVRJT04gJiYgL1xcYig/OnRyYW5zZm9ybXxhbGwpKD86LHwkKS8udGVzdChcbiAgICBnZXRTdHlsZVByb3BlcnRpZXMoYCR7VFJBTlNJVElPTn1Qcm9wZXJ0eWApLnRvU3RyaW5nKClcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlLFxuICAgIHRpbWVvdXQsXG4gICAgcHJvcENvdW50LFxuICAgIGhhc1RyYW5zZm9ybVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0VGltZW91dChkZWxheXMsIGR1cmF0aW9ucykge1xuICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcbiAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XG4gIH1cbiAgcmV0dXJuIE1hdGgubWF4KC4uLmR1cmF0aW9ucy5tYXAoKGQsIGkpID0+IHRvTXMoZCkgKyB0b01zKGRlbGF5c1tpXSkpKTtcbn1cbmZ1bmN0aW9uIHRvTXMocykge1xuICBpZiAocyA9PT0gXCJhdXRvXCIpIHJldHVybiAwO1xuICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpLnJlcGxhY2UoXCIsXCIsIFwiLlwiKSkgKiAxZTM7XG59XG5mdW5jdGlvbiBmb3JjZVJlZmxvdygpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xufVxuXG5mdW5jdGlvbiBwYXRjaENsYXNzKGVsLCB2YWx1ZSwgaXNTVkcpIHtcbiAgY29uc3QgdHJhbnNpdGlvbkNsYXNzZXMgPSBlbFt2dGNLZXldO1xuICBpZiAodHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICB2YWx1ZSA9ICh2YWx1ZSA/IFt2YWx1ZSwgLi4udHJhbnNpdGlvbkNsYXNzZXNdIDogWy4uLnRyYW5zaXRpb25DbGFzc2VzXSkuam9pbihcIiBcIik7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoXCJjbGFzc1wiKTtcbiAgfSBlbHNlIGlmIChpc1NWRykge1xuICAgIGVsLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBlbC5jbGFzc05hbWUgPSB2YWx1ZTtcbiAgfVxufVxuXG5jb25zdCB2U2hvd09yaWdpbmFsRGlzcGxheSA9IFN5bWJvbChcIl92b2RcIik7XG5jb25zdCB2U2hvd0hpZGRlbiA9IFN5bWJvbChcIl92c2hcIik7XG5jb25zdCB2U2hvdyA9IHtcbiAgLy8gdXNlZCBmb3IgcHJvcCBtaXNtYXRjaCBjaGVjayBkdXJpbmcgaHlkcmF0aW9uXG4gIG5hbWU6IFwic2hvd1wiLFxuICBiZWZvcmVNb3VudChlbCwgeyB2YWx1ZSB9LCB7IHRyYW5zaXRpb24gfSkge1xuICAgIGVsW3ZTaG93T3JpZ2luYWxEaXNwbGF5XSA9IGVsLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGVsLnN0eWxlLmRpc3BsYXk7XG4gICAgaWYgKHRyYW5zaXRpb24gJiYgdmFsdWUpIHtcbiAgICAgIHRyYW5zaXRpb24uYmVmb3JlRW50ZXIoZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXREaXNwbGF5KGVsLCB2YWx1ZSk7XG4gICAgfVxuICB9LFxuICBtb3VudGVkKGVsLCB7IHZhbHVlIH0sIHsgdHJhbnNpdGlvbiB9KSB7XG4gICAgaWYgKHRyYW5zaXRpb24gJiYgdmFsdWUpIHtcbiAgICAgIHRyYW5zaXRpb24uZW50ZXIoZWwpO1xuICAgIH1cbiAgfSxcbiAgdXBkYXRlZChlbCwgeyB2YWx1ZSwgb2xkVmFsdWUgfSwgeyB0cmFuc2l0aW9uIH0pIHtcbiAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpIHJldHVybjtcbiAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRyYW5zaXRpb24uYmVmb3JlRW50ZXIoZWwpO1xuICAgICAgICBzZXREaXNwbGF5KGVsLCB0cnVlKTtcbiAgICAgICAgdHJhbnNpdGlvbi5lbnRlcihlbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2l0aW9uLmxlYXZlKGVsLCAoKSA9PiB7XG4gICAgICAgICAgc2V0RGlzcGxheShlbCwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2V0RGlzcGxheShlbCwgdmFsdWUpO1xuICAgIH1cbiAgfSxcbiAgYmVmb3JlVW5tb3VudChlbCwgeyB2YWx1ZSB9KSB7XG4gICAgc2V0RGlzcGxheShlbCwgdmFsdWUpO1xuICB9XG59O1xuZnVuY3Rpb24gc2V0RGlzcGxheShlbCwgdmFsdWUpIHtcbiAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gZWxbdlNob3dPcmlnaW5hbERpc3BsYXldIDogXCJub25lXCI7XG4gIGVsW3ZTaG93SGlkZGVuXSA9ICF2YWx1ZTtcbn1cbmZ1bmN0aW9uIGluaXRWU2hvd0ZvclNTUigpIHtcbiAgdlNob3cuZ2V0U1NSUHJvcHMgPSAoeyB2YWx1ZSB9KSA9PiB7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgcmV0dXJuIHsgc3R5bGU6IHsgZGlzcGxheTogXCJub25lXCIgfSB9O1xuICAgIH1cbiAgfTtcbn1cblxuY29uc3QgQ1NTX1ZBUl9URVhUID0gU3ltYm9sKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgPyBcIkNTU19WQVJfVEVYVFwiIDogXCJcIik7XG5mdW5jdGlvbiB1c2VDc3NWYXJzKGdldHRlcikge1xuICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBpZiAoIWluc3RhbmNlKSB7XG4gICAgISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiB3YXJuKGB1c2VDc3NWYXJzIGlzIGNhbGxlZCB3aXRob3V0IGN1cnJlbnQgYWN0aXZlIGNvbXBvbmVudCBpbnN0YW5jZS5gKTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgdXBkYXRlVGVsZXBvcnRzID0gaW5zdGFuY2UudXQgPSAodmFycyA9IGdldHRlcihpbnN0YW5jZS5wcm94eSkpID0+IHtcbiAgICBBcnJheS5mcm9tKFxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgW2RhdGEtdi1vd25lcj1cIiR7aW5zdGFuY2UudWlkfVwiXWApXG4gICAgKS5mb3JFYWNoKChub2RlKSA9PiBzZXRWYXJzT25Ob2RlKG5vZGUsIHZhcnMpKTtcbiAgfTtcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICBpbnN0YW5jZS5nZXRDc3NWYXJzID0gKCkgPT4gZ2V0dGVyKGluc3RhbmNlLnByb3h5KTtcbiAgfVxuICBjb25zdCBzZXRWYXJzID0gKCkgPT4ge1xuICAgIGNvbnN0IHZhcnMgPSBnZXR0ZXIoaW5zdGFuY2UucHJveHkpO1xuICAgIGlmIChpbnN0YW5jZS5jZSkge1xuICAgICAgc2V0VmFyc09uTm9kZShpbnN0YW5jZS5jZSwgdmFycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFZhcnNPblZOb2RlKGluc3RhbmNlLnN1YlRyZWUsIHZhcnMpO1xuICAgIH1cbiAgICB1cGRhdGVUZWxlcG9ydHModmFycyk7XG4gIH07XG4gIG9uQmVmb3JlVXBkYXRlKCgpID0+IHtcbiAgICBxdWV1ZVBvc3RGbHVzaENiKHNldFZhcnMpO1xuICB9KTtcbiAgb25Nb3VudGVkKCgpID0+IHtcbiAgICB3YXRjaChzZXRWYXJzLCBOT09QLCB7IGZsdXNoOiBcInBvc3RcIiB9KTtcbiAgICBjb25zdCBvYiA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHNldFZhcnMpO1xuICAgIG9iLm9ic2VydmUoaW5zdGFuY2Uuc3ViVHJlZS5lbC5wYXJlbnROb2RlLCB7IGNoaWxkTGlzdDogdHJ1ZSB9KTtcbiAgICBvblVubW91bnRlZCgoKSA9PiBvYi5kaXNjb25uZWN0KCkpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHNldFZhcnNPblZOb2RlKHZub2RlLCB2YXJzKSB7XG4gIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxMjgpIHtcbiAgICBjb25zdCBzdXNwZW5zZSA9IHZub2RlLnN1c3BlbnNlO1xuICAgIHZub2RlID0gc3VzcGVuc2UuYWN0aXZlQnJhbmNoO1xuICAgIGlmIChzdXNwZW5zZS5wZW5kaW5nQnJhbmNoICYmICFzdXNwZW5zZS5pc0h5ZHJhdGluZykge1xuICAgICAgc3VzcGVuc2UuZWZmZWN0cy5wdXNoKCgpID0+IHtcbiAgICAgICAgc2V0VmFyc09uVk5vZGUoc3VzcGVuc2UuYWN0aXZlQnJhbmNoLCB2YXJzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICB3aGlsZSAodm5vZGUuY29tcG9uZW50KSB7XG4gICAgdm5vZGUgPSB2bm9kZS5jb21wb25lbnQuc3ViVHJlZTtcbiAgfVxuICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMSAmJiB2bm9kZS5lbCkge1xuICAgIHNldFZhcnNPbk5vZGUodm5vZGUuZWwsIHZhcnMpO1xuICB9IGVsc2UgaWYgKHZub2RlLnR5cGUgPT09IEZyYWdtZW50KSB7XG4gICAgdm5vZGUuY2hpbGRyZW4uZm9yRWFjaCgoYykgPT4gc2V0VmFyc09uVk5vZGUoYywgdmFycykpO1xuICB9IGVsc2UgaWYgKHZub2RlLnR5cGUgPT09IFN0YXRpYykge1xuICAgIGxldCB7IGVsLCBhbmNob3IgfSA9IHZub2RlO1xuICAgIHdoaWxlIChlbCkge1xuICAgICAgc2V0VmFyc09uTm9kZShlbCwgdmFycyk7XG4gICAgICBpZiAoZWwgPT09IGFuY2hvcikgYnJlYWs7XG4gICAgICBlbCA9IGVsLm5leHRTaWJsaW5nO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc2V0VmFyc09uTm9kZShlbCwgdmFycykge1xuICBpZiAoZWwubm9kZVR5cGUgPT09IDEpIHtcbiAgICBjb25zdCBzdHlsZSA9IGVsLnN0eWxlO1xuICAgIGxldCBjc3NUZXh0ID0gXCJcIjtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB2YXJzKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG5vcm1hbGl6ZUNzc1ZhclZhbHVlKHZhcnNba2V5XSk7XG4gICAgICBzdHlsZS5zZXRQcm9wZXJ0eShgLS0ke2tleX1gLCB2YWx1ZSk7XG4gICAgICBjc3NUZXh0ICs9IGAtLSR7a2V5fTogJHt2YWx1ZX07YDtcbiAgICB9XG4gICAgc3R5bGVbQ1NTX1ZBUl9URVhUXSA9IGNzc1RleHQ7XG4gIH1cbn1cblxuY29uc3QgZGlzcGxheVJFID0gLyg/Ol58OylcXHMqZGlzcGxheVxccyo6LztcbmZ1bmN0aW9uIHBhdGNoU3R5bGUoZWwsIHByZXYsIG5leHQpIHtcbiAgY29uc3Qgc3R5bGUgPSBlbC5zdHlsZTtcbiAgY29uc3QgaXNDc3NTdHJpbmcgPSBpc1N0cmluZyhuZXh0KTtcbiAgbGV0IGhhc0NvbnRyb2xsZWREaXNwbGF5ID0gZmFsc2U7XG4gIGlmIChuZXh0ICYmICFpc0Nzc1N0cmluZykge1xuICAgIGlmIChwcmV2KSB7XG4gICAgICBpZiAoIWlzU3RyaW5nKHByZXYpKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByZXYpIHtcbiAgICAgICAgICBpZiAobmV4dFtrZXldID09IG51bGwpIHtcbiAgICAgICAgICAgIHNldFN0eWxlKHN0eWxlLCBrZXksIFwiXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChjb25zdCBwcmV2U3R5bGUgb2YgcHJldi5zcGxpdChcIjtcIikpIHtcbiAgICAgICAgICBjb25zdCBrZXkgPSBwcmV2U3R5bGUuc2xpY2UoMCwgcHJldlN0eWxlLmluZGV4T2YoXCI6XCIpKS50cmltKCk7XG4gICAgICAgICAgaWYgKG5leHRba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICBzZXRTdHlsZShzdHlsZSwga2V5LCBcIlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gbmV4dCkge1xuICAgICAgaWYgKGtleSA9PT0gXCJkaXNwbGF5XCIpIHtcbiAgICAgICAgaGFzQ29udHJvbGxlZERpc3BsYXkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgc2V0U3R5bGUoc3R5bGUsIGtleSwgbmV4dFtrZXldKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzQ3NzU3RyaW5nKSB7XG4gICAgICBpZiAocHJldiAhPT0gbmV4dCkge1xuICAgICAgICBjb25zdCBjc3NWYXJUZXh0ID0gc3R5bGVbQ1NTX1ZBUl9URVhUXTtcbiAgICAgICAgaWYgKGNzc1ZhclRleHQpIHtcbiAgICAgICAgICBuZXh0ICs9IFwiO1wiICsgY3NzVmFyVGV4dDtcbiAgICAgICAgfVxuICAgICAgICBzdHlsZS5jc3NUZXh0ID0gbmV4dDtcbiAgICAgICAgaGFzQ29udHJvbGxlZERpc3BsYXkgPSBkaXNwbGF5UkUudGVzdChuZXh0KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByZXYpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShcInN0eWxlXCIpO1xuICAgIH1cbiAgfVxuICBpZiAodlNob3dPcmlnaW5hbERpc3BsYXkgaW4gZWwpIHtcbiAgICBlbFt2U2hvd09yaWdpbmFsRGlzcGxheV0gPSBoYXNDb250cm9sbGVkRGlzcGxheSA/IHN0eWxlLmRpc3BsYXkgOiBcIlwiO1xuICAgIGlmIChlbFt2U2hvd0hpZGRlbl0pIHtcbiAgICAgIHN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICB9XG4gIH1cbn1cbmNvbnN0IHNlbWljb2xvblJFID0gL1teXFxcXF07XFxzKiQvO1xuY29uc3QgaW1wb3J0YW50UkUgPSAvXFxzKiFpbXBvcnRhbnQkLztcbmZ1bmN0aW9uIHNldFN0eWxlKHN0eWxlLCBuYW1lLCB2YWwpIHtcbiAgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgIHZhbC5mb3JFYWNoKCh2KSA9PiBzZXRTdHlsZShzdHlsZSwgbmFtZSwgdikpO1xuICB9IGVsc2Uge1xuICAgIGlmICh2YWwgPT0gbnVsbCkgdmFsID0gXCJcIjtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgaWYgKHNlbWljb2xvblJFLnRlc3QodmFsKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGBVbmV4cGVjdGVkIHNlbWljb2xvbiBhdCB0aGUgZW5kIG9mICcke25hbWV9JyBzdHlsZSB2YWx1ZTogJyR7dmFsfSdgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChuYW1lLnN0YXJ0c1dpdGgoXCItLVwiKSkge1xuICAgICAgc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcHJlZml4ZWQgPSBhdXRvUHJlZml4KHN0eWxlLCBuYW1lKTtcbiAgICAgIGlmIChpbXBvcnRhbnRSRS50ZXN0KHZhbCkpIHtcbiAgICAgICAgc3R5bGUuc2V0UHJvcGVydHkoXG4gICAgICAgICAgaHlwaGVuYXRlKHByZWZpeGVkKSxcbiAgICAgICAgICB2YWwucmVwbGFjZShpbXBvcnRhbnRSRSwgXCJcIiksXG4gICAgICAgICAgXCJpbXBvcnRhbnRcIlxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3R5bGVbcHJlZml4ZWRdID0gdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuY29uc3QgcHJlZml4ZXMgPSBbXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiXTtcbmNvbnN0IHByZWZpeENhY2hlID0ge307XG5mdW5jdGlvbiBhdXRvUHJlZml4KHN0eWxlLCByYXdOYW1lKSB7XG4gIGNvbnN0IGNhY2hlZCA9IHByZWZpeENhY2hlW3Jhd05hbWVdO1xuICBpZiAoY2FjaGVkKSB7XG4gICAgcmV0dXJuIGNhY2hlZDtcbiAgfVxuICBsZXQgbmFtZSA9IGNhbWVsaXplKHJhd05hbWUpO1xuICBpZiAobmFtZSAhPT0gXCJmaWx0ZXJcIiAmJiBuYW1lIGluIHN0eWxlKSB7XG4gICAgcmV0dXJuIHByZWZpeENhY2hlW3Jhd05hbWVdID0gbmFtZTtcbiAgfVxuICBuYW1lID0gY2FwaXRhbGl6ZShuYW1lKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHByZWZpeGVkID0gcHJlZml4ZXNbaV0gKyBuYW1lO1xuICAgIGlmIChwcmVmaXhlZCBpbiBzdHlsZSkge1xuICAgICAgcmV0dXJuIHByZWZpeENhY2hlW3Jhd05hbWVdID0gcHJlZml4ZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByYXdOYW1lO1xufVxuXG5jb25zdCB4bGlua05TID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCI7XG5mdW5jdGlvbiBwYXRjaEF0dHIoZWwsIGtleSwgdmFsdWUsIGlzU1ZHLCBpbnN0YW5jZSwgaXNCb29sZWFuID0gaXNTcGVjaWFsQm9vbGVhbkF0dHIoa2V5KSkge1xuICBpZiAoaXNTVkcgJiYga2V5LnN0YXJ0c1dpdGgoXCJ4bGluazpcIikpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywga2V5LnNsaWNlKDYsIGtleS5sZW5ndGgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlTlMoeGxpbmtOUywga2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IGlzQm9vbGVhbiAmJiAhaW5jbHVkZUJvb2xlYW5BdHRyKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShcbiAgICAgICAga2V5LFxuICAgICAgICBpc0Jvb2xlYW4gPyBcIlwiIDogaXNTeW1ib2wodmFsdWUpID8gU3RyaW5nKHZhbHVlKSA6IHZhbHVlXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwYXRjaERPTVByb3AoZWwsIGtleSwgdmFsdWUsIHBhcmVudENvbXBvbmVudCwgYXR0ck5hbWUpIHtcbiAgaWYgKGtleSA9PT0gXCJpbm5lckhUTUxcIiB8fCBrZXkgPT09IFwidGV4dENvbnRlbnRcIikge1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICBlbFtrZXldID0ga2V5ID09PSBcImlubmVySFRNTFwiID8gdW5zYWZlVG9UcnVzdGVkSFRNTCh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHRhZyA9IGVsLnRhZ05hbWU7XG4gIGlmIChrZXkgPT09IFwidmFsdWVcIiAmJiB0YWcgIT09IFwiUFJPR1JFU1NcIiAmJiAvLyBjdXN0b20gZWxlbWVudHMgbWF5IHVzZSBfdmFsdWUgaW50ZXJuYWxseVxuICAhdGFnLmluY2x1ZGVzKFwiLVwiKSkge1xuICAgIGNvbnN0IG9sZFZhbHVlID0gdGFnID09PSBcIk9QVElPTlwiID8gZWwuZ2V0QXR0cmlidXRlKFwidmFsdWVcIikgfHwgXCJcIiA6IGVsLnZhbHVlO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gdmFsdWUgPT0gbnVsbCA/IChcbiAgICAgIC8vICMxMTY0NzogdmFsdWUgc2hvdWxkIGJlIHNldCBhcyBlbXB0eSBzdHJpbmcgZm9yIG51bGwgYW5kIHVuZGVmaW5lZCxcbiAgICAgIC8vIGJ1dCA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCI+IHNob3VsZCBiZSBzZXQgYXMgJ29uJy5cbiAgICAgIGVsLnR5cGUgPT09IFwiY2hlY2tib3hcIiA/IFwib25cIiA6IFwiXCJcbiAgICApIDogU3RyaW5nKHZhbHVlKTtcbiAgICBpZiAob2xkVmFsdWUgIT09IG5ld1ZhbHVlIHx8ICEoXCJfdmFsdWVcIiBpbiBlbCkpIHtcbiAgICAgIGVsLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9XG4gICAgZWwuX3ZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBuZWVkUmVtb3ZlID0gZmFsc2U7XG4gIGlmICh2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgY29uc3QgdHlwZSA9IHR5cGVvZiBlbFtrZXldO1xuICAgIGlmICh0eXBlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgdmFsdWUgPSBpbmNsdWRlQm9vbGVhbkF0dHIodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT0gbnVsbCAmJiB0eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgICBuZWVkUmVtb3ZlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHZhbHVlID0gMDtcbiAgICAgIG5lZWRSZW1vdmUgPSB0cnVlO1xuICAgIH1cbiAgfVxuICB0cnkge1xuICAgIGVsW2tleV0gPSB2YWx1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmICFuZWVkUmVtb3ZlKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBgRmFpbGVkIHNldHRpbmcgcHJvcCBcIiR7a2V5fVwiIG9uIDwke3RhZy50b0xvd2VyQ2FzZSgpfT46IHZhbHVlICR7dmFsdWV9IGlzIGludmFsaWQuYCxcbiAgICAgICAgZVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgbmVlZFJlbW92ZSAmJiBlbC5yZW1vdmVBdHRyaWJ1dGUoYXR0ck5hbWUgfHwga2V5KTtcbn1cblxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihlbCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKGVsLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xuICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbn1cbmNvbnN0IHZlaUtleSA9IFN5bWJvbChcIl92ZWlcIik7XG5mdW5jdGlvbiBwYXRjaEV2ZW50KGVsLCByYXdOYW1lLCBwcmV2VmFsdWUsIG5leHRWYWx1ZSwgaW5zdGFuY2UgPSBudWxsKSB7XG4gIGNvbnN0IGludm9rZXJzID0gZWxbdmVpS2V5XSB8fCAoZWxbdmVpS2V5XSA9IHt9KTtcbiAgY29uc3QgZXhpc3RpbmdJbnZva2VyID0gaW52b2tlcnNbcmF3TmFtZV07XG4gIGlmIChuZXh0VmFsdWUgJiYgZXhpc3RpbmdJbnZva2VyKSB7XG4gICAgZXhpc3RpbmdJbnZva2VyLnZhbHVlID0gISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSA/IHNhbml0aXplRXZlbnRWYWx1ZShuZXh0VmFsdWUsIHJhd05hbWUpIDogbmV4dFZhbHVlO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IFtuYW1lLCBvcHRpb25zXSA9IHBhcnNlTmFtZShyYXdOYW1lKTtcbiAgICBpZiAobmV4dFZhbHVlKSB7XG4gICAgICBjb25zdCBpbnZva2VyID0gaW52b2tlcnNbcmF3TmFtZV0gPSBjcmVhdGVJbnZva2VyKFxuICAgICAgICAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpID8gc2FuaXRpemVFdmVudFZhbHVlKG5leHRWYWx1ZSwgcmF3TmFtZSkgOiBuZXh0VmFsdWUsXG4gICAgICAgIGluc3RhbmNlXG4gICAgICApO1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgbmFtZSwgaW52b2tlciwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmIChleGlzdGluZ0ludm9rZXIpIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoZWwsIG5hbWUsIGV4aXN0aW5nSW52b2tlciwgb3B0aW9ucyk7XG4gICAgICBpbnZva2Vyc1tyYXdOYW1lXSA9IHZvaWQgMDtcbiAgICB9XG4gIH1cbn1cbmNvbnN0IG9wdGlvbnNNb2RpZmllclJFID0gLyg/Ok9uY2V8UGFzc2l2ZXxDYXB0dXJlKSQvO1xuZnVuY3Rpb24gcGFyc2VOYW1lKG5hbWUpIHtcbiAgbGV0IG9wdGlvbnM7XG4gIGlmIChvcHRpb25zTW9kaWZpZXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICAgIGxldCBtO1xuICAgIHdoaWxlIChtID0gbmFtZS5tYXRjaChvcHRpb25zTW9kaWZpZXJSRSkpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIG5hbWUubGVuZ3RoIC0gbVswXS5sZW5ndGgpO1xuICAgICAgb3B0aW9uc1ttWzBdLnRvTG93ZXJDYXNlKCldID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgY29uc3QgZXZlbnQgPSBuYW1lWzJdID09PSBcIjpcIiA/IG5hbWUuc2xpY2UoMykgOiBoeXBoZW5hdGUobmFtZS5zbGljZSgyKSk7XG4gIHJldHVybiBbZXZlbnQsIG9wdGlvbnNdO1xufVxubGV0IGNhY2hlZE5vdyA9IDA7XG5jb25zdCBwID0gLyogQF9fUFVSRV9fICovIFByb21pc2UucmVzb2x2ZSgpO1xuY29uc3QgZ2V0Tm93ID0gKCkgPT4gY2FjaGVkTm93IHx8IChwLnRoZW4oKCkgPT4gY2FjaGVkTm93ID0gMCksIGNhY2hlZE5vdyA9IERhdGUubm93KCkpO1xuZnVuY3Rpb24gY3JlYXRlSW52b2tlcihpbml0aWFsVmFsdWUsIGluc3RhbmNlKSB7XG4gIGNvbnN0IGludm9rZXIgPSAoZSkgPT4ge1xuICAgIGlmICghZS5fdnRzKSB7XG4gICAgICBlLl92dHMgPSBEYXRlLm5vdygpO1xuICAgIH0gZWxzZSBpZiAoZS5fdnRzIDw9IGludm9rZXIuYXR0YWNoZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoXG4gICAgICBwYXRjaFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbihlLCBpbnZva2VyLnZhbHVlKSxcbiAgICAgIGluc3RhbmNlLFxuICAgICAgNSxcbiAgICAgIFtlXVxuICAgICk7XG4gIH07XG4gIGludm9rZXIudmFsdWUgPSBpbml0aWFsVmFsdWU7XG4gIGludm9rZXIuYXR0YWNoZWQgPSBnZXROb3coKTtcbiAgcmV0dXJuIGludm9rZXI7XG59XG5mdW5jdGlvbiBzYW5pdGl6ZUV2ZW50VmFsdWUodmFsdWUsIHByb3BOYW1lKSB7XG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSB8fCBpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB3YXJuKFxuICAgIGBXcm9uZyB0eXBlIHBhc3NlZCBhcyBldmVudCBoYW5kbGVyIHRvICR7cHJvcE5hbWV9IC0gZGlkIHlvdSBmb3JnZXQgQCBvciA6IGluIGZyb250IG9mIHlvdXIgcHJvcD9cbkV4cGVjdGVkIGZ1bmN0aW9uIG9yIGFycmF5IG9mIGZ1bmN0aW9ucywgcmVjZWl2ZWQgdHlwZSAke3R5cGVvZiB2YWx1ZX0uYFxuICApO1xuICByZXR1cm4gTk9PUDtcbn1cbmZ1bmN0aW9uIHBhdGNoU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKGUsIHZhbHVlKSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGNvbnN0IG9yaWdpbmFsU3RvcCA9IGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uO1xuICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uID0gKCkgPT4ge1xuICAgICAgb3JpZ2luYWxTdG9wLmNhbGwoZSk7XG4gICAgICBlLl9zdG9wcGVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIHJldHVybiB2YWx1ZS5tYXAoXG4gICAgICAoZm4pID0+IChlMikgPT4gIWUyLl9zdG9wcGVkICYmIGZuICYmIGZuKGUyKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5cbmNvbnN0IGlzTmF0aXZlT24gPSAoa2V5KSA9PiBrZXkuY2hhckNvZGVBdCgwKSA9PT0gMTExICYmIGtleS5jaGFyQ29kZUF0KDEpID09PSAxMTAgJiYgLy8gbG93ZXJjYXNlIGxldHRlclxua2V5LmNoYXJDb2RlQXQoMikgPiA5NiAmJiBrZXkuY2hhckNvZGVBdCgyKSA8IDEyMztcbmNvbnN0IHBhdGNoUHJvcCA9IChlbCwga2V5LCBwcmV2VmFsdWUsIG5leHRWYWx1ZSwgbmFtZXNwYWNlLCBwYXJlbnRDb21wb25lbnQpID0+IHtcbiAgY29uc3QgaXNTVkcgPSBuYW1lc3BhY2UgPT09IFwic3ZnXCI7XG4gIGlmIChrZXkgPT09IFwiY2xhc3NcIikge1xuICAgIHBhdGNoQ2xhc3MoZWwsIG5leHRWYWx1ZSwgaXNTVkcpO1xuICB9IGVsc2UgaWYgKGtleSA9PT0gXCJzdHlsZVwiKSB7XG4gICAgcGF0Y2hTdHlsZShlbCwgcHJldlZhbHVlLCBuZXh0VmFsdWUpO1xuICB9IGVsc2UgaWYgKGlzT24oa2V5KSkge1xuICAgIGlmICghaXNNb2RlbExpc3RlbmVyKGtleSkpIHtcbiAgICAgIHBhdGNoRXZlbnQoZWwsIGtleSwgcHJldlZhbHVlLCBuZXh0VmFsdWUsIHBhcmVudENvbXBvbmVudCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGtleVswXSA9PT0gXCIuXCIgPyAoa2V5ID0ga2V5LnNsaWNlKDEpLCB0cnVlKSA6IGtleVswXSA9PT0gXCJeXCIgPyAoa2V5ID0ga2V5LnNsaWNlKDEpLCBmYWxzZSkgOiBzaG91bGRTZXRBc1Byb3AoZWwsIGtleSwgbmV4dFZhbHVlLCBpc1NWRykpIHtcbiAgICBwYXRjaERPTVByb3AoZWwsIGtleSwgbmV4dFZhbHVlKTtcbiAgICBpZiAoIWVsLnRhZ05hbWUuaW5jbHVkZXMoXCItXCIpICYmIChrZXkgPT09IFwidmFsdWVcIiB8fCBrZXkgPT09IFwiY2hlY2tlZFwiIHx8IGtleSA9PT0gXCJzZWxlY3RlZFwiKSkge1xuICAgICAgcGF0Y2hBdHRyKGVsLCBrZXksIG5leHRWYWx1ZSwgaXNTVkcsIHBhcmVudENvbXBvbmVudCwga2V5ICE9PSBcInZhbHVlXCIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChcbiAgICAvLyAjMTEwODEgZm9yY2Ugc2V0IHByb3BzIGZvciBwb3NzaWJsZSBhc3luYyBjdXN0b20gZWxlbWVudFxuICAgIGVsLl9pc1Z1ZUNFICYmICgvW0EtWl0vLnRlc3Qoa2V5KSB8fCAhaXNTdHJpbmcobmV4dFZhbHVlKSlcbiAgKSB7XG4gICAgcGF0Y2hET01Qcm9wKGVsLCBjYW1lbGl6ZSQxKGtleSksIG5leHRWYWx1ZSwgcGFyZW50Q29tcG9uZW50LCBrZXkpO1xuICB9IGVsc2Uge1xuICAgIGlmIChrZXkgPT09IFwidHJ1ZS12YWx1ZVwiKSB7XG4gICAgICBlbC5fdHJ1ZVZhbHVlID0gbmV4dFZhbHVlO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcImZhbHNlLXZhbHVlXCIpIHtcbiAgICAgIGVsLl9mYWxzZVZhbHVlID0gbmV4dFZhbHVlO1xuICAgIH1cbiAgICBwYXRjaEF0dHIoZWwsIGtleSwgbmV4dFZhbHVlLCBpc1NWRyk7XG4gIH1cbn07XG5mdW5jdGlvbiBzaG91bGRTZXRBc1Byb3AoZWwsIGtleSwgdmFsdWUsIGlzU1ZHKSB7XG4gIGlmIChpc1NWRykge1xuICAgIGlmIChrZXkgPT09IFwiaW5uZXJIVE1MXCIgfHwga2V5ID09PSBcInRleHRDb250ZW50XCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoa2V5IGluIGVsICYmIGlzTmF0aXZlT24oa2V5KSAmJiBpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoa2V5ID09PSBcInNwZWxsY2hlY2tcIiB8fCBrZXkgPT09IFwiZHJhZ2dhYmxlXCIgfHwga2V5ID09PSBcInRyYW5zbGF0ZVwiIHx8IGtleSA9PT0gXCJhdXRvY29ycmVjdFwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChrZXkgPT09IFwiZm9ybVwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChrZXkgPT09IFwibGlzdFwiICYmIGVsLnRhZ05hbWUgPT09IFwiSU5QVVRcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoa2V5ID09PSBcInR5cGVcIiAmJiBlbC50YWdOYW1lID09PSBcIlRFWFRBUkVBXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGtleSA9PT0gXCJ3aWR0aFwiIHx8IGtleSA9PT0gXCJoZWlnaHRcIikge1xuICAgIGNvbnN0IHRhZyA9IGVsLnRhZ05hbWU7XG4gICAgaWYgKHRhZyA9PT0gXCJJTUdcIiB8fCB0YWcgPT09IFwiVklERU9cIiB8fCB0YWcgPT09IFwiQ0FOVkFTXCIgfHwgdGFnID09PSBcIlNPVVJDRVwiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChpc05hdGl2ZU9uKGtleSkgJiYgaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBrZXkgaW4gZWw7XG59XG5cbmNvbnN0IFJFTU9WQUwgPSB7fTtcbi8vIEBfX05PX1NJREVfRUZGRUNUU19fXG5mdW5jdGlvbiBkZWZpbmVDdXN0b21FbGVtZW50KG9wdGlvbnMsIGV4dHJhT3B0aW9ucywgX2NyZWF0ZUFwcCkge1xuICBsZXQgQ29tcCA9IGRlZmluZUNvbXBvbmVudChvcHRpb25zLCBleHRyYU9wdGlvbnMpO1xuICBpZiAoaXNQbGFpbk9iamVjdChDb21wKSkgQ29tcCA9IGV4dGVuZCh7fSwgQ29tcCwgZXh0cmFPcHRpb25zKTtcbiAgY2xhc3MgVnVlQ3VzdG9tRWxlbWVudCBleHRlbmRzIFZ1ZUVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKGluaXRpYWxQcm9wcykge1xuICAgICAgc3VwZXIoQ29tcCwgaW5pdGlhbFByb3BzLCBfY3JlYXRlQXBwKTtcbiAgICB9XG4gIH1cbiAgVnVlQ3VzdG9tRWxlbWVudC5kZWYgPSBDb21wO1xuICByZXR1cm4gVnVlQ3VzdG9tRWxlbWVudDtcbn1cbmNvbnN0IGRlZmluZVNTUkN1c3RvbUVsZW1lbnQgPSAoLyogQF9fTk9fU0lERV9FRkZFQ1RTX18gKi8gKG9wdGlvbnMsIGV4dHJhT3B0aW9ucykgPT4ge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIGRlZmluZUN1c3RvbUVsZW1lbnQob3B0aW9ucywgZXh0cmFPcHRpb25zLCBjcmVhdGVTU1JBcHApO1xufSk7XG5jb25zdCBCYXNlQ2xhc3MgPSB0eXBlb2YgSFRNTEVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIgPyBIVE1MRWxlbWVudCA6IGNsYXNzIHtcbn07XG5jbGFzcyBWdWVFbGVtZW50IGV4dGVuZHMgQmFzZUNsYXNzIHtcbiAgY29uc3RydWN0b3IoX2RlZiwgX3Byb3BzID0ge30sIF9jcmVhdGVBcHAgPSBjcmVhdGVBcHApIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2RlZiA9IF9kZWY7XG4gICAgdGhpcy5fcHJvcHMgPSBfcHJvcHM7XG4gICAgdGhpcy5fY3JlYXRlQXBwID0gX2NyZWF0ZUFwcDtcbiAgICB0aGlzLl9pc1Z1ZUNFID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB0aGlzLl9pbnN0YW5jZSA9IG51bGw7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5fYXBwID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB0aGlzLl9ub25jZSA9IHRoaXMuX2RlZi5ub25jZTtcbiAgICB0aGlzLl9jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZXNvbHZlZCA9IGZhbHNlO1xuICAgIHRoaXMuX251bWJlclByb3BzID0gbnVsbDtcbiAgICB0aGlzLl9zdHlsZUNoaWxkcmVuID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrU2V0KCk7XG4gICAgdGhpcy5fb2IgPSBudWxsO1xuICAgIGlmICh0aGlzLnNoYWRvd1Jvb3QgJiYgX2NyZWF0ZUFwcCAhPT0gY3JlYXRlQXBwKSB7XG4gICAgICB0aGlzLl9yb290ID0gdGhpcy5zaGFkb3dSb290O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiB0aGlzLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBgQ3VzdG9tIGVsZW1lbnQgaGFzIHByZS1yZW5kZXJlZCBkZWNsYXJhdGl2ZSBzaGFkb3cgcm9vdCBidXQgaXMgbm90IGRlZmluZWQgYXMgaHlkcmF0YWJsZS4gVXNlIFxcYGRlZmluZVNTUkN1c3RvbUVsZW1lbnRcXGAuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKF9kZWYuc2hhZG93Um9vdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiBcIm9wZW5cIiB9KTtcbiAgICAgICAgdGhpcy5fcm9vdCA9IHRoaXMuc2hhZG93Um9vdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3Jvb3QgPSB0aGlzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBpZiAoIXRoaXMuaXNDb25uZWN0ZWQpIHJldHVybjtcbiAgICBpZiAoIXRoaXMuc2hhZG93Um9vdCAmJiAhdGhpcy5fcmVzb2x2ZWQpIHtcbiAgICAgIHRoaXMuX3BhcnNlU2xvdHMoKTtcbiAgICB9XG4gICAgdGhpcy5fY29ubmVjdGVkID0gdHJ1ZTtcbiAgICBsZXQgcGFyZW50ID0gdGhpcztcbiAgICB3aGlsZSAocGFyZW50ID0gcGFyZW50ICYmIChwYXJlbnQucGFyZW50Tm9kZSB8fCBwYXJlbnQuaG9zdCkpIHtcbiAgICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBWdWVFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcbiAgICAgIGlmICh0aGlzLl9yZXNvbHZlZCkge1xuICAgICAgICB0aGlzLl9tb3VudCh0aGlzLl9kZWYpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuX3BlbmRpbmdSZXNvbHZlKSB7XG4gICAgICAgICAgdGhpcy5fcGVuZGluZ1Jlc29sdmUgPSBwYXJlbnQuX3BlbmRpbmdSZXNvbHZlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fcGVuZGluZ1Jlc29sdmUgPSB2b2lkIDA7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlRGVmKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcmVzb2x2ZURlZigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIF9zZXRQYXJlbnQocGFyZW50ID0gdGhpcy5fcGFyZW50KSB7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgdGhpcy5faW5zdGFuY2UucGFyZW50ID0gcGFyZW50Ll9pbnN0YW5jZTtcbiAgICAgIHRoaXMuX2luaGVyaXRQYXJlbnRDb250ZXh0KHBhcmVudCk7XG4gICAgfVxuICB9XG4gIF9pbmhlcml0UGFyZW50Q29udGV4dChwYXJlbnQgPSB0aGlzLl9wYXJlbnQpIHtcbiAgICBpZiAocGFyZW50ICYmIHRoaXMuX2FwcCkge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKFxuICAgICAgICB0aGlzLl9hcHAuX2NvbnRleHQucHJvdmlkZXMsXG4gICAgICAgIHBhcmVudC5faW5zdGFuY2UucHJvdmlkZXNcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgIGlmICghdGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgIGlmICh0aGlzLl9vYikge1xuICAgICAgICAgIHRoaXMuX29iLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICB0aGlzLl9vYiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYXBwICYmIHRoaXMuX2FwcC51bm1vdW50KCk7XG4gICAgICAgIGlmICh0aGlzLl9pbnN0YW5jZSkgdGhpcy5faW5zdGFuY2UuY2UgPSB2b2lkIDA7XG4gICAgICAgIHRoaXMuX2FwcCA9IHRoaXMuX2luc3RhbmNlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogcmVzb2x2ZSBpbm5lciBjb21wb25lbnQgZGVmaW5pdGlvbiAoaGFuZGxlIHBvc3NpYmxlIGFzeW5jIGNvbXBvbmVudClcbiAgICovXG4gIF9yZXNvbHZlRGVmKCkge1xuICAgIGlmICh0aGlzLl9wZW5kaW5nUmVzb2x2ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5fc2V0QXR0cih0aGlzLmF0dHJpYnV0ZXNbaV0ubmFtZSk7XG4gICAgfVxuICAgIHRoaXMuX29iID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKG11dGF0aW9ucykgPT4ge1xuICAgICAgZm9yIChjb25zdCBtIG9mIG11dGF0aW9ucykge1xuICAgICAgICB0aGlzLl9zZXRBdHRyKG0uYXR0cmlidXRlTmFtZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5fb2Iub2JzZXJ2ZSh0aGlzLCB7IGF0dHJpYnV0ZXM6IHRydWUgfSk7XG4gICAgY29uc3QgcmVzb2x2ZSA9IChkZWYsIGlzQXN5bmMgPSBmYWxzZSkgPT4ge1xuICAgICAgdGhpcy5fcmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5fcGVuZGluZ1Jlc29sdmUgPSB2b2lkIDA7XG4gICAgICBjb25zdCB7IHByb3BzLCBzdHlsZXMgfSA9IGRlZjtcbiAgICAgIGxldCBudW1iZXJQcm9wcztcbiAgICAgIGlmIChwcm9wcyAmJiAhaXNBcnJheShwcm9wcykpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICBjb25zdCBvcHQgPSBwcm9wc1trZXldO1xuICAgICAgICAgIGlmIChvcHQgPT09IE51bWJlciB8fCBvcHQgJiYgb3B0LnR5cGUgPT09IE51bWJlcikge1xuICAgICAgICAgICAgaWYgKGtleSBpbiB0aGlzLl9wcm9wcykge1xuICAgICAgICAgICAgICB0aGlzLl9wcm9wc1trZXldID0gdG9OdW1iZXIodGhpcy5fcHJvcHNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAobnVtYmVyUHJvcHMgfHwgKG51bWJlclByb3BzID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCkpKVtjYW1lbGl6ZSQxKGtleSldID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX251bWJlclByb3BzID0gbnVtYmVyUHJvcHM7XG4gICAgICB0aGlzLl9yZXNvbHZlUHJvcHMoZGVmKTtcbiAgICAgIGlmICh0aGlzLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgdGhpcy5fYXBwbHlTdHlsZXMoc3R5bGVzKTtcbiAgICAgIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiBzdHlsZXMpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIkN1c3RvbSBlbGVtZW50IHN0eWxlIGluamVjdGlvbiBpcyBub3Qgc3VwcG9ydGVkIHdoZW4gdXNpbmcgc2hhZG93Um9vdDogZmFsc2VcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdGhpcy5fbW91bnQoZGVmKTtcbiAgICB9O1xuICAgIGNvbnN0IGFzeW5jRGVmID0gdGhpcy5fZGVmLl9fYXN5bmNMb2FkZXI7XG4gICAgaWYgKGFzeW5jRGVmKSB7XG4gICAgICB0aGlzLl9wZW5kaW5nUmVzb2x2ZSA9IGFzeW5jRGVmKCkudGhlbigoZGVmKSA9PiB7XG4gICAgICAgIGRlZi5jb25maWd1cmVBcHAgPSB0aGlzLl9kZWYuY29uZmlndXJlQXBwO1xuICAgICAgICByZXNvbHZlKHRoaXMuX2RlZiA9IGRlZiwgdHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzb2x2ZSh0aGlzLl9kZWYpO1xuICAgIH1cbiAgfVxuICBfbW91bnQoZGVmKSB7XG4gICAgaWYgKCghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykgJiYgIWRlZi5uYW1lKSB7XG4gICAgICBkZWYubmFtZSA9IFwiVnVlRWxlbWVudFwiO1xuICAgIH1cbiAgICB0aGlzLl9hcHAgPSB0aGlzLl9jcmVhdGVBcHAoZGVmKTtcbiAgICB0aGlzLl9pbmhlcml0UGFyZW50Q29udGV4dCgpO1xuICAgIGlmIChkZWYuY29uZmlndXJlQXBwKSB7XG4gICAgICBkZWYuY29uZmlndXJlQXBwKHRoaXMuX2FwcCk7XG4gICAgfVxuICAgIHRoaXMuX2FwcC5fY2VWTm9kZSA9IHRoaXMuX2NyZWF0ZVZOb2RlKCk7XG4gICAgdGhpcy5fYXBwLm1vdW50KHRoaXMuX3Jvb3QpO1xuICAgIGNvbnN0IGV4cG9zZWQgPSB0aGlzLl9pbnN0YW5jZSAmJiB0aGlzLl9pbnN0YW5jZS5leHBvc2VkO1xuICAgIGlmICghZXhwb3NlZCkgcmV0dXJuO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGV4cG9zZWQpIHtcbiAgICAgIGlmICghaGFzT3duKHRoaXMsIGtleSkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGtleSwge1xuICAgICAgICAgIC8vIHVud3JhcCByZWYgdG8gYmUgY29uc2lzdGVudCB3aXRoIHB1YmxpYyBpbnN0YW5jZSBiZWhhdmlvclxuICAgICAgICAgIGdldDogKCkgPT4gdW5yZWYoZXhwb3NlZFtrZXldKVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICB3YXJuKGBFeHBvc2VkIHByb3BlcnR5IFwiJHtrZXl9XCIgYWxyZWFkeSBleGlzdHMgb24gY3VzdG9tIGVsZW1lbnQuYCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIF9yZXNvbHZlUHJvcHMoZGVmKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gZGVmO1xuICAgIGNvbnN0IGRlY2xhcmVkUHJvcEtleXMgPSBpc0FycmF5KHByb3BzKSA/IHByb3BzIDogT2JqZWN0LmtleXMocHJvcHMgfHwge30pO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMpKSB7XG4gICAgICBpZiAoa2V5WzBdICE9PSBcIl9cIiAmJiBkZWNsYXJlZFByb3BLZXlzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgdGhpcy5fc2V0UHJvcChrZXksIHRoaXNba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IG9mIGRlY2xhcmVkUHJvcEtleXMubWFwKGNhbWVsaXplJDEpKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0UHJvcChrZXkpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQodmFsKSB7XG4gICAgICAgICAgdGhpcy5fc2V0UHJvcChrZXksIHZhbCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBfc2V0QXR0cihrZXkpIHtcbiAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJkYXRhLXYtXCIpKSByZXR1cm47XG4gICAgY29uc3QgaGFzID0gdGhpcy5oYXNBdHRyaWJ1dGUoa2V5KTtcbiAgICBsZXQgdmFsdWUgPSBoYXMgPyB0aGlzLmdldEF0dHJpYnV0ZShrZXkpIDogUkVNT1ZBTDtcbiAgICBjb25zdCBjYW1lbEtleSA9IGNhbWVsaXplJDEoa2V5KTtcbiAgICBpZiAoaGFzICYmIHRoaXMuX251bWJlclByb3BzICYmIHRoaXMuX251bWJlclByb3BzW2NhbWVsS2V5XSkge1xuICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgfVxuICAgIHRoaXMuX3NldFByb3AoY2FtZWxLZXksIHZhbHVlLCBmYWxzZSwgdHJ1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgX2dldFByb3Aoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb3BzW2tleV07XG4gIH1cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgX3NldFByb3Aoa2V5LCB2YWwsIHNob3VsZFJlZmxlY3QgPSB0cnVlLCBzaG91bGRVcGRhdGUgPSBmYWxzZSkge1xuICAgIGlmICh2YWwgIT09IHRoaXMuX3Byb3BzW2tleV0pIHtcbiAgICAgIGlmICh2YWwgPT09IFJFTU9WQUwpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX3Byb3BzW2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9wcm9wc1trZXldID0gdmFsO1xuICAgICAgICBpZiAoa2V5ID09PSBcImtleVwiICYmIHRoaXMuX2FwcCkge1xuICAgICAgICAgIHRoaXMuX2FwcC5fY2VWTm9kZS5rZXkgPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzaG91bGRVcGRhdGUgJiYgdGhpcy5faW5zdGFuY2UpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgICB9XG4gICAgICBpZiAoc2hvdWxkUmVmbGVjdCkge1xuICAgICAgICBjb25zdCBvYiA9IHRoaXMuX29iO1xuICAgICAgICBvYiAmJiBvYi5kaXNjb25uZWN0KCk7XG4gICAgICAgIGlmICh2YWwgPT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShoeXBoZW5hdGUoa2V5KSwgXCJcIik7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoaHlwaGVuYXRlKGtleSksIHZhbCArIFwiXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKCF2YWwpIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShoeXBoZW5hdGUoa2V5KSk7XG4gICAgICAgIH1cbiAgICAgICAgb2IgJiYgb2Iub2JzZXJ2ZSh0aGlzLCB7IGF0dHJpYnV0ZXM6IHRydWUgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIF91cGRhdGUoKSB7XG4gICAgY29uc3Qgdm5vZGUgPSB0aGlzLl9jcmVhdGVWTm9kZSgpO1xuICAgIGlmICh0aGlzLl9hcHApIHZub2RlLmFwcENvbnRleHQgPSB0aGlzLl9hcHAuX2NvbnRleHQ7XG4gICAgcmVuZGVyKHZub2RlLCB0aGlzLl9yb290KTtcbiAgfVxuICBfY3JlYXRlVk5vZGUoKSB7XG4gICAgY29uc3QgYmFzZVByb3BzID0ge307XG4gICAgaWYgKCF0aGlzLnNoYWRvd1Jvb3QpIHtcbiAgICAgIGJhc2VQcm9wcy5vblZub2RlTW91bnRlZCA9IGJhc2VQcm9wcy5vblZub2RlVXBkYXRlZCA9IHRoaXMuX3JlbmRlclNsb3RzLmJpbmQodGhpcyk7XG4gICAgfVxuICAgIGNvbnN0IHZub2RlID0gY3JlYXRlVk5vZGUodGhpcy5fZGVmLCBleHRlbmQoYmFzZVByb3BzLCB0aGlzLl9wcm9wcykpO1xuICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcbiAgICAgIHZub2RlLmNlID0gKGluc3RhbmNlKSA9PiB7XG4gICAgICAgIHRoaXMuX2luc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgIGluc3RhbmNlLmNlID0gdGhpcztcbiAgICAgICAgaW5zdGFuY2UuaXNDRSA9IHRydWU7XG4gICAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgaW5zdGFuY2UuY2VSZWxvYWQgPSAobmV3U3R5bGVzKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fc3R5bGVzKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3N0eWxlcy5mb3JFYWNoKChzKSA9PiB0aGlzLl9yb290LnJlbW92ZUNoaWxkKHMpKTtcbiAgICAgICAgICAgICAgdGhpcy5fc3R5bGVzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9hcHBseVN0eWxlcyhuZXdTdHlsZXMpO1xuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaXNwYXRjaCA9IChldmVudCwgYXJncykgPT4ge1xuICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAgIG5ldyBDdXN0b21FdmVudChcbiAgICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgIGlzUGxhaW5PYmplY3QoYXJnc1swXSkgPyBleHRlbmQoeyBkZXRhaWw6IGFyZ3MgfSwgYXJnc1swXSkgOiB7IGRldGFpbDogYXJncyB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfTtcbiAgICAgICAgaW5zdGFuY2UuZW1pdCA9IChldmVudCwgLi4uYXJncykgPT4ge1xuICAgICAgICAgIGRpc3BhdGNoKGV2ZW50LCBhcmdzKTtcbiAgICAgICAgICBpZiAoaHlwaGVuYXRlKGV2ZW50KSAhPT0gZXZlbnQpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKGh5cGhlbmF0ZShldmVudCksIGFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fc2V0UGFyZW50KCk7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdm5vZGU7XG4gIH1cbiAgX2FwcGx5U3R5bGVzKHN0eWxlcywgb3duZXIpIHtcbiAgICBpZiAoIXN0eWxlcykgcmV0dXJuO1xuICAgIGlmIChvd25lcikge1xuICAgICAgaWYgKG93bmVyID09PSB0aGlzLl9kZWYgfHwgdGhpcy5fc3R5bGVDaGlsZHJlbi5oYXMob3duZXIpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3N0eWxlQ2hpbGRyZW4uYWRkKG93bmVyKTtcbiAgICB9XG4gICAgY29uc3Qgbm9uY2UgPSB0aGlzLl9ub25jZTtcbiAgICBmb3IgKGxldCBpID0gc3R5bGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBjb25zdCBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgICAgaWYgKG5vbmNlKSBzLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgICAgIHMudGV4dENvbnRlbnQgPSBzdHlsZXNbaV07XG4gICAgICB0aGlzLnNoYWRvd1Jvb3QucHJlcGVuZChzKTtcbiAgICAgIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgIGlmIChvd25lcikge1xuICAgICAgICAgIGlmIChvd25lci5fX2htcklkKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2NoaWxkU3R5bGVzKSB0aGlzLl9jaGlsZFN0eWxlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgICAgICAgICBsZXQgZW50cnkgPSB0aGlzLl9jaGlsZFN0eWxlcy5nZXQob3duZXIuX19obXJJZCk7XG4gICAgICAgICAgICBpZiAoIWVudHJ5KSB7XG4gICAgICAgICAgICAgIHRoaXMuX2NoaWxkU3R5bGVzLnNldChvd25lci5fX2htcklkLCBlbnRyeSA9IFtdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVudHJ5LnB1c2gocyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICh0aGlzLl9zdHlsZXMgfHwgKHRoaXMuX3N0eWxlcyA9IFtdKSkucHVzaChzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogT25seSBjYWxsZWQgd2hlbiBzaGFkb3dSb290IGlzIGZhbHNlXG4gICAqL1xuICBfcGFyc2VTbG90cygpIHtcbiAgICBjb25zdCBzbG90cyA9IHRoaXMuX3Nsb3RzID0ge307XG4gICAgbGV0IG47XG4gICAgd2hpbGUgKG4gPSB0aGlzLmZpcnN0Q2hpbGQpIHtcbiAgICAgIGNvbnN0IHNsb3ROYW1lID0gbi5ub2RlVHlwZSA9PT0gMSAmJiBuLmdldEF0dHJpYnV0ZShcInNsb3RcIikgfHwgXCJkZWZhdWx0XCI7XG4gICAgICAoc2xvdHNbc2xvdE5hbWVdIHx8IChzbG90c1tzbG90TmFtZV0gPSBbXSkpLnB1c2gobik7XG4gICAgICB0aGlzLnJlbW92ZUNoaWxkKG4pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogT25seSBjYWxsZWQgd2hlbiBzaGFkb3dSb290IGlzIGZhbHNlXG4gICAqL1xuICBfcmVuZGVyU2xvdHMoKSB7XG4gICAgY29uc3Qgb3V0bGV0cyA9ICh0aGlzLl90ZWxlcG9ydFRhcmdldCB8fCB0aGlzKS5xdWVyeVNlbGVjdG9yQWxsKFwic2xvdFwiKTtcbiAgICBjb25zdCBzY29wZUlkID0gdGhpcy5faW5zdGFuY2UudHlwZS5fX3Njb3BlSWQ7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRsZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBvID0gb3V0bGV0c1tpXTtcbiAgICAgIGNvbnN0IHNsb3ROYW1lID0gby5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpIHx8IFwiZGVmYXVsdFwiO1xuICAgICAgY29uc3QgY29udGVudCA9IHRoaXMuX3Nsb3RzW3Nsb3ROYW1lXTtcbiAgICAgIGNvbnN0IHBhcmVudCA9IG8ucGFyZW50Tm9kZTtcbiAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgIGZvciAoY29uc3QgbiBvZiBjb250ZW50KSB7XG4gICAgICAgICAgaWYgKHNjb3BlSWQgJiYgbi5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgY29uc3QgaWQgPSBzY29wZUlkICsgXCItc1wiO1xuICAgICAgICAgICAgY29uc3Qgd2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihuLCAxKTtcbiAgICAgICAgICAgIG4uc2V0QXR0cmlidXRlKGlkLCBcIlwiKTtcbiAgICAgICAgICAgIGxldCBjaGlsZDtcbiAgICAgICAgICAgIHdoaWxlIChjaGlsZCA9IHdhbGtlci5uZXh0Tm9kZSgpKSB7XG4gICAgICAgICAgICAgIGNoaWxkLnNldEF0dHJpYnV0ZShpZCwgXCJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobiwgbyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdoaWxlIChvLmZpcnN0Q2hpbGQpIHBhcmVudC5pbnNlcnRCZWZvcmUoby5maXJzdENoaWxkLCBvKTtcbiAgICAgIH1cbiAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChvKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgX2luamVjdENoaWxkU3R5bGUoY29tcCkge1xuICAgIHRoaXMuX2FwcGx5U3R5bGVzKGNvbXAuc3R5bGVzLCBjb21wKTtcbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBfcmVtb3ZlQ2hpbGRTdHlsZShjb21wKSB7XG4gICAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICAgIHRoaXMuX3N0eWxlQ2hpbGRyZW4uZGVsZXRlKGNvbXApO1xuICAgICAgaWYgKHRoaXMuX2NoaWxkU3R5bGVzICYmIGNvbXAuX19obXJJZCkge1xuICAgICAgICBjb25zdCBvbGRTdHlsZXMgPSB0aGlzLl9jaGlsZFN0eWxlcy5nZXQoY29tcC5fX2htcklkKTtcbiAgICAgICAgaWYgKG9sZFN0eWxlcykge1xuICAgICAgICAgIG9sZFN0eWxlcy5mb3JFYWNoKChzKSA9PiB0aGlzLl9yb290LnJlbW92ZUNoaWxkKHMpKTtcbiAgICAgICAgICBvbGRTdHlsZXMubGVuZ3RoID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gdXNlSG9zdChjYWxsZXIpIHtcbiAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgY29uc3QgZWwgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5jZTtcbiAgaWYgKGVsKSB7XG4gICAgcmV0dXJuIGVsO1xuICB9IGVsc2UgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBgJHtjYWxsZXIgfHwgXCJ1c2VIb3N0XCJ9IGNhbGxlZCB3aXRob3V0IGFuIGFjdGl2ZSBjb21wb25lbnQgaW5zdGFuY2UuYFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2FybihcbiAgICAgICAgYCR7Y2FsbGVyIHx8IFwidXNlSG9zdFwifSBjYW4gb25seSBiZSB1c2VkIGluIGNvbXBvbmVudHMgZGVmaW5lZCB2aWEgZGVmaW5lQ3VzdG9tRWxlbWVudC5gXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHVzZVNoYWRvd1Jvb3QoKSB7XG4gIGNvbnN0IGVsID0gISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSA/IHVzZUhvc3QoXCJ1c2VTaGFkb3dSb290XCIpIDogdXNlSG9zdCgpO1xuICByZXR1cm4gZWwgJiYgZWwuc2hhZG93Um9vdDtcbn1cblxuZnVuY3Rpb24gdXNlQ3NzTW9kdWxlKG5hbWUgPSBcIiRzdHlsZVwiKSB7XG4gIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIGlmICghaW5zdGFuY2UpIHtcbiAgICAgICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgd2FybihgdXNlQ3NzTW9kdWxlIG11c3QgYmUgY2FsbGVkIGluc2lkZSBzZXR1cCgpYCk7XG4gICAgICByZXR1cm4gRU1QVFlfT0JKO1xuICAgIH1cbiAgICBjb25zdCBtb2R1bGVzID0gaW5zdGFuY2UudHlwZS5fX2Nzc01vZHVsZXM7XG4gICAgaWYgKCFtb2R1bGVzKSB7XG4gICAgICAhIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHdhcm4oYEN1cnJlbnQgaW5zdGFuY2UgZG9lcyBub3QgaGF2ZSBDU1MgbW9kdWxlcyBpbmplY3RlZC5gKTtcbiAgICAgIHJldHVybiBFTVBUWV9PQko7XG4gICAgfVxuICAgIGNvbnN0IG1vZCA9IG1vZHVsZXNbbmFtZV07XG4gICAgaWYgKCFtb2QpIHtcbiAgICAgICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgd2FybihgQ3VycmVudCBpbnN0YW5jZSBkb2VzIG5vdCBoYXZlIENTUyBtb2R1bGUgbmFtZWQgXCIke25hbWV9XCIuYCk7XG4gICAgICByZXR1cm4gRU1QVFlfT0JKO1xuICAgIH1cbiAgICByZXR1cm4gbW9kO1xuICB9XG59XG5cbmNvbnN0IHBvc2l0aW9uTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5jb25zdCBuZXdQb3NpdGlvbk1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuY29uc3QgbW92ZUNiS2V5ID0gU3ltYm9sKFwiX21vdmVDYlwiKTtcbmNvbnN0IGVudGVyQ2JLZXkgPSBTeW1ib2woXCJfZW50ZXJDYlwiKTtcbmNvbnN0IGRlY29yYXRlID0gKHQpID0+IHtcbiAgZGVsZXRlIHQucHJvcHMubW9kZTtcbiAgcmV0dXJuIHQ7XG59O1xuY29uc3QgVHJhbnNpdGlvbkdyb3VwSW1wbCA9IC8qIEBfX1BVUkVfXyAqLyBkZWNvcmF0ZSh7XG4gIG5hbWU6IFwiVHJhbnNpdGlvbkdyb3VwXCIsXG4gIHByb3BzOiAvKiBAX19QVVJFX18gKi8gZXh0ZW5kKHt9LCBUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzLCB7XG4gICAgdGFnOiBTdHJpbmcsXG4gICAgbW92ZUNsYXNzOiBTdHJpbmdcbiAgfSksXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IHN0YXRlID0gdXNlVHJhbnNpdGlvblN0YXRlKCk7XG4gICAgbGV0IHByZXZDaGlsZHJlbjtcbiAgICBsZXQgY2hpbGRyZW47XG4gICAgb25VcGRhdGVkKCgpID0+IHtcbiAgICAgIGlmICghcHJldkNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBtb3ZlQ2xhc3MgPSBwcm9wcy5tb3ZlQ2xhc3MgfHwgYCR7cHJvcHMubmFtZSB8fCBcInZcIn0tbW92ZWA7XG4gICAgICBpZiAoIWhhc0NTU1RyYW5zZm9ybShcbiAgICAgICAgcHJldkNoaWxkcmVuWzBdLmVsLFxuICAgICAgICBpbnN0YW5jZS52bm9kZS5lbCxcbiAgICAgICAgbW92ZUNsYXNzXG4gICAgICApKSB7XG4gICAgICAgIHByZXZDaGlsZHJlbiA9IFtdO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBwcmV2Q2hpbGRyZW4uZm9yRWFjaChjYWxsUGVuZGluZ0Nicyk7XG4gICAgICBwcmV2Q2hpbGRyZW4uZm9yRWFjaChyZWNvcmRQb3NpdGlvbik7XG4gICAgICBjb25zdCBtb3ZlZENoaWxkcmVuID0gcHJldkNoaWxkcmVuLmZpbHRlcihhcHBseVRyYW5zbGF0aW9uKTtcbiAgICAgIGZvcmNlUmVmbG93KCk7XG4gICAgICBtb3ZlZENoaWxkcmVuLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgY29uc3QgZWwgPSBjLmVsO1xuICAgICAgICBjb25zdCBzdHlsZSA9IGVsLnN0eWxlO1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgIHN0eWxlLnRyYW5zZm9ybSA9IHN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiXCI7XG4gICAgICAgIGNvbnN0IGNiID0gZWxbbW92ZUNiS2V5XSA9IChlKSA9PiB7XG4gICAgICAgICAgaWYgKGUgJiYgZS50YXJnZXQgIT09IGVsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZSB8fCBlLnByb3BlcnR5TmFtZS5lbmRzV2l0aChcInRyYW5zZm9ybVwiKSkge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIiwgY2IpO1xuICAgICAgICAgICAgZWxbbW92ZUNiS2V5XSA9IG51bGw7XG4gICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCBjYik7XG4gICAgICB9KTtcbiAgICAgIHByZXZDaGlsZHJlbiA9IFtdO1xuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCByYXdQcm9wcyA9IHRvUmF3KHByb3BzKTtcbiAgICAgIGNvbnN0IGNzc1RyYW5zaXRpb25Qcm9wcyA9IHJlc29sdmVUcmFuc2l0aW9uUHJvcHMocmF3UHJvcHMpO1xuICAgICAgbGV0IHRhZyA9IHJhd1Byb3BzLnRhZyB8fCBGcmFnbWVudDtcbiAgICAgIHByZXZDaGlsZHJlbiA9IFtdO1xuICAgICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICAgIGlmIChjaGlsZC5lbCAmJiBjaGlsZC5lbCBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHByZXZDaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhcbiAgICAgICAgICAgICAgY2hpbGQsXG4gICAgICAgICAgICAgIHJlc29sdmVUcmFuc2l0aW9uSG9va3MoXG4gICAgICAgICAgICAgICAgY2hpbGQsXG4gICAgICAgICAgICAgICAgY3NzVHJhbnNpdGlvblByb3BzLFxuICAgICAgICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgICAgICAgIGluc3RhbmNlXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBwb3NpdGlvbk1hcC5zZXQoXG4gICAgICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgICAgICBjaGlsZC5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCA/IGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihzbG90cy5kZWZhdWx0KCkpIDogW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgIGlmIChjaGlsZC5rZXkgIT0gbnVsbCkge1xuICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhcbiAgICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgICAgcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhjaGlsZCwgY3NzVHJhbnNpdGlvblByb3BzLCBzdGF0ZSwgaW5zdGFuY2UpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIGNoaWxkLnR5cGUgIT09IFRleHQpIHtcbiAgICAgICAgICB3YXJuKGA8VHJhbnNpdGlvbkdyb3VwPiBjaGlsZHJlbiBtdXN0IGJlIGtleWVkLmApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlVk5vZGUodGFnLCBudWxsLCBjaGlsZHJlbik7XG4gICAgfTtcbiAgfVxufSk7XG5jb25zdCBUcmFuc2l0aW9uR3JvdXAgPSBUcmFuc2l0aW9uR3JvdXBJbXBsO1xuZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMoYykge1xuICBjb25zdCBlbCA9IGMuZWw7XG4gIGlmIChlbFttb3ZlQ2JLZXldKSB7XG4gICAgZWxbbW92ZUNiS2V5XSgpO1xuICB9XG4gIGlmIChlbFtlbnRlckNiS2V5XSkge1xuICAgIGVsW2VudGVyQ2JLZXldKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlY29yZFBvc2l0aW9uKGMpIHtcbiAgbmV3UG9zaXRpb25NYXAuc2V0KGMsIGMuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xufVxuZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbihjKSB7XG4gIGNvbnN0IG9sZFBvcyA9IHBvc2l0aW9uTWFwLmdldChjKTtcbiAgY29uc3QgbmV3UG9zID0gbmV3UG9zaXRpb25NYXAuZ2V0KGMpO1xuICBjb25zdCBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7XG4gIGNvbnN0IGR5ID0gb2xkUG9zLnRvcCAtIG5ld1Bvcy50b3A7XG4gIGlmIChkeCB8fCBkeSkge1xuICAgIGNvbnN0IHMgPSBjLmVsLnN0eWxlO1xuICAgIHMudHJhbnNmb3JtID0gcy53ZWJraXRUcmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7ZHh9cHgsJHtkeX1weClgO1xuICAgIHMudHJhbnNpdGlvbkR1cmF0aW9uID0gXCIwc1wiO1xuICAgIHJldHVybiBjO1xuICB9XG59XG5mdW5jdGlvbiBoYXNDU1NUcmFuc2Zvcm0oZWwsIHJvb3QsIG1vdmVDbGFzcykge1xuICBjb25zdCBjbG9uZSA9IGVsLmNsb25lTm9kZSgpO1xuICBjb25zdCBfdnRjID0gZWxbdnRjS2V5XTtcbiAgaWYgKF92dGMpIHtcbiAgICBfdnRjLmZvckVhY2goKGNscykgPT4ge1xuICAgICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaCgoYykgPT4gYyAmJiBjbG9uZS5jbGFzc0xpc3QucmVtb3ZlKGMpKTtcbiAgICB9KTtcbiAgfVxuICBtb3ZlQ2xhc3Muc3BsaXQoL1xccysvKS5mb3JFYWNoKChjKSA9PiBjICYmIGNsb25lLmNsYXNzTGlzdC5hZGQoYykpO1xuICBjbG9uZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gIGNvbnN0IGNvbnRhaW5lciA9IHJvb3Qubm9kZVR5cGUgPT09IDEgPyByb290IDogcm9vdC5wYXJlbnROb2RlO1xuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICBjb25zdCB7IGhhc1RyYW5zZm9ybSB9ID0gZ2V0VHJhbnNpdGlvbkluZm8oY2xvbmUpO1xuICBjb250YWluZXIucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICByZXR1cm4gaGFzVHJhbnNmb3JtO1xufVxuXG5jb25zdCBnZXRNb2RlbEFzc2lnbmVyID0gKHZub2RlKSA9PiB7XG4gIGNvbnN0IGZuID0gdm5vZGUucHJvcHNbXCJvblVwZGF0ZTptb2RlbFZhbHVlXCJdIHx8IGZhbHNlO1xuICByZXR1cm4gaXNBcnJheShmbikgPyAodmFsdWUpID0+IGludm9rZUFycmF5Rm5zKGZuLCB2YWx1ZSkgOiBmbjtcbn07XG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uU3RhcnQoZSkge1xuICBlLnRhcmdldC5jb21wb3NpbmcgPSB0cnVlO1xufVxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZChlKSB7XG4gIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICBpZiAodGFyZ2V0LmNvbXBvc2luZykge1xuICAgIHRhcmdldC5jb21wb3NpbmcgPSBmYWxzZTtcbiAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJpbnB1dFwiKSk7XG4gIH1cbn1cbmNvbnN0IGFzc2lnbktleSA9IFN5bWJvbChcIl9hc3NpZ25cIik7XG5jb25zdCB2TW9kZWxUZXh0ID0ge1xuICBjcmVhdGVkKGVsLCB7IG1vZGlmaWVyczogeyBsYXp5LCB0cmltLCBudW1iZXIgfSB9LCB2bm9kZSkge1xuICAgIGVsW2Fzc2lnbktleV0gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcbiAgICBjb25zdCBjYXN0VG9OdW1iZXIgPSBudW1iZXIgfHwgdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMudHlwZSA9PT0gXCJudW1iZXJcIjtcbiAgICBhZGRFdmVudExpc3RlbmVyKGVsLCBsYXp5ID8gXCJjaGFuZ2VcIiA6IFwiaW5wdXRcIiwgKGUpID0+IHtcbiAgICAgIGlmIChlLnRhcmdldC5jb21wb3NpbmcpIHJldHVybjtcbiAgICAgIGxldCBkb21WYWx1ZSA9IGVsLnZhbHVlO1xuICAgICAgaWYgKHRyaW0pIHtcbiAgICAgICAgZG9tVmFsdWUgPSBkb21WYWx1ZS50cmltKCk7XG4gICAgICB9XG4gICAgICBpZiAoY2FzdFRvTnVtYmVyKSB7XG4gICAgICAgIGRvbVZhbHVlID0gbG9vc2VUb051bWJlcihkb21WYWx1ZSk7XG4gICAgICB9XG4gICAgICBlbFthc3NpZ25LZXldKGRvbVZhbHVlKTtcbiAgICB9KTtcbiAgICBpZiAodHJpbSkge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgXCJjaGFuZ2VcIiwgKCkgPT4ge1xuICAgICAgICBlbC52YWx1ZSA9IGVsLnZhbHVlLnRyaW0oKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoIWxhenkpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsIFwiY29tcG9zaXRpb25zdGFydFwiLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgXCJjb21wb3NpdGlvbmVuZFwiLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsIFwiY2hhbmdlXCIsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgIH1cbiAgfSxcbiAgLy8gc2V0IHZhbHVlIG9uIG1vdW50ZWQgc28gaXQncyBhZnRlciBtaW4vbWF4IGZvciB0eXBlPVwicmFuZ2VcIlxuICBtb3VudGVkKGVsLCB7IHZhbHVlIH0pIHtcbiAgICBlbC52YWx1ZSA9IHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWU7XG4gIH0sXG4gIGJlZm9yZVVwZGF0ZShlbCwgeyB2YWx1ZSwgb2xkVmFsdWUsIG1vZGlmaWVyczogeyBsYXp5LCB0cmltLCBudW1iZXIgfSB9LCB2bm9kZSkge1xuICAgIGVsW2Fzc2lnbktleV0gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcbiAgICBpZiAoZWwuY29tcG9zaW5nKSByZXR1cm47XG4gICAgY29uc3QgZWxWYWx1ZSA9IChudW1iZXIgfHwgZWwudHlwZSA9PT0gXCJudW1iZXJcIikgJiYgIS9eMFxcZC8udGVzdChlbC52YWx1ZSkgPyBsb29zZVRvTnVtYmVyKGVsLnZhbHVlKSA6IGVsLnZhbHVlO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZTtcbiAgICBpZiAoZWxWYWx1ZSA9PT0gbmV3VmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGVsICYmIGVsLnR5cGUgIT09IFwicmFuZ2VcIikge1xuICAgICAgaWYgKGxhenkgJiYgdmFsdWUgPT09IG9sZFZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0cmltICYmIGVsLnZhbHVlLnRyaW0oKSA9PT0gbmV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBlbC52YWx1ZSA9IG5ld1ZhbHVlO1xuICB9XG59O1xuY29uc3Qgdk1vZGVsQ2hlY2tib3ggPSB7XG4gIC8vICM0MDk2IGFycmF5IGNoZWNrYm94ZXMgbmVlZCB0byBiZSBkZWVwIHRyYXZlcnNlZFxuICBkZWVwOiB0cnVlLFxuICBjcmVhdGVkKGVsLCBfLCB2bm9kZSkge1xuICAgIGVsW2Fzc2lnbktleV0gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcbiAgICBhZGRFdmVudExpc3RlbmVyKGVsLCBcImNoYW5nZVwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2RlbFZhbHVlID0gZWwuX21vZGVsVmFsdWU7XG4gICAgICBjb25zdCBlbGVtZW50VmFsdWUgPSBnZXRWYWx1ZShlbCk7XG4gICAgICBjb25zdCBjaGVja2VkID0gZWwuY2hlY2tlZDtcbiAgICAgIGNvbnN0IGFzc2lnbiA9IGVsW2Fzc2lnbktleV07XG4gICAgICBpZiAoaXNBcnJheShtb2RlbFZhbHVlKSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IGxvb3NlSW5kZXhPZihtb2RlbFZhbHVlLCBlbGVtZW50VmFsdWUpO1xuICAgICAgICBjb25zdCBmb3VuZCA9IGluZGV4ICE9PSAtMTtcbiAgICAgICAgaWYgKGNoZWNrZWQgJiYgIWZvdW5kKSB7XG4gICAgICAgICAgYXNzaWduKG1vZGVsVmFsdWUuY29uY2F0KGVsZW1lbnRWYWx1ZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKCFjaGVja2VkICYmIGZvdW5kKSB7XG4gICAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBbLi4ubW9kZWxWYWx1ZV07XG4gICAgICAgICAgZmlsdGVyZWQuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICBhc3NpZ24oZmlsdGVyZWQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzU2V0KG1vZGVsVmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IGNsb25lZCA9IG5ldyBTZXQobW9kZWxWYWx1ZSk7XG4gICAgICAgIGlmIChjaGVja2VkKSB7XG4gICAgICAgICAgY2xvbmVkLmFkZChlbGVtZW50VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsb25lZC5kZWxldGUoZWxlbWVudFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBhc3NpZ24oY2xvbmVkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFzc2lnbihnZXRDaGVja2JveFZhbHVlKGVsLCBjaGVja2VkKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIC8vIHNldCBpbml0aWFsIGNoZWNrZWQgb24gbW91bnQgdG8gd2FpdCBmb3IgdHJ1ZS12YWx1ZS9mYWxzZS12YWx1ZVxuICBtb3VudGVkOiBzZXRDaGVja2VkLFxuICBiZWZvcmVVcGRhdGUoZWwsIGJpbmRpbmcsIHZub2RlKSB7XG4gICAgZWxbYXNzaWduS2V5XSA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICAgIHNldENoZWNrZWQoZWwsIGJpbmRpbmcsIHZub2RlKTtcbiAgfVxufTtcbmZ1bmN0aW9uIHNldENoZWNrZWQoZWwsIHsgdmFsdWUsIG9sZFZhbHVlIH0sIHZub2RlKSB7XG4gIGVsLl9tb2RlbFZhbHVlID0gdmFsdWU7XG4gIGxldCBjaGVja2VkO1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBjaGVja2VkID0gbG9vc2VJbmRleE9mKHZhbHVlLCB2bm9kZS5wcm9wcy52YWx1ZSkgPiAtMTtcbiAgfSBlbHNlIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICBjaGVja2VkID0gdmFsdWUuaGFzKHZub2RlLnByb3BzLnZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodmFsdWUgPT09IG9sZFZhbHVlKSByZXR1cm47XG4gICAgY2hlY2tlZCA9IGxvb3NlRXF1YWwodmFsdWUsIGdldENoZWNrYm94VmFsdWUoZWwsIHRydWUpKTtcbiAgfVxuICBpZiAoZWwuY2hlY2tlZCAhPT0gY2hlY2tlZCkge1xuICAgIGVsLmNoZWNrZWQgPSBjaGVja2VkO1xuICB9XG59XG5jb25zdCB2TW9kZWxSYWRpbyA9IHtcbiAgY3JlYXRlZChlbCwgeyB2YWx1ZSB9LCB2bm9kZSkge1xuICAgIGVsLmNoZWNrZWQgPSBsb29zZUVxdWFsKHZhbHVlLCB2bm9kZS5wcm9wcy52YWx1ZSk7XG4gICAgZWxbYXNzaWduS2V5XSA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsIFwiY2hhbmdlXCIsICgpID0+IHtcbiAgICAgIGVsW2Fzc2lnbktleV0oZ2V0VmFsdWUoZWwpKTtcbiAgICB9KTtcbiAgfSxcbiAgYmVmb3JlVXBkYXRlKGVsLCB7IHZhbHVlLCBvbGRWYWx1ZSB9LCB2bm9kZSkge1xuICAgIGVsW2Fzc2lnbktleV0gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcbiAgICBpZiAodmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICBlbC5jaGVja2VkID0gbG9vc2VFcXVhbCh2YWx1ZSwgdm5vZGUucHJvcHMudmFsdWUpO1xuICAgIH1cbiAgfVxufTtcbmNvbnN0IHZNb2RlbFNlbGVjdCA9IHtcbiAgLy8gPHNlbGVjdCBtdWx0aXBsZT4gdmFsdWUgbmVlZCB0byBiZSBkZWVwIHRyYXZlcnNlZFxuICBkZWVwOiB0cnVlLFxuICBjcmVhdGVkKGVsLCB7IHZhbHVlLCBtb2RpZmllcnM6IHsgbnVtYmVyIH0gfSwgdm5vZGUpIHtcbiAgICBjb25zdCBpc1NldE1vZGVsID0gaXNTZXQodmFsdWUpO1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsIFwiY2hhbmdlXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IHNlbGVjdGVkVmFsID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGVsLm9wdGlvbnMsIChvKSA9PiBvLnNlbGVjdGVkKS5tYXAoXG4gICAgICAgIChvKSA9PiBudW1iZXIgPyBsb29zZVRvTnVtYmVyKGdldFZhbHVlKG8pKSA6IGdldFZhbHVlKG8pXG4gICAgICApO1xuICAgICAgZWxbYXNzaWduS2V5XShcbiAgICAgICAgZWwubXVsdGlwbGUgPyBpc1NldE1vZGVsID8gbmV3IFNldChzZWxlY3RlZFZhbCkgOiBzZWxlY3RlZFZhbCA6IHNlbGVjdGVkVmFsWzBdXG4gICAgICApO1xuICAgICAgZWwuX2Fzc2lnbmluZyA9IHRydWU7XG4gICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIGVsLl9hc3NpZ25pbmcgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGVsW2Fzc2lnbktleV0gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcbiAgfSxcbiAgLy8gc2V0IHZhbHVlIGluIG1vdW50ZWQgJiB1cGRhdGVkIGJlY2F1c2UgPHNlbGVjdD4gcmVsaWVzIG9uIGl0cyBjaGlsZHJlblxuICAvLyA8b3B0aW9uPnMuXG4gIG1vdW50ZWQoZWwsIHsgdmFsdWUgfSkge1xuICAgIHNldFNlbGVjdGVkKGVsLCB2YWx1ZSk7XG4gIH0sXG4gIGJlZm9yZVVwZGF0ZShlbCwgX2JpbmRpbmcsIHZub2RlKSB7XG4gICAgZWxbYXNzaWduS2V5XSA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICB9LFxuICB1cGRhdGVkKGVsLCB7IHZhbHVlIH0pIHtcbiAgICBpZiAoIWVsLl9hc3NpZ25pbmcpIHtcbiAgICAgIHNldFNlbGVjdGVkKGVsLCB2YWx1ZSk7XG4gICAgfVxuICB9XG59O1xuZnVuY3Rpb24gc2V0U2VsZWN0ZWQoZWwsIHZhbHVlKSB7XG4gIGNvbnN0IGlzTXVsdGlwbGUgPSBlbC5tdWx0aXBsZTtcbiAgY29uc3QgaXNBcnJheVZhbHVlID0gaXNBcnJheSh2YWx1ZSk7XG4gIGlmIChpc011bHRpcGxlICYmICFpc0FycmF5VmFsdWUgJiYgIWlzU2V0KHZhbHVlKSkge1xuICAgICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgJiYgd2FybihcbiAgICAgIGA8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw+IGV4cGVjdHMgYW4gQXJyYXkgb3IgU2V0IHZhbHVlIGZvciBpdHMgYmluZGluZywgYnV0IGdvdCAke09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpfS5gXG4gICAgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGNvbnN0IG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XG4gICAgY29uc3Qgb3B0aW9uVmFsdWUgPSBnZXRWYWx1ZShvcHRpb24pO1xuICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICBpZiAoaXNBcnJheVZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvblR5cGUgPSB0eXBlb2Ygb3B0aW9uVmFsdWU7XG4gICAgICAgIGlmIChvcHRpb25UeXBlID09PSBcInN0cmluZ1wiIHx8IG9wdGlvblR5cGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB2YWx1ZS5zb21lKCh2KSA9PiBTdHJpbmcodikgPT09IFN0cmluZyhvcHRpb25WYWx1ZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgb3B0aW9uVmFsdWUpID4gLTE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHZhbHVlLmhhcyhvcHRpb25WYWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbiksIHZhbHVlKSkge1xuICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAoIWlzTXVsdGlwbGUgJiYgZWwuc2VsZWN0ZWRJbmRleCAhPT0gLTEpIHtcbiAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFZhbHVlKGVsKSB7XG4gIHJldHVybiBcIl92YWx1ZVwiIGluIGVsID8gZWwuX3ZhbHVlIDogZWwudmFsdWU7XG59XG5mdW5jdGlvbiBnZXRDaGVja2JveFZhbHVlKGVsLCBjaGVja2VkKSB7XG4gIGNvbnN0IGtleSA9IGNoZWNrZWQgPyBcIl90cnVlVmFsdWVcIiA6IFwiX2ZhbHNlVmFsdWVcIjtcbiAgcmV0dXJuIGtleSBpbiBlbCA/IGVsW2tleV0gOiBjaGVja2VkO1xufVxuY29uc3Qgdk1vZGVsRHluYW1pYyA9IHtcbiAgY3JlYXRlZChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgbnVsbCwgXCJjcmVhdGVkXCIpO1xuICB9LFxuICBtb3VudGVkKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBudWxsLCBcIm1vdW50ZWRcIik7XG4gIH0sXG4gIGJlZm9yZVVwZGF0ZShlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSkge1xuICAgIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUsIFwiYmVmb3JlVXBkYXRlXCIpO1xuICB9LFxuICB1cGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlKSB7XG4gICAgY2FsbE1vZGVsSG9vayhlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSwgXCJ1cGRhdGVkXCIpO1xuICB9XG59O1xuZnVuY3Rpb24gcmVzb2x2ZUR5bmFtaWNNb2RlbCh0YWdOYW1lLCB0eXBlKSB7XG4gIHN3aXRjaCAodGFnTmFtZSkge1xuICAgIGNhc2UgXCJTRUxFQ1RcIjpcbiAgICAgIHJldHVybiB2TW9kZWxTZWxlY3Q7XG4gICAgY2FzZSBcIlRFWFRBUkVBXCI6XG4gICAgICByZXR1cm4gdk1vZGVsVGV4dDtcbiAgICBkZWZhdWx0OlxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJjaGVja2JveFwiOlxuICAgICAgICAgIHJldHVybiB2TW9kZWxDaGVja2JveDtcbiAgICAgICAgY2FzZSBcInJhZGlvXCI6XG4gICAgICAgICAgcmV0dXJuIHZNb2RlbFJhZGlvO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiB2TW9kZWxUZXh0O1xuICAgICAgfVxuICB9XG59XG5mdW5jdGlvbiBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlLCBob29rKSB7XG4gIGNvbnN0IG1vZGVsVG9Vc2UgPSByZXNvbHZlRHluYW1pY01vZGVsKFxuICAgIGVsLnRhZ05hbWUsXG4gICAgdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMudHlwZVxuICApO1xuICBjb25zdCBmbiA9IG1vZGVsVG9Vc2VbaG9va107XG4gIGZuICYmIGZuKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlKTtcbn1cbmZ1bmN0aW9uIGluaXRWTW9kZWxGb3JTU1IoKSB7XG4gIHZNb2RlbFRleHQuZ2V0U1NSUHJvcHMgPSAoeyB2YWx1ZSB9KSA9PiAoeyB2YWx1ZSB9KTtcbiAgdk1vZGVsUmFkaW8uZ2V0U1NSUHJvcHMgPSAoeyB2YWx1ZSB9LCB2bm9kZSkgPT4ge1xuICAgIGlmICh2bm9kZS5wcm9wcyAmJiBsb29zZUVxdWFsKHZub2RlLnByb3BzLnZhbHVlLCB2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB7IGNoZWNrZWQ6IHRydWUgfTtcbiAgICB9XG4gIH07XG4gIHZNb2RlbENoZWNrYm94LmdldFNTUlByb3BzID0gKHsgdmFsdWUgfSwgdm5vZGUpID0+IHtcbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGlmICh2bm9kZS5wcm9wcyAmJiBsb29zZUluZGV4T2YodmFsdWUsIHZub2RlLnByb3BzLnZhbHVlKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiB7IGNoZWNrZWQ6IHRydWUgfTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgICAgaWYgKHZub2RlLnByb3BzICYmIHZhbHVlLmhhcyh2bm9kZS5wcm9wcy52YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHsgY2hlY2tlZDogdHJ1ZSB9O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgIHJldHVybiB7IGNoZWNrZWQ6IHRydWUgfTtcbiAgICB9XG4gIH07XG4gIHZNb2RlbER5bmFtaWMuZ2V0U1NSUHJvcHMgPSAoYmluZGluZywgdm5vZGUpID0+IHtcbiAgICBpZiAodHlwZW9mIHZub2RlLnR5cGUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbW9kZWxUb1VzZSA9IHJlc29sdmVEeW5hbWljTW9kZWwoXG4gICAgICAvLyByZXNvbHZlRHluYW1pY01vZGVsIGV4cGVjdHMgYW4gdXBwZXJjYXNlIHRhZyBuYW1lLCBidXQgdm5vZGUudHlwZSBpcyBsb3dlcmNhc2VcbiAgICAgIHZub2RlLnR5cGUudG9VcHBlckNhc2UoKSxcbiAgICAgIHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLnR5cGVcbiAgICApO1xuICAgIGlmIChtb2RlbFRvVXNlLmdldFNTUlByb3BzKSB7XG4gICAgICByZXR1cm4gbW9kZWxUb1VzZS5nZXRTU1JQcm9wcyhiaW5kaW5nLCB2bm9kZSk7XG4gICAgfVxuICB9O1xufVxuXG5jb25zdCBzeXN0ZW1Nb2RpZmllcnMgPSBbXCJjdHJsXCIsIFwic2hpZnRcIiwgXCJhbHRcIiwgXCJtZXRhXCJdO1xuY29uc3QgbW9kaWZpZXJHdWFyZHMgPSB7XG4gIHN0b3A6IChlKSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpLFxuICBwcmV2ZW50OiAoZSkgPT4gZS5wcmV2ZW50RGVmYXVsdCgpLFxuICBzZWxmOiAoZSkgPT4gZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCxcbiAgY3RybDogKGUpID0+ICFlLmN0cmxLZXksXG4gIHNoaWZ0OiAoZSkgPT4gIWUuc2hpZnRLZXksXG4gIGFsdDogKGUpID0+ICFlLmFsdEtleSxcbiAgbWV0YTogKGUpID0+ICFlLm1ldGFLZXksXG4gIGxlZnQ6IChlKSA9PiBcImJ1dHRvblwiIGluIGUgJiYgZS5idXR0b24gIT09IDAsXG4gIG1pZGRsZTogKGUpID0+IFwiYnV0dG9uXCIgaW4gZSAmJiBlLmJ1dHRvbiAhPT0gMSxcbiAgcmlnaHQ6IChlKSA9PiBcImJ1dHRvblwiIGluIGUgJiYgZS5idXR0b24gIT09IDIsXG4gIGV4YWN0OiAoZSwgbW9kaWZpZXJzKSA9PiBzeXN0ZW1Nb2RpZmllcnMuc29tZSgobSkgPT4gZVtgJHttfUtleWBdICYmICFtb2RpZmllcnMuaW5jbHVkZXMobSkpXG59O1xuY29uc3Qgd2l0aE1vZGlmaWVycyA9IChmbiwgbW9kaWZpZXJzKSA9PiB7XG4gIGNvbnN0IGNhY2hlID0gZm4uX3dpdGhNb2RzIHx8IChmbi5fd2l0aE1vZHMgPSB7fSk7XG4gIGNvbnN0IGNhY2hlS2V5ID0gbW9kaWZpZXJzLmpvaW4oXCIuXCIpO1xuICByZXR1cm4gY2FjaGVbY2FjaGVLZXldIHx8IChjYWNoZVtjYWNoZUtleV0gPSAoKGV2ZW50LCAuLi5hcmdzKSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb2RpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGd1YXJkID0gbW9kaWZpZXJHdWFyZHNbbW9kaWZpZXJzW2ldXTtcbiAgICAgIGlmIChndWFyZCAmJiBndWFyZChldmVudCwgbW9kaWZpZXJzKSkgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gZm4oZXZlbnQsIC4uLmFyZ3MpO1xuICB9KSk7XG59O1xuY29uc3Qga2V5TmFtZXMgPSB7XG4gIGVzYzogXCJlc2NhcGVcIixcbiAgc3BhY2U6IFwiIFwiLFxuICB1cDogXCJhcnJvdy11cFwiLFxuICBsZWZ0OiBcImFycm93LWxlZnRcIixcbiAgcmlnaHQ6IFwiYXJyb3ctcmlnaHRcIixcbiAgZG93bjogXCJhcnJvdy1kb3duXCIsXG4gIGRlbGV0ZTogXCJiYWNrc3BhY2VcIlxufTtcbmNvbnN0IHdpdGhLZXlzID0gKGZuLCBtb2RpZmllcnMpID0+IHtcbiAgY29uc3QgY2FjaGUgPSBmbi5fd2l0aEtleXMgfHwgKGZuLl93aXRoS2V5cyA9IHt9KTtcbiAgY29uc3QgY2FjaGVLZXkgPSBtb2RpZmllcnMuam9pbihcIi5cIik7XG4gIHJldHVybiBjYWNoZVtjYWNoZUtleV0gfHwgKGNhY2hlW2NhY2hlS2V5XSA9ICgoZXZlbnQpID0+IHtcbiAgICBpZiAoIShcImtleVwiIGluIGV2ZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBldmVudEtleSA9IGh5cGhlbmF0ZShldmVudC5rZXkpO1xuICAgIGlmIChtb2RpZmllcnMuc29tZShcbiAgICAgIChrKSA9PiBrID09PSBldmVudEtleSB8fCBrZXlOYW1lc1trXSA9PT0gZXZlbnRLZXlcbiAgICApKSB7XG4gICAgICByZXR1cm4gZm4oZXZlbnQpO1xuICAgIH1cbiAgfSkpO1xufTtcblxuY29uc3QgcmVuZGVyZXJPcHRpb25zID0gLyogQF9fUFVSRV9fICovIGV4dGVuZCh7IHBhdGNoUHJvcCB9LCBub2RlT3BzKTtcbmxldCByZW5kZXJlcjtcbmxldCBlbmFibGVkSHlkcmF0aW9uID0gZmFsc2U7XG5mdW5jdGlvbiBlbnN1cmVSZW5kZXJlcigpIHtcbiAgcmV0dXJuIHJlbmRlcmVyIHx8IChyZW5kZXJlciA9IGNyZWF0ZVJlbmRlcmVyKHJlbmRlcmVyT3B0aW9ucykpO1xufVxuZnVuY3Rpb24gZW5zdXJlSHlkcmF0aW9uUmVuZGVyZXIoKSB7XG4gIHJlbmRlcmVyID0gZW5hYmxlZEh5ZHJhdGlvbiA/IHJlbmRlcmVyIDogY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIocmVuZGVyZXJPcHRpb25zKTtcbiAgZW5hYmxlZEh5ZHJhdGlvbiA9IHRydWU7XG4gIHJldHVybiByZW5kZXJlcjtcbn1cbmNvbnN0IHJlbmRlciA9ICgoLi4uYXJncykgPT4ge1xuICBlbnN1cmVSZW5kZXJlcigpLnJlbmRlciguLi5hcmdzKTtcbn0pO1xuY29uc3QgaHlkcmF0ZSA9ICgoLi4uYXJncykgPT4ge1xuICBlbnN1cmVIeWRyYXRpb25SZW5kZXJlcigpLmh5ZHJhdGUoLi4uYXJncyk7XG59KTtcbmNvbnN0IGNyZWF0ZUFwcCA9ICgoLi4uYXJncykgPT4ge1xuICBjb25zdCBhcHAgPSBlbnN1cmVSZW5kZXJlcigpLmNyZWF0ZUFwcCguLi5hcmdzKTtcbiAgaWYgKCEhKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikpIHtcbiAgICBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApO1xuICAgIGluamVjdENvbXBpbGVyT3B0aW9uc0NoZWNrKGFwcCk7XG4gIH1cbiAgY29uc3QgeyBtb3VudCB9ID0gYXBwO1xuICBhcHAubW91bnQgPSAoY29udGFpbmVyT3JTZWxlY3RvcikgPT4ge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IG5vcm1hbGl6ZUNvbnRhaW5lcihjb250YWluZXJPclNlbGVjdG9yKTtcbiAgICBpZiAoIWNvbnRhaW5lcikgcmV0dXJuO1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IGFwcC5fY29tcG9uZW50O1xuICAgIGlmICghaXNGdW5jdGlvbihjb21wb25lbnQpICYmICFjb21wb25lbnQucmVuZGVyICYmICFjb21wb25lbnQudGVtcGxhdGUpIHtcbiAgICAgIGNvbXBvbmVudC50ZW1wbGF0ZSA9IGNvbnRhaW5lci5pbm5lckhUTUw7XG4gICAgfVxuICAgIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgIGNvbnRhaW5lci50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgfVxuICAgIGNvbnN0IHByb3h5ID0gbW91bnQoY29udGFpbmVyLCBmYWxzZSwgcmVzb2x2ZVJvb3ROYW1lc3BhY2UoY29udGFpbmVyKSk7XG4gICAgaWYgKGNvbnRhaW5lciBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoXCJ2LWNsb2FrXCIpO1xuICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZShcImRhdGEtdi1hcHBcIiwgXCJcIik7XG4gICAgfVxuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbiAgcmV0dXJuIGFwcDtcbn0pO1xuY29uc3QgY3JlYXRlU1NSQXBwID0gKCguLi5hcmdzKSA9PiB7XG4gIGNvbnN0IGFwcCA9IGVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyKCkuY3JlYXRlQXBwKC4uLmFyZ3MpO1xuICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSkge1xuICAgIGluamVjdE5hdGl2ZVRhZ0NoZWNrKGFwcCk7XG4gICAgaW5qZWN0Q29tcGlsZXJPcHRpb25zQ2hlY2soYXBwKTtcbiAgfVxuICBjb25zdCB7IG1vdW50IH0gPSBhcHA7XG4gIGFwcC5tb3VudCA9IChjb250YWluZXJPclNlbGVjdG9yKSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gbm9ybWFsaXplQ29udGFpbmVyKGNvbnRhaW5lck9yU2VsZWN0b3IpO1xuICAgIGlmIChjb250YWluZXIpIHtcbiAgICAgIHJldHVybiBtb3VudChjb250YWluZXIsIHRydWUsIHJlc29sdmVSb290TmFtZXNwYWNlKGNvbnRhaW5lcikpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGFwcDtcbn0pO1xuZnVuY3Rpb24gcmVzb2x2ZVJvb3ROYW1lc3BhY2UoY29udGFpbmVyKSB7XG4gIGlmIChjb250YWluZXIgaW5zdGFuY2VvZiBTVkdFbGVtZW50KSB7XG4gICAgcmV0dXJuIFwic3ZnXCI7XG4gIH1cbiAgaWYgKHR5cGVvZiBNYXRoTUxFbGVtZW50ID09PSBcImZ1bmN0aW9uXCIgJiYgY29udGFpbmVyIGluc3RhbmNlb2YgTWF0aE1MRWxlbWVudCkge1xuICAgIHJldHVybiBcIm1hdGhtbFwiO1xuICB9XG59XG5mdW5jdGlvbiBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwcC5jb25maWcsIFwiaXNOYXRpdmVUYWdcIiwge1xuICAgIHZhbHVlOiAodGFnKSA9PiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWR1RhZyh0YWcpIHx8IGlzTWF0aE1MVGFnKHRhZyksXG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xufVxuZnVuY3Rpb24gaW5qZWN0Q29tcGlsZXJPcHRpb25zQ2hlY2soYXBwKSB7XG4gIGlmIChpc1J1bnRpbWVPbmx5KCkpIHtcbiAgICBjb25zdCBpc0N1c3RvbUVsZW1lbnQgPSBhcHAuY29uZmlnLmlzQ3VzdG9tRWxlbWVudDtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXBwLmNvbmZpZywgXCJpc0N1c3RvbUVsZW1lbnRcIiwge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gaXNDdXN0b21FbGVtZW50O1xuICAgICAgfSxcbiAgICAgIHNldCgpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBgVGhlIFxcYGlzQ3VzdG9tRWxlbWVudFxcYCBjb25maWcgb3B0aW9uIGlzIGRlcHJlY2F0ZWQuIFVzZSBcXGBjb21waWxlck9wdGlvbnMuaXNDdXN0b21FbGVtZW50XFxgIGluc3RlYWQuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGNvbXBpbGVyT3B0aW9ucyA9IGFwcC5jb25maWcuY29tcGlsZXJPcHRpb25zO1xuICAgIGNvbnN0IG1zZyA9IGBUaGUgXFxgY29tcGlsZXJPcHRpb25zXFxgIGNvbmZpZyBvcHRpb24gaXMgb25seSByZXNwZWN0ZWQgd2hlbiB1c2luZyBhIGJ1aWxkIG9mIFZ1ZS5qcyB0aGF0IGluY2x1ZGVzIHRoZSBydW50aW1lIGNvbXBpbGVyIChha2EgXCJmdWxsIGJ1aWxkXCIpLiBTaW5jZSB5b3UgYXJlIHVzaW5nIHRoZSBydW50aW1lLW9ubHkgYnVpbGQsIFxcYGNvbXBpbGVyT3B0aW9uc1xcYCBtdXN0IGJlIHBhc3NlZCB0byBcXGBAdnVlL2NvbXBpbGVyLWRvbVxcYCBpbiB0aGUgYnVpbGQgc2V0dXAgaW5zdGVhZC5cbi0gRm9yIHZ1ZS1sb2FkZXI6IHBhc3MgaXQgdmlhIHZ1ZS1sb2FkZXIncyBcXGBjb21waWxlck9wdGlvbnNcXGAgbG9hZGVyIG9wdGlvbi5cbi0gRm9yIHZ1ZS1jbGk6IHNlZSBodHRwczovL2NsaS52dWVqcy5vcmcvZ3VpZGUvd2VicGFjay5odG1sI21vZGlmeWluZy1vcHRpb25zLW9mLWEtbG9hZGVyXG4tIEZvciB2aXRlOiBwYXNzIGl0IHZpYSBAdml0ZWpzL3BsdWdpbi12dWUgb3B0aW9ucy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS92aXRlanMvdml0ZS1wbHVnaW4tdnVlL3RyZWUvbWFpbi9wYWNrYWdlcy9wbHVnaW4tdnVlI2V4YW1wbGUtZm9yLXBhc3Npbmctb3B0aW9ucy10by12dWVjb21waWxlci1zZmNgO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcHAuY29uZmlnLCBcImNvbXBpbGVyT3B0aW9uc1wiLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHdhcm4obXNnKTtcbiAgICAgICAgcmV0dXJuIGNvbXBpbGVyT3B0aW9ucztcbiAgICAgIH0sXG4gICAgICBzZXQoKSB7XG4gICAgICAgIHdhcm4obXNnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gbm9ybWFsaXplQ29udGFpbmVyKGNvbnRhaW5lcikge1xuICBpZiAoaXNTdHJpbmcoY29udGFpbmVyKSkge1xuICAgIGNvbnN0IHJlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyKTtcbiAgICBpZiAoISEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSAmJiAhcmVzKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBgRmFpbGVkIHRvIG1vdW50IGFwcDogbW91bnQgdGFyZ2V0IHNlbGVjdG9yIFwiJHtjb250YWluZXJ9XCIgcmV0dXJuZWQgbnVsbC5gXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpICYmIHdpbmRvdy5TaGFkb3dSb290ICYmIGNvbnRhaW5lciBpbnN0YW5jZW9mIHdpbmRvdy5TaGFkb3dSb290ICYmIGNvbnRhaW5lci5tb2RlID09PSBcImNsb3NlZFwiKSB7XG4gICAgd2FybihcbiAgICAgIGBtb3VudGluZyBvbiBhIFNoYWRvd1Jvb3Qgd2l0aCBcXGB7bW9kZTogXCJjbG9zZWRcIn1cXGAgbWF5IGxlYWQgdG8gdW5wcmVkaWN0YWJsZSBidWdzYFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn1cbmxldCBzc3JEaXJlY3RpdmVJbml0aWFsaXplZCA9IGZhbHNlO1xuY29uc3QgaW5pdERpcmVjdGl2ZXNGb3JTU1IgPSAoKSA9PiB7XG4gIGlmICghc3NyRGlyZWN0aXZlSW5pdGlhbGl6ZWQpIHtcbiAgICBzc3JEaXJlY3RpdmVJbml0aWFsaXplZCA9IHRydWU7XG4gICAgaW5pdFZNb2RlbEZvclNTUigpO1xuICAgIGluaXRWU2hvd0ZvclNTUigpO1xuICB9XG59IDtcblxuZXhwb3J0IHsgVHJhbnNpdGlvbiwgVHJhbnNpdGlvbkdyb3VwLCBWdWVFbGVtZW50LCBjcmVhdGVBcHAsIGNyZWF0ZVNTUkFwcCwgZGVmaW5lQ3VzdG9tRWxlbWVudCwgZGVmaW5lU1NSQ3VzdG9tRWxlbWVudCwgaHlkcmF0ZSwgaW5pdERpcmVjdGl2ZXNGb3JTU1IsIHJlbmRlciwgdXNlQ3NzTW9kdWxlLCB1c2VDc3NWYXJzLCB1c2VIb3N0LCB1c2VTaGFkb3dSb290LCB2TW9kZWxDaGVja2JveCwgdk1vZGVsRHluYW1pYywgdk1vZGVsUmFkaW8sIHZNb2RlbFNlbGVjdCwgdk1vZGVsVGV4dCwgdlNob3csIHdpdGhLZXlzLCB3aXRoTW9kaWZpZXJzIH07XG4iLCIvKipcbiogdnVlIHYzLjUuMjFcbiogKGMpIDIwMTgtcHJlc2VudCBZdXhpIChFdmFuKSBZb3UgYW5kIFZ1ZSBjb250cmlidXRvcnNcbiogQGxpY2Vuc2UgTUlUXG4qKi9cbmltcG9ydCB7IGluaXRDdXN0b21Gb3JtYXR0ZXIsIHdhcm4gfSBmcm9tICdAdnVlL3J1bnRpbWUtZG9tJztcbmV4cG9ydCAqIGZyb20gJ0B2dWUvcnVudGltZS1kb20nO1xuXG5mdW5jdGlvbiBpbml0RGV2KCkge1xuICB7XG4gICAgaW5pdEN1c3RvbUZvcm1hdHRlcigpO1xuICB9XG59XG5cbmlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gIGluaXREZXYoKTtcbn1cbmNvbnN0IGNvbXBpbGUgPSAoKSA9PiB7XG4gIGlmICghIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgd2FybihcbiAgICAgIGBSdW50aW1lIGNvbXBpbGF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBidWlsZCBvZiBWdWUuYCArIChgIENvbmZpZ3VyZSB5b3VyIGJ1bmRsZXIgdG8gYWxpYXMgXCJ2dWVcIiB0byBcInZ1ZS9kaXN0L3Z1ZS5lc20tYnVuZGxlci5qc1wiLmAgKVxuICAgICk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGNvbXBpbGUgfTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gcnVudGltZSBoZWxwZXIgZm9yIHNldHRpbmcgcHJvcGVydGllcyBvbiBjb21wb25lbnRzXG4vLyBpbiBhIHRyZWUtc2hha2FibGUgd2F5XG5leHBvcnRzLmRlZmF1bHQgPSAoc2ZjLCBwcm9wcykgPT4ge1xuICAgIGNvbnN0IHRhcmdldCA9IHNmYy5fX3ZjY09wdHMgfHwgc2ZjO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBwcm9wcykge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn07XG4iXSwibmFtZXMiOlsic3RyIiwibWFwIiwiT2JqZWN0IiwiY3JlYXRlIiwia2V5Iiwic3BsaXQiLCJ2YWwiLCJFTVBUWV9PQkoiLCJFTVBUWV9BUlIiLCJOTyIsImlzT24iLCJjaGFyQ29kZUF0IiwiaXNNb2RlbExpc3RlbmVyIiwic3RhcnRzV2l0aCIsImFzc2lnbiIsInJlbW92ZSIsImFyciIsImVsIiwiaSIsImluZGV4T2YiLCJzcGxpY2UiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImhhc093biIsImNhbGwiLCJBcnJheSIsImlzQXJyYXkiLCJpc01hcCIsInRvVHlwZVN0cmluZyIsImlzU2V0IiwiaXNEYXRlIiwiaXNTeW1ib2wiLCJpc1Byb21pc2UiLCJ0aGVuIiwiY2F0Y2giLCJvYmplY3RUb1N0cmluZyIsInRvU3RyaW5nIiwidmFsdWUiLCJzbGljZSIsImlzUGxhaW5PYmplY3QiLCJpc0ludGVnZXJLZXkiLCJwYXJzZUludCIsImlzUmVzZXJ2ZWRQcm9wIiwiY2FjaGVTdHJpbmdGdW5jdGlvbiIsImZuIiwiY2FjaGUiLCJjYW1lbGl6ZVJFIiwicmVwbGFjZSIsImMiLCJ0b1VwcGVyQ2FzZSIsImh5cGhlbmF0ZVJFIiwiaHlwaGVuYXRlIiwidG9Mb3dlckNhc2UiLCJjaGFyQXQiLCJ0b0hhbmRsZXJLZXkiLCJoYXNDaGFuZ2VkIiwib2xkVmFsdWUiLCJpcyIsImludm9rZUFycmF5Rm5zIiwiZm5zIiwiYXJnIiwibGVuZ3RoIiwiZGVmIiwib2JqIiwid3JpdGFibGUiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJsb29zZVRvTnVtYmVyIiwibiIsInBhcnNlRmxvYXQiLCJpc05hTiIsInRvTnVtYmVyIiwiTnVtYmVyIiwiTmFOIiwiX2dsb2JhbFRoaXMiLCJnZXRHbG9iYWxUaGlzIiwiZ2xvYmFsVGhpcyIsInNlbGYiLCJ3aW5kb3ciLCJnIiwiaXNHbG9iYWxseUFsbG93ZWQiLCJyZXMiLCJpdGVtIiwibm9ybWFsaXplZCIsInBhcnNlU3RyaW5nU3R5bGUiLCJsaXN0RGVsaW1pdGVyUkUiLCJwcm9wZXJ0eURlbGltaXRlclJFIiwic3R5bGVDb21tZW50UkUiLCJjc3NUZXh0IiwicmV0IiwiZm9yRWFjaCIsInRtcCIsInRyaW0iLCJuYW1lIiwibm9ybWFsaXplUHJvcHMiLCJwcm9wcyIsImNsYXNzIiwia2xhc3MiLCJzdHlsZSIsImlzU3BlY2lhbEJvb2xlYW5BdHRyIiwibG9vc2VFcXVhbCIsImEiLCJiIiwiYVZhbGlkVHlwZSIsImJWYWxpZFR5cGUiLCJnZXRUaW1lIiwiZXF1YWwiLCJsb29zZUNvbXBhcmVBcnJheXMiLCJrZXlzIiwiYUhhc0tleSIsImJIYXNLZXkiLCJTdHJpbmciLCJsb29zZUluZGV4T2YiLCJmaW5kSW5kZXgiLCJ0b0Rpc3BsYXlTdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwicmVwbGFjZXIiLCJfa2V5Iiwic2l6ZSIsImVudHJpZXMiLCJyZWR1Y2UiLCJ2YWwyIiwic3RyaW5naWZ5U3ltYm9sIiwidmFsdWVzIiwidiIsIl9hIiwiZGVzY3JpcHRpb24iLCJpc0Zpbml0ZSIsImFjdGl2ZUVmZmVjdFNjb3BlIiwiYWN0aXZlU3ViIiwiRWZmZWN0U2NvcGUiLCJjb25zdHJ1Y3RvciIsImRldGFjaGVkIiwidGhpcyIsIl9hY3RpdmUiLCJfb24iLCJlZmZlY3RzIiwiY2xlYW51cHMiLCJfaXNQYXVzZWQiLCJwYXJlbnQiLCJpbmRleCIsInNjb3BlcyIsInB1c2giLCJhY3RpdmUiLCJwYXVzZSIsImwiLCJyZXN1bWUiLCJydW4iLCJjdXJyZW50RWZmZWN0U2NvcGUiLCJvbiIsInByZXZTY29wZSIsIm9mZiIsInN0b3AiLCJmcm9tUGFyZW50IiwibGFzdCIsInBvcCIsImVmZmVjdFNjb3BlIiwiZ2V0Q3VycmVudFNjb3BlIiwib25TY29wZURpc3Bvc2UiLCJmYWlsU2lsZW50bHkiLCJwYXVzZWRRdWV1ZUVmZmVjdHMiLCJXZWFrU2V0IiwiUmVhY3RpdmVFZmZlY3QiLCJkZXBzIiwiZGVwc1RhaWwiLCJmbGFncyIsIm5leHQiLCJjbGVhbnVwIiwic2NoZWR1bGVyIiwiaGFzIiwiZGVsZXRlIiwidHJpZ2dlciIsIm5vdGlmeSIsImJhdGNoIiwiY2xlYW51cEVmZmVjdCIsInByZXBhcmVEZXBzIiwicHJldkVmZmVjdCIsInByZXZTaG91bGRUcmFjayIsInNob3VsZFRyYWNrIiwiY2xlYW51cERlcHMiLCJsaW5rIiwibmV4dERlcCIsInJlbW92ZVN1YiIsIm9uU3RvcCIsImFkZCIsInJ1bklmRGlydHkiLCJpc0RpcnR5IiwiZGlydHkiLCJiYXRjaGVkU3ViIiwiYmF0Y2hlZENvbXB1dGVkIiwiYmF0Y2hEZXB0aCIsInN1YiIsImlzQ29tcHV0ZWQiLCJzdGFydEJhdGNoIiwiZW5kQmF0Y2giLCJlIiwiZXJyb3IiLCJlcnIiLCJ2ZXJzaW9uIiwicHJldkFjdGl2ZUxpbmsiLCJkZXAiLCJhY3RpdmVMaW5rIiwiaGVhZCIsInRhaWwiLCJwcmV2IiwicHJldkRlcCIsInJlbW92ZURlcCIsImNvbXB1dGVkIiwicmVmcmVzaENvbXB1dGVkIiwiX2RpcnR5IiwiZ2xvYmFsVmVyc2lvbiIsImlzU1NSIiwicHJldlN1YiIsIl92YWx1ZSIsInNvZnQiLCJuZXh0U3ViIiwic3VicyIsInNjIiwiZWZmZWN0Iiwib3B0aW9ucyIsInJ1bm5lciIsImJpbmQiLCJ0cmFja1N0YWNrIiwiTGluayIsIkRlcCIsIl9fdl9za2lwIiwidHJhY2siLCJkZWJ1Z0luZm8iLCJhZGRTdWIiLCJjdXJyZW50VGFpbCIsInRhcmdldE1hcCIsIldlYWtNYXAiLCJJVEVSQVRFX0tFWSIsIlN5bWJvbCIsIk1BUF9LRVlfSVRFUkFURV9LRVkiLCJBUlJBWV9JVEVSQVRFX0tFWSIsInRhcmdldCIsInR5cGUiLCJkZXBzTWFwIiwiZ2V0Iiwic2V0IiwiTWFwIiwibmV3VmFsdWUiLCJvbGRUYXJnZXQiLCJ0YXJnZXRJc0FycmF5IiwiaXNBcnJheUluZGV4IiwibmV3TGVuZ3RoIiwia2V5MiIsInJlYWN0aXZlUmVhZEFycmF5IiwiYXJyYXkiLCJyYXciLCJpc1NoYWxsb3ciLCJ0b1JlYWN0aXZlIiwic2hhbGxvd1JlYWRBcnJheSIsImFycmF5SW5zdHJ1bWVudGF0aW9ucyIsIl9fcHJvdG9fXyIsIml0ZXJhdG9yIiwiY29uY2F0IiwiYXJncyIsIngiLCJldmVyeSIsInRoaXNBcmciLCJhcHBseSIsImFyZ3VtZW50cyIsImZpbHRlciIsImZpbmQiLCJmaW5kTGFzdCIsImZpbmRMYXN0SW5kZXgiLCJpbmNsdWRlcyIsInNlYXJjaFByb3h5Iiwiam9pbiIsInNlcGFyYXRvciIsImxhc3RJbmRleE9mIiwibm9UcmFja2luZyIsInJlZHVjZVJpZ2h0Iiwic2hpZnQiLCJzb21lIiwidG9SZXZlcnNlZCIsInRvU29ydGVkIiwiY29tcGFyZXIiLCJ0b1NwbGljZWQiLCJ1bnNoaWZ0IiwibWV0aG9kIiwid3JhcFZhbHVlIiwiaXRlciIsIl9uZXh0IiwicmVzdWx0IiwiYXJyYXlQcm90byIsIndyYXBwZWRSZXRGbiIsIm5lZWRzV3JhcCIsIm1ldGhvZEZuIiwicmVzdWx0MiIsIndyYXBwZWRGbiIsImFjYyIsImlzUHJveHkiLCJpc05vblRyYWNrYWJsZUtleXMiLCJidWlsdEluU3ltYm9scyIsIlNldCIsImdldE93blByb3BlcnR5TmFtZXMiLCJCYXNlUmVhY3RpdmVIYW5kbGVyIiwiX2lzUmVhZG9ubHkiLCJfaXNTaGFsbG93IiwicmVjZWl2ZXIiLCJpc1JlYWRvbmx5MiIsImlzU2hhbGxvdzIiLCJzaGFsbG93UmVhZG9ubHlNYXAiLCJyZWFkb25seU1hcCIsInNoYWxsb3dSZWFjdGl2ZU1hcCIsInJlYWN0aXZlTWFwIiwiZ2V0UHJvdG90eXBlT2YiLCJSZWZsZWN0IiwicmVhZG9ubHkiLCJyZWFjdGl2ZSIsIk11dGFibGVSZWFjdGl2ZUhhbmRsZXIiLCJzdXBlciIsImlzT2xkVmFsdWVSZWFkb25seSIsImlzUmVhZG9ubHkiLCJoYWRLZXkiLCJkZWxldGVQcm9wZXJ0eSIsIm93bktleXMiLCJSZWFkb25seVJlYWN0aXZlSGFuZGxlciIsIm11dGFibGVIYW5kbGVycyIsInJlYWRvbmx5SGFuZGxlcnMiLCJzaGFsbG93UmVhY3RpdmVIYW5kbGVycyIsInNoYWxsb3dSZWFkb25seUhhbmRsZXJzIiwidG9TaGFsbG93IiwiZ2V0UHJvdG8iLCJjcmVhdGVSZWFkb25seU1ldGhvZCIsImNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlciIsInNoYWxsb3ciLCJpbnN0cnVtZW50YXRpb25zIiwicmF3VGFyZ2V0IiwicmF3S2V5Iiwid3JhcCIsInRvUmVhZG9ubHkiLCJjYWxsYmFjayIsIm9ic2VydmVkIiwiY2xlYXIiLCJoYWRJdGVtcyIsInRhcmdldElzTWFwIiwiaXNQYWlyIiwiaXNLZXlPbmx5IiwiaW5uZXJJdGVyYXRvciIsImRvbmUiLCJjcmVhdGVJdGVyYWJsZU1ldGhvZCIsImNyZWF0ZUluc3RydW1lbnRhdGlvbnMiLCJtdXRhYmxlQ29sbGVjdGlvbkhhbmRsZXJzIiwic2hhbGxvd0NvbGxlY3Rpb25IYW5kbGVycyIsInJlYWRvbmx5Q29sbGVjdGlvbkhhbmRsZXJzIiwic2hhbGxvd1JlYWRvbmx5Q29sbGVjdGlvbkhhbmRsZXJzIiwiY3JlYXRlUmVhY3RpdmVPYmplY3QiLCJzaGFsbG93UmVhY3RpdmUiLCJzaGFsbG93UmVhZG9ubHkiLCJiYXNlSGFuZGxlcnMiLCJjb2xsZWN0aW9uSGFuZGxlcnMiLCJwcm94eU1hcCIsInRhcmdldFR5cGUiLCJpc0V4dGVuc2libGUiLCJyYXdUeXBlIiwidGFyZ2V0VHlwZU1hcCIsImV4aXN0aW5nUHJveHkiLCJwcm94eSIsIlByb3h5IiwiaXNSZWFjdGl2ZSIsIm1hcmtSYXciLCJyIiwicmVmIiwiY3JlYXRlUmVmIiwic2hhbGxvd1JlZiIsInJhd1ZhbHVlIiwiUmVmSW1wbCIsIl9yYXdWYWx1ZSIsInVzZURpcmVjdFZhbHVlIiwidHJpZ2dlclJlZiIsInJlZjIiLCJ1bnJlZiIsInRvVmFsdWUiLCJzb3VyY2UiLCJzaGFsbG93VW53cmFwSGFuZGxlcnMiLCJwcm94eVJlZnMiLCJvYmplY3RXaXRoUmVmcyIsIkN1c3RvbVJlZkltcGwiLCJmYWN0b3J5IiwiX2dldCIsIl9zZXQiLCJuZXdWYWwiLCJjdXN0b21SZWYiLCJ0b1JlZnMiLCJvYmplY3QiLCJwcm9wZXJ0eVRvUmVmIiwiT2JqZWN0UmVmSW1wbCIsIl9vYmplY3QiLCJfZGVmYXVsdFZhbHVlIiwiZGVwTWFwIiwiZ2V0RGVwRnJvbVJlYWN0aXZlIiwiR2V0dGVyUmVmSW1wbCIsIl9nZXR0ZXIiLCJ0b1JlZiIsImRlZmF1bHRWYWx1ZSIsIkNvbXB1dGVkUmVmSW1wbCIsInNldHRlciIsIl9fdl9pc1JlZiIsIlRyYWNrT3BUeXBlcyIsIlRyaWdnZXJPcFR5cGVzIiwiSU5JVElBTF9XQVRDSEVSX1ZBTFVFIiwiY2xlYW51cE1hcCIsImFjdGl2ZVdhdGNoZXIiLCJnZXRDdXJyZW50V2F0Y2hlciIsIm9uV2F0Y2hlckNsZWFudXAiLCJjbGVhbnVwRm4iLCJvd25lciIsInRyYXZlcnNlIiwiZGVwdGgiLCJJbmZpbml0eSIsInNlZW4iLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInN0YWNrIiwiYXNzZXJ0TnVtYmVyIiwiRXJyb3JDb2RlcyIsImNhbGxXaXRoRXJyb3JIYW5kbGluZyIsImluc3RhbmNlIiwiaGFuZGxlRXJyb3IiLCJjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyIsInRocm93SW5EZXYiLCJ2bm9kZSIsImVycm9ySGFuZGxlciIsInRocm93VW5oYW5kbGVkRXJyb3JJblByb2R1Y3Rpb24iLCJhcHBDb250ZXh0IiwiY29uZmlnIiwiY3VyIiwiZXhwb3NlZEluc3RhbmNlIiwiZXJyb3JJbmZvIiwiZXJyb3JDYXB0dXJlZEhvb2tzIiwiZWMiLCJjb250ZXh0Vk5vZGUiLCJ0aHJvd0luUHJvZCIsImNvbnNvbGUiLCJsb2dFcnJvciIsInF1ZXVlIiwiZmx1c2hJbmRleCIsInBlbmRpbmdQb3N0Rmx1c2hDYnMiLCJhY3RpdmVQb3N0Rmx1c2hDYnMiLCJwb3N0Rmx1c2hJbmRleCIsInJlc29sdmVkUHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiY3VycmVudEZsdXNoUHJvbWlzZSIsIm5leHRUaWNrIiwicCIsInF1ZXVlSm9iIiwiam9iIiwiam9iSWQiLCJnZXRJZCIsImxhc3RKb2IiLCJpZCIsInN0YXJ0IiwiZW5kIiwibWlkZGxlIiwibWlkZGxlSm9iIiwibWlkZGxlSm9iSWQiLCJmaW5kSW5zZXJ0aW9uSW5kZXgiLCJxdWV1ZUZsdXNoIiwiZmx1c2hKb2JzIiwicXVldWVQb3N0Rmx1c2hDYiIsImNiIiwiZmx1c2hQcmVGbHVzaENicyIsInVpZCIsImZsdXNoUG9zdEZsdXNoQ2JzIiwiZGVkdXBlZCIsInNvcnQiLCJkZXZ0b29scyQxIiwiYnVmZmVyIiwiZGV2dG9vbHNOb3RJbnN0YWxsZWQiLCJlbWl0JDEiLCJldmVudCIsImVtaXQiLCJzZXREZXZ0b29sc0hvb2skMSIsImhvb2siLCJfYiIsImVuYWJsZWQiLCJIVE1MRWxlbWVudCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIl9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX18iLCJuZXdIb29rIiwic2V0VGltZW91dCIsImRldnRvb2xzQ29tcG9uZW50QWRkZWQiLCJjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2siLCJkZXZ0b29sc0NvbXBvbmVudFVwZGF0ZWQiLCJfZGV2dG9vbHNDb21wb25lbnRSZW1vdmVkIiwiZGV2dG9vbHNDb21wb25lbnRSZW1vdmVkIiwiY29tcG9uZW50IiwiY2xlYW51cEJ1ZmZlciIsImFwcCIsImN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSIsImN1cnJlbnRTY29wZUlkIiwic2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlIiwiX19zY29wZUlkIiwicHVzaFNjb3BlSWQiLCJwb3BTY29wZUlkIiwid2l0aFNjb3BlSWQiLCJfaWQiLCJ3aXRoQ3R4IiwiY3R4IiwiaXNOb25TY29wZWRTbG90IiwiX24iLCJyZW5kZXJGbldpdGhDb250ZXh0IiwiX2QiLCJzZXRCbG9ja1RyYWNraW5nIiwicHJldkluc3RhbmNlIiwiX2MiLCJ3aXRoRGlyZWN0aXZlcyIsImRpcmVjdGl2ZXMiLCJnZXRDb21wb25lbnRQdWJsaWNJbnN0YW5jZSIsImJpbmRpbmdzIiwiZGlycyIsImRpciIsIm1vZGlmaWVycyIsIm1vdW50ZWQiLCJ1cGRhdGVkIiwiZGVlcCIsImludm9rZURpcmVjdGl2ZUhvb2siLCJwcmV2Vk5vZGUiLCJvbGRCaW5kaW5ncyIsImJpbmRpbmciLCJUZWxlcG9ydEVuZEtleSIsImlzVGVsZXBvcnQiLCJfX2lzVGVsZXBvcnQiLCJpc1RlbGVwb3J0RGlzYWJsZWQiLCJkaXNhYmxlZCIsImlzVGVsZXBvcnREZWZlcnJlZCIsImRlZmVyIiwiaXNUYXJnZXRTVkciLCJTVkdFbGVtZW50IiwiaXNUYXJnZXRNYXRoTUwiLCJNYXRoTUxFbGVtZW50IiwicmVzb2x2ZVRhcmdldCIsInNlbGVjdCIsInRhcmdldFNlbGVjdG9yIiwidG8iLCJUZWxlcG9ydEltcGwiLCJwcm9jZXNzIiwibjEiLCJuMiIsImNvbnRhaW5lciIsImFuY2hvciIsInBhcmVudENvbXBvbmVudCIsInBhcmVudFN1c3BlbnNlIiwibmFtZXNwYWNlIiwic2xvdFNjb3BlSWRzIiwib3B0aW1pemVkIiwiaW50ZXJuYWxzIiwibWMiLCJtb3VudENoaWxkcmVuIiwicGMiLCJwYXRjaENoaWxkcmVuIiwicGJjIiwicGF0Y2hCbG9ja0NoaWxkcmVuIiwibyIsImluc2VydCIsInF1ZXJ5U2VsZWN0b3IiLCJjcmVhdGVUZXh0IiwiY3JlYXRlQ29tbWVudCIsInNoYXBlRmxhZyIsImNoaWxkcmVuIiwiZHluYW1pY0NoaWxkcmVuIiwicGxhY2Vob2xkZXIiLCJtYWluQW5jaG9yIiwibW91bnQiLCJjb250YWluZXIyIiwiYW5jaG9yMiIsImlzQ0UiLCJjZSIsIl90ZWxlcG9ydFRhcmdldCIsIm1vdW50VG9UYXJnZXQiLCJ0YXJnZXRBbmNob3IiLCJwcmVwYXJlQW5jaG9yIiwidXBkYXRlQ3NzVmFycyIsIl9faXNNb3VudGVkIiwicXVldWVQb3N0UmVuZGVyRWZmZWN0IiwidGFyZ2V0U3RhcnQiLCJ3YXNEaXNhYmxlZCIsImN1cnJlbnRDb250YWluZXIiLCJjdXJyZW50QW5jaG9yIiwidHJhdmVyc2VTdGF0aWNDaGlsZHJlbiIsIm1vdmVUZWxlcG9ydCIsIm5leHRUYXJnZXQiLCJ1bSIsInVubW91bnQiLCJob3N0UmVtb3ZlIiwiZG9SZW1vdmUiLCJzaG91bGRSZW1vdmUiLCJjaGlsZCIsIm1vdmUiLCJoeWRyYXRlIiwibm9kZSIsIm5leHRTaWJsaW5nIiwicGFyZW50Tm9kZSIsImh5ZHJhdGVDaGlsZHJlbiIsImh5ZHJhdGVEaXNhYmxlZFRlbGVwb3J0Iiwibm9kZTIiLCJ2bm9kZTIiLCJ0YXJnZXROb2RlIiwiX2xwYSIsImZpcnN0Q2hpbGQiLCJub2RlVHlwZSIsImRhdGEiLCJwYXJlbnRBbmNob3IiLCJtIiwibW92ZVR5cGUiLCJpc1Jlb3JkZXIiLCJUZWxlcG9ydCIsImlzRGlzYWJsZWQiLCJ1dCIsInNldEF0dHJpYnV0ZSIsImxlYXZlQ2JLZXkiLCJlbnRlckNiS2V5IiwidXNlVHJhbnNpdGlvblN0YXRlIiwic3RhdGUiLCJpc01vdW50ZWQiLCJpc0xlYXZpbmciLCJpc1VubW91bnRpbmciLCJsZWF2aW5nVk5vZGVzIiwib25Nb3VudGVkIiwib25CZWZvcmVVbm1vdW50IiwiVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IiLCJGdW5jdGlvbiIsIkJhc2VUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzIiwibW9kZSIsImFwcGVhciIsIkJvb2xlYW4iLCJwZXJzaXN0ZWQiLCJvbkJlZm9yZUVudGVyIiwib25FbnRlciIsIm9uQWZ0ZXJFbnRlciIsIm9uRW50ZXJDYW5jZWxsZWQiLCJvbkJlZm9yZUxlYXZlIiwib25MZWF2ZSIsIm9uQWZ0ZXJMZWF2ZSIsIm9uTGVhdmVDYW5jZWxsZWQiLCJvbkJlZm9yZUFwcGVhciIsIm9uQXBwZWFyIiwib25BZnRlckFwcGVhciIsIm9uQXBwZWFyQ2FuY2VsbGVkIiwicmVjdXJzaXZlR2V0U3VidHJlZSIsInN1YlRyZWUiLCJmaW5kTm9uQ29tbWVudENoaWxkIiwiaGFzRm91bmQiLCJDb21tZW50IiwiQmFzZVRyYW5zaXRpb24iLCJzZXR1cCIsInNsb3RzIiwiZ2V0Q3VycmVudEluc3RhbmNlIiwiZGVmYXVsdCIsImdldFRyYW5zaXRpb25SYXdDaGlsZHJlbiIsInJhd1Byb3BzIiwiZW1wdHlQbGFjZWhvbGRlciIsImlubmVyQ2hpbGQiLCJnZXRJbm5lckNoaWxkJDEiLCJlbnRlckhvb2tzIiwicmVzb2x2ZVRyYW5zaXRpb25Ib29rcyIsImhvb2tzIiwic2V0VHJhbnNpdGlvbkhvb2tzIiwib2xkSW5uZXJDaGlsZCIsImlzU2FtZVZOb2RlVHlwZSIsImxlYXZpbmdIb29rcyIsImFmdGVyTGVhdmUiLCJ1cGRhdGUiLCJkZWxheUxlYXZlIiwiZWFybHlSZW1vdmUiLCJkZWxheWVkTGVhdmUiLCJnZXRMZWF2aW5nTm9kZXNGb3JUeXBlIiwibGVhdmluZ1ZOb2Rlc0NhY2hlIiwicG9zdENsb25lIiwiY2FsbEhvb2siLCJjYWxsQXN5bmNIb29rIiwiaG9vazIiLCJiZWZvcmVFbnRlciIsImxlYXZpbmdWTm9kZSIsImVudGVyIiwiYWZ0ZXJIb29rIiwiY2FuY2VsSG9vayIsImNhbGxlZCIsImNhbmNlbGxlZCIsImxlYXZlIiwiY2xvbmUiLCJob29rczIiLCJpc0tlZXBBbGl2ZSIsImNsb25lVk5vZGUiLCJ0cmFuc2l0aW9uIiwic3NDb250ZW50Iiwic3NGYWxsYmFjayIsImtlZXBDb21tZW50IiwicGFyZW50S2V5Iiwia2V5ZWRGcmFnbWVudENvdW50IiwiRnJhZ21lbnQiLCJwYXRjaEZsYWciLCJkZWZpbmVDb21wb25lbnQiLCJleHRyYU9wdGlvbnMiLCJ1c2VJZCIsImlkUHJlZml4IiwiaWRzIiwibWFya0FzeW5jQm91bmRhcnkiLCJ1c2VUZW1wbGF0ZVJlZiIsInJlZnMiLCJwZW5kaW5nU2V0UmVmTWFwIiwic2V0UmVmIiwicmF3UmVmIiwib2xkUmF3UmVmIiwiaXNVbm1vdW50IiwiaXNBc3luY1dyYXBwZXIiLCJfX2FzeW5jUmVzb2x2ZWQiLCJyZWZWYWx1ZSIsIm9sZFJlZiIsInNldHVwU3RhdGUiLCJyYXdTZXR1cFN0YXRlIiwiY2FuU2V0U2V0dXBSZWYiLCJpbnZhbGlkYXRlUGVuZGluZ1NldFJlZiIsIm9sZFJhd1JlZkF0b20iLCJrIiwiX2lzU3RyaW5nIiwiX2lzUmVmIiwiZG9TZXQiLCJmIiwiZXhpc3RpbmciLCJwZW5kaW5nU2V0UmVmIiwiaGFzTG9nZ2VkTWlzbWF0Y2hFcnJvciIsImxvZ01pc21hdGNoRXJyb3IiLCJnZXRDb250YWluZXJUeXBlIiwibmFtZXNwYWNlVVJJIiwidGFnTmFtZSIsImlzU1ZHQ29udGFpbmVyIiwiaXNNYXRoTUxDb250YWluZXIiLCJpc0NvbW1lbnQiLCJjcmVhdGVIeWRyYXRpb25GdW5jdGlvbnMiLCJyZW5kZXJlckludGVybmFscyIsIm10IiwibW91bnRDb21wb25lbnQiLCJwYXRjaCIsInBhdGNoUHJvcCIsImh5ZHJhdGVOb2RlIiwiaXNGcmFnbWVudFN0YXJ0Iiwib25NaXNtYXRjaCIsImhhbmRsZU1pc21hdGNoIiwiZG9tVHlwZSIsIm5leHROb2RlIiwiVGV4dCIsImlzVGVtcGxhdGVOb2RlIiwicmVwbGFjZU5vZGUiLCJjb250ZW50IiwiU3RhdGljIiwibmVlZFRvQWRvcHRDb250ZW50Iiwic3RhdGljQ291bnQiLCJvdXRlckhUTUwiLCJoeWRyYXRlRnJhZ21lbnQiLCJoeWRyYXRlRWxlbWVudCIsImxvY2F0ZUNsb3NpbmdBbmNob3IiLCJjcmVhdGVWTm9kZSIsInByZXZpb3VzU2libGluZyIsImxhc3RDaGlsZCIsImNyZWF0ZVRleHRWTm9kZSIsImZvcmNlUGF0Y2giLCJ2bm9kZUhvb2tzIiwibmVlZENhbGxUcmFuc2l0aW9uSG9va3MiLCJuZWVkVHJhbnNpdGlvbiIsImNscyIsImdldEF0dHJpYnV0ZSIsIiRjbHMiLCJpbm5lckhUTUwiLCJ0ZXh0Q29udGVudCIsImlzTWlzbWF0Y2hBbGxvd2VkIiwiY2xpZW50VGV4dCIsImlzQ3VzdG9tRWxlbWVudCIsImVuZHNXaXRoIiwib25DbGljayIsIm9uVm5vZGVCZWZvcmVNb3VudCIsImludm9rZVZOb2RlSG9vayIsIm9uVm5vZGVNb3VudGVkIiwicXVldWVFZmZlY3RXaXRoU3VzcGVuc2UiLCJwYXJlbnRWTm9kZSIsIm5vcm1hbGl6ZVZOb2RlIiwiaXNUZXh0IiwiZnJhZ21lbnRTbG90U2NvcGVJZHMiLCJpc0ZyYWdtZW50IiwicGFyZW50RWxlbWVudCIsIm5leHQyIiwidXBkYXRlSE9DSG9zdEVsIiwib3BlbiIsImNsb3NlIiwibWF0Y2giLCJuZXdOb2RlIiwib2xkTm9kZSIsInBhcmVudE5vZGUyIiwicmVwbGFjZUNoaWxkIiwiaGFzQ2hpbGROb2RlcyIsIl92bm9kZSIsImFsbG93TWlzbWF0Y2hBdHRyIiwiTWlzbWF0Y2hUeXBlU3RyaW5nIiwiYWxsb3dlZFR5cGUiLCJoYXNBdHRyaWJ1dGUiLCJhbGxvd2VkQXR0ciIsImxpc3QiLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwiY2FuY2VsSWRsZUNhbGxiYWNrIiwiY2xlYXJUaW1lb3V0IiwiaHlkcmF0ZU9uSWRsZSIsInRpbWVvdXQiLCJoeWRyYXRlT25WaXNpYmxlIiwib3B0cyIsIm9iIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJpc0ludGVyc2VjdGluZyIsImRpc2Nvbm5lY3QiLCJFbGVtZW50IiwidG9wIiwibGVmdCIsImJvdHRvbSIsInJpZ2h0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiaW5uZXJIZWlnaHQiLCJpbm5lcldpZHRoIiwiZWxlbWVudElzVmlzaWJsZUluVmlld3BvcnQiLCJvYnNlcnZlIiwiaHlkcmF0ZU9uTWVkaWFRdWVyeSIsInF1ZXJ5IiwibXFsIiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJhZGRFdmVudExpc3RlbmVyIiwib25jZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJoeWRyYXRlT25JbnRlcmFjdGlvbiIsImludGVyYWN0aW9ucyIsImhhc0h5ZHJhdGVkIiwiZG9IeWRyYXRlIiwidGVhcmRvd24iLCJkaXNwYXRjaEV2ZW50IiwiX19hc3luY0xvYWRlciIsImRlZmluZUFzeW5jQ29tcG9uZW50IiwibG9hZGVyIiwibG9hZGluZ0NvbXBvbmVudCIsImVycm9yQ29tcG9uZW50IiwiZGVsYXkiLCJoeWRyYXRlU3RyYXRlZ3kiLCJzdXNwZW5zaWJsZSIsIm9uRXJyb3IiLCJ1c2VyT25FcnJvciIsInJlc29sdmVkQ29tcCIsInBlbmRpbmdSZXF1ZXN0IiwicmV0cmllcyIsImxvYWQiLCJ0aGlzUmVxdWVzdCIsIkVycm9yIiwicmVqZWN0IiwiY29tcCIsIl9fZXNNb2R1bGUiLCJ0b1N0cmluZ1RhZyIsIl9fYXN5bmNIeWRyYXRlIiwicGF0Y2hlZCIsImJ1IiwicGVyZm9ybUh5ZHJhdGUiLCJmb3JFYWNoRWxlbWVudCIsImJ1bSIsImlzVW5tb3VudGVkIiwiY3VycmVudEluc3RhbmNlIiwiY3JlYXRlSW5uZXJDb21wIiwic3VzcGVuc2UiLCJpc0luU1NSQ29tcG9uZW50U2V0dXAiLCJsb2FkZWQiLCJkZWxheWVkIiwiX19pc0tlZXBBbGl2ZSIsIktlZXBBbGl2ZSIsImluY2x1ZGUiLCJSZWdFeHAiLCJleGNsdWRlIiwibWF4Iiwic2hhcmVkQ29udGV4dCIsInJlbmRlcmVyIiwiY3VycmVudCIsIl9fdl9jYWNoZSIsIl91bm1vdW50IiwiY3JlYXRlRWxlbWVudCIsInN0b3JhZ2VDb250YWluZXIiLCJyZXNldFNoYXBlRmxhZyIsInBydW5lQ2FjaGUiLCJnZXRDb21wb25lbnROYW1lIiwicHJ1bmVDYWNoZUVudHJ5IiwiY2FjaGVkIiwiYWN0aXZhdGUiLCJpbnN0YW5jZTIiLCJpc0RlYWN0aXZhdGVkIiwidm5vZGVIb29rIiwiZGVhY3RpdmF0ZSIsImludmFsaWRhdGVNb3VudCIsImRhIiwib25Wbm9kZVVubW91bnRlZCIsImZsdXNoIiwicGVuZGluZ0NhY2hlS2V5IiwiY2FjaGVTdWJ0cmVlIiwiaXNTdXNwZW5zZSIsImdldElubmVyQ2hpbGQiLCJvblVwZGF0ZWQiLCJyYXdWTm9kZSIsImlzVk5vZGUiLCJjYWNoZWRWTm9kZSIsInBhdHRlcm4iLCJsYXN0SW5kZXgiLCJ0ZXN0Iiwib25BY3RpdmF0ZWQiLCJyZWdpc3RlcktlZXBBbGl2ZUhvb2siLCJvbkRlYWN0aXZhdGVkIiwid3JhcHBlZEhvb2siLCJfX3dkYyIsImluamVjdEhvb2siLCJpbmplY3RUb0tlZXBBbGl2ZVJvb3QiLCJrZWVwQWxpdmVSb290IiwiaW5qZWN0ZWQiLCJvblVubW91bnRlZCIsInByZXBlbmQiLCJfX3dlaCIsInJlc2V0Iiwic2V0Q3VycmVudEluc3RhbmNlIiwiY3JlYXRlSG9vayIsImxpZmVjeWNsZSIsIm9uQmVmb3JlTW91bnQiLCJvbkJlZm9yZVVwZGF0ZSIsIm9uU2VydmVyUHJlZmV0Y2giLCJvblJlbmRlclRyaWdnZXJlZCIsIm9uUmVuZGVyVHJhY2tlZCIsIm9uRXJyb3JDYXB0dXJlZCIsIkNPTVBPTkVOVFMiLCJESVJFQ1RJVkVTIiwicmVzb2x2ZUNvbXBvbmVudCIsIm1heWJlU2VsZlJlZmVyZW5jZSIsInJlc29sdmVBc3NldCIsIk5VTExfRFlOQU1JQ19DT01QT05FTlQiLCJmb3IiLCJyZXNvbHZlRHluYW1pY0NvbXBvbmVudCIsInJlc29sdmVEaXJlY3RpdmUiLCJ3YXJuTWlzc2luZyIsIkNvbXBvbmVudCIsInNlbGZOYW1lIiwicmVnaXN0cnkiLCJyZW5kZXJMaXN0IiwicmVuZGVySXRlbSIsInNvdXJjZUlzQXJyYXkiLCJpc1JlYWRvbmx5U291cmNlIiwiZnJvbSIsImNyZWF0ZVNsb3RzIiwiZHluYW1pY1Nsb3RzIiwic2xvdCIsImoiLCJyZW5kZXJTbG90IiwiZmFsbGJhY2siLCJub1Nsb3R0ZWQiLCJvcGVuQmxvY2siLCJjcmVhdGVCbG9jayIsInZhbGlkU2xvdENvbnRlbnQiLCJlbnN1cmVWYWxpZFZOb2RlIiwic2xvdEtleSIsInJlbmRlcmVkIiwiXyIsInNjb3BlSWQiLCJ2bm9kZXMiLCJ0b0hhbmRsZXJzIiwicHJlc2VydmVDYXNlSWZOZWNlc3NhcnkiLCJnZXRQdWJsaWNJbnN0YW5jZSIsImlzU3RhdGVmdWxDb21wb25lbnQiLCJwdWJsaWNQcm9wZXJ0aWVzTWFwIiwiJCIsIiRlbCIsIiRkYXRhIiwiJHByb3BzIiwiJGF0dHJzIiwiYXR0cnMiLCIkc2xvdHMiLCIkcmVmcyIsIiRwYXJlbnQiLCIkcm9vdCIsInJvb3QiLCIkaG9zdCIsIiRlbWl0IiwiJG9wdGlvbnMiLCJyZXNvbHZlTWVyZ2VkT3B0aW9ucyIsIiRmb3JjZVVwZGF0ZSIsIiRuZXh0VGljayIsIiR3YXRjaCIsImluc3RhbmNlV2F0Y2giLCJoYXNTZXR1cEJpbmRpbmciLCJfX2lzU2NyaXB0U2V0dXAiLCJQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMiLCJhY2Nlc3NDYWNoZSIsIm5vcm1hbGl6ZWRQcm9wcyIsInByb3BzT3B0aW9ucyIsInNob3VsZENhY2hlQWNjZXNzIiwicHVibGljR2V0dGVyIiwiY3NzTW9kdWxlIiwiZ2xvYmFsUHJvcGVydGllcyIsIl9fY3NzTW9kdWxlcyIsImNzc01vZHVsZXMiLCJkZXNjcmlwdG9yIiwiUnVudGltZUNvbXBpbGVkUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzIiwidW5zY29wYWJsZXMiLCJkZWZpbmVQcm9wcyIsImRlZmluZUVtaXRzIiwiZGVmaW5lRXhwb3NlIiwiZXhwb3NlZCIsImRlZmluZU9wdGlvbnMiLCJkZWZpbmVTbG90cyIsImRlZmluZU1vZGVsIiwid2l0aERlZmF1bHRzIiwiZGVmYXVsdHMiLCJ1c2VTbG90cyIsImdldENvbnRleHQiLCJ1c2VBdHRycyIsImNhbGxlZEZ1bmN0aW9uTmFtZSIsInNldHVwQ29udGV4dCIsImNyZWF0ZVNldHVwQ29udGV4dCIsIm5vcm1hbGl6ZVByb3BzT3JFbWl0cyIsIm1lcmdlRGVmYXVsdHMiLCJvcHQiLCJza2lwRmFjdG9yeSIsIm1lcmdlTW9kZWxzIiwiY3JlYXRlUHJvcHNSZXN0UHJveHkiLCJleGNsdWRlZEtleXMiLCJ3aXRoQXN5bmNDb250ZXh0IiwiZ2V0QXdhaXRhYmxlIiwiYXdhaXRhYmxlIiwidW5zZXRDdXJyZW50SW5zdGFuY2UiLCJoIiwiY3JlYXRlV2F0Y2hlciIsInB1YmxpY1RoaXMiLCJnZXR0ZXIiLCJjcmVhdGVQYXRoR2V0dGVyIiwiaGFuZGxlciIsImJhc2UiLCJtaXhpbnMiLCJleHRlbmRzIiwiZXh0ZW5kc09wdGlvbnMiLCJnbG9iYWxNaXhpbnMiLCJvcHRpb25zQ2FjaGUiLCJvcHRpb25NZXJnZVN0cmF0ZWdpZXMiLCJyZXNvbHZlZCIsIm1lcmdlT3B0aW9ucyIsInN0cmF0cyIsImFzTWl4aW4iLCJzdHJhdCIsImludGVybmFsT3B0aW9uTWVyZ2VTdHJhdHMiLCJtZXJnZURhdGFGbiIsIm1lcmdlRW1pdHNPclByb3BzT3B0aW9ucyIsImVtaXRzIiwibWV0aG9kcyIsIm1lcmdlT2JqZWN0T3B0aW9ucyIsImJlZm9yZUNyZWF0ZSIsIm1lcmdlQXNBcnJheSIsImNyZWF0ZWQiLCJiZWZvcmVNb3VudCIsImJlZm9yZVVwZGF0ZSIsImJlZm9yZURlc3Ryb3kiLCJiZWZvcmVVbm1vdW50IiwiZGVzdHJveWVkIiwidW5tb3VudGVkIiwiYWN0aXZhdGVkIiwiZGVhY3RpdmF0ZWQiLCJlcnJvckNhcHR1cmVkIiwic2VydmVyUHJlZmV0Y2giLCJjb21wb25lbnRzIiwid2F0Y2giLCJtZXJnZWQiLCJwcm92aWRlIiwiaW5qZWN0Iiwibm9ybWFsaXplSW5qZWN0IiwiY3JlYXRlQXBwQ29udGV4dCIsImlzTmF0aXZlVGFnIiwicGVyZm9ybWFuY2UiLCJ3YXJuSGFuZGxlciIsImNvbXBpbGVyT3B0aW9ucyIsInByb3ZpZGVzIiwicHJvcHNDYWNoZSIsImVtaXRzQ2FjaGUiLCJ1aWQkMSIsImNyZWF0ZUFwcEFQSSIsInJlbmRlciIsInJvb3RDb21wb25lbnQiLCJyb290UHJvcHMiLCJjb250ZXh0IiwiaW5zdGFsbGVkUGx1Z2lucyIsInBsdWdpbkNsZWFudXBGbnMiLCJfdWlkIiwiX2NvbXBvbmVudCIsIl9wcm9wcyIsIl9jb250YWluZXIiLCJfY29udGV4dCIsIl9pbnN0YW5jZSIsInVzZSIsInBsdWdpbiIsImluc3RhbGwiLCJtaXhpbiIsImRpcmVjdGl2ZSIsInJvb3RDb250YWluZXIiLCJpc0h5ZHJhdGUiLCJfY2VWTm9kZSIsIl9fdnVlX2FwcF9fIiwiZGV2dG9vbHNJbml0QXBwIiwib25Vbm1vdW50IiwiZGV2dG9vbHNVbm1vdW50QXBwIiwicnVuV2l0aENvbnRleHQiLCJsYXN0QXBwIiwiY3VycmVudEFwcCIsInBhcmVudFByb3ZpZGVzIiwidHJlYXREZWZhdWx0QXNGYWN0b3J5IiwiaGFzSW5qZWN0aW9uQ29udGV4dCIsImludGVybmFsT2JqZWN0UHJvdG8iLCJjcmVhdGVJbnRlcm5hbE9iamVjdCIsImlzSW50ZXJuYWxPYmplY3QiLCJzZXRGdWxsUHJvcHMiLCJuZWVkQ2FzdEtleXMiLCJyYXdDYXN0VmFsdWVzIiwiaGFzQXR0cnNDaGFuZ2VkIiwiY2FtZWxLZXkiLCJpc0VtaXRMaXN0ZW5lciIsImVtaXRzT3B0aW9ucyIsInJhd0N1cnJlbnRQcm9wcyIsImNhc3RWYWx1ZXMiLCJyZXNvbHZlUHJvcFZhbHVlIiwiaXNBYnNlbnQiLCJoYXNEZWZhdWx0IiwicHJvcHNEZWZhdWx0cyIsIl9zZXRQcm9wIiwibWl4aW5Qcm9wc0NhY2hlIiwibm9ybWFsaXplUHJvcHNPcHRpb25zIiwiaGFzRXh0ZW5kcyIsImV4dGVuZFByb3BzIiwicmF3MiIsIm5vcm1hbGl6ZWRLZXkiLCJ2YWxpZGF0ZVByb3BOYW1lIiwicHJvcCIsInByb3BUeXBlIiwic2hvdWxkQ2FzdCIsInNob3VsZENhc3RUcnVlIiwidHlwZU5hbWUiLCJpc0ludGVybmFsS2V5Iiwibm9ybWFsaXplU2xvdFZhbHVlIiwibm9ybWFsaXplU2xvdCIsInJhd1Nsb3QiLCJub3JtYWxpemVPYmplY3RTbG90cyIsInJhd1Nsb3RzIiwiX2N0eCIsIm5vcm1hbGl6ZVZOb2RlU2xvdHMiLCJhc3NpZ25TbG90cyIsImluaXRTbG90cyIsInVwZGF0ZVNsb3RzIiwibmVlZERlbGV0aW9uQ2hlY2siLCJkZWxldGlvbkNvbXBhcmlzb25UYXJnZXQiLCIkc3RhYmxlIiwiY3JlYXRlUmVuZGVyZXIiLCJiYXNlQ3JlYXRlUmVuZGVyZXIiLCJjcmVhdGVIeWRyYXRpb25SZW5kZXJlciIsImNyZWF0ZUh5ZHJhdGlvbkZucyIsIl9fVlVFX18iLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaG9zdEluc2VydCIsImhvc3RQYXRjaFByb3AiLCJob3N0Q3JlYXRlRWxlbWVudCIsImhvc3RDcmVhdGVUZXh0IiwiaG9zdENyZWF0ZUNvbW1lbnQiLCJzZXRUZXh0IiwiaG9zdFNldFRleHQiLCJzZXRFbGVtZW50VGV4dCIsImhvc3RTZXRFbGVtZW50VGV4dCIsImhvc3RQYXJlbnROb2RlIiwiaG9zdE5leHRTaWJsaW5nIiwic2V0U2NvcGVJZCIsImhvc3RTZXRTY29wZUlkIiwiaW5zZXJ0U3RhdGljQ29udGVudCIsImhvc3RJbnNlcnRTdGF0aWNDb250ZW50IiwiZ2V0TmV4dEhvc3ROb2RlIiwicHJvY2Vzc1RleHQiLCJwcm9jZXNzQ29tbWVudE5vZGUiLCJtb3VudFN0YXRpY05vZGUiLCJwcm9jZXNzRnJhZ21lbnQiLCJwcm9jZXNzRWxlbWVudCIsInByb2Nlc3NDb21wb25lbnQiLCJtb3VudEVsZW1lbnQiLCJwYXRjaEVsZW1lbnQiLCJyZXNvbHZlQ2hpbGRyZW5OYW1lc3BhY2UiLCJjbG9uZUlmTW91bnRlZCIsIl9fdm5vZGUiLCJvbGRQcm9wcyIsIm5ld1Byb3BzIiwidG9nZ2xlUmVjdXJzZSIsIm9uVm5vZGVCZWZvcmVVcGRhdGUiLCJwYXRjaFByb3BzIiwicHJvcHNUb1VwZGF0ZSIsImR5bmFtaWNQcm9wcyIsIm9uVm5vZGVVcGRhdGVkIiwib2xkQ2hpbGRyZW4iLCJuZXdDaGlsZHJlbiIsImZhbGxiYWNrQ29udGFpbmVyIiwib2xkVk5vZGUiLCJuZXdWTm9kZSIsImZyYWdtZW50U3RhcnRBbmNob3IiLCJmcmFnbWVudEVuZEFuY2hvciIsInVwZGF0ZUNvbXBvbmVudCIsImluaXRpYWxWTm9kZSIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlIiwic2V0dXBDb21wb25lbnQiLCJhc3luY0RlcCIsInJlZ2lzdGVyRGVwIiwic2V0dXBSZW5kZXJFZmZlY3QiLCJuZXh0Vk5vZGUiLCJwcmV2UHJvcHMiLCJwcmV2Q2hpbGRyZW4iLCJuZXh0UHJvcHMiLCJuZXh0Q2hpbGRyZW4iLCJoYXNQcm9wc0NoYW5nZWQiLCJzaG91bGRVcGRhdGVDb21wb25lbnQiLCJhc3luY1Jlc29sdmVkIiwidXBkYXRlQ29tcG9uZW50UHJlUmVuZGVyIiwiY29tcG9uZW50VXBkYXRlRm4iLCJ1Iiwibm9uSHlkcmF0ZWRBc3luY1Jvb3QiLCJsb2NhdGVOb25IeWRyYXRlZEFzeW5jUm9vdCIsIm9yaWdpbk5leHQiLCJuZXh0VHJlZSIsInJlbmRlckNvbXBvbmVudFJvb3QiLCJwcmV2VHJlZSIsImJtIiwiaXNBc3luY1dyYXBwZXJWTm9kZSIsImh5ZHJhdGVTdWJUcmVlIiwiX2RlZiIsInNoYWRvd1Jvb3QiLCJfaW5qZWN0Q2hpbGRTdHlsZSIsInNjb3BlZEluaXRpYWxWTm9kZSIsInNjb3BlIiwicmF3UHJldlByb3BzIiwia2ViYWJLZXkiLCJjYW1lbGl6ZWRLZXkiLCJ1cGRhdGVQcm9wcyIsImMxIiwicHJldlNoYXBlRmxhZyIsImMyIiwicGF0Y2hLZXllZENoaWxkcmVuIiwicGF0Y2hVbmtleWVkQ2hpbGRyZW4iLCJ1bm1vdW50Q2hpbGRyZW4iLCJvbGRMZW5ndGgiLCJjb21tb25MZW5ndGgiLCJNYXRoIiwibWluIiwibmV4dENoaWxkIiwibDIiLCJlMSIsImUyIiwibmV4dFBvcyIsInMxIiwiczIiLCJrZXlUb05ld0luZGV4TWFwIiwidG9CZVBhdGNoZWQiLCJtb3ZlZCIsIm1heE5ld0luZGV4U29GYXIiLCJuZXdJbmRleFRvT2xkSW5kZXhNYXAiLCJwcmV2Q2hpbGQiLCJuZXdJbmRleCIsImluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlIiwibGVuIiwiYXJySSIsImdldFNlcXVlbmNlIiwibmV4dEluZGV4IiwiYW5jaG9yVk5vZGUiLCJyZW1vdmUyIiwicGVyZm9ybUxlYXZlIiwiX2lzTGVhdmluZyIsIm1vdmVTdGF0aWNOb2RlIiwiY2FjaGVJbmRleCIsInJlbmRlckNhY2hlIiwic2hvdWxkSW52b2tlRGlycyIsInNob3VsZEludm9rZVZub2RlSG9vayIsIm9uVm5vZGVCZWZvcmVVbm1vdW50IiwidW5tb3VudENvbXBvbmVudCIsImhhc09uY2UiLCJyZW1vdmVGcmFnbWVudCIsInJlbW92ZVN0YXRpY05vZGUiLCJwZXJmb3JtUmVtb3ZlIiwidGVsZXBvcnRFbmQiLCJpc0ZsdXNoaW5nIiwiY3JlYXRlQXBwIiwiY3VycmVudE5hbWVzcGFjZSIsImVuY29kaW5nIiwiYWxsb3dlZCIsInBlbmRpbmdCcmFuY2giLCJjaDEiLCJjaDIiLCJzdWJDb21wb25lbnQiLCJzc3JDb250ZXh0S2V5IiwidXNlU1NSQ29udGV4dCIsIndhdGNoRWZmZWN0IiwiZG9XYXRjaCIsIndhdGNoUG9zdEVmZmVjdCIsIndhdGNoU3luY0VmZmVjdCIsImltbWVkaWF0ZSIsImJhc2VXYXRjaE9wdGlvbnMiLCJydW5zSW1tZWRpYXRlbHkiLCJzc3JDbGVhbnVwIiwiX193YXRjaGVySGFuZGxlcyIsIndhdGNoU3RvcEhhbmRsZSIsImlzUHJlIiwiaXNGaXJzdFJ1biIsImF1Z21lbnRKb2IiLCJ3YXRjaEhhbmRsZSIsInJlYWN0aXZlR2V0dGVyIiwic291cmNlMiIsImJvdW5kQ2xlYW51cCIsImZvcmNlVHJpZ2dlciIsImlzTXVsdGlTb3VyY2UiLCJzIiwiY3VycmVudEVmZmVjdCIsImJhc2VHZXR0ZXIiLCJfY2IiLCJmaWxsIiwiaW1tZWRpYXRlRmlyc3RSdW4iLCJjdXJyZW50V2F0Y2hlciIsImNsZWFudXAyIiwicGF0aCIsInNlZ21lbnRzIiwidXNlTW9kZWwiLCJjYW1lbGl6ZWROYW1lIiwiaHlwaGVuYXRlZE5hbWUiLCJnZXRNb2RlbE1vZGlmaWVycyIsImxvY2FsVmFsdWUiLCJwcmV2RW1pdHRlZFZhbHVlIiwicHJldlNldFZhbHVlIiwicHJvcFZhbHVlIiwiZW1pdHRlZFZhbHVlIiwiaTIiLCJtb2RlbE5hbWUiLCJtb2RlbE1vZGlmaWVycyIsInJhd0FyZ3MiLCJoYW5kbGVyTmFtZSIsIm51bWJlciIsInBhcmFtcyIsImRldnRvb2xzQ29tcG9uZW50RW1pdCIsIm9uY2VIYW5kbGVyIiwiZW1pdHRlZCIsIm1peGluRW1pdHNDYWNoZSIsIm5vcm1hbGl6ZUVtaXRzT3B0aW9ucyIsImV4dGVuZEVtaXRzIiwibm9ybWFsaXplZEZyb21FeHRlbmQiLCJ3aXRoUHJveHkiLCJpbmhlcml0QXR0cnMiLCJmYWxsdGhyb3VnaEF0dHJzIiwicHJveHlUb1VzZSIsInRoaXNQcm94eSIsInJlbmRlcjIiLCJnZXRGdW5jdGlvbmFsRmFsbHRocm91Z2giLCJibG9ja1N0YWNrIiwiZmlsdGVyTW9kZWxMaXN0ZW5lcnMiLCJuZXh0S2V5cyIsImFjdGl2ZUJyYW5jaCIsIl9faXNTdXNwZW5zZSIsInN1c3BlbnNlSWQiLCJTdXNwZW5zZSIsImhpZGRlbkNvbnRhaW5lciIsImNyZWF0ZVN1c3BlbnNlQm91bmRhcnkiLCJ0cmlnZ2VyRXZlbnQiLCJzZXRBY3RpdmVCcmFuY2giLCJtb3VudFN1c3BlbnNlIiwiaXNJbkZhbGxiYWNrIiwibmV3QnJhbmNoIiwibmV3RmFsbGJhY2siLCJpc0h5ZHJhdGluZyIsInBlbmRpbmdJZCIsInBhdGNoU3VzcGVuc2UiLCJkb2N1bWVudCIsIm5vcm1hbGl6ZSIsImlzU2xvdENoaWxkcmVuIiwibm9ybWFsaXplU3VzcGVuc2VTbG90IiwiZXZlbnRMaXN0ZW5lciIsInBhcmVudFN1c3BlbnNlSWQiLCJpc1N1c3BlbnNpYmxlIiwiaXNWTm9kZVN1c3BlbnNpYmxlIiwiaW5pdGlhbEFuY2hvciIsInN5bmMiLCJwYXJlbnRDb21wb25lbnQyIiwiZGVsYXlFbnRlciIsImhhc1VucmVzb2x2ZWRBbmNlc3RvciIsImZhbGxiYWNrVk5vZGUiLCJuYW1lc3BhY2UyIiwibW91bnRGYWxsYmFjayIsIm9wdGltaXplZDIiLCJpc0luUGVuZGluZ1N1c3BlbnNlIiwiaHlkcmF0ZWRFbCIsImFzeW5jU2V0dXBSZXN1bHQiLCJoYW5kbGVTZXR1cFJlc3VsdCIsInBhcmVudFN1c3BlbnNlMiIsImJsb2NrIiwidHJhY2tCbG9jayIsImlzQmxvY2tUcmVlRW5hYmxlZCIsImN1cnJlbnRCbG9jayIsImNsb3NlQmxvY2siLCJzaW5nbGVDaGlsZCIsInNpbmdsZVJvb3QiLCJmaWx0ZXJTaW5nbGVSb290IiwiYnJhbmNoIiwiZGlzYWJsZVRyYWNraW5nIiwidm5vZGVBcmdzVHJhbnNmb3JtZXIiLCJpblZPbmNlIiwic2V0dXBCbG9jayIsImNyZWF0ZUVsZW1lbnRCbG9jayIsImNyZWF0ZUJhc2VWTm9kZSIsIl9fdl9pc1ZOb2RlIiwidHJhbnNmb3JtVk5vZGVBcmdzIiwidHJhbnNmb3JtZXIiLCJub3JtYWxpemVLZXkiLCJub3JtYWxpemVSZWYiLCJyZWZfa2V5IiwicmVmX2ZvciIsImlzQmxvY2tOb2RlIiwibmVlZEZ1bGxDaGlsZHJlbk5vcm1hbGl6YXRpb24iLCJub3JtYWxpemVDaGlsZHJlbiIsImNsb25lZCIsIl9fdmNjT3B0cyIsImd1YXJkUmVhY3RpdmVQcm9wcyIsImV4dHJhUHJvcHMiLCJtZXJnZVJlZiIsImNsb25lVHJhbnNpdGlvbiIsIm1lcmdlZFByb3BzIiwibWVyZ2VQcm9wcyIsInRleHQiLCJmbGFnIiwiY3JlYXRlU3RhdGljVk5vZGUiLCJudW1iZXJPZk5vZGVzIiwiY3JlYXRlQ29tbWVudFZOb2RlIiwiYXNCbG9jayIsIm1lbW8iLCJzbG90RmxhZyIsInRvTWVyZ2UiLCJpbmNvbWluZyIsImVtcHR5QXBwQ29udGV4dCIsImV4cG9zZVByb3h5IiwiYmMiLCJydGciLCJydGMiLCJzcCIsImludGVybmFsU2V0Q3VycmVudEluc3RhbmNlIiwic2V0SW5TU1JTZXR1cFN0YXRlIiwicmVnaXN0ZXJHbG9iYWxTZXR0ZXIiLCJzZXR0ZXJzIiwiY29tcGlsZSIsImluc3RhbGxXaXRoUHJveHkiLCJpc1N0YXRlZnVsIiwiaW5pdFByb3BzIiwic2V0dXBSZXN1bHQiLCJpc0FzeW5jU2V0dXAiLCJyZXNvbHZlZFJlc3VsdCIsImZpbmlzaENvbXBvbmVudFNldHVwIiwic2V0dXBTdGF0ZWZ1bENvbXBvbmVudCIsIl9fc3NySW5saW5lUmVuZGVyIiwic3NyUmVuZGVyIiwiZGV2dG9vbHNSYXdTZXR1cFN0YXRlIiwicmVnaXN0ZXJSdW50aW1lQ29tcGlsZXIiLCJfY29tcGlsZSIsIl9yYyIsInNraXBPcHRpb25zIiwidGVtcGxhdGUiLCJkZWxpbWl0ZXJzIiwiY29tcG9uZW50Q29tcGlsZXJPcHRpb25zIiwiZmluYWxDb21waWxlck9wdGlvbnMiLCJkYXRhT3B0aW9ucyIsImNvbXB1dGVkT3B0aW9ucyIsIndhdGNoT3B0aW9ucyIsInByb3ZpZGVPcHRpb25zIiwiaW5qZWN0T3B0aW9ucyIsInJlbmRlclRyYWNrZWQiLCJyZW5kZXJUcmlnZ2VyZWQiLCJleHBvc2UiLCJmaWx0ZXJzIiwicmVzb2x2ZUluamVjdGlvbnMiLCJtZXRob2RIYW5kbGVyIiwicmVnaXN0ZXJMaWZlY3ljbGVIb29rIiwicmVnaXN0ZXIiLCJfaG9vayIsImFwcGx5T3B0aW9ucyIsImF0dHJzUHJveHlIYW5kbGVycyIsImluY2x1ZGVJbmZlcnJlZCIsImRpc3BsYXlOYW1lIiwiX19uYW1lIiwiZ2V0dGVyT3JPcHRpb25zIiwiZGVidWdPcHRpb25zIiwicHJvcHNPckNoaWxkcmVuIiwiZG9DcmVhdGVWTm9kZSIsInR5cGUyIiwiY2hpbGRyZW4yIiwid2l0aE1lbW8iLCJpc01lbW9TYW1lIiwiRXJyb3JUeXBlU3RyaW5ncyIsImRldnRvb2xzIiwic2V0RGV2dG9vbHNIb29rIiwic3NyVXRpbHMiLCJwdXNoV2FybmluZ0NvbnRleHQiLCJwb3BXYXJuaW5nQ29udGV4dCIsInJlc29sdmVGaWx0ZXIiLCJjb21wYXRVdGlscyIsIkRlcHJlY2F0aW9uVHlwZXMiLCJwb2xpY3kiLCJ0dCIsInRydXN0ZWRUeXBlcyIsImNyZWF0ZVBvbGljeSIsImNyZWF0ZUhUTUwiLCJ1bnNhZmVUb1RydXN0ZWRIVE1MIiwiZG9jIiwidGVtcGxhdGVDb250YWluZXIiLCJub2RlT3BzIiwiaW5zZXJ0QmVmb3JlIiwicmVtb3ZlQ2hpbGQiLCJ0YWciLCJjcmVhdGVFbGVtZW50TlMiLCJtdWx0aXBsZSIsImNyZWF0ZVRleHROb2RlIiwibm9kZVZhbHVlIiwic2VsZWN0b3IiLCJiZWZvcmUiLCJjbG9uZU5vZGUiLCJ3cmFwcGVyIiwiYXBwZW5kQ2hpbGQiLCJUUkFOU0lUSU9OIiwiQU5JTUFUSU9OIiwidnRjS2V5IiwiRE9NVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycyIsImNzcyIsImR1cmF0aW9uIiwiZW50ZXJGcm9tQ2xhc3MiLCJlbnRlckFjdGl2ZUNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiYXBwZWFyRnJvbUNsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwibGVhdmVGcm9tQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwiVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycyIsIlRyYW5zaXRpb24iLCJ0IiwiZGVjb3JhdGUkMSIsInJlc29sdmVUcmFuc2l0aW9uUHJvcHMiLCJoMiIsImhhc0V4cGxpY2l0Q2FsbGJhY2siLCJiYXNlUHJvcHMiLCJkdXJhdGlvbnMiLCJOdW1iZXJPZiIsIm5vcm1hbGl6ZUR1cmF0aW9uIiwiZW50ZXJEdXJhdGlvbiIsImxlYXZlRHVyYXRpb24iLCJmaW5pc2hFbnRlciIsImlzQXBwZWFyIiwiaXNDYW5jZWxsZWQiLCJfZW50ZXJDYW5jZWxsZWQiLCJyZW1vdmVUcmFuc2l0aW9uQ2xhc3MiLCJmaW5pc2hMZWF2ZSIsIm1ha2VFbnRlckhvb2siLCJuZXh0RnJhbWUiLCJhZGRUcmFuc2l0aW9uQ2xhc3MiLCJ3aGVuVHJhbnNpdGlvbkVuZHMiLCJmb3JjZVJlZmxvdyIsImNsYXNzTGlzdCIsIl92dGMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJlbmRJZCIsImV4cGVjdGVkVHlwZSIsImV4cGxpY2l0VGltZW91dCIsIl9lbmRJZCIsInJlc29sdmVJZk5vdFN0YWxlIiwicHJvcENvdW50IiwiZ2V0VHJhbnNpdGlvbkluZm8iLCJlbmRFdmVudCIsImVuZGVkIiwib25FbmQiLCJzdHlsZXMiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0U3R5bGVQcm9wZXJ0aWVzIiwidHJhbnNpdGlvbkRlbGF5cyIsInRyYW5zaXRpb25EdXJhdGlvbnMiLCJ0cmFuc2l0aW9uVGltZW91dCIsImdldFRpbWVvdXQiLCJhbmltYXRpb25EZWxheXMiLCJhbmltYXRpb25EdXJhdGlvbnMiLCJhbmltYXRpb25UaW1lb3V0IiwiaGFzVHJhbnNmb3JtIiwiZGVsYXlzIiwiZCIsInRvTXMiLCJib2R5Iiwib2Zmc2V0SGVpZ2h0IiwidlNob3dPcmlnaW5hbERpc3BsYXkiLCJ2U2hvd0hpZGRlbiIsInZTaG93IiwiZGlzcGxheSIsInNldERpc3BsYXkiLCJDU1NfVkFSX1RFWFQiLCJ1c2VDc3NWYXJzIiwidXBkYXRlVGVsZXBvcnRzIiwidmFycyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzZXRWYXJzT25Ob2RlIiwic2V0VmFycyIsInNldFZhcnNPblZOb2RlIiwiTXV0YXRpb25PYnNlcnZlciIsImNoaWxkTGlzdCIsInNldFByb3BlcnR5IiwiZGlzcGxheVJFIiwiaW1wb3J0YW50UkUiLCJzZXRTdHlsZSIsInByZWZpeGVkIiwicmF3TmFtZSIsInByZWZpeENhY2hlIiwicHJlZml4ZXMiLCJhdXRvUHJlZml4IiwieGxpbmtOUyIsInBhdGNoQXR0ciIsImlzU1ZHIiwiaXNCb29sZWFuIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJzZXRBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZSIsInBhdGNoRE9NUHJvcCIsImF0dHJOYW1lIiwibmVlZFJlbW92ZSIsInZlaUtleSIsIm9wdGlvbnNNb2RpZmllclJFIiwiY2FjaGVkTm93IiwiZ2V0Tm93IiwiRGF0ZSIsIm5vdyIsImlzTmF0aXZlT24iLCJSRU1PVkFMIiwiZGVmaW5lQ3VzdG9tRWxlbWVudCIsIl9jcmVhdGVBcHAiLCJDb21wIiwiVnVlQ3VzdG9tRWxlbWVudCIsIlZ1ZUVsZW1lbnQiLCJpbml0aWFsUHJvcHMiLCJkZWZpbmVTU1JDdXN0b21FbGVtZW50IiwiY3JlYXRlU1NSQXBwIiwiQmFzZUNsYXNzIiwiX2lzVnVlQ0UiLCJfYXBwIiwiX25vbmNlIiwibm9uY2UiLCJfY29ubmVjdGVkIiwiX3Jlc29sdmVkIiwiX251bWJlclByb3BzIiwiX3N0eWxlQ2hpbGRyZW4iLCJfb2IiLCJfcm9vdCIsImF0dGFjaFNoYWRvdyIsImNvbm5lY3RlZENhbGxiYWNrIiwiaXNDb25uZWN0ZWQiLCJfcGFyc2VTbG90cyIsImhvc3QiLCJfcGFyZW50IiwiX21vdW50IiwiX3BlbmRpbmdSZXNvbHZlIiwiX3Jlc29sdmVEZWYiLCJfc2V0UGFyZW50IiwiX2luaGVyaXRQYXJlbnRDb250ZXh0Iiwic2V0UHJvdG90eXBlT2YiLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsImF0dHJpYnV0ZXMiLCJfc2V0QXR0ciIsIm11dGF0aW9ucyIsImF0dHJpYnV0ZU5hbWUiLCJpc0FzeW5jIiwibnVtYmVyUHJvcHMiLCJfcmVzb2x2ZVByb3BzIiwiX2FwcGx5U3R5bGVzIiwiYXN5bmNEZWYiLCJjb25maWd1cmVBcHAiLCJfY3JlYXRlVk5vZGUiLCJkZWNsYXJlZFByb3BLZXlzIiwiX2dldFByb3AiLCJzaG91bGRSZWZsZWN0Iiwic2hvdWxkVXBkYXRlIiwiX3VwZGF0ZSIsIl9yZW5kZXJTbG90cyIsImRpc3BhdGNoIiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJfc2xvdHMiLCJzbG90TmFtZSIsIm91dGxldHMiLCJ3YWxrZXIiLCJjcmVhdGVUcmVlV2Fsa2VyIiwiX3JlbW92ZUNoaWxkU3R5bGUiLCJ1c2VIb3N0IiwiY2FsbGVyIiwidXNlU2hhZG93Um9vdCIsInVzZUNzc01vZHVsZSIsIm1vZHVsZXMiLCJwb3NpdGlvbk1hcCIsIm5ld1Bvc2l0aW9uTWFwIiwibW92ZUNiS2V5IiwiVHJhbnNpdGlvbkdyb3VwIiwiZGVjb3JhdGUiLCJtb3ZlQ2xhc3MiLCJoYXNDU1NUcmFuc2Zvcm0iLCJjYWxsUGVuZGluZ0NicyIsInJlY29yZFBvc2l0aW9uIiwibW92ZWRDaGlsZHJlbiIsImFwcGx5VHJhbnNsYXRpb24iLCJ0cmFuc2Zvcm0iLCJ3ZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJwcm9wZXJ0eU5hbWUiLCJjc3NUcmFuc2l0aW9uUHJvcHMiLCJvbGRQb3MiLCJuZXdQb3MiLCJkeCIsImR5IiwiZ2V0TW9kZWxBc3NpZ25lciIsIm9uQ29tcG9zaXRpb25TdGFydCIsImNvbXBvc2luZyIsIm9uQ29tcG9zaXRpb25FbmQiLCJFdmVudCIsImFzc2lnbktleSIsInZNb2RlbFRleHQiLCJsYXp5IiwiY2FzdFRvTnVtYmVyIiwiZG9tVmFsdWUiLCJhY3RpdmVFbGVtZW50Iiwidk1vZGVsQ2hlY2tib3giLCJtb2RlbFZhbHVlIiwiX21vZGVsVmFsdWUiLCJlbGVtZW50VmFsdWUiLCJnZXRWYWx1ZSIsImNoZWNrZWQiLCJmb3VuZCIsImZpbHRlcmVkIiwiZ2V0Q2hlY2tib3hWYWx1ZSIsInNldENoZWNrZWQiLCJ2TW9kZWxSYWRpbyIsInZNb2RlbFNlbGVjdCIsImlzU2V0TW9kZWwiLCJzZWxlY3RlZFZhbCIsInNlbGVjdGVkIiwiX2Fzc2lnbmluZyIsInNldFNlbGVjdGVkIiwiX2JpbmRpbmciLCJpc011bHRpcGxlIiwiaXNBcnJheVZhbHVlIiwib3B0aW9uIiwib3B0aW9uVmFsdWUiLCJvcHRpb25UeXBlIiwic2VsZWN0ZWRJbmRleCIsInZNb2RlbER5bmFtaWMiLCJjYWxsTW9kZWxIb29rIiwicmVzb2x2ZUR5bmFtaWNNb2RlbCIsInN5c3RlbU1vZGlmaWVycyIsIm1vZGlmaWVyR3VhcmRzIiwic3RvcFByb3BhZ2F0aW9uIiwicHJldmVudCIsInByZXZlbnREZWZhdWx0IiwiY3VycmVudFRhcmdldCIsImN0cmwiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHQiLCJhbHRLZXkiLCJtZXRhIiwibWV0YUtleSIsImJ1dHRvbiIsImV4YWN0Iiwid2l0aE1vZGlmaWVycyIsIl93aXRoTW9kcyIsImNhY2hlS2V5IiwiZ3VhcmQiLCJrZXlOYW1lcyIsImVzYyIsInNwYWNlIiwidXAiLCJkb3duIiwid2l0aEtleXMiLCJfd2l0aEtleXMiLCJldmVudEtleSIsInJlbmRlcmVyT3B0aW9ucyIsInByZXZWYWx1ZSIsIm5leHRWYWx1ZSIsInRyYW5zaXRpb25DbGFzc2VzIiwiY2xhc3NOYW1lIiwicGF0Y2hDbGFzcyIsImlzQ3NzU3RyaW5nIiwiaGFzQ29udHJvbGxlZERpc3BsYXkiLCJwcmV2U3R5bGUiLCJjc3NWYXJUZXh0IiwicGF0Y2hTdHlsZSIsImludm9rZXJzIiwiZXhpc3RpbmdJbnZva2VyIiwicGFyc2VOYW1lIiwiaW52b2tlciIsImluaXRpYWxWYWx1ZSIsIl92dHMiLCJhdHRhY2hlZCIsIm9yaWdpbmFsU3RvcCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIl9zdG9wcGVkIiwicGF0Y2hTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJjcmVhdGVJbnZva2VyIiwicGF0Y2hFdmVudCIsInNob3VsZFNldEFzUHJvcCIsIl90cnVlVmFsdWUiLCJfZmFsc2VWYWx1ZSIsImVuYWJsZWRIeWRyYXRpb24iLCJlbnN1cmVSZW5kZXJlciIsImVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyIiwiY29udGFpbmVyT3JTZWxlY3RvciIsIm5vcm1hbGl6ZUNvbnRhaW5lciIsInJlc29sdmVSb290TmFtZXNwYWNlIiwic3NyRGlyZWN0aXZlSW5pdGlhbGl6ZWQiLCJpbml0RGlyZWN0aXZlc0ZvclNTUiIsImdldFNTUlByb3BzIiwibW9kZWxUb1VzZSIsImV4cG9ydHMiLCJzZmMiXSwic291cmNlUm9vdCI6IiJ9
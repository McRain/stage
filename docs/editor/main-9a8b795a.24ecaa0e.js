"use strict";(self.webpackChunk_reneos_slider_editor=self.webpackChunk_reneos_slider_editor||[]).push([[415],{1:(e,t,o)=>{o.d(t,{A:()=>r});var a=o(15);const n={style:{display:"block",width:"100%"}},l={class:"overleyicon"},s={key:1,style:{display:"flex","justify-content":"center"}},i={name:"AssetView",props:{asset:{type:Object}},methods:{async showLib(){const e=await this.$app.assets.selectAsset(["hdr"]);this.$emit("setasset",e)}}},r=(0,o(262).A)(i,[["render",function(e,t,o,i,r,c){const d=(0,a.resolveDirective)("tooltip");return(0,a.openBlock)(),(0,a.createElementBlock)(a.Fragment,null,[(0,a.createCommentVNode)("assethdr"),(0,a.createElementVNode)("div",n,[(0,a.createElementVNode)("div",l,[o.asset?(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("div",{key:0,onClick:t[0]||(t[0]=(...e)=>c.showLib&&c.showLib(...e)),class:"text"},[(0,a.createTextVNode)((0,a.toDisplayString)(o.asset.name||o.asset.uid),1)])),[[d,o.asset.url]]):((0,a.openBlock)(),(0,a.createElementBlock)("div",s,[(0,a.createElementVNode)("button",{onClick:t[1]||(t[1]=(...e)=>c.showLib&&c.showLib(...e))},"Select")]))])]),(0,a.createCommentVNode)("//assethdr")],2112)}]])},216:(e,t,o)=>{o.d(t,{A:()=>u});var a=o(15);const n={class:"container"},l={class:"block"},s={class:"content"},i={class:"sub-content"},r={class:"subtitle"},c={class:"subtitle"},d=["value"],p={props:{callback:{type:Function},modelValue:{type:Object,default:()=>({label:"",type:"model"})},parent:{type:Object}},computed:{name:{get(){return this.modelValue.name},set(e){this.$emit("update:modelValue",{name:e,type:this.modelValue.type})}},type:{get(){return this.modelValue.type},set(e){this.$emit("update:modelValue",{name:this.modelValue.name,type:e})}},types(){return this.$app.app.types.sort((e,t)=>e.label.localeCompare(t.label))}}},u=(0,o(262).A)(p,[["render",function(e,t,o,p,u,m){return(0,a.openBlock)(),(0,a.createElementBlock)("div",n,[(0,a.createElementVNode)("div",l,[(0,a.createElementVNode)("div",s,[(0,a.createElementVNode)("div",i,[(0,a.createElementVNode)("div",r,[(0,a.withDirectives)((0,a.createElementVNode)("input",{type:"text",placeholder:"Name","onUpdate:modelValue":t[0]||(t[0]=e=>m.name=e)},null,512),[[a.vModelText,m.name]])]),(0,a.createElementVNode)("div",c,[(0,a.withDirectives)((0,a.createElementVNode)("select",{class:"typeslist","onUpdate:modelValue":t[1]||(t[1]=e=>m.type=e)},[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(m.types,e=>((0,a.openBlock)(),(0,a.createElementBlock)("option",{value:e.type},(0,a.toDisplayString)(e.label),9,d))),256))],512),[[a.vModelSelect,m.type]])])])])])])}],["__scopeId","data-v-7daecc34"]])},382:(e,t,o)=>{o.d(t,{A:()=>b});var a=o(15);const n={class:"scenetools"};var l=o(624);const s={class:"camera-selector"};var i=o(875);const r={name:"SceneTools",data:()=>({}),computed:{selectedCamera:{get(){return this.$app.slides.actived?.camera?.path||null},set(e){this.$app.slides.actived.camera.path=e,this.$app.slides.save()}},slide(){return this.$app.slides.actived},cameras(){return this.$app.project.findObjectsByType(i.Camera)||[]}},mounted(){},methods:{saveSlide(){this.$app.slides.save(this.slide)},onCameraChange(){console.log("change");try{if(this.slide.camera?.path&&this.slide.camera?.path!==this.$app.engine.Project.Camera?.path){const e=this.slide.camera.path.split("."),t=this.$app.project.find(e);this.$app.engine.Project.SetCamera(t),t.updateProjectionMatrix()}}catch(e){console.warn(e.message)}}}};var c=o(262);const d=(0,c.A)(r,[["render",function(e,t,o,n,l,i){const r=(0,a.resolveComponent)("EditColor");return(0,a.openBlock)(),(0,a.createElementBlock)("div",s,[(0,a.createElementVNode)("div",null,[t[0]||(t[0]=(0,a.createElementVNode)("div",null," Background ",-1)),(0,a.createElementVNode)("div",null,[(0,a.createVNode)(r)])])])}],["__scopeId","data-v-167ce3c1"]]),p={class:"camera-selector"},u={key:0},m={key:0},h=["value"],v={key:1};var g=o(1);const y={name:"CameraSelector",props:{slide:{type:Object}},data:()=>({}),computed:{bgColor:{get(){return this.slide.background.color},set(e){this.slide.background.value=e.getStyle(),this.slide.background.setValue("color",this.slide.background.value),this.$app.slides.save(),this.$app.engine.getManager().Scene.background=e}},bgHdr:{get(){return this.slide.background.hdr}},selectedCamera:{get(){return this.slide.camera?.path||null},set(e){this.slide.camera.path=e,this.$app.slides.save()}},cameras(){return this.$app.project.findObjectsByType(i.Camera)||[]}},mounted(){},methods:{save(){this.$app.slides.save(this.slide)},onBgChange(e){this.slide.background.setValue(e,this.slide.background[e]),this.$app.slides.save()},async onAssetChange(e){console.log(e.resource),this.slide.background.setValue("hdr",e.resource),this.slide.background.value=e.uid;const t=await this.$app.engine.getAssetsManager().FindAsset(e.uid);this.$app.engine.getManager().Scene.background=t.resource},saveSlide(){this.$app.slides.save(this.slide)},onCameraChange(){console.log("change");try{if(this.slide.camera?.path&&this.slide.camera?.path!==this.$app.engine.Project.Camera?.path){const e=this.slide.camera.path.split("."),t=this.$app.project.find(e);this.$app.engine.Project.SetCamera(t),t.updateProjectionMatrix()}}catch(e){console.warn(e.message)}}},components:{assethdr:g.A}},f=(0,c.A)(y,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("LabelEdit"),r=(0,a.resolveComponent)("ActionsList");return(0,a.openBlock)(),(0,a.createElementBlock)("div",p,[o.slide?((0,a.openBlock)(),(0,a.createElementBlock)("div",u,[(0,a.createElementVNode)("div",null,[t[3]||(t[3]=(0,a.createElementVNode)("div",null,"Name:",-1)),(0,a.createVNode)(i,{modelValue:o.slide.name,"onUpdate:modelValue":[t[0]||(t[0]=e=>o.slide.name=e),s.save]},null,8,["modelValue","onUpdate:modelValue"])]),s.cameras.length>0?((0,a.openBlock)(),(0,a.createElementBlock)("div",m,[t[5]||(t[5]=(0,a.createElementVNode)("label",null,"Camera:",-1)),(0,a.withDirectives)((0,a.createElementVNode)("select",{"onUpdate:modelValue":t[1]||(t[1]=e=>s.selectedCamera=e),onChange:t[2]||(t[2]=(...e)=>s.onCameraChange&&s.onCameraChange(...e))},[t[4]||(t[4]=(0,a.createElementVNode)("option",{value:null},"No",-1)),((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(s.cameras,e=>((0,a.openBlock)(),(0,a.createElementBlock)("option",{key:e.path,value:e.path}," ("+(0,a.toDisplayString)(e.type)+") "+(0,a.toDisplayString)(e.name||`Camera ${e.uid}`),9,h))),128))],544),[[a.vModelSelect,s.selectedCamera]])])):((0,a.openBlock)(),(0,a.createElementBlock)("div",v," There are no cameras available in the project. ")),(0,a.createElementVNode)("div",null,[t[6]||(t[6]=(0,a.createElementVNode)("div",null,"Slide Events:",-1)),(0,a.createVNode)(r,{"onUpdate:target":s.saveSlide,onSave:s.saveSlide,target:o.slide},null,8,["onUpdate:target","onSave","target"])]),(0,a.createCommentVNode)(' <div>\r\n                <div>Background</div>\r\n                <div>{{ slide.background.type }}\r\n                    <RadioButton v-model="slide.background.type" @change="onBgChange"\r\n                        :options="[{ value: \'color\', label: \'Color\' }, { value: \'hdr\', label: \'HDR\' }, { value: \'none\', label: \'No\' }]"\r\n                        name="array-group" />\r\n                </div>\r\n                <EditColor v-if="slide.background?.type === \'color\'" v-model="bgColor"></EditColor>\r\n                <assethdr v-if="slide.background?.type === \'hdr\'" v-model="bgHdr" @setasset="onAssetChange">\r\n                </assethdr>\r\n            </div> ')])):(0,a.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-2623b5e9"]]),k={data:()=>({asset:{uid:"hdrscene"},view:!0}),name:"SceneTools",computed:{slides(){return this.$app.slides.children},slide(){return this.$app.slides.actived}},components:{slideTools:f,InspectorPanel:l.A,scenetools:d},methods:{removeSlide(){this.$app.slides.remove()}}},b=(0,c.A)(k,[["render",function(e,t,o,l,s,i){const r=(0,a.resolveComponent)("slideTools"),c=(0,a.resolveComponent)("InspectorPanel");return(0,a.openBlock)(),(0,a.createElementBlock)("div",n,[(0,a.createVNode)(c,{label:"Slide Options"},(0,a.createSlots)({_:2},[i.slide?{name:"content",fn:(0,a.withCtx)(()=>[(0,a.createVNode)(r,{slide:i.slide},null,8,["slide"])]),key:"0"}:void 0]),1024)])}]])},471:(e,t,o)=>{o.d(t,{A:()=>g});var a=o(15);const n={style:{display:"flex","flex-direction":"column"}},l={style:{display:"flex","justify-content":"center","margin-top":"10px"}},s={class:"assetblock"},i={key:0,class:"short"},r={class:"short-text"},c={key:0,class:"assetcontent"},d={class:"assetrow"},p={class:"assetrow"},u={name:"AssetView",props:{asset:{type:Object},label:{type:String}},mounted(){},data:()=>({view:!0}),computed:{src(){return this.$app.assets.list.find(e=>e.uid===this.asset.uid)},types(){return this.$app.assets.types}}};var m=o(262);const h=(0,m.A)(u,[["render",function(e,t,o,n,l,u){const m=(0,a.resolveComponent)("icon"),h=(0,a.resolveDirective)("tooltip");return(0,a.openBlock)(),(0,a.createElementBlock)("div",s,[(0,a.createElementVNode)("div",{onClick:t[0]||(t[0]=e=>l.view=!l.view),class:"title"},[(0,a.createCommentVNode)(' <div class="label">{{ label }}</div> '),l.view?(0,a.createCommentVNode)("v-if",!0):((0,a.openBlock)(),(0,a.createElementBlock)("div",i,[(0,a.createTextVNode)((0,a.toDisplayString)(u.src.uid)+" : "+(0,a.toDisplayString)(u.src.type)+" : ",1),(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("div",r,[(0,a.createTextVNode)((0,a.toDisplayString)(u.src.url),1)])),[[h,u.src.url]])]))]),l.view?((0,a.openBlock)(),(0,a.createElementBlock)("div",c,[(0,a.createElementVNode)("div",d,[(0,a.createElementVNode)("div",null,(0,a.toDisplayString)(u.src.type)+" : "+(0,a.toDisplayString)(u.src.name||u.src.uid),1),(0,a.createElementVNode)("div",null,[(0,a.createElementVNode)("button",{onClick:t[1]||(t[1]=t=>e.$emit("remove",o.asset))},[(0,a.createVNode)(m,{value:"bin",size:"1em"})])])]),(0,a.createCommentVNode)(' <div class="assetrow">\r\n                <div>URL:</div>\r\n                <div class="rowcontent">\r\n                    <LabelEdit :value="src.url"></LabelEdit>\r\n                </div>\r\n            </div> '),(0,a.createCommentVNode)(' <div class="assetrow" v-for="(param, key) in src.parameters">\r\n            <div>{{ key }}</div><div>{{ param }}</div>\r\n        </div> '),((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(o.asset.parameters,(e,o)=>((0,a.openBlock)(),(0,a.createElementBlock)("div",p,[(0,a.createElementVNode)("div",null,(0,a.toDisplayString)(o),1),t[2]||(t[2]=(0,a.createElementVNode)("div",{class:"cell"},[(0,a.createCommentVNode)(' <LabelEdit @update:value="asset.parameters[key] = $event; $emit(\'changed\')" :value="param">\r\n                    </LabelEdit> ')],-1))]))),256))])):(0,a.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-eca41270"]]),v={name:"AssetsView",data:()=>({selectedAsset:null,assetsData:{offtypes:["hdr"]}}),props:{modelValue:{type:Object},value:{type:Object}},methods:{async removeAsset(e){await this.$app.elements.removeAsset(this.value,e),this.$app.toasts.add({message:"Ресурс удален из модели"})},saveProp(){this.$app.toasts.add({message:"Параметр ресурса в элементе изменен"}),this.$app.engine.getManager().UpdateElement(this.value.path,{assets:this.value.assets})},async selectAsset(){const e=await this.$app.assets.selectAsset(["hdr","texture"]);if(e){const t=this.$app.engine.getManager("AssetsManager").GetAsset(e.uid);console.log(this.value),console.log(t),this.$app.assets.setAsset(this.value,t),this.$app.toasts.add({message:"Ресурс добавлен в модель"})}}},computed:{list(){return this.value?.data?.assets||this.value?.assets||[]}},components:{AssetView:h}},g=(0,m.A)(v,[["render",function(e,t,o,s,i,r){const c=(0,a.resolveComponent)("AssetView"),d=(0,a.resolveComponent)("icon"),p=(0,a.resolveDirective)("tooltip");return(0,a.openBlock)(),(0,a.createElementBlock)("div",n,[t[1]||(t[1]=(0,a.createElementVNode)("div",null,"Ресурсы",-1)),((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(r.list,(e,t)=>((0,a.openBlock)(),(0,a.createBlock)(c,{asset:e,key:t,onRemove:r.removeAsset,onChanged:r.saveProp},null,8,["asset","onRemove","onChanged"]))),128)),(0,a.createElementVNode)("div",l,[(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("button",{class:"button normal",onClick:t[0]||(t[0]=(...e)=>r.selectAsset&&r.selectAsset(...e))},[(0,a.createVNode)(d,{value:"stack",size:"0.75em"})])),[[p,"Ресурсы"]])])])}]])},501:(e,t,o)=>{o.r(t),o.d(t,{ActionEdit:()=>ka,ActionItem:()=>_o,ActionsLib:()=>Oo,AudioControl:()=>Xe,BoolEdit:()=>je,Buttons:()=>K,CustomInput:()=>U,DimensionsEdit:()=>wo,EditColor:()=>qt,ElementView:()=>H,EulerBlock:()=>bt,ExpandedButton:()=>c,ExtMenu:()=>L,FileSelect:()=>eo,Float:()=>He,FloatBlock:()=>tt,FontSize:()=>jo,Icon:()=>m,ImageView:()=>Wt,Int:()=>Fe,ItemsLib:()=>ta,Label:()=>co,LabelEdit:()=>It,LoginForm:()=>en,Modal:()=>b,PopupList:()=>w,ProjectItem:()=>Na,QuaternionBlock:()=>wt,RadioButton:()=>oe,SearchFilter:()=>re,SectionSelect:()=>so,Selectable:()=>we,ShadowEdit:()=>vo,SimpleButton:()=>x,SlideBlock:()=>de,Spinner:()=>D,TextColorEdit:()=>Co,TextEdit:()=>St,Toast:()=>I.A,Toasts:()=>j.A,ToggleButton:()=>S.A,TransformEdit:()=>_t,TreeLi:()=>ge,TwoSideBool:()=>oo,UILabel:()=>tn.A,V3:()=>rt,V3block:()=>mt,confirmform:()=>Ma,params:()=>ze,queryform:()=>$a,vlist:()=>Ae});var a=o(15);const n={class:"overbutton"},l={class:"menulabel"},s={class:"btnicon"},i={name:"ExpandedButton",props:{label:"",icon:"",color:"rgb(0,0,0)"}};var r=o(262);const c=(0,r.A)(i,[["render",function(e,t,o,i,r,c){const d=(0,a.resolveComponent)("icon");return(0,a.openBlock)(),(0,a.createElementBlock)("button",n,[(0,a.createElementVNode)("div",l,(0,a.toDisplayString)(o.label),1),(0,a.createElementVNode)("div",s,[(0,a.createVNode)(d,{size:"100%",color:o.color,value:o.icon},null,8,["color","value"])])])}]]),d=["fill","x","href"],p=o.p+"assets/76bf5ab841899c419d06.svg",u={name:"Icon",props:{value:{type:String,default:()=>"icon-checkmark"},size:{type:String,default:()=>null},color:{type:String,default:()=>null},offset:{type:Number}},computed:{style(){return this.size?{width:`${this.size}`,height:`${this.size}`}:{width:"1em",height:"1em"}},val(){return`${p}#s-${this.value.replace("p-","")}`}}},m=(0,r.A)(u,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("svg",{preserveAspectRatio:"xMidYMid meet",class:"svgicon",style:(0,a.normalizeStyle)(s.style)},[(0,a.createElementVNode)("use",{class:"svguse",width:"100%",height:"100%",viewBox:"0 0 32 32",fill:o.color,x:o.offset,href:s.val},[(0,a.createElementVNode)("title",null,[(0,a.renderSlot)(e.$slots,"default",{},void 0,!0)])],8,d)],4)}],["__scopeId","data-v-a13b2ade"]]),h={class:"modal-header"},v={class:"modal-content"},g=["innerHTML"],y={class:"modal-footer"},f=["disabled","onClick"],k={computed:{modal(){return this.$app.modal},header(){return this.modal.header},content(){return this.modal.content},footer(){return this.modal.footer}},methods:{onSelf(){this.modal.values.closable&&this.modal.close()},onClick(e){"function"==typeof e&&e()},closeModal(e){"function"!=typeof e?this.modal.close():e()}}},b=(0,r.A)(k,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",{class:"modal-overlay",onClick:t[3]||(t[3]=(0,a.withModifiers)((...e)=>s.onSelf&&s.onSelf(...e),["self"]))},[(0,a.createElementVNode)("div",{class:"modal",onClick:t[2]||(t[2]=(0,a.withModifiers)(()=>{},["stop"]))},[(0,a.createElementVNode)("header",h,[((0,a.openBlock)(),(0,a.createBlock)((0,a.resolveDynamicComponent)(s.header.component||"div"),(0,a.mergeProps)({class:"header"},s.header.component?s.header:null),{default:(0,a.withCtx)(()=>[(0,a.createElementVNode)("h3",null,(0,a.toDisplayString)(s.header.value),1),(0,a.createElementVNode)("button",{class:"close-btn",onClick:t[0]||(t[0]=e=>s.closeModal(s.header.handler))},"×")]),_:1},16))]),(0,a.createElementVNode)("main",v,[((0,a.openBlock)(),(0,a.createBlock)((0,a.resolveDynamicComponent)(s.content.component||"div"),(0,a.mergeProps)({class:"content"},s.content.component?s.content.props:null,(0,a.toHandlers)(s.content.events||{})),(0,a.createSlots)({default:(0,a.withCtx)(()=>[(0,a.createElementVNode)("div",{class:"content-value",innerHTML:s.content.value||""},null,8,g)]),_:2},[(0,a.renderList)(s.content.slots,(e,t)=>({name:t,fn:(0,a.withCtx)(t=>[((0,a.openBlock)(),(0,a.createBlock)((0,a.resolveDynamicComponent)(e.component),(0,a.mergeProps)(t,(0,a.toHandlers)(e.events||{})),null,16))])}))]),1040))]),(0,a.createElementVNode)("footer",y,[((0,a.openBlock)(),(0,a.createBlock)((0,a.resolveDynamicComponent)(s.footer.component||"div"),(0,a.mergeProps)({class:"footer"},s.footer.component?s.footer.props:null,{onClose:s.closeModal}),{default:(0,a.withCtx)(()=>[s.footer.buttons?((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,{key:0},(0,a.renderList)(s.footer.buttons,e=>((0,a.openBlock)(),(0,a.createElementBlock)("div",null,[e.hidden?(0,a.createCommentVNode)("v-if",!0):((0,a.openBlock)(),(0,a.createElementBlock)("button",{key:0,class:(0,a.normalizeClass)(e.class),disabled:e.disabled,onClick:t=>s.onClick(e.handler)},(0,a.toDisplayString)(e.label||"Close"),11,f))]))),256)):((0,a.openBlock)(),(0,a.createElementBlock)("button",{key:1,class:(0,a.normalizeClass)(s.footer.class),onClick:t[1]||(t[1]=e=>s.closeModal(s.footer.handler))},(0,a.toDisplayString)(s.footer.label||"Close"),3))]),_:1},16,["onClose"]))])])])}],["__scopeId","data-v-38e7d2b0"]]),V=["onClick"],E={props:{values:{type:Array},rect:{type:Object},size:{type:Object,default:{width:200,height:100}}},data:()=>({popupStyle:{}}),methods:{togglePopup(e){const t=window.innerWidth;let o=this.rect.top+window.scrollY,a=this.rect.left+window.scrollX;a+this.size.width>t&&(a=this.rect.right-this.size.width+window.scrollX),this.popupStyle={position:"absolute",top:`${o}px`,left:`${a}px`,width:`${this.size.width}px`},this.isPopupVisible=!0},hidePopup(){this.$emit("callback")}}},w=(0,r.A)(E,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveDirective)("tooltip");return(0,a.openBlock)(),(0,a.createElementBlock)("div",{class:"popup",style:(0,a.normalizeStyle)(l.popupStyle)},[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(o.values,(t,o)=>(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("p",{class:"element",key:o,onClick:o=>t.handler?t.handler(t):e.$emit("click",t)},[((0,a.openBlock)(),(0,a.createBlock)((0,a.resolveDynamicComponent)(t.component||"div"),(0,a.mergeProps)({ref_for:!0},t.props),{default:(0,a.withCtx)(()=>[(0,a.createTextVNode)((0,a.toDisplayString)(t.props),1)]),_:2},1040))],8,V)),[[i,t.tooltip]])),128)),(0,a.createElementVNode)("button",{onClick:t[0]||(t[0]=(...e)=>s.hidePopup&&s.hidePopup(...e))},"ОК")],4)}],["__scopeId","data-v-1591e2fe"]]),N={key:0,class:"menulabel"},B={key:1,class:"btnicon"},C={name:"SimpleButton",props:{label:{type:String},icon:{type:Object},tooltip:{type:String},handlers:{type:Object,required:!0}},methods:{onClick(){this.handlers?.click?this.handlers.click(this):this.$emit("click",this)}}},x=(0,r.A)(C,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("icon"),r=(0,a.resolveDirective)("tooltip");return(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("button",{class:"small-btn simple",onClick:t[0]||(t[0]=(...e)=>s.onClick&&s.onClick(...e))},[o.label?((0,a.openBlock)(),(0,a.createElementBlock)("div",N,(0,a.toDisplayString)(o.label),1)):(0,a.createCommentVNode)("v-if",!0),o.icon?((0,a.openBlock)(),(0,a.createElementBlock)("div",B,[(0,a.createVNode)(i,{size:o.icon.size||"100%",value:o.icon.value},null,8,["size","value"])])):(0,a.createCommentVNode)("v-if",!0)])),[[r,o.tooltip]])}],["__scopeId","data-v-7f0518be"]]);var S=o(881);const A={class:"spinner"},$={name:"Spinner"},D=(0,r.A)($,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",A)}],["__scopeId","data-v-4736cf19"]]);var j=o(165),I=o(859);const T={class:"menu-container"},M={key:0,class:"menublock"},F={name:"ExtMenu",props:{list:{type:Array,default:[]},actived:{type:String}},computed:{menu(){return this.$app.menu}},methods:{onClick(e){const t=this.list.find(e=>e.id===this.actived);t&&(t.handlers?.disable?.(),t===e)?this.$emit("activate",null):(e.handler?.(e)||e.handlers?.enable?.(e)||this.$emit("click",e),this.$emit("activate",e))}}},L=(0,r.A)(F,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("ExpandedButton");return(0,a.openBlock)(),(0,a.createElementBlock)("div",T,[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(o.list,(e,t)=>((0,a.openBlock)(),(0,a.createElementBlock)("div",{key:t,class:(0,a.normalizeClass)([e.class,"menu-item"])},[e.hidden?(0,a.createCommentVNode)("v-if",!0):((0,a.openBlock)(),(0,a.createElementBlock)("div",M,[(0,a.createVNode)(i,{onClick:(0,a.withModifiers)(t=>s.onClick(e),["stop"]),label:e.label,color:e.id&&o.actived===e.id?"#ffff00":null,icon:e.icon},null,8,["onClick","label","color","icon"])]))],2))),128))])}]]),O={class:"input-wrapper"},P=["type","value","placeholder"],z={name:"MinimalInput",props:{type:{type:String,default:"text"},value:{type:[String,Number],default:""},placeholder:{type:String,default:""}},emits:["update:value"]},U=(0,r.A)(z,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",O,[(0,a.createElementVNode)("input",{type:o.type,value:o.value,onInput:t[0]||(t[0]=t=>e.$emit("update:value",t.target.value)),placeholder:o.placeholder,class:"input-field"},null,40,P)])}],["__scopeId","data-v-f47b63dc"]]),_=["value"],R={name:"Elements",props:{modelValue:{type:String}},data:()=>({element:null,list:[]}),mounted(){this.list=this.$app.engine.getFactory().Elements},computed:{val:{get(){return this.modelValue},set(e){this.$emit("update:modelValue",e)}}}},H=(0,r.A)(R,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",null,[(0,a.withDirectives)((0,a.createElementVNode)("select",{"onUpdate:modelValue":t[0]||(t[0]=e=>s.val=e),class:"form-select"},[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(l.list,e=>((0,a.openBlock)(),(0,a.createElementBlock)("option",{value:e.path},(0,a.toDisplayString)(e.name),9,_))),256))],512),[[a.vModelSelect,s.val]])])}]]),q={class:"radio-group"},G=["onClick"],J={name:"RadioButton",props:{buttons:{type:Array,required:!0},value:{type:Object}}},K=(0,r.A)(J,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",q,[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(o.buttons,(e,t)=>((0,a.openBlock)(),(0,a.createElementBlock)("button",{key:t,class:"btn",onClick:t=>e.handler(o.value)},(0,a.toDisplayString)(e.label),9,G))),128))])}],["__scopeId","data-v-48e97626"]]),Y={class:"radio-group"},W={class:"radio-label"},X=["name","value","checked","disabled","onChange"],Q={class:"radio-custom"},Z={class:"radio-text"},ee={class:"radio-default-label"},te={name:"RadioButton",props:{options:{type:[Array,Number],required:!0,validator:e=>Array.isArray(e)||"number"==typeof e&&e>0},modelValue:{type:[String,Number,Boolean,Object],default:null},name:{type:String,default:"radio-group"},disabled:{type:Boolean,default:!1},valueKey:{type:String,default:"value"},labelKey:{type:String,default:"label"}},emits:["update:modelValue","change"],computed:{normalizedOptions(){return"number"==typeof this.options?Array.from({length:this.options},(e,t)=>t+1):this.options}},methods:{getOptionValue(e){return"object"==typeof e&&null!==e&&(e[this.valueKey]||e.value)||e},getOptionLabel(e){return"object"==typeof e&&null!==e?e[this.labelKey]||e.label||this.getOptionValue(e):e},isChecked(e){return this.getOptionValue(e)===this.modelValue},handleChange(e){const t=this.getOptionValue(e);this.$emit("update:modelValue",t),this.$emit("change",t)}}},oe=(0,r.A)(te,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",Y,[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(o.options,(t,n)=>((0,a.openBlock)(),(0,a.createElementBlock)("div",{key:n,class:(0,a.normalizeClass)(["radio-item",{"radio-item--disabled":o.disabled}])},[(0,a.createElementVNode)("label",W,[(0,a.createElementVNode)("input",{type:"radio",name:o.name,value:s.getOptionValue(t),checked:s.isChecked(t),disabled:o.disabled,onChange:e=>s.handleChange(t),class:"radio-input"},null,40,X),(0,a.createCommentVNode)(" Кастомная кнопка через слот "),(0,a.createElementVNode)("span",Q,[(0,a.renderSlot)(e.$slots,"button",{option:t,index:n,checked:s.isChecked(t)},()=>[(0,a.createElementVNode)("span",{class:(0,a.normalizeClass)(["radio-default-button",{"radio-default-button--checked":s.isChecked(t)}])},null,2)],!0)]),(0,a.createCommentVNode)(" Кастомная надпись через слот "),(0,a.createElementVNode)("span",Z,[(0,a.renderSlot)(e.$slots,"label",{option:t,index:n,checked:s.isChecked(t)},()=>[(0,a.createElementVNode)("span",ee,(0,a.toDisplayString)(s.getOptionLabel(t)),1)],!0)])])],2))),128))])}],["__scopeId","data-v-65d75466"]]),ae={class:"search-filter"},ne={class:"search-input-container"},le=["placeholder"],se=["disabled"],ie={name:"SearchFilter",props:{value:{type:String,default:""},placeholder:{type:String,default:"Enter text to search..."},debounce:{type:Number,default:300},label:{type:String,default:""},button:{type:String,default:"Search"}},data(){return{searchValue:this.value,debounceTimer:null}},watch:{value(e){this.searchValue=e}},methods:{handleInput(){console.log("handleInput"),this.debounceTimer&&clearTimeout(this.debounceTimer),this.debounceTimer=setTimeout(()=>{this.$emit("input",this.searchValue),this.$emit("change",this.searchValue)},this.debounce)},handleSearch(){this.searchValue.trim()&&(this.debounceTimer&&(clearTimeout(this.debounceTimer),this.debounceTimer=null),this.$emit("search",this.searchValue))},beforeUnmount(){this.debounceTimer&&clearTimeout(this.debounceTimer)}}},re=(0,r.A)(ie,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",ae,[(0,a.createElementVNode)("div",ne,[(0,a.createElementVNode)("div",null,(0,a.toDisplayString)(o.label),1),(0,a.withDirectives)((0,a.createElementVNode)("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>l.searchValue=e),type:"text",class:"search-input",placeholder:o.placeholder,onInput:t[1]||(t[1]=(0,a.withModifiers)((...e)=>s.handleInput&&s.handleInput(...e),["stop"])),onKeyup:t[2]||(t[2]=(0,a.withKeys)((...e)=>s.handleSearch&&s.handleSearch(...e),["enter"]))},null,40,le),[[a.vModelText,l.searchValue]]),(0,a.createElementVNode)("button",{class:"search-button",onClick:t[3]||(t[3]=(...e)=>s.handleSearch&&s.handleSearch(...e)),disabled:!l.searchValue.trim()},[(0,a.renderSlot)(e.$slots,"button-content",{},()=>[(0,a.createElementVNode)("span",null,(0,a.toDisplayString)(o.button),1)],!0)],8,se)])])}],["__scopeId","data-v-7caf0ae1"]]),ce={name:"SliderBlock",props:{value:{type:Boolean,default:()=>!1},property:{type:String,default:"top"},shift:{type:Number,default:100},zero:{type:Number,default:0}},computed:{style(){return{[this.property]:this.value?`${this.shift}px`:`${this.zero}px`}}},mounted(){"right"===this.property||"left"===this.property?this.$el.style.width=this.shift-this.zero+"px":this.$el.style.height=this.shift-this.zero+"px"}},de=(0,r.A)(ce,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",{class:"slider",style:(0,a.normalizeStyle)(s.style)},[(0,a.renderSlot)(e.$slots,"default",{},void 0,!0),(0,a.createElementVNode)("div",{onClick:t[0]||(t[0]=t=>e.$emit("revert"))},[(0,a.renderSlot)(e.$slots,"button",{},void 0,!0)])],4)}],["__scopeId","data-v-b3fc2cec"]]),pe={key:0},ue={key:1},me={key:2,class:"child-list"},he={key:0},ve={name:"TreeLi",props:["value"],data:()=>({childshow:!1})},ge=(0,r.A)(ve,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("TreeLi",!0);return(0,a.openBlock)(),(0,a.createElementBlock)("li",null,[o.value.children?(0,a.createCommentVNode)("v-if",!0):((0,a.openBlock)(),(0,a.createElementBlock)("div",pe,[...t[1]||(t[1]=[(0,a.createElementVNode)("svg",{class:"edicon ics-spinner10"},[(0,a.createElementVNode)("use",{"xlink:href":"#ics-spinner10"})],-1)])])),o.value.children?((0,a.openBlock)(),(0,a.createElementBlock)("div",me,[(0,a.createElementVNode)("span",{onClick:t[0]||(t[0]=t=>e.childshow=!e.childshow)},[t[3]||(t[3]=(0,a.createElementVNode)("input",{type:"checkbox"},null,-1)),(0,a.createTextVNode)((0,a.toDisplayString)(o.value.name),1)]),e.childshow?((0,a.openBlock)(),(0,a.createElementBlock)("ul",he,[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(o.value.children,(e,t)=>((0,a.openBlock)(),(0,a.createBlock)(i,{key:t,value:e},null,8,["value"]))),128))])):(0,a.createCommentVNode)("v-if",!0)])):((0,a.openBlock)(),(0,a.createElementBlock)("span",ue,[t[2]||(t[2]=(0,a.createElementVNode)("input",{type:"checkbox"},null,-1)),(0,a.createTextVNode)((0,a.toDisplayString)(o.value.name),1)]))])}],["__scopeId","data-v-562df7a6"]]),ye={class:"selectable-container"},fe={class:"list"},ke={class:"grid"},be=["onClick"],Ve={key:0,class:"info"},Ee={name:"ActionsLib",data:()=>({current:null}),props:{list:{type:Array},selected:{type:Object}},watch:{selected(e,t){this.current=e}},emits:["selectItem"],methods:{onItemSelect(e){this.$emit("selectItem",e)}}},we=(0,r.A)(Ee,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",ye,[(0,a.createElementVNode)("div",fe,[(0,a.createElementVNode)("div",ke,[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(o.list,(t,o)=>((0,a.openBlock)(),(0,a.createElementBlock)("div",{onClick:e=>s.onItemSelect(t),class:"grid-element",key:o},[(0,a.renderSlot)(e.$slots,"item",{item:t})],8,be))),128))])]),l.current?((0,a.openBlock)(),(0,a.createElementBlock)("div",Ve,[(0,a.renderSlot)(e.$slots,"selected",{item:l.current})])):(0,a.createCommentVNode)("v-if",!0)])}]]),Ne={class:"vlist-container"},Be={class:"list"},Ce={class:"vlist"},xe=["onClick"],Se={name:"ActionsLib",data:()=>({current:null}),props:{list:{type:Array},selected:{type:Object}},watch:{selected(e,t){this.current=e}},emits:["selectItem"],methods:{onItemSelect(e){this.$emit("selectItem",e)}}},Ae=(0,r.A)(Se,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",Ne,[(0,a.createElementVNode)("div",Be,[(0,a.createElementVNode)("div",Ce,[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(o.list,(t,o)=>((0,a.openBlock)(),(0,a.createElementBlock)("div",{onClick:e=>s.onItemSelect(t),class:"vlist-element",key:o},[(0,a.renderSlot)(e.$slots,"item",{item:t})],8,xe))),128))])])])}]]),$e={style:{"text-align":"right"}},De={name:"BoolEdit",props:{modelValue:{type:Boolean}},computed:{val:{get(){return this.modelValue},set(e){this.$emit("update:modelValue",e)}}}},je=(0,r.A)(De,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",$e,[(0,a.withDirectives)((0,a.createElementVNode)("input",{type:"checkbox","onUpdate:modelValue":t[0]||(t[0]=e=>s.val=e)},null,512),[[a.vModelCheckbox,s.val]])])}]]),Ie={class:"comma-number-input-wrapper"},Te={class:"arrow-buttons"},Me={name:"input-float",props:{value:Object,modelValue:Number,step:{type:Number,default:1},min:{type:Number,default:Number.MIN_SAFE_INTEGER},max:{type:Number,default:Number.MAX_SAFE_INTEGER}},data:()=>({interval:null,separator:",",isPressed:!1,changeSpeed:100}),computed:{formattedValue:{get(){return this.modelValue},set(e){console.log(e),this.parseNumber(e),this.$emit("update:modelValue",e)}}},mounted(){const e=(new Intl.NumberFormat).format(this.modelValue);this.separator=e.charAt(1),this.$refs.input.addEventListener("wheel",this.onWheel,{passive:!1})},beforeDestroy(){this.$refs.input.removeEventListener("wheel",this.onWheel)},methods:{onFocus(){this.$nextTick(()=>{this.$refs.input.select()})},parseNumber(e){try{const t=parseFloat(e.replace(",","."));return isNaN(t)?this.modelValue:t}catch(e){return this.modelValue}},formatNumber:e=>parseFloat(e).toFixed(0).replace(".",","),onInput(e){this.formattedValue=e.target.modelValue},onWheel(e){e.preventDefault(),e.stopPropagation(),document.activeElement===this.$refs.input&&this.changeValue(e.deltaY>0?-this.step:this.step)},onKeyDown(e){"ArrowUp"===e.key?(this.changeValue(this.step),e.preventDefault()):"ArrowDown"===e.key&&(this.changeValue(-this.step),e.preventDefault())},changeValue(e){let t=(this.modelValue||0)+e;t=Math.max(Math.min(t,this.max),this.min),this.$emit("update:modelValue",parseFloat(t.toFixed(0)))},startIncrement(){this.interval&&clearInterval(this.interval),this.isPressed=!0,this.changeValue(this.step),setTimeout(()=>{this.isPressed&&(this.interval=setInterval(()=>this.changeValue(this.step),50))},400)},startDecrement(){this.interval&&clearInterval(this.interval),this.isPressed=!0,this.changeValue(-this.step),setTimeout(()=>{this.isPressed&&(this.interval=setInterval(()=>this.changeValue(-this.step),50))},400)},stopChange(){this.isPressed=!1,clearInterval(this.interval)}}},Fe=(0,r.A)(Me,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",Ie,[(0,a.withDirectives)((0,a.createElementVNode)("input",{ref:"input","onUpdate:modelValue":t[0]||(t[0]=e=>s.formattedValue=e),onKeydown:t[1]||(t[1]=(...e)=>s.onKeyDown&&s.onKeyDown(...e)),onDblclick:t[2]||(t[2]=(...e)=>s.onFocus&&s.onFocus(...e)),class:"comma-number-input"},null,544),[[a.vModelText,s.formattedValue,void 0,{number:!0}]]),(0,a.createElementVNode)("div",Te,[(0,a.createElementVNode)("button",{onMousedown:t[3]||(t[3]=(...e)=>s.startIncrement&&s.startIncrement(...e)),onMouseup:t[4]||(t[4]=(...e)=>s.stopChange&&s.stopChange(...e)),onMouseleave:t[5]||(t[5]=(...e)=>s.stopChange&&s.stopChange(...e))},"▲",32),(0,a.createElementVNode)("button",{onMousedown:t[6]||(t[6]=(...e)=>s.startDecrement&&s.startDecrement(...e)),onMouseup:t[7]||(t[7]=(...e)=>s.stopChange&&s.stopChange(...e)),onMouseleave:t[8]||(t[8]=(...e)=>s.stopChange&&s.stopChange(...e))},"▼",32)])])}]]),Le=["onUpdate:modelValue"],Oe=["onUpdate:modelValue"],Pe={name:"NameEditor",data:()=>({properties:[{property:"envMap",value:null}]}),methods:{updateAsset(){for(let e=0;e<this.properties.length;e++){const t=this.properties[e];this.selected[t.property],this.$app.assets.updateAsset(this.selected,t.property,()=>{})}}},props:{selected:{type:Object}}},ze=(0,r.A)(Pe,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",null,[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(l.properties,e=>((0,a.openBlock)(),(0,a.createElementBlock)("div",null,[(0,a.withDirectives)((0,a.createElementVNode)("input",{"onUpdate:modelValue":t=>e.property=t},null,8,Le),[[a.vModelText,e.property]]),(0,a.withDirectives)((0,a.createElementVNode)("input",{"onUpdate:modelValue":t=>o.selected[e.property]=t},null,8,Oe),[[a.vModelText,o.selected[e.property]]])]))),256)),(0,a.createElementVNode)("div",null,[(0,a.createElementVNode)("button",{class:"btn",onClick:t[0]||(t[0]=(...e)=>s.updateAsset&&s.updateAsset(...e))},"Update")])])}]]),Ue={class:"comma-number-input-wrapper"},_e={class:"arrow-buttons"},Re={name:"CommaNumberInput",props:{modelValue:Number,step:{type:Number,default:.1},min:{type:Number,default:Number.MIN_SAFE_INTEGER},max:{type:Number,default:Number.MAX_SAFE_INTEGER},decimals:{type:Number,default:2}},data:()=>({interval:null,separator:",",isPressed:!1,changeSpeed:100}),computed:{formattedValue:{get(){return this.modelValue},set(e){const t=this.parseNumber(e);this.$emit("update:modelValue",t)}}},mounted(){const e=(new Intl.NumberFormat).format(this.modelValue);this.separator=e.charAt(1),this.$refs.input.addEventListener("wheel",this.onWheel,{passive:!1})},beforeDestroy(){this.$refs.input.removeEventListener("wheel",this.onWheel)},methods:{onFocus(){this.$nextTick(()=>{this.$refs.input.select()})},parseNumber(e){try{const t=parseFloat(e.replace(",","."));return isNaN(t)?this.modelValue:t}catch(e){return this.modelValue}},formatNumber(e){return parseFloat(e).toFixed(this.decimals).replace(".",",")},onInput(e){this.formattedValue=e.target.modelValue},onWheel(e){e.preventDefault(),e.stopPropagation(),document.activeElement===this.$refs.input&&this.changeValue(e.deltaY>0?-this.step:this.step)},onKeyDown(e){"ArrowUp"===e.key?(this.changeValue(this.step),e.preventDefault()):"ArrowDown"===e.key&&(this.changeValue(-this.step),e.preventDefault())},changeValue(e){let t=(this.modelValue||0)+e;t=Math.max(Math.min(t,this.max),this.min),this.$emit("update:modelValue",parseFloat(t.toFixed(this.decimals)))},startIncrement(){this.interval&&clearInterval(this.interval),this.isPressed=!0,this.changeValue(this.step),setTimeout(()=>{this.isPressed&&(this.interval=setInterval(()=>this.changeValue(this.step),50))},400)},startDecrement(){this.interval&&clearInterval(this.interval),this.isPressed=!0,this.changeValue(-this.step),setTimeout(()=>{this.isPressed&&(this.interval=setInterval(()=>this.changeValue(-this.step),50))},400)},stopChange(){this.isPressed=!1,clearInterval(this.interval)}}},He=(0,r.A)(Re,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",Ue,[(0,a.withDirectives)((0,a.createElementVNode)("input",{ref:"input",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>s.formattedValue=e),onKeydown:t[1]||(t[1]=(...e)=>s.onKeyDown&&s.onKeyDown(...e)),onDblclick:t[2]||(t[2]=(...e)=>s.onFocus&&s.onFocus(...e)),class:"comma-number-input"},null,544),[[a.vModelText,s.formattedValue]]),(0,a.createElementVNode)("div",_e,[(0,a.createElementVNode)("button",{onMousedown:t[3]||(t[3]=(...e)=>s.startIncrement&&s.startIncrement(...e)),onMouseup:t[4]||(t[4]=(...e)=>s.stopChange&&s.stopChange(...e)),onMouseleave:t[5]||(t[5]=(...e)=>s.stopChange&&s.stopChange(...e))},"▲",32),(0,a.createElementVNode)("button",{onMousedown:t[6]||(t[6]=(...e)=>s.startDecrement&&s.startDecrement(...e)),onMouseup:t[7]||(t[7]=(...e)=>s.stopChange&&s.stopChange(...e)),onMouseleave:t[8]||(t[8]=(...e)=>s.stopChange&&s.stopChange(...e))},"▼",32)])])}]]),qe={class:"control-container"},Ge=["max"],Je={class:"buttons"},Ke=["disabled"],Ye=["disabled"],We={__name:"playcontrol",props:{modelValue:{type:Object},selected:{type:Object},value:{type:Object},target:{type:Object},property:{type:Object}},setup(e){const t=e,o=(0,a.ref)(!1),n=(0,a.ref)(0),l=(0,a.ref)(0),s=(0,a.ref)(0),i=(0,a.ref)(!1),r=(0,a.ref)(!1);function c(){const e=t.modelValue;r.value?e.pause():e.play()}function d(){t.modelValue.pause(),t.modelValue.currentTime=0}function p(){i.value=!1;const e=t.modelValue;if(o.value&&s.value<=e.duration)if(e.readyState<2){const t=()=>{e.currentTime=s.value,e.removeEventListener("canplay",t)};e.addEventListener("canplay",t),e.load()}else e.currentTime=s.value}function u(e){return!e||isNaN(e)?"0:00":`${Math.floor(e/60)}:${Math.floor(e%60).toString().padStart(2,"0")}`}return(0,a.onMounted)(()=>{const e=t.modelValue,c=()=>{e.readyState>=1&&(n.value=e.duration,o.value=!0)},d=()=>{i.value||(l.value=e.currentTime,s.value=e.currentTime)},p=()=>r.value=!0,u=()=>r.value=!1,m=()=>r.value=!1;e.addEventListener("loadedmetadata",c),e.addEventListener("canplay",c),e.addEventListener("timeupdate",d),e.addEventListener("play",p),e.addEventListener("playing",p),e.addEventListener("pause",u),e.addEventListener("ended",m),c(),(0,a.onUnmounted)(()=>{e.removeEventListener("loadedmetadata",c),e.removeEventListener("canplay",c),e.removeEventListener("timeupdate",d),e.removeEventListener("play",p),e.removeEventListener("playing",p),e.removeEventListener("pause",u),e.removeEventListener("ended",m)})}),(e,t)=>{const m=(0,a.resolveComponent)("icon");return(0,a.openBlock)(),(0,a.createElementBlock)("div",qe,[(0,a.createElementVNode)("span",null,(0,a.toDisplayString)(u(l.value))+" / "+(0,a.toDisplayString)(u(n.value)),1),(0,a.withDirectives)((0,a.createElementVNode)("input",{type:"range",min:"0",max:n.value,step:"0.01","onUpdate:modelValue":t[0]||(t[0]=e=>s.value=e),onMousedown:t[1]||(t[1]=e=>i.value=!0),onMouseup:p,onTouchstart:t[2]||(t[2]=e=>i.value=!0),onTouchend:p},null,40,Ge),[[a.vModelText,s.value,void 0,{number:!0}]]),(0,a.createElementVNode)("div",Je,[(0,a.createElementVNode)("button",{class:"btn square",onClick:c,disabled:!o.value},[(0,a.createVNode)(m,{value:r.value?"pause2":"play3"},null,8,["value"])],8,Ke),(0,a.createCommentVNode)(' <button class="btn square" @click="pause" :disabled="!ready">\r\n                <icon value="pause2"></icon>\r\n            </button> '),(0,a.createElementVNode)("button",{class:"btn square",onClick:d,disabled:!o.value},[(0,a.createVNode)(m,{value:"stop2"})],8,Ye)])])}}},Xe=(0,r.A)(We,[["__scopeId","data-v-ae734b3c"]]),Qe={style:{display:"grid","grid-template-columns":"96px 1fr"}},Ze={style:{"text-align":"center"}},et={props:{selected:{type:Object},label:{type:String},value:{type:Number},property:{type:Object}},computed:{val:{get(){return this.value},set(e){this.$emit("update:value",e)}}}},tt=(0,r.A)(et,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("FloatInput");return(0,a.openBlock)(),(0,a.createElementBlock)("div",Qe,[(0,a.createElementVNode)("div",null,(0,a.toDisplayString)(o.label),1),(0,a.createElementVNode)("div",Ze,[(0,a.createVNode)(i,{min:o.property.min||0,step:o.property.step||.01,value:s.val,onChanged:t[0]||(t[0]=e=>s.val=e)},null,8,["min","step","value"])])])}]]),ot={style:{display:"flex",gap:"7px"}},at={style:{display:"flex",gap:"3px"}},nt={style:{display:"flex",gap:"3px"}},lt={style:{display:"flex",gap:"3px"}};var st=o(875);const it={props:{modelValue:{type:Object,default:new st.Vector3},decimals:{type:Number,default:4},step:{type:Number,default:1}},computed:{value:{get(){return this.modelValue}}},methods:{updateValue(e,t){"number"==typeof t&&this.$emit("update:modelValue",{...this.value,[e]:t})}}},rt=(0,r.A)(it,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("Float");return(0,a.openBlock)(),(0,a.createElementBlock)("div",ot,[(0,a.createElementVNode)("div",at,[t[6]||(t[6]=(0,a.createElementVNode)("label",{style:{"font-size":"1.2em"}},"x",-1)),(0,a.createVNode)(i,{modelValue:s.value.x,"onUpdate:modelValue":[t[0]||(t[0]=e=>s.value.x=e),t[1]||(t[1]=e=>s.updateValue("x",e))],decimals:o.decimals,step:o.step},null,8,["modelValue","decimals","step"])]),(0,a.createElementVNode)("div",nt,[t[7]||(t[7]=(0,a.createElementVNode)("label",{style:{"font-size":"1.2em"}},"y",-1)),(0,a.createVNode)(i,{modelValue:s.value.y,"onUpdate:modelValue":[t[2]||(t[2]=e=>s.value.y=e),t[3]||(t[3]=e=>s.updateValue("y",e))],decimals:o.decimals,step:o.step},null,8,["modelValue","decimals","step"])]),(0,a.createElementVNode)("div",lt,[t[8]||(t[8]=(0,a.createElementVNode)("label",{style:{"font-size":"1.2em"}},"z",-1)),(0,a.createVNode)(i,{modelValue:s.value.z,"onUpdate:modelValue":[t[4]||(t[4]=e=>s.value.z=e),t[5]||(t[5]=e=>s.updateValue("z",e))],decimals:o.decimals,step:o.step},null,8,["modelValue","decimals","step"])])])}]]),ct={style:{display:"flex","align-items":"center",gap:"1px","flex-direction":"column"}},dt={key:0,class:"tools"},pt={key:1,class:"titleinfo"},ut={data:()=>({expanded:!0}),props:{label:String,modelValue:{type:Object,default:new st.Vector3},decimals:{type:Number,default:2},step:{type:Number,default:1}},computed:{value:{get(){return this.modelValue}}},watch:{values(e,t){}},methods:{onUpdate(e){const t=new CustomEvent("update:modelValue",{detail:e,bubbles:!1});this.$emit("update:modelValue",t.detail)}}},mt=(0,r.A)(ut,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("V3");return(0,a.openBlock)(),(0,a.createElementBlock)("div",ct,[(0,a.createElementVNode)("div",{class:(0,a.normalizeClass)(["title",l.expanded?"":"min"])},[(0,a.createElementVNode)("div",{class:"label",onClick:t[0]||(t[0]=e=>l.expanded=!l.expanded)},(0,a.toDisplayString)(l.expanded?"▼":"▶")+" "+(0,a.toDisplayString)(o.label),1),l.expanded?((0,a.openBlock)(),(0,a.createElementBlock)("div",dt,[(0,a.renderSlot)(e.$slots,"tools",{},void 0,!0)])):((0,a.openBlock)(),(0,a.createElementBlock)("div",pt,"x:"+(0,a.toDisplayString)(o.modelValue.x.toFixed(o.decimals))+",y:"+(0,a.toDisplayString)(o.modelValue.y.toFixed(o.decimals))+",z:"+(0,a.toDisplayString)(o.modelValue.z.toFixed(o.decimals)),1))],2),l.expanded?((0,a.openBlock)(),(0,a.createBlock)(i,{key:0,modelValue:s.value,decimals:o.decimals,step:o.step,"onUpdate:modelValue":s.onUpdate},null,8,["modelValue","decimals","step","onUpdate:modelValue"])):(0,a.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-6e23d76e"]]),ht={style:{display:"flex","align-items":"center",gap:"3px","flex-direction":"column"}},vt={class:"label"},gt={key:0,class:"tools"},yt={key:1,class:"titleinfo"};var ft=o(338);const kt={data:()=>({expanded:!0}),props:{rotation:{type:Object,default:{x:0,y:0,z:0}},quaternion:Object,label:String,modelValue:Object,decimals:{type:Number,default:2},step:{type:Number,default:1}},methods:{onChangeVal(e){e.x>359&&(e.x=0),e.x<-359&&(e.x=0),e.y>359&&(e.y=0),e.y<-359&&(e.y=0),e.z>359&&(e.z=0),e.z<-359&&(e.z=0);const t=new CustomEvent("update:modelValue",{detail:new st.Euler((0,ft.eh)(Math.round(e.x)),(0,ft.eh)(Math.round(e.y)),(0,ft.eh)(Math.round(e.z)),"XYZ"),bubbles:!1});this.$emit("update:rotation",t.detail)}},computed:{formattedValue:{get(){return{x:Math.round((0,ft.xW)(this.rotation.x)),y:Math.round((0,ft.xW)(this.rotation.y)),z:Math.round((0,ft.xW)(this.rotation.z))}}}}},bt=(0,r.A)(kt,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("V3");return(0,a.openBlock)(),(0,a.createElementBlock)("div",ht,[(0,a.createElementVNode)("div",{class:(0,a.normalizeClass)(["title",l.expanded?"":"min"]),onClick:t[0]||(t[0]=e=>l.expanded=!l.expanded)},[(0,a.createElementVNode)("div",vt,(0,a.toDisplayString)(l.expanded?"▼":"▶")+" "+(0,a.toDisplayString)(o.label),1),l.expanded?((0,a.openBlock)(),(0,a.createElementBlock)("div",gt,[(0,a.renderSlot)(e.$slots,"tools",{},void 0,!0)])):((0,a.openBlock)(),(0,a.createElementBlock)("div",yt,"x:"+(0,a.toDisplayString)(s.formattedValue.x)+",y:"+(0,a.toDisplayString)(s.formattedValue.y)+",z:"+(0,a.toDisplayString)(s.formattedValue.z),1))],2),l.expanded?((0,a.openBlock)(),(0,a.createBlock)(i,{key:0,modelValue:s.formattedValue,decimals:o.decimals,step:o.step,"onUpdate:modelValue":s.onChangeVal},null,8,["modelValue","decimals","step","onUpdate:modelValue"])):(0,a.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-4454ef46"]]),Vt={style:{display:"flex","align-items":"center",gap:"1px","flex-direction":"column"}},Et={name:"QuaternionEditor",props:{modelValue:{type:st.Quaternion,required:!0},decimals:{type:Number,default:2},step:{type:Number,default:1}},data:()=>({expanded:!0,x:0,y:0,z:0}),watch:{modelValue:{handler(e){this.updateEulerFromQuaternion(e)},immediate:!0,deep:!0}},methods:{updateEulerFromQuaternion(e){const t=(new st.Euler).setFromQuaternion(e,"XYZ");this.x=this.roundValue(t.x),this.y=this.roundValue(t.y),this.z=this.roundValue(t.z)},updateQuaternion(){const e=new st.Euler(this.x,this.y,this.z,"XYZ"),t=(new st.Quaternion).setFromEuler(e,"XYZ");this.$emit("update:modelValue",t)},roundValue:e=>Math.round(100*e)/100}},wt=(0,r.A)(Et,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("V3");return(0,a.openBlock)(),(0,a.createElementBlock)("div",Vt,[(0,a.createCommentVNode)(' <div class="title" :class="expanded ? \'\' : \'min\'">\r\n            <div class="label" @click="expanded = !expanded">{{expanded?\'▼\':\'▶\' }} {{ label }}</div>\r\n            <div v-if="expanded"class="tools"><slot name="tools"></slot></div>\r\n            <div v-else class="titleinfo">x:{{ modelValue.x.toFixed(decimals) }},y:{{ modelValue.y.toFixed(decimals) }},z:{{ modelValue.z.toFixed(decimals) }}</div>\r\n        </div> '),l.expanded?((0,a.openBlock)(),(0,a.createBlock)(i,{key:0,modelValue:{x:l.x,y:l.y,z:l.z},decimals:o.decimals,step:o.step,"onUpdate:modelValue":s.updateQuaternion},null,8,["modelValue","decimals","step","onUpdate:modelValue"])):(0,a.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-96995396"]]),Nt={class:"block_container"},Bt={key:0,class:"editrow"},Ct={class:"label"},xt={name:"LabelEditor",props:{modelValue:{type:String,default:""},label:{type:String,default:""},tooltip:{type:String,default:""}},data:()=>({editMode:!1,val:""}),watch:{modelValue(){this.editMode=!1}},methods:{startEdit(){this.val=this.modelValue,this.editMode=!0,this.$nextTick(()=>{this.$refs.editInput.focus()})},complete(e){console.log(e),e.ctrlKey||e.shiftKey||(e&&e.preventDefault(),this.$emit("update:modelValue",this.val),this.editMode=!1)},endEdit(){return this.editMode?(this.editMode=!1,this.val):this.modelValue}},mounted(){}},St=(0,r.A)(xt,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("icon"),r=(0,a.resolveDirective)("tooltip");return(0,a.openBlock)(),(0,a.createElementBlock)("div",null,[(0,a.createElementVNode)("div",Nt,[e.editMode?((0,a.openBlock)(),(0,a.createElementBlock)("div",Bt,[(0,a.withDirectives)((0,a.createElementVNode)("textarea",{rows:"10",cols:"33",ref:"editInput",class:"editinput","onUpdate:modelValue":t[0]||(t[0]=t=>e.val=t),onKeyup:t[1]||(t[1]=(0,a.withKeys)((...e)=>s.complete&&s.complete(...e),["enter"]))},null,544),[[a.vModelText,e.val]]),(0,a.createVNode)(i,{class:"okicon",value:"checkmark",size:"1em",onClick:s.complete},null,8,["onClick"])])):(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("div",{class:"editrow",onClick:t[2]||(t[2]=(...e)=>s.startEdit&&s.startEdit(...e)),key:"tooltip-"+o.modelValue},[(0,a.createElementVNode)("span",Ct,(0,a.toDisplayString)(o.modelValue),1),(0,a.createVNode)(i,{value:"pencil",size:"1em"})])),[[r,o.tooltip||o.modelValue]])])])}],["__scopeId","data-v-44f8aea6"]]),At={class:"block_container"},$t={key:0,class:"editrow"},Dt={class:"label"},jt={name:"LabelEditor",props:{modelValue:{type:String,default:""},label:{type:String,default:""},tooltip:{type:String,default:""}},data:()=>({editMode:!1,val:""}),watch:{modelValue(){this.editMode=!1}},methods:{startEdit(){this.val=this.modelValue,this.editMode=!0,this.$nextTick(()=>{this.$refs.editInput.focus()})},complete(e){e&&e.preventDefault(),this.$emit("update:modelValue",this.val),this.editMode=!1},endEdit(){return this.editMode?(this.editMode=!1,this.val):this.modelValue}},mounted(){}},It=(0,r.A)(jt,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("icon"),r=(0,a.resolveDirective)("tooltip");return(0,a.openBlock)(),(0,a.createElementBlock)("div",null,[(0,a.createElementVNode)("div",At,[e.editMode?((0,a.openBlock)(),(0,a.createElementBlock)("div",$t,[(0,a.withDirectives)((0,a.createElementVNode)("input",{ref:"editInput",class:"editinput","onUpdate:modelValue":t[0]||(t[0]=t=>e.val=t),onKeyup:t[1]||(t[1]=(0,a.withKeys)((...e)=>s.complete&&s.complete(...e),["enter"]))},null,544),[[a.vModelText,e.val]]),(0,a.createVNode)(i,{class:"okicon",value:"checkmark",size:"1em",onClick:s.complete},null,8,["onClick"])])):(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("div",{class:"editrow",onClick:t[2]||(t[2]=(...e)=>s.startEdit&&s.startEdit(...e)),key:"tooltip-"+o.modelValue},[(0,a.createElementVNode)("span",Dt,(0,a.toDisplayString)(o.modelValue),1),(0,a.createVNode)(i,{value:"pencil",size:"1em"})])),[[r,o.tooltip||o.modelValue]])])])}],["__scopeId","data-v-7c4f752c"]]),Tt={class:"transform-container"},Mt={class:"label"},Ft={class:"transforms"},Lt={key:1},Ot={key:3},Pt={key:5};var zt=o(835);const Ut={props:{modelValue:{type:Object,default:{}},value:{type:Object,default:{}},target:{type:Object}},beforeUnmount(){this.value&&zt.A.Transformer.removeEventListener("objectChange",this.onTransformerEvent)},mounted(){zt.A.Transformer.addEventListener("objectChange",this.onTransformerEvent)},methods:{assignFromModel(e){this.target[e]={x:this.value[e].x,y:this.value[e].y,z:this.value[e].z}},removeTransform(e){this.target[e]&&(delete this.target[e],"rotation"===e&&this.value.rotation.set(0,0,0,"XYZ"),"position"===e&&this.value.position.set(0,0,0),"scale"===e&&this.value.scale.set(1,1,1),this.$emit("save"))},onTransformerEvent(e){switch(zt.A.Transformer.mode){case"translate":this.target.position={...this.value.position};break;case"rotate":this.target.rotation={x:this.value.rotation.x,y:this.value.rotation.y,z:this.value.rotation.z};break;case"scale":this.target.scale={...this.value.scale}}this.$emit("save")},async onChangeTransform(e,t){switch(e){case"position":this.value.position.copy(t),this.target.position={x:t.x,y:t.y,z:t.z};break;case"rotation":this.value.rotation.set(t.x,t.y,t.z,"XYZ"),this.target.rotation={x:t.x,y:t.y,z:t.z};break;case"scale":this.value.scale.copy(t),this.target.scale={x:t.x,y:t.y,z:t.z}}this.$emit("save")}}},_t=(0,r.A)(Ut,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("icon"),r=(0,a.resolveComponent)("V3block"),c=(0,a.resolveComponent)("EulerBlock"),d=(0,a.resolveDirective)("tooltip");return(0,a.openBlock)(),(0,a.createElementBlock)("div",null,[(0,a.createElementVNode)("div",Tt,[(0,a.createElementVNode)("div",Mt,[(0,a.createCommentVNode)("v-if",!0)]),(0,a.createElementVNode)("div",Ft,[o.target.position?((0,a.openBlock)(),(0,a.createBlock)(r,{key:0,"onUpdate:modelValue":t[3]||(t[3]=e=>s.onChangeTransform("position",e)),label:"Position",step:.1,modelValue:o.target.position,decimals:4},{tools:(0,a.withCtx)(()=>[(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("button",{class:"square",onClick:t[2]||(t[2]=e=>s.removeTransform("position"))},[(0,a.createVNode)(i,{value:"bin",size:"1em"})])),[[d,"Delete position"]])]),_:1},8,["modelValue"])):((0,a.openBlock)(),(0,a.createElementBlock)("div",Lt,[(0,a.createElementVNode)("button",{class:"copybutton",onClick:t[4]||(t[4]=e=>s.assignFromModel("position"))},"Copy model position")])),o.target.rotation?((0,a.openBlock)(),(0,a.createBlock)(c,{key:2,"onUpdate:rotation":t[6]||(t[6]=e=>s.onChangeTransform("rotation",e)),label:"Rotation",step:1,decimals:0,rotation:o.target.rotation},{tools:(0,a.withCtx)(()=>[(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("button",{class:"square",onClick:t[5]||(t[5]=e=>s.removeTransform("rotation"))},[(0,a.createVNode)(i,{value:"bin",size:"1em"})])),[[d,"Remove rotation"]])]),_:1},8,["rotation"])):((0,a.openBlock)(),(0,a.createElementBlock)("div",Ot,[(0,a.createElementVNode)("button",{class:"copybutton",onClick:t[7]||(t[7]=e=>s.assignFromModel("rotation"))},"Copy model rotation")])),o.target.scale?((0,a.openBlock)(),(0,a.createBlock)(r,{key:4,"onUpdate:modelValue":t[9]||(t[9]=e=>s.onChangeTransform("scale",e)),label:"Scale",step:.01,modelValue:o.target.scale},{tools:(0,a.withCtx)(()=>[(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("button",{class:"square",onClick:t[8]||(t[8]=e=>s.removeTransform("scale"))},[(0,a.createVNode)(i,{value:"bin",size:"1em"})])),[[d,"Remove size"]])]),_:1},8,["modelValue"])):((0,a.openBlock)(),(0,a.createElementBlock)("div",Pt,[(0,a.createElementVNode)("button",{class:"copybutton",onClick:t[10]||(t[10]=e=>s.assignFromModel("scale"))},"Copy model scale")]))])])])}]]),Rt={style:{display:"grid","grid-template-columns":"96px 1fr"}},Ht={name:"EditColor",props:{modelValue:{type:Object}},computed:{val:{get(){return`#${this.modelValue?.getHexString()||"ffffff"}`},set(e){this.modelValue&&this.modelValue.set(e),this.$emit("update:modelValue",this.modelValue||new st.Color(e))}}}},qt=(0,r.A)(Ht,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",Rt,[(0,a.withDirectives)((0,a.createElementVNode)("input",{style:{width:"100%"},ref:"col",type:"color","onUpdate:modelValue":t[0]||(t[0]=e=>s.val=e)},null,512),[[a.vModelText,s.val]])])}]]),Gt={class:"image-container"},Jt={ref:"canva"},Kt={key:0,class:"selector"},Yt={props:{modelValue:{type:Object,default:null},value:{type:Object},label:{type:String,default:""},tooltip:{type:String,default:""},selectable:{type:Boolean}},data:()=>({txtr:null}),watch:{value(e){this.redraw()}},methods:{onUpdate({result:e,file:t}){console.log(e);const o=new Blob([e],{type:t.type}),a=URL.createObjectURL(o);this.txtr=a;const n=(new THREE.TextureLoader).load(a,()=>{URL.revokeObjectURL(a)});this.$emit("update:modelValue",n.image),this.$app.storage.writeFile("texture.png",e)}},methods:{redraw(){const e=this.$refs.canva,t=e.getContext("2d");if(t.clearRect(0,0,e.width,e.height),this.value?.resource?.image)try{console.log(this.value);const o=this.value.resource.image;e.width=o.width,e.height=o.height,t.drawImage(o,0,0)}catch(e){}}},mounted(){this.redraw()}},Wt=(0,r.A)(Yt,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",Gt,[(0,a.createCommentVNode)(' <FileSelect @update:modelValue="onUpdate" acceptedTypes="image/\\*" /> '),(0,a.createElementVNode)("canvas",Jt,null,512),o.selectable?((0,a.openBlock)(),(0,a.createElementBlock)("div",Kt,[(0,a.createElementVNode)("button",{onClick:t[0]||(t[0]=t=>e.$emit("select"))},"SELECT")])):(0,a.createCommentVNode)("v-if",!0)])}]]),Xt={class:"image-uploader"},Qt=["accept"],Zt={name:"FileSelect",props:{buttonText:{type:String,default:"Select Image"},maxFileSize:{type:Number,default:5242880},acceptedTypes:{type:String,default:"image/*"}},methods:{triggerFileInput(){this.$refs.fileInput.click()},handleFileSelect(e){const t=e.target.files[0];if(!t)return;if(console.log(t),!t.type.match(this.acceptedTypes.replace("*",".*")))return void this.$emit("error","Invalid file type");if(t.size>this.maxFileSize)return void this.$emit("error",`File is too large (max ${this.maxFileSize/1024/1024}MB)`);const o=new FileReader;o.onload=e=>{this.$emit("update:modelValue",{result:e.target.result,file:t})},o.onerror=()=>this.$emit("error","Failed to read file"),o.readAsArrayBuffer(t),e.target.value=""}}},eo=(0,r.A)(Zt,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",Xt,[(0,a.createElementVNode)("button",{onClick:t[0]||(t[0]=(...e)=>s.triggerFileInput&&s.triggerFileInput(...e)),class:"upload-button"},(0,a.toDisplayString)(o.buttonText),1),(0,a.createElementVNode)("input",{type:"file",ref:"fileInput",accept:o.acceptedTypes,onChange:t[1]||(t[1]=(...e)=>s.handleFileSelect&&s.handleFileSelect(...e)),style:{display:"none"}},null,40,Qt)])}]]),to={__name:"twosidebool",props:{modelValue:{type:Boolean,default:!1},labels:{type:Array}},emits:["update:modelValue"],setup(e,{emit:t}){const o=e,n=t,l=()=>{n("update:modelValue",!o.modelValue)};return(t,o)=>((0,a.openBlock)(),(0,a.createElementBlock)("div",{class:"toggle-switch",onClick:l},[(0,a.createElementVNode)("div",{class:(0,a.normalizeClass)(["slider",{active:e.modelValue}])},[(0,a.createElementVNode)("span",{class:(0,a.normalizeClass)(["left-label",{active:!e.modelValue}])},[(0,a.renderSlot)(t.$slots,"left",{},()=>[(0,a.createTextVNode)((0,a.toDisplayString)(e.labels[0]),1)])],2),o[0]||(o[0]=(0,a.createElementVNode)("span",{class:"knob"},null,-1)),(0,a.createElementVNode)("span",{class:(0,a.normalizeClass)(["right-label",{active:e.modelValue}])},[(0,a.renderSlot)(t.$slots,"right",{},()=>[(0,a.createTextVNode)((0,a.toDisplayString)(e.labels[1]),1)])],2)],2)]))}},oo=(0,r.A)(to,[["__scopeId","data-v-27cb6eff"]]),ao={class:"text-align-editor"},no=["value"],lo={__name:"sectionselect",props:{modelValue:{type:String,default:"center"},list:{type:Array,default:[]}},emits:["update:modelValue"],setup(e,{emit:t}){const o=e,n=t,l=(0,a.ref)(o.modelValue);(0,a.watch)(()=>o.modelValue,e=>{e!==l.value&&(l.value=e)});const s=()=>n("update:modelValue",l.value);return(t,o)=>((0,a.openBlock)(),(0,a.createElementBlock)("div",ao,[(0,a.withDirectives)((0,a.createElementVNode)("select",{"onUpdate:modelValue":o[0]||(o[0]=e=>l.value=e),onChange:s},[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(e.list,e=>((0,a.openBlock)(),(0,a.createElementBlock)("option",{value:e.value},(0,a.toDisplayString)(e.label||e.value),9,no))),256))],544),[[a.vModelSelect,l.value]])]))}},so=(0,r.A)(lo,[["__scopeId","data-v-57114c76"]]),io={class:"labelField"},ro={name:"Label",props:{modelValue:{type:String},value:{type:Object}}},co=(0,r.A)(ro,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveDirective)("tooltip");return(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("div",io,[(0,a.createTextVNode)((0,a.toDisplayString)(o.modelValue||""),1)])),[[i,o.modelValue]])}],["__scopeId","data-v-45c328bf"]]),po={style:{display:"flex","flex-direction":"column"}},uo={style:{display:"flex","flex-direction":"row","justify-content":"space-between"}},mo={style:{display:"flex","flex-direction":"row","justify-content":"space-between"}},ho={props:{modelValue:{type:Object,default:{cast:!1,receive:!1}}},computed:{cast:{get(){return!!this.modelValue&&this.modelValue.cast},set(e){this.$emit("update:modelValue",{...this.modelValue?this.modelValue:{},cast:e})}},receive:{get(){return!!this.modelValue&&this.modelValue.receive},set(e){this.$emit("update:modelValue",{...this.modelValue?this.modelValue:{},receive:e})}}}},vo=(0,r.A)(ho,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("BoolEdit");return(0,a.openBlock)(),(0,a.createElementBlock)("div",po,[(0,a.createElementVNode)("div",uo,[t[2]||(t[2]=(0,a.createElementVNode)("div",null,"Cast",-1)),(0,a.createVNode)(i,{modelValue:s.cast,"onUpdate:modelValue":t[0]||(t[0]=e=>s.cast=e),"update:modelValue":"cast=$event"},null,8,["modelValue"])]),(0,a.createElementVNode)("div",mo,[t[3]||(t[3]=(0,a.createElementVNode)("div",null,"Receive",-1)),(0,a.createVNode)(i,{modelValue:s.receive,"onUpdate:modelValue":t[1]||(t[1]=e=>s.receive=e),"update:modelValue":"receive=$event"},null,8,["modelValue"])])])}]]),go={class:"dimension-control"},yo={class:"controls"},fo={class:"control-group"},ko={class:"control-row"},bo={class:"control-group"},Vo={class:"control-row"},Eo={name:"DimensionControl",props:{value:{type:Object,default:{}},target:{type:Object}},emits:["update:target"],setup(e,{emit:t}){const o=e=>{if("number"==typeof e)return{value:e,unit:"px"};if("auto"===e||"fit-content"===e||"min-content"===e||"max-content"===e)return{value:0,unit:e};const t=e.match(/^([\d.]+)(\D+)$/);return t?{value:parseFloat(t[1]),unit:t[2]}:{value:0,unit:"px"}},n=o(e.target.width||"100px"),l=(0,a.ref)(n.value),s=(0,a.ref)(n.unit),i=o(e.target.height||"100px"),r=(0,a.ref)(i.value),c=(0,a.ref)(i.unit),d=(e,t)=>["auto","fit-content","min-content","max-content","none"].includes(t)?t:`${e}${t}`;return(0,a.watch)([l,s],()=>{t("update:target","width",d(l.value,s.value))}),(0,a.watch)([r,c],()=>{t("update:target","height",d(r.value,c.value))}),(0,a.watch)(()=>e.target.width,e=>{const t=o(e||"100px");l.value=t.value,s.value=t.unit}),(0,a.watch)(()=>e.target.height,e=>{const t=o(e||"100px");r.value=t.value,c.value=t.unit}),{widthValue:l,widthUnit:s,heightValue:r,heightUnit:c}}},wo=(0,r.A)(Eo,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",go,[(0,a.createElementVNode)("div",yo,[(0,a.createElementVNode)("div",fo,[t[5]||(t[5]=(0,a.createElementVNode)("span",null,"Width",-1)),(0,a.createElementVNode)("div",ko,[(0,a.withDirectives)((0,a.createElementVNode)("select",{"onUpdate:modelValue":t[0]||(t[0]=e=>n.widthUnit=e)},[...t[4]||(t[4]=[(0,a.createStaticVNode)('<option value="px" data-v-f12dc314>px</option><option value="%" data-v-f12dc314>%</option><option value="em" data-v-f12dc314>em</option><option value="rem" data-v-f12dc314>rem</option><option value="vh" data-v-f12dc314>vh</option><option value="vw" data-v-f12dc314>vw</option><option value="auto" data-v-f12dc314>auto</option><option value="fit-content" data-v-f12dc314>fit-content</option><option value="min-content" data-v-f12dc314>min-content</option><option value="max-content" data-v-f12dc314>max-content</option>',10)])],512),[[a.vModelSelect,n.widthUnit]]),["auto","fit-content","min-content","max-content"].includes(n.widthUnit)?(0,a.createCommentVNode)("v-if",!0):(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("input",{key:0,"onUpdate:modelValue":t[1]||(t[1]=e=>n.widthValue=e),type:"number",min:"0"},null,512)),[[a.vModelText,n.widthValue,void 0,{number:!0}]])])]),(0,a.createElementVNode)("div",bo,[t[7]||(t[7]=(0,a.createElementVNode)("span",null,"Height",-1)),(0,a.createElementVNode)("div",Vo,[(0,a.withDirectives)((0,a.createElementVNode)("select",{"onUpdate:modelValue":t[2]||(t[2]=e=>n.heightUnit=e)},[...t[6]||(t[6]=[(0,a.createStaticVNode)('<option value="px" data-v-f12dc314>px</option><option value="%" data-v-f12dc314>%</option><option value="em" data-v-f12dc314>em</option><option value="rem" data-v-f12dc314>rem</option><option value="vh" data-v-f12dc314>vh</option><option value="vw" data-v-f12dc314>vw</option><option value="auto" data-v-f12dc314>auto</option><option value="fit-content" data-v-f12dc314>fit-content</option><option value="min-content" data-v-f12dc314>min-content</option><option value="max-content" data-v-f12dc314>max-content</option>',10)])],512),[[a.vModelSelect,n.heightUnit]]),["auto","fit-content","min-content","max-content"].includes(n.heightUnit)?(0,a.createCommentVNode)("v-if",!0):(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("input",{key:0,"onUpdate:modelValue":t[3]||(t[3]=e=>n.heightValue=e),type:"number",min:"0"},null,512)),[[a.vModelText,n.heightValue,void 0,{number:!0}]])])])])])}],["__scopeId","data-v-f12dc314"]]),No={class:"text-color-editor"},Bo={name:"TextColorEditor",props:{modelValue:{type:String}},data:()=>({defaultColor:"#000000"}),computed:{textColor:{get(){return this.modelValue||"#000000"},set(e){this.$emit("update:modelValue",e)}}},emits:["update:modelValue"]},Co=(0,r.A)(Bo,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",No,[(0,a.withDirectives)((0,a.createElementVNode)("input",{type:"color",id:"colorPicker","onUpdate:modelValue":t[0]||(t[0]=e=>s.textColor=e)},null,512),[[a.vModelText,s.textColor]])])}],["__scopeId","data-v-73332108"]]),xo={class:"font-size-editor"},So={class:"controls"},Ao={class:"size-control"},$o=["value"],Do={name:"FontSizeEditor",data:()=>({fontSizeValue:16,fontSizeUnit:"px",defaultSize:"16px",availableUnits:["px","em","rem","pt","pc","in","cm","mm","ex","ch","vw","vh","vmin","vmax","%"],sizePresets:[{label:"Маленький (12px)",value:"12px"},{label:"Средний (16px)",value:"16px"},{label:"Большой (24px)",value:"24px"},{label:"Заголовок (32px)",value:"32px"}]}),computed:{currentFontSize(){return`${this.fontSizeValue}${this.fontSizeUnit}`}},methods:{updateFontSize(){this.$emit("update:modelValue",this.currentFontSize)},resetSize(){const e=this.defaultSize.match(/(\d+\.?\d*)(\D+)/);e?(this.fontSizeValue=parseFloat(e[1]),this.fontSizeUnit=e[2]):(this.fontSizeValue=16,this.fontSizeUnit="px"),this.updateFontSize()},applyPreset(e){const t=e.match(/(\d+\.?\d*)(\D+)/);t&&(this.fontSizeValue=parseFloat(t[1]),this.fontSizeUnit=t[2],this.updateFontSize())},parseSize(e){const t=e.match(/(\d+\.?\d*)(\D+)/);return t?{value:parseFloat(t[1]),unit:t[2]}:null},init(){const e=this.parseSize(this.modelValue);e&&(this.fontSizeValue=e.value,this.fontSizeUnit=e.unit,this.defaultSize=this.modelValue)}},emits:["update:modelValue"],props:{modelValue:{type:String,default:"16px",validator:e=>/^\d*\.?\d+(px|em|rem|pt|pc|in|cm|mm|ex|ch|vw|vh|vmin|vmax|%)$/.test(e)}},watch:{modelValue(){this.init()}},created(){this.init()}},jo=(0,r.A)(Do,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",xo,[(0,a.createElementVNode)("div",So,[(0,a.createElementVNode)("div",Ao,[(0,a.withDirectives)((0,a.createElementVNode)("input",{type:"number",id:"fontSizeValue","onUpdate:modelValue":t[0]||(t[0]=e=>l.fontSizeValue=e),min:"0",step:"0.1",onInput:t[1]||(t[1]=(...e)=>s.updateFontSize&&s.updateFontSize(...e))},null,544),[[a.vModelText,l.fontSizeValue,void 0,{number:!0}]]),(0,a.withDirectives)((0,a.createElementVNode)("select",{"onUpdate:modelValue":t[2]||(t[2]=e=>l.fontSizeUnit=e),onChange:t[3]||(t[3]=(...e)=>s.updateFontSize&&s.updateFontSize(...e))},[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(l.availableUnits,e=>((0,a.openBlock)(),(0,a.createElementBlock)("option",{value:e,key:e},(0,a.toDisplayString)(e),9,$o))),128))],544),[[a.vModelSelect,l.fontSizeUnit]])])])])}],["__scopeId","data-v-f859e98c"]]),Io={class:"textwrap w100 tcenter"},To={class:"textwrap w100 tcenter"},Mo={key:0,style:{"min-width":"256px",height:"100%",display:"flex","justify-content":"center","align-items":"center"}},Fo={tweens:"move-up"},Lo={name:"ActionsLib",props:{selected:{type:Object},regbusy:!1,register:{type:Array}},data:()=>({current:null}),computed:{actions(){return this.$app.actions}},emits:["selectItem"],methods:{onAssetEdit(e,t){this.current[e],this.current[e]=t},getTypeIcon:e=>Fo[e],checkType:e=>typeof e,select(e){this.current=e,this.$emit("selectItem",e)},endEdit(){this.$refs.assetEditor.end()}}},Oo=(0,r.A)(Lo,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("spinner"),r=(0,a.resolveComponent)("queryform"),c=(0,a.resolveComponent)("Selectable"),d=(0,a.resolveDirective)("tooltip");return(0,a.openBlock)(),(0,a.createBlock)(a.Teleport,{to:".modal-content"},[(0,a.createVNode)(c,{onSelectItem:s.select,list:s.actions.library,selected:o.selected},(0,a.createSlots)({item:(0,a.withCtx)(({item:e})=>[(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("div",Io,[(0,a.createTextVNode)((0,a.toDisplayString)(e.component),1)])),[[d,e.component]]),(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("div",To,[(0,a.createTextVNode)((0,a.toDisplayString)(e.type),1)])),[[d,e.type]])]),_:2},[o.register?{name:"selected",fn:(0,a.withCtx)(({item:e})=>[o.regbusy?((0,a.openBlock)(),(0,a.createElementBlock)("div",Mo,[(0,a.createVNode)(i)])):((0,a.openBlock)(),(0,a.createBlock)(r,{key:1,values:o.register},null,8,["values"]))]),key:"0"}:void 0]),1032,["onSelectItem","list","selected"])])}]]),Po={class:"itemElement"},zo={class:"itemrow"},Uo={props:{item:{type:Object}}},_o=(0,r.A)(Uo,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",Po,[(0,a.createElementVNode)("div",zo,(0,a.toDisplayString)(o.item.name),1)])}]]),Ro={class:"container"},Ho={class:"list-container"},qo={class:"list-head"},Go={class:"list-slider"},Jo={class:"grid"},Ko=["onClick"],Yo={class:"grid-item"},Wo={class:"textwrap tcenter w100"},Xo={class:"textwrap w100"},Qo={style:{display:"flex","justify-content":"center"}},Zo={key:0,class:"extension"},ea={name:"ItemsLib",props:{selected:{type:Object},list:{type:Array},head:{type:Object,default:{}},styles:{type:Object,default:{item:{width:"72px",height:"72px"}}},icons:{type:Object,default:{}},options:{type:Object,default:{id:"uid",name:"name",icon:"icon",icontip:"tooltip"}}},mounted(){this.$emit("open")}},ta=(0,r.A)(ea,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("icon"),r=(0,a.resolveDirective)("tooltip");return(0,a.openBlock)(),(0,a.createElementBlock)("div",Ro,[(0,a.createElementVNode)("div",Ho,[(0,a.createElementVNode)("div",qo,[(0,a.renderSlot)(e.$slots,"head",(0,a.normalizeProps)((0,a.guardReactiveProps)(o.head)),()=>[(0,a.createElementVNode)("div",null,(0,a.toDisplayString)(o.head.title),1)],!0)]),(0,a.createElementVNode)("div",Go,[(0,a.createElementVNode)("div",Jo,[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(o.list,(t,n)=>((0,a.openBlock)(),(0,a.createElementBlock)("div",{onClick:o=>e.$emit("selected",t),class:(0,a.normalizeClass)([{selected:o.selected===t},"grid-element"])},[(0,a.renderSlot)(e.$slots,"item",{item:t},()=>[(0,a.createElementVNode)("div",Yo,[(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("div",Wo,[(0,a.createTextVNode)((0,a.toDisplayString)(t[o.options.name]||t[o.options.id]),1)])),[[r,t[o.options.name]||t[o.options.id]]]),(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("div",Xo,[(0,a.createTextVNode)((0,a.toDisplayString)(t.url),1)])),[[r,t.url]]),(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("div",Qo,[(0,a.createVNode)(i,{value:o.icons[t.type],size:"2em"},null,8,["value"])])),[[r,t[o.options.icontip]]])])],!0)],10,Ko))),256))])])]),o.selected?((0,a.openBlock)(),(0,a.createElementBlock)("div",Zo,[(0,a.renderSlot)(e.$slots,"edit",{selected:o.selected},()=>[(0,a.createTextVNode)((0,a.toDisplayString)(e.$slots),1)],!0)])):(0,a.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-045cf3e6"]]),oa={class:"form-container"},aa={class:"form-column"},na={class:"row"},la={class:"rowvalue"},sa={key:0},ia=["value"],ra={key:0,class:"row"},ca={class:"rowvalue"},da=["value"],pa={key:1},ua={class:"row"},ma={class:"rowvalue"},ha={key:1,class:"row"},va={class:"rowvalue"},ga={key:3},ya={key:0},fa={name:"ActionEdit",data:()=>({selectedGroup:null}),props:{selected:{type:Object},progress:{type:Number}},computed:{types(){return this.$app.actions.library.filter(e=>e.type===this.selectedGroup)},groups(){return this.$app.actions.groups},selectedType(){return this.$app.actions.library.find(e=>e.component===this.selected.type)},selectType:{get(){return this.selected.type},set(e){this.$emit("change:type",e)}}},methods:{onUpdate(e,t){this.$emit("edit",e,t)},end(){this.$emit("edit","name",this.$refs.nameeditor.endEdit()),this.$emit("edit","url",this.$refs.urleditor.endEdit())}},mounted(){this.selectedGroup=this.selected.group}},ka=(0,r.A)(fa,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("LabelEdit");return(0,a.openBlock)(),(0,a.createElementBlock)("div",oa,[(0,a.createElementVNode)("div",aa,[(0,a.createElementVNode)("div",na,[t[3]||(t[3]=(0,a.createElementVNode)("div",{class:"rowlabel"},"Group:",-1)),(0,a.createElementVNode)("div",la,[o.selected.uid?((0,a.openBlock)(),(0,a.createElementBlock)("div",sa,(0,a.toDisplayString)(o.selected.group),1)):(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("select",{key:1,"onUpdate:modelValue":t[0]||(t[0]=e=>l.selectedGroup=e)},[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(s.groups,(e,t)=>((0,a.openBlock)(),(0,a.createElementBlock)("option",{key:t,value:e},(0,a.toDisplayString)(e),9,ia))),128))],512)),[[a.vModelSelect,l.selectedGroup]])])]),l.selectedGroup?((0,a.openBlock)(),(0,a.createElementBlock)("div",ra,[t[4]||(t[4]=(0,a.createElementVNode)("div",{class:"rowlabel"},"Type:",-1)),(0,a.createElementVNode)("div",ca,[o.selected.uid?((0,a.openBlock)(),(0,a.createElementBlock)("div",pa,(0,a.toDisplayString)(s.selectedType.name),1)):(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("select",{key:0,"onUpdate:modelValue":t[1]||(t[1]=e=>s.selectType=e)},[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(s.types,(e,t)=>((0,a.openBlock)(),(0,a.createElementBlock)("option",{key:t,value:e.component},(0,a.toDisplayString)(e.name),9,da))),128))],512)),[[a.vModelSelect,s.selectType]])])])):(0,a.createCommentVNode)("v-if",!0),(0,a.createElementVNode)("div",ua,[t[5]||(t[5]=(0,a.createElementVNode)("div",{class:"rowlabel"},"Name:",-1)),(0,a.createElementVNode)("div",ma,[(0,a.createVNode)(i,{style:{width:"100%"},ref:"nameeditor","onUpdate:modelValue":t[2]||(t[2]=t=>e.$emit("edit","name",t)),modelValue:o.selected.name},null,8,["modelValue"])])]),o.selected.description?((0,a.openBlock)(),(0,a.createElementBlock)("div",ha,[t[6]||(t[6]=(0,a.createElementVNode)("div",{class:"rowlabel"},"Description:",-1)),(0,a.createElementVNode)("div",va,(0,a.toDisplayString)(o.selected.description),1)])):(0,a.createCommentVNode)("v-if",!0),o.selected.type?((0,a.openBlock)(),(0,a.createBlock)((0,a.resolveDynamicComponent)(o.selected.type),(0,a.mergeProps)({key:2},o.selected,{onUpdate:s.onUpdate}),null,16,["onUpdate"])):((0,a.openBlock)(),(0,a.createElementBlock)("div",ga," You need to save before editing "))]),o.progress>0?((0,a.openBlock)(),(0,a.createElementBlock)("div",ya,(0,a.toDisplayString)(o.progress),1)):(0,a.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-25cdeb34"]]),ba={class:"pitem"},Va={class:"textwrap w100 tcenter"},Ea={style:{display:"flex","justify-content":"center"},class:"tcenter"},wa={props:{item:{type:Object}},computed:{date(){return new Date(this.item.created).toLocaleString()}}},Na=(0,r.A)(wa,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveDirective)("tooltip");return(0,a.openBlock)(),(0,a.createElementBlock)("div",ba,[(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("div",Va,[(0,a.createTextVNode)((0,a.toDisplayString)(o.item.name),1)])),[[i,o.item.name]]),(0,a.createElementVNode)("div",Ea,(0,a.toDisplayString)(s.date),1)])}],["__scopeId","data-v-a84bc2fe"]]),Ba={class:"container"},Ca={class:"block"},xa={class:"label"},Sa={class:"value"},Aa={data:()=>({result:""}),props:{text:{type:String}},emits:["update:text"]},$a=(0,r.A)(Aa,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",Ba,[(0,a.createElementVNode)("div",Ca,[(0,a.createElementVNode)("div",xa,(0,a.toDisplayString)(o.text),1),(0,a.createElementVNode)("div",Sa,[(0,a.withDirectives)((0,a.createElementVNode)("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>l.result=e),onInput:t[1]||(t[1]=t=>e.$emit("update:text",l.result))},null,544),[[a.vModelText,l.result]])])])])}],["__scopeId","data-v-7a7463f6"]]),Da={class:"container"},ja={class:"block"},Ia={class:"label"},Ta={data:()=>({result:""}),props:{text:{type:String}}},Ma=(0,r.A)(Ta,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",Da,[(0,a.createElementVNode)("div",ja,[(0,a.createElementVNode)("div",Ia,(0,a.toDisplayString)(o.text),1)])])}],["__scopeId","data-v-11e695e2"]]);var Fa=o(320),La=o.n(Fa);const Oa={class:"form-group"},Pa=["disabled"],za={key:0,class:"form-group"},Ua=["disabled"],_a={key:1,class:"form-group"},Ra=["disabled"],Ha={key:2,class:"form-group"},qa=["disabled"],Ga=["disabled"],Ja={class:"form-actions"},Ka=["disabled"],Ya=["disabled"],Wa={key:3,class:"helper-actions"},Xa={key:4,class:"info-message"},Qa={key:5,class:"error-message"},Za={__name:"auth",emits:["success"],setup(e,{emit:t}){const o=La().default||La(),n=t,l=(0,a.ref)("login"),s=(0,a.ref)(!1),i=(0,a.ref)(""),r=(0,a.ref)(""),c=(0,a.reactive)({email:"",password:"",code:"",newPassword:"",confirmPassword:""}),d=(0,a.computed)(()=>{switch(l.value){case"login":return"Login";case"recover":return"Отправить код";case"verify":return"Подтвердить код";case"reset":return"Установить пароль"}}),p=(0,a.computed)(()=>"login"===l.value?"Cancel":"Назад"),u=(0,a.computed)(()=>{switch(l.value){case"login":return"Вход...";case"recover":return"Отправка...";case"verify":return"Проверка...";case"reset":return"Сохранение..."}});function m(){v(),l.value="recover",c.password="",c.code="",c.newPassword="",c.confirmPassword=""}function h(){v(),"login"===l.value?(c.email="",c.password=""):(l.value="login",c.code="",c.newPassword="",c.confirmPassword="")}function v(){i.value="",r.value=""}async function g(){if(v(),c.email)try{if(s.value=!0,"login"===l.value){const e=await fetch("/auth/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:c.email,password:c.password})});if(!e.ok)throw await y(e);const t=await e.json();n("success",t)}else if("recover"===l.value){const e=await fetch("/auth/recovery",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:c.email})});if(!e.ok)throw await y(e);r.value="Код отправлен на указанный email",l.value="verify"}else if("verify"===l.value){if(!c.code)return void(i.value="Код обязателен");const e=await fetch("/auth/check",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:c.email,code:c.code})});if(!e.ok)throw await y(e);r.value="Код подтверждён. Введите новый пароль.",l.value="reset"}else if("reset"===l.value){if(!c.newPassword||!c.confirmPassword)return void(i.value="Заполните оба поля пароля");if(c.newPassword!==c.confirmPassword)return void(i.value="Пароли не совпадают");console.log(c.newPassword),await o.app.setPassword(c.newPassword),r.value="Пароль изменён.",l.value="login",c.password="",c.newPassword="",c.confirmPassword="",c.code=""}}catch(e){i.value="string"==typeof e?e:e?.message||"Ошибка сервера"}finally{s.value=!1}else i.value="Email обязателен"}async function y(e){try{const t=await e.json();return t?.message||t?.error||`HTTP ${e.status}`}catch{return`HTTP ${e.status}`}}return(e,t)=>((0,a.openBlock)(),(0,a.createElementBlock)("form",{onSubmit:(0,a.withModifiers)(g,["prevent"]),class:"login-form"},[(0,a.createElementVNode)("div",Oa,[t[5]||(t[5]=(0,a.createElementVNode)("label",{for:"email"},"Email:",-1)),(0,a.withDirectives)((0,a.createElementVNode)("input",{id:"email",type:"email","onUpdate:modelValue":t[0]||(t[0]=e=>c.email=e),required:"",placeholder:"Введите email",disabled:s.value},null,8,Pa),[[a.vModelText,c.email]])]),(0,a.createCommentVNode)(" LOGIN: email + password "),"login"===l.value?((0,a.openBlock)(),(0,a.createElementBlock)("div",za,[t[6]||(t[6]=(0,a.createElementVNode)("label",{for:"password"},"Пароль:",-1)),(0,a.withDirectives)((0,a.createElementVNode)("input",{id:"password",type:"password","onUpdate:modelValue":t[1]||(t[1]=e=>c.password=e),required:"",placeholder:"Введите пароль",disabled:s.value},null,8,Ua),[[a.vModelText,c.password]])])):(0,a.createCommentVNode)("v-if",!0),(0,a.createCommentVNode)(" VERIFY CODE "),"verify"===l.value?((0,a.openBlock)(),(0,a.createElementBlock)("div",_a,[t[7]||(t[7]=(0,a.createElementVNode)("label",{for:"code"},"Код из письма:",-1)),(0,a.withDirectives)((0,a.createElementVNode)("input",{id:"code",type:"text","onUpdate:modelValue":t[2]||(t[2]=e=>c.code=e),required:"",placeholder:"Введите код",disabled:s.value},null,8,Ra),[[a.vModelText,c.code]])])):(0,a.createCommentVNode)("v-if",!0),(0,a.createCommentVNode)(" RESET PASSWORD "),"reset"===l.value?((0,a.openBlock)(),(0,a.createElementBlock)("div",Ha,[t[8]||(t[8]=(0,a.createElementVNode)("label",{for:"newPassword"},"Новый пароль:",-1)),(0,a.withDirectives)((0,a.createElementVNode)("input",{id:"newPassword",type:"password","onUpdate:modelValue":t[3]||(t[3]=e=>c.newPassword=e),required:"",placeholder:"Введите новый пароль",disabled:s.value},null,8,qa),[[a.vModelText,c.newPassword]]),t[9]||(t[9]=(0,a.createElementVNode)("label",{for:"confirmPassword",style:{"margin-top":"8px"}},"Повтор пароля:",-1)),(0,a.withDirectives)((0,a.createElementVNode)("input",{id:"confirmPassword",type:"password","onUpdate:modelValue":t[4]||(t[4]=e=>c.confirmPassword=e),required:"",placeholder:"Повторите пароль",disabled:s.value},null,8,Ga),[[a.vModelText,c.confirmPassword]])])):(0,a.createCommentVNode)("v-if",!0),(0,a.createElementVNode)("div",Ja,[(0,a.createElementVNode)("button",{type:"submit",disabled:s.value},(0,a.toDisplayString)(s.value?u.value:d.value),9,Ka),(0,a.createCommentVNode)(" Cancel / Back "),(0,a.createElementVNode)("button",{type:"button",onClick:h,disabled:s.value},(0,a.toDisplayString)(p.value),9,Ya)]),"login"===l.value?((0,a.openBlock)(),(0,a.createElementBlock)("div",Wa,[(0,a.createElementVNode)("a",{href:"#",onClick:(0,a.withModifiers)(m,["prevent"])},"Забыли пароль?")])):(0,a.createCommentVNode)("v-if",!0),r.value?((0,a.openBlock)(),(0,a.createElementBlock)("div",Xa,(0,a.toDisplayString)(r.value),1)):(0,a.createCommentVNode)("v-if",!0),i.value?((0,a.openBlock)(),(0,a.createElementBlock)("div",Qa,(0,a.toDisplayString)(i.value),1)):(0,a.createCommentVNode)("v-if",!0)],32))}},en=(0,r.A)(Za,[["__scopeId","data-v-867ec93e"]]);var tn=o(431)},546:(e,t,o)=>{o.d(t,{A:()=>k});var a=o(15);const n=["draggable","droppable"],l={class:"roottree"},s=["draggable"],i={class:"tree-node-content"},r={class:"selector"},c=["checked"],d={key:0,class:"prepender"},p=["title"],u={key:1,class:"appender"},m={key:0,class:"children"},h={key:1};function v(e,t){for(let o=0;o<e.length;o++)e[o].isSelected=t,e[o].children&&v(e[o].children,t)}const g={name:"TreeNode",props:{node:{type:Object,required:!0},selector:{type:Boolean,default:!0},index:{type:Number},focused:{type:Boolean,default:!1},childsFiled:{type:String,default:"childrens"},filter:{type:Function},draggable:{type:Boolean,default:!0},droppable:{type:Boolean,default:!0}},computed:{list(){return this.filter?this.filter(this.node[this.childsFiled]):this.node[this.childsFiled]}},data:()=>({expanded:{},childloaded:{},isLoading:!1,selectChangeEvent:(0,a.inject)("selectChangeEvent",null),clickNodeEvent:(0,a.inject)("clickNodeEvent",null),dropNodeEvent:(0,a.inject)("nodeDropEvent",null),isDragOver:!1}),methods:{onDragStart(e){this.$app.app.draggedNode=this.node,e.dataTransfer.effectAllowed="copy"},onDragOver(e){e.dataTransfer.dropEffect="copy",this.isDragOver=!0},onDragEnter(e){this.isDragOver=!0,!this.expanded[this.node.uid]&&this.node[this.childsFiled]?.length&&this.toggleExpand()},onDragLeave(){this.isDragOver=!1},onDrop(e){this.isDragOver=!1,this.dropNodeEvent({target:this.node,source:this.$app.app.draggedNode})},async toggleExpand(){this.node[this.childsFiled]&&0!==this.node[this.childsFiled].length&&(this.expanded[this.node.uid]=!this.expanded[this.node.uid],this.expanded[this.node.uid]&&!this.childloaded[this.node.uid]&&await this.loadChildren(),this.$emit("updateExpanded",this.node))},async loadChildren(){this.childloaded[this.node.uid]=!0},onChildSelectChange(e){},onCheckboxChange(e){e.isSelected=!e.isSelected,e[this.childsFiled]?.length&&v(e[this.childsFiled],e.isSelected),this.selectChangeEvent(this.node),this.$emit("changeSelection",this.node)},selectNode(e){this.clickNodeEvent(this.node)}}};var y=o(262);const f={components:{TreeNode:(0,y.A)(g,[["render",function(e,t,o,n,l,v){const g=(0,a.resolveComponent)("TreeNode",!0);return(0,a.openBlock)(),(0,a.createElementBlock)("li",{class:(0,a.normalizeClass)(["tree-node",{"drag-over":l.isDragOver}]),draggable:o.draggable,onDragstart:t[3]||(t[3]=(0,a.withModifiers)(e=>o.draggable&&v.onDragStart(e),["stop"])),onDragover:t[4]||(t[4]=(0,a.withModifiers)((...e)=>v.onDragOver&&v.onDragOver(...e),["prevent"])),onDragenter:t[5]||(t[5]=(0,a.withModifiers)((...e)=>v.onDragEnter&&v.onDragEnter(...e),["prevent"])),onDragleave:t[6]||(t[6]=(...e)=>v.onDragLeave&&v.onDragLeave(...e)),onDrop:t[7]||(t[7]=(0,a.withModifiers)((...e)=>v.onDrop&&v.onDrop(...e),["prevent","stop"]))},[(0,a.createElementVNode)("div",i,[(0,a.createElementVNode)("span",{class:"collapser",onClick:t[0]||(t[0]=(...e)=>v.toggleExpand&&v.toggleExpand(...e))},[v.list?.length?(0,a.renderSlot)(e.$slots,"icon",{key:0,node:o.node},()=>[(0,a.createTextVNode)((0,a.toDisplayString)(l.expanded[o.node.uid]?"▼":"▶"),1)],!0):(0,a.createCommentVNode)("v-if",!0)]),(0,a.createElementVNode)("span",r,[o.selector?(0,a.renderSlot)(e.$slots,"checkbox",{key:0},()=>[(0,a.createElementVNode)("input",{ref:"checkedInput",type:"checkbox",onChange:t[1]||(t[1]=e=>v.onCheckboxChange(o.node)),checked:o.node.isSelected},null,40,c)],!0):(0,a.createCommentVNode)("v-if",!0)]),e.$slots.prepend?((0,a.openBlock)(),(0,a.createElementBlock)("span",d,[(0,a.renderSlot)(e.$slots,"prepend",{node:o.node},void 0,!0)])):(0,a.createCommentVNode)("v-if",!0),(0,a.createElementVNode)("span",{class:"labeler",title:o.node.uid,onClick:t[2]||(t[2]=(...e)=>v.selectNode&&v.selectNode(...e))},[(0,a.renderSlot)(e.$slots,"label",{node:o.node},()=>[(0,a.createElementVNode)("span",null,(0,a.toDisplayString)(o.node.uid)+"|",1)],!0)],8,p),e.$slots.append?((0,a.openBlock)(),(0,a.createElementBlock)("span",u,[(0,a.renderSlot)(e.$slots,"append",{node:o.node,index:o.index},void 0,!0)])):(0,a.createCommentVNode)("v-if",!0)]),l.expanded[o.node.uid]&&Array.isArray(v.list)&&v.list.length?((0,a.openBlock)(),(0,a.createElementBlock)("ul",m,[l.childloaded[o.node.uid]?((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,{key:0},(0,a.renderList)(v.list,t=>((0,a.openBlock)(),(0,a.createBlock)(g,{draggable:o.draggable,onChangeSelection:v.onChildSelectChange,filter:o.filter,selector:o.selector,focused:t.focused,key:t.uid,node:t,childsFiled:o.childsFiled},(0,a.createSlots)({_:2},[(0,a.renderList)(e.$slots,(t,o)=>({name:o,fn:(0,a.withCtx)(t=>[(0,a.renderSlot)(e.$slots,o,(0,a.mergeProps)({ref_for:!0},t),void 0,!0)])}))]),1032,["draggable","onChangeSelection","filter","selector","focused","node","childsFiled"]))),128)):((0,a.openBlock)(),(0,a.createElementBlock)("div",h," load... "))])):(0,a.createCommentVNode)("v-if",!0)],42,s)}],["__scopeId","data-v-ec22d48c"]])},computed:{list(){return this.filter?this.filter(this.tree):this.tree}},data:()=>({expandeds:{},isDragOver:!1}),props:{tree:{type:Array,required:!0},selector:{type:Boolean,default:!1},focused:{type:Boolean,default:!1},childsFiled:{type:String,default:"children"},filter:{type:Function},draggable:{type:Boolean,default:!1},droppable:{type:Boolean,default:!1}},setup(e,{slots:t,emit:o}){(0,a.provide)("clickNodeEvent",e=>{o("clickNode",e)}),(0,a.provide)("selectChangeEvent",e=>{o("changeSelect",e)}),(0,a.provide)("nodeDropEvent",e=>{o("node-drop",e)})},methods:{onDragOver(e){e.dataTransfer.dropEffect="copy",this.isDragOver=!0},onDragEnter(e){this.isDragOver=!0},onDragLeave(){this.isDragOver=!1},onDrop(e){this.isDragOver=!1,this.$app?.app?.draggedNode&&(console.log(this.$app?.app?.draggedNode),this.$emit("node-drop",{target:null,source:this.$app.app.draggedNode}))},onUpdateExpanded(e){},findNodeByUid(e,t){for(let o of e){if(o.uid===t)return o;if(o.children){let e=this.findNodeByUid(o.children,t);if(e)return e}}return null},removeNodeFromTree(e,t){for(let o=0;o<e.length;o++){if(e[o].uid===t)return e.splice(o,1),!0;if(e[o][this.childsFiled]&&this.removeNodeFromTree(e[o][this.childsFiled],t))return!0}return!1}}},k=(0,y.A)(f,[["render",function(e,t,o,s,i,r){const c=(0,a.resolveComponent)("TreeNode");return(0,a.openBlock)(),(0,a.createElementBlock)("div",{class:(0,a.normalizeClass)(["treecontainer",{"drag-over":i.isDragOver}]),draggable:o.draggable,droppable:o.droppable,onDrop:t[0]||(t[0]=(0,a.withModifiers)((...e)=>r.onDrop&&r.onDrop(...e),["prevent","stop"])),onDragover:t[1]||(t[1]=(0,a.withModifiers)((...e)=>r.onDragOver&&r.onDragOver(...e),["prevent"])),onDragenter:t[2]||(t[2]=(0,a.withModifiers)((...e)=>r.onDragEnter&&r.onDragEnter(...e),["prevent"])),onDragleave:t[3]||(t[3]=(...e)=>r.onDragLeave&&r.onDragLeave(...e))},[(0,a.createElementVNode)("ul",l,[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(r.list,(t,n)=>((0,a.openBlock)(),(0,a.createBlock)(c,{key:t.uid,filter:o.filter,selector:o.selector,node:t,index:n,focused:o.focused,childsFiled:o.childsFiled,onUpdateExpanded:r.onUpdateExpanded,draggable:o.draggable,droppable:o.droppable},(0,a.createSlots)({_:2},[(0,a.renderList)(e.$slots,(t,o)=>({name:o,fn:(0,a.withCtx)(t=>[(0,a.renderSlot)(e.$slots,o,(0,a.mergeProps)({ref_for:!0},t),void 0,!0)])}))]),1032,["filter","selector","node","index","focused","childsFiled","onUpdateExpanded","draggable","droppable"]))),128))])],42,n)}],["__scopeId","data-v-48ce72d0"]])},585:(e,t,o)=>{o.r(t),o.d(t,{actions:()=>ze,app:()=>Pt,assets:()=>Mt,engine:()=>ue,inspector:()=>Gt,menu:()=>Qt,modal:()=>v,modules:()=>C,project:()=>Q,projects:()=>so,selection:()=>ro,slides:()=>se,storage:()=>mo,templates:()=>Uo,toasts:()=>u,ui:()=>qo});var a=o(15),n=o(454),l=o(320),s=o(196),i=o(859),r=o(311);const c=l.default||l;let d=0;const p=(0,a.reactive)({list:[],add({message:e,icon:t,onclick:o,timehide:n=!0,type:l,...s},r=(0,a.markRaw)(i.A)){const c=(0,a.reactive)({id:d++,data:{message:e,icon:t,type:l,...s},component:r});return n&&(c.timeout=setTimeout(()=>{p.remove(c.id)},3e3)),c.onclick=o||p.remove.bind(this,c.id),p.list.push(c),c},remove(e){for(let t=p.list.length-1;t>=0;t--)p.list[t].id===e&&p.list.splice(t,1)}});c.On("init",()=>{window.vue.component("QueryToast",r.A)});const u=p,m=(0,a.ref)(!1),h=(0,a.reactive)({isVisible:!1,header:null,content:null,footer:null,values:null,open({header:e,content:t,footer:o,...a}){h.header=e||{},h.content=t||{},h.footer=o||{},h.values={closable:!1,...a},m.value=!0},close(e){e||(m.value=!1)},get isVisible(){return m.value},queryText(e,t,o){h.open({header:{value:e.title,handler:h.close},content:{component:"queryform",props:e,events:{"update:text":o}},footer:{buttons:[...t.map(t=>(t.handler=()=>{t.callback(e.answer),h.close()},t)),{label:"Закрыть",class:"additional",handler:h.close}]}})},confirmReq(e,t){h.open({header:{value:e.title,handler:h.close},content:{component:"confirmform",props:e},footer:{buttons:[...t.map(t=>(t.handler=()=>{t.callback(e.answer),h.close()},t))]}})}}),v=h,g=l.default||l;class y extends Error{constructor(){super("Not all required parameters are specified."),this.isReqError=!0}}class f extends Error{constructor(){super("This module has already been added."),this.isExistError=!0}}const k=[{name:"engine",entry:"/editor/engine/mf.js",index:"engine",system:!0},{name:"tools",entry:"/mods/tools/mf.js",index:"tools",system:!0}],b=[],V=[{uid:"gsap:/mods/gsap/mf.js",title:"GSAP Animation",description:'<p>The module provides element transformations: movement, rotation, and scale.</p>\n        <p>Use GSAP:</p>\n        <p><a href="https://github.com/greensock/GSAP" target="blank">https://github.com/greensock/GSAP</a></p>',name:"gsapmod",entry:"/mods/gsap/mf.js",index:"gsap",global:!0},{uid:"troika:/mods/troika/mf.js",title:"Troika Text",description:'<p>Module  provides high quality text rendering in Three.js scenes, using signed distance fields (SDF) and antialiasing using standard derivatives.</p>\n        <p>Use Troika Text for Three.js:</p>\n        <p><a href="https://github.com/protectwise/troika/tree/main/packages/troika-three-text" target="blank">https://github.com/protectwise/troika/tree/main/packages/troika-three-text</a></p>',name:"troika",entry:"/mods/troika/mf.js",index:"troika",global:!0},{uid:"textmesh:/mods/textmesh/mf.js",title:"Text Mesh",description:'<p>Module use small library for building VR user interfaces. The objects it creates are three.object3Ds, usable directly in a three.js scene like any other Object3D.</p>\n        <p>Use three-mesh-ui:</p>\n        <p><a href="https://github.com/felixmariotto/three-mesh-ui" target="blank">https://github.com/felixmariotto/three-mesh-ui</a></p>',name:"textmesh",entry:"/mods/textmesh/mf.js",index:"textmesh",global:!0},{uid:"particle:/mods/particle/mf.js",title:"Particles",description:"<p>Particle system </p>",name:"particle",entry:"/mods/particle/mf.js",index:"particle",global:!0}],E={};async function w(e){if(e.uid=`${e.index}:${e.entry}`,!e.name?.length||!e.index?.length||!e.entry?.length)throw new y;if(b.find(t=>t.uid===e.uid))throw new f;try{(0,s.registerRemotes)([{...e}]),await(0,s.loadRemote)(`${e.name}/${e.index}`)}catch(e){throw e}const t=await async function(e){const t={id:e.entry,...e};return await n.A.upsertItemProperties("modules",t.uid,t),t}(e);return b.push(t),t}function N(){const e=(0,a.reactive)({selected:null,list:b,processed:!1,styles:{item:{width:"128px",height:"128px"}},title:"Project modules"}),t={label:"Add",class:"secondary",hidden:(0,a.computed)(()=>!e.selected||e.selected.uid||e.processed),handler:async()=>{e.processed=!0;try{e.selected=await w(e.selected)}catch(t){return t.isReqError?u.add({message:"Not all required fields are filled in"}):u.add({message:"Error adding module"}),void(e.processed=!1)}u.add({message:"The module has been loaded successfully."})}},o={label:"Registration",class:"secondary",hidden:(0,a.computed)(()=>e.selected&&!e.selected.uid),handler:()=>{e.selected=(0,a.reactive)({name:"",entry:"",index:""})}},l={label:"Cancel",class:"primary",hidden:(0,a.computed)(()=>!e.selected),handler:()=>{e.selected=null}},s={label:"Remove",class:"additional",hidden:(0,a.computed)(()=>!e.selected?.id),handler:()=>{console.log(e.selected);const t=`${e.selected.index}:${e.selected.entry}`,o=b.findIndex(e=>`${e.index}:${e.entry}`===t);if(o>=0){const t=b.splice(o,1);g.toasts.add({message:"The module has been removed and will not be loaded the next time you use it.\nPlease refresh the page to take effect."}),e.selected=null,n.A.deleteItem("modules",t[0].index)}}},i={label:"Close",class:"primary",handler:async()=>{v.close()}},r=(0,a.reactive)([o,s,t,l,i]);v.open({header:{value:"Managing modules",handler:()=>{v.close()}},content:{component:"ItemsLib",props:e,events:{selected:t=>{e.selected=t,console.log(e.selected)}},slots:{item:{component:"ModuleItem"},edit:{component:"ModuleEdit",props:e,events:{edit:(t,o)=>{e.selected[t]=o}}}}},footer:{buttons:r}})}const B=(0,a.reactive)({init:async function(){(0,s.createInstance)({name:"slider.editor",remotes:[]}),b.length=0,await(0,s.registerRemotes)([...k]),await Promise.all(k.map(e=>new Promise(t=>{(0,s.loadRemote)(`${e.name}/${e.index}`).then(o=>{E[e.name]=o,t()})})))},showLib:N,getMod:function(e){return E[e]},loadUserModules:async function(e){await(0,s.registerRemotes)(e);const t=e.map(e=>new Promise(t=>{(0,s.loadRemote)(`${e.name}/${e.index}`).then(o=>{b.push({name:e.name,index:e.index,entry:e.entry,title:e.title||e.name,id:e.id,uid:e.uid,global:e.global,description:e.description}),t()})}));await Promise.all(t),console.log(`UserModules loaded ${t.length}`)},AddModules:async function(e){for(let t=0;t<e.length;t++){const o=e[t];try{await w(o)}catch(e){continue}}}});g.On("init",()=>{g.menu.hierarhy.list.push({icon:"books",tooltip:"Modules",handler:N}),window.vue.component("ModuleEdit",(0,a.defineAsyncComponent)(async()=>{const e=await o.e(232).then(o.bind(o,232));return e.default||e})),window.vue.component("ModuleItem",(0,a.defineAsyncComponent)(async()=>{const e=await o.e(920).then(o.bind(o,920));return e.default||e})),window.vue.component("ModuleView",(0,a.defineAsyncComponent)(async()=>{const e=await o.e(833).then(o.bind(o,833));return e.default||e})),g.menu.addMenu("app",{path:"app.list.libraries",icon:"",text:"Libraries",link:"#",children:[{path:"app.list.libraries.modules",icon:"books",text:"Modules",handler:async()=>{!function(){const e=(0,a.reactive)({selected:null,list:V,processed:!1,canadd:!1,styles:{item:{width:"128px",height:"128px"}},head:{title:""}}),t={label:"Add to project",class:"secondary",hidden:(0,a.computed)(()=>e.processed||!e.selected||!e.canadd),handler:async()=>{e.processed=!0,e.canadd=-1===b.findIndex(t=>t.uid===e.selected.uid);try{await w({...e.selected})}catch(t){return t.isExistError?u.add({message:t.message}):u.add({message:"Error adding module"}),void(e.processed=!1)}u.add({message:"The module has been added to project."})}},o={label:"Close",class:"primary",handler:async()=>{v.close()}},n=(0,a.reactive)([t,o]);v.open({header:{value:"Global modules",handler:()=>{v.close()}},content:{component:"ItemsLib",props:e,events:{selected:t=>{e.selected=t,e.canadd=-1===b.findIndex(t=>t.uid===e.selected.uid),console.log(e.selected,e.canadd)}},slots:{head:{component:"SearchFilter"},item:{component:"ModuleItem"},edit:{component:"ModuleView",props:e}}},footer:{buttons:n}})}()}}]})});const C=B;var x=o(351),S=o(338),A=o(216);const $={class:"importer"},D={class:"row"},j={class:"row"},I={class:"label"},T={class:"row"},M={class:"label"},F={class:"row"},L={class:"label"},O={class:"row"},P={class:"label"};var z=o(546);const U={name:"Importer",data:()=>({merge:!1,assets:new Set,models:new Set,slides:new Set,modules:new Set}),methods:{onChangeElements(e){e.isSelected?this.models.add(e.path):this.models.delete(e.path),this.$emit("changelist",{assets:this.assets,models:this.models,slides:this.slides,modules:this.modules})},onChangeModules(e){e.isSelected?this.modules.add(e.name):this.modules.delete(e.name),this.$emit("changelist",{assets:this.assets,models:this.models,slides:this.slides,modules:this.modules})},onChangeSlides(e){e.isSelected?this.slides.add(e.uid):this.slides.delete(e.uid),this.$emit("changelist",{assets:this.assets,models:this.models,slides:this.slides,modules:this.modules})},onChangeAssets(e){e.isgroup?e.isSelected?e.children.map(e=>this.assets.add(e.uid)):this.assets.clear():e.isSelected?this.assets.add(e.uid):this.assets.delete(e.uid),this.$emit("changelist",{assets:this.assets,models:this.models,slides:this.slides,modules:this.modules})}},props:{project:{type:Object}},components:{TreeView:z.A},computed:{assetsTree(){return this.project.assets.reduce((e,t)=>{let o=e.find(e=>e.type===t.type);return o||(o={isgroup:!0,type:t.type,children:[],uid:t.type},e.push(o)),o.children.push(t),e},[])}}};var _=o(262);const R=(0,_.A)(U,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("TreeView");return(0,a.openBlock)(),(0,a.createElementBlock)("div",$,[(0,a.createElementVNode)("div",D,[(0,a.createElementVNode)("div",null,[t[2]||(t[2]=(0,a.createTextVNode)("Импортировать в текущий проект ",-1)),(0,a.withDirectives)((0,a.createElementVNode)("input",{type:"checkbox",onChange:t[0]||(t[0]=t=>e.$emit("options",{merge:l.merge})),"onUpdate:modelValue":t[1]||(t[1]=e=>l.merge=e)},null,544),[[a.vModelCheckbox,l.merge]])])]),(0,a.createElementVNode)("div",j,[t[3]||(t[3]=(0,a.createElementVNode)("div",{class:"title"},"Assets",-1)),(0,a.createElementVNode)("div",null,[(0,a.createVNode)(i,{childsFiled:"children",tree:s.assetsTree,onChangeSelect:s.onChangeAssets},{label:(0,a.withCtx)(({node:e})=>[(0,a.createElementVNode)("div",I,(0,a.toDisplayString)(e.name||e.uid),1)]),_:1},8,["tree","onChangeSelect"])])]),(0,a.createElementVNode)("div",T,[t[4]||(t[4]=(0,a.createElementVNode)("div",{class:"title"},"Модули",-1)),(0,a.createElementVNode)("div",null,[(0,a.createVNode)(i,{childsFiled:"childrenz",tree:o.project.modules,onChangeSelect:s.onChangeModules},{label:(0,a.withCtx)(({node:e})=>[(0,a.createElementVNode)("div",M,(0,a.toDisplayString)(e.name||e.uid),1)]),_:1},8,["tree","onChangeSelect"])])]),(0,a.createElementVNode)("div",F,[t[5]||(t[5]=(0,a.createElementVNode)("div",{class:"title"},"Элементы",-1)),(0,a.createElementVNode)("div",null,[(0,a.createVNode)(i,{childsFiled:"childrenz",tree:o.project.models,onChangeSelect:s.onChangeElements},{label:(0,a.withCtx)(({node:e})=>[(0,a.createElementVNode)("div",L,(0,a.toDisplayString)(e.name||e.uid),1)]),_:1},8,["tree","onChangeSelect"])])]),(0,a.createElementVNode)("div",O,[t[6]||(t[6]=(0,a.createElementVNode)("div",{class:"title"},"Слайды",-1)),(0,a.createElementVNode)("div",null,[(0,a.createVNode)(i,{childsFiled:"childrenz",tree:o.project.slides,onChangeSelect:s.onChangeSlides},{label:(0,a.withCtx)(({node:e})=>[(0,a.createElementVNode)("div",P,(0,a.toDisplayString)(e.name||e.uid),1)]),_:1},8,["tree","onChangeSelect"])])])])}]]),H=l.default||l,q=new x.A;let G;async function J(e,t,o){if(!t)return;if(o[t.uid])return o[t.uid];const a=t.parent;let n=o[a];n||(n=await J(e,e.find(e=>e.uid===a),o));try{const e=await K(t,n);return o[e.uid]=e,e}catch(e){console.warn(e)}}async function K(e,t){const o=await G.BuildElement(e,t||H.engine.getManager().Root);if(!o)return;o.name=e.name||e.uid,o.states=e.states||{},o.properties=e.properties||{},o.actions=e.actions||[],o.paths=e.paths??o.paths,o.path=o.paths.join(".");const n=(0,a.reactive)(o);return(t||X).add(n),q.emit("create",n),n}async function Y(e){try{await n.A.upsertItemProperties("models",e.uid,JSON.parse((0,S.As)({name:e.name,paths:e.paths,path:e.paths.join("."),parent:e.parent?.uid||null,actions:e.actions||[],props:e.props||{},properties:e.properties||{},states:e.states,type:e.type,uid:e.uid,assets:e.assets||[]})))}catch(e){console.warn(e)}}function W(e,t,o=[]){for(let a=0;a<e.length;a++){const n=e[a];n.isElement&&n.states[t]&&o.push(n),n.children||console.warn("No child"),n.children.length&&W(n.children,t,o)}}const X=(0,a.reactive)({add(e){X.children.push(e)},uid:null,init:function(e){for(let t=0;t<e.length;t++){const o=e[t];X.data[o.uid]=o}X.info=X.data.info||{name:"Editor"}},info:{name:"Editor"},data:{},load:async function(e){G=H.engine.getFactory();const t={};for(let o=e.length-1;o>=0;o--){const a=e[o],n=await J(e,a,t),l=e.findIndex(e=>e.uid===n.uid);l>=0&&e.splice(l,1)}},findStates:function(e){const t=[];return W(X.children,e,t),t},getState:function(e,t){return e.states[t]||(e.states[t]={actions:[]},q.emit("stateadd",t,e.paths)),e.states[t]},remove:async function e(t){let o=X,a=X;for(let e=0;e<t.length;e++)o=a,a=o.children.find(o=>o.uid===t[e]);H.selection.selected===a&&H.selection.select(null);const l=o.children.findIndex(e=>e===a);if(l>=0){for(let t=0;t<a.children.length;t++){const o=a.children[t];o.isElement&&e(o.paths)}o.children.splice(l,1),a.parent&&a.parent.remove(a),n.A.deleteItem("models",a.uid),G.RemoveModel(a.uid),q.emit("remove",t,a)}},handleAsset:async function(e){if(H.slides.actived){if("model"===e.source.type){const t=`${e.source.name||e.source.uid}${Date.now()}`.replace(".","");console.log(e.source.resource);const o=await H.project.createElement({type:"Object3D",uid:t,parent:e.target?.uid,assets:[{uid:e.source.uid}],paths:[...e.target?.paths||[],t]},e.target);await H.project.save(o),H.selection.select(o)}}else H.toasts.add({message:"Необходимо создать слайд"})},addElement:async function(e){const t={name:"New Element",type:"Group"};let o;t.uid=`Element${Date.now()}`,t.paths=[],e&&e.isElement&&(o=e,t.paths.push(...e.paths)),t.paths.push(t.uid),t.path=t.paths.join("."),H.modal.open({header:{value:`Add ${o?" child element to "+o.name||0:" new element to scene"}`,handler:()=>{H.modal.close()}},content:{component:"ElementAdd",props:{parent:e,modelValue:t},events:{"update:modelValue":e=>{Object.keys(e).forEach(o=>{t[o]=e[o]})}}},footer:{buttons:[{label:"Add",class:"secondary",handler:async()=>{const e=await K(t,o);e&&await Y(e),H.modal.close()}},{label:"Cancel",class:"primary",handler:async()=>{H.modal.close()}}]}})},createElement:K,save:Y,find:function(e){let t=X;for(let o=0;o<e.length;o++)t=t.children.find(t=>t.uid===e[o]);return t},findObjectsByType:function(e){const t=[];return function o(a){a instanceof e&&t.push(a.data),a.children&&Array.isArray(a.children)&&a.children.forEach(e=>o(e))}(X),t},exportToJson:async function(){const e=await n.A.exportToJson(X.uid),t=new Blob([JSON.stringify(e)],{type:"application/json"}),o=`project${X.uid}.json`;if(window.navigator.msSaveOrOpenBlob)window.navigator.msSaveBlob(t,o);else{const e=window.document.createElement("a");e.href=window.URL.createObjectURL(t),e.download=o,e.style="display: none",e.click()}},importProject:async function(){try{const e=await function(e=".json"){return new Promise(t=>{const o=document.createElement("input");o.type="file",o.accept=e,o.style.display="none",o.addEventListener("change",()=>{o.files&&o.files[0]&&t(o.files[0]),document.body.removeChild(o)}),document.body.appendChild(o),o.click()})}(),t=await function(e){return new Promise((t,o)=>{if(!e.name.endsWith(".json"))return void o(new Error("Выберите файл с расширением .json"));const a=new FileReader;a.onload=e=>{try{const o=JSON.parse(e.target.result);t(o)}catch(e){o(new Error("Ошибка парсинга JSON: "+e.message))}},a.onerror=()=>{o(new Error("Ошибка чтения файла"))},a.readAsText(e)})}(e);(0,a.reactive)({actions:{},assets:{},elements:{},slides:{},modules:{}}),await n.A.addItems("actions",t.actions),await n.A.addItems("assets",t.assets),await n.A.addItems("models",t.models),await n.A.addItems("slides",t.slides),await n.A.addItems("modules",t.modules),await n.A.addItems("project",t.project);const o=new URL(window.location.href);return window.location.href=o.toString(),t}catch(e){throw console.error("Ошибка:",e.message),e}},play:async function(e="data"){const t=await n.A.exportToJson(X.uid);console.log(t),t.project={ui:{slides:!0,fullscreen:!0}};let o=`../player?src=${e}`;"db"===e&&(o+=`&db=${X.uid}`);const a=window.open(o,"Player");if(a){if("data"===e){const e=async(o=0)=>{try{if(a.closed)return void console.error("Окно плеера было закрыто");a.postMessage({type:"INIT_DATA",payload:t},window.location.origin)}catch(t){console.error("Ошибка при отправке данных:",t),o<5&&setTimeout(()=>e(o+1),500*(o+1))}};setTimeout(e,3e3)}}else console.error("Не удалось открыть окно. Возможно, браузер заблокировал pop-up.")},children:[],on:q.on.bind(q),off:q.off.bind(q),options:{camera:{}}});H.On("init",()=>{window.vue.component("Importer",R),window.vue.component("ElementAdd",A.A),H.slides.on("change",e=>{W(X.children,e,[])}),H.slides.on("remove",e=>{const t=[];W(X.children,e,t);for(let o=0;o<t.length;o++)delete t[o].states[e]}),H.menu.addMenu("app",{path:"app.list.project",icon:"",text:"Project",link:"#",children:[{path:"app.list.project.create",icon:"file-empty",text:"Create",handler:async()=>{H.projects.create()}},{path:"app.list.project.open",icon:"menu",text:"Open",tooltip:"Open project",handler:()=>{H.projects.open()}},{path:"app.list.project.export",icon:"download",text:"Export",tooltip:"Export project",handler:()=>{H.project.exportToJson()}},{path:"app.list.project.import",icon:"upload",text:"Import",link:"#",tooltip:"Import project",handler:()=>{H.project.importProject()}},{path:"app.list.project.remove",icon:"bin",text:"Delete",handler:()=>{H.projects.remove()}}]})});const Q=X,Z=l.default||l,ee=new x.A;async function te(e){const t=e||le.actived,o={actions:t.actions,name:t.name,index:t.index,camera:t.camera,uid:t.uid,props:t.props,background:t.background,environment:t.environment},a=JSON.parse((0,S.As)(o));try{await n.A.upsertItemProperties("slides",o.uid,a)}catch(e){console.warn(e)}}function oe(e){const t=le.actived;le.actived="number"==typeof e?le.children[e]:le.children.find(t=>t.uid===e),le.actived&&(ee.emit("change",le.actived.uid),async function(e,t){let o=[],a=Q.findStates(e.uid);t&&(o=Q.findStates(t.uid),await async function(e,t,o){const a=[],n=[];for(let e=0;e<t.length;e++){const l=t[e];o.findIndex(e=>e.uid===l.uid)>=0?a.push(l):n.push(l)}const l=[...n,...a];await Promise.all([Z.engine.ActionsManager.Execute(l,"slide.out"),Z.engine.ActionsManager.Run(e.actions,e,"slide.out")]),await Z.engine.ActionsManager.Execute(n,"disable.on");for(let e=0;e<n.length;e++)ne(n[e])}(t,o,a)),await async function(e,t,o){const a=[],n=[];for(let e=0;e<t.length;e++){const l=t[e];o.findIndex(e=>e.uid===l.uid)>=0?n.push(l):a.push(l)}console.log("Slide In");try{if(e.camera?.path&&e.camera?.path!==Z.engine.getManager().Camera?.path){const t=e.camera.path.split("."),o=Q.find(t);Z.engine.getManager().SetCamera(o),o.updateProjectionMatrix()}console.log(e.background),e.background&&(e.background.isAsset?Z.engine.getManager().Scene.background=e.background.resource:Z.engine.getManager().Scene.background=e.background)}catch(e){console.warn(e.message)}const l=[...a,...n];await Promise.all([Z.engine.ActionsManager.Execute(l.map(t=>({...t.states[e.uid],model:t})),"slide.in.before"),Z.engine.ActionsManager.Run(e.actions,e,"slide.in.before")]),await Z.engine.ActionsManager.Execute(a,"enable.on"),await Promise.all([Z.engine.ActionsManager.Execute(l,"slide.in"),Z.engine.ActionsManager.Run(e.actions,e,"slide.in")]);const s=[];for(let t=0;t<l.length;t++)s.push(ae(l[t],e.uid));await Promise.all(s),await Promise.all([Z.engine.ActionsManager.Execute(l,"slide.in.after"),Z.engine.ActionsManager.Run(e.actions,e,"slide.in.after")])}(e,a,o)}(le.actived,t))}async function ae(e,t){const{position:o,rotation:a,scale:n,actions:l=[],properties:s={},visible:i=!1,...r}=e.states[t];o&&e.position.copy(o),a&&e.rotation.setFromVector3(a,"XYZ"),n&&e.scale.copy(n);const c=Object.keys(r).map(async t=>{const o=t.split("."),a=r[t];let n=o[0],l=e;try{for(let e=0;e<o.length-1;e++)l=l[o[e]],n=o[e+1];return l[n]=await Z.engine.getFactory().CreateElement(a),{success:!0,key:t}}catch(e){return console.warn(e),{success:!1,key:t,error:e}}});await Promise.all(c),e.visible=i,e.state=e.states[t]||{model:e};const d=Z.engine.Factory.TreeTypes.find(t=>t.type===e.type);d?.onchange&&d.onchange(e)}function ne(e,t){e.visible=!1}const le=(0,a.reactive)({load:async function(e){le.children.length=0;const t=e.sort((e,t)=>e.index-t.index);for(let e=0;e<t.length;e++){const o={name:"",camera:{path:null},actions:[],index:e,props:{},background:null,environment:{},...t[e]};le.children.push(o)}Q.on("remove",e=>{const t=e.join(".");Z.engine.Project.Camera?.path===t&&Z.engine.Project.ResetCamera();for(let e=0;e<le.children.length;e++){const o=le.children[e];o.camera?.path===t&&(o.camera.path=null,te(o))}})},add:async function(e){const t=`sl${Date.now()}`,o={index:le.children.length,name:t,uid:t,background:null,environment:{},camera:{path:null},props:{},actions:[],...e};return le.children.push(o),await te(o),ee.emit("add",o.uid),o},remove:async function(e){console.log("remove");let t=e||le.actived.uid;const o=le.children.findIndex(e=>e.uid===t);if(o>=0){le.actived.uid===t&&(0===o?await oe(1):await oe(o-1)),le.children.splice(o,1),await n.A.deleteItem("slides",t);const e=le.children.find(e=>e.next===t);e&&le.children.length>=o&&(e.next=le.children[o].uid),ee.emit("remove",t)}},save:te,actived:null,children:[],goto:oe,next(){const e=le.children.findIndex(e=>e.uid===le.actived.uid);e>=le.children.length-1||le.goto(e+1)},back(){const e=le.children.findIndex(e=>e.uid===le.actived.uid);0!==e&&le.goto(e-1)},on:ee.on.bind(ee),off:ee.off.bind(ee)}),se=le;let ie;const re={},ce=[],de=[],pe=(0,a.reactive)({ready:!1,getAssetsManager:()=>re.AssetsManager,getSlidesManager:()=>re.SlidesManager,getFactory:()=>re.Factory,getManager:e=>re[e]||ie,async load(){console.log("Engine load");const{AssetsManager:e,CssManager:t,MouseManager:o,ActionsManager:a,Project:n,Factory:l}=C.getMod("engine");re.AssetsManager=e,re.SlidesManager=se,re.Factory=l,re.MouseManager=o,re.ActionsManager=a,re.CssManager=t,re.Project=ie=n,console.log("Engine load complete"),console.log(de);const s=[];for(let e=0;e<de.length;e++)s.push(de[e](ie));de.length=0,await Promise.all(s)},async start(){pe.ready=!0;const e=[];for(let t=0;t<ce.length;t++)e.push(ce[t](ie));return ce.length=0,await Promise.all(e),console.log(ie),ie},onload(e){ce.push(e)},onInit(e){de.push(e)}}),ue=new Proxy(pe,{get:(e,t)=>t in e?e[t]:re[t]}),me={class:"blocks-container"},he={class:"blockslabel"},ve={key:0,class:"blocks"},ge={class:"blocklabel"},ye={class:"blocktitle"},fe={style:{display:"flex","justify-content":"center",gap:"5px"}},ke=["onClick"],be=["onClick"],Ve=["onClick"],Ee={class:"actionview"},we={key:0,class:"actionrow"},Ne={key:1,class:"actionform"},Be={key:2,class:"actionline"},Ce={props:{value:{type:Object,default:{uid:"",hook:""}},isState:{type:Boolean,default:!1},target:{type:Object},state:{type:Object}},data:()=>({expanded:!1,played:!1}),computed:{action(){return this.$app.actions.list.find(e=>e.uid===this.value.uid)}},methods:{onUpdate(e,t){console.log("onUpdate");const o=e.split(".");let a=this.action;for(let e=0;e<o.length-1;e++){const t=o[e];a[t]||(a[t]={}),a=a[t]}a[o[o.length-1]]=t,this.$emit("update:action",{[e]:t})},remove(){this.$emit("remove")},play(){this.$app.engine.getManager("ActionsManager").GetAction(this.action.type)(this.action,this.target,!1)},reset(){}}},xe=(0,_.A)(Ce,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("icon");return(0,a.openBlock)(),(0,a.createElementBlock)("div",Ee,[s.action?((0,a.openBlock)(),(0,a.createElementBlock)("div",we,[(0,a.createElementVNode)("div",{class:"label",onClick:t[0]||(t[0]=e=>l.expanded=!l.expanded)},[(0,a.createTextVNode)((0,a.toDisplayString)(l.expanded?"▼":"▶")+" ",1),(0,a.createElementVNode)("span",null,(0,a.toDisplayString)("model"===o.value.src?"M":""),1),(0,a.createTextVNode)(" ("+(0,a.toDisplayString)(s.action.type)+") "+(0,a.toDisplayString)(s.action.name||s.action.uid),1)])])):(0,a.createCommentVNode)("v-if",!0),s.action?(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("div",Ne,[((0,a.openBlock)(),(0,a.createBlock)((0,a.resolveDynamicComponent)(s.action.type),(0,a.mergeProps)(s.action,{onUpdate:s.onUpdate,options:{inspector:!0,expanded:l.expanded}}),{default:(0,a.withCtx)(()=>[(0,a.createElementVNode)("button",{class:"square",onClick:t[1]||(t[1]=(...e)=>s.play&&s.play(...e))},[(0,a.createVNode)(i,{value:l.played?"stop2":"play3",size:"1.2em"},null,8,["value"])]),(0,a.createElementVNode)("button",{onClick:t[2]||(t[2]=(...e)=>s.reset&&s.reset(...e))},[(0,a.createVNode)(i,{value:"undo",size:"1em"})]),(0,a.createElementVNode)("button",{onClick:t[3]||(t[3]=(...e)=>s.remove&&s.remove(...e))},[(0,a.createVNode)(i,{value:"bin",size:"1em"})])]),_:1},16,["onUpdate","options"]))],512)),[[a.vShow,l.expanded]]):(0,a.createCommentVNode)("v-if",!0),l.expanded?(0,a.createCommentVNode)("v-if",!0):((0,a.openBlock)(),(0,a.createElementBlock)("div",Be,[(0,a.createElementVNode)("button",{class:"square",onClick:t[4]||(t[4]=(...e)=>s.play&&s.play(...e))},[(0,a.createVNode)(i,{value:l.played?"stop2":"play3",size:"1em"},null,8,["value"])]),(0,a.createElementVNode)("button",{class:"square",onClick:t[5]||(t[5]=(...e)=>s.reset&&s.reset(...e))},[(0,a.createVNode)(i,{value:"undo",size:"1em"})]),(0,a.createElementVNode)("button",{class:"square",onClick:t[6]||(t[6]=(...e)=>s.remove&&s.remove(...e))},[(0,a.createVNode)(i,{value:"bin",size:"1em"})])]))])}]]),Se=["onMouseover","onClick"],Ae={props:["items","x","y"],data:()=>({isActive:!1,highlightedIndex:null}),methods:{highlight(e){this.highlightedIndex=e},deactivate(){this.highlightedIndex=null,this.$emit("select",null)},selectItem(e){this.$emit("select",e)}}},$e=(0,_.A)(Ae,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",{class:"menu",onMouseleave:t[0]||(t[0]=(...e)=>s.deactivate&&s.deactivate(...e)),style:(0,a.normalizeStyle)({top:o.y-3+"px",left:o.x+"px"})},[(0,a.createElementVNode)("ul",null,[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(o.items,(e,t)=>((0,a.openBlock)(),(0,a.createElementBlock)("li",{key:t,onMouseover:e=>s.highlight(t),onClick:t=>s.selectItem(e),class:(0,a.normalizeClass)({highlighted:l.highlightedIndex===t})},(0,a.toDisplayString)(e),43,Se))),128))])],36)}],["__scopeId","data-v-baa172ec"]]),De={name:"EventsList",props:{modelValue:{type:Object,default:{}},value:{type:Object,default:{data:{}}},target:{type:Object,default:null},property:{type:Object}},computed:{eventTypes(){return this.$app.events.types},actions(){return this.$app.actions},hooks(){return this.$app.actions.hooks.filter(e=>!this.getActionsHooks().includes(e))}},mounted(){},methods:{async addEvent(e){this.events.length=0,this.events.push(...["create.on","enable.on","disable.on","mouse.over","mouse.out"].filter(e=>!this.getActionsHooks().includes(e))),this.menuX=e.clientX,this.menuY=e.clientY,this.listshow=!0,await this.$nextTick();const t=this.$refs.hooksList.$el.offsetHeight,o=window.innerHeight;this.menuY+t>o&&(this.menuY=o-t-10)},onSelectEvent(e){this.listshow=!1,e&&this.openActionsList(e)},openActionsList(e){this.$app.actions.showLib(async t=>{t&&(this.target.actions.push({uid:t.uid,hook:e}),this.$emit("save"))})},onRemove(e,t){const o=this.target.actions.findIndex(o=>o.uid===e.uid&&o.hook===t);o>=0&&(this.target.actions.splice(o,1),this.$emit("update:target",null,null))},getActionsHooks(){return[...new Set(this.target.actions.map(e=>e.hook))]},async reset(e){},async play(e){},onEdit(e,t){this.$app.actions.save({uid:e.uid,...t})}},data:()=>({actLibShow:!1,actListShow:!1,actsButtons:[],regActType:null,selectedActionType:null,regbusy:!1,selectdAction:null,eventType:"",listshow:!1,show:!0,events:[],menuX:0,menuY:0,played:!1}),components:{Action:xe,HooksList:$e}},je=(0,_.A)(De,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("icon"),r=(0,a.resolveComponent)("Action"),c=(0,a.resolveComponent)("HooksList");return(0,a.openBlock)(),(0,a.createElementBlock)(a.Fragment,null,[(0,a.createCommentVNode)("Actions View"),(0,a.createElementVNode)("div",me,[(0,a.createElementVNode)("div",he,[(0,a.createElementVNode)("div",{onClick:t[0]||(t[0]=e=>l.show=!l.show)},"Add : "),(0,a.createElementVNode)("button",{onClick:t[1]||(t[1]=(...e)=>s.addEvent&&s.addEvent(...e))},[(0,a.createVNode)(i,{value:"plus",size:"0.9em"})])]),l.show?((0,a.openBlock)(),(0,a.createElementBlock)("div",ve,[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(s.getActionsHooks(),(e,t)=>((0,a.openBlock)(),(0,a.createElementBlock)("div",{key:t,class:"block"},[(0,a.createElementVNode)("div",ge,[(0,a.createElementVNode)("div",ye,(0,a.toDisplayString)(e),1),(0,a.createElementVNode)("div",fe,[(0,a.createElementVNode)("button",{class:"square",onClick:t=>s.play(e)},[(0,a.createVNode)(i,{value:l.played?"stop2":"play3",size:"1em"},null,8,["value"])],8,ke),(0,a.createElementVNode)("button",{class:"square",onClick:t=>s.reset(e)},[(0,a.createVNode)(i,{value:"undo",size:"1em"})],8,be)]),(0,a.createElementVNode)("button",{onClick:t=>s.openActionsList(e)},[(0,a.createVNode)(i,{value:"plus",size:"0.9em"})],8,Ve)]),(0,a.createCommentVNode)("Models actions"),(0,a.createCommentVNode)(' <Action :value="action" :target="value"\r\n                    v-for="(action, index) in value.model.data.actions.filter(a => a.hook === eventType)"\r\n                    :ref="`action${action.uid}`" :key="index"\r\n                    @update:action="onEdit(action,$event)">\r\n                </Action> '),(0,a.createCommentVNode)("States actions"),((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(o.target.actions.filter(t=>t.hook===e),(t,n)=>((0,a.openBlock)(),(0,a.createBlock)(r,{value:t,target:o.value,state:o.target,ref_for:!0,ref:`action${t.uid}`,key:n,"onUpdate:action":e=>s.onEdit(t,e),onRemove:o=>s.onRemove(t,e)},null,8,["value","target","state","onUpdate:action","onRemove"]))),128))]))),128))])):(0,a.createCommentVNode)("v-if",!0),l.listshow?((0,a.openBlock)(),(0,a.createBlock)(a.Teleport,{key:1,to:"body"},[(0,a.createVNode)(c,{ref:"hooksList",x:l.menuX,y:l.menuY,items:s.hooks,onSelect:s.onSelectEvent},null,8,["x","y","items","onSelect"])])):(0,a.createCommentVNode)("v-if",!0)]),(0,a.createCommentVNode)(" // Actions View")],2112)}]]),Ie=je,Te=l.default||l,Me=[];let Fe;function Le(e){const t=(0,a.reactive)({selected:null,list:Pe.list}),o={label:"Close",class:"secondary",handler:async()=>{t.selected=null,v.close(),e&&e()}},l=(0,a.reactive)({label:"Create",class:"primary",handler:async()=>{const e=Pe.library[0];t.selected={type:e.component,group:e.type,targets:["*"],description:e.description,...e.template}}}),s=(0,a.reactive)({label:"Cancel",class:"additional",hidden:(0,a.computed)(()=>!t.selected||t.selected.uid),handler:async()=>{t.selected=null}}),i={label:"Save",class:"primary",hidden:(0,a.computed)(()=>!t.selected||t.selected.uid),handler:async()=>{const e=Pe.library.find(e=>e.component===t.selected.type);if(e.check){if(!await e.check(t.selected))return void u.add({message:"Неверные параметры"})}else Object.keys(e.template).forEach(o=>{o in t.selected||(t.selected[o]=JSON.parse(JSON.stringify(e.template[o])))});t.selected.uid=`${t.selected.type}${Date.now()}`,Pe.list.push(t.selected),await Oe(t.selected),await Fe.Add(t.selected)}},r={label:"Delete",class:"additional",hidden:(0,a.computed)(()=>!t.selected||!t.selected.uid),handler:async()=>{const e=Pe.list.findIndex(e=>e===t.selected);e>=0&&Pe.list.splice(e,1),async function(e){await n.A.deleteItem("actions",e)}(t.selected.uid),t.selected=null}},c={label:"Select",class:"additional",hidden:(0,a.computed)(()=>!t.selected||!t.selected.uid||!e),handler:async()=>{e(t.selected),v.close()}},d=(0,a.reactive)([l,i,c,r,s,o]);v.open({header:{value:e?"Select an action":"Action Library",handler:()=>{v.close()}},content:{component:"ItemsLib",props:t,events:{selected:e=>{e.uid&&(t.selected=e)}},slots:{item:{component:"ActionItem"},edit:{component:"ActionEdit",props:{selected:t.selected},events:{"change:type":e=>{const o=Pe.library.find(t=>t.component===e);t.selected={...o.template,type:o.component,group:o.type,description:o.description}},edit:(e,o)=>{const a=e.split(".");let n=t.selected;for(let e=0;e<a.length-1;e++){const t=a[e];n[t]||(n[t]={}),n=n[t]}n[a[a.length-1]]=o,Oe(t.selected)}}}}},footer:{buttons:d}})}async function Oe(e){e.uid&&await n.A.upsertItemProperties("actions",e.uid,JSON.parse(JSON.stringify({id:e.uid,...e})))}const Pe=(0,a.reactive)({init:async function(e){0===e.length&&e.push(...Me),Fe=ue.ActionsManager;const t=(0,a.reactive)(e);await Fe.Init(t),Pe.list.push(...Fe.Library)},register:function(e){Pe.library.push(e)},save:Oe,showLib:Le,exportData:async function(){return await n.A.getAllItems("actions")},removeFrom:async function(e,{hook:t,uid:o}){},hooks:["enable.on","slide.in.before","slide.in","slide.in.after","slide.out.before","slide.out","slide.out.after","disable.on","mouse.in","mouse.click","mouse.out"],list:[],library:[],get groups(){return Pe.library.reduce((e,t)=>(e.includes(t.type)||e.push(t.type),e),[])},get values(){return Object.values(Pe.list)}});Te.On("init",()=>{Te.menu.hierarhy.list.push({icon:"history",tooltip:"Action Library",handler:Le}),window.vue.component("ActionsList",Ie),Te.inspector.addToModels(["Object3D"],[{label:"Models actions",readonly:!0,content:{prop:"actions",component:"ActionsList",state:!1}},{label:"States actions",readonly:!0,content:{prop:"actions",component:"ActionsList",state:!0}}])});const ze=Pe,Ue={class:"assetblock"};var _e=o(1);const Re={name:"AssetView",data:()=>({cmps:{hdr:"assethdr"}}),props:{value:{type:Object},modelValue:{type:String},property:{type:Object}},methods:{onAssetChange(e){e&&this.$emit("update:value",e.uid)},cleanProp(){delete this.value[this.property.prop],this.$emit("update:value",null)}},computed:{val(){return this.value[this.property.prop]},asset(){return this.val?this.$app.assets.list.find(e=>e.uid===this.val):null}},components:{assethdr:_e.A}},He=(0,_.A)(Re,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("icon"),r=(0,a.resolveDirective)("tooltip");return(0,a.openBlock)(),(0,a.createElementBlock)("div",Ue,[((0,a.openBlock)(),(0,a.createBlock)((0,a.resolveDynamicComponent)(l.cmps[o.property.type]),{onSetasset:s.onAssetChange,asset:s.asset},null,40,["onSetasset","asset"])),s.asset?(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createBlock)(i,{key:0,onClick:s.cleanProp,class:"icon",value:"bin",size:"1em"},null,8,["onClick"])),[[r,"Удалить"]]):(0,a.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-5867b901"]]),qe={class:"image-container"},Ge={ref:"canva"},Je={class:"selector"},Ke={props:{modelValue:{type:Object,default:null},value:{type:Object},label:{type:String,default:""},tooltip:{type:String,default:""},selectable:{type:Boolean}},data:()=>({txtr:null}),watch:{value(e){this.redraw()},modelValue(e){this.redraw()}},methods:{onUpdate({result:e,file:t}){console.log(e);const o=new Blob([e],{type:t.type}),a=URL.createObjectURL(o);this.txtr=a;const n=(new THREE.TextureLoader).load(a,()=>{URL.revokeObjectURL(a)});this.$emit("update:modelValue",n.image),this.$app.storage.writeFile("texture.png",e)}},methods:{redraw(){const e=this.$refs.canva,t=e.getContext("2d");if(t.clearRect(0,0,e.width,e.height),this.modelValue)try{const o=this.modelValue.image;e.width=o.width,e.height=o.height,t.drawImage(o,0,0)}catch(e){}}},mounted(){console.log(this.modelValue,this.value),this.redraw()}},Ye=(0,_.A)(Ke,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",qe,[(0,a.createElementVNode)("canvas",Ge,null,512),(0,a.createElementVNode)("div",Je,[(0,a.createElementVNode)("button",{class:"btn",onClick:t[0]||(t[0]=t=>e.$emit("select",o.value))},"SELECT")])])}]]),We={class:"form-container"},Xe={class:"info"},Qe={class:"row"},Ze={class:"rowvalue"},et={class:"row"},tt={class:"rowvalue"},ot=["value"],at=["value"],nt={key:1},lt={class:"rowlabel"},st={key:0},it={name:"AssetEdit",props:{selected:{type:Object,default:{name:"-"}},progress:{type:Number}},computed:{types(){return this.$app.assets.types},inspector(){return this.$app.inspector.blocksFor(["asset",this.selected.type]).filter(e=>!e.inspectorOnly)}},methods:{updateInspector(e){this.inspector=this.$app.inspector.blocksFor(this.selected.getTypes())},onChange(e,t){console.log(e,t),this.$emit("edit",e,t)},end(){this.$emit("edit","name",this.$refs.nameeditor.endEdit()),this.$emit("edit","url",this.$refs.urleditor.endEdit())},async onComponentUpdate(e,t){if(t.onupdate)await t.onupdate(this.selected,e,t,()=>{this.$emit("edit",t.prop,e)});else{const o=t.prop.split(".");let a=o[0],n=this.selected;for(let e=0;e<o.length-1;e++)n=n[o[e]],a=o[e+1];n[a]=e,this.$emit("edit",t.prop,e)}},onComponentChange(){_saveHandler(this.selected)}}},rt=(0,_.A)(it,[["render",function(e,t,o,n,l,s){const i=(0,a.resolveComponent)("LabelEdit");return(0,a.openBlock)(),(0,a.createElementBlock)("div",We,[(0,a.createElementVNode)("div",Xe,[(0,a.createElementVNode)("div",Qe,[t[3]||(t[3]=(0,a.createElementVNode)("div",{class:"rowlabel"},"Name",-1)),(0,a.createElementVNode)("div",Ze,[(0,a.createVNode)(i,{style:{width:"100%"},ref:"nameeditor","onUpdate:modelValue":[t[0]||(t[0]=e=>s.onChange("name",e)),t[1]||(t[1]=e=>o.selected.name=e)],modelValue:o.selected.name},null,8,["modelValue"])])]),(0,a.createElementVNode)("div",et,[t[4]||(t[4]=(0,a.createElementVNode)("div",{class:"rowlabel"},"Type",-1)),(0,a.createElementVNode)("div",tt,[o.selected.uid?((0,a.openBlock)(),(0,a.createElementBlock)("div",nt,(0,a.toDisplayString)(o.selected.type),1)):((0,a.openBlock)(),(0,a.createElementBlock)("select",{key:0,class:"typeslist",value:o.selected.type,onChange:t[2]||(t[2]=e=>s.onChange("type",e.target.value))},[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(s.types,e=>((0,a.openBlock)(),(0,a.createElementBlock)("option",{value:e},(0,a.toDisplayString)(e),9,at))),256))],40,ot))])]),(0,a.createCommentVNode)(' <div class="row">\r\n                <div class="rowlabel">URL</div>\r\n                <div class="rowvalue">\r\n                    <LabelEdit style="width: 100%;" ref="urleditor" @update:value="onChange(\'url\', $event)"\r\n                        :value="selected.url">\r\n                    </LabelEdit>\r\n                </div>\r\n            </div> '),((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(s.inspector,(e,t)=>((0,a.openBlock)(),(0,a.createElementBlock)("div",{key:t,class:"row"},[(0,a.createElementVNode)("div",lt,(0,a.toDisplayString)(e.label),1),e.content?((0,a.openBlock)(),(0,a.createBlock)((0,a.resolveDynamicComponent)(e.content.component),(0,a.mergeProps)({key:0,class:"rowvalue",value:o.selected,modelValue:o.selected[e.content.prop],"onUpdate:modelValue":[t=>o.selected[e.content.prop]=t,t=>s.onComponentUpdate(t,e.content)],property:e.content},{ref_for:!0},e.content.props,{onModify:t=>s.onComponentChange(t,e.content)}),null,16,["value","modelValue","onUpdate:modelValue","property","onModify"])):(0,a.createCommentVNode)("v-if",!0),e.head?((0,a.openBlock)(),(0,a.createBlock)((0,a.resolveDynamicComponent)(e.head.component),(0,a.mergeProps)({key:1,class:"rowvalue",value:o.selected,modelValue:o.selected[e.head.prop],"onUpdate:modelValue":[t=>o.selected[e.head.prop]=t,t=>s.onComponentUpdate(t,e.head)],property:e.head},{ref_for:!0},e.head.props,{onModify:t=>s.onComponentChange(t,e.head)}),null,16,["value","modelValue","onUpdate:modelValue","property","onModify"])):(0,a.createCommentVNode)("v-if",!0)]))),128)),t[5]||(t[5]=(0,a.createElementVNode)("div",null,null,-1))]),(0,a.createElementVNode)("div",null,[o.progress>0?((0,a.openBlock)(),(0,a.createElementBlock)("div",st,(0,a.toDisplayString)(o.progress),1)):(0,a.createCommentVNode)("v-if",!0)])])}],["__scopeId","data-v-3d9f51e7"]]),ct={class:"moditem"},dt={class:"title"},pt={class:"image"},ut=["src"],mt={name:"AssetItem",props:["item"]},ht=(0,_.A)(mt,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",ct,[(0,a.createElementVNode)("div",dt,(0,a.toDisplayString)(o.item.name),1),(0,a.createElementVNode)("div",pt,[(0,a.createElementVNode)("img",{src:o.item.images[0].url},null,8,ut)])])}],["__scopeId","data-v-ef969d8c"]]),vt={class:"form-container"},gt={class:"info"},yt={class:"row"},ft={class:"rowvalue"},kt={class:"line"},bt=["src"],Vt={key:0},Et={name:"AssetView",props:{selected:{type:Object,default:{name:"-"}},progress:{type:Number}},computed:{types(){return this.$app.assets.types},inspector(){return this.$app.inspector.blocksFor(["asset",this.selected.type]).filter(e=>!e.inspectorOnly)}},methods:{updateInspector(e){this.inspector=this.$app.inspector.blocksFor(this.selected.getTypes())},onChange(e,t){this.$emit("edit",e,t)},end(){this.$emit("edit","name",this.$refs.nameeditor.endEdit()),this.$emit("edit","url",this.$refs.urleditor.endEdit())},async onComponentUpdate(e,t){if(t.onupdate)await t.onupdate(this.selected,e,t,()=>{this.$emit("edit",t.prop,e)});else{const o=t.prop.split(".");let a=o[0],n=this.selected;for(let e=0;e<o.length-1;e++)n=n[o[e]],a=o[e+1];n[a]=e,this.$emit("edit",t.prop,e)}},onComponentChange(){_saveHandler(this.selected)}}},wt=(0,_.A)(Et,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",vt,[(0,a.createElementVNode)("div",gt,[(0,a.createElementVNode)("div",yt,[t[0]||(t[0]=(0,a.createElementVNode)("div",{class:"rowlabel"},"Name",-1)),(0,a.createElementVNode)("div",ft,(0,a.toDisplayString)(o.selected.name),1)]),(0,a.createElementVNode)("div",kt,[(0,a.createElementVNode)("img",{src:o.selected.images[0].url},null,8,bt)])]),(0,a.createElementVNode)("div",null,[o.progress>0?((0,a.openBlock)(),(0,a.createElementBlock)("div",Vt,(0,a.toDisplayString)(o.progress),1)):(0,a.createCommentVNode)("v-if",!0)])])}],["__scopeId","data-v-321414c5"]]),Nt=l.default||l,Bt={asset:[{label:"URL",content:{prop:"url",component:"LabelEdit",onupdate(e,t,o,a){console.log(e),St.Update(e,t,o)}}},{label:"Clone",head:{component:"BoolEdit",prop:"clone",async onupdate(e,t,o,a){await St.Update(e,t,o)}}}],model:[{label:"Shadow",content:{component:"ShadowEdit",prop:"shadow",onupdate:async(e,t,o,a)=>{await St.Update(e,t,o)}}},{label:"Environment map",inspectorOnly:!0,content:{component:"AssetSelector",prop:"envMap",type:"hdr",onupdate:async(e,t,o,a)=>{await St.Update(e,t,o)}}}],image:[{label:"Image",content:{inspectorOnly:!0,prop:"img",component:"ImageView",props:{acceptedTypes:"image/*",selectable:!1},async onupdate(e,t,o){console.log(t),e.img=t}}}],hdr:[]},Ct={model:()=>!0},xt={model:"codepen",image:"image",hdr:"loop2"};let St;function At(e=[]){return console.log(e),Tt.list.filter(t=>0===e.length||e.includes(t.type)).map(e=>({...e.data}))}async function $t(e){e.uid=`asset_${Date.now()}`;const t=St.Add(e);await t.load(),Tt.list.push(t),console.log(Tt.list),await n.A.addItem("assets",JSON.parse(JSON.stringify({id:t.uid,...t.data}))),console.log(t)}async function Dt(e){console.log("Save asset");try{if(!e.uid)return;await n.A.updateItem("assets",JSON.parse(JSON.stringify({id:e.uid,...e.data})))}catch(e){console.error("Error saving asset:",e),Nt.toasts.add({message:"Error saving asset"})}}async function jt(e){switch(e.type){case"model":const t=ue.getFactory().CheckUseAsset(e.uid);if(t)return Nt.toasts.add({message:`Cannot delete, asset is used in ${t} models`}),!1;break;case"hdr":if(Tt.list.find(t=>t.data.envMap===e.uid))return Nt.toasts.add({message:"Cannot delete, asset in use"}),!1}const t=Tt.list.findIndex(t=>t.uid===e.uid);return t>=0&&(Tt.list.splice(t,1),St.Remove(e.uid),await n.A.deleteItem("assets",e.uid)),!0}function It(e,t=!0){return new Promise(o=>{const n=(0,a.reactive)({selected:null,list:At(e),icons:xt}),l=(0,a.reactive)([{label:"Select",class:"primary",hidden:(0,a.computed)(()=>!t||!n.selected),handler:async()=>{v.close(),o(n.selected)}},{label:"Remove",class:"additional",hidden:(0,a.computed)(()=>!n.selected?.uid),handler:async()=>{jt(n.selected)&&(n.selected=null,n.list=At(e))}},{label:"Save",class:"primary",hidden:(0,a.computed)(()=>!n.selected||n.selected.uid||n.busy),handler:async()=>{if(!Ct[n.selected.type]||await Ct[n.selected.type](n.selected)){Nt.toasts.add({message:"Start load asset"});try{n.selected=await $t(n.selected)}catch(e){return Nt.toasts.add({message:e.message}),void(n.selected.uid=null)}n.list=At(e),Nt.toasts.add({message:"Asset saved"})}}},{label:"Create",class:"secondary",handler:async()=>{n.selected={name:"",type:Tt.types[0],url:""}}},{label:"Close",class:"additional",handler:async()=>{v.close(),o()}}]);v.open({header:{value:t?"Select asset":"Project assets",handler:()=>{v.close()}},content:{component:"ItemsLib",props:n,events:{selected:e=>{n.selected=e}},slots:{edit:{component:"AssetEdit",props:{selected:n.selected},events:{edit:(e,t)=>{n.selected[e]=t,n.selected.uid&&Dt({data:n.selected})}}}}},footer:{buttons:l}})})}const Tt=(0,a.reactive)({init:async function(e,t){console.log("Init assets"),St=ue.getManager("AssetsManager"),await St.Init(e,t);const o=Array.from(St.Assets.values());o.forEach(e=>{e.on("update",()=>{Dt(e)})}),Tt.list.push(...o),console.log(Tt.list)},create:$t,update:async function(e,t,o){await St.Update(e,t,o)},save:Dt,selectAsset:It,editAsset:function(e){const t=(0,a.reactive)({current:e}),o=(0,a.reactive)([{label:"Save",class:"secondary",handler:async()=>{e.uid?await Dt({data:e}):await $t(e),v.close()}},{label:"Cancel",class:"primary",handler:async()=>{v.close()}}]);v.open({header:{value:"Select asset",handler:()=>{v.close()}},content:{component:"AssetEdit",props:t,events:{edit:(t,o)=>{e[t]=o}}},footer:{buttons:o}})},remove:jt,setAsset:function(e,t){e.assets||(e.assets=[]),e.assets.push({uid:t.uid}),Nt.engine.getFactory().AddAsset(e.uid,t)},types:["model","hdr","image"],list:[],exportData:async()=>await n.A.getAllItems("assets"),get inspector(){return Bt},getInspector:e=>Bt[e]||[],async getDefault(){const e=await fetch("https://s3.eu-west-1.amazonaws.com/3dbuilder.reneos.com/base/assets.json"),t=await e.json();return await n.A.upsertMany("assets",t,"uid"),t}});Nt.On("init",()=>{Nt.menu.hierarhy.list.push({icon:"cube",tooltip:"Assets library",handler:()=>{It([],!1)}}),window.vue.component("AssetView",wt),window.vue.component("AssetItem",ht),window.vue.component("AssetSelector",He),window.vue.component("AssetEdit",rt),window.vue.component("AssetImage",Ye),Object.keys(Bt).forEach(e=>{Nt.inspector.addToModels([e],Bt[e])})});const Mt=Tt,Ft=(Boolean,l.default||l);let Lt;const Ot=(0,a.reactive)({init:async function(){console.log("app init"),Lt=new n.A("slider",["data","templates"]),await Lt.openDatabase("slider")},save:async function(){const e={uid:"currproject",id:"currproject",actions:ze.exportData(),assets:Mt.exportData(),elements:Elements.exportData()};return await n.A.updateItem("projects",e),e.uid},saveData:function(e,t,o){return Lt.upsertItemProperties(e,t,o)},readData:function(e,t){return Lt.getItem(e,t)},GetDB:function(){return Lt},draggedNode:null,ready:!1,cameras:[],get types(){return Ft.engine.getFactory().GetTypes()},user:{registered:!1,name:"Guest",options:{manual:"false"!==localStorage.getItem("options.manual")}},setPassword:async function(e){try{const{error:t,me:o}=await gqlc.Set({me:[{password:[{$args:{value:e}}]}]})}catch(e){Ft.toasts.add({message:"Error on change password"})}},async logout(){const e=await fetch("/auth/logout"),t=await e.json();console.log(t),window.location.reload()}});Ft.On("init",()=>{Ft.menu.addMenu("app",{path:"app.list.help",icon:"question",text:"Help",link:"#",children:[{path:"app.list.help.channel",icon:"bullhorn",text:"Channel",handler:async()=>{window.open("https://t.me/webslider","_blank")}},{path:"app.list.help.chat",icon:"bubbles",text:"Chat",tooltip:"Discuss",handler:()=>{window.open("https://t.me/chatslider","_blank")}}]})});const Pt=Ot;var zt=o(822);const Ut=[],_t=[],Rt={},Ht={Object3D:[{label:"Transform",readonly:!0,content:{component:"TransformEdit",state:!0}},{label:"Visibility",data:{},head:{prop:"visible",component:"BoolEdit",state:!0}}],Mesh:[{label:"Shadow",content:{component:"ShadowEdit",prop:"shadow",state:!1,onupdate:async(e,t,o,a)=>{e.castShadow=o.cast||!1,e.receiveShadow=o.receive||!1}}}],DirectionalLight:[{label:"Color",head:{component:"EditColor",prop:"color",state:!0,onupdate(e,t,o,a){}}},{label:"Intensity",head:{component:"Float",prop:"intensity",step:.1,min:0}},{label:"Shadow",data:{},head:{prop:"castShadow",component:"BoolEdit"}}],AmbientLight:[{label:"Color",head:{component:"EditColor",prop:"color",state:!0,onupdate(e,t,o,a){e[t].copy(o);const n=e.states[se.actived.uid];n.properties||(n.properties={}),n.properties[t]={type:"Color",args:["#"+o.getHexString()]},Q.save(e)}}},{label:"Intensity",head:{component:"Float",prop:"intensity",step:.1,min:0,state:!0}}],Mesh:[{label:"Shadow",content:{component:"ShadowEdit",prop:"shadow",state:!1,onupdate:async(e,t,o,a)=>{e.castShadow=o.cast||!1,e.receiveShadow=o.receive||!1}}}],label2d:[{label:"Размеры",content:{component:"DimensionsEdit",onupdate(e,t,o,a){e[t]=o,Q.save(e)},state:!0}},{label:"Text",content:{prop:"text",component:"TextEdit",state:!0}},{label:"Цвет",head:{component:"TextColorEdit",prop:"color",state:!0}},{label:"Размер шрифта",head:{component:"FontSize",prop:"size",state:!0}}],videoplane:[{label:"URL",content:{component:"LabelEdit",prop:"url",state:!1,onupdate(e,t,o,a){e.properties||(e.properties={}),e.properties.url=o}},head:{component:"Label",prop:"url"}}],Camera:[{label:"Far",head:{prop:"far",component:"Float",onupdate(e,t,o,a){e[t]=e.states[se.actived.uid][t]=o,e.updateProjectionMatrix(),zt.A.CameraHelper.update(),Q.save(e)}}},{label:"Near",head:{prop:"near",component:"Float",state:!0,onupdate(e,t,o,a,n){e[t]=e.states[se.actived.uid][t]=o,e.updateProjectionMatrix(),zt.A.CameraHelper.update(),Q.save(e)}}}],PerspectiveCamera:[{label:"FOV",head:{prop:"fov",component:"Float",onupdate(e,t,o){e[t]=e.states[se.actived.uid][t]=o,e.updateProjectionMatrix(),zt.A.CameraHelper.update(),Q.save(e)}}}],OrthographicCamera:[{label:"Left",head:{prop:"left",component:"Float",onupdate(e,t,o){e[t]=e.states[se.actived.uid][t]=o,e.updateProjectionMatrix(),zt.A.CameraHelper.update(),Q.save(e)}}},{label:"Top",head:{prop:"top",component:"Float",onupdate(e,t,o){e[t]=e.states[se.actived.uid][t]=o,e.updateProjectionMatrix(),zt.A.CameraHelper.update(),Q.save(e)}}},{label:"Right",head:{prop:"right",component:"Float",onupdate(e,t,o){e[t]=e.states[se.actived.uid][t]=o,e.updateProjectionMatrix(),zt.A.CameraHelper.update(),Q.save(e)}}},{label:"Bottom",head:{prop:"bottom",component:"Float",onupdate(e,t,o){e[t]=e.states[se.actived.uid][t]=o,e.updateProjectionMatrix(),zt.A.CameraHelper.update(),Q.save(e)}}}]},qt={},Gt=(0,a.reactive)({ready:!1,cameras:[],blocksFor:(e=["Object3D"])=>e.flatMap(e=>Ht[e]||[]),handlers:qt,setHandler(e,t){qt[e]=t},getHandlers:()=>qt,addBlocks(e,t){Object.keys(_blocks).forEach(o=>{t(o)&&_blocks[o].push(...e)})},addToAssets(e,t){for(let o=0;o<e.length;o++){const a=e[o];"*"!==a?(Rt[a]||(Rt[a]=[]),Rt[a].push(...t)):_t.push(...t)}},addToModels(e,t){for(let o=0;o<e.length;o++){const a=e[o];"*"!==a?(Ht[a]||(Ht[a]=[]),Ht[a].push(...t)):Ut.push(...t)}}});var Jt=o(835);const Kt=l.default||l;function Yt(e){Jt.A.Transformer.setMode(e)}function Wt(e,t){e.children??=[],(t.children||[]).forEach(t=>{let o=e.children.find(e=>e.path===t.path);o?Wt(o,t):e.children.push(t)})}const Xt=(0,a.reactive)({addMenu:function(e,t){const o=Xt[e].list.find(e=>e.path===t.path);o?Wt(o,t):Xt[e].list.push(t)},app:{list:[{path:"app.list.project",icon:"",text:"Project",link:"#"},{path:"app.list.libraries",icon:"",text:"Libraries",link:"#"},{path:"app.list.help",icon:"question",text:"Help",link:"#"}]},top:{list:[{icon:"sphere",hint:"Local/global space",handler:function(){Jt.A.Transformer.setSpace("local"===Jt.A.Transformer.space?"world":"local")}},{icon:"move",hint:"Moving",handler:Yt.bind(null,"translate")},{icon:"loop2",hint:"Rotation",handler:Yt.bind(null,"rotate")},{icon:"enlarge2",hint:"Scale",handler:Yt.bind(null,"scale")},{icon:"target",hint:"Zoom in on selected",handler:Jt.A.FocusToSelect},{icon:"cross",hint:"Deselect",handler:()=>{Kt.selection.select(null)}}],options:{size:"1.5em"}},hierarhy:{list:[{icon:"play3",tooltip:"Run",handler:()=>{Kt.project.play()}}],options:{}},tools:{list:[]}}),Qt=Xt,Zt=l.default||l,eo=[];let to="";function oo(e={}){return new Promise(t=>{const o=(0,a.reactive)({title:"Creating a project",text:"Please enter the project name *",answer:"",template:""}),l=(0,a.reactive)({label:"Create",class:"primary",disabled:o.answer.length<1,callback:async o=>{const a=`project${Date.now()}`;await n.A.Create(a,{project:[{uid:"info",id:a,name:o,created:Date.now(),last:Date.now()}],assets:e.assets||[],actions:e.actions||[],models:e.models||[],slides:e.slides||[],modules:e.modules||[]}),t(a)}});v.queryText(o,[l],e=>{o.answer=e,l.disabled=o.answer.length<1})})}async function ao(e){const t=new URL(window.location.href);t.searchParams.set("src","db"),t.searchParams.set("db",e),window.location.href=t.toString()}async function no(){const e=await n.A.GetFromAll("project","info");return lo.list.length=0,lo.list.push(...e.filter(e=>void 0!==e).map(e=>(e.uid=e.id,e))),lo.list}const lo=(0,a.reactive)({init:async function(e){console.log(e),to=e},create:async function(){const e=await oo();e&&ao(e)},createProject:oo,open:async function(){const e=await no(),t=(0,a.reactive)({list:e.filter(e=>e.uid!==Zt.project.uid)});v.open({header:{value:"Open project",handler:v.close},content:{component:"ItemsLib",props:t,events:{selected:e=>{ao(e.id),v.close()}},slots:{item:{component:"ProjectItem"}}},footer:{buttons:[{label:"Close",class:"primary",handler:v.close}]}})},goto:ao,remove:async function(e){console.log(e);const t=e||to;console.log(t),await n.A.DeleteDatabase(t),console.log("Removed");const o=lo.list.findIndex(e=>e.uid===t);o>=0&&lo.list.splice(o,1),window.location.href=new URL(`${window.location.origin}${window.location.pathname}`).toString()},getList:no,loadExample:async function(e){const t=(await eo[e]()).default,o=`project${e}`;await n.A.Init(o,["project","assets","models","slides","actions","modules"],"uid"),await n.A.addItems("actions",t.actions),await n.A.addItems("assets",t.assets),await n.A.addItems("models",t.models),await n.A.addItems("modules",t.modules),await n.A.addItems("project",t.project),await n.A.addItems("slides",t.slides);const a=new URL(window.location.href);a.searchParams.set("project",o),window.location.href=a.toString()},play:async function(e="data"){const t=await n.A.exportToJson(to);console.log(t),t.project={ui:{slides:!0,fullscreen:!0}};let o=`../player?target=${e}`;"src"===e&&(o+=`&src=${to}`);const a=window.open(o,"Player");if(a){if("data"===e){const e=async(o=0)=>{try{if(a.closed)return void console.error("Окно плеера было закрыто");a.postMessage({type:"INIT_DATA",payload:t},window.location.origin),console.log("Данные отправлены")}catch(t){console.error("Ошибка при отправке данных:",t),o<5&&setTimeout(()=>e(o+1),500*(o+1))}};setTimeout(e,1e3)}}else console.error("Не удалось открыть окно. Возможно, браузер заблокировал pop-up.")},importProject:async function(){try{const e=await function(e=".json"){return new Promise(t=>{const o=document.createElement("input");o.type="file",o.accept=e,o.style.display="none",o.addEventListener("change",()=>{o.files&&o.files[0]&&t(o.files[0]),document.body.removeChild(o)}),document.body.appendChild(o),o.click()})}(),t=await function(e){return new Promise((t,o)=>{if(!e.name.endsWith(".json"))return void o(new Error("Выберите файл с расширением .json"));const a=new FileReader;a.onload=e=>{try{const o=JSON.parse(e.target.result);t(o)}catch(e){o(new Error("Ошибка парсинга JSON: "+e.message))}},a.onerror=()=>{o(new Error("Ошибка чтения файла"))},a.readAsText(e)})}(e);let o=!1;const l=(0,a.reactive)({actions:{},assets:{},elements:{},slides:{},modules:{}});return v.open({header:{value:"Импорт",handler:()=>{v.close()}},content:{component:"Importer",props:{project:t},events:{options:e=>{o=e.merge},changelist:e=>{Object.keys(e).forEach(t=>{l[t]=e[t]})}}},footer:{buttons:[{label:"Импорт",class:"secondary",handler:async()=>{const e=`project${Date.now()}`;await n.A.Init(e,["project","assets","elements","slides","actions","modules"],"uid"),await n.A.addItems("actions",t.actions),await n.A.addItems("assets",t.assets),await n.A.addItems("elements",t.elements),await n.A.addItems("slides",t.slides),await n.A.addItems("modules",t.modules),await n.A.addItems("project",t.project);const o=new URL(window.location.href);o.searchParams.set("project",e),window.location.href=o.toString(),v.close()}},{label:"Отмена",class:"primary",handler:async()=>{v.close()}}]}}),t}catch(e){throw console.error("Ошибка:",e.message),e}},load:async function(){},player:null,list:[]}),so=lo,io=(0,a.reactive)({uid:"",selected:null,slide:{},select(e){if(e?.getTypes&&(console.log(e),console.log(e.getTypes())),io.selected=e,!io.selected)return Jt.A.Select(null),void(io.uid=null);io.uid=io.selected.uid,e.isObject3D&&Jt.A.Select(io.selected)}}),ro=io,co=l.default||l,po=new class{#e=null;get handle(){return this.#e}async requestAccess(){this.#e=await window.showDirectoryPicker({mode:"readwrite"}),await n.A.upsertItemProperties("project","storage",{handle:this.#e})}updateHandle(e){this.#e=e}async writeFile(e,t){this.#t();const o=await this.#e.getFileHandle(e,{create:!0}),a=await o.createWritable();await a.write(t),await a.close()}async readFile(e){this.#t();const t=await this.#e.getFileHandle(e),o=await t.getFile();return await o.text()}async listFiles(){this.#t();const e=[];for await(const[t,o]of this.#e.entries())"file"===o.kind&&e.push(t);return e}#t(){if(!this.#e)throw new Error("Folder access not granted")}};let uo;const mo=(0,a.reactive)({getHandle:()=>po.handle,init:async function(){const e=await n.A.getItem("project","storage");if(e)po.updateHandle(e.handle);else{const e=(0,a.reactive)({title:"Укажите папку для хранения моделей",text:"",answer:"",template:""}),t=(0,a.reactive)({label:"ОК",class:"primary",callback:async e=>{await po.requestAccess(),uo&&uo()}});co.modal.confirmReq(e,[t])}},requestAccess:po.requestAccess.bind(po),writeFile:po.writeFile.bind(po),readFile:po.readFile.bind(po),listFiles:po.listFiles.bind(po),access:()=>new Promise(e=>{uo=e})}),ho={class:"itemElement"},vo={class:"itemrow"},go={class:"itemrow"},yo={class:"itemrow"},fo={props:{item:{type:Object}}},ko=(0,_.A)(fo,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",ho,[(0,a.createElementVNode)("div",vo,(0,a.toDisplayString)(o.item.title),1),(0,a.createElementVNode)("div",go,(0,a.toDisplayString)(o.item.price),1),(0,a.createElementVNode)("div",yo,(0,a.toDisplayString)(o.item.autor?.name),1)])}]]),bo={class:"product-card"},Vo={class:"product-title"},Eo={key:0,class:"card-section"},wo={class:"card-value"},No={class:"card-section"},Bo={class:"card-image"},Co=["src","alt"],xo={class:"card-section"},So={key:0,class:"carousel"},Ao={class:"carousel-container"},$o=["src","onClick","alt"],Do={class:"card-section"},jo={class:"card-value"},Io=["href"],To={key:1,class:"card-section"},Mo={class:"card-value"},Fo=(0,a.defineComponent)({name:"ProductCard",props:{selected:{type:Object,required:!0,validator:e=>!0}},computed:{data(){return this.selected}},data:()=>({img:0}),setup:e=>({formattedPrice:(0,a.computed)(()=>void 0===e.selected.price||null===e.selected.price?"Цена не указана":new Intl.NumberFormat("ru-RU",{style:"currency",currency:"RUB"}).format(e.selected.price))}),methods:{onImageClick(e){this.img=e}}}),Lo=(0,_.A)(Fo,[["render",function(e,t,o,n,l,s){return(0,a.openBlock)(),(0,a.createElementBlock)("div",bo,[(0,a.createCommentVNode)(" Заголовок "),(0,a.createElementVNode)("h2",Vo,(0,a.toDisplayString)(e.data.title),1),e.data.description?((0,a.openBlock)(),(0,a.createElementBlock)("div",Eo,[(0,a.createElementVNode)("span",wo,(0,a.toDisplayString)(e.data.description),1)])):(0,a.createCommentVNode)("v-if",!0),(0,a.createCommentVNode)(" Основное изображение "),(0,a.createElementVNode)("div",No,[(0,a.createElementVNode)("div",Bo,[e.data.images&&e.data.images.length?((0,a.openBlock)(),(0,a.createElementBlock)("img",{key:0,src:e.data.images[e.img],alt:e.data.title,class:"image-preview"},null,8,Co)):(0,a.createCommentVNode)("v-if",!0)])]),(0,a.createCommentVNode)(" Карусель изображений "),(0,a.createElementVNode)("div",xo,[e.data.images&&e.data.images.length?((0,a.openBlock)(),(0,a.createElementBlock)("div",So,[(0,a.createElementVNode)("div",Ao,[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(e.data.images,(t,o)=>((0,a.openBlock)(),(0,a.createElementBlock)("div",{key:o,class:"carousel-item"},[(0,a.createElementVNode)("img",{src:t,onClick:t=>e.onImageClick(o),alt:`${e.data.title} - изображение ${o+1}`,class:"carousel-image"},null,8,$o)]))),128))])])):(0,a.createCommentVNode)("v-if",!0)]),(0,a.createElementVNode)("div",Do,[t[0]||(t[0]=(0,a.createElementVNode)("span",{class:"card-label"},null,-1)),(0,a.createElementVNode)("span",jo,[(0,a.createElementVNode)("a",{href:"../player?src=url&url="+e.data.url,target:"_blank"},"Preview",8,Io)])]),(0,a.createCommentVNode)(" Цена "),(0,a.createCommentVNode)(' <div class="card-section">\r\n            <span class="card-label">Price:</span>\r\n            <span class="card-value">{{ formattedPrice }}</span>\r\n        </div> '),(0,a.createCommentVNode)(" Автор "),e.data.autor?((0,a.openBlock)(),(0,a.createElementBlock)("div",To,[t[1]||(t[1]=(0,a.createElementVNode)("span",{class:"card-label"},"Autor:",-1)),(0,a.createElementVNode)("span",Mo,(0,a.toDisplayString)(e.data.autor.name),1)])):(0,a.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-73ea6e84"]]),Oo=l.default||l,Po=[];const zo=(0,a.reactive)({init:async function(){},preview:async function(e,t,o=0,a=100){},load:async function(e){}});Oo.On("init",()=>{window.vue.component("TemplateItem",ko),window.vue.component("TemplateView",Lo),Oo.menu.addMenu("app",{path:"app.list.libraries",icon:"",text:"Libraries",link:"#",children:[{path:"app.list.libraries.templates",icon:"codepen",text:"Templates",handler:async()=>{!async function(){await async function(){const[e,t]=await Promise.all([fetch("https://s3.eu-west-1.amazonaws.com/3dbuilder.reneos.com/templates/index.json",{headers:{"Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache",Expires:"0"},cache:"no-store"}).then(e=>e.json()),Oo.app.GetDB().getAllItems("templates")]);Po.length=0,Po.push(...e,...t)}();const e=(0,a.reactive)({selected:null,list:Po}),t={label:"Close",class:"secondary",handler:async()=>{e.selected=null,Oo.modal.close()}},o={label:"Create",class:"additional",handler:async()=>{const t=await fetch(e.selected.url,{headers:{"Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache",Expires:"0"},cache:"no-store"}),o=await t.json(),a=await Oo.projects.createProject(o);Oo.projects.goto(a)}},n=(0,a.reactive)([o,t]);Oo.modal.open({header:{value:"",handler:()=>{Oo.modal.close()}},content:{component:"ItemsLib",props:e,events:{selected:async t=>{e.selected=t},open:async()=>{}},slots:{item:{component:"TemplateItem"},edit:{component:"TemplateView",props:{data:e.selected},events:{"change:type":t=>{const o=zo.library.find(e=>e.component===t);e.selected={...o.template,type:o.component,group:o.type,description:o.description}},edit:(t,o)=>{const a=t.split(".");let n=e.selected;for(let e=0;e<a.length-1;e++){const t=a[e];n[t]||(n[t]={}),n=n[t]}n[a[a.length-1]]=o,async function(){}(e.selected)}}}}},footer:{buttons:n}})}()}}]})});const Uo=zo,_o=l.default||l,Ro={},Ho=(0,a.reactive)({elements:[],onElementMount(e){Ro[e.path]&&(Ro[e.path](e.element),delete Ro[e.path])},addElement(e,t){return console.log(e),new Promise((o,n)=>{if(!window.vue._context.components[e])return _o.toasts.add({message:`Component "${e}" is not registered`}),void n(new Error(`Component "${e}" is not registered`));const l=(0,a.reactive)(t.data),s={component:e,data:l,events:t.events};this.elements.push(s),Ro[t.data.path]=e=>{s.element=e,o({data:l,element:e})}})},removeElement(e){const t=this.elements.findIndex(t=>t.element===e);t>=0&&this.elements.splice(t,1)}});_o.On("init",()=>{Ho.elements.length=0});const qo=Ho},624:(e,t,o)=>{o.d(t,{A:()=>d});var a=o(15);const n={class:"collapsible-panel"},l={class:"panel-header"},s={key:1,class:"toggle-icon"},i={class:"header-content"},r={class:"panel-content"},c={__name:"inspectorpanel",props:{label:{type:String,required:!0},tooltip:{type:String,default:""},stat:{type:Boolean,default:!1}},setup(e){const t=(0,a.useSlots)(),o=(0,a.ref)(!1),c=(0,a.ref)(null),d=()=>{t.content&&(o.value=!o.value)};return(p,u)=>{const m=(0,a.resolveDirective)("tooltip");return(0,a.openBlock)(),(0,a.createElementBlock)("div",n,[(0,a.createElementVNode)("div",l,[(0,a.unref)(t).content?((0,a.openBlock)(),(0,a.createElementBlock)("span",{key:0,onClick:d,class:(0,a.normalizeClass)(["toggle-icon",{open:o.value}])},"▼",2)):((0,a.openBlock)(),(0,a.createElementBlock)("span",s)),(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("div",i,[(0,a.createElementVNode)("span",{onClick:d,class:"label"},(0,a.toDisplayString)(e.label),1),(0,a.createVNode)(a.Transition,{name:"fade"},{default:(0,a.withCtx)(()=>[(0,a.renderSlot)(p.$slots,"head",{label:e.label},()=>[(0,a.withDirectives)((0,a.createElementVNode)("div",{ref_key:"panelHeader",ref:c},null,512),[[a.vShow,!o.value]])])]),_:3})])),[[m,e.tooltip]]),(0,a.renderSlot)(p.$slots,"icons",{stat:e.stat})]),(0,a.createVNode)(a.Transition,{name:"slide",persisted:""},{default:(0,a.withCtx)(()=>[(0,a.withDirectives)((0,a.createElementVNode)("div",r,[(0,a.renderSlot)(p.$slots,"content")],512),[[a.vShow,o.value]])]),_:3})])}}},d=(0,o(262).A)(c,[["__scopeId","data-v-11caa10e"]])},664:(e,t,o)=>{o.d(t,{A:()=>c});var a=o(15);const n={class:"hierarhy-view"},l=["onUpdate:modelValue","onChange"],s={class:"treeicon"};var i=o(546);const r={name:"TreeElement",props:{title:""},data:()=>({filtersView:!1,filterRect:{},requestRemove:!1,removeData:{text:""}}),computed:{project(){return this.$app.project},selected(){return this.$app.selection.selected},selection(){return this.$app.selection},tree(){return this.$app.project.children}},methods:{async updateVisible(e){this.$app.project.getState(e,this.$app.slides.actived.uid).visible=e.visible,await this.$app.project.save(e)},async handleNodeDrop(e){this.$app.project.handleAsset(e)},filterElements:e=>e.filter(e=>e.isElement),async insertToSlide(e){e.state?this.$app.toasts.add({message:"The element has already been added to this slide"}):await this.$app.slides.addState(e)},deleteElement(e){this.removeData.text=`Delete ${e.name} (${e.uid}) ?`,this.$app.modal.open({header:{value:"Delete item",handler:()=>{this.$app.modal.close(),this.requestRemove=!1}},content:{},footer:{buttons:[{label:"Delete",class:"secondary",handler:async()=>{this.$app.modal.close(),this.requestRemove=!1,this.$app.project.remove(e.paths),this.$app.toasts.add({message:`The element ${e.name} is deleted`})}},{label:"Cancel",class:"primary",handler:async()=>{this.$app.modal.close(),this.requestRemove=!1}}]}})},onUpdateExpanded(e){},onNodeClick(e){this.$app.selection.select(e)},onChangeSelection(){}},components:{TreeView:i.A}},c=(0,o(262).A)(r,[["render",function(e,t,o,i,r,c){const d=(0,a.resolveComponent)("icon"),p=(0,a.resolveComponent)("TreeView"),u=(0,a.resolveDirective)("tooltip");return(0,a.openBlock)(),(0,a.createElementBlock)("div",n,[(0,a.createElementVNode)("div",null,[(0,a.createTextVNode)((0,a.toDisplayString)(o.title)+": ",1),(0,a.createElementVNode)("button",{onClick:t[0]||(t[0]=e=>c.project.addElement(c.selected))},[(0,a.createVNode)(d,{value:"plus",size:"0.75em"})])]),(0,a.createVNode)(p,{filter:c.filterElements,tree:c.tree,onClickNode:c.onNodeClick,onChangeSelect:c.onChangeSelection,childsFiled:"children",onUpdateExpanded:c.onUpdateExpanded,selector:!1,droppable:!0,onNodeDrop:c.handleNodeDrop},{prepend:(0,a.withCtx)(({node:e,index:t})=>[(0,a.createElementVNode)("div",null,[(0,a.withDirectives)((0,a.createElementVNode)("input",{type:"checkbox","onUpdate:modelValue":t=>e.visible=t,onChange:t=>c.updateVisible(e)},null,40,l),[[a.vModelCheckbox,e.visible]])])]),append:(0,a.withCtx)(({node:e,index:t})=>[(0,a.createElementVNode)("div",s,[(0,a.createCommentVNode)(' <icon value="target" v-tooltip="\'Фокус\'" size="1em" @click="$emit(\'target\', node)"></icon>'),(0,a.createCommentVNode)(" <icon v-tooltip=\"'Видимость'\" :value=\"node.show ? 'eye' : 'eye-blocked'\" size=\"1em\"\r\n            @click=\"node.visible = !node.visible\" :color=\"node.visible ? '#8ec58e' : '#8ec58e80'\">\r\n          </icon> "),e.parent?(0,a.createCommentVNode)("v-if",!0):(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createBlock)(d,{key:0,value:"dice",size:"1em",onClick:t=>c.insertToSlide(e),color:e.state?"#8ec58e":"#8ec58e80"},null,8,["onClick","color"])),[[u,"Add to slide"]]),(0,a.withDirectives)((0,a.createVNode)(d,{onClick:t=>c.deleteElement(e),value:"bin",size:"1em"},null,8,["onClick"]),[[u,"Remove"]]),(0,a.createCommentVNode)(' <icon v-if="index === 0" size="100%" value="bin"></icon> ')])]),label:(0,a.withCtx)(({node:e})=>[(0,a.createElementVNode)("div",{class:(0,a.normalizeClass)([{focusedtree:c.selected===e},"label"])},(0,a.toDisplayString)(e.name||e.uid),3)]),_:1},8,["filter","tree","onClickNode","onChangeSelect","onUpdateExpanded","onNodeDrop"])])}],["__scopeId","data-v-e70173d4"]])},684:(e,t,o)=>{o.d(t,{A:()=>d});var a=o(15);const n={class:"horizontal-menu"},l={class:"menu-text"},s={key:0,class:"submenu"},i={name:"MenuItem",props:{item:{type:Object,required:!0}},methods:{onClick(e){!e.children&&e.handler&&e.handler()}}};var r=o(262);const c={components:{MenuItem:(0,r.A)(i,[["render",function(e,t,o,n,i,r){const c=(0,a.resolveComponent)("icon"),d=(0,a.resolveComponent)("MenuItem",!0),p=(0,a.resolveDirective)("tooltip");return(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("li",{class:(0,a.normalizeClass)({"has-children":o.item.children})},[(0,a.createElementVNode)("div",{class:"item",onClick:t[0]||(t[0]=e=>r.onClick(o.item))},[(0,a.createVNode)(c,{value:o.item.children?"folder":o.item.icon,size:"1em"},null,8,["value"]),(0,a.createElementVNode)("span",l,(0,a.toDisplayString)(o.item.text),1)]),o.item.children?((0,a.openBlock)(),(0,a.createElementBlock)("ul",s,[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(o.item.children,(e,t)=>((0,a.openBlock)(),(0,a.createBlock)(d,{key:t,item:e},null,8,["item"]))),128))])):(0,a.createCommentVNode)("v-if",!0)],2)),[[p,o.item.tooltip]])}],["__scopeId","data-v-6b17b06f"]])},props:{menu:{type:Object}},data:()=>({menuData:[{icon:"fas fa-home",text:"Главная",link:"#"},{icon:"folder",text:"Товары",link:"#",children:[{icon:"bell",text:"Электроника",link:"#",children:[{icon:"cog",text:"Смартфоны",link:"#"},{icon:"fas fa-tablet-alt",text:"Планшеты",link:"#"}]},{icon:"fas fa-tshirt",text:"Одежда",link:"#"}]},{icon:"fas fa-info-circle",text:"О нас",link:"#",children:[{icon:"fas fa-history",text:"История",link:"#"},{icon:"fas fa-users",text:"Команда",link:"#"}]},{icon:"fas fa-envelope",text:"Контакты",link:"#"}]})},d=(0,r.A)(c,[["render",function(e,t,o,l,s,i){const r=(0,a.resolveComponent)("MenuItem");return(0,a.openBlock)(),(0,a.createElementBlock)("ul",n,[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(o.menu,(e,t)=>((0,a.openBlock)(),(0,a.createBlock)(r,{key:t,item:e},null,8,["item"]))),128))])}],["__scopeId","data-v-30250442"]])},938:(e,t,o)=>{e.exports=o.p+"assets/3d592ccd944e1f3ef7b0.png"},958:(e,t,o)=>{o.d(t,{A:()=>v});var a=o(15);const n={class:"app-container canvas-container"},l={class:"workspace"},s={id:"editorcanvas",ref:"editorcanvas"},i={id:"playcanvas",ref:"playcanvas"},r={id:"playui",ref:"playui"},c={key:0,class:"splash"};var d=o(166),p=o(822),u=o(875),m=o(454);const h={data:()=>({selectedElement:null,loadComponent:"div",modulesLoaded:!1,progress:0}),computed:{ui(){return this.$app.ui},hierarhyAllow(){return this.$app.engine.instances.length>0},options(){return this.$app.options},app(){return this.$app.app},tools:()=>toolse,models(){return this.$app.models},ready(){return this.$app.app.ready},toasts(){return this.$app.toasts},modal(){return this.$app.modal},translations(){return this.$app.translations}},methods:{async start(){this.$app.app.ready=!0},waitCanvasSize(e){const t=window.devicePixelRatio||1;e.forEach(e=>{e.width=e.clientWidth*t,e.height=e.clientHeight*t})}},async mounted(){document.documentElement.setAttribute("data-theme","dark"),window.THREE=u,await this.$app.app.init(),await this.$app.modules.init();const e=this.$refs.editorcanvas,t=this.$refs.playcanvas;this.waitCanvasSize([e,t]);const o=["actions","assets","models","modules","project","slides"],a=new URLSearchParams(window.location.search),n=a.get("src");let l;switch(await this.$app.app.init(),await this.$app.templates.init(),n){case"db":default:this.$app.project.uid=a.get("db")||"empty",await m.A.Init(this.$app.project.uid,o,"uid");const e=[];for(let t=0;t<o.length;t++){const a=await m.A.getAllItems(o[t]);e.push(a)}const[t=[],n=[],s=[],i=[],r={uid:this.$app.project.uid},c=[]]=e;l={actions:t,assets:n,models:s,modules:i,project:r,slides:c};break;case"url":const d=await fetch(a.get("url"));l=await d.json(),this.$app.project.uid=l.project.uid,await m.A.Init(this.$app.project.uid,o,"uid")}this.$app.project.init(l.project),this.$app.projects.init(this.$app.project.uid),await new Promise(e=>{this.$nextTick(e)}),this.loadComponent="LoaderScreen",console.log("---LOAD ENGINE---"),await this.$app.engine.load(),console.log("---LOAD MODULES---"),await this.$app.modules.loadUserModules(l.modules),console.log("---LOAD ASSETS AND ACTIONS---"),await Promise.all([this.$app.assets.init(l.assets,e=>{this.progress=e}),this.$app.actions.init(l.actions)]),console.log("---LOAD END---"),this.$app.engine.Project.Init(t),this.$app.engine.Project.Start(),console.log("---BUILD SCENES---"),await p.A.Init(e),await this.$app.engine.start();const s=this.$app.engine.CssManager;await s.Init(this.$refs.playui,t),this.$app.project.on("create",e=>{s.OnCreate(e,this.$app.ui,this.$app.slides)}),this.$app.project.on("remove",(e,t)=>{s.OnRemove(t,this.$app.ui)});try{console.log("---INSTANCED MODELS---"),await this.$app.project.load(l.models)}catch(e){n&&"db"!==n||(console.warn(e),this.$app.toasts.add({message:"Error loading project",type:"alerticon",timehide:!0}))}if(console.log("---BUILD SLIDES---"),0===l.slides.length){const e=await this.$app.slides.add({name:"Main",props:{},actions:[]});l.slides.push(e)}await this.$app.slides.load(l.slides),this.progress=100,l.slides.length>0&&(console.log("---ACTIVATE FIRST SLIDE---"),this.$app.slides.goto(0)),console.log("---READY---"),this.app.ready=!0},components:{UI:d.A}},v=(0,o(262).A)(h,[["render",function(e,t,o,d,p,u){const m=(0,a.resolveComponent)("UI"),h=(0,a.resolveComponent)("Modal"),v=(0,a.resolveComponent)("Toasts");return(0,a.openBlock)(),(0,a.createElementBlock)("div",n,[(0,a.createElementVNode)("div",l,[(0,a.createElementVNode)("canvas",s,null,512),(0,a.createElementVNode)("canvas",i,null,512),(0,a.createElementVNode)("div",r,[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(u.ui.elements,(e,t)=>((0,a.openBlock)(),(0,a.createBlock)((0,a.resolveDynamicComponent)(e.component),(0,a.mergeProps)({onMounted:u.ui.onElementMount,key:t},(0,a.toHandlers)(e.events||{}),{ref_for:!0},e.data),null,16,["onMounted"]))),128))],512),(0,a.createVNode)(m,{element:p.selectedElement},null,8,["element"])]),u.ready?(0,a.createCommentVNode)("v-if",!0):((0,a.openBlock)(),(0,a.createElementBlock)("div",c,[((0,a.openBlock)(),(0,a.createBlock)((0,a.resolveDynamicComponent)(p.loadComponent),{loadingProgress:p.progress,onClick:u.start},null,8,["loadingProgress","onClick"]))])),u.modal.isVisible?((0,a.openBlock)(),(0,a.createBlock)(h,{key:1})):(0,a.createCommentVNode)("v-if",!0),(0,a.createVNode)(v)])}]])},982:(e,t,o)=>{o.d(t,{A:()=>r});var a=o(15);const n={style:{display:"grid","grid-template-columns":"96px 1fr"}},l=["value"],s={key:1},i={name:"ModelTypes",data:()=>({types:["model","camera","chart3d"]}),props:{selected:{type:Object}}},r=(0,o(262).A)(i,[["render",function(e,t,o,i,r,c){return(0,a.openBlock)(),(0,a.createElementBlock)("div",n,[t[1]||(t[1]=(0,a.createElementVNode)("div",null,"Тип:",-1)),r.types.includes(o.selected.type)?(0,a.withDirectives)(((0,a.openBlock)(),(0,a.createElementBlock)("select",{key:0,class:"typeslist","onUpdate:modelValue":t[0]||(t[0]=e=>o.selected.type=e)},[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(r.types,e=>((0,a.openBlock)(),(0,a.createElementBlock)("option",{value:e},(0,a.toDisplayString)(e),9,l))),256))],512)),[[a.vModelSelect,o.selected.type]]):((0,a.openBlock)(),(0,a.createElementBlock)("div",s,(0,a.toDisplayString)(o.selected.type),1))])}]])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
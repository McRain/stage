/*! For license information please see vendors-27545368.7c3c65e7.js.LICENSE.txt */
"use strict";(self.webpackChunk_reneos_slider_editor=self.webpackChunk_reneos_slider_editor||[]).push([[489],{33:(t,e,n)=>{function s(t){const e=Object.create(null);for(const n of t.split(","))e[n]=1;return t=>t in e}n.d(e,{$3:()=>d,$H:()=>V,BH:()=>Q,BX:()=>tt,Bm:()=>w,C4:()=>K,CE:()=>f,CP:()=>h,DY:()=>Y,Gv:()=>S,J$:()=>q,Kg:()=>b,MZ:()=>i,Mp:()=>l,NO:()=>a,Oj:()=>o,PT:()=>k,Qd:()=>T,Ro:()=>N,SU:()=>A,TF:()=>p,Tg:()=>I,Tn:()=>g,Tr:()=>U,We:()=>B,X$:()=>c,Y2:()=>J,ZH:()=>O,Zf:()=>E,_B:()=>$,bB:()=>X,cy:()=>m,gd:()=>v,pD:()=>s,pU:()=>rt,rU:()=>L,tE:()=>r,u3:()=>et,vM:()=>_,v_:()=>st,yI:()=>C,yL:()=>M,yQ:()=>Z});const i={},o=[],r=()=>{},a=()=>!1,l=t=>111===t.charCodeAt(0)&&110===t.charCodeAt(1)&&(t.charCodeAt(2)>122||t.charCodeAt(2)<97),h=t=>t.startsWith("onUpdate:"),c=Object.assign,p=(t,e)=>{const n=t.indexOf(e);n>-1&&t.splice(n,1)},u=Object.prototype.hasOwnProperty,d=(t,e)=>u.call(t,e),m=Array.isArray,f=t=>"[object Map]"===P(t),_=t=>"[object Set]"===P(t),y=t=>"[object Date]"===P(t),v=t=>"[object RegExp]"===P(t),g=t=>"function"==typeof t,b=t=>"string"==typeof t,w=t=>"symbol"==typeof t,S=t=>null!==t&&"object"==typeof t,M=t=>(S(t)||g(t))&&g(t.then)&&g(t.catch),x=Object.prototype.toString,P=t=>x.call(t),E=t=>P(t).slice(8,-1),T=t=>"[object Object]"===P(t),C=t=>b(t)&&"NaN"!==t&&"-"!==t[0]&&""+parseInt(t,10)===t,A=s(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),R=t=>{const e=Object.create(null);return n=>e[n]||(e[n]=t(n))},D=/-\w/g,k=R(t=>t.replace(D,t=>t.slice(1).toUpperCase())),j=/\B([A-Z])/g,I=R(t=>t.replace(j,"-$1").toLowerCase()),O=R(t=>t.charAt(0).toUpperCase()+t.slice(1)),L=R(t=>t?`on${O(t)}`:""),V=(t,e)=>!Object.is(t,e),Y=(t,...e)=>{for(let n=0;n<t.length;n++)t[n](...e)},Z=(t,e,n,s=!1)=>{Object.defineProperty(t,e,{configurable:!0,enumerable:!1,writable:s,value:n})},X=t=>{const e=parseFloat(t);return isNaN(e)?t:e},N=t=>{const e=b(t)?Number(t):NaN;return isNaN(e)?t:e};let z;const B=()=>z||(z="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:{}),Q=s("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error,Symbol");function U(t){if(m(t)){const e={};for(let n=0;n<t.length;n++){const s=t[n],i=b(s)?F(s):U(s);if(i)for(const t in i)e[t]=i[t]}return e}if(b(t)||S(t))return t}const G=/;(?![^(]*\))/g,H=/:([^]+)/,W=/\/\*[^]*?\*\//g;function F(t){const e={};return t.replace(W,"").split(G).forEach(t=>{if(t){const n=t.split(H);n.length>1&&(e[n[0].trim()]=n[1].trim())}}),e}function K(t){let e="";if(b(t))e=t;else if(m(t))for(let n=0;n<t.length;n++){const s=K(t[n]);s&&(e+=s+" ")}else if(S(t))for(const n in t)t[n]&&(e+=n+" ");return e.trim()}function $(t){if(!t)return null;let{class:e,style:n}=t;return e&&!b(e)&&(t.class=K(e)),n&&(t.style=U(n)),t}const q=s("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function J(t){return!!t||""===t}function tt(t,e){if(t===e)return!0;let n=y(t),s=y(e);if(n||s)return!(!n||!s)&&t.getTime()===e.getTime();if(n=w(t),s=w(e),n||s)return t===e;if(n=m(t),s=m(e),n||s)return!(!n||!s)&&function(t,e){if(t.length!==e.length)return!1;let n=!0;for(let s=0;n&&s<t.length;s++)n=tt(t[s],e[s]);return n}(t,e);if(n=S(t),s=S(e),n||s){if(!n||!s)return!1;if(Object.keys(t).length!==Object.keys(e).length)return!1;for(const n in t){const s=t.hasOwnProperty(n),i=e.hasOwnProperty(n);if(s&&!i||!s&&i||!tt(t[n],e[n]))return!1}}return String(t)===String(e)}function et(t,e){return t.findIndex(t=>tt(t,e))}const nt=t=>!(!t||!0!==t.__v_isRef),st=t=>b(t)?t:null==t?"":m(t)||S(t)&&(t.toString===x||!g(t.toString))?nt(t)?st(t.value):JSON.stringify(t,it,2):String(t),it=(t,e)=>nt(e)?it(t,e.value):f(e)?{[`Map(${e.size})`]:[...e.entries()].reduce((t,[e,n],s)=>(t[ot(e,s)+" =>"]=n,t),{})}:_(e)?{[`Set(${e.size})`]:[...e.values()].map(t=>ot(t))}:w(e)?ot(e):!S(e)||m(e)||T(e)?e:String(e),ot=(t,e="")=>{var n;return w(t)?`Symbol(${null!=(n=t.description)?n:e})`:t};function rt(t){return null==t?"initial":"string"==typeof t?""===t?" ":t:("number"==typeof t&&Number.isFinite(t),String(t))}},302:(t,e,n)=>{n.r(e),n.d(e,{default:()=>l});const s={},i={},o=(t,e,n)=>{null==i[t]&&(i[t]=[]),i[t].push({handler:n,once:e})};class r{static Add(t){for(const[e,n]of Object.entries(t))s[e]=n,r.Emit("add",e,n)}static Remove(t){if(!s[t])return;const e=s[t];delete s[t],r.Emit("remove",t,e)}static Init(t){return t&&r.Add(t),r.Emit("init"),a}static On(t,e){o(t,!1,e)}static Once(t,e){o(t,!0,e)}static Off(t,e){const n=i[t];if(n){for(let t=n.length-1;t>=0;t--)n[t].handler===e&&n.splice(t,1);0===n.length&&delete i[t]}}static async Emit(t,...e){const n=i[t];if(null==n)return;const s=[];for(let t=n.length-1;t>=0;t--){const i=n[t];s.push(i.handler.apply(null,e)),i.once&&n.splice(t,1)}await Promise.allSettled(s)}}const a=new Proxy(r,{get:(t,e)=>e in t?t[e]:s[e]}),l=a},953:(t,e,n)=>{n.d(e,{BA:()=>Yt,C4:()=>C,EW:()=>Ft,Gc:()=>gt,IG:()=>Ct,IJ:()=>jt,KR:()=>kt,Kh:()=>vt,PP:()=>$t,Pr:()=>Xt,QW:()=>Bt,QZ:()=>x,R1:()=>Vt,Tm:()=>xt,Ul:()=>Kt,X2:()=>p,Yv:()=>ee,a1:()=>Rt,bl:()=>A,ch:()=>ne,ds:()=>P,fE:()=>Pt,g8:()=>Mt,hV:()=>ie,hZ:()=>X,i9:()=>Dt,jr:()=>h,ju:()=>Et,lJ:()=>At,lW:()=>Gt,mu:()=>Lt,nD:()=>wt,o5:()=>l,qA:()=>z,rY:()=>zt,tB:()=>bt,u4:()=>Z,uY:()=>a,ux:()=>Tt,wB:()=>se,yC:()=>r});var s=n(33);let i,o;class r{constructor(t=!1){this.detached=t,this._active=!0,this._on=0,this.effects=[],this.cleanups=[],this._isPaused=!1,this.parent=i,!t&&i&&(this.index=(i.scopes||(i.scopes=[])).push(this)-1)}get active(){return this._active}pause(){if(this._active){let t,e;if(this._isPaused=!0,this.scopes)for(t=0,e=this.scopes.length;t<e;t++)this.scopes[t].pause();for(t=0,e=this.effects.length;t<e;t++)this.effects[t].pause()}}resume(){if(this._active&&this._isPaused){let t,e;if(this._isPaused=!1,this.scopes)for(t=0,e=this.scopes.length;t<e;t++)this.scopes[t].resume();for(t=0,e=this.effects.length;t<e;t++)this.effects[t].resume()}}run(t){if(this._active){const e=i;try{return i=this,t()}finally{i=e}}}on(){1===++this._on&&(this.prevScope=i,i=this)}off(){this._on>0&&0===--this._on&&(i=this.prevScope,this.prevScope=void 0)}stop(t){if(this._active){let e,n;for(this._active=!1,e=0,n=this.effects.length;e<n;e++)this.effects[e].stop();for(this.effects.length=0,e=0,n=this.cleanups.length;e<n;e++)this.cleanups[e]();if(this.cleanups.length=0,this.scopes){for(e=0,n=this.scopes.length;e<n;e++)this.scopes[e].stop(!0);this.scopes.length=0}if(!this.detached&&this.parent&&!t){const t=this.parent.scopes.pop();t&&t!==this&&(this.parent.scopes[this.index]=t,t.index=this.index)}this.parent=void 0}}}function a(t){return new r(t)}function l(){return i}function h(t,e=!1){i&&i.cleanups.push(t)}const c=new WeakSet;class p{constructor(t){this.fn=t,this.deps=void 0,this.depsTail=void 0,this.flags=5,this.next=void 0,this.cleanup=void 0,this.scheduler=void 0,i&&i.active&&i.effects.push(this)}pause(){this.flags|=64}resume(){64&this.flags&&(this.flags&=-65,c.has(this)&&(c.delete(this),this.trigger()))}notify(){2&this.flags&&!(32&this.flags)||8&this.flags||f(this)}run(){if(!(1&this.flags))return this.fn();this.flags|=2,R(this),v(this);const t=o,e=E;o=this,E=!0;try{return this.fn()}finally{g(this),o=t,E=e,this.flags&=-3}}stop(){if(1&this.flags){for(let t=this.deps;t;t=t.nextDep)S(t);this.deps=this.depsTail=void 0,R(this),this.onStop&&this.onStop(),this.flags&=-2}}trigger(){64&this.flags?c.add(this):this.scheduler?this.scheduler():this.runIfDirty()}runIfDirty(){b(this)&&this.run()}get dirty(){return b(this)}}let u,d,m=0;function f(t,e=!1){if(t.flags|=8,e)return t.next=d,void(d=t);t.next=u,u=t}function _(){m++}function y(){if(--m>0)return;if(d){let t=d;for(d=void 0;t;){const e=t.next;t.next=void 0,t.flags&=-9,t=e}}let t;for(;u;){let e=u;for(u=void 0;e;){const n=e.next;if(e.next=void 0,e.flags&=-9,1&e.flags)try{e.trigger()}catch(e){t||(t=e)}e=n}}if(t)throw t}function v(t){for(let e=t.deps;e;e=e.nextDep)e.version=-1,e.prevActiveLink=e.dep.activeLink,e.dep.activeLink=e}function g(t){let e,n=t.depsTail,s=n;for(;s;){const t=s.prevDep;-1===s.version?(s===n&&(n=t),S(s),M(s)):e=s,s.dep.activeLink=s.prevActiveLink,s.prevActiveLink=void 0,s=t}t.deps=e,t.depsTail=n}function b(t){for(let e=t.deps;e;e=e.nextDep)if(e.dep.version!==e.version||e.dep.computed&&(w(e.dep.computed)||e.dep.version!==e.version))return!0;return!!t._dirty}function w(t){if(4&t.flags&&!(16&t.flags))return;if(t.flags&=-17,t.globalVersion===D)return;if(t.globalVersion=D,!t.isSSR&&128&t.flags&&(!t.deps&&!t._dirty||!b(t)))return;t.flags|=2;const e=t.dep,n=o,i=E;o=t,E=!0;try{v(t);const n=t.fn(t._value);(0===e.version||(0,s.$H)(n,t._value))&&(t.flags|=128,t._value=n,e.version++)}catch(t){throw e.version++,t}finally{o=n,E=i,g(t),t.flags&=-3}}function S(t,e=!1){const{dep:n,prevSub:s,nextSub:i}=t;if(s&&(s.nextSub=i,t.prevSub=void 0),i&&(i.prevSub=s,t.nextSub=void 0),n.subs===t&&(n.subs=s,!s&&n.computed)){n.computed.flags&=-5;for(let t=n.computed.deps;t;t=t.nextDep)S(t,!0)}e||--n.sc||!n.map||n.map.delete(n.key)}function M(t){const{prevDep:e,nextDep:n}=t;e&&(e.nextDep=n,t.prevDep=void 0),n&&(n.prevDep=e,t.nextDep=void 0)}function x(t,e){t.effect instanceof p&&(t=t.effect.fn);const n=new p(t);e&&(0,s.X$)(n,e);try{n.run()}catch(t){throw n.stop(),t}const i=n.run.bind(n);return i.effect=n,i}function P(t){t.effect.stop()}let E=!0;const T=[];function C(){T.push(E),E=!1}function A(){const t=T.pop();E=void 0===t||t}function R(t){const{cleanup:e}=t;if(t.cleanup=void 0,e){const t=o;o=void 0;try{e()}finally{o=t}}}let D=0;class k{constructor(t,e){this.sub=t,this.dep=e,this.version=e.version,this.nextDep=this.prevDep=this.nextSub=this.prevSub=this.prevActiveLink=void 0}}class j{constructor(t){this.computed=t,this.version=0,this.activeLink=void 0,this.subs=void 0,this.map=void 0,this.key=void 0,this.sc=0,this.__v_skip=!0}track(t){if(!o||!E||o===this.computed)return;let e=this.activeLink;if(void 0===e||e.sub!==o)e=this.activeLink=new k(o,this),o.deps?(e.prevDep=o.depsTail,o.depsTail.nextDep=e,o.depsTail=e):o.deps=o.depsTail=e,I(e);else if(-1===e.version&&(e.version=this.version,e.nextDep)){const t=e.nextDep;t.prevDep=e.prevDep,e.prevDep&&(e.prevDep.nextDep=t),e.prevDep=o.depsTail,e.nextDep=void 0,o.depsTail.nextDep=e,o.depsTail=e,o.deps===e&&(o.deps=t)}return e}trigger(t){this.version++,D++,this.notify(t)}notify(t){_();try{for(let t=this.subs;t;t=t.prevSub)t.sub.notify()&&t.sub.dep.notify()}finally{y()}}}function I(t){if(t.dep.sc++,4&t.sub.flags){const e=t.dep.computed;if(e&&!t.dep.subs){e.flags|=20;for(let t=e.deps;t;t=t.nextDep)I(t)}const n=t.dep.subs;n!==t&&(t.prevSub=n,n&&(n.nextSub=t)),t.dep.subs=t}}const O=new WeakMap,L=Symbol(""),V=Symbol(""),Y=Symbol("");function Z(t,e,n){if(E&&o){let e=O.get(t);e||O.set(t,e=new Map);let s=e.get(n);s||(e.set(n,s=new j),s.map=e,s.key=n),s.track()}}function X(t,e,n,i,o,r){const a=O.get(t);if(!a)return void D++;const l=t=>{t&&t.trigger()};if(_(),"clear"===e)a.forEach(l);else{const o=(0,s.cy)(t),r=o&&(0,s.yI)(n);if(o&&"length"===n){const t=Number(i);a.forEach((e,n)=>{("length"===n||n===Y||!(0,s.Bm)(n)&&n>=t)&&l(e)})}else switch((void 0!==n||a.has(void 0))&&l(a.get(n)),r&&l(a.get(Y)),e){case"add":o?r&&l(a.get("length")):(l(a.get(L)),(0,s.CE)(t)&&l(a.get(V)));break;case"delete":o||(l(a.get(L)),(0,s.CE)(t)&&l(a.get(V)));break;case"set":(0,s.CE)(t)&&l(a.get(L))}}y()}function N(t){const e=Tt(t);return e===t?e:(Z(e,0,Y),Pt(t)?e:e.map(At))}function z(t){return Z(t=Tt(t),0,Y),t}const B={__proto__:null,[Symbol.iterator](){return Q(this,Symbol.iterator,At)},concat(...t){return N(this).concat(...t.map(t=>(0,s.cy)(t)?N(t):t))},entries(){return Q(this,"entries",t=>(t[1]=At(t[1]),t))},every(t,e){return G(this,"every",t,e,void 0,arguments)},filter(t,e){return G(this,"filter",t,e,t=>t.map(At),arguments)},find(t,e){return G(this,"find",t,e,At,arguments)},findIndex(t,e){return G(this,"findIndex",t,e,void 0,arguments)},findLast(t,e){return G(this,"findLast",t,e,At,arguments)},findLastIndex(t,e){return G(this,"findLastIndex",t,e,void 0,arguments)},forEach(t,e){return G(this,"forEach",t,e,void 0,arguments)},includes(...t){return W(this,"includes",t)},indexOf(...t){return W(this,"indexOf",t)},join(t){return N(this).join(t)},lastIndexOf(...t){return W(this,"lastIndexOf",t)},map(t,e){return G(this,"map",t,e,void 0,arguments)},pop(){return F(this,"pop")},push(...t){return F(this,"push",t)},reduce(t,...e){return H(this,"reduce",t,e)},reduceRight(t,...e){return H(this,"reduceRight",t,e)},shift(){return F(this,"shift")},some(t,e){return G(this,"some",t,e,void 0,arguments)},splice(...t){return F(this,"splice",t)},toReversed(){return N(this).toReversed()},toSorted(t){return N(this).toSorted(t)},toSpliced(...t){return N(this).toSpliced(...t)},unshift(...t){return F(this,"unshift",t)},values(){return Q(this,"values",At)}};function Q(t,e,n){const s=z(t),i=s[e]();return s===t||Pt(t)||(i._next=i.next,i.next=()=>{const t=i._next();return t.value&&(t.value=n(t.value)),t}),i}const U=Array.prototype;function G(t,e,n,s,i,o){const r=z(t),a=r!==t&&!Pt(t),l=r[e];if(l!==U[e]){const e=l.apply(t,o);return a?At(e):e}let h=n;r!==t&&(a?h=function(e,s){return n.call(this,At(e),s,t)}:n.length>2&&(h=function(e,s){return n.call(this,e,s,t)}));const c=l.call(r,h,s);return a&&i?i(c):c}function H(t,e,n,s){const i=z(t);let o=n;return i!==t&&(Pt(t)?n.length>3&&(o=function(e,s,i){return n.call(this,e,s,i,t)}):o=function(e,s,i){return n.call(this,e,At(s),i,t)}),i[e](o,...s)}function W(t,e,n){const s=Tt(t);Z(s,0,Y);const i=s[e](...n);return-1!==i&&!1!==i||!Et(n[0])?i:(n[0]=Tt(n[0]),s[e](...n))}function F(t,e,n=[]){C(),_();const s=Tt(t)[e].apply(t,n);return y(),A(),s}const K=(0,s.pD)("__proto__,__v_isRef,__isVue"),$=new Set(Object.getOwnPropertyNames(Symbol).filter(t=>"arguments"!==t&&"caller"!==t).map(t=>Symbol[t]).filter(s.Bm));function q(t){(0,s.Bm)(t)||(t=String(t));const e=Tt(this);return Z(e,0,t),e.hasOwnProperty(t)}class J{constructor(t=!1,e=!1){this._isReadonly=t,this._isShallow=e}get(t,e,n){if("__v_skip"===e)return t.__v_skip;const i=this._isReadonly,o=this._isShallow;if("__v_isReactive"===e)return!i;if("__v_isReadonly"===e)return i;if("__v_isShallow"===e)return o;if("__v_raw"===e)return n===(i?o?yt:_t:o?ft:mt).get(t)||Object.getPrototypeOf(t)===Object.getPrototypeOf(n)?t:void 0;const r=(0,s.cy)(t);if(!i){let t;if(r&&(t=B[e]))return t;if("hasOwnProperty"===e)return q}const a=Reflect.get(t,e,Dt(t)?t:n);return((0,s.Bm)(e)?$.has(e):K(e))?a:(i||Z(t,0,e),o?a:Dt(a)?r&&(0,s.yI)(e)?a:a.value:(0,s.Gv)(a)?i?bt(a):vt(a):a)}}class tt extends J{constructor(t=!1){super(!1,t)}set(t,e,n,i){let o=t[e];if(!this._isShallow){const e=xt(o);if(Pt(n)||xt(n)||(o=Tt(o),n=Tt(n)),!(0,s.cy)(t)&&Dt(o)&&!Dt(n))return e||(o.value=n),!0}const r=(0,s.cy)(t)&&(0,s.yI)(e)?Number(e)<t.length:(0,s.$3)(t,e),a=Reflect.set(t,e,n,Dt(t)?t:i);return t===Tt(i)&&(r?(0,s.$H)(n,o)&&X(t,"set",e,n):X(t,"add",e,n)),a}deleteProperty(t,e){const n=(0,s.$3)(t,e),i=(t[e],Reflect.deleteProperty(t,e));return i&&n&&X(t,"delete",e,void 0),i}has(t,e){const n=Reflect.has(t,e);return(0,s.Bm)(e)&&$.has(e)||Z(t,0,e),n}ownKeys(t){return Z(t,0,(0,s.cy)(t)?"length":L),Reflect.ownKeys(t)}}class et extends J{constructor(t=!1){super(!0,t)}set(t,e){return!0}deleteProperty(t,e){return!0}}const nt=new tt,st=new et,it=new tt(!0),ot=new et(!0),rt=t=>t,at=t=>Reflect.getPrototypeOf(t);function lt(t){return function(...e){return"delete"!==t&&("clear"===t?void 0:this)}}function ht(t,e){const n=function(t,e){const n={get(n){const i=this.__v_raw,o=Tt(i),r=Tt(n);t||((0,s.$H)(n,r)&&Z(o,0,n),Z(o,0,r));const{has:a}=at(o),l=e?rt:t?Rt:At;return a.call(o,n)?l(i.get(n)):a.call(o,r)?l(i.get(r)):void(i!==o&&i.get(n))},get size(){const e=this.__v_raw;return!t&&Z(Tt(e),0,L),e.size},has(e){const n=this.__v_raw,i=Tt(n),o=Tt(e);return t||((0,s.$H)(e,o)&&Z(i,0,e),Z(i,0,o)),e===o?n.has(e):n.has(e)||n.has(o)},forEach(n,s){const i=this,o=i.__v_raw,r=Tt(o),a=e?rt:t?Rt:At;return!t&&Z(r,0,L),o.forEach((t,e)=>n.call(s,a(t),a(e),i))}};return(0,s.X$)(n,t?{add:lt("add"),set:lt("set"),delete:lt("delete"),clear:lt("clear")}:{add(t){e||Pt(t)||xt(t)||(t=Tt(t));const n=Tt(this);return at(n).has.call(n,t)||(n.add(t),X(n,"add",t,t)),this},set(t,n){e||Pt(n)||xt(n)||(n=Tt(n));const i=Tt(this),{has:o,get:r}=at(i);let a=o.call(i,t);a||(t=Tt(t),a=o.call(i,t));const l=r.call(i,t);return i.set(t,n),a?(0,s.$H)(n,l)&&X(i,"set",t,n):X(i,"add",t,n),this},delete(t){const e=Tt(this),{has:n,get:s}=at(e);let i=n.call(e,t);i||(t=Tt(t),i=n.call(e,t)),s&&s.call(e,t);const o=e.delete(t);return i&&X(e,"delete",t,void 0),o},clear(){const t=Tt(this),e=0!==t.size,n=t.clear();return e&&X(t,"clear",void 0,void 0),n}}),["keys","values","entries",Symbol.iterator].forEach(i=>{n[i]=function(t,e,n){return function(...i){const o=this.__v_raw,r=Tt(o),a=(0,s.CE)(r),l="entries"===t||t===Symbol.iterator&&a,h="keys"===t&&a,c=o[t](...i),p=n?rt:e?Rt:At;return!e&&Z(r,0,h?V:L),{next(){const{value:t,done:e}=c.next();return e?{value:t,done:e}:{value:l?[p(t[0]),p(t[1])]:p(t),done:e}},[Symbol.iterator](){return this}}}}(i,t,e)}),n}(t,e);return(e,i,o)=>"__v_isReactive"===i?!t:"__v_isReadonly"===i?t:"__v_raw"===i?e:Reflect.get((0,s.$3)(n,i)&&i in e?n:e,i,o)}const ct={get:ht(!1,!1)},pt={get:ht(!1,!0)},ut={get:ht(!0,!1)},dt={get:ht(!0,!0)},mt=new WeakMap,ft=new WeakMap,_t=new WeakMap,yt=new WeakMap;function vt(t){return xt(t)?t:St(t,!1,nt,ct,mt)}function gt(t){return St(t,!1,it,pt,ft)}function bt(t){return St(t,!0,st,ut,_t)}function wt(t){return St(t,!0,ot,dt,yt)}function St(t,e,n,i,o){if(!(0,s.Gv)(t))return t;if(t.__v_raw&&(!e||!t.__v_isReactive))return t;const r=(a=t).__v_skip||!Object.isExtensible(a)?0:function(t){switch(t){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((0,s.Zf)(a));var a;if(0===r)return t;const l=o.get(t);if(l)return l;const h=new Proxy(t,2===r?i:n);return o.set(t,h),h}function Mt(t){return xt(t)?Mt(t.__v_raw):!(!t||!t.__v_isReactive)}function xt(t){return!(!t||!t.__v_isReadonly)}function Pt(t){return!(!t||!t.__v_isShallow)}function Et(t){return!!t&&!!t.__v_raw}function Tt(t){const e=t&&t.__v_raw;return e?Tt(e):t}function Ct(t){return!(0,s.$3)(t,"__v_skip")&&Object.isExtensible(t)&&(0,s.yQ)(t,"__v_skip",!0),t}const At=t=>(0,s.Gv)(t)?vt(t):t,Rt=t=>(0,s.Gv)(t)?bt(t):t;function Dt(t){return!!t&&!0===t.__v_isRef}function kt(t){return It(t,!1)}function jt(t){return It(t,!0)}function It(t,e){return Dt(t)?t:new Ot(t,e)}class Ot{constructor(t,e){this.dep=new j,this.__v_isRef=!0,this.__v_isShallow=!1,this._rawValue=e?t:Tt(t),this._value=e?t:At(t),this.__v_isShallow=e}get value(){return this.dep.track(),this._value}set value(t){const e=this._rawValue,n=this.__v_isShallow||Pt(t)||xt(t);t=n?t:Tt(t),(0,s.$H)(t,e)&&(this._rawValue=t,this._value=n?t:At(t),this.dep.trigger())}}function Lt(t){t.dep&&t.dep.trigger()}function Vt(t){return Dt(t)?t.value:t}function Yt(t){return(0,s.Tn)(t)?t():Vt(t)}const Zt={get:(t,e,n)=>"__v_raw"===e?t:Vt(Reflect.get(t,e,n)),set:(t,e,n,s)=>{const i=t[e];return Dt(i)&&!Dt(n)?(i.value=n,!0):Reflect.set(t,e,n,s)}};function Xt(t){return Mt(t)?t:new Proxy(t,Zt)}class Nt{constructor(t){this.__v_isRef=!0,this._value=void 0;const e=this.dep=new j,{get:n,set:s}=t(e.track.bind(e),e.trigger.bind(e));this._get=n,this._set=s}get value(){return this._value=this._get()}set value(t){this._set(t)}}function zt(t){return new Nt(t)}function Bt(t){const e=(0,s.cy)(t)?new Array(t.length):{};for(const n in t)e[n]=Ht(t,n);return e}class Qt{constructor(t,e,n){this._object=t,this._key=e,this._defaultValue=n,this.__v_isRef=!0,this._value=void 0}get value(){const t=this._object[this._key];return this._value=void 0===t?this._defaultValue:t}set value(t){this._object[this._key]=t}get dep(){return function(t,e){const n=O.get(t);return n&&n.get(e)}(Tt(this._object),this._key)}}class Ut{constructor(t){this._getter=t,this.__v_isRef=!0,this.__v_isReadonly=!0,this._value=void 0}get value(){return this._value=this._getter()}}function Gt(t,e,n){return Dt(t)?t:(0,s.Tn)(t)?new Ut(t):(0,s.Gv)(t)&&arguments.length>1?Ht(t,e,n):kt(t)}function Ht(t,e,n){const s=t[e];return Dt(s)?s:new Qt(t,e,n)}class Wt{constructor(t,e,n){this.fn=t,this.setter=e,this._value=void 0,this.dep=new j(this),this.__v_isRef=!0,this.deps=void 0,this.depsTail=void 0,this.flags=16,this.globalVersion=D-1,this.next=void 0,this.effect=this,this.__v_isReadonly=!e,this.isSSR=n}notify(){if(this.flags|=16,!(8&this.flags||o===this))return f(this,!0),!0}get value(){const t=this.dep.track();return w(this),t&&(t.version=this.dep.version),this._value}set value(t){this.setter&&this.setter(t)}}function Ft(t,e,n=!1){let i,o;return(0,s.Tn)(t)?i=t:(i=t.get,o=t.set),new Wt(i,o,n)}const Kt={GET:"get",HAS:"has",ITERATE:"iterate"},$t={SET:"set",ADD:"add",DELETE:"delete",CLEAR:"clear"},qt={},Jt=new WeakMap;let te;function ee(){return te}function ne(t,e=!1,n=te){if(n){let e=Jt.get(n);e||Jt.set(n,e=[]),e.push(t)}}function se(t,e,n=s.MZ){const{immediate:i,deep:o,once:r,scheduler:a,augmentJob:h,call:c}=n,u=t=>o?t:Pt(t)||!1===o||0===o?ie(t,1):ie(t);let d,m,f,_,y=!1,v=!1;if(Dt(t)?(m=()=>t.value,y=Pt(t)):Mt(t)?(m=()=>u(t),y=!0):(0,s.cy)(t)?(v=!0,y=t.some(t=>Mt(t)||Pt(t)),m=()=>t.map(t=>Dt(t)?t.value:Mt(t)?u(t):(0,s.Tn)(t)?c?c(t,2):t():void 0)):m=(0,s.Tn)(t)?e?c?()=>c(t,2):t:()=>{if(f){C();try{f()}finally{A()}}const e=te;te=d;try{return c?c(t,3,[_]):t(_)}finally{te=e}}:s.tE,e&&o){const t=m,e=!0===o?1/0:o;m=()=>ie(t(),e)}const g=l(),b=()=>{d.stop(),g&&g.active&&(0,s.TF)(g.effects,d)};if(r&&e){const t=e;e=(...e)=>{t(...e),b()}}let w=v?new Array(t.length).fill(qt):qt;const S=t=>{if(1&d.flags&&(d.dirty||t))if(e){const t=d.run();if(o||y||(v?t.some((t,e)=>(0,s.$H)(t,w[e])):(0,s.$H)(t,w))){f&&f();const n=te;te=d;try{const n=[t,w===qt?void 0:v&&w[0]===qt?[]:w,_];w=t,c?c(e,3,n):e(...n)}finally{te=n}}}else d.run()};return h&&h(S),d=new p(m),d.scheduler=a?()=>a(S,!1):S,_=t=>ne(t,!1,d),f=d.onStop=()=>{const t=Jt.get(d);if(t){if(c)c(t,4);else for(const e of t)e();Jt.delete(d)}},e?i?S(!0):w=d.run():a?a(S.bind(null,!0),!0):d.run(),b.pause=d.pause.bind(d),b.resume=d.resume.bind(d),b.stop=b,b}function ie(t,e=1/0,n){if(e<=0||!(0,s.Gv)(t)||t.__v_skip)return t;if(((n=n||new Map).get(t)||0)>=e)return t;if(n.set(t,e),e--,Dt(t))ie(t.value,e,n);else if((0,s.cy)(t))for(let s=0;s<t.length;s++)ie(t[s],e,n);else if((0,s.vM)(t)||(0,s.CE)(t))t.forEach(t=>{ie(t,e,n)});else if((0,s.Qd)(t)){for(const s in t)ie(t[s],e,n);for(const s of Object.getOwnPropertySymbols(t))Object.prototype.propertyIsEnumerable.call(t,s)&&ie(t[s],e,n)}return t}},1987:(t,e,n)=>{n.r(e),n.d(e,{BaseTransition:()=>s.pR,BaseTransitionPropsValidators:()=>s.QP,Comment:()=>s.Mw,DeprecationTypes:()=>s.aT,EffectScope:()=>s.yC,ErrorCodes:()=>s.tG,ErrorTypeStrings:()=>s.ZQ,Fragment:()=>s.FK,KeepAlive:()=>s.PR,ReactiveEffect:()=>s.X2,Static:()=>s.jC,Suspense:()=>s.tY,Teleport:()=>s.Im,Text:()=>s.EY,TrackOpTypes:()=>s.Ul,Transition:()=>y,TransitionGroup:()=>ut,TriggerOpTypes:()=>s.PP,VueElement:()=>it,assertNumber:()=>s.U4,callWithAsyncErrorHandling:()=>s.qL,callWithErrorHandling:()=>s.gh,camelize:()=>s.PT,capitalize:()=>s.ZH,cloneVNode:()=>s.E3,compatUtils:()=>s.Y5,compile:()=>Ft,computed:()=>s.EW,createApp:()=>Bt,createBlock:()=>s.Wv,createCommentVNode:()=>s.Q3,createElementBlock:()=>s.CE,createElementVNode:()=>s.Lk,createHydrationRenderer:()=>s.ci,createPropsRestProxy:()=>s.bn,createRenderer:()=>s.K9,createSSRApp:()=>Qt,createSlots:()=>s.eX,createStaticVNode:()=>s.Fv,createTextVNode:()=>s.eW,createVNode:()=>s.bF,customRef:()=>s.rY,defineAsyncComponent:()=>s.$V,defineComponent:()=>s.pM,defineCustomElement:()=>et,defineEmits:()=>s.qP,defineExpose:()=>s.wk,defineModel:()=>s.NP,defineOptions:()=>s.GM,defineProps:()=>s.Yj,defineSSRCustomElement:()=>nt,defineSlots:()=>s.Lu,devtools:()=>s.lt,effect:()=>s.QZ,effectScope:()=>s.uY,getCurrentInstance:()=>s.nI,getCurrentScope:()=>s.o5,getCurrentWatcher:()=>s.Yv,getTransitionRawChildren:()=>s.Df,guardReactiveProps:()=>s.Ng,h:()=>s.h,handleError:()=>s.H4,hasInjectionContext:()=>s.PS,hydrate:()=>zt,hydrateOnIdle:()=>s.rU,hydrateOnInteraction:()=>s.Tq,hydrateOnMediaQuery:()=>s.dA,hydrateOnVisible:()=>s.Pn,initCustomFormatter:()=>s.y$,initDirectivesForSSR:()=>Wt,inject:()=>s.WQ,isMemoSame:()=>s.Bs,isProxy:()=>s.ju,isReactive:()=>s.g8,isReadonly:()=>s.Tm,isRef:()=>s.i9,isRuntimeOnly:()=>s.wX,isShallow:()=>s.fE,isVNode:()=>s.vv,markRaw:()=>s.IG,mergeDefaults:()=>s.HF,mergeModels:()=>s.zz,mergeProps:()=>s.v6,nextTick:()=>s.dY,normalizeClass:()=>s.C4,normalizeProps:()=>s._B,normalizeStyle:()=>s.Tr,onActivated:()=>s.n,onBeforeMount:()=>s.KC,onBeforeUnmount:()=>s.xo,onBeforeUpdate:()=>s.Ic,onDeactivated:()=>s.Y4,onErrorCaptured:()=>s.qG,onMounted:()=>s.sV,onRenderTracked:()=>s.qR,onRenderTriggered:()=>s.bj,onScopeDispose:()=>s.jr,onServerPrefetch:()=>s.SS,onUnmounted:()=>s.hi,onUpdated:()=>s.$u,onWatcherCleanup:()=>s.ch,openBlock:()=>s.uX,popScopeId:()=>s.jt,provide:()=>s.Gt,proxyRefs:()=>s.Pr,pushScopeId:()=>s.Qi,queuePostFlushCb:()=>s.Dl,reactive:()=>s.Kh,readonly:()=>s.tB,ref:()=>s.KR,registerRuntimeCompiler:()=>s.tC,render:()=>Nt,renderList:()=>s.pI,renderSlot:()=>s.RG,resolveComponent:()=>s.g2,resolveDirective:()=>s.gN,resolveDynamicComponent:()=>s.$y,resolveFilter:()=>s.LJ,resolveTransitionHooks:()=>s.OW,setBlockTracking:()=>s.Vq,setDevtoolsHook:()=>s.iD,setTransitionHooks:()=>s.MZ,shallowReactive:()=>s.Gc,shallowReadonly:()=>s.nD,shallowRef:()=>s.IJ,ssrContextKey:()=>s.Fw,ssrUtils:()=>s.Gw,stop:()=>s.ds,toDisplayString:()=>s.v_,toHandlerKey:()=>s.Kf,toHandlers:()=>s.Tb,toRaw:()=>s.ux,toRef:()=>s.lW,toRefs:()=>s.QW,toValue:()=>s.BA,transformVNodeArgs:()=>s.gW,triggerRef:()=>s.mu,unref:()=>s.R1,useAttrs:()=>s.OA,useCssModule:()=>at,useCssVars:()=>L,useHost:()=>ot,useId:()=>s.Bi,useModel:()=>s.fn,useSSRContext:()=>s.LM,useShadowRoot:()=>rt,useSlots:()=>s.Ht,useTemplateRef:()=>s.rk,useTransitionState:()=>s.Gy,vModelCheckbox:()=>wt,vModelDynamic:()=>Ct,vModelRadio:()=>Mt,vModelSelect:()=>xt,vModelText:()=>bt,vShow:()=>j,version:()=>s.rE,warn:()=>s.R8,watch:()=>s.wB,watchEffect:()=>s.nT,watchPostEffect:()=>s.p9,watchSyncEffect:()=>s.U_,withAsyncContext:()=>s.E,withCtx:()=>s.k6,withDefaults:()=>s.rO,withDirectives:()=>s.bo,withKeys:()=>Ot,withMemo:()=>s.bU,withModifiers:()=>jt,withScopeId:()=>s.YY});var s=n(641),i=n(33),o=n(953);let r;const a="undefined"!=typeof window&&window.trustedTypes;if(a)try{r=a.createPolicy("vue",{createHTML:t=>t})}catch(t){}const l=r?t=>r.createHTML(t):t=>t,h="undefined"!=typeof document?document:null,c=h&&h.createElement("template"),p={insert:(t,e,n)=>{e.insertBefore(t,n||null)},remove:t=>{const e=t.parentNode;e&&e.removeChild(t)},createElement:(t,e,n,s)=>{const i="svg"===e?h.createElementNS("http://www.w3.org/2000/svg",t):"mathml"===e?h.createElementNS("http://www.w3.org/1998/Math/MathML",t):n?h.createElement(t,{is:n}):h.createElement(t);return"select"===t&&s&&null!=s.multiple&&i.setAttribute("multiple",s.multiple),i},createText:t=>h.createTextNode(t),createComment:t=>h.createComment(t),setText:(t,e)=>{t.nodeValue=e},setElementText:(t,e)=>{t.textContent=e},parentNode:t=>t.parentNode,nextSibling:t=>t.nextSibling,querySelector:t=>h.querySelector(t),setScopeId(t,e){t.setAttribute(e,"")},insertStaticContent(t,e,n,s,i,o){const r=n?n.previousSibling:e.lastChild;if(i&&(i===o||i.nextSibling))for(;e.insertBefore(i.cloneNode(!0),n),i!==o&&(i=i.nextSibling););else{c.innerHTML=l("svg"===s?`<svg>${t}</svg>`:"mathml"===s?`<math>${t}</math>`:t);const i=c.content;if("svg"===s||"mathml"===s){const t=i.firstChild;for(;t.firstChild;)i.appendChild(t.firstChild);i.removeChild(t)}e.insertBefore(i,n)}return[r?r.nextSibling:e.firstChild,n?n.previousSibling:e.lastChild]}},u="transition",d="animation",m=Symbol("_vtc"),f={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},_=(0,i.X$)({},s.QP,f),y=(t=>(t.displayName="Transition",t.props=_,t))((t,{slots:e})=>(0,s.h)(s.pR,b(t),e)),v=(t,e=[])=>{(0,i.cy)(t)?t.forEach(t=>t(...e)):t&&t(...e)},g=t=>!!t&&((0,i.cy)(t)?t.some(t=>t.length>1):t.length>1);function b(t){const e={};for(const n in t)n in f||(e[n]=t[n]);if(!1===t.css)return e;const{name:n="v",type:s,duration:o,enterFromClass:r=`${n}-enter-from`,enterActiveClass:a=`${n}-enter-active`,enterToClass:l=`${n}-enter-to`,appearFromClass:h=r,appearActiveClass:c=a,appearToClass:p=l,leaveFromClass:u=`${n}-leave-from`,leaveActiveClass:d=`${n}-leave-active`,leaveToClass:m=`${n}-leave-to`}=t,_=function(t){if(null==t)return null;if((0,i.Gv)(t))return[w(t.enter),w(t.leave)];{const e=w(t);return[e,e]}}(o),y=_&&_[0],b=_&&_[1],{onBeforeEnter:P,onEnter:T,onEnterCancelled:C,onLeave:A,onLeaveCancelled:D,onBeforeAppear:k=P,onAppear:j=T,onAppearCancelled:I=C}=e,O=(t,e,n,s)=>{t._enterCancelled=s,M(t,e?p:l),M(t,e?c:a),n&&n()},L=(t,e)=>{t._isLeaving=!1,M(t,u),M(t,m),M(t,d),e&&e()},V=t=>(e,n)=>{const i=t?j:T,o=()=>O(e,t,n);v(i,[e,o]),x(()=>{M(e,t?h:r),S(e,t?p:l),g(i)||E(e,s,y,o)})};return(0,i.X$)(e,{onBeforeEnter(t){v(P,[t]),S(t,r),S(t,a)},onBeforeAppear(t){v(k,[t]),S(t,h),S(t,c)},onEnter:V(!1),onAppear:V(!0),onLeave(t,e){t._isLeaving=!0;const n=()=>L(t,e);S(t,u),t._enterCancelled?(S(t,d),R()):(R(),S(t,d)),x(()=>{t._isLeaving&&(M(t,u),S(t,m),g(A)||E(t,s,b,n))}),v(A,[t,n])},onEnterCancelled(t){O(t,!1,void 0,!0),v(C,[t])},onAppearCancelled(t){O(t,!0,void 0,!0),v(I,[t])},onLeaveCancelled(t){L(t),v(D,[t])}})}function w(t){return(0,i.Ro)(t)}function S(t,e){e.split(/\s+/).forEach(e=>e&&t.classList.add(e)),(t[m]||(t[m]=new Set)).add(e)}function M(t,e){e.split(/\s+/).forEach(e=>e&&t.classList.remove(e));const n=t[m];n&&(n.delete(e),n.size||(t[m]=void 0))}function x(t){requestAnimationFrame(()=>{requestAnimationFrame(t)})}let P=0;function E(t,e,n,s){const i=t._endId=++P,o=()=>{i===t._endId&&s()};if(null!=n)return setTimeout(o,n);const{type:r,timeout:a,propCount:l}=T(t,e);if(!r)return s();const h=r+"end";let c=0;const p=()=>{t.removeEventListener(h,u),o()},u=e=>{e.target===t&&++c>=l&&p()};setTimeout(()=>{c<l&&p()},a+1),t.addEventListener(h,u)}function T(t,e){const n=window.getComputedStyle(t),s=t=>(n[t]||"").split(", "),i=s(`${u}Delay`),o=s(`${u}Duration`),r=C(i,o),a=s(`${d}Delay`),l=s(`${d}Duration`),h=C(a,l);let c=null,p=0,m=0;return e===u?r>0&&(c=u,p=r,m=o.length):e===d?h>0&&(c=d,p=h,m=l.length):(p=Math.max(r,h),c=p>0?r>h?u:d:null,m=c?c===u?o.length:l.length:0),{type:c,timeout:p,propCount:m,hasTransform:c===u&&/\b(?:transform|all)(?:,|$)/.test(s(`${u}Property`).toString())}}function C(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max(...e.map((e,n)=>A(e)+A(t[n])))}function A(t){return"auto"===t?0:1e3*Number(t.slice(0,-1).replace(",","."))}function R(){return document.body.offsetHeight}const D=Symbol("_vod"),k=Symbol("_vsh"),j={name:"show",beforeMount(t,{value:e},{transition:n}){t[D]="none"===t.style.display?"":t.style.display,n&&e?n.beforeEnter(t):I(t,e)},mounted(t,{value:e},{transition:n}){n&&e&&n.enter(t)},updated(t,{value:e,oldValue:n},{transition:s}){!e!=!n&&(s?e?(s.beforeEnter(t),I(t,!0),s.enter(t)):s.leave(t,()=>{I(t,!1)}):I(t,e))},beforeUnmount(t,{value:e}){I(t,e)}};function I(t,e){t.style.display=e?t[D]:"none",t[k]=!e}const O=Symbol("");function L(t){const e=(0,s.nI)();if(!e)return;const n=e.ut=(n=t(e.proxy))=>{Array.from(document.querySelectorAll(`[data-v-owner="${e.uid}"]`)).forEach(t=>Y(t,n))},o=()=>{const s=t(e.proxy);e.ce?Y(e.ce,s):V(e.subTree,s),n(s)};(0,s.Ic)(()=>{(0,s.Dl)(o)}),(0,s.sV)(()=>{(0,s.wB)(o,i.tE,{flush:"post"});const t=new MutationObserver(o);t.observe(e.subTree.el.parentNode,{childList:!0}),(0,s.hi)(()=>t.disconnect())})}function V(t,e){if(128&t.shapeFlag){const n=t.suspense;t=n.activeBranch,n.pendingBranch&&!n.isHydrating&&n.effects.push(()=>{V(n.activeBranch,e)})}for(;t.component;)t=t.component.subTree;if(1&t.shapeFlag&&t.el)Y(t.el,e);else if(t.type===s.FK)t.children.forEach(t=>V(t,e));else if(t.type===s.jC){let{el:n,anchor:s}=t;for(;n&&(Y(n,e),n!==s);)n=n.nextSibling}}function Y(t,e){if(1===t.nodeType){const n=t.style;let s="";for(const t in e){const o=(0,i.pU)(e[t]);n.setProperty(`--${t}`,o),s+=`--${t}: ${o};`}n[O]=s}}const Z=/(?:^|;)\s*display\s*:/,X=/\s*!important$/;function N(t,e,n){if((0,i.cy)(n))n.forEach(n=>N(t,e,n));else if(null==n&&(n=""),e.startsWith("--"))t.setProperty(e,n);else{const s=function(t,e){const n=B[e];if(n)return n;let s=(0,i.PT)(e);if("filter"!==s&&s in t)return B[e]=s;s=(0,i.ZH)(s);for(let n=0;n<z.length;n++){const i=z[n]+s;if(i in t)return B[e]=i}return e}(t,e);X.test(n)?t.setProperty((0,i.Tg)(s),n.replace(X,""),"important"):t[s]=n}}const z=["Webkit","Moz","ms"],B={},Q="http://www.w3.org/1999/xlink";function U(t,e,n,s,o,r=(0,i.J$)(e)){s&&e.startsWith("xlink:")?null==n?t.removeAttributeNS(Q,e.slice(6,e.length)):t.setAttributeNS(Q,e,n):null==n||r&&!(0,i.Y2)(n)?t.removeAttribute(e):t.setAttribute(e,r?"":(0,i.Bm)(n)?String(n):n)}function G(t,e,n,s,o){if("innerHTML"===e||"textContent"===e)return void(null!=n&&(t[e]="innerHTML"===e?l(n):n));const r=t.tagName;if("value"===e&&"PROGRESS"!==r&&!r.includes("-")){const s="OPTION"===r?t.getAttribute("value")||"":t.value,i=null==n?"checkbox"===t.type?"on":"":String(n);return s===i&&"_value"in t||(t.value=i),null==n&&t.removeAttribute(e),void(t._value=n)}let a=!1;if(""===n||null==n){const s=typeof t[e];"boolean"===s?n=(0,i.Y2)(n):null==n&&"string"===s?(n="",a=!0):"number"===s&&(n=0,a=!0)}try{t[e]=n}catch(t){}a&&t.removeAttribute(o||e)}function H(t,e,n,s){t.addEventListener(e,n,s)}const W=Symbol("_vei");const F=/(?:Once|Passive|Capture)$/;let K=0;const $=Promise.resolve(),q=()=>K||($.then(()=>K=0),K=Date.now()),J=t=>111===t.charCodeAt(0)&&110===t.charCodeAt(1)&&t.charCodeAt(2)>96&&t.charCodeAt(2)<123,tt={};function et(t,e,n){let o=(0,s.pM)(t,e);(0,i.Qd)(o)&&(o=(0,i.X$)({},o,e));class r extends it{constructor(t){super(o,t,n)}}return r.def=o,r}const nt=(t,e)=>et(t,e,Qt),st="undefined"!=typeof HTMLElement?HTMLElement:class{};class it extends st{constructor(t,e={},n=Bt){super(),this._def=t,this._props=e,this._createApp=n,this._isVueCE=!0,this._instance=null,this._app=null,this._nonce=this._def.nonce,this._connected=!1,this._resolved=!1,this._numberProps=null,this._styleChildren=new WeakSet,this._ob=null,this.shadowRoot&&n!==Bt?this._root=this.shadowRoot:!1!==t.shadowRoot?(this.attachShadow({mode:"open"}),this._root=this.shadowRoot):this._root=this}connectedCallback(){if(!this.isConnected)return;this.shadowRoot||this._resolved||this._parseSlots(),this._connected=!0;let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof it){this._parent=t;break}this._instance||(this._resolved?this._mount(this._def):t&&t._pendingResolve?this._pendingResolve=t._pendingResolve.then(()=>{this._pendingResolve=void 0,this._resolveDef()}):this._resolveDef())}_setParent(t=this._parent){t&&(this._instance.parent=t._instance,this._inheritParentContext(t))}_inheritParentContext(t=this._parent){t&&this._app&&Object.setPrototypeOf(this._app._context.provides,t._instance.provides)}disconnectedCallback(){this._connected=!1,(0,s.dY)(()=>{this._connected||(this._ob&&(this._ob.disconnect(),this._ob=null),this._app&&this._app.unmount(),this._instance&&(this._instance.ce=void 0),this._app=this._instance=null)})}_resolveDef(){if(this._pendingResolve)return;for(let t=0;t<this.attributes.length;t++)this._setAttr(this.attributes[t].name);this._ob=new MutationObserver(t=>{for(const e of t)this._setAttr(e.attributeName)}),this._ob.observe(this,{attributes:!0});const t=(t,e=!1)=>{this._resolved=!0,this._pendingResolve=void 0;const{props:n,styles:s}=t;let o;if(n&&!(0,i.cy)(n))for(const t in n){const e=n[t];(e===Number||e&&e.type===Number)&&(t in this._props&&(this._props[t]=(0,i.Ro)(this._props[t])),(o||(o=Object.create(null)))[(0,i.PT)(t)]=!0)}this._numberProps=o,this._resolveProps(t),this.shadowRoot&&this._applyStyles(s),this._mount(t)},e=this._def.__asyncLoader;e?this._pendingResolve=e().then(e=>{e.configureApp=this._def.configureApp,t(this._def=e,!0)}):t(this._def)}_mount(t){t.name||(t.name="VueElement"),this._app=this._createApp(t),this._inheritParentContext(),t.configureApp&&t.configureApp(this._app),this._app._ceVNode=this._createVNode(),this._app.mount(this._root);const e=this._instance&&this._instance.exposed;if(e)for(const t in e)(0,i.$3)(this,t)||Object.defineProperty(this,t,{get:()=>(0,o.R1)(e[t])})}_resolveProps(t){const{props:e}=t,n=(0,i.cy)(e)?e:Object.keys(e||{});for(const t of Object.keys(this))"_"!==t[0]&&n.includes(t)&&this._setProp(t,this[t]);for(const t of n.map(i.PT))Object.defineProperty(this,t,{get(){return this._getProp(t)},set(e){this._setProp(t,e,!0,!0)}})}_setAttr(t){if(t.startsWith("data-v-"))return;const e=this.hasAttribute(t);let n=e?this.getAttribute(t):tt;const s=(0,i.PT)(t);e&&this._numberProps&&this._numberProps[s]&&(n=(0,i.Ro)(n)),this._setProp(s,n,!1,!0)}_getProp(t){return this._props[t]}_setProp(t,e,n=!0,s=!1){if(e!==this._props[t]&&(e===tt?delete this._props[t]:(this._props[t]=e,"key"===t&&this._app&&(this._app._ceVNode.key=e)),s&&this._instance&&this._update(),n)){const n=this._ob;n&&n.disconnect(),!0===e?this.setAttribute((0,i.Tg)(t),""):"string"==typeof e||"number"==typeof e?this.setAttribute((0,i.Tg)(t),e+""):e||this.removeAttribute((0,i.Tg)(t)),n&&n.observe(this,{attributes:!0})}}_update(){const t=this._createVNode();this._app&&(t.appContext=this._app._context),Nt(t,this._root)}_createVNode(){const t={};this.shadowRoot||(t.onVnodeMounted=t.onVnodeUpdated=this._renderSlots.bind(this));const e=(0,s.bF)(this._def,(0,i.X$)(t,this._props));return this._instance||(e.ce=t=>{this._instance=t,t.ce=this,t.isCE=!0;const e=(t,e)=>{this.dispatchEvent(new CustomEvent(t,(0,i.Qd)(e[0])?(0,i.X$)({detail:e},e[0]):{detail:e}))};t.emit=(t,...n)=>{e(t,n),(0,i.Tg)(t)!==t&&e((0,i.Tg)(t),n)},this._setParent()}),e}_applyStyles(t,e){if(!t)return;if(e){if(e===this._def||this._styleChildren.has(e))return;this._styleChildren.add(e)}const n=this._nonce;for(let e=t.length-1;e>=0;e--){const s=document.createElement("style");n&&s.setAttribute("nonce",n),s.textContent=t[e],this.shadowRoot.prepend(s)}}_parseSlots(){const t=this._slots={};let e;for(;e=this.firstChild;){const n=1===e.nodeType&&e.getAttribute("slot")||"default";(t[n]||(t[n]=[])).push(e),this.removeChild(e)}}_renderSlots(){const t=(this._teleportTarget||this).querySelectorAll("slot"),e=this._instance.type.__scopeId;for(let n=0;n<t.length;n++){const s=t[n],i=s.getAttribute("name")||"default",o=this._slots[i],r=s.parentNode;if(o)for(const t of o){if(e&&1===t.nodeType){const n=e+"-s",s=document.createTreeWalker(t,1);let i;for(t.setAttribute(n,"");i=s.nextNode();)i.setAttribute(n,"")}r.insertBefore(t,s)}else for(;s.firstChild;)r.insertBefore(s.firstChild,s);r.removeChild(s)}}_injectChildStyle(t){this._applyStyles(t.styles,t)}_removeChildStyle(t){}}function ot(t){const e=(0,s.nI)();return e&&e.ce||null}function rt(){const t=ot();return t&&t.shadowRoot}function at(t="$style"){{const e=(0,s.nI)();if(!e)return i.MZ;const n=e.type.__cssModules;if(!n)return i.MZ;return n[t]||i.MZ}}const lt=new WeakMap,ht=new WeakMap,ct=Symbol("_moveCb"),pt=Symbol("_enterCb"),ut=(t=>(delete t.props.mode,t))({name:"TransitionGroup",props:(0,i.X$)({},_,{tag:String,moveClass:String}),setup(t,{slots:e}){const n=(0,s.nI)(),i=(0,s.Gy)();let r,a;return(0,s.$u)(()=>{if(!r.length)return;const e=t.moveClass||`${t.name||"v"}-move`;if(!function(t,e,n){const s=t.cloneNode(),i=t[m];i&&i.forEach(t=>{t.split(/\s+/).forEach(t=>t&&s.classList.remove(t))}),n.split(/\s+/).forEach(t=>t&&s.classList.add(t)),s.style.display="none";const o=1===e.nodeType?e:e.parentNode;o.appendChild(s);const{hasTransform:r}=T(s);return o.removeChild(s),r}(r[0].el,n.vnode.el,e))return void(r=[]);r.forEach(dt),r.forEach(mt);const s=r.filter(ft);R(),s.forEach(t=>{const n=t.el,s=n.style;S(n,e),s.transform=s.webkitTransform=s.transitionDuration="";const i=n[ct]=t=>{t&&t.target!==n||t&&!t.propertyName.endsWith("transform")||(n.removeEventListener("transitionend",i),n[ct]=null,M(n,e))};n.addEventListener("transitionend",i)}),r=[]}),()=>{const l=(0,o.ux)(t),h=b(l);let c=l.tag||s.FK;if(r=[],a)for(let t=0;t<a.length;t++){const e=a[t];e.el&&e.el instanceof Element&&(r.push(e),(0,s.MZ)(e,(0,s.OW)(e,h,i,n)),lt.set(e,e.el.getBoundingClientRect()))}a=e.default?(0,s.Df)(e.default()):[];for(let t=0;t<a.length;t++){const e=a[t];null!=e.key&&(0,s.MZ)(e,(0,s.OW)(e,h,i,n))}return(0,s.bF)(c,null,a)}}});function dt(t){const e=t.el;e[ct]&&e[ct](),e[pt]&&e[pt]()}function mt(t){ht.set(t,t.el.getBoundingClientRect())}function ft(t){const e=lt.get(t),n=ht.get(t),s=e.left-n.left,i=e.top-n.top;if(s||i){const e=t.el.style;return e.transform=e.webkitTransform=`translate(${s}px,${i}px)`,e.transitionDuration="0s",t}}const _t=t=>{const e=t.props["onUpdate:modelValue"]||!1;return(0,i.cy)(e)?t=>(0,i.DY)(e,t):e};function yt(t){t.target.composing=!0}function vt(t){const e=t.target;e.composing&&(e.composing=!1,e.dispatchEvent(new Event("input")))}const gt=Symbol("_assign"),bt={created(t,{modifiers:{lazy:e,trim:n,number:s}},o){t[gt]=_t(o);const r=s||o.props&&"number"===o.props.type;H(t,e?"change":"input",e=>{if(e.target.composing)return;let s=t.value;n&&(s=s.trim()),r&&(s=(0,i.bB)(s)),t[gt](s)}),n&&H(t,"change",()=>{t.value=t.value.trim()}),e||(H(t,"compositionstart",yt),H(t,"compositionend",vt),H(t,"change",vt))},mounted(t,{value:e}){t.value=null==e?"":e},beforeUpdate(t,{value:e,oldValue:n,modifiers:{lazy:s,trim:o,number:r}},a){if(t[gt]=_t(a),t.composing)return;const l=null==e?"":e;if((!r&&"number"!==t.type||/^0\d/.test(t.value)?t.value:(0,i.bB)(t.value))!==l){if(document.activeElement===t&&"range"!==t.type){if(s&&e===n)return;if(o&&t.value.trim()===l)return}t.value=l}}},wt={deep:!0,created(t,e,n){t[gt]=_t(n),H(t,"change",()=>{const e=t._modelValue,n=Et(t),s=t.checked,o=t[gt];if((0,i.cy)(e)){const t=(0,i.u3)(e,n),r=-1!==t;if(s&&!r)o(e.concat(n));else if(!s&&r){const n=[...e];n.splice(t,1),o(n)}}else if((0,i.vM)(e)){const t=new Set(e);s?t.add(n):t.delete(n),o(t)}else o(Tt(t,s))})},mounted:St,beforeUpdate(t,e,n){t[gt]=_t(n),St(t,e,n)}};function St(t,{value:e,oldValue:n},s){let o;if(t._modelValue=e,(0,i.cy)(e))o=(0,i.u3)(e,s.props.value)>-1;else if((0,i.vM)(e))o=e.has(s.props.value);else{if(e===n)return;o=(0,i.BX)(e,Tt(t,!0))}t.checked!==o&&(t.checked=o)}const Mt={created(t,{value:e},n){t.checked=(0,i.BX)(e,n.props.value),t[gt]=_t(n),H(t,"change",()=>{t[gt](Et(t))})},beforeUpdate(t,{value:e,oldValue:n},s){t[gt]=_t(s),e!==n&&(t.checked=(0,i.BX)(e,s.props.value))}},xt={deep:!0,created(t,{value:e,modifiers:{number:n}},o){const r=(0,i.vM)(e);H(t,"change",()=>{const e=Array.prototype.filter.call(t.options,t=>t.selected).map(t=>n?(0,i.bB)(Et(t)):Et(t));t[gt](t.multiple?r?new Set(e):e:e[0]),t._assigning=!0,(0,s.dY)(()=>{t._assigning=!1})}),t[gt]=_t(o)},mounted(t,{value:e}){Pt(t,e)},beforeUpdate(t,e,n){t[gt]=_t(n)},updated(t,{value:e}){t._assigning||Pt(t,e)}};function Pt(t,e){const n=t.multiple,s=(0,i.cy)(e);if(!n||s||(0,i.vM)(e)){for(let o=0,r=t.options.length;o<r;o++){const r=t.options[o],a=Et(r);if(n)if(s){const t=typeof a;r.selected="string"===t||"number"===t?e.some(t=>String(t)===String(a)):(0,i.u3)(e,a)>-1}else r.selected=e.has(a);else if((0,i.BX)(Et(r),e))return void(t.selectedIndex!==o&&(t.selectedIndex=o))}n||-1===t.selectedIndex||(t.selectedIndex=-1)}}function Et(t){return"_value"in t?t._value:t.value}function Tt(t,e){const n=e?"_trueValue":"_falseValue";return n in t?t[n]:e}const Ct={created(t,e,n){Rt(t,e,n,null,"created")},mounted(t,e,n){Rt(t,e,n,null,"mounted")},beforeUpdate(t,e,n,s){Rt(t,e,n,s,"beforeUpdate")},updated(t,e,n,s){Rt(t,e,n,s,"updated")}};function At(t,e){switch(t){case"SELECT":return xt;case"TEXTAREA":return bt;default:switch(e){case"checkbox":return wt;case"radio":return Mt;default:return bt}}}function Rt(t,e,n,s,i){const o=At(t.tagName,n.props&&n.props.type)[i];o&&o(t,e,n,s)}const Dt=["ctrl","shift","alt","meta"],kt={stop:t=>t.stopPropagation(),prevent:t=>t.preventDefault(),self:t=>t.target!==t.currentTarget,ctrl:t=>!t.ctrlKey,shift:t=>!t.shiftKey,alt:t=>!t.altKey,meta:t=>!t.metaKey,left:t=>"button"in t&&0!==t.button,middle:t=>"button"in t&&1!==t.button,right:t=>"button"in t&&2!==t.button,exact:(t,e)=>Dt.some(n=>t[`${n}Key`]&&!e.includes(n))},jt=(t,e)=>{const n=t._withMods||(t._withMods={}),s=e.join(".");return n[s]||(n[s]=(n,...s)=>{for(let t=0;t<e.length;t++){const s=kt[e[t]];if(s&&s(n,e))return}return t(n,...s)})},It={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Ot=(t,e)=>{const n=t._withKeys||(t._withKeys={}),s=e.join(".");return n[s]||(n[s]=n=>{if(!("key"in n))return;const s=(0,i.Tg)(n.key);return e.some(t=>t===s||It[t]===s)?t(n):void 0})},Lt=(0,i.X$)({patchProp:(t,e,n,o,r,a)=>{const l="svg"===r;"class"===e?function(t,e,n){const s=t[m];s&&(e=(e?[e,...s]:[...s]).join(" ")),null==e?t.removeAttribute("class"):n?t.setAttribute("class",e):t.className=e}(t,o,l):"style"===e?function(t,e,n){const s=t.style,o=(0,i.Kg)(n);let r=!1;if(n&&!o){if(e)if((0,i.Kg)(e))for(const t of e.split(";")){const e=t.slice(0,t.indexOf(":")).trim();null==n[e]&&N(s,e,"")}else for(const t in e)null==n[t]&&N(s,t,"");for(const t in n)"display"===t&&(r=!0),N(s,t,n[t])}else if(o){if(e!==n){const t=s[O];t&&(n+=";"+t),s.cssText=n,r=Z.test(n)}}else e&&t.removeAttribute("style");D in t&&(t[D]=r?s.display:"",t[k]&&(s.display="none"))}(t,n,o):(0,i.Mp)(e)?(0,i.CP)(e)||function(t,e,n,o,r=null){const a=t[W]||(t[W]={}),l=a[e];if(o&&l)l.value=o;else{const[n,h]=function(t){let e;if(F.test(t)){let n;for(e={};n=t.match(F);)t=t.slice(0,t.length-n[0].length),e[n[0].toLowerCase()]=!0}return[":"===t[2]?t.slice(3):(0,i.Tg)(t.slice(2)),e]}(e);if(o){const l=a[e]=function(t,e){const n=t=>{if(t._vts){if(t._vts<=n.attached)return}else t._vts=Date.now();(0,s.qL)(function(t,e){if((0,i.cy)(e)){const n=t.stopImmediatePropagation;return t.stopImmediatePropagation=()=>{n.call(t),t._stopped=!0},e.map(t=>e=>!e._stopped&&t&&t(e))}return e}(t,n.value),e,5,[t])};return n.value=t,n.attached=q(),n}(o,r);H(t,n,l,h)}else l&&(function(t,e,n,s){t.removeEventListener(e,n,s)}(t,n,l,h),a[e]=void 0)}}(t,e,0,o,a):("."===e[0]?(e=e.slice(1),1):"^"===e[0]?(e=e.slice(1),0):function(t,e,n,s){if(s)return"innerHTML"===e||"textContent"===e||!!(e in t&&J(e)&&(0,i.Tn)(n));if("spellcheck"===e||"draggable"===e||"translate"===e||"autocorrect"===e)return!1;if("form"===e)return!1;if("list"===e&&"INPUT"===t.tagName)return!1;if("type"===e&&"TEXTAREA"===t.tagName)return!1;if("width"===e||"height"===e){const e=t.tagName;if("IMG"===e||"VIDEO"===e||"CANVAS"===e||"SOURCE"===e)return!1}return(!J(e)||!(0,i.Kg)(n))&&e in t}(t,e,o,l))?(G(t,e,o),t.tagName.includes("-")||"value"!==e&&"checked"!==e&&"selected"!==e||U(t,e,o,l,0,"value"!==e)):!t._isVueCE||!/[A-Z]/.test(e)&&(0,i.Kg)(o)?("true-value"===e?t._trueValue=o:"false-value"===e&&(t._falseValue=o),U(t,e,o,l)):G(t,(0,i.PT)(e),o,0,e)}},p);let Vt,Yt=!1;function Zt(){return Vt||(Vt=(0,s.K9)(Lt))}function Xt(){return Vt=Yt?Vt:(0,s.ci)(Lt),Yt=!0,Vt}const Nt=(...t)=>{Zt().render(...t)},zt=(...t)=>{Xt().hydrate(...t)},Bt=(...t)=>{const e=Zt().createApp(...t),{mount:n}=e;return e.mount=t=>{const s=Gt(t);if(!s)return;const o=e._component;(0,i.Tn)(o)||o.render||o.template||(o.template=s.innerHTML),1===s.nodeType&&(s.textContent="");const r=n(s,!1,Ut(s));return s instanceof Element&&(s.removeAttribute("v-cloak"),s.setAttribute("data-v-app","")),r},e},Qt=(...t)=>{const e=Xt().createApp(...t),{mount:n}=e;return e.mount=t=>{const e=Gt(t);if(e)return n(e,!0,Ut(e))},e};function Ut(t){return t instanceof SVGElement?"svg":"function"==typeof MathMLElement&&t instanceof MathMLElement?"mathml":void 0}function Gt(t){return(0,i.Kg)(t)?document.querySelector(t):t}let Ht=!1;const Wt=()=>{Ht||(Ht=!0,bt.getSSRProps=({value:t})=>({value:t}),Mt.getSSRProps=({value:t},e)=>{if(e.props&&(0,i.BX)(e.props.value,t))return{checked:!0}},wt.getSSRProps=({value:t},e)=>{if((0,i.cy)(t)){if(e.props&&(0,i.u3)(t,e.props.value)>-1)return{checked:!0}}else if((0,i.vM)(t)){if(e.props&&t.has(e.props.value))return{checked:!0}}else if(t)return{checked:!0}},Ct.getSSRProps=(t,e)=>{if("string"!=typeof e.type)return;const n=At(e.type.toUpperCase(),e.props&&e.props.type);return n.getSSRProps?n.getSSRProps(t,e):void 0},j.getSSRProps=({value:t})=>{if(!t)return{style:{display:"none"}}})},Ft=()=>{}},5e3:(t,e,n)=>{n.d(e,{ZU:()=>d});var s=n(5117);const i=new s.Raycaster,o=new s.Vector3,r=new s.Vector3,a=new s.Quaternion,l={X:new s.Vector3(1,0,0),Y:new s.Vector3(0,1,0),Z:new s.Vector3(0,0,1)},h={type:"change"},c={type:"mouseDown",mode:null},p={type:"mouseUp",mode:null},u={type:"objectChange"};class d extends s.Controls{constructor(t,e=null){super(void 0,e);const n=new I(this);this._root=n;const i=new O;this._gizmo=i,n.add(i);const o=new L;this._plane=o,n.add(o);const r=this;function a(t,e){let n=e;Object.defineProperty(r,t,{get:function(){return void 0!==n?n:e},set:function(e){n!==e&&(n=e,o[t]=e,i[t]=e,r.dispatchEvent({type:t+"-changed",value:e}),r.dispatchEvent(h))}}),r[t]=e,o[t]=e,i[t]=e}a("camera",t),a("object",void 0),a("enabled",!0),a("axis",null),a("mode","translate"),a("translationSnap",null),a("rotationSnap",null),a("scaleSnap",null),a("space","world"),a("size",1),a("dragging",!1),a("showX",!0),a("showY",!0),a("showZ",!0),a("minX",-1/0),a("maxX",1/0),a("minY",-1/0),a("maxY",1/0),a("minZ",-1/0),a("maxZ",1/0);const l=new s.Vector3,c=new s.Vector3,p=new s.Quaternion,u=new s.Quaternion,d=new s.Vector3,g=new s.Quaternion,b=new s.Vector3,w=new s.Vector3,S=new s.Vector3,M=new s.Vector3;a("worldPosition",l),a("worldPositionStart",c),a("worldQuaternion",p),a("worldQuaternionStart",u),a("cameraPosition",d),a("cameraQuaternion",g),a("pointStart",b),a("pointEnd",w),a("rotationAxis",S),a("rotationAngle",0),a("eye",M),this._offset=new s.Vector3,this._startNorm=new s.Vector3,this._endNorm=new s.Vector3,this._cameraScale=new s.Vector3,this._parentPosition=new s.Vector3,this._parentQuaternion=new s.Quaternion,this._parentQuaternionInv=new s.Quaternion,this._parentScale=new s.Vector3,this._worldScaleStart=new s.Vector3,this._worldQuaternionInv=new s.Quaternion,this._worldScale=new s.Vector3,this._positionStart=new s.Vector3,this._quaternionStart=new s.Quaternion,this._scaleStart=new s.Vector3,this._getPointer=m.bind(this),this._onPointerDown=_.bind(this),this._onPointerHover=f.bind(this),this._onPointerMove=y.bind(this),this._onPointerUp=v.bind(this),null!==e&&this.connect(e)}connect(t){super.connect(t),this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointermove",this._onPointerHover),this.domElement.addEventListener("pointerup",this._onPointerUp),this.domElement.style.touchAction="none"}disconnect(){this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointermove",this._onPointerHover),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.domElement.style.touchAction="auto"}getHelper(){return this._root}pointerHover(t){if(void 0===this.object||!0===this.dragging)return;null!==t&&i.setFromCamera(t,this.camera);const e=g(this._gizmo.picker[this.mode],i);this.axis=e?e.object.name:null}pointerDown(t){if(void 0!==this.object&&!0!==this.dragging&&(null==t||0===t.button)&&null!==this.axis){null!==t&&i.setFromCamera(t,this.camera);const e=g(this._plane,i,!0);e&&(this.object.updateMatrixWorld(),this.object.parent.updateMatrixWorld(),this._positionStart.copy(this.object.position),this._quaternionStart.copy(this.object.quaternion),this._scaleStart.copy(this.object.scale),this.object.matrixWorld.decompose(this.worldPositionStart,this.worldQuaternionStart,this._worldScaleStart),this.pointStart.copy(e.point).sub(this.worldPositionStart)),this.dragging=!0,c.mode=this.mode,this.dispatchEvent(c)}}pointerMove(t){const e=this.axis,n=this.mode,s=this.object;let c=this.space;if("scale"===n?c="local":"E"!==e&&"XYZE"!==e&&"XYZ"!==e||(c="world"),void 0===s||null===e||!1===this.dragging||null!==t&&-1!==t.button)return;null!==t&&i.setFromCamera(t,this.camera);const p=g(this._plane,i,!0);if(p){if(this.pointEnd.copy(p.point).sub(this.worldPositionStart),"translate"===n)this._offset.copy(this.pointEnd).sub(this.pointStart),"local"===c&&"XYZ"!==e&&this._offset.applyQuaternion(this._worldQuaternionInv),-1===e.indexOf("X")&&(this._offset.x=0),-1===e.indexOf("Y")&&(this._offset.y=0),-1===e.indexOf("Z")&&(this._offset.z=0),"local"===c&&"XYZ"!==e?this._offset.applyQuaternion(this._quaternionStart).divide(this._parentScale):this._offset.applyQuaternion(this._parentQuaternionInv).divide(this._parentScale),s.position.copy(this._offset).add(this._positionStart),this.translationSnap&&("local"===c&&(s.position.applyQuaternion(a.copy(this._quaternionStart).invert()),-1!==e.search("X")&&(s.position.x=Math.round(s.position.x/this.translationSnap)*this.translationSnap),-1!==e.search("Y")&&(s.position.y=Math.round(s.position.y/this.translationSnap)*this.translationSnap),-1!==e.search("Z")&&(s.position.z=Math.round(s.position.z/this.translationSnap)*this.translationSnap),s.position.applyQuaternion(this._quaternionStart)),"world"===c&&(s.parent&&s.position.add(o.setFromMatrixPosition(s.parent.matrixWorld)),-1!==e.search("X")&&(s.position.x=Math.round(s.position.x/this.translationSnap)*this.translationSnap),-1!==e.search("Y")&&(s.position.y=Math.round(s.position.y/this.translationSnap)*this.translationSnap),-1!==e.search("Z")&&(s.position.z=Math.round(s.position.z/this.translationSnap)*this.translationSnap),s.parent&&s.position.sub(o.setFromMatrixPosition(s.parent.matrixWorld)))),s.position.x=Math.max(this.minX,Math.min(this.maxX,s.position.x)),s.position.y=Math.max(this.minY,Math.min(this.maxY,s.position.y)),s.position.z=Math.max(this.minZ,Math.min(this.maxZ,s.position.z));else if("scale"===n){if(-1!==e.search("XYZ")){let t=this.pointEnd.length()/this.pointStart.length();this.pointEnd.dot(this.pointStart)<0&&(t*=-1),r.set(t,t,t)}else o.copy(this.pointStart),r.copy(this.pointEnd),o.applyQuaternion(this._worldQuaternionInv),r.applyQuaternion(this._worldQuaternionInv),r.divide(o),-1===e.search("X")&&(r.x=1),-1===e.search("Y")&&(r.y=1),-1===e.search("Z")&&(r.z=1);s.scale.copy(this._scaleStart).multiply(r),this.scaleSnap&&(-1!==e.search("X")&&(s.scale.x=Math.round(s.scale.x/this.scaleSnap)*this.scaleSnap||this.scaleSnap),-1!==e.search("Y")&&(s.scale.y=Math.round(s.scale.y/this.scaleSnap)*this.scaleSnap||this.scaleSnap),-1!==e.search("Z")&&(s.scale.z=Math.round(s.scale.z/this.scaleSnap)*this.scaleSnap||this.scaleSnap))}else if("rotate"===n){this._offset.copy(this.pointEnd).sub(this.pointStart);const t=20/this.worldPosition.distanceTo(o.setFromMatrixPosition(this.camera.matrixWorld));let n=!1;"XYZE"===e?(this.rotationAxis.copy(this._offset).cross(this.eye).normalize(),this.rotationAngle=this._offset.dot(o.copy(this.rotationAxis).cross(this.eye))*t):"X"!==e&&"Y"!==e&&"Z"!==e||(this.rotationAxis.copy(l[e]),o.copy(l[e]),"local"===c&&o.applyQuaternion(this.worldQuaternion),o.cross(this.eye),0===o.length()?n=!0:this.rotationAngle=this._offset.dot(o.normalize())*t),("E"===e||n)&&(this.rotationAxis.copy(this.eye),this.rotationAngle=this.pointEnd.angleTo(this.pointStart),this._startNorm.copy(this.pointStart).normalize(),this._endNorm.copy(this.pointEnd).normalize(),this.rotationAngle*=this._endNorm.cross(this._startNorm).dot(this.eye)<0?1:-1),this.rotationSnap&&(this.rotationAngle=Math.round(this.rotationAngle/this.rotationSnap)*this.rotationSnap),"local"===c&&"E"!==e&&"XYZE"!==e?(s.quaternion.copy(this._quaternionStart),s.quaternion.multiply(a.setFromAxisAngle(this.rotationAxis,this.rotationAngle)).normalize()):(this.rotationAxis.applyQuaternion(this._parentQuaternionInv),s.quaternion.copy(a.setFromAxisAngle(this.rotationAxis,this.rotationAngle)),s.quaternion.multiply(this._quaternionStart).normalize())}this.dispatchEvent(h),this.dispatchEvent(u)}}pointerUp(t){null!==t&&0!==t.button||(this.dragging&&null!==this.axis&&(p.mode=this.mode,this.dispatchEvent(p)),this.dragging=!1,this.axis=null)}dispose(){this.disconnect(),this._root.dispose()}attach(t){return this.object=t,this._root.visible=!0,this}detach(){return this.object=void 0,this.axis=null,this._root.visible=!1,this}reset(){this.enabled&&this.dragging&&(this.object.position.copy(this._positionStart),this.object.quaternion.copy(this._quaternionStart),this.object.scale.copy(this._scaleStart),this.dispatchEvent(h),this.dispatchEvent(u),this.pointStart.copy(this.pointEnd))}getRaycaster(){return i}getMode(){return this.mode}setMode(t){this.mode=t}setTranslationSnap(t){this.translationSnap=t}setRotationSnap(t){this.rotationSnap=t}setScaleSnap(t){this.scaleSnap=t}setSize(t){this.size=t}setSpace(t){this.space=t}setColors(t,e,n,s){const i=this._gizmo.materialLib;i.xAxis.color.set(t),i.yAxis.color.set(e),i.zAxis.color.set(n),i.active.color.set(s),i.xAxisTransparent.color.set(t),i.yAxisTransparent.color.set(e),i.zAxisTransparent.color.set(n),i.activeTransparent.color.set(s),i.xAxis._color&&i.xAxis._color.set(t),i.yAxis._color&&i.yAxis._color.set(e),i.zAxis._color&&i.zAxis._color.set(n),i.active._color&&i.active._color.set(s),i.xAxisTransparent._color&&i.xAxisTransparent._color.set(t),i.yAxisTransparent._color&&i.yAxisTransparent._color.set(e),i.zAxisTransparent._color&&i.zAxisTransparent._color.set(n),i.activeTransparent._color&&i.activeTransparent._color.set(s)}}function m(t){if(this.domElement.ownerDocument.pointerLockElement)return{x:0,y:0,button:t.button};{const e=this.domElement.getBoundingClientRect();return{x:(t.clientX-e.left)/e.width*2-1,y:-(t.clientY-e.top)/e.height*2+1,button:t.button}}}function f(t){if(this.enabled)switch(t.pointerType){case"mouse":case"pen":this.pointerHover(this._getPointer(t))}}function _(t){this.enabled&&(document.pointerLockElement||this.domElement.setPointerCapture(t.pointerId),this.domElement.addEventListener("pointermove",this._onPointerMove),this.pointerHover(this._getPointer(t)),this.pointerDown(this._getPointer(t)))}function y(t){this.enabled&&this.pointerMove(this._getPointer(t))}function v(t){this.enabled&&(this.domElement.releasePointerCapture(t.pointerId),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.pointerUp(this._getPointer(t)))}function g(t,e,n){const s=e.intersectObject(t,!0);for(let t=0;t<s.length;t++)if(s[t].object.visible||n)return s[t];return!1}const b=new s.Euler,w=new s.Vector3(0,1,0),S=new s.Vector3(0,0,0),M=new s.Matrix4,x=new s.Quaternion,P=new s.Quaternion,E=new s.Vector3,T=new s.Matrix4,C=new s.Vector3(1,0,0),A=new s.Vector3(0,1,0),R=new s.Vector3(0,0,1),D=new s.Vector3,k=new s.Vector3,j=new s.Vector3;class I extends s.Object3D{constructor(t){super(),this.isTransformControlsRoot=!0,this.controls=t,this.visible=!1}updateMatrixWorld(t){const e=this.controls;void 0!==e.object&&(e.object.updateMatrixWorld(),null===e.object.parent?console.error("TransformControls: The attached 3D object must be a part of the scene graph."):e.object.parent.matrixWorld.decompose(e._parentPosition,e._parentQuaternion,e._parentScale),e.object.matrixWorld.decompose(e.worldPosition,e.worldQuaternion,e._worldScale),e._parentQuaternionInv.copy(e._parentQuaternion).invert(),e._worldQuaternionInv.copy(e.worldQuaternion).invert()),e.camera.updateMatrixWorld(),e.camera.matrixWorld.decompose(e.cameraPosition,e.cameraQuaternion,e._cameraScale),e.camera.isOrthographicCamera?e.camera.getWorldDirection(e.eye).negate():e.eye.copy(e.cameraPosition).sub(e.worldPosition).normalize(),super.updateMatrixWorld(t)}dispose(){this.traverse(function(t){t.geometry&&t.geometry.dispose(),t.material&&t.material.dispose()})}}class O extends s.Object3D{constructor(){super(),this.isTransformControlsGizmo=!0,this.type="TransformControlsGizmo";const t=new s.MeshBasicMaterial({depthTest:!1,depthWrite:!1,fog:!1,toneMapped:!1,transparent:!0}),e=new s.LineBasicMaterial({depthTest:!1,depthWrite:!1,fog:!1,toneMapped:!1,transparent:!0}),n=t.clone();n.opacity=.15;const i=e.clone();i.opacity=.5;const o=t.clone();o.color.setHex(16711680);const r=t.clone();r.color.setHex(65280);const a=t.clone();a.color.setHex(255);const l=t.clone();l.color.setHex(16711680),l.opacity=.5;const h=t.clone();h.color.setHex(65280),h.opacity=.5;const c=t.clone();c.color.setHex(255),c.opacity=.5;const p=t.clone();p.opacity=.25;const u=t.clone();u.color.setHex(16776960),u.opacity=.25;const d=t.clone();d.color.setHex(16776960);const m=t.clone();m.color.setHex(7895160),this.materialLib={xAxis:o,yAxis:r,zAxis:a,active:d,xAxisTransparent:l,yAxisTransparent:h,zAxisTransparent:c,activeTransparent:u};const f=new s.CylinderGeometry(0,.04,.1,12);f.translate(0,.05,0);const _=new s.BoxGeometry(.08,.08,.08);_.translate(0,.04,0);const y=new s.BufferGeometry;y.setAttribute("position",new s.Float32BufferAttribute([0,0,0,1,0,0],3));const v=new s.CylinderGeometry(.0075,.0075,.5,3);function g(t,e){const n=new s.TorusGeometry(t,.0075,3,64,e*Math.PI*2);return n.rotateY(Math.PI/2),n.rotateX(Math.PI/2),n}v.translate(0,.25,0);const b={X:[[new s.Mesh(f,o),[.5,0,0],[0,0,-Math.PI/2]],[new s.Mesh(f,o),[-.5,0,0],[0,0,Math.PI/2]],[new s.Mesh(v,o),[0,0,0],[0,0,-Math.PI/2]]],Y:[[new s.Mesh(f,r),[0,.5,0]],[new s.Mesh(f,r),[0,-.5,0],[Math.PI,0,0]],[new s.Mesh(v,r)]],Z:[[new s.Mesh(f,a),[0,0,.5],[Math.PI/2,0,0]],[new s.Mesh(f,a),[0,0,-.5],[-Math.PI/2,0,0]],[new s.Mesh(v,a),null,[Math.PI/2,0,0]]],XYZ:[[new s.Mesh(new s.OctahedronGeometry(.1,0),p),[0,0,0]]],XY:[[new s.Mesh(new s.BoxGeometry(.15,.15,.01),c),[.15,.15,0]]],YZ:[[new s.Mesh(new s.BoxGeometry(.15,.15,.01),l),[0,.15,.15],[0,Math.PI/2,0]]],XZ:[[new s.Mesh(new s.BoxGeometry(.15,.15,.01),h),[.15,0,.15],[-Math.PI/2,0,0]]]},w={X:[[new s.Mesh(new s.CylinderGeometry(.2,0,.6,4),n),[.3,0,0],[0,0,-Math.PI/2]],[new s.Mesh(new s.CylinderGeometry(.2,0,.6,4),n),[-.3,0,0],[0,0,Math.PI/2]]],Y:[[new s.Mesh(new s.CylinderGeometry(.2,0,.6,4),n),[0,.3,0]],[new s.Mesh(new s.CylinderGeometry(.2,0,.6,4),n),[0,-.3,0],[0,0,Math.PI]]],Z:[[new s.Mesh(new s.CylinderGeometry(.2,0,.6,4),n),[0,0,.3],[Math.PI/2,0,0]],[new s.Mesh(new s.CylinderGeometry(.2,0,.6,4),n),[0,0,-.3],[-Math.PI/2,0,0]]],XYZ:[[new s.Mesh(new s.OctahedronGeometry(.2,0),n)]],XY:[[new s.Mesh(new s.BoxGeometry(.2,.2,.01),n),[.15,.15,0]]],YZ:[[new s.Mesh(new s.BoxGeometry(.2,.2,.01),n),[0,.15,.15],[0,Math.PI/2,0]]],XZ:[[new s.Mesh(new s.BoxGeometry(.2,.2,.01),n),[.15,0,.15],[-Math.PI/2,0,0]]]},S={START:[[new s.Mesh(new s.OctahedronGeometry(.01,2),i),null,null,null,"helper"]],END:[[new s.Mesh(new s.OctahedronGeometry(.01,2),i),null,null,null,"helper"]],DELTA:[[new s.Line(function(){const t=new s.BufferGeometry;return t.setAttribute("position",new s.Float32BufferAttribute([0,0,0,1,1,1],3)),t}(),i),null,null,null,"helper"]],X:[[new s.Line(y,i),[-1e3,0,0],null,[1e6,1,1],"helper"]],Y:[[new s.Line(y,i),[0,-1e3,0],[0,0,Math.PI/2],[1e6,1,1],"helper"]],Z:[[new s.Line(y,i),[0,0,-1e3],[0,-Math.PI/2,0],[1e6,1,1],"helper"]]},M={XYZE:[[new s.Mesh(g(.5,1),m),null,[0,Math.PI/2,0]]],X:[[new s.Mesh(g(.5,.5),o)]],Y:[[new s.Mesh(g(.5,.5),r),null,[0,0,-Math.PI/2]]],Z:[[new s.Mesh(g(.5,.5),a),null,[0,Math.PI/2,0]]],E:[[new s.Mesh(g(.75,1),u),null,[0,Math.PI/2,0]]]},x={AXIS:[[new s.Line(y,i),[-1e3,0,0],null,[1e6,1,1],"helper"]]},P={XYZE:[[new s.Mesh(new s.SphereGeometry(.25,10,8),n)]],X:[[new s.Mesh(new s.TorusGeometry(.5,.1,4,24),n),[0,0,0],[0,-Math.PI/2,-Math.PI/2]]],Y:[[new s.Mesh(new s.TorusGeometry(.5,.1,4,24),n),[0,0,0],[Math.PI/2,0,0]]],Z:[[new s.Mesh(new s.TorusGeometry(.5,.1,4,24),n),[0,0,0],[0,0,-Math.PI/2]]],E:[[new s.Mesh(new s.TorusGeometry(.75,.1,2,24),n)]]},E={X:[[new s.Mesh(_,o),[.5,0,0],[0,0,-Math.PI/2]],[new s.Mesh(v,o),[0,0,0],[0,0,-Math.PI/2]],[new s.Mesh(_,o),[-.5,0,0],[0,0,Math.PI/2]]],Y:[[new s.Mesh(_,r),[0,.5,0]],[new s.Mesh(v,r)],[new s.Mesh(_,r),[0,-.5,0],[0,0,Math.PI]]],Z:[[new s.Mesh(_,a),[0,0,.5],[Math.PI/2,0,0]],[new s.Mesh(v,a),[0,0,0],[Math.PI/2,0,0]],[new s.Mesh(_,a),[0,0,-.5],[-Math.PI/2,0,0]]],XY:[[new s.Mesh(new s.BoxGeometry(.15,.15,.01),c),[.15,.15,0]]],YZ:[[new s.Mesh(new s.BoxGeometry(.15,.15,.01),l),[0,.15,.15],[0,Math.PI/2,0]]],XZ:[[new s.Mesh(new s.BoxGeometry(.15,.15,.01),h),[.15,0,.15],[-Math.PI/2,0,0]]],XYZ:[[new s.Mesh(new s.BoxGeometry(.1,.1,.1),p)]]},T={X:[[new s.Mesh(new s.CylinderGeometry(.2,0,.6,4),n),[.3,0,0],[0,0,-Math.PI/2]],[new s.Mesh(new s.CylinderGeometry(.2,0,.6,4),n),[-.3,0,0],[0,0,Math.PI/2]]],Y:[[new s.Mesh(new s.CylinderGeometry(.2,0,.6,4),n),[0,.3,0]],[new s.Mesh(new s.CylinderGeometry(.2,0,.6,4),n),[0,-.3,0],[0,0,Math.PI]]],Z:[[new s.Mesh(new s.CylinderGeometry(.2,0,.6,4),n),[0,0,.3],[Math.PI/2,0,0]],[new s.Mesh(new s.CylinderGeometry(.2,0,.6,4),n),[0,0,-.3],[-Math.PI/2,0,0]]],XY:[[new s.Mesh(new s.BoxGeometry(.2,.2,.01),n),[.15,.15,0]]],YZ:[[new s.Mesh(new s.BoxGeometry(.2,.2,.01),n),[0,.15,.15],[0,Math.PI/2,0]]],XZ:[[new s.Mesh(new s.BoxGeometry(.2,.2,.01),n),[.15,0,.15],[-Math.PI/2,0,0]]],XYZ:[[new s.Mesh(new s.BoxGeometry(.2,.2,.2),n),[0,0,0]]]},C={X:[[new s.Line(y,i),[-1e3,0,0],null,[1e6,1,1],"helper"]],Y:[[new s.Line(y,i),[0,-1e3,0],[0,0,Math.PI/2],[1e6,1,1],"helper"]],Z:[[new s.Line(y,i),[0,0,-1e3],[0,-Math.PI/2,0],[1e6,1,1],"helper"]]};function A(t){const e=new s.Object3D;for(const n in t)for(let s=t[n].length;s--;){const i=t[n][s][0].clone(),o=t[n][s][1],r=t[n][s][2],a=t[n][s][3],l=t[n][s][4];i.name=n,i.tag=l,o&&i.position.set(o[0],o[1],o[2]),r&&i.rotation.set(r[0],r[1],r[2]),a&&i.scale.set(a[0],a[1],a[2]),i.updateMatrix();const h=i.geometry.clone();h.applyMatrix4(i.matrix),i.geometry=h,i.renderOrder=1/0,i.position.set(0,0,0),i.rotation.set(0,0,0),i.scale.set(1,1,1),e.add(i)}return e}this.gizmo={},this.picker={},this.helper={},this.add(this.gizmo.translate=A(b)),this.add(this.gizmo.rotate=A(M)),this.add(this.gizmo.scale=A(E)),this.add(this.picker.translate=A(w)),this.add(this.picker.rotate=A(P)),this.add(this.picker.scale=A(T)),this.add(this.helper.translate=A(S)),this.add(this.helper.rotate=A(x)),this.add(this.helper.scale=A(C)),this.picker.translate.visible=!1,this.picker.rotate.visible=!1,this.picker.scale.visible=!1}updateMatrixWorld(t){const e="local"===("scale"===this.mode?"local":this.space)?this.worldQuaternion:P;this.gizmo.translate.visible="translate"===this.mode,this.gizmo.rotate.visible="rotate"===this.mode,this.gizmo.scale.visible="scale"===this.mode,this.helper.translate.visible="translate"===this.mode,this.helper.rotate.visible="rotate"===this.mode,this.helper.scale.visible="scale"===this.mode;let n=[];n=n.concat(this.picker[this.mode].children),n=n.concat(this.gizmo[this.mode].children),n=n.concat(this.helper[this.mode].children);for(let t=0;t<n.length;t++){const s=n[t];let i;if(s.visible=!0,s.rotation.set(0,0,0),s.position.copy(this.worldPosition),i=this.camera.isOrthographicCamera?(this.camera.top-this.camera.bottom)/this.camera.zoom:this.worldPosition.distanceTo(this.cameraPosition)*Math.min(1.9*Math.tan(Math.PI*this.camera.fov/360)/this.camera.zoom,7),s.scale.set(1,1,1).multiplyScalar(i*this.size/4),"helper"!==s.tag){if(s.quaternion.copy(e),"translate"===this.mode||"scale"===this.mode){const t=.99,n=.2;"X"===s.name&&Math.abs(w.copy(C).applyQuaternion(e).dot(this.eye))>t&&(s.scale.set(1e-10,1e-10,1e-10),s.visible=!1),"Y"===s.name&&Math.abs(w.copy(A).applyQuaternion(e).dot(this.eye))>t&&(s.scale.set(1e-10,1e-10,1e-10),s.visible=!1),"Z"===s.name&&Math.abs(w.copy(R).applyQuaternion(e).dot(this.eye))>t&&(s.scale.set(1e-10,1e-10,1e-10),s.visible=!1),"XY"===s.name&&Math.abs(w.copy(R).applyQuaternion(e).dot(this.eye))<n&&(s.scale.set(1e-10,1e-10,1e-10),s.visible=!1),"YZ"===s.name&&Math.abs(w.copy(C).applyQuaternion(e).dot(this.eye))<n&&(s.scale.set(1e-10,1e-10,1e-10),s.visible=!1),"XZ"===s.name&&Math.abs(w.copy(A).applyQuaternion(e).dot(this.eye))<n&&(s.scale.set(1e-10,1e-10,1e-10),s.visible=!1)}else"rotate"===this.mode&&(x.copy(e),w.copy(this.eye).applyQuaternion(a.copy(e).invert()),-1!==s.name.search("E")&&s.quaternion.setFromRotationMatrix(M.lookAt(this.eye,S,A)),"X"===s.name&&(a.setFromAxisAngle(C,Math.atan2(-w.y,w.z)),a.multiplyQuaternions(x,a),s.quaternion.copy(a)),"Y"===s.name&&(a.setFromAxisAngle(A,Math.atan2(w.x,w.z)),a.multiplyQuaternions(x,a),s.quaternion.copy(a)),"Z"===s.name&&(a.setFromAxisAngle(R,Math.atan2(w.y,w.x)),a.multiplyQuaternions(x,a),s.quaternion.copy(a)));s.visible=s.visible&&(-1===s.name.indexOf("X")||this.showX),s.visible=s.visible&&(-1===s.name.indexOf("Y")||this.showY),s.visible=s.visible&&(-1===s.name.indexOf("Z")||this.showZ),s.visible=s.visible&&(-1===s.name.indexOf("E")||this.showX&&this.showY&&this.showZ),s.material._color=s.material._color||s.material.color.clone(),s.material._opacity=s.material._opacity||s.material.opacity,s.material.color.copy(s.material._color),s.material.opacity=s.material._opacity,this.enabled&&this.axis&&(s.name===this.axis||this.axis.split("").some(function(t){return s.name===t}))&&(s.material.color.copy(this.materialLib.active.color),s.material.opacity=1)}else s.visible=!1,"AXIS"===s.name?(s.visible=!!this.axis,"X"===this.axis&&(a.setFromEuler(b.set(0,0,0)),s.quaternion.copy(e).multiply(a),Math.abs(w.copy(C).applyQuaternion(e).dot(this.eye))>.9&&(s.visible=!1)),"Y"===this.axis&&(a.setFromEuler(b.set(0,0,Math.PI/2)),s.quaternion.copy(e).multiply(a),Math.abs(w.copy(A).applyQuaternion(e).dot(this.eye))>.9&&(s.visible=!1)),"Z"===this.axis&&(a.setFromEuler(b.set(0,Math.PI/2,0)),s.quaternion.copy(e).multiply(a),Math.abs(w.copy(R).applyQuaternion(e).dot(this.eye))>.9&&(s.visible=!1)),"XYZE"===this.axis&&(a.setFromEuler(b.set(0,Math.PI/2,0)),w.copy(this.rotationAxis),s.quaternion.setFromRotationMatrix(M.lookAt(S,w,A)),s.quaternion.multiply(a),s.visible=this.dragging),"E"===this.axis&&(s.visible=!1)):"START"===s.name?(s.position.copy(this.worldPositionStart),s.visible=this.dragging):"END"===s.name?(s.position.copy(this.worldPosition),s.visible=this.dragging):"DELTA"===s.name?(s.position.copy(this.worldPositionStart),s.quaternion.copy(this.worldQuaternionStart),o.set(1e-10,1e-10,1e-10).add(this.worldPositionStart).sub(this.worldPosition).multiplyScalar(-1),o.applyQuaternion(this.worldQuaternionStart.clone().invert()),s.scale.copy(o),s.visible=this.dragging):(s.quaternion.copy(e),this.dragging?s.position.copy(this.worldPositionStart):s.position.copy(this.worldPosition),this.axis&&(s.visible=-1!==this.axis.search(s.name)))}super.updateMatrixWorld(t)}}class L extends s.Mesh{constructor(){super(new s.PlaneGeometry(1e5,1e5,2,2),new s.MeshBasicMaterial({visible:!1,wireframe:!0,side:s.DoubleSide,transparent:!0,opacity:.1,toneMapped:!1})),this.isTransformControlsPlane=!0,this.type="TransformControlsPlane"}updateMatrixWorld(t){let e=this.space;switch(this.position.copy(this.worldPosition),"scale"===this.mode&&(e="local"),D.copy(C).applyQuaternion("local"===e?this.worldQuaternion:P),k.copy(A).applyQuaternion("local"===e?this.worldQuaternion:P),j.copy(R).applyQuaternion("local"===e?this.worldQuaternion:P),w.copy(k),this.mode){case"translate":case"scale":switch(this.axis){case"X":w.copy(this.eye).cross(D),E.copy(D).cross(w);break;case"Y":w.copy(this.eye).cross(k),E.copy(k).cross(w);break;case"Z":w.copy(this.eye).cross(j),E.copy(j).cross(w);break;case"XY":E.copy(j);break;case"YZ":E.copy(D);break;case"XZ":w.copy(j),E.copy(k);break;case"XYZ":case"E":E.set(0,0,0)}break;default:E.set(0,0,0)}0===E.length()?this.quaternion.copy(this.cameraQuaternion):(T.lookAt(o.set(0,0,0),E,w),this.quaternion.setFromRotationMatrix(T)),super.updateMatrixWorld(t)}}},6262:(t,e)=>{e.A=(t,e)=>{const n=t.__vccOpts||t;for(const[t,s]of e)n[t]=s;return n}},7024:(t,e,n)=>{n.d(e,{N:()=>m});var s=n(5117);const i={type:"change"},o={type:"start"},r={type:"end"},a=new s.Ray,l=new s.Plane,h=Math.cos(70*s.MathUtils.DEG2RAD),c=new s.Vector3,p=2*Math.PI,u=-1,d=1e-6;class m extends s.Controls{constructor(t,e=null){super(t,e),this.state=u,this.target=new s.Vector3,this.cursor=new s.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.keyRotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:s.MOUSE.ROTATE,MIDDLE:s.MOUSE.DOLLY,RIGHT:s.MOUSE.PAN},this.touches={ONE:s.TOUCH.ROTATE,TWO:s.TOUCH.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this._lastPosition=new s.Vector3,this._lastQuaternion=new s.Quaternion,this._lastTargetPosition=new s.Vector3,this._quat=(new s.Quaternion).setFromUnitVectors(t.up,new s.Vector3(0,1,0)),this._quatInverse=this._quat.clone().invert(),this._spherical=new s.Spherical,this._sphericalDelta=new s.Spherical,this._scale=1,this._panOffset=new s.Vector3,this._rotateStart=new s.Vector2,this._rotateEnd=new s.Vector2,this._rotateDelta=new s.Vector2,this._panStart=new s.Vector2,this._panEnd=new s.Vector2,this._panDelta=new s.Vector2,this._dollyStart=new s.Vector2,this._dollyEnd=new s.Vector2,this._dollyDelta=new s.Vector2,this._dollyDirection=new s.Vector3,this._mouse=new s.Vector2,this._performCursorZoom=!1,this._pointers=[],this._pointerPositions={},this._controlActive=!1,this._onPointerMove=_.bind(this),this._onPointerDown=f.bind(this),this._onPointerUp=y.bind(this),this._onContextMenu=x.bind(this),this._onMouseWheel=b.bind(this),this._onKeyDown=w.bind(this),this._onTouchStart=S.bind(this),this._onTouchMove=M.bind(this),this._onMouseDown=v.bind(this),this._onMouseMove=g.bind(this),this._interceptControlDown=P.bind(this),this._interceptControlUp=E.bind(this),null!==this.domElement&&this.connect(this.domElement),this.update()}connect(t){super.connect(t),this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointercancel",this._onPointerUp),this.domElement.addEventListener("contextmenu",this._onContextMenu),this.domElement.addEventListener("wheel",this._onMouseWheel,{passive:!1}),this.domElement.getRootNode().addEventListener("keydown",this._interceptControlDown,{passive:!0,capture:!0}),this.domElement.style.touchAction="none"}disconnect(){this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.domElement.removeEventListener("pointercancel",this._onPointerUp),this.domElement.removeEventListener("wheel",this._onMouseWheel),this.domElement.removeEventListener("contextmenu",this._onContextMenu),this.stopListenToKeyEvents(),this.domElement.getRootNode().removeEventListener("keydown",this._interceptControlDown,{capture:!0}),this.domElement.style.touchAction="auto"}dispose(){this.disconnect()}getPolarAngle(){return this._spherical.phi}getAzimuthalAngle(){return this._spherical.theta}getDistance(){return this.object.position.distanceTo(this.target)}listenToKeyEvents(t){t.addEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=t}stopListenToKeyEvents(){null!==this._domElementKeyEvents&&(this._domElementKeyEvents.removeEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=null)}saveState(){this.target0.copy(this.target),this.position0.copy(this.object.position),this.zoom0=this.object.zoom}reset(){this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(i),this.update(),this.state=u}update(t=null){const e=this.object.position;c.copy(e).sub(this.target),c.applyQuaternion(this._quat),this._spherical.setFromVector3(c),this.autoRotate&&this.state===u&&this._rotateLeft(this._getAutoRotationAngle(t)),this.enableDamping?(this._spherical.theta+=this._sphericalDelta.theta*this.dampingFactor,this._spherical.phi+=this._sphericalDelta.phi*this.dampingFactor):(this._spherical.theta+=this._sphericalDelta.theta,this._spherical.phi+=this._sphericalDelta.phi);let n=this.minAzimuthAngle,o=this.maxAzimuthAngle;isFinite(n)&&isFinite(o)&&(n<-Math.PI?n+=p:n>Math.PI&&(n-=p),o<-Math.PI?o+=p:o>Math.PI&&(o-=p),this._spherical.theta=n<=o?Math.max(n,Math.min(o,this._spherical.theta)):this._spherical.theta>(n+o)/2?Math.max(n,this._spherical.theta):Math.min(o,this._spherical.theta)),this._spherical.phi=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,this._spherical.phi)),this._spherical.makeSafe(),!0===this.enableDamping?this.target.addScaledVector(this._panOffset,this.dampingFactor):this.target.add(this._panOffset),this.target.sub(this.cursor),this.target.clampLength(this.minTargetRadius,this.maxTargetRadius),this.target.add(this.cursor);let r=!1;if(this.zoomToCursor&&this._performCursorZoom||this.object.isOrthographicCamera)this._spherical.radius=this._clampDistance(this._spherical.radius);else{const t=this._spherical.radius;this._spherical.radius=this._clampDistance(this._spherical.radius*this._scale),r=t!=this._spherical.radius}if(c.setFromSpherical(this._spherical),c.applyQuaternion(this._quatInverse),e.copy(this.target).add(c),this.object.lookAt(this.target),!0===this.enableDamping?(this._sphericalDelta.theta*=1-this.dampingFactor,this._sphericalDelta.phi*=1-this.dampingFactor,this._panOffset.multiplyScalar(1-this.dampingFactor)):(this._sphericalDelta.set(0,0,0),this._panOffset.set(0,0,0)),this.zoomToCursor&&this._performCursorZoom){let t=null;if(this.object.isPerspectiveCamera){const e=c.length();t=this._clampDistance(e*this._scale);const n=e-t;this.object.position.addScaledVector(this._dollyDirection,n),this.object.updateMatrixWorld(),r=!!n}else if(this.object.isOrthographicCamera){const e=new s.Vector3(this._mouse.x,this._mouse.y,0);e.unproject(this.object);const n=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),this.object.updateProjectionMatrix(),r=n!==this.object.zoom;const i=new s.Vector3(this._mouse.x,this._mouse.y,0);i.unproject(this.object),this.object.position.sub(i).add(e),this.object.updateMatrixWorld(),t=c.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),this.zoomToCursor=!1;null!==t&&(this.screenSpacePanning?this.target.set(0,0,-1).transformDirection(this.object.matrix).multiplyScalar(t).add(this.object.position):(a.origin.copy(this.object.position),a.direction.set(0,0,-1).transformDirection(this.object.matrix),Math.abs(this.object.up.dot(a.direction))<h?this.object.lookAt(this.target):(l.setFromNormalAndCoplanarPoint(this.object.up,this.target),a.intersectPlane(l,this.target))))}else if(this.object.isOrthographicCamera){const t=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),t!==this.object.zoom&&(this.object.updateProjectionMatrix(),r=!0)}return this._scale=1,this._performCursorZoom=!1,!!(r||this._lastPosition.distanceToSquared(this.object.position)>d||8*(1-this._lastQuaternion.dot(this.object.quaternion))>d||this._lastTargetPosition.distanceToSquared(this.target)>d)&&(this.dispatchEvent(i),this._lastPosition.copy(this.object.position),this._lastQuaternion.copy(this.object.quaternion),this._lastTargetPosition.copy(this.target),!0)}_getAutoRotationAngle(t){return null!==t?p/60*this.autoRotateSpeed*t:p/60/60*this.autoRotateSpeed}_getZoomScale(t){const e=Math.abs(.01*t);return Math.pow(.95,this.zoomSpeed*e)}_rotateLeft(t){this._sphericalDelta.theta-=t}_rotateUp(t){this._sphericalDelta.phi-=t}_panLeft(t,e){c.setFromMatrixColumn(e,0),c.multiplyScalar(-t),this._panOffset.add(c)}_panUp(t,e){!0===this.screenSpacePanning?c.setFromMatrixColumn(e,1):(c.setFromMatrixColumn(e,0),c.crossVectors(this.object.up,c)),c.multiplyScalar(t),this._panOffset.add(c)}_pan(t,e){const n=this.domElement;if(this.object.isPerspectiveCamera){const s=this.object.position;c.copy(s).sub(this.target);let i=c.length();i*=Math.tan(this.object.fov/2*Math.PI/180),this._panLeft(2*t*i/n.clientHeight,this.object.matrix),this._panUp(2*e*i/n.clientHeight,this.object.matrix)}else this.object.isOrthographicCamera?(this._panLeft(t*(this.object.right-this.object.left)/this.object.zoom/n.clientWidth,this.object.matrix),this._panUp(e*(this.object.top-this.object.bottom)/this.object.zoom/n.clientHeight,this.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),this.enablePan=!1)}_dollyOut(t){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale/=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_dollyIn(t){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale*=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_updateZoomParameters(t,e){if(!this.zoomToCursor)return;this._performCursorZoom=!0;const n=this.domElement.getBoundingClientRect(),s=t-n.left,i=e-n.top,o=n.width,r=n.height;this._mouse.x=s/o*2-1,this._mouse.y=-i/r*2+1,this._dollyDirection.set(this._mouse.x,this._mouse.y,1).unproject(this.object).sub(this.object.position).normalize()}_clampDistance(t){return Math.max(this.minDistance,Math.min(this.maxDistance,t))}_handleMouseDownRotate(t){this._rotateStart.set(t.clientX,t.clientY)}_handleMouseDownDolly(t){this._updateZoomParameters(t.clientX,t.clientX),this._dollyStart.set(t.clientX,t.clientY)}_handleMouseDownPan(t){this._panStart.set(t.clientX,t.clientY)}_handleMouseMoveRotate(t){this._rotateEnd.set(t.clientX,t.clientY),this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const e=this.domElement;this._rotateLeft(p*this._rotateDelta.x/e.clientHeight),this._rotateUp(p*this._rotateDelta.y/e.clientHeight),this._rotateStart.copy(this._rotateEnd),this.update()}_handleMouseMoveDolly(t){this._dollyEnd.set(t.clientX,t.clientY),this._dollyDelta.subVectors(this._dollyEnd,this._dollyStart),this._dollyDelta.y>0?this._dollyOut(this._getZoomScale(this._dollyDelta.y)):this._dollyDelta.y<0&&this._dollyIn(this._getZoomScale(this._dollyDelta.y)),this._dollyStart.copy(this._dollyEnd),this.update()}_handleMouseMovePan(t){this._panEnd.set(t.clientX,t.clientY),this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd),this.update()}_handleMouseWheel(t){this._updateZoomParameters(t.clientX,t.clientY),t.deltaY<0?this._dollyIn(this._getZoomScale(t.deltaY)):t.deltaY>0&&this._dollyOut(this._getZoomScale(t.deltaY)),this.update()}_handleKeyDown(t){let e=!1;switch(t.code){case this.keys.UP:t.ctrlKey||t.metaKey||t.shiftKey?this.enableRotate&&this._rotateUp(p*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,this.keyPanSpeed),e=!0;break;case this.keys.BOTTOM:t.ctrlKey||t.metaKey||t.shiftKey?this.enableRotate&&this._rotateUp(-p*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,-this.keyPanSpeed),e=!0;break;case this.keys.LEFT:t.ctrlKey||t.metaKey||t.shiftKey?this.enableRotate&&this._rotateLeft(p*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(this.keyPanSpeed,0),e=!0;break;case this.keys.RIGHT:t.ctrlKey||t.metaKey||t.shiftKey?this.enableRotate&&this._rotateLeft(-p*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(-this.keyPanSpeed,0),e=!0}e&&(t.preventDefault(),this.update())}_handleTouchStartRotate(t){if(1===this._pointers.length)this._rotateStart.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),s=.5*(t.pageY+e.y);this._rotateStart.set(n,s)}}_handleTouchStartPan(t){if(1===this._pointers.length)this._panStart.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),s=.5*(t.pageY+e.y);this._panStart.set(n,s)}}_handleTouchStartDolly(t){const e=this._getSecondPointerPosition(t),n=t.pageX-e.x,s=t.pageY-e.y,i=Math.sqrt(n*n+s*s);this._dollyStart.set(0,i)}_handleTouchStartDollyPan(t){this.enableZoom&&this._handleTouchStartDolly(t),this.enablePan&&this._handleTouchStartPan(t)}_handleTouchStartDollyRotate(t){this.enableZoom&&this._handleTouchStartDolly(t),this.enableRotate&&this._handleTouchStartRotate(t)}_handleTouchMoveRotate(t){if(1==this._pointers.length)this._rotateEnd.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),s=.5*(t.pageY+e.y);this._rotateEnd.set(n,s)}this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const e=this.domElement;this._rotateLeft(p*this._rotateDelta.x/e.clientHeight),this._rotateUp(p*this._rotateDelta.y/e.clientHeight),this._rotateStart.copy(this._rotateEnd)}_handleTouchMovePan(t){if(1===this._pointers.length)this._panEnd.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),s=.5*(t.pageY+e.y);this._panEnd.set(n,s)}this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd)}_handleTouchMoveDolly(t){const e=this._getSecondPointerPosition(t),n=t.pageX-e.x,s=t.pageY-e.y,i=Math.sqrt(n*n+s*s);this._dollyEnd.set(0,i),this._dollyDelta.set(0,Math.pow(this._dollyEnd.y/this._dollyStart.y,this.zoomSpeed)),this._dollyOut(this._dollyDelta.y),this._dollyStart.copy(this._dollyEnd);const o=.5*(t.pageX+e.x),r=.5*(t.pageY+e.y);this._updateZoomParameters(o,r)}_handleTouchMoveDollyPan(t){this.enableZoom&&this._handleTouchMoveDolly(t),this.enablePan&&this._handleTouchMovePan(t)}_handleTouchMoveDollyRotate(t){this.enableZoom&&this._handleTouchMoveDolly(t),this.enableRotate&&this._handleTouchMoveRotate(t)}_addPointer(t){this._pointers.push(t.pointerId)}_removePointer(t){delete this._pointerPositions[t.pointerId];for(let e=0;e<this._pointers.length;e++)if(this._pointers[e]==t.pointerId)return void this._pointers.splice(e,1)}_isTrackingPointer(t){for(let e=0;e<this._pointers.length;e++)if(this._pointers[e]==t.pointerId)return!0;return!1}_trackPointer(t){let e=this._pointerPositions[t.pointerId];void 0===e&&(e=new s.Vector2,this._pointerPositions[t.pointerId]=e),e.set(t.pageX,t.pageY)}_getSecondPointerPosition(t){const e=t.pointerId===this._pointers[0]?this._pointers[1]:this._pointers[0];return this._pointerPositions[e]}_customWheelEvent(t){const e=t.deltaMode,n={clientX:t.clientX,clientY:t.clientY,deltaY:t.deltaY};switch(e){case 1:n.deltaY*=16;break;case 2:n.deltaY*=100}return t.ctrlKey&&!this._controlActive&&(n.deltaY*=10),n}}function f(t){!1!==this.enabled&&(0===this._pointers.length&&(this.domElement.setPointerCapture(t.pointerId),this.domElement.addEventListener("pointermove",this._onPointerMove),this.domElement.addEventListener("pointerup",this._onPointerUp)),this._isTrackingPointer(t)||(this._addPointer(t),"touch"===t.pointerType?this._onTouchStart(t):this._onMouseDown(t)))}function _(t){!1!==this.enabled&&("touch"===t.pointerType?this._onTouchMove(t):this._onMouseMove(t))}function y(t){switch(this._removePointer(t),this._pointers.length){case 0:this.domElement.releasePointerCapture(t.pointerId),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.dispatchEvent(r),this.state=u;break;case 1:const e=this._pointers[0],n=this._pointerPositions[e];this._onTouchStart({pointerId:e,pageX:n.x,pageY:n.y})}}function v(t){let e;switch(t.button){case 0:e=this.mouseButtons.LEFT;break;case 1:e=this.mouseButtons.MIDDLE;break;case 2:e=this.mouseButtons.RIGHT;break;default:e=-1}switch(e){case s.MOUSE.DOLLY:if(!1===this.enableZoom)return;this._handleMouseDownDolly(t),this.state=1;break;case s.MOUSE.ROTATE:if(t.ctrlKey||t.metaKey||t.shiftKey){if(!1===this.enablePan)return;this._handleMouseDownPan(t),this.state=2}else{if(!1===this.enableRotate)return;this._handleMouseDownRotate(t),this.state=0}break;case s.MOUSE.PAN:if(t.ctrlKey||t.metaKey||t.shiftKey){if(!1===this.enableRotate)return;this._handleMouseDownRotate(t),this.state=0}else{if(!1===this.enablePan)return;this._handleMouseDownPan(t),this.state=2}break;default:this.state=u}this.state!==u&&this.dispatchEvent(o)}function g(t){switch(this.state){case 0:if(!1===this.enableRotate)return;this._handleMouseMoveRotate(t);break;case 1:if(!1===this.enableZoom)return;this._handleMouseMoveDolly(t);break;case 2:if(!1===this.enablePan)return;this._handleMouseMovePan(t)}}function b(t){!1!==this.enabled&&!1!==this.enableZoom&&this.state===u&&(t.preventDefault(),this.dispatchEvent(o),this._handleMouseWheel(this._customWheelEvent(t)),this.dispatchEvent(r))}function w(t){!1!==this.enabled&&this._handleKeyDown(t)}function S(t){switch(this._trackPointer(t),this._pointers.length){case 1:switch(this.touches.ONE){case s.TOUCH.ROTATE:if(!1===this.enableRotate)return;this._handleTouchStartRotate(t),this.state=3;break;case s.TOUCH.PAN:if(!1===this.enablePan)return;this._handleTouchStartPan(t),this.state=4;break;default:this.state=u}break;case 2:switch(this.touches.TWO){case s.TOUCH.DOLLY_PAN:if(!1===this.enableZoom&&!1===this.enablePan)return;this._handleTouchStartDollyPan(t),this.state=5;break;case s.TOUCH.DOLLY_ROTATE:if(!1===this.enableZoom&&!1===this.enableRotate)return;this._handleTouchStartDollyRotate(t),this.state=6;break;default:this.state=u}break;default:this.state=u}this.state!==u&&this.dispatchEvent(o)}function M(t){switch(this._trackPointer(t),this.state){case 3:if(!1===this.enableRotate)return;this._handleTouchMoveRotate(t),this.update();break;case 4:if(!1===this.enablePan)return;this._handleTouchMovePan(t),this.update();break;case 5:if(!1===this.enableZoom&&!1===this.enablePan)return;this._handleTouchMoveDollyPan(t),this.update();break;case 6:if(!1===this.enableZoom&&!1===this.enableRotate)return;this._handleTouchMoveDollyRotate(t),this.update();break;default:this.state=u}}function x(t){!1!==this.enabled&&t.preventDefault()}function P(t){"Control"===t.key&&(this._controlActive=!0,this.domElement.getRootNode().addEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}function E(t){"Control"===t.key&&(this._controlActive=!1,this.domElement.getRootNode().removeEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
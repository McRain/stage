/*! For license information please see vendors-121455fa.477b3934.js.LICENSE.txt */
"use strict";(self.webpackChunk_reneos_slider_editor=self.webpackChunk_reneos_slider_editor||[]).push([[642],{437:(e,t,n)=>{n.r(t),n.d(t,{ACESFilmicToneMapping:()=>r.FV,AddEquation:()=>r.gO9,AddOperation:()=>r.XrR,AdditiveAnimationBlendMode:()=>r.DAe,AdditiveBlending:()=>r.EZo,AgXToneMapping:()=>r.LAk,AlphaFormat:()=>r.wrO,AlwaysCompare:()=>r.FFZ,AlwaysDepth:()=>r.lGu,AlwaysStencilFunc:()=>r.sKt,AmbientLight:()=>r.$p8,AnimationAction:()=>r.pPE,AnimationClip:()=>r.tz3,AnimationLoader:()=>r.kEx,AnimationMixer:()=>r.Iw4,AnimationObjectGroup:()=>r.P5j,AnimationUtils:()=>r.AKb,ArcCurve:()=>r.ibB,ArrayCamera:()=>r.nZQ,ArrowHelper:()=>r.E0M,AttachedBindMode:()=>r.BER,Audio:()=>r.fP5,AudioAnalyser:()=>r.CwR,AudioContext:()=>r.UtX,AudioListener:()=>r.Pf$,AudioLoader:()=>r.Am1,AxesHelper:()=>r.IzY,BackSide:()=>r.hsX,BasicDepthPacking:()=>r.Rkk,BasicShadowMap:()=>r.bTm,BatchedMesh:()=>r.$Ed,Bone:()=>r.$Kf,BooleanKeyframeTrack:()=>r.YOZ,Box2:()=>r.UtB,Box3:()=>r.NRn,Box3Helper:()=>r.BND,BoxGeometry:()=>r.iNn,BoxHelper:()=>r.IWo,BufferAttribute:()=>r.THS,BufferGeometry:()=>r.LoY,BufferGeometryLoader:()=>r.SUR,ByteType:()=>r.tJf,Cache:()=>r.l2R,Camera:()=>r.i7d,CameraHelper:()=>r.WTh,CanvasTexture:()=>r.GOR,CapsuleGeometry:()=>r.qU7,CatmullRomCurve3:()=>r.B6O,CineonToneMapping:()=>r.nNL,CircleGeometry:()=>r.tcD,ClampToEdgeWrapping:()=>r.ghU,Clock:()=>r.zD7,Color:()=>r.Q1f,ColorKeyframeTrack:()=>r.T6I,ColorManagement:()=>r.ppV,CompressedArrayTexture:()=>r.iOZ,CompressedCubeTexture:()=>r.c5h,CompressedTexture:()=>r.FvD,CompressedTextureLoader:()=>r.YRT,ConeGeometry:()=>r.qFE,ConstantAlphaFactor:()=>r.e0p,ConstantColorFactor:()=>r.RrE,Controls:()=>r.H2z,CubeCamera:()=>r.F1T,CubeReflectionMapping:()=>r.hy7,CubeRefractionMapping:()=>r.xFO,CubeTexture:()=>r.b4q,CubeTextureLoader:()=>r.ScU,CubeUVReflectionMapping:()=>r.Om,CubicBezierCurve:()=>r.Z0B,CubicBezierCurve3:()=>r.s0K,CubicInterpolant:()=>r.Pdi,CullFaceBack:()=>r.Vb5,CullFaceFront:()=>r.Jnc,CullFaceFrontBack:()=>r.ywQ,CullFaceNone:()=>r.WNZ,Curve:()=>r.Ipv,CurvePath:()=>r.jGm,CustomBlending:()=>r.bCz,CustomToneMapping:()=>r.g7M,CylinderGeometry:()=>r.Ho_,Cylindrical:()=>r.hjs,Data3DTexture:()=>r.dYF,DataArrayTexture:()=>r.rFo,DataTexture:()=>r.GYF,DataTextureLoader:()=>r.BRH,DataUtils:()=>r.GxU,DecrementStencilOp:()=>r.ROr,DecrementWrapStencilOp:()=>r.fJr,DefaultLoadingManager:()=>r.h_9,DepthFormat:()=>r.zdS,DepthStencilFormat:()=>r.dcC,DepthTexture:()=>r.VCu,DetachedBindMode:()=>r.Fvi,DirectionalLight:()=>r.ZyN,DirectionalLightHelper:()=>r.PFK,DiscreteInterpolant:()=>r.Yhb,DodecahedronGeometry:()=>r.nEu,DoubleSide:()=>r.$EB,DstAlphaFactor:()=>r.hdd,DstColorFactor:()=>r.wn6,DynamicCopyUsage:()=>r.MOq,DynamicDrawUsage:()=>r.Vnu,DynamicReadUsage:()=>r.hIf,EdgesGeometry:()=>r.TDQ,EllipseCurve:()=>r.S20,EqualCompare:()=>r.kO0,EqualDepth:()=>r.U3G,EqualStencilFunc:()=>r.jsO,EquirectangularReflectionMapping:()=>r.wfO,EquirectangularRefractionMapping:()=>r.uV5,Euler:()=>r.O9p,EventDispatcher:()=>r.Qev,ExternalTexture:()=>r.rjZ,ExtrudeGeometry:()=>r.QCA,FileLoader:()=>r.Y9S,Float16BufferAttribute:()=>r.Oax,Float32BufferAttribute:()=>r.qtW,FloatType:()=>r.RQf,Fog:()=>r.jUj,FogExp2:()=>r.cRK,FramebufferTexture:()=>r.Pem,FrontSide:()=>r.hB5,Frustum:()=>r.PPD,FrustumArray:()=>r.uf3,GLBufferAttribute:()=>r.oh6,GLSL1:()=>r.Wyr,GLSL3:()=>r.Wdf,GreaterCompare:()=>r.eoi,GreaterDepth:()=>r.K52,GreaterEqualCompare:()=>r.gWB,GreaterEqualDepth:()=>r.Gwm,GreaterEqualStencilFunc:()=>r.TMh,GreaterStencilFunc:()=>r.RcT,GridHelper:()=>r.fTw,Group:()=>r.YJl,HalfFloatType:()=>r.ix0,HemisphereLight:()=>r.dth,HemisphereLightHelper:()=>r.R1W,IcosahedronGeometry:()=>r.WBB,ImageBitmapLoader:()=>r.Kzg,ImageLoader:()=>r.$NF,ImageUtils:()=>r.HgN,IncrementStencilOp:()=>r.HLH,IncrementWrapStencilOp:()=>r.Ru$,InstancedBufferAttribute:()=>r.uWO,InstancedBufferGeometry:()=>r.CmU,InstancedInterleavedBuffer:()=>r.LuO,InstancedMesh:()=>r.ZLX,Int16BufferAttribute:()=>r.Hrb,Int32BufferAttribute:()=>r.vmz,Int8BufferAttribute:()=>r.wvS,IntType:()=>r.Yuy,InterleavedBuffer:()=>r.eB$,InterleavedBufferAttribute:()=>r.eHs,Interpolant:()=>r.lGw,InterpolateDiscrete:()=>r.ljd,InterpolateLinear:()=>r.PJ3,InterpolateSmooth:()=>r.EQC,InterpolationSamplingMode:()=>r.TM5,InterpolationSamplingType:()=>r.G4u,InvertStencilOp:()=>r.oVO,KeepStencilOp:()=>r.VVr,KeyframeTrack:()=>r.UJ6,LOD:()=>r.UpK,LatheGeometry:()=>r.nzx,Layers:()=>r.zgK,LessCompare:()=>r.vim,LessDepth:()=>r.brA,LessEqualCompare:()=>r.TiK,LessEqualDepth:()=>r.xSv,LessEqualStencilFunc:()=>r.CR7,LessStencilFunc:()=>r.kYr,Light:()=>r.veJ,LightProbe:()=>r.FZo,Line:()=>r.N1A,Line3:()=>r.cZY,LineBasicMaterial:()=>r.mrM,LineCurve:()=>r.GZZ,LineCurve3:()=>r.VnP,LineDashedMaterial:()=>r.Fvt,LineLoop:()=>r.FCc,LineSegments:()=>r.DXC,LinearFilter:()=>r.k6q,LinearInterpolant:()=>r.ezk,LinearMipMapLinearFilter:()=>r.NZq,LinearMipMapNearestFilter:()=>r.iUH,LinearMipmapLinearFilter:()=>r.$_I,LinearMipmapNearestFilter:()=>r.kRr,LinearSRGBColorSpace:()=>r.Zr2,LinearToneMapping:()=>r.kyO,LinearTransfer:()=>r.VxR,Loader:()=>r.aHM,LoaderUtils:()=>r.r6x,LoadingManager:()=>r.KPJ,LoopOnce:()=>r.G3T,LoopPingPong:()=>r.lc7,LoopRepeat:()=>r.aMy,MOUSE:()=>r.kBv,Material:()=>r.imn,MaterialLoader:()=>r.jut,MathUtils:()=>r.cj9,Matrix2:()=>r.k_V,Matrix3:()=>r.dwI,Matrix4:()=>r.kn4,MaxEquation:()=>r.$ei,Mesh:()=>r.eaF,MeshBasicMaterial:()=>r.V9B,MeshDepthMaterial:()=>r.CSG,MeshDistanceMaterial:()=>r.aVO,MeshLambertMaterial:()=>r.G_z,MeshMatcapMaterial:()=>r.FNr,MeshNormalMaterial:()=>r.qBx,MeshPhongMaterial:()=>r.tXL,MeshPhysicalMaterial:()=>r.uSd,MeshStandardMaterial:()=>r._4j,MeshToonMaterial:()=>r.Df,MinEquation:()=>r.znC,MirroredRepeatWrapping:()=>r.kTW,MixOperation:()=>r.KRh,MultiplyBlending:()=>r.EdD,MultiplyOperation:()=>r.caT,NearestFilter:()=>r.hxR,NearestMipMapLinearFilter:()=>r.a$r,NearestMipMapNearestFilter:()=>r.$O9,NearestMipmapLinearFilter:()=>r.Cfg,NearestMipmapNearestFilter:()=>r.pHI,NeutralToneMapping:()=>r.aJ8,NeverCompare:()=>r.amv,NeverDepth:()=>r.eHc,NeverStencilFunc:()=>r.HPb,NoBlending:()=>r.XIg,NoColorSpace:()=>r.jf0,NoToneMapping:()=>r.y_p,NormalAnimationBlendMode:()=>r.Ke9,NormalBlending:()=>r.NTi,NotEqualCompare:()=>r.jzd,NotEqualDepth:()=>r.bw0,NotEqualStencilFunc:()=>r.klZ,NumberKeyframeTrack:()=>r.Hit,Object3D:()=>r.B69,ObjectLoader:()=>r.XTe,ObjectSpaceNormalMap:()=>r.vyJ,OctahedronGeometry:()=>r.Ufg,OneFactor:()=>r.qad,OneMinusConstantAlphaFactor:()=>r.ov9,OneMinusConstantColorFactor:()=>r.$Yl,OneMinusDstAlphaFactor:()=>r.Nt7,OneMinusDstColorFactor:()=>r.aEY,OneMinusSrcAlphaFactor:()=>r.OuU,OneMinusSrcColorFactor:()=>r.LiQ,OrthographicCamera:()=>r.qUd,PCFShadowMap:()=>r.QP0,PCFSoftShadowMap:()=>r.Wk7,PMREMGenerator:()=>P,Path:()=>r.wAk,PerspectiveCamera:()=>r.ubm,Plane:()=>r.Zcv,PlaneGeometry:()=>r.bdM,PlaneHelper:()=>r.ZM4,PointLight:()=>r.HiM,PointLightHelper:()=>r.F1l,Points:()=>r.ONl,PointsMaterial:()=>r.BH$,PolarGridHelper:()=>r.hzE,PolyhedronGeometry:()=>r.pFK,PositionalAudio:()=>r.xZx,PropertyBinding:()=>r.Nwf,PropertyMixer:()=>r.N2s,QuadraticBezierCurve:()=>r.dAo,QuadraticBezierCurve3:()=>r.CV9,Quaternion:()=>r.PTz,QuaternionKeyframeTrack:()=>r.MBL,QuaternionLinearInterpolant:()=>r.GBG,RED_GREEN_RGTC2_Format:()=>r.HO_,RED_RGTC1_Format:()=>r.Kef,REVISION:()=>r.sPf,RGBADepthPacking:()=>r.N5j,RGBAFormat:()=>r.GWd,RGBAIntegerFormat:()=>r.c90,RGBA_ASTC_10x10_Format:()=>r.y3Z,RGBA_ASTC_10x5_Format:()=>r.uB5,RGBA_ASTC_10x6_Format:()=>r.lyL,RGBA_ASTC_10x8_Format:()=>r.bC7,RGBA_ASTC_12x10_Format:()=>r.ojs,RGBA_ASTC_12x12_Format:()=>r.S$4,RGBA_ASTC_4x4_Format:()=>r.qa3,RGBA_ASTC_5x4_Format:()=>r.B_h,RGBA_ASTC_5x5_Format:()=>r.czI,RGBA_ASTC_6x5_Format:()=>r.rSH,RGBA_ASTC_6x6_Format:()=>r.Qrf,RGBA_ASTC_8x5_Format:()=>r.psI,RGBA_ASTC_8x6_Format:()=>r.a5J,RGBA_ASTC_8x8_Format:()=>r._QJ,RGBA_BPTC_Format:()=>r.Fn,RGBA_ETC2_EAC_Format:()=>r.KDk,RGBA_PVRTC_2BPPV1_Format:()=>r.pBf,RGBA_PVRTC_4BPPV1_Format:()=>r.HXV,RGBA_S3TC_DXT1_Format:()=>r.Nz6,RGBA_S3TC_DXT3_Format:()=>r.jR7,RGBA_S3TC_DXT5_Format:()=>r.BXX,RGBDepthPacking:()=>r.wTz,RGBFormat:()=>r.HIg,RGBIntegerFormat:()=>r.VGF,RGB_BPTC_SIGNED_Format:()=>r.H23,RGB_BPTC_UNSIGNED_Format:()=>r.W9U,RGB_ETC1_Format:()=>r.CVz,RGB_ETC2_Format:()=>r.Riy,RGB_PVRTC_2BPPV1_Format:()=>r.kTp,RGB_PVRTC_4BPPV1_Format:()=>r.k6Q,RGB_S3TC_DXT1_Format:()=>r.IE4,RGDepthPacking:()=>r.k8v,RGFormat:()=>r.paN,RGIntegerFormat:()=>r.TkQ,RawShaderMaterial:()=>r.D$Q,Ray:()=>r.RlV,Raycaster:()=>r.tBo,RectAreaLight:()=>r.ure,RedFormat:()=>r.VT0,RedIntegerFormat:()=>r.ZQM,ReinhardToneMapping:()=>r.Mjd,RenderTarget:()=>r.O0B,RenderTarget3D:()=>r.XMJ,RepeatWrapping:()=>r.GJx,ReplaceStencilOp:()=>r.kG0,ReverseSubtractEquation:()=>r.nST,RingGeometry:()=>r.rKP,SIGNED_RED_GREEN_RGTC2_Format:()=>r.CWW,SIGNED_RED_RGTC1_Format:()=>r.XG_,SRGBColorSpace:()=>r.er$,SRGBTransfer:()=>r.KLL,Scene:()=>r.Z58,ShaderChunk:()=>o,ShaderLib:()=>l,ShaderMaterial:()=>r.BKk,ShadowMaterial:()=>r.q2,Shape:()=>r.ypk,ShapeGeometry:()=>r.MSw,ShapePath:()=>r.Ld9,ShapeUtils:()=>r.xJ6,ShortType:()=>r.fBL,Skeleton:()=>r.EAD,SkeletonHelper:()=>r._xc,SkinnedMesh:()=>r.I46,Source:()=>r.kLi,Sphere:()=>r.iyt,SphereGeometry:()=>r.Gu$,Spherical:()=>r.YHV,SphericalHarmonics3:()=>r.xOk,SplineCurve:()=>r.xfg,SpotLight:()=>r.nCl,SpotLightHelper:()=>r.Fpm,Sprite:()=>r.kxk,SpriteMaterial:()=>r.RoJ,SrcAlphaFactor:()=>r.ie2,SrcAlphaSaturateFactor:()=>r.hgQ,SrcColorFactor:()=>r.f4X,StaticCopyUsage:()=>r.Hrq,StaticDrawUsage:()=>r.agE,StaticReadUsage:()=>r.uXQ,StereoCamera:()=>r.keZ,StreamCopyUsage:()=>r.rOG,StreamDrawUsage:()=>r.Ktl,StreamReadUsage:()=>r.uov,StringKeyframeTrack:()=>r.hZF,SubtractEquation:()=>r.FXf,SubtractiveBlending:()=>r.Kwu,TOUCH:()=>r.wtR,TangentSpaceNormalMap:()=>r.bI3,TetrahedronGeometry:()=>r.Zpd,Texture:()=>r.gPd,TextureLoader:()=>r.Tap,TextureUtils:()=>r.Vwu,Timer:()=>r.M4G,TimestampQuery:()=>r.v9J,TorusGeometry:()=>r.O3Y,TorusKnotGeometry:()=>r.UPV,Triangle:()=>r.lMl,TriangleFanDrawMode:()=>r.rYR,TriangleStripDrawMode:()=>r.O49,TrianglesDrawMode:()=>r.RJ4,TubeGeometry:()=>r.j6,UVMapping:()=>r.UTZ,Uint16BufferAttribute:()=>r.A$4,Uint32BufferAttribute:()=>r.MW4,Uint8BufferAttribute:()=>r.baL,Uint8ClampedBufferAttribute:()=>r.fc6,Uniform:()=>r.nc$,UniformsGroup:()=>r.dzP,UniformsLib:()=>s,UniformsUtils:()=>r.LlO,UnsignedByteType:()=>r.OUM,UnsignedInt101111Type:()=>r.yT7,UnsignedInt248Type:()=>r.V3x,UnsignedInt5999Type:()=>r.Dmk,UnsignedIntType:()=>r.bkx,UnsignedShort4444Type:()=>r.Wew,UnsignedShort5551Type:()=>r.gJ2,UnsignedShortType:()=>r.cHt,VSMShadowMap:()=>r.RyA,Vector2:()=>r.I9Y,Vector3:()=>r.Pq0,Vector4:()=>r.IUQ,VectorKeyframeTrack:()=>r.RiT,VideoFrameTexture:()=>r.SYV,VideoTexture:()=>r.Nv2,WebGL3DRenderTarget:()=>r.ALV,WebGLArrayRenderTarget:()=>r.y9J,WebGLCoordinateSystem:()=>r.TdN,WebGLCubeRenderTarget:()=>r.o6l,WebGLRenderTarget:()=>r.nWS,WebGLRenderer:()=>Ft,WebGLUtils:()=>Ut,WebGPUCoordinateSystem:()=>r.i7u,WebXRController:()=>r.R3r,WireframeGeometry:()=>r.XJ7,WrapAroundEnding:()=>r.dhZ,ZeroCurvatureEnding:()=>r.rQf,ZeroFactor:()=>r.ojh,ZeroSlopeEnding:()=>r.h2z,ZeroStencilOp:()=>r.kqe,createCanvasElement:()=>r.lPF});var r=n(922);function i(){let e=null,t=!1,n=null,r=null;function i(t,a){n(t,a),r=e.requestAnimationFrame(i)}return{start:function(){!0!==t&&null!==n&&(r=e.requestAnimationFrame(i),t=!0)},stop:function(){e.cancelAnimationFrame(r),t=!1},setAnimationLoop:function(e){n=e},setContext:function(t){e=t}}}function a(e){const t=new WeakMap;return{get:function(e){return e.isInterleavedBufferAttribute&&(e=e.data),t.get(e)},remove:function(n){n.isInterleavedBufferAttribute&&(n=n.data);const r=t.get(n);r&&(e.deleteBuffer(r.buffer),t.delete(n))},update:function(n,r){if(n.isInterleavedBufferAttribute&&(n=n.data),n.isGLBufferAttribute){const e=t.get(n);return void((!e||e.version<n.version)&&t.set(n,{buffer:n.buffer,type:n.type,bytesPerElement:n.elementSize,version:n.version}))}const i=t.get(n);if(void 0===i)t.set(n,function(t,n){const r=t.array,i=t.usage,a=r.byteLength,o=e.createBuffer();let s;if(e.bindBuffer(n,o),e.bufferData(n,r,i),t.onUploadCallback(),r instanceof Float32Array)s=e.FLOAT;else if("undefined"!=typeof Float16Array&&r instanceof Float16Array)s=e.HALF_FLOAT;else if(r instanceof Uint16Array)s=t.isFloat16BufferAttribute?e.HALF_FLOAT:e.UNSIGNED_SHORT;else if(r instanceof Int16Array)s=e.SHORT;else if(r instanceof Uint32Array)s=e.UNSIGNED_INT;else if(r instanceof Int32Array)s=e.INT;else if(r instanceof Int8Array)s=e.BYTE;else if(r instanceof Uint8Array)s=e.UNSIGNED_BYTE;else{if(!(r instanceof Uint8ClampedArray))throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+r);s=e.UNSIGNED_BYTE}return{buffer:o,type:s,bytesPerElement:r.BYTES_PER_ELEMENT,version:t.version,size:a}}(n,r));else if(i.version<n.version){if(i.size!==n.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");!function(t,n,r){const i=n.array,a=n.updateRanges;if(e.bindBuffer(r,t),0===a.length)e.bufferSubData(r,0,i);else{a.sort((e,t)=>e.start-t.start);let t=0;for(let e=1;e<a.length;e++){const n=a[t],r=a[e];r.start<=n.start+n.count+1?n.count=Math.max(n.count,r.start+r.count-n.start):(++t,a[t]=r)}a.length=t+1;for(let t=0,n=a.length;t<n;t++){const n=a[t];e.bufferSubData(r,n.start*i.BYTES_PER_ELEMENT,i,n.start,n.count)}n.clearUpdateRanges()}n.onUploadCallback()}(i.buffer,n,r),i.version=n.version}}}}const o={alphahash_fragment:"#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif",alphahash_pars_fragment:"#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif",alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\t#ifdef ALPHA_TO_COVERAGE\n\tdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\tif ( diffuseColor.a < alphaTest ) discard;\n\t#endif\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_CLEARCOAT ) \n\t\tclearcoatSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_SHEEN ) \n\t\tsheenSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",batching_pars_vertex:"#ifdef USE_BATCHING\n\t#if ! defined( GL_ANGLE_multi_draw )\n\t#define gl_DrawID _gl_DrawID\n\tuniform int _gl_DrawID;\n\t#endif\n\tuniform highp sampler2D batchingTexture;\n\tuniform highp usampler2D batchingIdTexture;\n\tmat4 getBatchingMatrix( const in float i ) {\n\t\tint size = textureSize( batchingTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n\tfloat getIndirectIndex( const in int i ) {\n\t\tint size = textureSize( batchingIdTexture, 0 ).x;\n\t\tint x = i % size;\n\t\tint y = i / size;\n\t\treturn float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\n\t}\n#endif\n#ifdef USE_BATCHING_COLOR\n\tuniform sampler2D batchingColorTexture;\n\tvec3 getBatchingColor( const in float i ) {\n\t\tint size = textureSize( batchingColorTexture, 0 ).x;\n\t\tint j = int( i );\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\treturn texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\n\t}\n#endif",batching_vertex:"#ifdef USE_BATCHING\n\tmat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\n#endif",begin_vertex:"vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated",iridescence_fragment:"#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n\t\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#ifdef ALPHA_TO_COVERAGE\n\t\tfloat distanceToPlane, distanceGradient;\n\t\tfloat clipOpacity = 1.0;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\tclipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\tif ( clipOpacity == 0.0 ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tfloat unionClipOpacity = 1.0;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\t\tunionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tclipOpacity *= 1.0 - unionClipOpacity;\n\t\t#endif\n\t\tdiffuseColor.a *= clipOpacity;\n\t\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tbool clipped = true;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tif ( clipped ) discard;\n\t\t#endif\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif\n#ifdef USE_BATCHING_COLOR\n\tvec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\n\tvColor.xyz *= batchingColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n\tmat3 bm = mat3( batchingMatrix );\n\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n\ttransformedNormal = bm * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = bm * transformedTangent;\n\t#endif\n#endif\n#ifdef USE_INSTANCING\n\tmat3 im = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n\ttransformedNormal = im * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = im * transformedTangent;\n\t#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE\n\t\temissiveColor = sRGBTransferEOTF( emissiveColor );\n\t#endif\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",colorspace_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",colorspace_pars_fragment:"vec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBTransferEOTF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform mat3 envMapRotation;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_fragment:"LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;",lights_lambert_pars_fragment:"varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n\tuniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif ( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n\tmaterial.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tif( material.anisotropy == 0.0 ) {\n\t\tanisotropyV = vec2( 1.0, 0.0 );\n\t} else {\n\t\tanisotropyV /= material.anisotropy;\n\t\tmaterial.anisotropy = saturate( material.anisotropy );\n\t}\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\tfloat dispersion;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n\tgeometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if defined( USE_LIGHT_PROBES )\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGARITHMIC_DEPTH_BUFFER )\n\tgl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGARITHMIC_DEPTH_BUFFER )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGARITHMIC_DEPTH_BUFFER\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGARITHMIC_DEPTH_BUFFER\n\tvFragDepth = 1.0 + gl_Position.w;\n\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphinstance_vertex:"#ifdef USE_INSTANCING_MORPH\n\tfloat morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\tfloat morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tmorphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n\t}\n#endif",morphcolor_vertex:"#if defined( USE_MORPHCOLORS )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_INSTANCING_MORPH\n\t\tuniform float morphTargetBaseInfluence;\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t#endif\n\tuniform sampler2DArray morphTargetsTexture;\n\tuniform ivec2 morphTargetsTextureSize;\n\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t}\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 nonPerturbedNormal = normal;",normal_fragment_maps:"#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif",iridescence_pars_fragment:"#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif",opaque_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;\nconst float Inv255 = 1. / 255.;\nconst vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );\nconst vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );\nconst vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );\nconst vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );\nvec4 packDepthToRGBA( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec4( 0., 0., 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec4( 1., 1., 1., 1. );\n\tfloat vuf;\n\tfloat af = modf( v * PackFactors.a, vuf );\n\tfloat bf = modf( vuf * ShiftRight8, vuf );\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\n\treturn vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );\n}\nvec3 packDepthToRGB( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec3( 0., 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec3( 1., 1., 1. );\n\tfloat vuf;\n\tfloat bf = modf( v * PackFactors.b, vuf );\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\n\treturn vec3( vuf * Inv255, gf * PackUpscale, bf );\n}\nvec2 packDepthToRG( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec2( 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec2( 1., 1. );\n\tfloat vuf;\n\tfloat gf = modf( v * 256., vuf );\n\treturn vec2( vuf * Inv255, gf );\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors4 );\n}\nfloat unpackRGBToDepth( const in vec3 v ) {\n\treturn dot( v, UnpackFactors3 );\n}\nfloat unpackRGToDepth( const in vec2 v ) {\n\treturn v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;\n}\nvec4 pack2HalfToRGBA( const in vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( const in vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n\tmvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\tfloat depth = unpackRGBAToDepth( texture2D( depths, uv ) );\n\t\t#ifdef USE_REVERSED_DEPTH_BUFFER\n\t\t\treturn step( depth, compare );\n\t\t#else\n\t\t\treturn step( compare, depth );\n\t\t#endif\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow( sampler2D shadow, vec2 uv, float compare ) {\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\t#ifdef USE_REVERSED_DEPTH_BUFFER\n\t\t\tfloat hard_shadow = step( distribution.x, compare );\n\t\t#else\n\t\t\tfloat hard_shadow = step( compare, distribution.x );\n\t\t#endif\n\t\tif ( hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tfloat shadow = 1.0;\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\t\n\t\tfloat lightToPositionLength = length( lightToPosition );\n\t\tif ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n\t\t\tfloat dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\t\tdp += shadowBias;\n\t\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\t\tshadow = (\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t\t) * ( 1.0 / 9.0 );\n\t\t\t#else\n\t\t\t\tshadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n#endif",shadowmap_pars_vertex:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tint size = textureSize( boneTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 CineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.6605, - 0.1246, - 0.0182 ),\n\tvec3( - 0.5876, 1.1329, - 0.1006 ),\n\tvec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n\tvec3( 0.6274, 0.0691, 0.0164 ),\n\tvec3( 0.3293, 0.9195, 0.0880 ),\n\tvec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n\tvec3 x2 = x * x;\n\tvec3 x4 = x2 * x2;\n\treturn + 15.5 * x4 * x2\n\t\t- 40.14 * x4 * x\n\t\t+ 31.96 * x4\n\t\t- 6.868 * x2 * x\n\t\t+ 0.4298 * x2\n\t\t+ 0.1191 * x\n\t\t- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n\tconst mat3 AgXInsetMatrix = mat3(\n\t\tvec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n\t\tvec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n\t\tvec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n\t);\n\tconst mat3 AgXOutsetMatrix = mat3(\n\t\tvec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n\t\tvec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n\t\tvec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n\t);\n\tconst float AgxMinEv = - 12.47393;\tconst float AgxMaxEv = 4.026069;\n\tcolor *= toneMappingExposure;\n\tcolor = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n\tcolor = AgXInsetMatrix * color;\n\tcolor = max( color, 1e-10 );\tcolor = log2( color );\n\tcolor = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n\tcolor = clamp( color, 0.0, 1.0 );\n\tcolor = agxDefaultContrastApprox( color );\n\tcolor = AgXOutsetMatrix * color;\n\tcolor = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n\tcolor = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n\tcolor = clamp( color, 0.0, 1.0 );\n\treturn color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n\tconst float StartCompression = 0.8 - 0.04;\n\tconst float Desaturation = 0.15;\n\tcolor *= toneMappingExposure;\n\tfloat x = min( color.r, min( color.g, color.b ) );\n\tfloat offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n\tcolor -= offset;\n\tfloat peak = max( color.r, max( color.g, color.b ) );\n\tif ( peak < StartCompression ) return color;\n\tfloat d = 1. - StartCompression;\n\tfloat newPeak = 1. - d * d / ( peak + d - StartCompression );\n\tcolor *= newPeak / peak;\n\tfloat g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n\treturn mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec4 transmittedLight;\n\t\tvec3 transmittance;\n\t\t#ifdef USE_DISPERSION\n\t\t\tfloat halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n\t\t\tvec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n\t\t\tfor ( int i = 0; i < 3; i ++ ) {\n\t\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n\t\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\t\trefractionCoords += 1.0;\n\t\t\t\trefractionCoords /= 2.0;\n\t\t\t\tvec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n\t\t\t\ttransmittedLight[ i ] = transmissionSample[ i ];\n\t\t\t\ttransmittedLight.a += transmissionSample.a;\n\t\t\t\ttransmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n\t\t\t}\n\t\t\ttransmittedLight.a /= 3.0;\n\t\t#else\n\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\trefractionCoords += 1.0;\n\t\t\trefractionCoords /= 2.0;\n\t\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\t\ttransmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\t#endif\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif",uv_pars_fragment:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",uv_pars_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",uv_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_BATCHING\n\t\tworldPosition = batchingMatrix * worldPosition;\n\t#endif\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",backgroundCube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",backgroundCube_frag:"#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",depth_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\t#ifdef USE_REVERSED_DEPTH_BUFFER\n\t\tfloat fragCoordZ = vHighPrecisionZW[ 0 ] / vHighPrecisionZW[ 1 ];\n\t#else\n\t\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[ 0 ] / vHighPrecisionZW[ 1 ] + 0.5;\n\t#endif\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#elif DEPTH_PACKING == 3202\n\t\tgl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );\n\t#elif DEPTH_PACKING == 3203\n\t\tgl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );\n\t#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n\tuniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix[ 3 ];\n\tvec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}"},s={common:{diffuse:{value:new r.Q1f(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new r.dwI},alphaMap:{value:null},alphaMapTransform:{value:new r.dwI},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new r.dwI}},envmap:{envMap:{value:null},envMapRotation:{value:new r.dwI},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new r.dwI}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new r.dwI}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new r.dwI},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new r.dwI},normalScale:{value:new r.I9Y(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new r.dwI},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new r.dwI}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new r.dwI}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new r.dwI}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new r.Q1f(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new r.Q1f(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new r.dwI},alphaTest:{value:0},uvTransform:{value:new r.dwI}},sprite:{diffuse:{value:new r.Q1f(16777215)},opacity:{value:1},center:{value:new r.I9Y(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new r.dwI},alphaMap:{value:null},alphaMapTransform:{value:new r.dwI},alphaTest:{value:0}}},l={basic:{uniforms:(0,r.Iit)([s.common,s.specularmap,s.envmap,s.aomap,s.lightmap,s.fog]),vertexShader:o.meshbasic_vert,fragmentShader:o.meshbasic_frag},lambert:{uniforms:(0,r.Iit)([s.common,s.specularmap,s.envmap,s.aomap,s.lightmap,s.emissivemap,s.bumpmap,s.normalmap,s.displacementmap,s.fog,s.lights,{emissive:{value:new r.Q1f(0)}}]),vertexShader:o.meshlambert_vert,fragmentShader:o.meshlambert_frag},phong:{uniforms:(0,r.Iit)([s.common,s.specularmap,s.envmap,s.aomap,s.lightmap,s.emissivemap,s.bumpmap,s.normalmap,s.displacementmap,s.fog,s.lights,{emissive:{value:new r.Q1f(0)},specular:{value:new r.Q1f(1118481)},shininess:{value:30}}]),vertexShader:o.meshphong_vert,fragmentShader:o.meshphong_frag},standard:{uniforms:(0,r.Iit)([s.common,s.envmap,s.aomap,s.lightmap,s.emissivemap,s.bumpmap,s.normalmap,s.displacementmap,s.roughnessmap,s.metalnessmap,s.fog,s.lights,{emissive:{value:new r.Q1f(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:o.meshphysical_vert,fragmentShader:o.meshphysical_frag},toon:{uniforms:(0,r.Iit)([s.common,s.aomap,s.lightmap,s.emissivemap,s.bumpmap,s.normalmap,s.displacementmap,s.gradientmap,s.fog,s.lights,{emissive:{value:new r.Q1f(0)}}]),vertexShader:o.meshtoon_vert,fragmentShader:o.meshtoon_frag},matcap:{uniforms:(0,r.Iit)([s.common,s.bumpmap,s.normalmap,s.displacementmap,s.fog,{matcap:{value:null}}]),vertexShader:o.meshmatcap_vert,fragmentShader:o.meshmatcap_frag},points:{uniforms:(0,r.Iit)([s.points,s.fog]),vertexShader:o.points_vert,fragmentShader:o.points_frag},dashed:{uniforms:(0,r.Iit)([s.common,s.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:o.linedashed_vert,fragmentShader:o.linedashed_frag},depth:{uniforms:(0,r.Iit)([s.common,s.displacementmap]),vertexShader:o.depth_vert,fragmentShader:o.depth_frag},normal:{uniforms:(0,r.Iit)([s.common,s.bumpmap,s.normalmap,s.displacementmap,{opacity:{value:1}}]),vertexShader:o.meshnormal_vert,fragmentShader:o.meshnormal_frag},sprite:{uniforms:(0,r.Iit)([s.sprite,s.fog]),vertexShader:o.sprite_vert,fragmentShader:o.sprite_frag},background:{uniforms:{uvTransform:{value:new r.dwI},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:o.background_vert,fragmentShader:o.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new r.dwI}},vertexShader:o.backgroundCube_vert,fragmentShader:o.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:o.cube_vert,fragmentShader:o.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:o.equirect_vert,fragmentShader:o.equirect_frag},distanceRGBA:{uniforms:(0,r.Iit)([s.common,s.displacementmap,{referencePosition:{value:new r.Pq0},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:o.distanceRGBA_vert,fragmentShader:o.distanceRGBA_frag},shadow:{uniforms:(0,r.Iit)([s.lights,s.fog,{color:{value:new r.Q1f(0)},opacity:{value:1}}]),vertexShader:o.shadow_vert,fragmentShader:o.shadow_frag}};l.physical={uniforms:(0,r.Iit)([l.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new r.dwI},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new r.dwI},clearcoatNormalScale:{value:new r.I9Y(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new r.dwI},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new r.dwI},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new r.dwI},sheen:{value:0},sheenColor:{value:new r.Q1f(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new r.dwI},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new r.dwI},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new r.dwI},transmissionSamplerSize:{value:new r.I9Y},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new r.dwI},attenuationDistance:{value:0},attenuationColor:{value:new r.Q1f(0)},specularColor:{value:new r.Q1f(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new r.dwI},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new r.dwI},anisotropyVector:{value:new r.I9Y},anisotropyMap:{value:null},anisotropyMapTransform:{value:new r.dwI}}]),vertexShader:o.meshphysical_vert,fragmentShader:o.meshphysical_frag};const c={r:0,b:0,g:0},d=new r.O9p,u=new r.kn4;function f(e,t,n,i,a,o,s){const f=new r.Q1f(0);let p,m,h=!0===o?0:1,_=null,g=0,v=null;function E(e){let r=!0===e.isScene?e.background:null;return r&&r.isTexture&&(r=(e.backgroundBlurriness>0?n:t).get(r)),r}function S(t,n){t.getRGB(c,(0,r._Ut)(e)),i.buffers.color.setClear(c.r,c.g,c.b,n,s)}return{getClearColor:function(){return f},setClearColor:function(e,t=1){f.set(e),h=t,S(f,h)},getClearAlpha:function(){return h},setClearAlpha:function(e){h=e,S(f,h)},render:function(t){let n=!1;const r=E(t);null===r?S(f,h):r&&r.isColor&&(S(r,1),n=!0);const a=e.xr.getEnvironmentBlendMode();"additive"===a?i.buffers.color.setClear(0,0,0,1,s):"alpha-blend"===a&&i.buffers.color.setClear(0,0,0,0,s),(e.autoClear||n)&&(i.buffers.depth.setTest(!0),i.buffers.depth.setMask(!0),i.buffers.color.setMask(!0),e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil))},addToRenderList:function(t,n){const i=E(n);i&&(i.isCubeTexture||i.mapping===r.Om)?(void 0===m&&(m=new r.eaF(new r.iNn(1,1,1),new r.BKk({name:"BackgroundCubeMaterial",uniforms:(0,r.lxW)(l.backgroundCube.uniforms),vertexShader:l.backgroundCube.vertexShader,fragmentShader:l.backgroundCube.fragmentShader,side:r.hsX,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),m.geometry.deleteAttribute("normal"),m.geometry.deleteAttribute("uv"),m.onBeforeRender=function(e,t,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(m.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),a.update(m)),d.copy(n.backgroundRotation),d.x*=-1,d.y*=-1,d.z*=-1,i.isCubeTexture&&!1===i.isRenderTargetTexture&&(d.y*=-1,d.z*=-1),m.material.uniforms.envMap.value=i,m.material.uniforms.flipEnvMap.value=i.isCubeTexture&&!1===i.isRenderTargetTexture?-1:1,m.material.uniforms.backgroundBlurriness.value=n.backgroundBlurriness,m.material.uniforms.backgroundIntensity.value=n.backgroundIntensity,m.material.uniforms.backgroundRotation.value.setFromMatrix4(u.makeRotationFromEuler(d)),m.material.toneMapped=r.ppV.getTransfer(i.colorSpace)!==r.KLL,_===i&&g===i.version&&v===e.toneMapping||(m.material.needsUpdate=!0,_=i,g=i.version,v=e.toneMapping),m.layers.enableAll(),t.unshift(m,m.geometry,m.material,0,0,null)):i&&i.isTexture&&(void 0===p&&(p=new r.eaF(new r.bdM(2,2),new r.BKk({name:"BackgroundMaterial",uniforms:(0,r.lxW)(l.background.uniforms),vertexShader:l.background.vertexShader,fragmentShader:l.background.fragmentShader,side:r.hB5,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),p.geometry.deleteAttribute("normal"),Object.defineProperty(p.material,"map",{get:function(){return this.uniforms.t2D.value}}),a.update(p)),p.material.uniforms.t2D.value=i,p.material.uniforms.backgroundIntensity.value=n.backgroundIntensity,p.material.toneMapped=r.ppV.getTransfer(i.colorSpace)!==r.KLL,!0===i.matrixAutoUpdate&&i.updateMatrix(),p.material.uniforms.uvTransform.value.copy(i.matrix),_===i&&g===i.version&&v===e.toneMapping||(p.material.needsUpdate=!0,_=i,g=i.version,v=e.toneMapping),p.layers.enableAll(),t.unshift(p,p.geometry,p.material,0,0,null))},dispose:function(){void 0!==m&&(m.geometry.dispose(),m.material.dispose(),m=void 0),void 0!==p&&(p.geometry.dispose(),p.material.dispose(),p=void 0)}}}function p(e,t){const n=e.getParameter(e.MAX_VERTEX_ATTRIBS),i={},a=d(null);let o=a,s=!1;function l(t){return e.bindVertexArray(t)}function c(t){return e.deleteVertexArray(t)}function d(e){const t=[],r=[],i=[];for(let e=0;e<n;e++)t[e]=0,r[e]=0,i[e]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:t,enabledAttributes:r,attributeDivisors:i,object:e,attributes:{},index:null}}function u(){const e=o.newAttributes;for(let t=0,n=e.length;t<n;t++)e[t]=0}function f(e){p(e,0)}function p(t,n){const r=o.newAttributes,i=o.enabledAttributes,a=o.attributeDivisors;r[t]=1,0===i[t]&&(e.enableVertexAttribArray(t),i[t]=1),a[t]!==n&&(e.vertexAttribDivisor(t,n),a[t]=n)}function m(){const t=o.newAttributes,n=o.enabledAttributes;for(let r=0,i=n.length;r<i;r++)n[r]!==t[r]&&(e.disableVertexAttribArray(r),n[r]=0)}function h(t,n,r,i,a,o,s){!0===s?e.vertexAttribIPointer(t,n,r,a,o):e.vertexAttribPointer(t,n,r,i,a,o)}function _(){g(),s=!0,o!==a&&(o=a,l(o.object))}function g(){a.geometry=null,a.program=null,a.wireframe=!1}return{setup:function(n,a,c,_,g){let v=!1;const E=function(t,n,r){const a=!0===r.wireframe;let o=i[t.id];void 0===o&&(o={},i[t.id]=o);let s=o[n.id];void 0===s&&(s={},o[n.id]=s);let l=s[a];return void 0===l&&(l=d(e.createVertexArray()),s[a]=l),l}(_,c,a);o!==E&&(o=E,l(o.object)),v=function(e,t,n,r){const i=o.attributes,a=t.attributes;let s=0;const l=n.getAttributes();for(const t in l)if(l[t].location>=0){const n=i[t];let r=a[t];if(void 0===r&&("instanceMatrix"===t&&e.instanceMatrix&&(r=e.instanceMatrix),"instanceColor"===t&&e.instanceColor&&(r=e.instanceColor)),void 0===n)return!0;if(n.attribute!==r)return!0;if(r&&n.data!==r.data)return!0;s++}return o.attributesNum!==s||o.index!==r}(n,_,c,g),v&&function(e,t,n,r){const i={},a=t.attributes;let s=0;const l=n.getAttributes();for(const t in l)if(l[t].location>=0){let n=a[t];void 0===n&&("instanceMatrix"===t&&e.instanceMatrix&&(n=e.instanceMatrix),"instanceColor"===t&&e.instanceColor&&(n=e.instanceColor));const r={};r.attribute=n,n&&n.data&&(r.data=n.data),i[t]=r,s++}o.attributes=i,o.attributesNum=s,o.index=r}(n,_,c,g),null!==g&&t.update(g,e.ELEMENT_ARRAY_BUFFER),(v||s)&&(s=!1,function(n,i,a,o){u();const s=o.attributes,l=a.getAttributes(),c=i.defaultAttributeValues;for(const i in l){const a=l[i];if(a.location>=0){let l=s[i];if(void 0===l&&("instanceMatrix"===i&&n.instanceMatrix&&(l=n.instanceMatrix),"instanceColor"===i&&n.instanceColor&&(l=n.instanceColor)),void 0!==l){const i=l.normalized,s=l.itemSize,c=t.get(l);if(void 0===c)continue;const d=c.buffer,u=c.type,m=c.bytesPerElement,_=u===e.INT||u===e.UNSIGNED_INT||l.gpuType===r.Yuy;if(l.isInterleavedBufferAttribute){const t=l.data,r=t.stride,c=l.offset;if(t.isInstancedInterleavedBuffer){for(let e=0;e<a.locationSize;e++)p(a.location+e,t.meshPerAttribute);!0!==n.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=t.meshPerAttribute*t.count)}else for(let e=0;e<a.locationSize;e++)f(a.location+e);e.bindBuffer(e.ARRAY_BUFFER,d);for(let e=0;e<a.locationSize;e++)h(a.location+e,s/a.locationSize,u,i,r*m,(c+s/a.locationSize*e)*m,_)}else{if(l.isInstancedBufferAttribute){for(let e=0;e<a.locationSize;e++)p(a.location+e,l.meshPerAttribute);!0!==n.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=l.meshPerAttribute*l.count)}else for(let e=0;e<a.locationSize;e++)f(a.location+e);e.bindBuffer(e.ARRAY_BUFFER,d);for(let e=0;e<a.locationSize;e++)h(a.location+e,s/a.locationSize,u,i,s*m,s/a.locationSize*e*m,_)}}else if(void 0!==c){const t=c[i];if(void 0!==t)switch(t.length){case 2:e.vertexAttrib2fv(a.location,t);break;case 3:e.vertexAttrib3fv(a.location,t);break;case 4:e.vertexAttrib4fv(a.location,t);break;default:e.vertexAttrib1fv(a.location,t)}}}}m()}(n,a,c,_),null!==g&&e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t.get(g).buffer))},reset:_,resetDefaultState:g,dispose:function(){_();for(const e in i){const t=i[e];for(const e in t){const n=t[e];for(const e in n)c(n[e].object),delete n[e];delete t[e]}delete i[e]}},releaseStatesOfGeometry:function(e){if(void 0===i[e.id])return;const t=i[e.id];for(const e in t){const n=t[e];for(const e in n)c(n[e].object),delete n[e];delete t[e]}delete i[e.id]},releaseStatesOfProgram:function(e){for(const t in i){const n=i[t];if(void 0===n[e.id])continue;const r=n[e.id];for(const e in r)c(r[e].object),delete r[e];delete n[e.id]}},initAttributes:u,enableAttribute:f,disableUnusedAttributes:m}}function m(e,t,n){let r;function i(t,i,a){0!==a&&(e.drawArraysInstanced(r,t,i,a),n.update(i,r,a))}this.setMode=function(e){r=e},this.render=function(t,i){e.drawArrays(r,t,i),n.update(i,r,1)},this.renderInstances=i,this.renderMultiDraw=function(e,i,a){if(0===a)return;t.get("WEBGL_multi_draw").multiDrawArraysWEBGL(r,e,0,i,0,a);let o=0;for(let e=0;e<a;e++)o+=i[e];n.update(o,r,1)},this.renderMultiDrawInstances=function(e,a,o,s){if(0===o)return;const l=t.get("WEBGL_multi_draw");if(null===l)for(let t=0;t<e.length;t++)i(e[t],a[t],s[t]);else{l.multiDrawArraysInstancedWEBGL(r,e,0,a,0,s,0,o);let t=0;for(let e=0;e<o;e++)t+=a[e]*s[e];n.update(t,r,1)}}}function h(e,t,n,i){let a;function o(t){if("highp"===t){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let s=void 0!==n.precision?n.precision:"highp";const l=o(s);l!==s&&(console.warn("THREE.WebGLRenderer:",s,"not supported, using",l,"instead."),s=l);const c=!0===n.logarithmicDepthBuffer,d=!0===n.reversedDepthBuffer&&t.has("EXT_clip_control"),u=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),f=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS);return{isWebGL2:!0,getMaxAnisotropy:function(){if(void 0!==a)return a;if(!0===t.has("EXT_texture_filter_anisotropic")){const n=t.get("EXT_texture_filter_anisotropic");a=e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else a=0;return a},getMaxPrecision:o,textureFormatReadable:function(t){return t===r.GWd||i.convert(t)===e.getParameter(e.IMPLEMENTATION_COLOR_READ_FORMAT)},textureTypeReadable:function(n){const a=n===r.ix0&&(t.has("EXT_color_buffer_half_float")||t.has("EXT_color_buffer_float"));return!(n!==r.OUM&&i.convert(n)!==e.getParameter(e.IMPLEMENTATION_COLOR_READ_TYPE)&&n!==r.RQf&&!a)},precision:s,logarithmicDepthBuffer:c,reversedDepthBuffer:d,maxTextures:u,maxVertexTextures:f,maxTextureSize:e.getParameter(e.MAX_TEXTURE_SIZE),maxCubemapSize:e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),maxAttributes:e.getParameter(e.MAX_VERTEX_ATTRIBS),maxVertexUniforms:e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),maxVaryings:e.getParameter(e.MAX_VARYING_VECTORS),maxFragmentUniforms:e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),vertexTextures:f>0,maxSamples:e.getParameter(e.MAX_SAMPLES)}}function _(e){const t=this;let n=null,i=0,a=!1,o=!1;const s=new r.Zcv,l=new r.dwI,c={value:null,needsUpdate:!1};function d(e,n,r,i){const a=null!==e?e.length:0;let o=null;if(0!==a){if(o=c.value,!0!==i||null===o){const t=r+4*a,i=n.matrixWorldInverse;l.getNormalMatrix(i),(null===o||o.length<t)&&(o=new Float32Array(t));for(let t=0,n=r;t!==a;++t,n+=4)s.copy(e[t]).applyMatrix4(i,l),s.normal.toArray(o,n),o[n+3]=s.constant}c.value=o,c.needsUpdate=!0}return t.numPlanes=a,t.numIntersection=0,o}this.uniform=c,this.numPlanes=0,this.numIntersection=0,this.init=function(e,t){const n=0!==e.length||t||0!==i||a;return a=t,i=e.length,n},this.beginShadows=function(){o=!0,d(null)},this.endShadows=function(){o=!1},this.setGlobalState=function(e,t){n=d(e,t,0)},this.setState=function(r,s,l){const u=r.clippingPlanes,f=r.clipIntersection,p=r.clipShadows,m=e.get(r);if(!a||null===u||0===u.length||o&&!p)o?d(null):(c.value!==n&&(c.value=n,c.needsUpdate=i>0),t.numPlanes=i,t.numIntersection=0);else{const e=o?0:i,t=4*e;let r=m.clippingState||null;c.value=r,r=d(u,s,t,l);for(let e=0;e!==t;++e)r[e]=n[e];m.clippingState=r,this.numIntersection=f?this.numPlanes:0,this.numPlanes+=e}}}function g(e){let t=new WeakMap;function n(e,t){return t===r.wfO?e.mapping=r.hy7:t===r.uV5&&(e.mapping=r.xFO),e}function i(e){const n=e.target;n.removeEventListener("dispose",i);const r=t.get(n);void 0!==r&&(t.delete(n),r.dispose())}return{get:function(a){if(a&&a.isTexture){const o=a.mapping;if(o===r.wfO||o===r.uV5){if(t.has(a))return n(t.get(a).texture,a.mapping);{const o=a.image;if(o&&o.height>0){const s=new r.o6l(o.height);return s.fromEquirectangularTexture(e,a),t.set(a,s),a.addEventListener("dispose",i),n(s.texture,a.mapping)}return null}}}return a},dispose:function(){t=new WeakMap}}}const v=[.125,.215,.35,.446,.526,.582],E=new r.qUd,S=new r.Q1f;let T=null,M=0,x=0,R=!1;const A=(1+Math.sqrt(5))/2,C=1/A,b=[new r.Pq0(-A,C,0),new r.Pq0(A,C,0),new r.Pq0(-C,0,A),new r.Pq0(C,0,A),new r.Pq0(0,A,-C),new r.Pq0(0,A,C),new r.Pq0(-1,1,-1),new r.Pq0(1,1,-1),new r.Pq0(-1,1,1),new r.Pq0(1,1,1)],L=new r.Pq0;class P{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,r=100,i={}){const{size:a=256,position:o=L}=i;T=this._renderer.getRenderTarget(),M=this._renderer.getActiveCubeFace(),x=this._renderer.getActiveMipmapLevel(),R=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(a);const s=this._allocateTargets();return s.depthBuffer=!0,this._sceneToCubeUV(e,n,r,s,o),t>0&&this._blur(s,0,0,t),this._applyPMREM(s),this._cleanup(s),s}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=I(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=w(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(T,M,x),this._renderer.xr.enabled=R,e.scissorTest=!1,D(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===r.hy7||e.mapping===r.xFO?this._setSize(0===e.image.length?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),T=this._renderer.getRenderTarget(),M=this._renderer.getActiveCubeFace(),x=this._renderer.getActiveMipmapLevel(),R=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:r.k6q,minFilter:r.k6q,generateMipmaps:!1,type:r.ix0,format:r.GWd,colorSpace:r.Zr2,depthBuffer:!1},i=U(e,t,n);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=U(e,t,n);const{_lodMax:i}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=function(e){const t=[],n=[],i=[];let a=e;const o=e-4+1+v.length;for(let s=0;s<o;s++){const o=Math.pow(2,a);n.push(o);let l=1/o;s>e-4?l=v[s-e+4-1]:0===s&&(l=0),i.push(l);const c=1/(o-2),d=-c,u=1+c,f=[d,d,u,d,u,u,d,d,u,u,d,u],p=6,m=6,h=3,_=2,g=1,E=new Float32Array(h*m*p),S=new Float32Array(_*m*p),T=new Float32Array(g*m*p);for(let e=0;e<p;e++){const t=e%3*2/3-1,n=e>2?0:-1,r=[t,n,0,t+2/3,n,0,t+2/3,n+1,0,t,n,0,t+2/3,n+1,0,t,n+1,0];E.set(r,h*m*e),S.set(f,_*m*e);const i=[e,e,e,e,e,e];T.set(i,g*m*e)}const M=new r.LoY;M.setAttribute("position",new r.THS(E,h)),M.setAttribute("uv",new r.THS(S,_)),M.setAttribute("faceIndex",new r.THS(T,g)),t.push(M),a>4&&a--}return{lodPlanes:t,sizeLods:n,sigmas:i}}(i)),this._blurMaterial=function(e,t,n){const i=new Float32Array(20),a=new r.Pq0(0,1,0);return new r.BKk({name:"SphericalGaussianBlur",defines:{n:20,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${e}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:a}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:r.XIg,depthTest:!1,depthWrite:!1})}(i,e,t)}return i}_compileMaterial(e){const t=new r.eaF(this._lodPlanes[0],e);this._renderer.compile(t,E)}_sceneToCubeUV(e,t,n,i,a){const o=new r.ubm(90,1,t,n),s=[1,-1,1,1,1,1],l=[1,1,1,-1,-1,-1],c=this._renderer,d=c.autoClear,u=c.toneMapping;c.getClearColor(S),c.toneMapping=r.y_p,c.autoClear=!1,c.state.buffers.depth.getReversed()&&(c.setRenderTarget(i),c.clearDepth(),c.setRenderTarget(null));const f=new r.V9B({name:"PMREM.Background",side:r.hsX,depthWrite:!1,depthTest:!1}),p=new r.eaF(new r.iNn,f);let m=!1;const h=e.background;h?h.isColor&&(f.color.copy(h),e.background=null,m=!0):(f.color.copy(S),m=!0);for(let t=0;t<6;t++){const n=t%3;0===n?(o.up.set(0,s[t],0),o.position.set(a.x,a.y,a.z),o.lookAt(a.x+l[t],a.y,a.z)):1===n?(o.up.set(0,0,s[t]),o.position.set(a.x,a.y,a.z),o.lookAt(a.x,a.y+l[t],a.z)):(o.up.set(0,s[t],0),o.position.set(a.x,a.y,a.z),o.lookAt(a.x,a.y,a.z+l[t]));const r=this._cubeSize;D(i,n*r,t>2?r:0,r,r),c.setRenderTarget(i),m&&c.render(p,o),c.render(e,o)}p.geometry.dispose(),p.material.dispose(),c.toneMapping=u,c.autoClear=d,e.background=h}_textureToCubeUV(e,t){const n=this._renderer,i=e.mapping===r.hy7||e.mapping===r.xFO;i?(null===this._cubemapMaterial&&(this._cubemapMaterial=I()),this._cubemapMaterial.uniforms.flipEnvMap.value=!1===e.isRenderTargetTexture?-1:1):null===this._equirectMaterial&&(this._equirectMaterial=w());const a=i?this._cubemapMaterial:this._equirectMaterial,o=new r.eaF(this._lodPlanes[0],a);a.uniforms.envMap.value=e;const s=this._cubeSize;D(t,0,0,3*s,2*s),n.setRenderTarget(t),n.render(o,E)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;const r=this._lodPlanes.length;for(let t=1;t<r;t++){const n=Math.sqrt(this._sigmas[t]*this._sigmas[t]-this._sigmas[t-1]*this._sigmas[t-1]),i=b[(r-t-1)%b.length];this._blur(e,t-1,t,n,i)}t.autoClear=n}_blur(e,t,n,r,i){const a=this._pingPongRenderTarget;this._halfBlur(e,a,t,n,r,"latitudinal",i),this._halfBlur(a,e,n,n,r,"longitudinal",i)}_halfBlur(e,t,n,i,a,o,s){const l=this._renderer,c=this._blurMaterial;"latitudinal"!==o&&"longitudinal"!==o&&console.error("blur direction must be either latitudinal or longitudinal!");const d=new r.eaF(this._lodPlanes[i],c),u=c.uniforms,f=this._sizeLods[n]-1,p=isFinite(a)?Math.PI/(2*f):2*Math.PI/39,m=a/p,h=isFinite(a)?1+Math.floor(3*m):20;h>20&&console.warn(`sigmaRadians, ${a}, is too large and will clip, as it requested ${h} samples when the maximum is set to 20`);const _=[];let g=0;for(let e=0;e<20;++e){const t=e/m,n=Math.exp(-t*t/2);_.push(n),0===e?g+=n:e<h&&(g+=2*n)}for(let e=0;e<_.length;e++)_[e]=_[e]/g;u.envMap.value=e.texture,u.samples.value=h,u.weights.value=_,u.latitudinal.value="latitudinal"===o,s&&(u.poleAxis.value=s);const{_lodMax:v}=this;u.dTheta.value=p,u.mipInt.value=v-n;const S=this._sizeLods[i];D(t,3*S*(i>v-4?i-v+4:0),4*(this._cubeSize-S),3*S,2*S),l.setRenderTarget(t),l.render(d,E)}}function U(e,t,n){const i=new r.nWS(e,t,n);return i.texture.mapping=r.Om,i.texture.name="PMREM.cubeUv",i.scissorTest=!0,i}function D(e,t,n,r,i){e.viewport.set(t,n,r,i),e.scissor.set(t,n,r,i)}function w(){return new r.BKk({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",blending:r.XIg,depthTest:!1,depthWrite:!1})}function I(){return new r.BKk({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",blending:r.XIg,depthTest:!1,depthWrite:!1})}function y(e){let t=new WeakMap,n=null;function i(e){const n=e.target;n.removeEventListener("dispose",i);const r=t.get(n);void 0!==r&&(t.delete(n),r.dispose())}return{get:function(a){if(a&&a.isTexture){const o=a.mapping,s=o===r.wfO||o===r.uV5,l=o===r.hy7||o===r.xFO;if(s||l){let r=t.get(a);const o=void 0!==r?r.texture.pmremVersion:0;if(a.isRenderTargetTexture&&a.pmremVersion!==o)return null===n&&(n=new P(e)),r=s?n.fromEquirectangular(a,r):n.fromCubemap(a,r),r.texture.pmremVersion=a.pmremVersion,t.set(a,r),r.texture;if(void 0!==r)return r.texture;{const o=a.image;return s&&o&&o.height>0||l&&o&&function(e){let t=0;for(let n=0;n<6;n++)void 0!==e[n]&&t++;return 6===t}(o)?(null===n&&(n=new P(e)),r=s?n.fromEquirectangular(a):n.fromCubemap(a),r.texture.pmremVersion=a.pmremVersion,t.set(a,r),a.addEventListener("dispose",i),r.texture):null}}}return a},dispose:function(){t=new WeakMap,null!==n&&(n.dispose(),n=null)}}}function N(e){const t={};function n(n){if(void 0!==t[n])return t[n];let r;switch(n){case"WEBGL_depth_texture":r=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":r=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":r=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":r=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:r=e.getExtension(n)}return t[n]=r,r}return{has:function(e){return null!==n(e)},init:function(){n("EXT_color_buffer_float"),n("WEBGL_clip_cull_distance"),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float"),n("WEBGL_multisampled_render_to_texture"),n("WEBGL_render_shared_exponent")},get:function(e){const t=n(e);return null===t&&(0,r.mcG)("THREE.WebGLRenderer: "+e+" extension not supported."),t}}}function O(e,t,n,i){const a={},o=new WeakMap;function s(e){const r=e.target;null!==r.index&&t.remove(r.index);for(const e in r.attributes)t.remove(r.attributes[e]);r.removeEventListener("dispose",s),delete a[r.id];const l=o.get(r);l&&(t.remove(l),o.delete(r)),i.releaseStatesOfGeometry(r),!0===r.isInstancedBufferGeometry&&delete r._maxInstanceCount,n.memory.geometries--}function l(e){const n=[],i=e.index,a=e.attributes.position;let s=0;if(null!==i){const e=i.array;s=i.version;for(let t=0,r=e.length;t<r;t+=3){const r=e[t+0],i=e[t+1],a=e[t+2];n.push(r,i,i,a,a,r)}}else{if(void 0===a)return;{const e=a.array;s=a.version;for(let t=0,r=e.length/3-1;t<r;t+=3){const e=t+0,r=t+1,i=t+2;n.push(e,r,r,i,i,e)}}}const l=new((0,r.AQS)(n)?r.MW4:r.A$4)(n,1);l.version=s;const c=o.get(e);c&&t.remove(c),o.set(e,l)}return{get:function(e,t){return!0===a[t.id]||(t.addEventListener("dispose",s),a[t.id]=!0,n.memory.geometries++),t},update:function(n){const r=n.attributes;for(const n in r)t.update(r[n],e.ARRAY_BUFFER)},getWireframeAttribute:function(e){const t=o.get(e);if(t){const n=e.index;null!==n&&t.version<n.version&&l(e)}else l(e);return o.get(e)}}}function F(e,t,n){let r,i,a;function o(t,o,s){0!==s&&(e.drawElementsInstanced(r,o,i,t*a,s),n.update(o,r,s))}this.setMode=function(e){r=e},this.setIndex=function(e){i=e.type,a=e.bytesPerElement},this.render=function(t,o){e.drawElements(r,o,i,t*a),n.update(o,r,1)},this.renderInstances=o,this.renderMultiDraw=function(e,a,o){if(0===o)return;t.get("WEBGL_multi_draw").multiDrawElementsWEBGL(r,a,0,i,e,0,o);let s=0;for(let e=0;e<o;e++)s+=a[e];n.update(s,r,1)},this.renderMultiDrawInstances=function(e,s,l,c){if(0===l)return;const d=t.get("WEBGL_multi_draw");if(null===d)for(let t=0;t<e.length;t++)o(e[t]/a,s[t],c[t]);else{d.multiDrawElementsInstancedWEBGL(r,s,0,i,e,0,c,0,l);let t=0;for(let e=0;e<l;e++)t+=s[e]*c[e];n.update(t,r,1)}}}function B(e){const t={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:t,programs:null,autoReset:!0,reset:function(){t.calls=0,t.triangles=0,t.points=0,t.lines=0},update:function(n,r,i){switch(t.calls++,r){case e.TRIANGLES:t.triangles+=i*(n/3);break;case e.LINES:t.lines+=i*(n/2);break;case e.LINE_STRIP:t.lines+=i*(n-1);break;case e.LINE_LOOP:t.lines+=i*n;break;case e.POINTS:t.points+=i*n;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",r)}}}}function G(e,t,n){const i=new WeakMap,a=new r.IUQ;return{update:function(o,s,l){const c=o.morphTargetInfluences,d=s.morphAttributes.position||s.morphAttributes.normal||s.morphAttributes.color,u=void 0!==d?d.length:0;let f=i.get(s);if(void 0===f||f.count!==u){void 0!==f&&f.texture.dispose();const p=void 0!==s.morphAttributes.position,m=void 0!==s.morphAttributes.normal,h=void 0!==s.morphAttributes.color,_=s.morphAttributes.position||[],g=s.morphAttributes.normal||[],v=s.morphAttributes.color||[];let E=0;!0===p&&(E=1),!0===m&&(E=2),!0===h&&(E=3);let S=s.attributes.position.count*E,T=1;S>t.maxTextureSize&&(T=Math.ceil(S/t.maxTextureSize),S=t.maxTextureSize);const M=new Float32Array(S*T*4*u),x=new r.rFo(M,S,T,u);x.type=r.RQf,x.needsUpdate=!0;const R=4*E;for(let C=0;C<u;C++){const b=_[C],L=g[C],P=v[C],U=S*T*4*C;for(let D=0;D<b.count;D++){const w=D*R;!0===p&&(a.fromBufferAttribute(b,D),M[U+w+0]=a.x,M[U+w+1]=a.y,M[U+w+2]=a.z,M[U+w+3]=0),!0===m&&(a.fromBufferAttribute(L,D),M[U+w+4]=a.x,M[U+w+5]=a.y,M[U+w+6]=a.z,M[U+w+7]=0),!0===h&&(a.fromBufferAttribute(P,D),M[U+w+8]=a.x,M[U+w+9]=a.y,M[U+w+10]=a.z,M[U+w+11]=4===P.itemSize?a.w:1)}}function A(){x.dispose(),i.delete(s),s.removeEventListener("dispose",A)}f={count:u,texture:x,size:new r.I9Y(S,T)},i.set(s,f),s.addEventListener("dispose",A)}if(!0===o.isInstancedMesh&&null!==o.morphTexture)l.getUniforms().setValue(e,"morphTexture",o.morphTexture,n);else{let I=0;for(let N=0;N<c.length;N++)I+=c[N];const y=s.morphTargetsRelative?1:1-I;l.getUniforms().setValue(e,"morphTargetBaseInfluence",y),l.getUniforms().setValue(e,"morphTargetInfluences",c)}l.getUniforms().setValue(e,"morphTargetsTexture",f.texture,n),l.getUniforms().setValue(e,"morphTargetsTextureSize",f.size)}}}function H(e,t,n,r){let i=new WeakMap;function a(e){const t=e.target;t.removeEventListener("dispose",a),n.remove(t.instanceMatrix),null!==t.instanceColor&&n.remove(t.instanceColor)}return{update:function(o){const s=r.render.frame,l=o.geometry,c=t.get(o,l);if(i.get(c)!==s&&(t.update(c),i.set(c,s)),o.isInstancedMesh&&(!1===o.hasEventListener("dispose",a)&&o.addEventListener("dispose",a),i.get(o)!==s&&(n.update(o.instanceMatrix,e.ARRAY_BUFFER),null!==o.instanceColor&&n.update(o.instanceColor,e.ARRAY_BUFFER),i.set(o,s))),o.isSkinnedMesh){const e=o.skeleton;i.get(e)!==s&&(e.update(),i.set(e,s))}return c},dispose:function(){i=new WeakMap}}}const V=new r.gPd,k=new r.VCu(1,1),z=new r.rFo,W=new r.dYF,X=new r.b4q,K=[],q=[],Y=new Float32Array(16),j=new Float32Array(9),Z=new Float32Array(4);function Q(e,t,n){const r=e[0];if(r<=0||r>0)return e;const i=t*n;let a=K[i];if(void 0===a&&(a=new Float32Array(i),K[i]=a),0!==t){r.toArray(a,0);for(let r=1,i=0;r!==t;++r)i+=n,e[r].toArray(a,i)}return a}function $(e,t){if(e.length!==t.length)return!1;for(let n=0,r=e.length;n<r;n++)if(e[n]!==t[n])return!1;return!0}function J(e,t){for(let n=0,r=t.length;n<r;n++)e[n]=t[n]}function ee(e,t){let n=q[t];void 0===n&&(n=new Int32Array(t),q[t]=n);for(let r=0;r!==t;++r)n[r]=e.allocateTextureUnit();return n}function te(e,t){const n=this.cache;n[0]!==t&&(e.uniform1f(this.addr,t),n[0]=t)}function ne(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y||(e.uniform2f(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if($(n,t))return;e.uniform2fv(this.addr,t),J(n,t)}}function re(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z||(e.uniform3f(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else if(void 0!==t.r)n[0]===t.r&&n[1]===t.g&&n[2]===t.b||(e.uniform3f(this.addr,t.r,t.g,t.b),n[0]=t.r,n[1]=t.g,n[2]=t.b);else{if($(n,t))return;e.uniform3fv(this.addr,t),J(n,t)}}function ie(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z&&n[3]===t.w||(e.uniform4f(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if($(n,t))return;e.uniform4fv(this.addr,t),J(n,t)}}function ae(e,t){const n=this.cache,r=t.elements;if(void 0===r){if($(n,t))return;e.uniformMatrix2fv(this.addr,!1,t),J(n,t)}else{if($(n,r))return;Z.set(r),e.uniformMatrix2fv(this.addr,!1,Z),J(n,r)}}function oe(e,t){const n=this.cache,r=t.elements;if(void 0===r){if($(n,t))return;e.uniformMatrix3fv(this.addr,!1,t),J(n,t)}else{if($(n,r))return;j.set(r),e.uniformMatrix3fv(this.addr,!1,j),J(n,r)}}function se(e,t){const n=this.cache,r=t.elements;if(void 0===r){if($(n,t))return;e.uniformMatrix4fv(this.addr,!1,t),J(n,t)}else{if($(n,r))return;Y.set(r),e.uniformMatrix4fv(this.addr,!1,Y),J(n,r)}}function le(e,t){const n=this.cache;n[0]!==t&&(e.uniform1i(this.addr,t),n[0]=t)}function ce(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y||(e.uniform2i(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if($(n,t))return;e.uniform2iv(this.addr,t),J(n,t)}}function de(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z||(e.uniform3i(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else{if($(n,t))return;e.uniform3iv(this.addr,t),J(n,t)}}function ue(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z&&n[3]===t.w||(e.uniform4i(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if($(n,t))return;e.uniform4iv(this.addr,t),J(n,t)}}function fe(e,t){const n=this.cache;n[0]!==t&&(e.uniform1ui(this.addr,t),n[0]=t)}function pe(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y||(e.uniform2ui(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if($(n,t))return;e.uniform2uiv(this.addr,t),J(n,t)}}function me(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z||(e.uniform3ui(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else{if($(n,t))return;e.uniform3uiv(this.addr,t),J(n,t)}}function he(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z&&n[3]===t.w||(e.uniform4ui(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if($(n,t))return;e.uniform4uiv(this.addr,t),J(n,t)}}function _e(e,t,n){const i=this.cache,a=n.allocateTextureUnit();let o;i[0]!==a&&(e.uniform1i(this.addr,a),i[0]=a),this.type===e.SAMPLER_2D_SHADOW?(k.compareFunction=r.TiK,o=k):o=V,n.setTexture2D(t||o,a)}function ge(e,t,n){const r=this.cache,i=n.allocateTextureUnit();r[0]!==i&&(e.uniform1i(this.addr,i),r[0]=i),n.setTexture3D(t||W,i)}function ve(e,t,n){const r=this.cache,i=n.allocateTextureUnit();r[0]!==i&&(e.uniform1i(this.addr,i),r[0]=i),n.setTextureCube(t||X,i)}function Ee(e,t,n){const r=this.cache,i=n.allocateTextureUnit();r[0]!==i&&(e.uniform1i(this.addr,i),r[0]=i),n.setTexture2DArray(t||z,i)}function Se(e,t){e.uniform1fv(this.addr,t)}function Te(e,t){const n=Q(t,this.size,2);e.uniform2fv(this.addr,n)}function Me(e,t){const n=Q(t,this.size,3);e.uniform3fv(this.addr,n)}function xe(e,t){const n=Q(t,this.size,4);e.uniform4fv(this.addr,n)}function Re(e,t){const n=Q(t,this.size,4);e.uniformMatrix2fv(this.addr,!1,n)}function Ae(e,t){const n=Q(t,this.size,9);e.uniformMatrix3fv(this.addr,!1,n)}function Ce(e,t){const n=Q(t,this.size,16);e.uniformMatrix4fv(this.addr,!1,n)}function be(e,t){e.uniform1iv(this.addr,t)}function Le(e,t){e.uniform2iv(this.addr,t)}function Pe(e,t){e.uniform3iv(this.addr,t)}function Ue(e,t){e.uniform4iv(this.addr,t)}function De(e,t){e.uniform1uiv(this.addr,t)}function we(e,t){e.uniform2uiv(this.addr,t)}function Ie(e,t){e.uniform3uiv(this.addr,t)}function ye(e,t){e.uniform4uiv(this.addr,t)}function Ne(e,t,n){const r=this.cache,i=t.length,a=ee(n,i);$(r,a)||(e.uniform1iv(this.addr,a),J(r,a));for(let e=0;e!==i;++e)n.setTexture2D(t[e]||V,a[e])}function Oe(e,t,n){const r=this.cache,i=t.length,a=ee(n,i);$(r,a)||(e.uniform1iv(this.addr,a),J(r,a));for(let e=0;e!==i;++e)n.setTexture3D(t[e]||W,a[e])}function Fe(e,t,n){const r=this.cache,i=t.length,a=ee(n,i);$(r,a)||(e.uniform1iv(this.addr,a),J(r,a));for(let e=0;e!==i;++e)n.setTextureCube(t[e]||X,a[e])}function Be(e,t,n){const r=this.cache,i=t.length,a=ee(n,i);$(r,a)||(e.uniform1iv(this.addr,a),J(r,a));for(let e=0;e!==i;++e)n.setTexture2DArray(t[e]||z,a[e])}class Ge{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.setValue=function(e){switch(e){case 5126:return te;case 35664:return ne;case 35665:return re;case 35666:return ie;case 35674:return ae;case 35675:return oe;case 35676:return se;case 5124:case 35670:return le;case 35667:case 35671:return ce;case 35668:case 35672:return de;case 35669:case 35673:return ue;case 5125:return fe;case 36294:return pe;case 36295:return me;case 36296:return he;case 35678:case 36198:case 36298:case 36306:case 35682:return _e;case 35679:case 36299:case 36307:return ge;case 35680:case 36300:case 36308:case 36293:return ve;case 36289:case 36303:case 36311:case 36292:return Ee}}(t.type)}}class He{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.size=t.size,this.setValue=function(e){switch(e){case 5126:return Se;case 35664:return Te;case 35665:return Me;case 35666:return xe;case 35674:return Re;case 35675:return Ae;case 35676:return Ce;case 5124:case 35670:return be;case 35667:case 35671:return Le;case 35668:case 35672:return Pe;case 35669:case 35673:return Ue;case 5125:return De;case 36294:return we;case 36295:return Ie;case 36296:return ye;case 35678:case 36198:case 36298:case 36306:case 35682:return Ne;case 35679:case 36299:case 36307:return Oe;case 35680:case 36300:case 36308:case 36293:return Fe;case 36289:case 36303:case 36311:case 36292:return Be}}(t.type)}}class Ve{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,n){const r=this.seq;for(let i=0,a=r.length;i!==a;++i){const a=r[i];a.setValue(e,t[a.id],n)}}}const ke=/(\w+)(\])?(\[|\.)?/g;function ze(e,t){e.seq.push(t),e.map[t.id]=t}function We(e,t,n){const r=e.name,i=r.length;for(ke.lastIndex=0;;){const a=ke.exec(r),o=ke.lastIndex;let s=a[1];const l="]"===a[2],c=a[3];if(l&&(s|=0),void 0===c||"["===c&&o+2===i){ze(n,void 0===c?new Ge(s,e,t):new He(s,e,t));break}{let e=n.map[s];void 0===e&&(e=new Ve(s),ze(n,e)),n=e}}}class Xe{constructor(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let r=0;r<n;++r){const n=e.getActiveUniform(t,r);We(n,e.getUniformLocation(t,n.name),this)}}setValue(e,t,n,r){const i=this.map[t];void 0!==i&&i.setValue(e,n,r)}setOptional(e,t,n){const r=t[n];void 0!==r&&this.setValue(e,n,r)}static upload(e,t,n,r){for(let i=0,a=t.length;i!==a;++i){const a=t[i],o=n[a.id];!1!==o.needsUpdate&&a.setValue(e,o.value,r)}}static seqWithValue(e,t){const n=[];for(let r=0,i=e.length;r!==i;++r){const i=e[r];i.id in t&&n.push(i)}return n}}function Ke(e,t,n){const r=e.createShader(t);return e.shaderSource(r,n),e.compileShader(r),r}let qe=0;const Ye=new r.dwI;function je(e,t,n){const r=e.getShaderParameter(t,e.COMPILE_STATUS),i=(e.getShaderInfoLog(t)||"").trim();if(r&&""===i)return"";const a=/ERROR: 0:(\d+)/.exec(i);if(a){const r=parseInt(a[1]);return n.toUpperCase()+"\n\n"+i+"\n\n"+function(e,t){const n=e.split("\n"),r=[],i=Math.max(t-6,0),a=Math.min(t+6,n.length);for(let e=i;e<a;e++){const i=e+1;r.push(`${i===t?">":" "} ${i}: ${n[e]}`)}return r.join("\n")}(e.getShaderSource(t),r)}return i}function Ze(e,t){const n=function(e){r.ppV._getMatrix(Ye,r.ppV.workingColorSpace,e);const t=`mat3( ${Ye.elements.map(e=>e.toFixed(4))} )`;switch(r.ppV.getTransfer(e)){case r.VxR:return[t,"LinearTransferOETF"];case r.KLL:return[t,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",e),[t,"LinearTransferOETF"]}}(t);return[`vec4 ${e}( vec4 value ) {`,`\treturn ${n[1]}( vec4( value.rgb * ${n[0]}, value.a ) );`,"}"].join("\n")}function Qe(e,t){let n;switch(t){case r.kyO:n="Linear";break;case r.Mjd:n="Reinhard";break;case r.nNL:n="Cineon";break;case r.FV:n="ACESFilmic";break;case r.LAk:n="AgX";break;case r.aJ8:n="Neutral";break;case r.g7M:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),n="Linear"}return"vec3 "+e+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}const $e=new r.Pq0;function Je(e){return""!==e}function et(e,t){const n=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,n).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function tt(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const nt=/^[ \t]*#include +<([\w\d./]+)>/gm;function rt(e){return e.replace(nt,at)}const it=new Map;function at(e,t){let n=o[t];if(void 0===n){const e=it.get(t);if(void 0===e)throw new Error("Can not resolve #include <"+t+">");n=o[e],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,e)}return rt(n)}const ot=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function st(e){return e.replace(ot,lt)}function lt(e,t,n,r){let i="";for(let e=parseInt(t);e<parseInt(n);e++)i+=r.replace(/\[\s*i\s*\]/g,"[ "+e+" ]").replace(/UNROLLED_LOOP_INDEX/g,e);return i}function ct(e){let t=`precision ${e.precision} float;\n\tprecision ${e.precision} int;\n\tprecision ${e.precision} sampler2D;\n\tprecision ${e.precision} samplerCube;\n\tprecision ${e.precision} sampler3D;\n\tprecision ${e.precision} sampler2DArray;\n\tprecision ${e.precision} sampler2DShadow;\n\tprecision ${e.precision} samplerCubeShadow;\n\tprecision ${e.precision} sampler2DArrayShadow;\n\tprecision ${e.precision} isampler2D;\n\tprecision ${e.precision} isampler3D;\n\tprecision ${e.precision} isamplerCube;\n\tprecision ${e.precision} isampler2DArray;\n\tprecision ${e.precision} usampler2D;\n\tprecision ${e.precision} usampler3D;\n\tprecision ${e.precision} usamplerCube;\n\tprecision ${e.precision} usampler2DArray;\n\t`;return"highp"===e.precision?t+="\n#define HIGH_PRECISION":"mediump"===e.precision?t+="\n#define MEDIUM_PRECISION":"lowp"===e.precision&&(t+="\n#define LOW_PRECISION"),t}function dt(e,t,n,i){const a=e.getContext(),s=n.defines;let l=n.vertexShader,c=n.fragmentShader;const d=function(e){let t="SHADOWMAP_TYPE_BASIC";return e.shadowMapType===r.QP0?t="SHADOWMAP_TYPE_PCF":e.shadowMapType===r.Wk7?t="SHADOWMAP_TYPE_PCF_SOFT":e.shadowMapType===r.RyA&&(t="SHADOWMAP_TYPE_VSM"),t}(n),u=function(e){let t="ENVMAP_TYPE_CUBE";if(e.envMap)switch(e.envMapMode){case r.hy7:case r.xFO:t="ENVMAP_TYPE_CUBE";break;case r.Om:t="ENVMAP_TYPE_CUBE_UV"}return t}(n),f=function(e){let t="ENVMAP_MODE_REFLECTION";return e.envMap&&e.envMapMode===r.xFO&&(t="ENVMAP_MODE_REFRACTION"),t}(n),p=function(e){let t="ENVMAP_BLENDING_NONE";if(e.envMap)switch(e.combine){case r.caT:t="ENVMAP_BLENDING_MULTIPLY";break;case r.KRh:t="ENVMAP_BLENDING_MIX";break;case r.XrR:t="ENVMAP_BLENDING_ADD"}return t}(n),m=function(e){const t=e.envMapCubeUVHeight;if(null===t)return null;const n=Math.log2(t)-2,r=1/t;return{texelWidth:1/(3*Math.max(Math.pow(2,n),112)),texelHeight:r,maxMip:n}}(n),h=function(e){return[e.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",e.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(Je).join("\n")}(n),_=function(e){const t=[];for(const n in e){const r=e[n];!1!==r&&t.push("#define "+n+" "+r)}return t.join("\n")}(s),g=a.createProgram();let v,E,S=n.glslVersion?"#version "+n.glslVersion+"\n":"";n.isRawShaderMaterial?(v=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,_].filter(Je).join("\n"),v.length>0&&(v+="\n"),E=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,_].filter(Je).join("\n"),E.length>0&&(E+="\n")):(v=[ct(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,_,n.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",n.batching?"#define USE_BATCHING":"",n.batchingColor?"#define USE_BATCHING_COLOR":"",n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.instancingMorph?"#define USE_INSTANCING_MORPH":"",n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+f:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.displacementMap?"#define USE_DISPLACEMENTMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.mapUv?"#define MAP_UV "+n.mapUv:"",n.alphaMapUv?"#define ALPHAMAP_UV "+n.alphaMapUv:"",n.lightMapUv?"#define LIGHTMAP_UV "+n.lightMapUv:"",n.aoMapUv?"#define AOMAP_UV "+n.aoMapUv:"",n.emissiveMapUv?"#define EMISSIVEMAP_UV "+n.emissiveMapUv:"",n.bumpMapUv?"#define BUMPMAP_UV "+n.bumpMapUv:"",n.normalMapUv?"#define NORMALMAP_UV "+n.normalMapUv:"",n.displacementMapUv?"#define DISPLACEMENTMAP_UV "+n.displacementMapUv:"",n.metalnessMapUv?"#define METALNESSMAP_UV "+n.metalnessMapUv:"",n.roughnessMapUv?"#define ROUGHNESSMAP_UV "+n.roughnessMapUv:"",n.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+n.anisotropyMapUv:"",n.clearcoatMapUv?"#define CLEARCOATMAP_UV "+n.clearcoatMapUv:"",n.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+n.clearcoatNormalMapUv:"",n.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+n.clearcoatRoughnessMapUv:"",n.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+n.iridescenceMapUv:"",n.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+n.iridescenceThicknessMapUv:"",n.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+n.sheenColorMapUv:"",n.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+n.sheenRoughnessMapUv:"",n.specularMapUv?"#define SPECULARMAP_UV "+n.specularMapUv:"",n.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+n.specularColorMapUv:"",n.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+n.specularIntensityMapUv:"",n.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+n.transmissionMapUv:"",n.thicknessMapUv?"#define THICKNESSMAP_UV "+n.thicknessMapUv:"",n.vertexTangents&&!1===n.flatShading?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&!1===n.flatShading?"#define USE_MORPHNORMALS":"",n.morphColors?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+d:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.logarithmicDepthBuffer?"#define USE_LOGARITHMIC_DEPTH_BUFFER":"",n.reversedDepthBuffer?"#define USE_REVERSED_DEPTH_BUFFER":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","\tuniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","\tattribute vec2 uv1;","#endif","#ifdef USE_UV2","\tattribute vec2 uv2;","#endif","#ifdef USE_UV3","\tattribute vec2 uv3;","#endif","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Je).join("\n"),E=[ct(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,_,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+u:"",n.envMap?"#define "+f:"",n.envMap?"#define "+p:"",m?"#define CUBEUV_TEXEL_WIDTH "+m.texelWidth:"",m?"#define CUBEUV_TEXEL_HEIGHT "+m.texelHeight:"",m?"#define CUBEUV_MAX_MIP "+m.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.dispersion?"#define USE_DISPERSION":"",n.iridescence?"#define USE_IRIDESCENCE":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.vertexTangents&&!1===n.flatShading?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor||n.batchingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+d:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",n.logarithmicDepthBuffer?"#define USE_LOGARITHMIC_DEPTH_BUFFER":"",n.reversedDepthBuffer?"#define USE_REVERSED_DEPTH_BUFFER":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",n.toneMapping!==r.y_p?"#define TONE_MAPPING":"",n.toneMapping!==r.y_p?o.tonemapping_pars_fragment:"",n.toneMapping!==r.y_p?Qe("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",o.colorspace_pars_fragment,Ze("linearToOutputTexel",n.outputColorSpace),(r.ppV.getLuminanceCoefficients($e),["float luminance( const in vec3 rgb ) {",`\tconst vec3 weights = vec3( ${$e.x.toFixed(4)}, ${$e.y.toFixed(4)}, ${$e.z.toFixed(4)} );`,"\treturn dot( weights, rgb );","}"].join("\n")),n.useDepthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(Je).join("\n")),l=rt(l),l=et(l,n),l=tt(l,n),c=rt(c),c=et(c,n),c=tt(c,n),l=st(l),c=st(c),!0!==n.isRawShaderMaterial&&(S="#version 300 es\n",v=[h,"#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+v,E=["#define varying in",n.glslVersion===r.Wdf?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===r.Wdf?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+E);const T=S+v+l,M=S+E+c,x=Ke(a,a.VERTEX_SHADER,T),R=Ke(a,a.FRAGMENT_SHADER,M);function A(t){if(e.debug.checkShaderErrors){const n=a.getProgramInfoLog(g)||"",r=a.getShaderInfoLog(x)||"",i=a.getShaderInfoLog(R)||"",o=n.trim(),s=r.trim(),l=i.trim();let c=!0,d=!0;if(!1===a.getProgramParameter(g,a.LINK_STATUS))if(c=!1,"function"==typeof e.debug.onShaderError)e.debug.onShaderError(a,g,x,R);else{const e=je(a,x,"vertex"),n=je(a,R,"fragment");console.error("THREE.WebGLProgram: Shader Error "+a.getError()+" - VALIDATE_STATUS "+a.getProgramParameter(g,a.VALIDATE_STATUS)+"\n\nMaterial Name: "+t.name+"\nMaterial Type: "+t.type+"\n\nProgram Info Log: "+o+"\n"+e+"\n"+n)}else""!==o?console.warn("THREE.WebGLProgram: Program Info Log:",o):""!==s&&""!==l||(d=!1);d&&(t.diagnostics={runnable:c,programLog:o,vertexShader:{log:s,prefix:v},fragmentShader:{log:l,prefix:E}})}a.deleteShader(x),a.deleteShader(R),C=new Xe(a,g),b=function(e,t){const n={},r=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES);for(let i=0;i<r;i++){const r=e.getActiveAttrib(t,i),a=r.name;let o=1;r.type===e.FLOAT_MAT2&&(o=2),r.type===e.FLOAT_MAT3&&(o=3),r.type===e.FLOAT_MAT4&&(o=4),n[a]={type:r.type,location:e.getAttribLocation(t,a),locationSize:o}}return n}(a,g)}let C,b;a.attachShader(g,x),a.attachShader(g,R),void 0!==n.index0AttributeName?a.bindAttribLocation(g,0,n.index0AttributeName):!0===n.morphTargets&&a.bindAttribLocation(g,0,"position"),a.linkProgram(g),this.getUniforms=function(){return void 0===C&&A(this),C},this.getAttributes=function(){return void 0===b&&A(this),b};let L=!1===n.rendererExtensionParallelShaderCompile;return this.isReady=function(){return!1===L&&(L=a.getProgramParameter(g,37297)),L},this.destroy=function(){i.releaseStatesOfProgram(this),a.deleteProgram(g),this.program=void 0},this.type=n.shaderType,this.name=n.shaderName,this.id=qe++,this.cacheKey=t,this.usedTimes=1,this.program=g,this.vertexShader=x,this.fragmentShader=R,this}let ut=0;class ft{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,n=e.fragmentShader,r=this._getShaderStage(t),i=this._getShaderStage(n),a=this._getShaderCacheForMaterial(e);return!1===a.has(r)&&(a.add(r),r.usedTimes++),!1===a.has(i)&&(a.add(i),i.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const e of t)e.usedTimes--,0===e.usedTimes&&this.shaderCache.delete(e.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);return void 0===n&&(n=new Set,t.set(e,n)),n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);return void 0===n&&(n=new pt(e),t.set(e,n)),n}}class pt{constructor(e){this.id=ut++,this.code=e,this.usedTimes=0}}function mt(e,t,n,i,a,o,s){const c=new r.zgK,d=new ft,u=new Set,f=[],p=a.logarithmicDepthBuffer,m=a.vertexTextures;let h=a.precision;const _={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function g(e){return u.add(e),0===e?"uv":`uv${e}`}return{getParameters:function(o,c,f,v,E){const S=v.fog,T=E.geometry,M=o.isMeshStandardMaterial?v.environment:null,x=(o.isMeshStandardMaterial?n:t).get(o.envMap||M),R=x&&x.mapping===r.Om?x.image.height:null,A=_[o.type];null!==o.precision&&(h=a.getMaxPrecision(o.precision),h!==o.precision&&console.warn("THREE.WebGLProgram.getParameters:",o.precision,"not supported, using",h,"instead."));const C=T.morphAttributes.position||T.morphAttributes.normal||T.morphAttributes.color,b=void 0!==C?C.length:0;let L,P,U,D,w=0;if(void 0!==T.morphAttributes.position&&(w=1),void 0!==T.morphAttributes.normal&&(w=2),void 0!==T.morphAttributes.color&&(w=3),A){const e=l[A];L=e.vertexShader,P=e.fragmentShader}else L=o.vertexShader,P=o.fragmentShader,d.update(o),U=d.getVertexShaderID(o),D=d.getFragmentShaderID(o);const I=e.getRenderTarget(),y=e.state.buffers.depth.getReversed(),N=!0===E.isInstancedMesh,O=!0===E.isBatchedMesh,F=!!o.map,B=!!o.matcap,G=!!x,H=!!o.aoMap,V=!!o.lightMap,k=!!o.bumpMap,z=!!o.normalMap,W=!!o.displacementMap,X=!!o.emissiveMap,K=!!o.metalnessMap,q=!!o.roughnessMap,Y=o.anisotropy>0,j=o.clearcoat>0,Z=o.dispersion>0,Q=o.iridescence>0,$=o.sheen>0,J=o.transmission>0,ee=Y&&!!o.anisotropyMap,te=j&&!!o.clearcoatMap,ne=j&&!!o.clearcoatNormalMap,re=j&&!!o.clearcoatRoughnessMap,ie=Q&&!!o.iridescenceMap,ae=Q&&!!o.iridescenceThicknessMap,oe=$&&!!o.sheenColorMap,se=$&&!!o.sheenRoughnessMap,le=!!o.specularMap,ce=!!o.specularColorMap,de=!!o.specularIntensityMap,ue=J&&!!o.transmissionMap,fe=J&&!!o.thicknessMap,pe=!!o.gradientMap,me=!!o.alphaMap,he=o.alphaTest>0,_e=!!o.alphaHash,ge=!!o.extensions;let ve=r.y_p;o.toneMapped&&(null!==I&&!0!==I.isXRRenderTarget||(ve=e.toneMapping));const Ee={shaderID:A,shaderType:o.type,shaderName:o.name,vertexShader:L,fragmentShader:P,defines:o.defines,customVertexShaderID:U,customFragmentShaderID:D,isRawShaderMaterial:!0===o.isRawShaderMaterial,glslVersion:o.glslVersion,precision:h,batching:O,batchingColor:O&&null!==E._colorsTexture,instancing:N,instancingColor:N&&null!==E.instanceColor,instancingMorph:N&&null!==E.morphTexture,supportsVertexTextures:m,outputColorSpace:null===I?e.outputColorSpace:!0===I.isXRRenderTarget?I.texture.colorSpace:r.Zr2,alphaToCoverage:!!o.alphaToCoverage,map:F,matcap:B,envMap:G,envMapMode:G&&x.mapping,envMapCubeUVHeight:R,aoMap:H,lightMap:V,bumpMap:k,normalMap:z,displacementMap:m&&W,emissiveMap:X,normalMapObjectSpace:z&&o.normalMapType===r.vyJ,normalMapTangentSpace:z&&o.normalMapType===r.bI3,metalnessMap:K,roughnessMap:q,anisotropy:Y,anisotropyMap:ee,clearcoat:j,clearcoatMap:te,clearcoatNormalMap:ne,clearcoatRoughnessMap:re,dispersion:Z,iridescence:Q,iridescenceMap:ie,iridescenceThicknessMap:ae,sheen:$,sheenColorMap:oe,sheenRoughnessMap:se,specularMap:le,specularColorMap:ce,specularIntensityMap:de,transmission:J,transmissionMap:ue,thicknessMap:fe,gradientMap:pe,opaque:!1===o.transparent&&o.blending===r.NTi&&!1===o.alphaToCoverage,alphaMap:me,alphaTest:he,alphaHash:_e,combine:o.combine,mapUv:F&&g(o.map.channel),aoMapUv:H&&g(o.aoMap.channel),lightMapUv:V&&g(o.lightMap.channel),bumpMapUv:k&&g(o.bumpMap.channel),normalMapUv:z&&g(o.normalMap.channel),displacementMapUv:W&&g(o.displacementMap.channel),emissiveMapUv:X&&g(o.emissiveMap.channel),metalnessMapUv:K&&g(o.metalnessMap.channel),roughnessMapUv:q&&g(o.roughnessMap.channel),anisotropyMapUv:ee&&g(o.anisotropyMap.channel),clearcoatMapUv:te&&g(o.clearcoatMap.channel),clearcoatNormalMapUv:ne&&g(o.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:re&&g(o.clearcoatRoughnessMap.channel),iridescenceMapUv:ie&&g(o.iridescenceMap.channel),iridescenceThicknessMapUv:ae&&g(o.iridescenceThicknessMap.channel),sheenColorMapUv:oe&&g(o.sheenColorMap.channel),sheenRoughnessMapUv:se&&g(o.sheenRoughnessMap.channel),specularMapUv:le&&g(o.specularMap.channel),specularColorMapUv:ce&&g(o.specularColorMap.channel),specularIntensityMapUv:de&&g(o.specularIntensityMap.channel),transmissionMapUv:ue&&g(o.transmissionMap.channel),thicknessMapUv:fe&&g(o.thicknessMap.channel),alphaMapUv:me&&g(o.alphaMap.channel),vertexTangents:!!T.attributes.tangent&&(z||Y),vertexColors:o.vertexColors,vertexAlphas:!0===o.vertexColors&&!!T.attributes.color&&4===T.attributes.color.itemSize,pointsUvs:!0===E.isPoints&&!!T.attributes.uv&&(F||me),fog:!!S,useFog:!0===o.fog,fogExp2:!!S&&S.isFogExp2,flatShading:!0===o.flatShading&&!1===o.wireframe,sizeAttenuation:!0===o.sizeAttenuation,logarithmicDepthBuffer:p,reversedDepthBuffer:y,skinning:!0===E.isSkinnedMesh,morphTargets:void 0!==T.morphAttributes.position,morphNormals:void 0!==T.morphAttributes.normal,morphColors:void 0!==T.morphAttributes.color,morphTargetsCount:b,morphTextureStride:w,numDirLights:c.directional.length,numPointLights:c.point.length,numSpotLights:c.spot.length,numSpotLightMaps:c.spotLightMap.length,numRectAreaLights:c.rectArea.length,numHemiLights:c.hemi.length,numDirLightShadows:c.directionalShadowMap.length,numPointLightShadows:c.pointShadowMap.length,numSpotLightShadows:c.spotShadowMap.length,numSpotLightShadowsWithMaps:c.numSpotLightShadowsWithMaps,numLightProbes:c.numLightProbes,numClippingPlanes:s.numPlanes,numClipIntersection:s.numIntersection,dithering:o.dithering,shadowMapEnabled:e.shadowMap.enabled&&f.length>0,shadowMapType:e.shadowMap.type,toneMapping:ve,decodeVideoTexture:F&&!0===o.map.isVideoTexture&&r.ppV.getTransfer(o.map.colorSpace)===r.KLL,decodeVideoTextureEmissive:X&&!0===o.emissiveMap.isVideoTexture&&r.ppV.getTransfer(o.emissiveMap.colorSpace)===r.KLL,premultipliedAlpha:o.premultipliedAlpha,doubleSided:o.side===r.$EB,flipSided:o.side===r.hsX,useDepthPacking:o.depthPacking>=0,depthPacking:o.depthPacking||0,index0AttributeName:o.index0AttributeName,extensionClipCullDistance:ge&&!0===o.extensions.clipCullDistance&&i.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(ge&&!0===o.extensions.multiDraw||O)&&i.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:i.has("KHR_parallel_shader_compile"),customProgramCacheKey:o.customProgramCacheKey()};return Ee.vertexUv1s=u.has(1),Ee.vertexUv2s=u.has(2),Ee.vertexUv3s=u.has(3),u.clear(),Ee},getProgramCacheKey:function(t){const n=[];if(t.shaderID?n.push(t.shaderID):(n.push(t.customVertexShaderID),n.push(t.customFragmentShaderID)),void 0!==t.defines)for(const e in t.defines)n.push(e),n.push(t.defines[e]);return!1===t.isRawShaderMaterial&&(function(e,t){e.push(t.precision),e.push(t.outputColorSpace),e.push(t.envMapMode),e.push(t.envMapCubeUVHeight),e.push(t.mapUv),e.push(t.alphaMapUv),e.push(t.lightMapUv),e.push(t.aoMapUv),e.push(t.bumpMapUv),e.push(t.normalMapUv),e.push(t.displacementMapUv),e.push(t.emissiveMapUv),e.push(t.metalnessMapUv),e.push(t.roughnessMapUv),e.push(t.anisotropyMapUv),e.push(t.clearcoatMapUv),e.push(t.clearcoatNormalMapUv),e.push(t.clearcoatRoughnessMapUv),e.push(t.iridescenceMapUv),e.push(t.iridescenceThicknessMapUv),e.push(t.sheenColorMapUv),e.push(t.sheenRoughnessMapUv),e.push(t.specularMapUv),e.push(t.specularColorMapUv),e.push(t.specularIntensityMapUv),e.push(t.transmissionMapUv),e.push(t.thicknessMapUv),e.push(t.combine),e.push(t.fogExp2),e.push(t.sizeAttenuation),e.push(t.morphTargetsCount),e.push(t.morphAttributeCount),e.push(t.numDirLights),e.push(t.numPointLights),e.push(t.numSpotLights),e.push(t.numSpotLightMaps),e.push(t.numHemiLights),e.push(t.numRectAreaLights),e.push(t.numDirLightShadows),e.push(t.numPointLightShadows),e.push(t.numSpotLightShadows),e.push(t.numSpotLightShadowsWithMaps),e.push(t.numLightProbes),e.push(t.shadowMapType),e.push(t.toneMapping),e.push(t.numClippingPlanes),e.push(t.numClipIntersection),e.push(t.depthPacking)}(n,t),function(e,t){c.disableAll(),t.supportsVertexTextures&&c.enable(0),t.instancing&&c.enable(1),t.instancingColor&&c.enable(2),t.instancingMorph&&c.enable(3),t.matcap&&c.enable(4),t.envMap&&c.enable(5),t.normalMapObjectSpace&&c.enable(6),t.normalMapTangentSpace&&c.enable(7),t.clearcoat&&c.enable(8),t.iridescence&&c.enable(9),t.alphaTest&&c.enable(10),t.vertexColors&&c.enable(11),t.vertexAlphas&&c.enable(12),t.vertexUv1s&&c.enable(13),t.vertexUv2s&&c.enable(14),t.vertexUv3s&&c.enable(15),t.vertexTangents&&c.enable(16),t.anisotropy&&c.enable(17),t.alphaHash&&c.enable(18),t.batching&&c.enable(19),t.dispersion&&c.enable(20),t.batchingColor&&c.enable(21),t.gradientMap&&c.enable(22),e.push(c.mask),c.disableAll(),t.fog&&c.enable(0),t.useFog&&c.enable(1),t.flatShading&&c.enable(2),t.logarithmicDepthBuffer&&c.enable(3),t.reversedDepthBuffer&&c.enable(4),t.skinning&&c.enable(5),t.morphTargets&&c.enable(6),t.morphNormals&&c.enable(7),t.morphColors&&c.enable(8),t.premultipliedAlpha&&c.enable(9),t.shadowMapEnabled&&c.enable(10),t.doubleSided&&c.enable(11),t.flipSided&&c.enable(12),t.useDepthPacking&&c.enable(13),t.dithering&&c.enable(14),t.transmission&&c.enable(15),t.sheen&&c.enable(16),t.opaque&&c.enable(17),t.pointsUvs&&c.enable(18),t.decodeVideoTexture&&c.enable(19),t.decodeVideoTextureEmissive&&c.enable(20),t.alphaToCoverage&&c.enable(21),e.push(c.mask)}(n,t),n.push(e.outputColorSpace)),n.push(t.customProgramCacheKey),n.join()},getUniforms:function(e){const t=_[e.type];let n;if(t){const e=l[t];n=r.LlO.clone(e.uniforms)}else n=e.uniforms;return n},acquireProgram:function(t,n){let r;for(let e=0,t=f.length;e<t;e++){const t=f[e];if(t.cacheKey===n){r=t,++r.usedTimes;break}}return void 0===r&&(r=new dt(e,n,t,o),f.push(r)),r},releaseProgram:function(e){if(0===--e.usedTimes){const t=f.indexOf(e);f[t]=f[f.length-1],f.pop(),e.destroy()}},releaseShaderCache:function(e){d.remove(e)},programs:f,dispose:function(){d.dispose()}}}function ht(){let e=new WeakMap;return{has:function(t){return e.has(t)},get:function(t){let n=e.get(t);return void 0===n&&(n={},e.set(t,n)),n},remove:function(t){e.delete(t)},update:function(t,n,r){e.get(t)[n]=r},dispose:function(){e=new WeakMap}}}function _t(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function gt(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function vt(){const e=[];let t=0;const n=[],r=[],i=[];function a(n,r,i,a,o,s){let l=e[t];return void 0===l?(l={id:n.id,object:n,geometry:r,material:i,groupOrder:a,renderOrder:n.renderOrder,z:o,group:s},e[t]=l):(l.id=n.id,l.object=n,l.geometry=r,l.material=i,l.groupOrder=a,l.renderOrder=n.renderOrder,l.z=o,l.group=s),t++,l}return{opaque:n,transmissive:r,transparent:i,init:function(){t=0,n.length=0,r.length=0,i.length=0},push:function(e,t,o,s,l,c){const d=a(e,t,o,s,l,c);o.transmission>0?r.push(d):!0===o.transparent?i.push(d):n.push(d)},unshift:function(e,t,o,s,l,c){const d=a(e,t,o,s,l,c);o.transmission>0?r.unshift(d):!0===o.transparent?i.unshift(d):n.unshift(d)},finish:function(){for(let n=t,r=e.length;n<r;n++){const t=e[n];if(null===t.id)break;t.id=null,t.object=null,t.geometry=null,t.material=null,t.group=null}},sort:function(e,t){n.length>1&&n.sort(e||_t),r.length>1&&r.sort(t||gt),i.length>1&&i.sort(t||gt)}}}function Et(){let e=new WeakMap;return{get:function(t,n){const r=e.get(t);let i;return void 0===r?(i=new vt,e.set(t,[i])):n>=r.length?(i=new vt,r.push(i)):i=r[n],i},dispose:function(){e=new WeakMap}}}function St(){const e={};return{get:function(t){if(void 0!==e[t.id])return e[t.id];let n;switch(t.type){case"DirectionalLight":n={direction:new r.Pq0,color:new r.Q1f};break;case"SpotLight":n={position:new r.Pq0,direction:new r.Pq0,color:new r.Q1f,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new r.Pq0,color:new r.Q1f,distance:0,decay:0};break;case"HemisphereLight":n={direction:new r.Pq0,skyColor:new r.Q1f,groundColor:new r.Q1f};break;case"RectAreaLight":n={color:new r.Q1f,position:new r.Pq0,halfWidth:new r.Pq0,halfHeight:new r.Pq0}}return e[t.id]=n,n}}}let Tt=0;function Mt(e,t){return(t.castShadow?2:0)-(e.castShadow?2:0)+(t.map?1:0)-(e.map?1:0)}function xt(e){const t=new St,n=function(){const e={};return{get:function(t){if(void 0!==e[t.id])return e[t.id];let n;switch(t.type){case"DirectionalLight":case"SpotLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new r.I9Y};break;case"PointLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new r.I9Y,shadowCameraNear:1,shadowCameraFar:1e3}}return e[t.id]=n,n}}}(),i={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let e=0;e<9;e++)i.probe.push(new r.Pq0);const a=new r.Pq0,o=new r.kn4,l=new r.kn4;return{setup:function(r){let a=0,o=0,l=0;for(let e=0;e<9;e++)i.probe[e].set(0,0,0);let c=0,d=0,u=0,f=0,p=0,m=0,h=0,_=0,g=0,v=0,E=0;r.sort(Mt);for(let e=0,s=r.length;e<s;e++){const s=r[e],S=s.color,T=s.intensity,M=s.distance,x=s.shadow&&s.shadow.map?s.shadow.map.texture:null;if(s.isAmbientLight)a+=S.r*T,o+=S.g*T,l+=S.b*T;else if(s.isLightProbe){for(let e=0;e<9;e++)i.probe[e].addScaledVector(s.sh.coefficients[e],T);E++}else if(s.isDirectionalLight){const e=t.get(s);if(e.color.copy(s.color).multiplyScalar(s.intensity),s.castShadow){const e=s.shadow,t=n.get(s);t.shadowIntensity=e.intensity,t.shadowBias=e.bias,t.shadowNormalBias=e.normalBias,t.shadowRadius=e.radius,t.shadowMapSize=e.mapSize,i.directionalShadow[c]=t,i.directionalShadowMap[c]=x,i.directionalShadowMatrix[c]=s.shadow.matrix,m++}i.directional[c]=e,c++}else if(s.isSpotLight){const e=t.get(s);e.position.setFromMatrixPosition(s.matrixWorld),e.color.copy(S).multiplyScalar(T),e.distance=M,e.coneCos=Math.cos(s.angle),e.penumbraCos=Math.cos(s.angle*(1-s.penumbra)),e.decay=s.decay,i.spot[u]=e;const r=s.shadow;if(s.map&&(i.spotLightMap[g]=s.map,g++,r.updateMatrices(s),s.castShadow&&v++),i.spotLightMatrix[u]=r.matrix,s.castShadow){const e=n.get(s);e.shadowIntensity=r.intensity,e.shadowBias=r.bias,e.shadowNormalBias=r.normalBias,e.shadowRadius=r.radius,e.shadowMapSize=r.mapSize,i.spotShadow[u]=e,i.spotShadowMap[u]=x,_++}u++}else if(s.isRectAreaLight){const e=t.get(s);e.color.copy(S).multiplyScalar(T),e.halfWidth.set(.5*s.width,0,0),e.halfHeight.set(0,.5*s.height,0),i.rectArea[f]=e,f++}else if(s.isPointLight){const e=t.get(s);if(e.color.copy(s.color).multiplyScalar(s.intensity),e.distance=s.distance,e.decay=s.decay,s.castShadow){const e=s.shadow,t=n.get(s);t.shadowIntensity=e.intensity,t.shadowBias=e.bias,t.shadowNormalBias=e.normalBias,t.shadowRadius=e.radius,t.shadowMapSize=e.mapSize,t.shadowCameraNear=e.camera.near,t.shadowCameraFar=e.camera.far,i.pointShadow[d]=t,i.pointShadowMap[d]=x,i.pointShadowMatrix[d]=s.shadow.matrix,h++}i.point[d]=e,d++}else if(s.isHemisphereLight){const e=t.get(s);e.skyColor.copy(s.color).multiplyScalar(T),e.groundColor.copy(s.groundColor).multiplyScalar(T),i.hemi[p]=e,p++}}f>0&&(!0===e.has("OES_texture_float_linear")?(i.rectAreaLTC1=s.LTC_FLOAT_1,i.rectAreaLTC2=s.LTC_FLOAT_2):(i.rectAreaLTC1=s.LTC_HALF_1,i.rectAreaLTC2=s.LTC_HALF_2)),i.ambient[0]=a,i.ambient[1]=o,i.ambient[2]=l;const S=i.hash;S.directionalLength===c&&S.pointLength===d&&S.spotLength===u&&S.rectAreaLength===f&&S.hemiLength===p&&S.numDirectionalShadows===m&&S.numPointShadows===h&&S.numSpotShadows===_&&S.numSpotMaps===g&&S.numLightProbes===E||(i.directional.length=c,i.spot.length=u,i.rectArea.length=f,i.point.length=d,i.hemi.length=p,i.directionalShadow.length=m,i.directionalShadowMap.length=m,i.pointShadow.length=h,i.pointShadowMap.length=h,i.spotShadow.length=_,i.spotShadowMap.length=_,i.directionalShadowMatrix.length=m,i.pointShadowMatrix.length=h,i.spotLightMatrix.length=_+g-v,i.spotLightMap.length=g,i.numSpotLightShadowsWithMaps=v,i.numLightProbes=E,S.directionalLength=c,S.pointLength=d,S.spotLength=u,S.rectAreaLength=f,S.hemiLength=p,S.numDirectionalShadows=m,S.numPointShadows=h,S.numSpotShadows=_,S.numSpotMaps=g,S.numLightProbes=E,i.version=Tt++)},setupView:function(e,t){let n=0,r=0,s=0,c=0,d=0;const u=t.matrixWorldInverse;for(let t=0,f=e.length;t<f;t++){const f=e[t];if(f.isDirectionalLight){const e=i.directional[n];e.direction.setFromMatrixPosition(f.matrixWorld),a.setFromMatrixPosition(f.target.matrixWorld),e.direction.sub(a),e.direction.transformDirection(u),n++}else if(f.isSpotLight){const e=i.spot[s];e.position.setFromMatrixPosition(f.matrixWorld),e.position.applyMatrix4(u),e.direction.setFromMatrixPosition(f.matrixWorld),a.setFromMatrixPosition(f.target.matrixWorld),e.direction.sub(a),e.direction.transformDirection(u),s++}else if(f.isRectAreaLight){const e=i.rectArea[c];e.position.setFromMatrixPosition(f.matrixWorld),e.position.applyMatrix4(u),l.identity(),o.copy(f.matrixWorld),o.premultiply(u),l.extractRotation(o),e.halfWidth.set(.5*f.width,0,0),e.halfHeight.set(0,.5*f.height,0),e.halfWidth.applyMatrix4(l),e.halfHeight.applyMatrix4(l),c++}else if(f.isPointLight){const e=i.point[r];e.position.setFromMatrixPosition(f.matrixWorld),e.position.applyMatrix4(u),r++}else if(f.isHemisphereLight){const e=i.hemi[d];e.direction.setFromMatrixPosition(f.matrixWorld),e.direction.transformDirection(u),d++}}},state:i}}function Rt(e){const t=new xt(e),n=[],r=[],i={lightsArray:n,shadowsArray:r,camera:null,lights:t,transmissionRenderTarget:{}};return{init:function(e){i.camera=e,n.length=0,r.length=0},state:i,setupLights:function(){t.setup(n)},setupLightsView:function(e){t.setupView(n,e)},pushLight:function(e){n.push(e)},pushShadow:function(e){r.push(e)}}}function At(e){let t=new WeakMap;return{get:function(n,r=0){const i=t.get(n);let a;return void 0===i?(a=new Rt(e),t.set(n,[a])):r>=i.length?(a=new Rt(e),i.push(a)):a=i[r],a},dispose:function(){t=new WeakMap}}}function Ct(e,t,n){let i=new r.PPD;const a=new r.I9Y,o=new r.I9Y,s=new r.IUQ,l=new r.CSG({depthPacking:r.N5j}),c=new r.aVO,d={},u=n.maxTextureSize,f={[r.hB5]:r.hsX,[r.hsX]:r.hB5,[r.$EB]:r.$EB},p=new r.BKk({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new r.I9Y},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),m=p.clone();m.defines.HORIZONTAL_PASS=1;const h=new r.LoY;h.setAttribute("position",new r.THS(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const _=new r.eaF(h,p),g=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=r.QP0;let v=this.type;function E(n,i){const o=t.update(_);p.defines.VSM_SAMPLES!==n.blurSamples&&(p.defines.VSM_SAMPLES=n.blurSamples,m.defines.VSM_SAMPLES=n.blurSamples,p.needsUpdate=!0,m.needsUpdate=!0),null===n.mapPass&&(n.mapPass=new r.nWS(a.x,a.y)),p.uniforms.shadow_pass.value=n.map.texture,p.uniforms.resolution.value=n.mapSize,p.uniforms.radius.value=n.radius,e.setRenderTarget(n.mapPass),e.clear(),e.renderBufferDirect(i,null,o,p,_,null),m.uniforms.shadow_pass.value=n.mapPass.texture,m.uniforms.resolution.value=n.mapSize,m.uniforms.radius.value=n.radius,e.setRenderTarget(n.map),e.clear(),e.renderBufferDirect(i,null,o,m,_,null)}function S(t,n,i,a){let o=null;const s=!0===i.isPointLight?t.customDistanceMaterial:t.customDepthMaterial;if(void 0!==s)o=s;else if(o=!0===i.isPointLight?c:l,e.localClippingEnabled&&!0===n.clipShadows&&Array.isArray(n.clippingPlanes)&&0!==n.clippingPlanes.length||n.displacementMap&&0!==n.displacementScale||n.alphaMap&&n.alphaTest>0||n.map&&n.alphaTest>0||!0===n.alphaToCoverage){const e=o.uuid,t=n.uuid;let r=d[e];void 0===r&&(r={},d[e]=r);let i=r[t];void 0===i&&(i=o.clone(),r[t]=i,n.addEventListener("dispose",M)),o=i}return o.visible=n.visible,o.wireframe=n.wireframe,a===r.RyA?o.side=null!==n.shadowSide?n.shadowSide:n.side:o.side=null!==n.shadowSide?n.shadowSide:f[n.side],o.alphaMap=n.alphaMap,o.alphaTest=!0===n.alphaToCoverage?.5:n.alphaTest,o.map=n.map,o.clipShadows=n.clipShadows,o.clippingPlanes=n.clippingPlanes,o.clipIntersection=n.clipIntersection,o.displacementMap=n.displacementMap,o.displacementScale=n.displacementScale,o.displacementBias=n.displacementBias,o.wireframeLinewidth=n.wireframeLinewidth,o.linewidth=n.linewidth,!0===i.isPointLight&&!0===o.isMeshDistanceMaterial&&(e.properties.get(o).light=i),o}function T(n,a,o,s,l){if(!1===n.visible)return;if(n.layers.test(a.layers)&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&l===r.RyA)&&(!n.frustumCulled||i.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(o.matrixWorldInverse,n.matrixWorld);const r=t.update(n),i=n.material;if(Array.isArray(i)){const t=r.groups;for(let c=0,d=t.length;c<d;c++){const d=t[c],u=i[d.materialIndex];if(u&&u.visible){const t=S(n,u,s,l);n.onBeforeShadow(e,n,a,o,r,t,d),e.renderBufferDirect(o,null,r,t,n,d),n.onAfterShadow(e,n,a,o,r,t,d)}}}else if(i.visible){const t=S(n,i,s,l);n.onBeforeShadow(e,n,a,o,r,t,null),e.renderBufferDirect(o,null,r,t,n,null),n.onAfterShadow(e,n,a,o,r,t,null)}}const c=n.children;for(let e=0,t=c.length;e<t;e++)T(c[e],a,o,s,l)}function M(e){e.target.removeEventListener("dispose",M);for(const t in d){const n=d[t],r=e.target.uuid;r in n&&(n[r].dispose(),delete n[r])}}this.render=function(t,n,l){if(!1===g.enabled)return;if(!1===g.autoUpdate&&!1===g.needsUpdate)return;if(0===t.length)return;const c=e.getRenderTarget(),d=e.getActiveCubeFace(),f=e.getActiveMipmapLevel(),p=e.state;p.setBlending(r.XIg),!0===p.buffers.depth.getReversed()?p.buffers.color.setClear(0,0,0,0):p.buffers.color.setClear(1,1,1,1),p.buffers.depth.setTest(!0),p.setScissorTest(!1);const m=v!==r.RyA&&this.type===r.RyA,h=v===r.RyA&&this.type!==r.RyA;for(let c=0,d=t.length;c<d;c++){const d=t[c],f=d.shadow;if(void 0===f){console.warn("THREE.WebGLShadowMap:",d,"has no shadow.");continue}if(!1===f.autoUpdate&&!1===f.needsUpdate)continue;a.copy(f.mapSize);const _=f.getFrameExtents();if(a.multiply(_),o.copy(f.mapSize),(a.x>u||a.y>u)&&(a.x>u&&(o.x=Math.floor(u/_.x),a.x=o.x*_.x,f.mapSize.x=o.x),a.y>u&&(o.y=Math.floor(u/_.y),a.y=o.y*_.y,f.mapSize.y=o.y)),null===f.map||!0===m||!0===h){const e=this.type!==r.RyA?{minFilter:r.hxR,magFilter:r.hxR}:{};null!==f.map&&f.map.dispose(),f.map=new r.nWS(a.x,a.y,e),f.map.texture.name=d.name+".shadowMap",f.camera.updateProjectionMatrix()}e.setRenderTarget(f.map),e.clear();const g=f.getViewportCount();for(let e=0;e<g;e++){const t=f.getViewport(e);s.set(o.x*t.x,o.y*t.y,o.x*t.z,o.y*t.w),p.viewport(s),f.updateMatrices(d,e),i=f.getFrustum(),T(n,l,f.camera,d,this.type)}!0!==f.isPointLightShadow&&this.type===r.RyA&&E(f,l),f.needsUpdate=!1}v=this.type,g.needsUpdate=!1,e.setRenderTarget(c,d,f)}}const bt={[r.eHc]:r.lGu,[r.brA]:r.K52,[r.U3G]:r.bw0,[r.xSv]:r.Gwm,[r.lGu]:r.eHc,[r.K52]:r.brA,[r.bw0]:r.U3G,[r.Gwm]:r.xSv};function Lt(e,t){const n=new function(){let t=!1;const n=new r.IUQ;let i=null;const a=new r.IUQ(0,0,0,0);return{setMask:function(n){i===n||t||(e.colorMask(n,n,n,n),i=n)},setLocked:function(e){t=e},setClear:function(t,r,i,o,s){!0===s&&(t*=o,r*=o,i*=o),n.set(t,r,i,o),!1===a.equals(n)&&(e.clearColor(t,r,i,o),a.copy(n))},reset:function(){t=!1,i=null,a.set(-1,0,0,0)}}},i=new function(){let n=!1,i=!1,a=null,o=null,s=null;return{setReversed:function(e){if(i!==e){const n=t.get("EXT_clip_control");e?n.clipControlEXT(n.LOWER_LEFT_EXT,n.ZERO_TO_ONE_EXT):n.clipControlEXT(n.LOWER_LEFT_EXT,n.NEGATIVE_ONE_TO_ONE_EXT),i=e;const r=s;s=null,this.setClear(r)}},getReversed:function(){return i},setTest:function(t){t?V(e.DEPTH_TEST):k(e.DEPTH_TEST)},setMask:function(t){a===t||n||(e.depthMask(t),a=t)},setFunc:function(t){if(i&&(t=bt[t]),o!==t){switch(t){case r.eHc:e.depthFunc(e.NEVER);break;case r.lGu:e.depthFunc(e.ALWAYS);break;case r.brA:e.depthFunc(e.LESS);break;case r.xSv:e.depthFunc(e.LEQUAL);break;case r.U3G:e.depthFunc(e.EQUAL);break;case r.Gwm:e.depthFunc(e.GEQUAL);break;case r.K52:e.depthFunc(e.GREATER);break;case r.bw0:e.depthFunc(e.NOTEQUAL);break;default:e.depthFunc(e.LEQUAL)}o=t}},setLocked:function(e){n=e},setClear:function(t){s!==t&&(i&&(t=1-t),e.clearDepth(t),s=t)},reset:function(){n=!1,a=null,o=null,s=null,i=!1}}},a=new function(){let t=!1,n=null,r=null,i=null,a=null,o=null,s=null,l=null,c=null;return{setTest:function(n){t||(n?V(e.STENCIL_TEST):k(e.STENCIL_TEST))},setMask:function(r){n===r||t||(e.stencilMask(r),n=r)},setFunc:function(t,n,o){r===t&&i===n&&a===o||(e.stencilFunc(t,n,o),r=t,i=n,a=o)},setOp:function(t,n,r){o===t&&s===n&&l===r||(e.stencilOp(t,n,r),o=t,s=n,l=r)},setLocked:function(e){t=e},setClear:function(t){c!==t&&(e.clearStencil(t),c=t)},reset:function(){t=!1,n=null,r=null,i=null,a=null,o=null,s=null,l=null,c=null}}},o=new WeakMap,s=new WeakMap;let l={},c={},d=new WeakMap,u=[],f=null,p=!1,m=null,h=null,_=null,g=null,v=null,E=null,S=null,T=new r.Q1f(0,0,0),M=0,x=!1,R=null,A=null,C=null,b=null,L=null;const P=e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let U=!1,D=0;const w=e.getParameter(e.VERSION);-1!==w.indexOf("WebGL")?(D=parseFloat(/^WebGL (\d)/.exec(w)[1]),U=D>=1):-1!==w.indexOf("OpenGL ES")&&(D=parseFloat(/^OpenGL ES (\d)/.exec(w)[1]),U=D>=2);let I=null,y={};const N=e.getParameter(e.SCISSOR_BOX),O=e.getParameter(e.VIEWPORT),F=(new r.IUQ).fromArray(N),B=(new r.IUQ).fromArray(O);function G(t,n,r,i){const a=new Uint8Array(4),o=e.createTexture();e.bindTexture(t,o),e.texParameteri(t,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(t,e.TEXTURE_MAG_FILTER,e.NEAREST);for(let o=0;o<r;o++)t===e.TEXTURE_3D||t===e.TEXTURE_2D_ARRAY?e.texImage3D(n,0,e.RGBA,1,1,i,0,e.RGBA,e.UNSIGNED_BYTE,a):e.texImage2D(n+o,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,a);return o}const H={};function V(t){!0!==l[t]&&(e.enable(t),l[t]=!0)}function k(t){!1!==l[t]&&(e.disable(t),l[t]=!1)}H[e.TEXTURE_2D]=G(e.TEXTURE_2D,e.TEXTURE_2D,1),H[e.TEXTURE_CUBE_MAP]=G(e.TEXTURE_CUBE_MAP,e.TEXTURE_CUBE_MAP_POSITIVE_X,6),H[e.TEXTURE_2D_ARRAY]=G(e.TEXTURE_2D_ARRAY,e.TEXTURE_2D_ARRAY,1,1),H[e.TEXTURE_3D]=G(e.TEXTURE_3D,e.TEXTURE_3D,1,1),n.setClear(0,0,0,1),i.setClear(1),a.setClear(0),V(e.DEPTH_TEST),i.setFunc(r.xSv),K(!1),q(r.Vb5),V(e.CULL_FACE),X(r.XIg);const z={[r.gO9]:e.FUNC_ADD,[r.FXf]:e.FUNC_SUBTRACT,[r.nST]:e.FUNC_REVERSE_SUBTRACT};z[r.znC]=e.MIN,z[r.$ei]=e.MAX;const W={[r.ojh]:e.ZERO,[r.qad]:e.ONE,[r.f4X]:e.SRC_COLOR,[r.ie2]:e.SRC_ALPHA,[r.hgQ]:e.SRC_ALPHA_SATURATE,[r.wn6]:e.DST_COLOR,[r.hdd]:e.DST_ALPHA,[r.LiQ]:e.ONE_MINUS_SRC_COLOR,[r.OuU]:e.ONE_MINUS_SRC_ALPHA,[r.aEY]:e.ONE_MINUS_DST_COLOR,[r.Nt7]:e.ONE_MINUS_DST_ALPHA,[r.RrE]:e.CONSTANT_COLOR,[r.$Yl]:e.ONE_MINUS_CONSTANT_COLOR,[r.e0p]:e.CONSTANT_ALPHA,[r.ov9]:e.ONE_MINUS_CONSTANT_ALPHA};function X(t,n,i,a,o,s,l,c,d,u){if(t!==r.XIg){if(!1===p&&(V(e.BLEND),p=!0),t===r.bCz)o=o||n,s=s||i,l=l||a,n===h&&o===v||(e.blendEquationSeparate(z[n],z[o]),h=n,v=o),i===_&&a===g&&s===E&&l===S||(e.blendFuncSeparate(W[i],W[a],W[s],W[l]),_=i,g=a,E=s,S=l),!1!==c.equals(T)&&d===M||(e.blendColor(c.r,c.g,c.b,d),T.copy(c),M=d),m=t,x=!1;else if(t!==m||u!==x){if(h===r.gO9&&v===r.gO9||(e.blendEquation(e.FUNC_ADD),h=r.gO9,v=r.gO9),u)switch(t){case r.NTi:e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case r.EZo:e.blendFunc(e.ONE,e.ONE);break;case r.Kwu:e.blendFuncSeparate(e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ZERO,e.ONE);break;case r.EdD:e.blendFuncSeparate(e.DST_COLOR,e.ONE_MINUS_SRC_ALPHA,e.ZERO,e.ONE);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}else switch(t){case r.NTi:e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case r.EZo:e.blendFuncSeparate(e.SRC_ALPHA,e.ONE,e.ONE,e.ONE);break;case r.Kwu:console.error("THREE.WebGLState: SubtractiveBlending requires material.premultipliedAlpha = true");break;case r.EdD:console.error("THREE.WebGLState: MultiplyBlending requires material.premultipliedAlpha = true");break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}_=null,g=null,E=null,S=null,T.set(0,0,0),M=0,m=t,x=u}}else!0===p&&(k(e.BLEND),p=!1)}function K(t){R!==t&&(t?e.frontFace(e.CW):e.frontFace(e.CCW),R=t)}function q(t){t!==r.WNZ?(V(e.CULL_FACE),t!==A&&(t===r.Vb5?e.cullFace(e.BACK):t===r.Jnc?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))):k(e.CULL_FACE),A=t}function Y(t,n,r){t?(V(e.POLYGON_OFFSET_FILL),b===n&&L===r||(e.polygonOffset(n,r),b=n,L=r)):k(e.POLYGON_OFFSET_FILL)}return{buffers:{color:n,depth:i,stencil:a},enable:V,disable:k,bindFramebuffer:function(t,n){return c[t]!==n&&(e.bindFramebuffer(t,n),c[t]=n,t===e.DRAW_FRAMEBUFFER&&(c[e.FRAMEBUFFER]=n),t===e.FRAMEBUFFER&&(c[e.DRAW_FRAMEBUFFER]=n),!0)},drawBuffers:function(t,n){let r=u,i=!1;if(t){r=d.get(n),void 0===r&&(r=[],d.set(n,r));const a=t.textures;if(r.length!==a.length||r[0]!==e.COLOR_ATTACHMENT0){for(let t=0,n=a.length;t<n;t++)r[t]=e.COLOR_ATTACHMENT0+t;r.length=a.length,i=!0}}else r[0]!==e.BACK&&(r[0]=e.BACK,i=!0);i&&e.drawBuffers(r)},useProgram:function(t){return f!==t&&(e.useProgram(t),f=t,!0)},setBlending:X,setMaterial:function(t,o){t.side===r.$EB?k(e.CULL_FACE):V(e.CULL_FACE);let s=t.side===r.hsX;o&&(s=!s),K(s),t.blending===r.NTi&&!1===t.transparent?X(r.XIg):X(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.blendColor,t.blendAlpha,t.premultipliedAlpha),i.setFunc(t.depthFunc),i.setTest(t.depthTest),i.setMask(t.depthWrite),n.setMask(t.colorWrite);const l=t.stencilWrite;a.setTest(l),l&&(a.setMask(t.stencilWriteMask),a.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),a.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),Y(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),!0===t.alphaToCoverage?V(e.SAMPLE_ALPHA_TO_COVERAGE):k(e.SAMPLE_ALPHA_TO_COVERAGE)},setFlipSided:K,setCullFace:q,setLineWidth:function(t){t!==C&&(U&&e.lineWidth(t),C=t)},setPolygonOffset:Y,setScissorTest:function(t){t?V(e.SCISSOR_TEST):k(e.SCISSOR_TEST)},activeTexture:function(t){void 0===t&&(t=e.TEXTURE0+P-1),I!==t&&(e.activeTexture(t),I=t)},bindTexture:function(t,n,r){void 0===r&&(r=null===I?e.TEXTURE0+P-1:I);let i=y[r];void 0===i&&(i={type:void 0,texture:void 0},y[r]=i),i.type===t&&i.texture===n||(I!==r&&(e.activeTexture(r),I=r),e.bindTexture(t,n||H[t]),i.type=t,i.texture=n)},unbindTexture:function(){const t=y[I];void 0!==t&&void 0!==t.type&&(e.bindTexture(t.type,null),t.type=void 0,t.texture=void 0)},compressedTexImage2D:function(){try{e.compressedTexImage2D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}},compressedTexImage3D:function(){try{e.compressedTexImage3D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage2D:function(){try{e.texImage2D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage3D:function(){try{e.texImage3D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}},updateUBOMapping:function(t,n){let r=s.get(n);void 0===r&&(r=new WeakMap,s.set(n,r));let i=r.get(t);void 0===i&&(i=e.getUniformBlockIndex(n,t.name),r.set(t,i))},uniformBlockBinding:function(t,n){const r=s.get(n).get(t);o.get(n)!==r&&(e.uniformBlockBinding(n,r,t.__bindingPointIndex),o.set(n,r))},texStorage2D:function(){try{e.texStorage2D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texStorage3D:function(){try{e.texStorage3D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texSubImage2D:function(){try{e.texSubImage2D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texSubImage3D:function(){try{e.texSubImage3D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}},compressedTexSubImage2D:function(){try{e.compressedTexSubImage2D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}},compressedTexSubImage3D:function(){try{e.compressedTexSubImage3D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}},scissor:function(t){!1===F.equals(t)&&(e.scissor(t.x,t.y,t.z,t.w),F.copy(t))},viewport:function(t){!1===B.equals(t)&&(e.viewport(t.x,t.y,t.z,t.w),B.copy(t))},reset:function(){e.disable(e.BLEND),e.disable(e.CULL_FACE),e.disable(e.DEPTH_TEST),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SCISSOR_TEST),e.disable(e.STENCIL_TEST),e.disable(e.SAMPLE_ALPHA_TO_COVERAGE),e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ONE,e.ZERO),e.blendFuncSeparate(e.ONE,e.ZERO,e.ONE,e.ZERO),e.blendColor(0,0,0,0),e.colorMask(!0,!0,!0,!0),e.clearColor(0,0,0,0),e.depthMask(!0),e.depthFunc(e.LESS),i.setReversed(!1),e.clearDepth(1),e.stencilMask(4294967295),e.stencilFunc(e.ALWAYS,0,4294967295),e.stencilOp(e.KEEP,e.KEEP,e.KEEP),e.clearStencil(0),e.cullFace(e.BACK),e.frontFace(e.CCW),e.polygonOffset(0,0),e.activeTexture(e.TEXTURE0),e.bindFramebuffer(e.FRAMEBUFFER,null),e.bindFramebuffer(e.DRAW_FRAMEBUFFER,null),e.bindFramebuffer(e.READ_FRAMEBUFFER,null),e.useProgram(null),e.lineWidth(1),e.scissor(0,0,e.canvas.width,e.canvas.height),e.viewport(0,0,e.canvas.width,e.canvas.height),l={},I=null,y={},c={},d=new WeakMap,u=[],f=null,p=!1,m=null,h=null,_=null,g=null,v=null,E=null,S=null,T=new r.Q1f(0,0,0),M=0,x=!1,R=null,A=null,C=null,b=null,L=null,F.set(0,0,e.canvas.width,e.canvas.height),B.set(0,0,e.canvas.width,e.canvas.height),n.reset(),i.reset(),a.reset()}}}function Pt(e,t,n,i,a,o,s){const l=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,c="undefined"!=typeof navigator&&/OculusBrowser/g.test(navigator.userAgent),d=new r.I9Y,u=new WeakMap;let f;const p=new WeakMap;let m=!1;try{m="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(e){}function h(e,t){return m?new OffscreenCanvas(e,t):(0,r.qq$)("canvas")}function _(e,t,n){let r=1;const i=W(e);if((i.width>n||i.height>n)&&(r=n/Math.max(i.width,i.height)),r<1){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap||"undefined"!=typeof VideoFrame&&e instanceof VideoFrame){const n=Math.floor(r*i.width),a=Math.floor(r*i.height);void 0===f&&(f=h(n,a));const o=t?h(n,a):f;return o.width=n,o.height=a,o.getContext("2d").drawImage(e,0,0,n,a),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+i.width+"x"+i.height+") to ("+n+"x"+a+")."),o}return"data"in e&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+i.width+"x"+i.height+")."),e}return e}function g(e){return e.generateMipmaps}function v(t){e.generateMipmap(t)}function E(t){return t.isWebGLCubeRenderTarget?e.TEXTURE_CUBE_MAP:t.isWebGL3DRenderTarget?e.TEXTURE_3D:t.isWebGLArrayRenderTarget||t.isCompressedArrayTexture?e.TEXTURE_2D_ARRAY:e.TEXTURE_2D}function S(n,i,a,o,s=!1){if(null!==n){if(void 0!==e[n])return e[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let l=i;if(i===e.RED&&(a===e.FLOAT&&(l=e.R32F),a===e.HALF_FLOAT&&(l=e.R16F),a===e.UNSIGNED_BYTE&&(l=e.R8)),i===e.RED_INTEGER&&(a===e.UNSIGNED_BYTE&&(l=e.R8UI),a===e.UNSIGNED_SHORT&&(l=e.R16UI),a===e.UNSIGNED_INT&&(l=e.R32UI),a===e.BYTE&&(l=e.R8I),a===e.SHORT&&(l=e.R16I),a===e.INT&&(l=e.R32I)),i===e.RG&&(a===e.FLOAT&&(l=e.RG32F),a===e.HALF_FLOAT&&(l=e.RG16F),a===e.UNSIGNED_BYTE&&(l=e.RG8)),i===e.RG_INTEGER&&(a===e.UNSIGNED_BYTE&&(l=e.RG8UI),a===e.UNSIGNED_SHORT&&(l=e.RG16UI),a===e.UNSIGNED_INT&&(l=e.RG32UI),a===e.BYTE&&(l=e.RG8I),a===e.SHORT&&(l=e.RG16I),a===e.INT&&(l=e.RG32I)),i===e.RGB_INTEGER&&(a===e.UNSIGNED_BYTE&&(l=e.RGB8UI),a===e.UNSIGNED_SHORT&&(l=e.RGB16UI),a===e.UNSIGNED_INT&&(l=e.RGB32UI),a===e.BYTE&&(l=e.RGB8I),a===e.SHORT&&(l=e.RGB16I),a===e.INT&&(l=e.RGB32I)),i===e.RGBA_INTEGER&&(a===e.UNSIGNED_BYTE&&(l=e.RGBA8UI),a===e.UNSIGNED_SHORT&&(l=e.RGBA16UI),a===e.UNSIGNED_INT&&(l=e.RGBA32UI),a===e.BYTE&&(l=e.RGBA8I),a===e.SHORT&&(l=e.RGBA16I),a===e.INT&&(l=e.RGBA32I)),i===e.RGB&&(a===e.UNSIGNED_INT_5_9_9_9_REV&&(l=e.RGB9_E5),a===e.UNSIGNED_INT_10F_11F_11F_REV&&(l=e.R11F_G11F_B10F)),i===e.RGBA){const t=s?r.VxR:r.ppV.getTransfer(o);a===e.FLOAT&&(l=e.RGBA32F),a===e.HALF_FLOAT&&(l=e.RGBA16F),a===e.UNSIGNED_BYTE&&(l=t===r.KLL?e.SRGB8_ALPHA8:e.RGBA8),a===e.UNSIGNED_SHORT_4_4_4_4&&(l=e.RGBA4),a===e.UNSIGNED_SHORT_5_5_5_1&&(l=e.RGB5_A1)}return l!==e.R16F&&l!==e.R32F&&l!==e.RG16F&&l!==e.RG32F&&l!==e.RGBA16F&&l!==e.RGBA32F||t.get("EXT_color_buffer_float"),l}function T(t,n){let i;return t?null===n||n===r.bkx||n===r.V3x?i=e.DEPTH24_STENCIL8:n===r.RQf?i=e.DEPTH32F_STENCIL8:n===r.cHt&&(i=e.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):null===n||n===r.bkx||n===r.V3x?i=e.DEPTH_COMPONENT24:n===r.RQf?i=e.DEPTH_COMPONENT32F:n===r.cHt&&(i=e.DEPTH_COMPONENT16),i}function M(e,t){return!0===g(e)||e.isFramebufferTexture&&e.minFilter!==r.hxR&&e.minFilter!==r.k6q?Math.log2(Math.max(t.width,t.height))+1:void 0!==e.mipmaps&&e.mipmaps.length>0?e.mipmaps.length:e.isCompressedTexture&&Array.isArray(e.image)?t.mipmaps.length:1}function x(e){const t=e.target;t.removeEventListener("dispose",x),function(e){const t=i.get(e);if(void 0===t.__webglInit)return;const n=e.source,r=p.get(n);if(r){const i=r[t.__cacheKey];i.usedTimes--,0===i.usedTimes&&A(e),0===Object.keys(r).length&&p.delete(n)}i.remove(e)}(t),t.isVideoTexture&&u.delete(t)}function R(t){const n=t.target;n.removeEventListener("dispose",R),function(t){const n=i.get(t);if(t.depthTexture&&(t.depthTexture.dispose(),i.remove(t.depthTexture)),t.isWebGLCubeRenderTarget)for(let t=0;t<6;t++){if(Array.isArray(n.__webglFramebuffer[t]))for(let r=0;r<n.__webglFramebuffer[t].length;r++)e.deleteFramebuffer(n.__webglFramebuffer[t][r]);else e.deleteFramebuffer(n.__webglFramebuffer[t]);n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer[t])}else{if(Array.isArray(n.__webglFramebuffer))for(let t=0;t<n.__webglFramebuffer.length;t++)e.deleteFramebuffer(n.__webglFramebuffer[t]);else e.deleteFramebuffer(n.__webglFramebuffer);if(n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer),n.__webglMultisampledFramebuffer&&e.deleteFramebuffer(n.__webglMultisampledFramebuffer),n.__webglColorRenderbuffer)for(let t=0;t<n.__webglColorRenderbuffer.length;t++)n.__webglColorRenderbuffer[t]&&e.deleteRenderbuffer(n.__webglColorRenderbuffer[t]);n.__webglDepthRenderbuffer&&e.deleteRenderbuffer(n.__webglDepthRenderbuffer)}const r=t.textures;for(let t=0,n=r.length;t<n;t++){const n=i.get(r[t]);n.__webglTexture&&(e.deleteTexture(n.__webglTexture),s.memory.textures--),i.remove(r[t])}i.remove(t)}(n)}function A(t){const n=i.get(t);e.deleteTexture(n.__webglTexture);const r=t.source;delete p.get(r)[n.__cacheKey],s.memory.textures--}let C=0;function b(t,r){const a=i.get(t);if(t.isVideoTexture&&function(e){const t=s.render.frame;u.get(e)!==t&&(u.set(e,t),e.update())}(t),!1===t.isRenderTargetTexture&&!0!==t.isExternalTexture&&t.version>0&&a.__version!==t.version){const e=t.image;if(null===e)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else{if(!1!==e.complete)return void y(a,t,r);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}else t.isExternalTexture&&(a.__webglTexture=t.sourceTexture?t.sourceTexture:null);n.bindTexture(e.TEXTURE_2D,a.__webglTexture,e.TEXTURE0+r)}const L={[r.GJx]:e.REPEAT,[r.ghU]:e.CLAMP_TO_EDGE,[r.kTW]:e.MIRRORED_REPEAT},P={[r.hxR]:e.NEAREST,[r.pHI]:e.NEAREST_MIPMAP_NEAREST,[r.Cfg]:e.NEAREST_MIPMAP_LINEAR,[r.k6q]:e.LINEAR,[r.kRr]:e.LINEAR_MIPMAP_NEAREST,[r.$_I]:e.LINEAR_MIPMAP_LINEAR},U={[r.amv]:e.NEVER,[r.FFZ]:e.ALWAYS,[r.vim]:e.LESS,[r.TiK]:e.LEQUAL,[r.kO0]:e.EQUAL,[r.gWB]:e.GEQUAL,[r.eoi]:e.GREATER,[r.jzd]:e.NOTEQUAL};function D(n,o){if(o.type!==r.RQf||!1!==t.has("OES_texture_float_linear")||o.magFilter!==r.k6q&&o.magFilter!==r.kRr&&o.magFilter!==r.Cfg&&o.magFilter!==r.$_I&&o.minFilter!==r.k6q&&o.minFilter!==r.kRr&&o.minFilter!==r.Cfg&&o.minFilter!==r.$_I||console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),e.texParameteri(n,e.TEXTURE_WRAP_S,L[o.wrapS]),e.texParameteri(n,e.TEXTURE_WRAP_T,L[o.wrapT]),n!==e.TEXTURE_3D&&n!==e.TEXTURE_2D_ARRAY||e.texParameteri(n,e.TEXTURE_WRAP_R,L[o.wrapR]),e.texParameteri(n,e.TEXTURE_MAG_FILTER,P[o.magFilter]),e.texParameteri(n,e.TEXTURE_MIN_FILTER,P[o.minFilter]),o.compareFunction&&(e.texParameteri(n,e.TEXTURE_COMPARE_MODE,e.COMPARE_REF_TO_TEXTURE),e.texParameteri(n,e.TEXTURE_COMPARE_FUNC,U[o.compareFunction])),!0===t.has("EXT_texture_filter_anisotropic")){if(o.magFilter===r.hxR)return;if(o.minFilter!==r.Cfg&&o.minFilter!==r.$_I)return;if(o.type===r.RQf&&!1===t.has("OES_texture_float_linear"))return;if(o.anisotropy>1||i.get(o).__currentAnisotropy){const r=t.get("EXT_texture_filter_anisotropic");e.texParameterf(n,r.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(o.anisotropy,a.getMaxAnisotropy())),i.get(o).__currentAnisotropy=o.anisotropy}}}function w(t,n){let r=!1;void 0===t.__webglInit&&(t.__webglInit=!0,n.addEventListener("dispose",x));const i=n.source;let a=p.get(i);void 0===a&&(a={},p.set(i,a));const o=function(e){const t=[];return t.push(e.wrapS),t.push(e.wrapT),t.push(e.wrapR||0),t.push(e.magFilter),t.push(e.minFilter),t.push(e.anisotropy),t.push(e.internalFormat),t.push(e.format),t.push(e.type),t.push(e.generateMipmaps),t.push(e.premultiplyAlpha),t.push(e.flipY),t.push(e.unpackAlignment),t.push(e.colorSpace),t.join()}(n);if(o!==t.__cacheKey){void 0===a[o]&&(a[o]={texture:e.createTexture(),usedTimes:0},s.memory.textures++,r=!0),a[o].usedTimes++;const i=a[t.__cacheKey];void 0!==i&&(a[t.__cacheKey].usedTimes--,0===i.usedTimes&&A(n)),t.__cacheKey=o,t.__webglTexture=a[o].texture}return r}function I(e,t,n){return Math.floor(Math.floor(e/n)/t)}function y(t,s,l){let c=e.TEXTURE_2D;(s.isDataArrayTexture||s.isCompressedArrayTexture)&&(c=e.TEXTURE_2D_ARRAY),s.isData3DTexture&&(c=e.TEXTURE_3D);const d=w(t,s),u=s.source;n.bindTexture(c,t.__webglTexture,e.TEXTURE0+l);const f=i.get(u);if(u.version!==f.__version||!0===d){n.activeTexture(e.TEXTURE0+l);const t=r.ppV.getPrimaries(r.ppV.workingColorSpace),i=s.colorSpace===r.jf0?null:r.ppV.getPrimaries(s.colorSpace),p=s.colorSpace===r.jf0||t===i?e.NONE:e.BROWSER_DEFAULT_WEBGL;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,s.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,s.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,s.unpackAlignment),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,p);let m=_(s.image,!1,a.maxTextureSize);m=z(s,m);const h=o.convert(s.format,s.colorSpace),E=o.convert(s.type);let x,R=S(s.internalFormat,h,E,s.colorSpace,s.isVideoTexture);D(c,s);const A=s.mipmaps,C=!0!==s.isVideoTexture,b=void 0===f.__version||!0===d,L=u.dataReady,P=M(s,m);if(s.isDepthTexture)R=T(s.format===r.dcC,s.type),b&&(C?n.texStorage2D(e.TEXTURE_2D,1,R,m.width,m.height):n.texImage2D(e.TEXTURE_2D,0,R,m.width,m.height,0,h,E,null));else if(s.isDataTexture)if(A.length>0){C&&b&&n.texStorage2D(e.TEXTURE_2D,P,R,A[0].width,A[0].height);for(let t=0,r=A.length;t<r;t++)x=A[t],C?L&&n.texSubImage2D(e.TEXTURE_2D,t,0,0,x.width,x.height,h,E,x.data):n.texImage2D(e.TEXTURE_2D,t,R,x.width,x.height,0,h,E,x.data);s.generateMipmaps=!1}else C?(b&&n.texStorage2D(e.TEXTURE_2D,P,R,m.width,m.height),L&&function(t,r,i,a){const o=t.updateRanges;if(0===o.length)n.texSubImage2D(e.TEXTURE_2D,0,0,0,r.width,r.height,i,a,r.data);else{o.sort((e,t)=>e.start-t.start);let s=0;for(let e=1;e<o.length;e++){const t=o[s],n=o[e],i=t.start+t.count,a=I(n.start,r.width,4),l=I(t.start,r.width,4);n.start<=i+1&&a===l&&I(n.start+n.count-1,r.width,4)===a?t.count=Math.max(t.count,n.start+n.count-t.start):(++s,o[s]=n)}o.length=s+1;const l=e.getParameter(e.UNPACK_ROW_LENGTH),c=e.getParameter(e.UNPACK_SKIP_PIXELS),d=e.getParameter(e.UNPACK_SKIP_ROWS);e.pixelStorei(e.UNPACK_ROW_LENGTH,r.width);for(let t=0,s=o.length;t<s;t++){const s=o[t],l=Math.floor(s.start/4),c=Math.ceil(s.count/4),d=l%r.width,u=Math.floor(l/r.width),f=c,p=1;e.pixelStorei(e.UNPACK_SKIP_PIXELS,d),e.pixelStorei(e.UNPACK_SKIP_ROWS,u),n.texSubImage2D(e.TEXTURE_2D,0,d,u,f,p,i,a,r.data)}t.clearUpdateRanges(),e.pixelStorei(e.UNPACK_ROW_LENGTH,l),e.pixelStorei(e.UNPACK_SKIP_PIXELS,c),e.pixelStorei(e.UNPACK_SKIP_ROWS,d)}}(s,m,h,E)):n.texImage2D(e.TEXTURE_2D,0,R,m.width,m.height,0,h,E,m.data);else if(s.isCompressedTexture)if(s.isCompressedArrayTexture){C&&b&&n.texStorage3D(e.TEXTURE_2D_ARRAY,P,R,A[0].width,A[0].height,m.depth);for(let t=0,i=A.length;t<i;t++)if(x=A[t],s.format!==r.GWd)if(null!==h)if(C){if(L)if(s.layerUpdates.size>0){const i=(0,r.Nex)(x.width,x.height,s.format,s.type);for(const r of s.layerUpdates){const a=x.data.subarray(r*i/x.data.BYTES_PER_ELEMENT,(r+1)*i/x.data.BYTES_PER_ELEMENT);n.compressedTexSubImage3D(e.TEXTURE_2D_ARRAY,t,0,0,r,x.width,x.height,1,h,a)}s.clearLayerUpdates()}else n.compressedTexSubImage3D(e.TEXTURE_2D_ARRAY,t,0,0,0,x.width,x.height,m.depth,h,x.data)}else n.compressedTexImage3D(e.TEXTURE_2D_ARRAY,t,R,x.width,x.height,m.depth,0,x.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else C?L&&n.texSubImage3D(e.TEXTURE_2D_ARRAY,t,0,0,0,x.width,x.height,m.depth,h,E,x.data):n.texImage3D(e.TEXTURE_2D_ARRAY,t,R,x.width,x.height,m.depth,0,h,E,x.data)}else{C&&b&&n.texStorage2D(e.TEXTURE_2D,P,R,A[0].width,A[0].height);for(let t=0,i=A.length;t<i;t++)x=A[t],s.format!==r.GWd?null!==h?C?L&&n.compressedTexSubImage2D(e.TEXTURE_2D,t,0,0,x.width,x.height,h,x.data):n.compressedTexImage2D(e.TEXTURE_2D,t,R,x.width,x.height,0,x.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):C?L&&n.texSubImage2D(e.TEXTURE_2D,t,0,0,x.width,x.height,h,E,x.data):n.texImage2D(e.TEXTURE_2D,t,R,x.width,x.height,0,h,E,x.data)}else if(s.isDataArrayTexture)if(C){if(b&&n.texStorage3D(e.TEXTURE_2D_ARRAY,P,R,m.width,m.height,m.depth),L)if(s.layerUpdates.size>0){const t=(0,r.Nex)(m.width,m.height,s.format,s.type);for(const r of s.layerUpdates){const i=m.data.subarray(r*t/m.data.BYTES_PER_ELEMENT,(r+1)*t/m.data.BYTES_PER_ELEMENT);n.texSubImage3D(e.TEXTURE_2D_ARRAY,0,0,0,r,m.width,m.height,1,h,E,i)}s.clearLayerUpdates()}else n.texSubImage3D(e.TEXTURE_2D_ARRAY,0,0,0,0,m.width,m.height,m.depth,h,E,m.data)}else n.texImage3D(e.TEXTURE_2D_ARRAY,0,R,m.width,m.height,m.depth,0,h,E,m.data);else if(s.isData3DTexture)C?(b&&n.texStorage3D(e.TEXTURE_3D,P,R,m.width,m.height,m.depth),L&&n.texSubImage3D(e.TEXTURE_3D,0,0,0,0,m.width,m.height,m.depth,h,E,m.data)):n.texImage3D(e.TEXTURE_3D,0,R,m.width,m.height,m.depth,0,h,E,m.data);else if(s.isFramebufferTexture){if(b)if(C)n.texStorage2D(e.TEXTURE_2D,P,R,m.width,m.height);else{let t=m.width,r=m.height;for(let i=0;i<P;i++)n.texImage2D(e.TEXTURE_2D,i,R,t,r,0,h,E,null),t>>=1,r>>=1}}else if(A.length>0){if(C&&b){const t=W(A[0]);n.texStorage2D(e.TEXTURE_2D,P,R,t.width,t.height)}for(let t=0,r=A.length;t<r;t++)x=A[t],C?L&&n.texSubImage2D(e.TEXTURE_2D,t,0,0,h,E,x):n.texImage2D(e.TEXTURE_2D,t,R,h,E,x);s.generateMipmaps=!1}else if(C){if(b){const t=W(m);n.texStorage2D(e.TEXTURE_2D,P,R,t.width,t.height)}L&&n.texSubImage2D(e.TEXTURE_2D,0,0,0,h,E,m)}else n.texImage2D(e.TEXTURE_2D,0,R,h,E,m);g(s)&&v(c),f.__version=u.version,s.onUpdate&&s.onUpdate(s)}t.__version=s.version}function N(t,r,a,s,c,d){const u=o.convert(a.format,a.colorSpace),f=o.convert(a.type),p=S(a.internalFormat,u,f,a.colorSpace),m=i.get(r),h=i.get(a);if(h.__renderTarget=r,!m.__hasExternalTextures){const t=Math.max(1,r.width>>d),i=Math.max(1,r.height>>d);c===e.TEXTURE_3D||c===e.TEXTURE_2D_ARRAY?n.texImage3D(c,d,p,t,i,r.depth,0,u,f,null):n.texImage2D(c,d,p,t,i,0,u,f,null)}n.bindFramebuffer(e.FRAMEBUFFER,t),k(r)?l.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,s,c,h.__webglTexture,0,V(r)):(c===e.TEXTURE_2D||c>=e.TEXTURE_CUBE_MAP_POSITIVE_X&&c<=e.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&e.framebufferTexture2D(e.FRAMEBUFFER,s,c,h.__webglTexture,d),n.bindFramebuffer(e.FRAMEBUFFER,null)}function O(t,n,r){if(e.bindRenderbuffer(e.RENDERBUFFER,t),n.depthBuffer){const i=n.depthTexture,a=i&&i.isDepthTexture?i.type:null,o=T(n.stencilBuffer,a),s=n.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,c=V(n);k(n)?l.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,c,o,n.width,n.height):r?e.renderbufferStorageMultisample(e.RENDERBUFFER,c,o,n.width,n.height):e.renderbufferStorage(e.RENDERBUFFER,o,n.width,n.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,s,e.RENDERBUFFER,t)}else{const t=n.textures;for(let i=0;i<t.length;i++){const a=t[i],s=o.convert(a.format,a.colorSpace),c=o.convert(a.type),d=S(a.internalFormat,s,c,a.colorSpace),u=V(n);r&&!1===k(n)?e.renderbufferStorageMultisample(e.RENDERBUFFER,u,d,n.width,n.height):k(n)?l.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,u,d,n.width,n.height):e.renderbufferStorage(e.RENDERBUFFER,d,n.width,n.height)}}e.bindRenderbuffer(e.RENDERBUFFER,null)}function F(t,a){if(a&&a.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(n.bindFramebuffer(e.FRAMEBUFFER,t),!a.depthTexture||!a.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const o=i.get(a.depthTexture);o.__renderTarget=a,o.__webglTexture&&a.depthTexture.image.width===a.width&&a.depthTexture.image.height===a.height||(a.depthTexture.image.width=a.width,a.depthTexture.image.height=a.height,a.depthTexture.needsUpdate=!0),b(a.depthTexture,0);const s=o.__webglTexture,c=V(a);if(a.depthTexture.format===r.zdS)k(a)?l.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,s,0,c):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,s,0);else{if(a.depthTexture.format!==r.dcC)throw new Error("Unknown depthTexture format");k(a)?l.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,s,0,c):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,s,0)}}function B(t){const r=i.get(t),a=!0===t.isWebGLCubeRenderTarget;if(r.__boundDepthTexture!==t.depthTexture){const e=t.depthTexture;if(r.__depthDisposeCallback&&r.__depthDisposeCallback(),e){const t=()=>{delete r.__boundDepthTexture,delete r.__depthDisposeCallback,e.removeEventListener("dispose",t)};e.addEventListener("dispose",t),r.__depthDisposeCallback=t}r.__boundDepthTexture=e}if(t.depthTexture&&!r.__autoAllocateDepthBuffer){if(a)throw new Error("target.depthTexture not supported in Cube render targets");const e=t.texture.mipmaps;e&&e.length>0?F(r.__webglFramebuffer[0],t):F(r.__webglFramebuffer,t)}else if(a){r.__webglDepthbuffer=[];for(let i=0;i<6;i++)if(n.bindFramebuffer(e.FRAMEBUFFER,r.__webglFramebuffer[i]),void 0===r.__webglDepthbuffer[i])r.__webglDepthbuffer[i]=e.createRenderbuffer(),O(r.__webglDepthbuffer[i],t,!1);else{const n=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,a=r.__webglDepthbuffer[i];e.bindRenderbuffer(e.RENDERBUFFER,a),e.framebufferRenderbuffer(e.FRAMEBUFFER,n,e.RENDERBUFFER,a)}}else{const i=t.texture.mipmaps;if(i&&i.length>0?n.bindFramebuffer(e.FRAMEBUFFER,r.__webglFramebuffer[0]):n.bindFramebuffer(e.FRAMEBUFFER,r.__webglFramebuffer),void 0===r.__webglDepthbuffer)r.__webglDepthbuffer=e.createRenderbuffer(),O(r.__webglDepthbuffer,t,!1);else{const n=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,i=r.__webglDepthbuffer;e.bindRenderbuffer(e.RENDERBUFFER,i),e.framebufferRenderbuffer(e.FRAMEBUFFER,n,e.RENDERBUFFER,i)}}n.bindFramebuffer(e.FRAMEBUFFER,null)}const G=[],H=[];function V(e){return Math.min(a.maxSamples,e.samples)}function k(e){const n=i.get(e);return e.samples>0&&!0===t.has("WEBGL_multisampled_render_to_texture")&&!1!==n.__useRenderToTexture}function z(e,t){const n=e.colorSpace,i=e.format,a=e.type;return!0===e.isCompressedTexture||!0===e.isVideoTexture||n!==r.Zr2&&n!==r.jf0&&(r.ppV.getTransfer(n)===r.KLL?i===r.GWd&&a===r.OUM||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",n)),t}function W(e){return"undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement?(d.width=e.naturalWidth||e.width,d.height=e.naturalHeight||e.height):"undefined"!=typeof VideoFrame&&e instanceof VideoFrame?(d.width=e.displayWidth,d.height=e.displayHeight):(d.width=e.width,d.height=e.height),d}this.allocateTextureUnit=function(){const e=C;return e>=a.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+a.maxTextures),C+=1,e},this.resetTextureUnits=function(){C=0},this.setTexture2D=b,this.setTexture2DArray=function(t,r){const a=i.get(t);!1===t.isRenderTargetTexture&&t.version>0&&a.__version!==t.version?y(a,t,r):n.bindTexture(e.TEXTURE_2D_ARRAY,a.__webglTexture,e.TEXTURE0+r)},this.setTexture3D=function(t,r){const a=i.get(t);!1===t.isRenderTargetTexture&&t.version>0&&a.__version!==t.version?y(a,t,r):n.bindTexture(e.TEXTURE_3D,a.__webglTexture,e.TEXTURE0+r)},this.setTextureCube=function(t,s){const l=i.get(t);t.version>0&&l.__version!==t.version?function(t,s,l){if(6!==s.image.length)return;const c=w(t,s),d=s.source;n.bindTexture(e.TEXTURE_CUBE_MAP,t.__webglTexture,e.TEXTURE0+l);const u=i.get(d);if(d.version!==u.__version||!0===c){n.activeTexture(e.TEXTURE0+l);const t=r.ppV.getPrimaries(r.ppV.workingColorSpace),i=s.colorSpace===r.jf0?null:r.ppV.getPrimaries(s.colorSpace),f=s.colorSpace===r.jf0||t===i?e.NONE:e.BROWSER_DEFAULT_WEBGL;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,s.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,s.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,s.unpackAlignment),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,f);const p=s.isCompressedTexture||s.image[0].isCompressedTexture,m=s.image[0]&&s.image[0].isDataTexture,h=[];for(let e=0;e<6;e++)h[e]=p||m?m?s.image[e].image:s.image[e]:_(s.image[e],!0,a.maxCubemapSize),h[e]=z(s,h[e]);const E=h[0],T=o.convert(s.format,s.colorSpace),x=o.convert(s.type),R=S(s.internalFormat,T,x,s.colorSpace),A=!0!==s.isVideoTexture,C=void 0===u.__version||!0===c,b=d.dataReady;let L,P=M(s,E);if(D(e.TEXTURE_CUBE_MAP,s),p){A&&C&&n.texStorage2D(e.TEXTURE_CUBE_MAP,P,R,E.width,E.height);for(let t=0;t<6;t++){L=h[t].mipmaps;for(let i=0;i<L.length;i++){const a=L[i];s.format!==r.GWd?null!==T?A?b&&n.compressedTexSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i,0,0,a.width,a.height,T,a.data):n.compressedTexImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i,R,a.width,a.height,0,a.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):A?b&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i,0,0,a.width,a.height,T,x,a.data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i,R,a.width,a.height,0,T,x,a.data)}}}else{if(L=s.mipmaps,A&&C){L.length>0&&P++;const t=W(h[0]);n.texStorage2D(e.TEXTURE_CUBE_MAP,P,R,t.width,t.height)}for(let t=0;t<6;t++)if(m){A?b&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,h[t].width,h[t].height,T,x,h[t].data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,R,h[t].width,h[t].height,0,T,x,h[t].data);for(let r=0;r<L.length;r++){const i=L[r].image[t].image;A?b&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r+1,0,0,i.width,i.height,T,x,i.data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r+1,R,i.width,i.height,0,T,x,i.data)}}else{A?b&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,T,x,h[t]):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,R,T,x,h[t]);for(let r=0;r<L.length;r++){const i=L[r];A?b&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r+1,0,0,T,x,i.image[t]):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r+1,R,T,x,i.image[t])}}}g(s)&&v(e.TEXTURE_CUBE_MAP),u.__version=d.version,s.onUpdate&&s.onUpdate(s)}t.__version=s.version}(l,t,s):n.bindTexture(e.TEXTURE_CUBE_MAP,l.__webglTexture,e.TEXTURE0+s)},this.rebindTextures=function(t,n,r){const a=i.get(t);void 0!==n&&N(a.__webglFramebuffer,t,t.texture,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,0),void 0!==r&&B(t)},this.setupRenderTarget=function(t){const r=t.texture,a=i.get(t),l=i.get(r);t.addEventListener("dispose",R);const c=t.textures,d=!0===t.isWebGLCubeRenderTarget,u=c.length>1;if(u||(void 0===l.__webglTexture&&(l.__webglTexture=e.createTexture()),l.__version=r.version,s.memory.textures++),d){a.__webglFramebuffer=[];for(let t=0;t<6;t++)if(r.mipmaps&&r.mipmaps.length>0){a.__webglFramebuffer[t]=[];for(let n=0;n<r.mipmaps.length;n++)a.__webglFramebuffer[t][n]=e.createFramebuffer()}else a.__webglFramebuffer[t]=e.createFramebuffer()}else{if(r.mipmaps&&r.mipmaps.length>0){a.__webglFramebuffer=[];for(let t=0;t<r.mipmaps.length;t++)a.__webglFramebuffer[t]=e.createFramebuffer()}else a.__webglFramebuffer=e.createFramebuffer();if(u)for(let t=0,n=c.length;t<n;t++){const n=i.get(c[t]);void 0===n.__webglTexture&&(n.__webglTexture=e.createTexture(),s.memory.textures++)}if(t.samples>0&&!1===k(t)){a.__webglMultisampledFramebuffer=e.createFramebuffer(),a.__webglColorRenderbuffer=[],n.bindFramebuffer(e.FRAMEBUFFER,a.__webglMultisampledFramebuffer);for(let n=0;n<c.length;n++){const r=c[n];a.__webglColorRenderbuffer[n]=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,a.__webglColorRenderbuffer[n]);const i=o.convert(r.format,r.colorSpace),s=o.convert(r.type),l=S(r.internalFormat,i,s,r.colorSpace,!0===t.isXRRenderTarget),d=V(t);e.renderbufferStorageMultisample(e.RENDERBUFFER,d,l,t.width,t.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+n,e.RENDERBUFFER,a.__webglColorRenderbuffer[n])}e.bindRenderbuffer(e.RENDERBUFFER,null),t.depthBuffer&&(a.__webglDepthRenderbuffer=e.createRenderbuffer(),O(a.__webglDepthRenderbuffer,t,!0)),n.bindFramebuffer(e.FRAMEBUFFER,null)}}if(d){n.bindTexture(e.TEXTURE_CUBE_MAP,l.__webglTexture),D(e.TEXTURE_CUBE_MAP,r);for(let n=0;n<6;n++)if(r.mipmaps&&r.mipmaps.length>0)for(let i=0;i<r.mipmaps.length;i++)N(a.__webglFramebuffer[n][i],t,r,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+n,i);else N(a.__webglFramebuffer[n],t,r,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+n,0);g(r)&&v(e.TEXTURE_CUBE_MAP),n.unbindTexture()}else if(u){for(let r=0,o=c.length;r<o;r++){const o=c[r],s=i.get(o);let l=e.TEXTURE_2D;(t.isWebGL3DRenderTarget||t.isWebGLArrayRenderTarget)&&(l=t.isWebGL3DRenderTarget?e.TEXTURE_3D:e.TEXTURE_2D_ARRAY),n.bindTexture(l,s.__webglTexture),D(l,o),N(a.__webglFramebuffer,t,o,e.COLOR_ATTACHMENT0+r,l,0),g(o)&&v(l)}n.unbindTexture()}else{let i=e.TEXTURE_2D;if((t.isWebGL3DRenderTarget||t.isWebGLArrayRenderTarget)&&(i=t.isWebGL3DRenderTarget?e.TEXTURE_3D:e.TEXTURE_2D_ARRAY),n.bindTexture(i,l.__webglTexture),D(i,r),r.mipmaps&&r.mipmaps.length>0)for(let n=0;n<r.mipmaps.length;n++)N(a.__webglFramebuffer[n],t,r,e.COLOR_ATTACHMENT0,i,n);else N(a.__webglFramebuffer,t,r,e.COLOR_ATTACHMENT0,i,0);g(r)&&v(i),n.unbindTexture()}t.depthBuffer&&B(t)},this.updateRenderTargetMipmap=function(e){const t=e.textures;for(let r=0,a=t.length;r<a;r++){const a=t[r];if(g(a)){const t=E(e),r=i.get(a).__webglTexture;n.bindTexture(t,r),v(t),n.unbindTexture()}}},this.updateMultisampleRenderTarget=function(t){if(t.samples>0)if(!1===k(t)){const r=t.textures,a=t.width,o=t.height;let s=e.COLOR_BUFFER_BIT;const l=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,d=i.get(t),u=r.length>1;if(u)for(let t=0;t<r.length;t++)n.bindFramebuffer(e.FRAMEBUFFER,d.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,null),n.bindFramebuffer(e.FRAMEBUFFER,d.__webglFramebuffer),e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,null,0);n.bindFramebuffer(e.READ_FRAMEBUFFER,d.__webglMultisampledFramebuffer);const f=t.texture.mipmaps;f&&f.length>0?n.bindFramebuffer(e.DRAW_FRAMEBUFFER,d.__webglFramebuffer[0]):n.bindFramebuffer(e.DRAW_FRAMEBUFFER,d.__webglFramebuffer);for(let n=0;n<r.length;n++){if(t.resolveDepthBuffer&&(t.depthBuffer&&(s|=e.DEPTH_BUFFER_BIT),t.stencilBuffer&&t.resolveStencilBuffer&&(s|=e.STENCIL_BUFFER_BIT)),u){e.framebufferRenderbuffer(e.READ_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.RENDERBUFFER,d.__webglColorRenderbuffer[n]);const t=i.get(r[n]).__webglTexture;e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)}e.blitFramebuffer(0,0,a,o,0,0,a,o,s,e.NEAREST),!0===c&&(G.length=0,H.length=0,G.push(e.COLOR_ATTACHMENT0+n),t.depthBuffer&&!1===t.resolveDepthBuffer&&(G.push(l),H.push(l),e.invalidateFramebuffer(e.DRAW_FRAMEBUFFER,H)),e.invalidateFramebuffer(e.READ_FRAMEBUFFER,G))}if(n.bindFramebuffer(e.READ_FRAMEBUFFER,null),n.bindFramebuffer(e.DRAW_FRAMEBUFFER,null),u)for(let t=0;t<r.length;t++){n.bindFramebuffer(e.FRAMEBUFFER,d.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,d.__webglColorRenderbuffer[t]);const a=i.get(r[t]).__webglTexture;n.bindFramebuffer(e.FRAMEBUFFER,d.__webglFramebuffer),e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,a,0)}n.bindFramebuffer(e.DRAW_FRAMEBUFFER,d.__webglMultisampledFramebuffer)}else if(t.depthBuffer&&!1===t.resolveDepthBuffer&&c){const n=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;e.invalidateFramebuffer(e.DRAW_FRAMEBUFFER,[n])}},this.setupDepthRenderbuffer=B,this.setupFrameBufferTexture=N,this.useMultisampledRTT=k}function Ut(e,t){return{convert:function(n,i=r.jf0){let a;const o=r.ppV.getTransfer(i);if(n===r.OUM)return e.UNSIGNED_BYTE;if(n===r.Wew)return e.UNSIGNED_SHORT_4_4_4_4;if(n===r.gJ2)return e.UNSIGNED_SHORT_5_5_5_1;if(n===r.Dmk)return e.UNSIGNED_INT_5_9_9_9_REV;if(n===r.yT7)return e.UNSIGNED_INT_10F_11F_11F_REV;if(n===r.tJf)return e.BYTE;if(n===r.fBL)return e.SHORT;if(n===r.cHt)return e.UNSIGNED_SHORT;if(n===r.Yuy)return e.INT;if(n===r.bkx)return e.UNSIGNED_INT;if(n===r.RQf)return e.FLOAT;if(n===r.ix0)return e.HALF_FLOAT;if(n===r.wrO)return e.ALPHA;if(n===r.HIg)return e.RGB;if(n===r.GWd)return e.RGBA;if(n===r.zdS)return e.DEPTH_COMPONENT;if(n===r.dcC)return e.DEPTH_STENCIL;if(n===r.VT0)return e.RED;if(n===r.ZQM)return e.RED_INTEGER;if(n===r.paN)return e.RG;if(n===r.TkQ)return e.RG_INTEGER;if(n===r.c90)return e.RGBA_INTEGER;if(n===r.IE4||n===r.Nz6||n===r.jR7||n===r.BXX)if(o===r.KLL){if(a=t.get("WEBGL_compressed_texture_s3tc_srgb"),null===a)return null;if(n===r.IE4)return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===r.Nz6)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===r.jR7)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===r.BXX)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(a=t.get("WEBGL_compressed_texture_s3tc"),null===a)return null;if(n===r.IE4)return a.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===r.Nz6)return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===r.jR7)return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===r.BXX)return a.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(n===r.k6Q||n===r.kTp||n===r.HXV||n===r.pBf){if(a=t.get("WEBGL_compressed_texture_pvrtc"),null===a)return null;if(n===r.k6Q)return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===r.kTp)return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===r.HXV)return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===r.pBf)return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(n===r.CVz||n===r.Riy||n===r.KDk){if(a=t.get("WEBGL_compressed_texture_etc"),null===a)return null;if(n===r.CVz||n===r.Riy)return o===r.KLL?a.COMPRESSED_SRGB8_ETC2:a.COMPRESSED_RGB8_ETC2;if(n===r.KDk)return o===r.KLL?a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:a.COMPRESSED_RGBA8_ETC2_EAC}if(n===r.qa3||n===r.B_h||n===r.czI||n===r.rSH||n===r.Qrf||n===r.psI||n===r.a5J||n===r._QJ||n===r.uB5||n===r.lyL||n===r.bC7||n===r.y3Z||n===r.ojs||n===r.S$4){if(a=t.get("WEBGL_compressed_texture_astc"),null===a)return null;if(n===r.qa3)return o===r.KLL?a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:a.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===r.B_h)return o===r.KLL?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:a.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===r.czI)return o===r.KLL?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:a.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===r.rSH)return o===r.KLL?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:a.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===r.Qrf)return o===r.KLL?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:a.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===r.psI)return o===r.KLL?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:a.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===r.a5J)return o===r.KLL?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:a.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===r._QJ)return o===r.KLL?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:a.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===r.uB5)return o===r.KLL?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:a.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===r.lyL)return o===r.KLL?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:a.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===r.bC7)return o===r.KLL?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:a.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===r.y3Z)return o===r.KLL?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:a.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===r.ojs)return o===r.KLL?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:a.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===r.S$4)return o===r.KLL?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:a.COMPRESSED_RGBA_ASTC_12x12_KHR}if(n===r.Fn||n===r.H23||n===r.W9U){if(a=t.get("EXT_texture_compression_bptc"),null===a)return null;if(n===r.Fn)return o===r.KLL?a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:a.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===r.H23)return a.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===r.W9U)return a.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}if(n===r.Kef||n===r.XG_||n===r.HO_||n===r.CWW){if(a=t.get("EXT_texture_compression_rgtc"),null===a)return null;if(n===r.Kef)return a.COMPRESSED_RED_RGTC1_EXT;if(n===r.XG_)return a.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===r.HO_)return a.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===r.CWW)return a.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return n===r.V3x?e.UNSIGNED_INT_24_8:void 0!==e[n]?e[n]:null}}}class Dt{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(e,t){if(null===this.texture){const n=new r.rjZ(e.texture);e.depthNear===t.depthNear&&e.depthFar===t.depthFar||(this.depthNear=e.depthNear,this.depthFar=e.depthFar),this.texture=n}}getMesh(e){if(null!==this.texture&&null===this.mesh){const t=e.cameras[0].viewport,n=new r.BKk({vertexShader:"\nvoid main() {\n\n\tgl_Position = vec4( position, 1.0 );\n\n}",fragmentShader:"\nuniform sampler2DArray depthColor;\nuniform float depthWidth;\nuniform float depthHeight;\n\nvoid main() {\n\n\tvec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );\n\n\tif ( coord.x >= 1.0 ) {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;\n\n\t} else {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;\n\n\t}\n\n}",uniforms:{depthColor:{value:this.texture},depthWidth:{value:t.z},depthHeight:{value:t.w}}});this.mesh=new r.eaF(new r.bdM(20,20),n)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class wt extends r.Qev{constructor(e,t){super();const n=this;let a=null,o=1,s=null,l="local-floor",c=1,d=null,u=null,f=null,p=null,m=null,h=null;const _="undefined"!=typeof XRWebGLBinding,g=new Dt,v={},E=t.getContextAttributes();let S=null,T=null;const M=[],x=[],R=new r.I9Y;let A=null;const C=new r.ubm;C.viewport=new r.IUQ;const b=new r.ubm;b.viewport=new r.IUQ;const L=[C,b],P=new r.nZQ;let U=null,D=null;function w(e){const t=x.indexOf(e.inputSource);if(-1===t)return;const n=M[t];void 0!==n&&(n.update(e.inputSource,e.frame,d||s),n.dispatchEvent({type:e.type,data:e.inputSource}))}function I(){a.removeEventListener("select",w),a.removeEventListener("selectstart",w),a.removeEventListener("selectend",w),a.removeEventListener("squeeze",w),a.removeEventListener("squeezestart",w),a.removeEventListener("squeezeend",w),a.removeEventListener("end",I),a.removeEventListener("inputsourceschange",y);for(let e=0;e<M.length;e++){const t=x[e];null!==t&&(x[e]=null,M[e].disconnect(t))}U=null,D=null,g.reset();for(const e in v)delete v[e];e.setRenderTarget(S),m=null,p=null,f=null,a=null,T=null,G.stop(),n.isPresenting=!1,e.setPixelRatio(A),e.setSize(R.width,R.height,!1),n.dispatchEvent({type:"sessionend"})}function y(e){for(let t=0;t<e.removed.length;t++){const n=e.removed[t],r=x.indexOf(n);r>=0&&(x[r]=null,M[r].disconnect(n))}for(let t=0;t<e.added.length;t++){const n=e.added[t];let r=x.indexOf(n);if(-1===r){for(let e=0;e<M.length;e++){if(e>=x.length){x.push(n),r=e;break}if(null===x[e]){x[e]=n,r=e;break}}if(-1===r)break}const i=M[r];i&&i.connect(n)}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(e){let t=M[e];return void 0===t&&(t=new r.R3r,M[e]=t),t.getTargetRaySpace()},this.getControllerGrip=function(e){let t=M[e];return void 0===t&&(t=new r.R3r,M[e]=t),t.getGripSpace()},this.getHand=function(e){let t=M[e];return void 0===t&&(t=new r.R3r,M[e]=t),t.getHandSpace()},this.setFramebufferScaleFactor=function(e){o=e,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(e){l=e,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return d||s},this.setReferenceSpace=function(e){d=e},this.getBaseLayer=function(){return null!==p?p:m},this.getBinding=function(){return null===f&&_&&(f=new XRWebGLBinding(a,t)),f},this.getFrame=function(){return h},this.getSession=function(){return a},this.setSession=async function(i){if(a=i,null!==a){if(S=e.getRenderTarget(),a.addEventListener("select",w),a.addEventListener("selectstart",w),a.addEventListener("selectend",w),a.addEventListener("squeeze",w),a.addEventListener("squeezestart",w),a.addEventListener("squeezeend",w),a.addEventListener("end",I),a.addEventListener("inputsourceschange",y),!0!==E.xrCompatible&&await t.makeXRCompatible(),A=e.getPixelRatio(),e.getSize(R),_&&"createProjectionLayer"in XRWebGLBinding.prototype){let n=null,i=null,s=null;E.depth&&(s=E.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,n=E.stencil?r.dcC:r.zdS,i=E.stencil?r.V3x:r.bkx);const l={colorFormat:t.RGBA8,depthFormat:s,scaleFactor:o};f=this.getBinding(),p=f.createProjectionLayer(l),a.updateRenderState({layers:[p]}),e.setPixelRatio(1),e.setSize(p.textureWidth,p.textureHeight,!1),T=new r.nWS(p.textureWidth,p.textureHeight,{format:r.GWd,type:r.OUM,depthTexture:new r.VCu(p.textureWidth,p.textureHeight,i,void 0,void 0,void 0,void 0,void 0,void 0,n),stencilBuffer:E.stencil,colorSpace:e.outputColorSpace,samples:E.antialias?4:0,resolveDepthBuffer:!1===p.ignoreDepthValues,resolveStencilBuffer:!1===p.ignoreDepthValues})}else{const n={antialias:E.antialias,alpha:!0,depth:E.depth,stencil:E.stencil,framebufferScaleFactor:o};m=new XRWebGLLayer(a,t,n),a.updateRenderState({baseLayer:m}),e.setPixelRatio(1),e.setSize(m.framebufferWidth,m.framebufferHeight,!1),T=new r.nWS(m.framebufferWidth,m.framebufferHeight,{format:r.GWd,type:r.OUM,colorSpace:e.outputColorSpace,stencilBuffer:E.stencil,resolveDepthBuffer:!1===m.ignoreDepthValues,resolveStencilBuffer:!1===m.ignoreDepthValues})}T.isXRRenderTarget=!0,this.setFoveation(c),d=null,s=await a.requestReferenceSpace(l),G.setContext(a),G.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(null!==a)return a.environmentBlendMode},this.getDepthTexture=function(){return g.getDepthTexture()};const N=new r.Pq0,O=new r.Pq0;function F(e,t){null===t?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.copy(e.matrixWorld).invert()}this.updateCamera=function(e){if(null===a)return;let t=e.near,n=e.far;null!==g.texture&&(g.depthNear>0&&(t=g.depthNear),g.depthFar>0&&(n=g.depthFar)),P.near=b.near=C.near=t,P.far=b.far=C.far=n,U===P.near&&D===P.far||(a.updateRenderState({depthNear:P.near,depthFar:P.far}),U=P.near,D=P.far),P.layers.mask=6|e.layers.mask,C.layers.mask=3&P.layers.mask,b.layers.mask=5&P.layers.mask;const i=e.parent,o=P.cameras;F(P,i);for(let e=0;e<o.length;e++)F(o[e],i);2===o.length?function(e,t,n){N.setFromMatrixPosition(t.matrixWorld),O.setFromMatrixPosition(n.matrixWorld);const r=N.distanceTo(O),i=t.projectionMatrix.elements,a=n.projectionMatrix.elements,o=i[14]/(i[10]-1),s=i[14]/(i[10]+1),l=(i[9]+1)/i[5],c=(i[9]-1)/i[5],d=(i[8]-1)/i[0],u=(a[8]+1)/a[0],f=o*d,p=o*u,m=r/(-d+u),h=m*-d;if(t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(h),e.translateZ(m),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.copy(e.matrixWorld).invert(),-1===i[10])e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse);else{const t=o+m,n=s+m,i=f-h,a=p+(r-h),d=l*s/n*t,u=c*s/n*t;e.projectionMatrix.makePerspective(i,a,d,u,t,n),e.projectionMatrixInverse.copy(e.projectionMatrix).invert()}}(P,C,b):P.projectionMatrix.copy(C.projectionMatrix),function(e,t,n){null===n?e.matrix.copy(t.matrixWorld):(e.matrix.copy(n.matrixWorld),e.matrix.invert(),e.matrix.multiply(t.matrixWorld)),e.matrix.decompose(e.position,e.quaternion,e.scale),e.updateMatrixWorld(!0),e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse),e.isPerspectiveCamera&&(e.fov=2*r.a55*Math.atan(1/e.projectionMatrix.elements[5]),e.zoom=1)}(e,P,i)},this.getCamera=function(){return P},this.getFoveation=function(){if(null!==p||null!==m)return c},this.setFoveation=function(e){c=e,null!==p&&(p.fixedFoveation=e),null!==m&&void 0!==m.fixedFoveation&&(m.fixedFoveation=e)},this.hasDepthSensing=function(){return null!==g.texture},this.getDepthSensingMesh=function(){return g.getMesh(P)},this.getCameraTexture=function(e){return v[e]};let B=null;const G=new i;G.setAnimationLoop(function(t,i){if(u=i.getViewerPose(d||s),h=i,null!==u){const t=u.views;null!==m&&(e.setRenderTargetFramebuffer(T,m.framebuffer),e.setRenderTarget(T));let i=!1;t.length!==P.cameras.length&&(P.cameras.length=0,i=!0);for(let n=0;n<t.length;n++){const a=t[n];let o=null;if(null!==m)o=m.getViewport(a);else{const t=f.getViewSubImage(p,a);o=t.viewport,0===n&&(e.setRenderTargetTextures(T,t.colorTexture,t.depthStencilTexture),e.setRenderTarget(T))}let s=L[n];void 0===s&&(s=new r.ubm,s.layers.enable(n),s.viewport=new r.IUQ,L[n]=s),s.matrix.fromArray(a.transform.matrix),s.matrix.decompose(s.position,s.quaternion,s.scale),s.projectionMatrix.fromArray(a.projectionMatrix),s.projectionMatrixInverse.copy(s.projectionMatrix).invert(),s.viewport.set(o.x,o.y,o.width,o.height),0===n&&(P.matrix.copy(s.matrix),P.matrix.decompose(P.position,P.quaternion,P.scale)),!0===i&&P.cameras.push(s)}const o=a.enabledFeatures;if(o&&o.includes("depth-sensing")&&"gpu-optimized"==a.depthUsage&&_){f=n.getBinding();const e=f.getDepthInformation(t[0]);e&&e.isValid&&e.texture&&g.init(e,a.renderState)}if(o&&o.includes("camera-access")&&_){e.state.unbindTexture(),f=n.getBinding();for(let e=0;e<t.length;e++){const n=t[e].camera;if(n){let e=v[n];e||(e=new r.rjZ,v[n]=e);const t=f.getCameraImage(n);e.sourceTexture=t}}}}for(let e=0;e<M.length;e++){const t=x[e],n=M[e];null!==t&&void 0!==n&&n.update(t,i,d||s)}B&&B(t,i),i.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:i}),h=null}),this.setAnimationLoop=function(e){B=e},this.dispose=function(){}}}const It=new r.O9p,yt=new r.kn4;function Nt(e,t){function n(e,t){!0===e.matrixAutoUpdate&&e.updateMatrix(),t.value.copy(e.matrix)}function i(e,i){e.opacity.value=i.opacity,i.color&&e.diffuse.value.copy(i.color),i.emissive&&e.emissive.value.copy(i.emissive).multiplyScalar(i.emissiveIntensity),i.map&&(e.map.value=i.map,n(i.map,e.mapTransform)),i.alphaMap&&(e.alphaMap.value=i.alphaMap,n(i.alphaMap,e.alphaMapTransform)),i.bumpMap&&(e.bumpMap.value=i.bumpMap,n(i.bumpMap,e.bumpMapTransform),e.bumpScale.value=i.bumpScale,i.side===r.hsX&&(e.bumpScale.value*=-1)),i.normalMap&&(e.normalMap.value=i.normalMap,n(i.normalMap,e.normalMapTransform),e.normalScale.value.copy(i.normalScale),i.side===r.hsX&&e.normalScale.value.negate()),i.displacementMap&&(e.displacementMap.value=i.displacementMap,n(i.displacementMap,e.displacementMapTransform),e.displacementScale.value=i.displacementScale,e.displacementBias.value=i.displacementBias),i.emissiveMap&&(e.emissiveMap.value=i.emissiveMap,n(i.emissiveMap,e.emissiveMapTransform)),i.specularMap&&(e.specularMap.value=i.specularMap,n(i.specularMap,e.specularMapTransform)),i.alphaTest>0&&(e.alphaTest.value=i.alphaTest);const a=t.get(i),o=a.envMap,s=a.envMapRotation;o&&(e.envMap.value=o,It.copy(s),It.x*=-1,It.y*=-1,It.z*=-1,o.isCubeTexture&&!1===o.isRenderTargetTexture&&(It.y*=-1,It.z*=-1),e.envMapRotation.value.setFromMatrix4(yt.makeRotationFromEuler(It)),e.flipEnvMap.value=o.isCubeTexture&&!1===o.isRenderTargetTexture?-1:1,e.reflectivity.value=i.reflectivity,e.ior.value=i.ior,e.refractionRatio.value=i.refractionRatio),i.lightMap&&(e.lightMap.value=i.lightMap,e.lightMapIntensity.value=i.lightMapIntensity,n(i.lightMap,e.lightMapTransform)),i.aoMap&&(e.aoMap.value=i.aoMap,e.aoMapIntensity.value=i.aoMapIntensity,n(i.aoMap,e.aoMapTransform))}return{refreshFogUniforms:function(t,n){n.color.getRGB(t.fogColor.value,(0,r._Ut)(e)),n.isFog?(t.fogNear.value=n.near,t.fogFar.value=n.far):n.isFogExp2&&(t.fogDensity.value=n.density)},refreshMaterialUniforms:function(e,a,o,s,l){a.isMeshBasicMaterial||a.isMeshLambertMaterial?i(e,a):a.isMeshToonMaterial?(i(e,a),function(e,t){t.gradientMap&&(e.gradientMap.value=t.gradientMap)}(e,a)):a.isMeshPhongMaterial?(i(e,a),function(e,t){e.specular.value.copy(t.specular),e.shininess.value=Math.max(t.shininess,1e-4)}(e,a)):a.isMeshStandardMaterial?(i(e,a),function(e,t){e.metalness.value=t.metalness,t.metalnessMap&&(e.metalnessMap.value=t.metalnessMap,n(t.metalnessMap,e.metalnessMapTransform)),e.roughness.value=t.roughness,t.roughnessMap&&(e.roughnessMap.value=t.roughnessMap,n(t.roughnessMap,e.roughnessMapTransform)),t.envMap&&(e.envMapIntensity.value=t.envMapIntensity)}(e,a),a.isMeshPhysicalMaterial&&function(e,t,i){e.ior.value=t.ior,t.sheen>0&&(e.sheenColor.value.copy(t.sheenColor).multiplyScalar(t.sheen),e.sheenRoughness.value=t.sheenRoughness,t.sheenColorMap&&(e.sheenColorMap.value=t.sheenColorMap,n(t.sheenColorMap,e.sheenColorMapTransform)),t.sheenRoughnessMap&&(e.sheenRoughnessMap.value=t.sheenRoughnessMap,n(t.sheenRoughnessMap,e.sheenRoughnessMapTransform))),t.clearcoat>0&&(e.clearcoat.value=t.clearcoat,e.clearcoatRoughness.value=t.clearcoatRoughness,t.clearcoatMap&&(e.clearcoatMap.value=t.clearcoatMap,n(t.clearcoatMap,e.clearcoatMapTransform)),t.clearcoatRoughnessMap&&(e.clearcoatRoughnessMap.value=t.clearcoatRoughnessMap,n(t.clearcoatRoughnessMap,e.clearcoatRoughnessMapTransform)),t.clearcoatNormalMap&&(e.clearcoatNormalMap.value=t.clearcoatNormalMap,n(t.clearcoatNormalMap,e.clearcoatNormalMapTransform),e.clearcoatNormalScale.value.copy(t.clearcoatNormalScale),t.side===r.hsX&&e.clearcoatNormalScale.value.negate())),t.dispersion>0&&(e.dispersion.value=t.dispersion),t.iridescence>0&&(e.iridescence.value=t.iridescence,e.iridescenceIOR.value=t.iridescenceIOR,e.iridescenceThicknessMinimum.value=t.iridescenceThicknessRange[0],e.iridescenceThicknessMaximum.value=t.iridescenceThicknessRange[1],t.iridescenceMap&&(e.iridescenceMap.value=t.iridescenceMap,n(t.iridescenceMap,e.iridescenceMapTransform)),t.iridescenceThicknessMap&&(e.iridescenceThicknessMap.value=t.iridescenceThicknessMap,n(t.iridescenceThicknessMap,e.iridescenceThicknessMapTransform))),t.transmission>0&&(e.transmission.value=t.transmission,e.transmissionSamplerMap.value=i.texture,e.transmissionSamplerSize.value.set(i.width,i.height),t.transmissionMap&&(e.transmissionMap.value=t.transmissionMap,n(t.transmissionMap,e.transmissionMapTransform)),e.thickness.value=t.thickness,t.thicknessMap&&(e.thicknessMap.value=t.thicknessMap,n(t.thicknessMap,e.thicknessMapTransform)),e.attenuationDistance.value=t.attenuationDistance,e.attenuationColor.value.copy(t.attenuationColor)),t.anisotropy>0&&(e.anisotropyVector.value.set(t.anisotropy*Math.cos(t.anisotropyRotation),t.anisotropy*Math.sin(t.anisotropyRotation)),t.anisotropyMap&&(e.anisotropyMap.value=t.anisotropyMap,n(t.anisotropyMap,e.anisotropyMapTransform))),e.specularIntensity.value=t.specularIntensity,e.specularColor.value.copy(t.specularColor),t.specularColorMap&&(e.specularColorMap.value=t.specularColorMap,n(t.specularColorMap,e.specularColorMapTransform)),t.specularIntensityMap&&(e.specularIntensityMap.value=t.specularIntensityMap,n(t.specularIntensityMap,e.specularIntensityMapTransform))}(e,a,l)):a.isMeshMatcapMaterial?(i(e,a),function(e,t){t.matcap&&(e.matcap.value=t.matcap)}(e,a)):a.isMeshDepthMaterial?i(e,a):a.isMeshDistanceMaterial?(i(e,a),function(e,n){const r=t.get(n).light;e.referencePosition.value.setFromMatrixPosition(r.matrixWorld),e.nearDistance.value=r.shadow.camera.near,e.farDistance.value=r.shadow.camera.far}(e,a)):a.isMeshNormalMaterial?i(e,a):a.isLineBasicMaterial?(function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,t.map&&(e.map.value=t.map,n(t.map,e.mapTransform))}(e,a),a.isLineDashedMaterial&&function(e,t){e.dashSize.value=t.dashSize,e.totalSize.value=t.dashSize+t.gapSize,e.scale.value=t.scale}(e,a)):a.isPointsMaterial?function(e,t,r,i){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.size.value=t.size*r,e.scale.value=.5*i,t.map&&(e.map.value=t.map,n(t.map,e.uvTransform)),t.alphaMap&&(e.alphaMap.value=t.alphaMap,n(t.alphaMap,e.alphaMapTransform)),t.alphaTest>0&&(e.alphaTest.value=t.alphaTest)}(e,a,o,s):a.isSpriteMaterial?function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.rotation.value=t.rotation,t.map&&(e.map.value=t.map,n(t.map,e.mapTransform)),t.alphaMap&&(e.alphaMap.value=t.alphaMap,n(t.alphaMap,e.alphaMapTransform)),t.alphaTest>0&&(e.alphaTest.value=t.alphaTest)}(e,a):a.isShadowMaterial?(e.color.value.copy(a.color),e.opacity.value=a.opacity):a.isShaderMaterial&&(a.uniformsNeedUpdate=!1)}}}function Ot(e,t,n,r){let i={},a={},o=[];const s=e.getParameter(e.MAX_UNIFORM_BUFFER_BINDINGS);function l(e,t,n,r){const i=e.value,a=t+"_"+n;if(void 0===r[a])return r[a]="number"==typeof i||"boolean"==typeof i?i:i.clone(),!0;{const e=r[a];if("number"==typeof i||"boolean"==typeof i){if(e!==i)return r[a]=i,!0}else if(!1===e.equals(i))return e.copy(i),!0}return!1}function c(e){const t={boundary:0,storage:0};return"number"==typeof e||"boolean"==typeof e?(t.boundary=4,t.storage=4):e.isVector2?(t.boundary=8,t.storage=8):e.isVector3||e.isColor?(t.boundary=16,t.storage=12):e.isVector4?(t.boundary=16,t.storage=16):e.isMatrix3?(t.boundary=48,t.storage=48):e.isMatrix4?(t.boundary=64,t.storage=64):e.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",e),t}function d(t){const n=t.target;n.removeEventListener("dispose",d);const r=o.indexOf(n.__bindingPointIndex);o.splice(r,1),e.deleteBuffer(i[n.id]),delete i[n.id],delete a[n.id]}return{bind:function(e,t){const n=t.program;r.uniformBlockBinding(e,n)},update:function(n,u){let f=i[n.id];void 0===f&&(function(e){const t=e.uniforms;let n=0;for(let e=0,r=t.length;e<r;e++){const r=Array.isArray(t[e])?t[e]:[t[e]];for(let e=0,t=r.length;e<t;e++){const t=r[e],i=Array.isArray(t.value)?t.value:[t.value];for(let e=0,r=i.length;e<r;e++){const r=c(i[e]),a=n%16,o=a%r.boundary,s=a+o;n+=o,0!==s&&16-s<r.storage&&(n+=16-s),t.__data=new Float32Array(r.storage/Float32Array.BYTES_PER_ELEMENT),t.__offset=n,n+=r.storage}}}const r=n%16;r>0&&(n+=16-r),e.__size=n,e.__cache={}}(n),f=function(t){const n=function(){for(let e=0;e<s;e++)if(-1===o.indexOf(e))return o.push(e),e;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}();t.__bindingPointIndex=n;const r=e.createBuffer(),i=t.__size,a=t.usage;return e.bindBuffer(e.UNIFORM_BUFFER,r),e.bufferData(e.UNIFORM_BUFFER,i,a),e.bindBuffer(e.UNIFORM_BUFFER,null),e.bindBufferBase(e.UNIFORM_BUFFER,n,r),r}(n),i[n.id]=f,n.addEventListener("dispose",d));const p=u.program;r.updateUBOMapping(n,p);const m=t.render.frame;a[n.id]!==m&&(function(t){const n=i[t.id],r=t.uniforms,a=t.__cache;e.bindBuffer(e.UNIFORM_BUFFER,n);for(let t=0,n=r.length;t<n;t++){const n=Array.isArray(r[t])?r[t]:[r[t]];for(let r=0,i=n.length;r<i;r++){const i=n[r];if(!0===l(i,t,r,a)){const t=i.__offset,n=Array.isArray(i.value)?i.value:[i.value];let r=0;for(let a=0;a<n.length;a++){const o=n[a],s=c(o);"number"==typeof o||"boolean"==typeof o?(i.__data[0]=o,e.bufferSubData(e.UNIFORM_BUFFER,t+r,i.__data)):o.isMatrix3?(i.__data[0]=o.elements[0],i.__data[1]=o.elements[1],i.__data[2]=o.elements[2],i.__data[3]=0,i.__data[4]=o.elements[3],i.__data[5]=o.elements[4],i.__data[6]=o.elements[5],i.__data[7]=0,i.__data[8]=o.elements[6],i.__data[9]=o.elements[7],i.__data[10]=o.elements[8],i.__data[11]=0):(o.toArray(i.__data,r),r+=s.storage/Float32Array.BYTES_PER_ELEMENT)}e.bufferSubData(e.UNIFORM_BUFFER,t,i.__data)}}}e.bindBuffer(e.UNIFORM_BUFFER,null)}(n),a[n.id]=m)},dispose:function(){for(const t in i)e.deleteBuffer(i[t]);o=[],i={},a={}}}}class Ft{constructor(e={}){const{canvas:t=(0,r.lPF)(),context:n=null,depth:o=!0,stencil:s=!1,alpha:l=!1,antialias:c=!1,premultipliedAlpha:d=!0,preserveDrawingBuffer:u=!1,powerPreference:v="default",failIfMajorPerformanceCaveat:E=!1,reversedDepthBuffer:S=!1}=e;let T;if(this.isWebGLRenderer=!0,null!==n){if("undefined"!=typeof WebGLRenderingContext&&n instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");T=n.getContextAttributes().alpha}else T=l;const M=new Uint32Array(4),x=new Int32Array(4);let R=null,A=null;const C=[],b=[];this.domElement=t,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.toneMapping=r.y_p,this.toneMappingExposure=1,this.transmissionResolutionScale=1;const L=this;let P=!1;this._outputColorSpace=r.er$;let U=0,D=0,w=null,I=-1,V=null;const k=new r.IUQ,z=new r.IUQ;let W=null;const X=new r.Q1f(0);let K=0,q=t.width,Y=t.height,j=1,Z=null,Q=null;const $=new r.IUQ(0,0,q,Y),J=new r.IUQ(0,0,q,Y);let ee=!1;const te=new r.PPD;let ne=!1,re=!1;const ie=new r.kn4,ae=new r.Pq0,oe=new r.IUQ,se={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let le=!1;function ce(){return null===w?j:1}let de,ue,fe,pe,me,he,_e,ge,ve,Ee,Se,Te,Me,xe,Re,Ae,Ce,be,Le,Pe,Ue,De,we,Ie,ye=n;function Ne(e,n){return t.getContext(e,n)}try{const e={alpha:!0,depth:o,stencil:s,antialias:c,premultipliedAlpha:d,preserveDrawingBuffer:u,powerPreference:v,failIfMajorPerformanceCaveat:E};if("setAttribute"in t&&t.setAttribute("data-engine",`three.js r${r.sPf}`),t.addEventListener("webglcontextlost",Be,!1),t.addEventListener("webglcontextrestored",Ge,!1),t.addEventListener("webglcontextcreationerror",He,!1),null===ye){const t="webgl2";if(ye=Ne(t,e),null===ye)throw Ne(t)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(e){throw console.error("THREE.WebGLRenderer: "+e.message),e}function Oe(){de=new N(ye),de.init(),De=new Ut(ye,de),ue=new h(ye,de,e,De),fe=new Lt(ye,de),ue.reversedDepthBuffer&&S&&fe.buffers.depth.setReversed(!0),pe=new B(ye),me=new ht,he=new Pt(ye,de,fe,me,ue,De,pe),_e=new g(L),ge=new y(L),ve=new a(ye),we=new p(ye,ve),Ee=new O(ye,ve,pe,we),Se=new H(ye,Ee,ve,pe),Le=new G(ye,ue,he),Ae=new _(me),Te=new mt(L,_e,ge,de,ue,we,Ae),Me=new Nt(L,me),xe=new Et,Re=new At(de),be=new f(L,_e,ge,fe,Se,T,d),Ce=new Ct(L,Se,ue),Ie=new Ot(ye,pe,ue,fe),Pe=new m(ye,de,pe),Ue=new F(ye,de,pe),pe.programs=Te.programs,L.capabilities=ue,L.extensions=de,L.properties=me,L.renderLists=xe,L.shadowMap=Ce,L.state=fe,L.info=pe}Oe();const Fe=new wt(L,ye);function Be(e){e.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),P=!0}function Ge(){console.log("THREE.WebGLRenderer: Context Restored."),P=!1;const e=pe.autoReset,t=Ce.enabled,n=Ce.autoUpdate,r=Ce.needsUpdate,i=Ce.type;Oe(),pe.autoReset=e,Ce.enabled=t,Ce.autoUpdate=n,Ce.needsUpdate=r,Ce.type=i}function He(e){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",e.statusMessage)}function Ve(e){const t=e.target;t.removeEventListener("dispose",Ve),function(e){(function(e){const t=me.get(e).programs;void 0!==t&&(t.forEach(function(e){Te.releaseProgram(e)}),e.isShaderMaterial&&Te.releaseShaderCache(e))})(e),me.remove(e)}(t)}function ke(e,t,n){!0===e.transparent&&e.side===r.$EB&&!1===e.forceSinglePass?(e.side=r.hsX,e.needsUpdate=!0,Je(e,t,n),e.side=r.hB5,e.needsUpdate=!0,Je(e,t,n),e.side=r.$EB):Je(e,t,n)}this.xr=Fe,this.getContext=function(){return ye},this.getContextAttributes=function(){return ye.getContextAttributes()},this.forceContextLoss=function(){const e=de.get("WEBGL_lose_context");e&&e.loseContext()},this.forceContextRestore=function(){const e=de.get("WEBGL_lose_context");e&&e.restoreContext()},this.getPixelRatio=function(){return j},this.setPixelRatio=function(e){void 0!==e&&(j=e,this.setSize(q,Y,!1))},this.getSize=function(e){return e.set(q,Y)},this.setSize=function(e,n,r=!0){Fe.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(q=e,Y=n,t.width=Math.floor(e*j),t.height=Math.floor(n*j),!0===r&&(t.style.width=e+"px",t.style.height=n+"px"),this.setViewport(0,0,e,n))},this.getDrawingBufferSize=function(e){return e.set(q*j,Y*j).floor()},this.setDrawingBufferSize=function(e,n,r){q=e,Y=n,j=r,t.width=Math.floor(e*r),t.height=Math.floor(n*r),this.setViewport(0,0,e,n)},this.getCurrentViewport=function(e){return e.copy(k)},this.getViewport=function(e){return e.copy($)},this.setViewport=function(e,t,n,r){e.isVector4?$.set(e.x,e.y,e.z,e.w):$.set(e,t,n,r),fe.viewport(k.copy($).multiplyScalar(j).round())},this.getScissor=function(e){return e.copy(J)},this.setScissor=function(e,t,n,r){e.isVector4?J.set(e.x,e.y,e.z,e.w):J.set(e,t,n,r),fe.scissor(z.copy(J).multiplyScalar(j).round())},this.getScissorTest=function(){return ee},this.setScissorTest=function(e){fe.setScissorTest(ee=e)},this.setOpaqueSort=function(e){Z=e},this.setTransparentSort=function(e){Q=e},this.getClearColor=function(e){return e.copy(be.getClearColor())},this.setClearColor=function(){be.setClearColor(...arguments)},this.getClearAlpha=function(){return be.getClearAlpha()},this.setClearAlpha=function(){be.setClearAlpha(...arguments)},this.clear=function(e=!0,t=!0,n=!0){let i=0;if(e){let e=!1;if(null!==w){const t=w.texture.format;e=t===r.c90||t===r.TkQ||t===r.ZQM}if(e){const e=w.texture.type,t=e===r.OUM||e===r.bkx||e===r.cHt||e===r.V3x||e===r.Wew||e===r.gJ2,n=be.getClearColor(),i=be.getClearAlpha(),a=n.r,o=n.g,s=n.b;t?(M[0]=a,M[1]=o,M[2]=s,M[3]=i,ye.clearBufferuiv(ye.COLOR,0,M)):(x[0]=a,x[1]=o,x[2]=s,x[3]=i,ye.clearBufferiv(ye.COLOR,0,x))}else i|=ye.COLOR_BUFFER_BIT}t&&(i|=ye.DEPTH_BUFFER_BIT),n&&(i|=ye.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),ye.clear(i)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",Be,!1),t.removeEventListener("webglcontextrestored",Ge,!1),t.removeEventListener("webglcontextcreationerror",He,!1),be.dispose(),xe.dispose(),Re.dispose(),me.dispose(),_e.dispose(),ge.dispose(),Se.dispose(),we.dispose(),Ie.dispose(),Te.dispose(),Fe.dispose(),Fe.removeEventListener("sessionstart",We),Fe.removeEventListener("sessionend",Ke),qe.stop()},this.renderBufferDirect=function(e,t,n,i,a,o){null===t&&(t=se);const s=a.isMesh&&a.matrixWorld.determinant()<0,l=function(e,t,n,i,a){!0!==t.isScene&&(t=se),he.resetTextureUnits();const o=t.fog,s=i.isMeshStandardMaterial?t.environment:null,l=null===w?L.outputColorSpace:!0===w.isXRRenderTarget?w.texture.colorSpace:r.Zr2,c=(i.isMeshStandardMaterial?ge:_e).get(i.envMap||s),d=!0===i.vertexColors&&!!n.attributes.color&&4===n.attributes.color.itemSize,u=!!n.attributes.tangent&&(!!i.normalMap||i.anisotropy>0),f=!!n.morphAttributes.position,p=!!n.morphAttributes.normal,m=!!n.morphAttributes.color;let h=r.y_p;i.toneMapped&&(null!==w&&!0!==w.isXRRenderTarget||(h=L.toneMapping));const _=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color,g=void 0!==_?_.length:0,v=me.get(i),E=A.state.lights;if(!0===ne&&(!0===re||e!==V)){const t=e===V&&i.id===I;Ae.setState(i,e,t)}let S=!1;i.version===v.__version?v.needsLights&&v.lightsStateVersion!==E.state.version||v.outputColorSpace!==l||a.isBatchedMesh&&!1===v.batching?S=!0:a.isBatchedMesh||!0!==v.batching?a.isBatchedMesh&&!0===v.batchingColor&&null===a.colorTexture||a.isBatchedMesh&&!1===v.batchingColor&&null!==a.colorTexture||a.isInstancedMesh&&!1===v.instancing?S=!0:a.isInstancedMesh||!0!==v.instancing?a.isSkinnedMesh&&!1===v.skinning?S=!0:a.isSkinnedMesh||!0!==v.skinning?a.isInstancedMesh&&!0===v.instancingColor&&null===a.instanceColor||a.isInstancedMesh&&!1===v.instancingColor&&null!==a.instanceColor||a.isInstancedMesh&&!0===v.instancingMorph&&null===a.morphTexture||a.isInstancedMesh&&!1===v.instancingMorph&&null!==a.morphTexture||v.envMap!==c||!0===i.fog&&v.fog!==o?S=!0:void 0===v.numClippingPlanes||v.numClippingPlanes===Ae.numPlanes&&v.numIntersection===Ae.numIntersection?(v.vertexAlphas!==d||v.vertexTangents!==u||v.morphTargets!==f||v.morphNormals!==p||v.morphColors!==m||v.toneMapping!==h||v.morphTargetsCount!==g)&&(S=!0):S=!0:S=!0:S=!0:S=!0:(S=!0,v.__version=i.version);let T=v.currentProgram;!0===S&&(T=Je(i,t,a));let M=!1,x=!1,R=!1;const C=T.getUniforms(),b=v.uniforms;if(fe.useProgram(T.program)&&(M=!0,x=!0,R=!0),i.id!==I&&(I=i.id,x=!0),M||V!==e){fe.buffers.depth.getReversed()&&!0!==e.reversedDepth&&(e._reversedDepth=!0,e.updateProjectionMatrix()),C.setValue(ye,"projectionMatrix",e.projectionMatrix),C.setValue(ye,"viewMatrix",e.matrixWorldInverse);const t=C.map.cameraPosition;void 0!==t&&t.setValue(ye,ae.setFromMatrixPosition(e.matrixWorld)),ue.logarithmicDepthBuffer&&C.setValue(ye,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial)&&C.setValue(ye,"isOrthographic",!0===e.isOrthographicCamera),V!==e&&(V=e,x=!0,R=!0)}if(a.isSkinnedMesh){C.setOptional(ye,a,"bindMatrix"),C.setOptional(ye,a,"bindMatrixInverse");const e=a.skeleton;e&&(null===e.boneTexture&&e.computeBoneTexture(),C.setValue(ye,"boneTexture",e.boneTexture,he))}a.isBatchedMesh&&(C.setOptional(ye,a,"batchingTexture"),C.setValue(ye,"batchingTexture",a._matricesTexture,he),C.setOptional(ye,a,"batchingIdTexture"),C.setValue(ye,"batchingIdTexture",a._indirectTexture,he),C.setOptional(ye,a,"batchingColorTexture"),null!==a._colorsTexture&&C.setValue(ye,"batchingColorTexture",a._colorsTexture,he));const P=n.morphAttributes;var U,D;if(void 0===P.position&&void 0===P.normal&&void 0===P.color||Le.update(a,n,T),(x||v.receiveShadow!==a.receiveShadow)&&(v.receiveShadow=a.receiveShadow,C.setValue(ye,"receiveShadow",a.receiveShadow)),i.isMeshGouraudMaterial&&null!==i.envMap&&(b.envMap.value=c,b.flipEnvMap.value=c.isCubeTexture&&!1===c.isRenderTargetTexture?-1:1),i.isMeshStandardMaterial&&null===i.envMap&&null!==t.environment&&(b.envMapIntensity.value=t.environmentIntensity),x&&(C.setValue(ye,"toneMappingExposure",L.toneMappingExposure),v.needsLights&&(D=R,(U=b).ambientLightColor.needsUpdate=D,U.lightProbe.needsUpdate=D,U.directionalLights.needsUpdate=D,U.directionalLightShadows.needsUpdate=D,U.pointLights.needsUpdate=D,U.pointLightShadows.needsUpdate=D,U.spotLights.needsUpdate=D,U.spotLightShadows.needsUpdate=D,U.rectAreaLights.needsUpdate=D,U.hemisphereLights.needsUpdate=D),o&&!0===i.fog&&Me.refreshFogUniforms(b,o),Me.refreshMaterialUniforms(b,i,j,Y,A.state.transmissionRenderTarget[e.id]),Xe.upload(ye,et(v),b,he)),i.isShaderMaterial&&!0===i.uniformsNeedUpdate&&(Xe.upload(ye,et(v),b,he),i.uniformsNeedUpdate=!1),i.isSpriteMaterial&&C.setValue(ye,"center",a.center),C.setValue(ye,"modelViewMatrix",a.modelViewMatrix),C.setValue(ye,"normalMatrix",a.normalMatrix),C.setValue(ye,"modelMatrix",a.matrixWorld),i.isShaderMaterial||i.isRawShaderMaterial){const e=i.uniformsGroups;for(let t=0,n=e.length;t<n;t++){const n=e[t];Ie.update(n,T),Ie.bind(n,T)}}return T}(e,t,n,i,a);fe.setMaterial(i,s);let c=n.index,d=1;if(!0===i.wireframe){if(c=Ee.getWireframeAttribute(n),void 0===c)return;d=2}const u=n.drawRange,f=n.attributes.position;let p=u.start*d,m=(u.start+u.count)*d;null!==o&&(p=Math.max(p,o.start*d),m=Math.min(m,(o.start+o.count)*d)),null!==c?(p=Math.max(p,0),m=Math.min(m,c.count)):null!=f&&(p=Math.max(p,0),m=Math.min(m,f.count));const h=m-p;if(h<0||h===1/0)return;let _;we.setup(a,i,l,n,c);let g=Pe;if(null!==c&&(_=ve.get(c),g=Ue,g.setIndex(_)),a.isMesh)!0===i.wireframe?(fe.setLineWidth(i.wireframeLinewidth*ce()),g.setMode(ye.LINES)):g.setMode(ye.TRIANGLES);else if(a.isLine){let e=i.linewidth;void 0===e&&(e=1),fe.setLineWidth(e*ce()),a.isLineSegments?g.setMode(ye.LINES):a.isLineLoop?g.setMode(ye.LINE_LOOP):g.setMode(ye.LINE_STRIP)}else a.isPoints?g.setMode(ye.POINTS):a.isSprite&&g.setMode(ye.TRIANGLES);if(a.isBatchedMesh)if(null!==a._multiDrawInstances)(0,r.mcG)("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."),g.renderMultiDrawInstances(a._multiDrawStarts,a._multiDrawCounts,a._multiDrawCount,a._multiDrawInstances);else if(de.get("WEBGL_multi_draw"))g.renderMultiDraw(a._multiDrawStarts,a._multiDrawCounts,a._multiDrawCount);else{const e=a._multiDrawStarts,t=a._multiDrawCounts,n=a._multiDrawCount,r=c?ve.get(c).bytesPerElement:1,o=me.get(i).currentProgram.getUniforms();for(let i=0;i<n;i++)o.setValue(ye,"_gl_DrawID",i),g.render(e[i]/r,t[i])}else if(a.isInstancedMesh)g.renderInstances(p,h,a.count);else if(n.isInstancedBufferGeometry){const e=void 0!==n._maxInstanceCount?n._maxInstanceCount:1/0,t=Math.min(n.instanceCount,e);g.renderInstances(p,h,t)}else g.render(p,h)},this.compile=function(e,t,n=null){null===n&&(n=e),A=Re.get(n),A.init(t),b.push(A),n.traverseVisible(function(e){e.isLight&&e.layers.test(t.layers)&&(A.pushLight(e),e.castShadow&&A.pushShadow(e))}),e!==n&&e.traverseVisible(function(e){e.isLight&&e.layers.test(t.layers)&&(A.pushLight(e),e.castShadow&&A.pushShadow(e))}),A.setupLights();const r=new Set;return e.traverse(function(e){if(!(e.isMesh||e.isPoints||e.isLine||e.isSprite))return;const t=e.material;if(t)if(Array.isArray(t))for(let i=0;i<t.length;i++){const a=t[i];ke(a,n,e),r.add(a)}else ke(t,n,e),r.add(t)}),A=b.pop(),r},this.compileAsync=function(e,t,n=null){const r=this.compile(e,t,n);return new Promise(t=>{function n(){r.forEach(function(e){me.get(e).currentProgram.isReady()&&r.delete(e)}),0!==r.size?setTimeout(n,10):t(e)}null!==de.get("KHR_parallel_shader_compile")?n():setTimeout(n,10)})};let ze=null;function We(){qe.stop()}function Ke(){qe.start()}const qe=new i;function Ye(e,t,n,r){if(!1===e.visible)return;if(e.layers.test(t.layers))if(e.isGroup)n=e.renderOrder;else if(e.isLOD)!0===e.autoUpdate&&e.update(t);else if(e.isLight)A.pushLight(e),e.castShadow&&A.pushShadow(e);else if(e.isSprite){if(!e.frustumCulled||te.intersectsSprite(e)){r&&oe.setFromMatrixPosition(e.matrixWorld).applyMatrix4(ie);const t=Se.update(e),i=e.material;i.visible&&R.push(e,t,i,n,oe.z,null)}}else if((e.isMesh||e.isLine||e.isPoints)&&(!e.frustumCulled||te.intersectsObject(e))){const t=Se.update(e),i=e.material;if(r&&(void 0!==e.boundingSphere?(null===e.boundingSphere&&e.computeBoundingSphere(),oe.copy(e.boundingSphere.center)):(null===t.boundingSphere&&t.computeBoundingSphere(),oe.copy(t.boundingSphere.center)),oe.applyMatrix4(e.matrixWorld).applyMatrix4(ie)),Array.isArray(i)){const r=t.groups;for(let a=0,o=r.length;a<o;a++){const o=r[a],s=i[o.materialIndex];s&&s.visible&&R.push(e,t,s,n,oe.z,o)}}else i.visible&&R.push(e,t,i,n,oe.z,null)}const i=e.children;for(let e=0,a=i.length;e<a;e++)Ye(i[e],t,n,r)}function je(e,t,n,r){const i=e.opaque,a=e.transmissive,o=e.transparent;A.setupLightsView(n),!0===ne&&Ae.setGlobalState(L.clippingPlanes,n),r&&fe.viewport(k.copy(r)),i.length>0&&Qe(i,t,n),a.length>0&&Qe(a,t,n),o.length>0&&Qe(o,t,n),fe.buffers.depth.setTest(!0),fe.buffers.depth.setMask(!0),fe.buffers.color.setMask(!0),fe.setPolygonOffset(!1)}function Ze(e,t,n,i){if(null!==(!0===n.isScene?n.overrideMaterial:null))return;void 0===A.state.transmissionRenderTarget[i.id]&&(A.state.transmissionRenderTarget[i.id]=new r.nWS(1,1,{generateMipmaps:!0,type:de.has("EXT_color_buffer_half_float")||de.has("EXT_color_buffer_float")?r.ix0:r.OUM,minFilter:r.$_I,samples:4,stencilBuffer:s,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:r.ppV.workingColorSpace}));const a=A.state.transmissionRenderTarget[i.id],o=i.viewport||k;a.setSize(o.z*L.transmissionResolutionScale,o.w*L.transmissionResolutionScale);const l=L.getRenderTarget(),c=L.getActiveCubeFace(),d=L.getActiveMipmapLevel();L.setRenderTarget(a),L.getClearColor(X),K=L.getClearAlpha(),K<1&&L.setClearColor(16777215,.5),L.clear(),le&&be.render(n);const u=L.toneMapping;L.toneMapping=r.y_p;const f=i.viewport;if(void 0!==i.viewport&&(i.viewport=void 0),A.setupLightsView(i),!0===ne&&Ae.setGlobalState(L.clippingPlanes,i),Qe(e,n,i),he.updateMultisampleRenderTarget(a),he.updateRenderTargetMipmap(a),!1===de.has("WEBGL_multisampled_render_to_texture")){let e=!1;for(let a=0,o=t.length;a<o;a++){const o=t[a],s=o.object,l=o.geometry,c=o.material,d=o.group;if(c.side===r.$EB&&s.layers.test(i.layers)){const t=c.side;c.side=r.hsX,c.needsUpdate=!0,$e(s,n,i,l,c,d),c.side=t,c.needsUpdate=!0,e=!0}}!0===e&&(he.updateMultisampleRenderTarget(a),he.updateRenderTargetMipmap(a))}L.setRenderTarget(l,c,d),L.setClearColor(X,K),void 0!==f&&(i.viewport=f),L.toneMapping=u}function Qe(e,t,n){const r=!0===t.isScene?t.overrideMaterial:null;for(let i=0,a=e.length;i<a;i++){const a=e[i],o=a.object,s=a.geometry,l=a.group;let c=a.material;!0===c.allowOverride&&null!==r&&(c=r),o.layers.test(n.layers)&&$e(o,t,n,s,c,l)}}function $e(e,t,n,i,a,o){e.onBeforeRender(L,t,n,i,a,o),e.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix),a.onBeforeRender(L,t,n,i,e,o),!0===a.transparent&&a.side===r.$EB&&!1===a.forceSinglePass?(a.side=r.hsX,a.needsUpdate=!0,L.renderBufferDirect(n,t,i,a,e,o),a.side=r.hB5,a.needsUpdate=!0,L.renderBufferDirect(n,t,i,a,e,o),a.side=r.$EB):L.renderBufferDirect(n,t,i,a,e,o),e.onAfterRender(L,t,n,i,a,o)}function Je(e,t,n){!0!==t.isScene&&(t=se);const r=me.get(e),i=A.state.lights,a=A.state.shadowsArray,o=i.state.version,s=Te.getParameters(e,i.state,a,t,n),l=Te.getProgramCacheKey(s);let c=r.programs;r.environment=e.isMeshStandardMaterial?t.environment:null,r.fog=t.fog,r.envMap=(e.isMeshStandardMaterial?ge:_e).get(e.envMap||r.environment),r.envMapRotation=null!==r.environment&&null===e.envMap?t.environmentRotation:e.envMapRotation,void 0===c&&(e.addEventListener("dispose",Ve),c=new Map,r.programs=c);let d=c.get(l);if(void 0!==d){if(r.currentProgram===d&&r.lightsStateVersion===o)return tt(e,s),d}else s.uniforms=Te.getUniforms(e),e.onBeforeCompile(s,L),d=Te.acquireProgram(s,l),c.set(l,d),r.uniforms=s.uniforms;const u=r.uniforms;return(e.isShaderMaterial||e.isRawShaderMaterial)&&!0!==e.clipping||(u.clippingPlanes=Ae.uniform),tt(e,s),r.needsLights=function(e){return e.isMeshLambertMaterial||e.isMeshToonMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&!0===e.lights}(e),r.lightsStateVersion=o,r.needsLights&&(u.ambientLightColor.value=i.state.ambient,u.lightProbe.value=i.state.probe,u.directionalLights.value=i.state.directional,u.directionalLightShadows.value=i.state.directionalShadow,u.spotLights.value=i.state.spot,u.spotLightShadows.value=i.state.spotShadow,u.rectAreaLights.value=i.state.rectArea,u.ltc_1.value=i.state.rectAreaLTC1,u.ltc_2.value=i.state.rectAreaLTC2,u.pointLights.value=i.state.point,u.pointLightShadows.value=i.state.pointShadow,u.hemisphereLights.value=i.state.hemi,u.directionalShadowMap.value=i.state.directionalShadowMap,u.directionalShadowMatrix.value=i.state.directionalShadowMatrix,u.spotShadowMap.value=i.state.spotShadowMap,u.spotLightMatrix.value=i.state.spotLightMatrix,u.spotLightMap.value=i.state.spotLightMap,u.pointShadowMap.value=i.state.pointShadowMap,u.pointShadowMatrix.value=i.state.pointShadowMatrix),r.currentProgram=d,r.uniformsList=null,d}function et(e){if(null===e.uniformsList){const t=e.currentProgram.getUniforms();e.uniformsList=Xe.seqWithValue(t.seq,e.uniforms)}return e.uniformsList}function tt(e,t){const n=me.get(e);n.outputColorSpace=t.outputColorSpace,n.batching=t.batching,n.batchingColor=t.batchingColor,n.instancing=t.instancing,n.instancingColor=t.instancingColor,n.instancingMorph=t.instancingMorph,n.skinning=t.skinning,n.morphTargets=t.morphTargets,n.morphNormals=t.morphNormals,n.morphColors=t.morphColors,n.morphTargetsCount=t.morphTargetsCount,n.numClippingPlanes=t.numClippingPlanes,n.numIntersection=t.numClipIntersection,n.vertexAlphas=t.vertexAlphas,n.vertexTangents=t.vertexTangents,n.toneMapping=t.toneMapping}qe.setAnimationLoop(function(e){ze&&ze(e)}),"undefined"!=typeof self&&qe.setContext(self),this.setAnimationLoop=function(e){ze=e,Fe.setAnimationLoop(e),null===e?qe.stop():qe.start()},Fe.addEventListener("sessionstart",We),Fe.addEventListener("sessionend",Ke),this.render=function(e,t){if(void 0!==t&&!0!==t.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===P)return;if(!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),null===t.parent&&!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld(),!0===Fe.enabled&&!0===Fe.isPresenting&&(!0===Fe.cameraAutoUpdate&&Fe.updateCamera(t),t=Fe.getCamera()),!0===e.isScene&&e.onBeforeRender(L,e,t,w),A=Re.get(e,b.length),A.init(t),b.push(A),ie.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),te.setFromProjectionMatrix(ie,r.TdN,t.reversedDepth),re=this.localClippingEnabled,ne=Ae.init(this.clippingPlanes,re),R=xe.get(e,C.length),R.init(),C.push(R),!0===Fe.enabled&&!0===Fe.isPresenting){const e=L.xr.getDepthSensingMesh();null!==e&&Ye(e,t,-1/0,L.sortObjects)}Ye(e,t,0,L.sortObjects),R.finish(),!0===L.sortObjects&&R.sort(Z,Q),le=!1===Fe.enabled||!1===Fe.isPresenting||!1===Fe.hasDepthSensing(),le&&be.addToRenderList(R,e),this.info.render.frame++,!0===ne&&Ae.beginShadows();const n=A.state.shadowsArray;Ce.render(n,e,t),!0===ne&&Ae.endShadows(),!0===this.info.autoReset&&this.info.reset();const i=R.opaque,a=R.transmissive;if(A.setupLights(),t.isArrayCamera){const n=t.cameras;if(a.length>0)for(let t=0,r=n.length;t<r;t++)Ze(i,a,e,n[t]);le&&be.render(e);for(let t=0,r=n.length;t<r;t++){const r=n[t];je(R,e,r,r.viewport)}}else a.length>0&&Ze(i,a,e,t),le&&be.render(e),je(R,e,t);null!==w&&0===D&&(he.updateMultisampleRenderTarget(w),he.updateRenderTargetMipmap(w)),!0===e.isScene&&e.onAfterRender(L,e,t),we.resetDefaultState(),I=-1,V=null,b.pop(),b.length>0?(A=b[b.length-1],!0===ne&&Ae.setGlobalState(L.clippingPlanes,A.state.camera)):A=null,C.pop(),R=C.length>0?C[C.length-1]:null},this.getActiveCubeFace=function(){return U},this.getActiveMipmapLevel=function(){return D},this.getRenderTarget=function(){return w},this.setRenderTargetTextures=function(e,t,n){const r=me.get(e);r.__autoAllocateDepthBuffer=!1===e.resolveDepthBuffer,!1===r.__autoAllocateDepthBuffer&&(r.__useRenderToTexture=!1),me.get(e.texture).__webglTexture=t,me.get(e.depthTexture).__webglTexture=r.__autoAllocateDepthBuffer?void 0:n,r.__hasExternalTextures=!0},this.setRenderTargetFramebuffer=function(e,t){const n=me.get(e);n.__webglFramebuffer=t,n.__useDefaultFramebuffer=void 0===t};const nt=ye.createFramebuffer();this.setRenderTarget=function(e,t=0,n=0){w=e,U=t,D=n;let r=!0,i=null,a=!1,o=!1;if(e){const s=me.get(e);if(void 0!==s.__useDefaultFramebuffer)fe.bindFramebuffer(ye.FRAMEBUFFER,null),r=!1;else if(void 0===s.__webglFramebuffer)he.setupRenderTarget(e);else if(s.__hasExternalTextures)he.rebindTextures(e,me.get(e.texture).__webglTexture,me.get(e.depthTexture).__webglTexture);else if(e.depthBuffer){const t=e.depthTexture;if(s.__boundDepthTexture!==t){if(null!==t&&me.has(t)&&(e.width!==t.image.width||e.height!==t.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");he.setupDepthRenderbuffer(e)}}const l=e.texture;(l.isData3DTexture||l.isDataArrayTexture||l.isCompressedArrayTexture)&&(o=!0);const c=me.get(e).__webglFramebuffer;e.isWebGLCubeRenderTarget?(i=Array.isArray(c[t])?c[t][n]:c[t],a=!0):i=e.samples>0&&!1===he.useMultisampledRTT(e)?me.get(e).__webglMultisampledFramebuffer:Array.isArray(c)?c[n]:c,k.copy(e.viewport),z.copy(e.scissor),W=e.scissorTest}else k.copy($).multiplyScalar(j).floor(),z.copy(J).multiplyScalar(j).floor(),W=ee;if(0!==n&&(i=nt),fe.bindFramebuffer(ye.FRAMEBUFFER,i)&&r&&fe.drawBuffers(e,i),fe.viewport(k),fe.scissor(z),fe.setScissorTest(W),a){const r=me.get(e.texture);ye.framebufferTexture2D(ye.FRAMEBUFFER,ye.COLOR_ATTACHMENT0,ye.TEXTURE_CUBE_MAP_POSITIVE_X+t,r.__webglTexture,n)}else if(o){const r=t;for(let t=0;t<e.textures.length;t++){const i=me.get(e.textures[t]);ye.framebufferTextureLayer(ye.FRAMEBUFFER,ye.COLOR_ATTACHMENT0+t,i.__webglTexture,n,r)}}else if(null!==e&&0!==n){const t=me.get(e.texture);ye.framebufferTexture2D(ye.FRAMEBUFFER,ye.COLOR_ATTACHMENT0,ye.TEXTURE_2D,t.__webglTexture,n)}I=-1},this.readRenderTargetPixels=function(e,t,n,r,i,a,o,s=0){if(!e||!e.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let l=me.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget&&void 0!==o&&(l=l[o]),l){fe.bindFramebuffer(ye.FRAMEBUFFER,l);try{const o=e.textures[s],l=o.format,c=o.type;if(!ue.textureFormatReadable(l))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!ue.textureTypeReadable(c))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");t>=0&&t<=e.width-r&&n>=0&&n<=e.height-i&&(e.textures.length>1&&ye.readBuffer(ye.COLOR_ATTACHMENT0+s),ye.readPixels(t,n,r,i,De.convert(l),De.convert(c),a))}finally{const e=null!==w?me.get(w).__webglFramebuffer:null;fe.bindFramebuffer(ye.FRAMEBUFFER,e)}}},this.readRenderTargetPixelsAsync=async function(e,t,n,i,a,o,s,l=0){if(!e||!e.isWebGLRenderTarget)throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let c=me.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget&&void 0!==s&&(c=c[s]),c){if(t>=0&&t<=e.width-i&&n>=0&&n<=e.height-a){fe.bindFramebuffer(ye.FRAMEBUFFER,c);const s=e.textures[l],d=s.format,u=s.type;if(!ue.textureFormatReadable(d))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!ue.textureTypeReadable(u))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");const f=ye.createBuffer();ye.bindBuffer(ye.PIXEL_PACK_BUFFER,f),ye.bufferData(ye.PIXEL_PACK_BUFFER,o.byteLength,ye.STREAM_READ),e.textures.length>1&&ye.readBuffer(ye.COLOR_ATTACHMENT0+l),ye.readPixels(t,n,i,a,De.convert(d),De.convert(u),0);const p=null!==w?me.get(w).__webglFramebuffer:null;fe.bindFramebuffer(ye.FRAMEBUFFER,p);const m=ye.fenceSync(ye.SYNC_GPU_COMMANDS_COMPLETE,0);return ye.flush(),await(0,r.jej)(ye,m,4),ye.bindBuffer(ye.PIXEL_PACK_BUFFER,f),ye.getBufferSubData(ye.PIXEL_PACK_BUFFER,0,o),ye.deleteBuffer(f),ye.deleteSync(m),o}throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}},this.copyFramebufferToTexture=function(e,t=null,n=0){const r=Math.pow(2,-n),i=Math.floor(e.image.width*r),a=Math.floor(e.image.height*r),o=null!==t?t.x:0,s=null!==t?t.y:0;he.setTexture2D(e,0),ye.copyTexSubImage2D(ye.TEXTURE_2D,n,0,0,o,s,i,a),fe.unbindTexture()};const rt=ye.createFramebuffer(),it=ye.createFramebuffer();this.copyTextureToTexture=function(e,t,n=null,i=null,a=0,o=null){let s,l,c,d,u,f,p,m,h;null===o&&(0!==a?((0,r.mcG)("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),o=a,a=0):o=0);const _=e.isCompressedTexture?e.mipmaps[o]:e.image;if(null!==n)s=n.max.x-n.min.x,l=n.max.y-n.min.y,c=n.isBox3?n.max.z-n.min.z:1,d=n.min.x,u=n.min.y,f=n.isBox3?n.min.z:0;else{const t=Math.pow(2,-a);s=Math.floor(_.width*t),l=Math.floor(_.height*t),c=e.isDataArrayTexture?_.depth:e.isData3DTexture?Math.floor(_.depth*t):1,d=0,u=0,f=0}null!==i?(p=i.x,m=i.y,h=i.z):(p=0,m=0,h=0);const g=De.convert(t.format),v=De.convert(t.type);let E;t.isData3DTexture?(he.setTexture3D(t,0),E=ye.TEXTURE_3D):t.isDataArrayTexture||t.isCompressedArrayTexture?(he.setTexture2DArray(t,0),E=ye.TEXTURE_2D_ARRAY):(he.setTexture2D(t,0),E=ye.TEXTURE_2D),ye.pixelStorei(ye.UNPACK_FLIP_Y_WEBGL,t.flipY),ye.pixelStorei(ye.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),ye.pixelStorei(ye.UNPACK_ALIGNMENT,t.unpackAlignment);const S=ye.getParameter(ye.UNPACK_ROW_LENGTH),T=ye.getParameter(ye.UNPACK_IMAGE_HEIGHT),M=ye.getParameter(ye.UNPACK_SKIP_PIXELS),x=ye.getParameter(ye.UNPACK_SKIP_ROWS),R=ye.getParameter(ye.UNPACK_SKIP_IMAGES);ye.pixelStorei(ye.UNPACK_ROW_LENGTH,_.width),ye.pixelStorei(ye.UNPACK_IMAGE_HEIGHT,_.height),ye.pixelStorei(ye.UNPACK_SKIP_PIXELS,d),ye.pixelStorei(ye.UNPACK_SKIP_ROWS,u),ye.pixelStorei(ye.UNPACK_SKIP_IMAGES,f);const A=e.isDataArrayTexture||e.isData3DTexture,C=t.isDataArrayTexture||t.isData3DTexture;if(e.isDepthTexture){const n=me.get(e),r=me.get(t),i=me.get(n.__renderTarget),_=me.get(r.__renderTarget);fe.bindFramebuffer(ye.READ_FRAMEBUFFER,i.__webglFramebuffer),fe.bindFramebuffer(ye.DRAW_FRAMEBUFFER,_.__webglFramebuffer);for(let n=0;n<c;n++)A&&(ye.framebufferTextureLayer(ye.READ_FRAMEBUFFER,ye.COLOR_ATTACHMENT0,me.get(e).__webglTexture,a,f+n),ye.framebufferTextureLayer(ye.DRAW_FRAMEBUFFER,ye.COLOR_ATTACHMENT0,me.get(t).__webglTexture,o,h+n)),ye.blitFramebuffer(d,u,s,l,p,m,s,l,ye.DEPTH_BUFFER_BIT,ye.NEAREST);fe.bindFramebuffer(ye.READ_FRAMEBUFFER,null),fe.bindFramebuffer(ye.DRAW_FRAMEBUFFER,null)}else if(0!==a||e.isRenderTargetTexture||me.has(e)){const n=me.get(e),r=me.get(t);fe.bindFramebuffer(ye.READ_FRAMEBUFFER,rt),fe.bindFramebuffer(ye.DRAW_FRAMEBUFFER,it);for(let e=0;e<c;e++)A?ye.framebufferTextureLayer(ye.READ_FRAMEBUFFER,ye.COLOR_ATTACHMENT0,n.__webglTexture,a,f+e):ye.framebufferTexture2D(ye.READ_FRAMEBUFFER,ye.COLOR_ATTACHMENT0,ye.TEXTURE_2D,n.__webglTexture,a),C?ye.framebufferTextureLayer(ye.DRAW_FRAMEBUFFER,ye.COLOR_ATTACHMENT0,r.__webglTexture,o,h+e):ye.framebufferTexture2D(ye.DRAW_FRAMEBUFFER,ye.COLOR_ATTACHMENT0,ye.TEXTURE_2D,r.__webglTexture,o),0!==a?ye.blitFramebuffer(d,u,s,l,p,m,s,l,ye.COLOR_BUFFER_BIT,ye.NEAREST):C?ye.copyTexSubImage3D(E,o,p,m,h+e,d,u,s,l):ye.copyTexSubImage2D(E,o,p,m,d,u,s,l);fe.bindFramebuffer(ye.READ_FRAMEBUFFER,null),fe.bindFramebuffer(ye.DRAW_FRAMEBUFFER,null)}else C?e.isDataTexture||e.isData3DTexture?ye.texSubImage3D(E,o,p,m,h,s,l,c,g,v,_.data):t.isCompressedArrayTexture?ye.compressedTexSubImage3D(E,o,p,m,h,s,l,c,g,_.data):ye.texSubImage3D(E,o,p,m,h,s,l,c,g,v,_):e.isDataTexture?ye.texSubImage2D(ye.TEXTURE_2D,o,p,m,s,l,g,v,_.data):e.isCompressedTexture?ye.compressedTexSubImage2D(ye.TEXTURE_2D,o,p,m,_.width,_.height,g,_.data):ye.texSubImage2D(ye.TEXTURE_2D,o,p,m,s,l,g,v,_);ye.pixelStorei(ye.UNPACK_ROW_LENGTH,S),ye.pixelStorei(ye.UNPACK_IMAGE_HEIGHT,T),ye.pixelStorei(ye.UNPACK_SKIP_PIXELS,M),ye.pixelStorei(ye.UNPACK_SKIP_ROWS,x),ye.pixelStorei(ye.UNPACK_SKIP_IMAGES,R),0===o&&t.generateMipmaps&&ye.generateMipmap(E),fe.unbindTexture()},this.initRenderTarget=function(e){void 0===me.get(e).__webglFramebuffer&&he.setupRenderTarget(e)},this.initTexture=function(e){e.isCubeTexture?he.setTextureCube(e,0):e.isData3DTexture?he.setTexture3D(e,0):e.isDataArrayTexture||e.isCompressedArrayTexture?he.setTexture2DArray(e,0):he.setTexture2D(e,0),fe.unbindTexture()},this.resetState=function(){U=0,D=0,w=null,fe.reset(),we.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return r.TdN}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorSpace=r.ppV._getDrawingBufferColorSpace(e),t.unpackColorSpace=r.ppV._getUnpackColorSpace()}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFdBRWpCdE4sRUFBeUIsRUFDekJDLEVBQTRCLEVBQzVCQyxFQUF1QixLQUV2QjMyRCxHQUFNNkcsUUFDTmhDLEdBQWNnQyxPQUVmLEVBRW1DLG9CQUF2Qm05RCxvQkFFWEEsbUJBQW1COWEsY0FBZSxJQUFJK2EsWUFBYSxVQUFXLENBQUVDLE9BQVFuaEUsT0FJMUUsQ0FXQSxvQkFBSW9oRSxHQUVILE9BQU8sS0FFUixDQVFBLG9CQUFJbDBDLEdBRUgsT0FBT2x0QixLQUFLeXpELGlCQUViLENBRUEsb0JBQUl2bUMsQ0FBa0Juc0IsR0FFckJmLEtBQUt5ekQsa0JBQW9CMXlELEVBRXpCLE1BQU01YyxFQUFLNmIsS0FBS3luQixhQUNoQnRqQyxFQUFHazlFLHdCQUEwQixNQUFnQkMsNEJBQTZCdmdFLEdBQzFFNWMsRUFBR285RSxpQkFBbUIsTUFBZ0JDLHNCQUV2QyxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHJlbmVvcy9zbGlkZXIuZWRpdG9yLy4vbm9kZV9tb2R1bGVzL3RocmVlL2J1aWxkL3RocmVlLm1vZHVsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxMC0yMDI1IFRocmVlLmpzIEF1dGhvcnNcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbiAqL1xuaW1wb3J0IHsgTWF0cml4MywgVmVjdG9yMiwgQ29sb3IsIG1lcmdlVW5pZm9ybXMsIFZlY3RvcjMsIEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nLCBNZXNoLCBCb3hHZW9tZXRyeSwgU2hhZGVyTWF0ZXJpYWwsIEJhY2tTaWRlLCBjbG9uZVVuaWZvcm1zLCBFdWxlciwgTWF0cml4NCwgQ29sb3JNYW5hZ2VtZW50LCBTUkdCVHJhbnNmZXIsIFBsYW5lR2VvbWV0cnksIEZyb250U2lkZSwgZ2V0VW5saXRVbmlmb3JtQ29sb3JTcGFjZSwgSW50VHlwZSwgSGFsZkZsb2F0VHlwZSwgVW5zaWduZWRCeXRlVHlwZSwgRmxvYXRUeXBlLCBSR0JBRm9ybWF0LCBQbGFuZSwgRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcsIEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nLCBXZWJHTEN1YmVSZW5kZXJUYXJnZXQsIEN1YmVSZWZsZWN0aW9uTWFwcGluZywgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nLCBPcnRob2dyYXBoaWNDYW1lcmEsIFBlcnNwZWN0aXZlQ2FtZXJhLCBOb1RvbmVNYXBwaW5nLCBNZXNoQmFzaWNNYXRlcmlhbCwgTm9CbGVuZGluZywgV2ViR0xSZW5kZXJUYXJnZXQsIEJ1ZmZlckdlb21ldHJ5LCBCdWZmZXJBdHRyaWJ1dGUsIExpbmVhclNSR0JDb2xvclNwYWNlLCBMaW5lYXJGaWx0ZXIsIHdhcm5PbmNlLCBVaW50MzJCdWZmZXJBdHRyaWJ1dGUsIFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSwgYXJyYXlOZWVkc1VpbnQzMiwgVmVjdG9yNCwgRGF0YUFycmF5VGV4dHVyZSwgQ3ViZVRleHR1cmUsIERhdGEzRFRleHR1cmUsIExlc3NFcXVhbENvbXBhcmUsIERlcHRoVGV4dHVyZSwgVGV4dHVyZSwgR0xTTDMsIFBDRlNoYWRvd01hcCwgUENGU29mdFNoYWRvd01hcCwgVlNNU2hhZG93TWFwLCBDdXN0b21Ub25lTWFwcGluZywgTmV1dHJhbFRvbmVNYXBwaW5nLCBBZ1hUb25lTWFwcGluZywgQUNFU0ZpbG1pY1RvbmVNYXBwaW5nLCBDaW5lb25Ub25lTWFwcGluZywgUmVpbmhhcmRUb25lTWFwcGluZywgTGluZWFyVG9uZU1hcHBpbmcsIExpbmVhclRyYW5zZmVyLCBBZGRPcGVyYXRpb24sIE1peE9wZXJhdGlvbiwgTXVsdGlwbHlPcGVyYXRpb24sIFVuaWZvcm1zVXRpbHMsIERvdWJsZVNpZGUsIE5vcm1hbEJsZW5kaW5nLCBUYW5nZW50U3BhY2VOb3JtYWxNYXAsIE9iamVjdFNwYWNlTm9ybWFsTWFwLCBMYXllcnMsIEZydXN0dW0sIE1lc2hEZXB0aE1hdGVyaWFsLCBSR0JBRGVwdGhQYWNraW5nLCBNZXNoRGlzdGFuY2VNYXRlcmlhbCwgTmVhcmVzdEZpbHRlciwgTGVzc0VxdWFsRGVwdGgsIFJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uLCBTdWJ0cmFjdEVxdWF0aW9uLCBBZGRFcXVhdGlvbiwgT25lTWludXNDb25zdGFudEFscGhhRmFjdG9yLCBDb25zdGFudEFscGhhRmFjdG9yLCBPbmVNaW51c0NvbnN0YW50Q29sb3JGYWN0b3IsIENvbnN0YW50Q29sb3JGYWN0b3IsIE9uZU1pbnVzRHN0QWxwaGFGYWN0b3IsIE9uZU1pbnVzRHN0Q29sb3JGYWN0b3IsIE9uZU1pbnVzU3JjQWxwaGFGYWN0b3IsIE9uZU1pbnVzU3JjQ29sb3JGYWN0b3IsIERzdEFscGhhRmFjdG9yLCBEc3RDb2xvckZhY3RvciwgU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciwgU3JjQWxwaGFGYWN0b3IsIFNyY0NvbG9yRmFjdG9yLCBPbmVGYWN0b3IsIFplcm9GYWN0b3IsIE5vdEVxdWFsRGVwdGgsIEdyZWF0ZXJEZXB0aCwgR3JlYXRlckVxdWFsRGVwdGgsIEVxdWFsRGVwdGgsIExlc3NEZXB0aCwgQWx3YXlzRGVwdGgsIE5ldmVyRGVwdGgsIEN1bGxGYWNlTm9uZSwgQ3VsbEZhY2VCYWNrLCBDdWxsRmFjZUZyb250LCBDdXN0b21CbGVuZGluZywgTXVsdGlwbHlCbGVuZGluZywgU3VidHJhY3RpdmVCbGVuZGluZywgQWRkaXRpdmVCbGVuZGluZywgTWluRXF1YXRpb24sIE1heEVxdWF0aW9uLCBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nLCBDbGFtcFRvRWRnZVdyYXBwaW5nLCBSZXBlYXRXcmFwcGluZywgTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyLCBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyLCBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyLCBOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlciwgTm90RXF1YWxDb21wYXJlLCBHcmVhdGVyQ29tcGFyZSwgR3JlYXRlckVxdWFsQ29tcGFyZSwgRXF1YWxDb21wYXJlLCBMZXNzQ29tcGFyZSwgQWx3YXlzQ29tcGFyZSwgTmV2ZXJDb21wYXJlLCBOb0NvbG9yU3BhY2UsIERlcHRoU3RlbmNpbEZvcm1hdCwgZ2V0Qnl0ZUxlbmd0aCwgRGVwdGhGb3JtYXQsIFVuc2lnbmVkSW50VHlwZSwgVW5zaWduZWRJbnQyNDhUeXBlLCBVbnNpZ25lZFNob3J0VHlwZSwgY3JlYXRlRWxlbWVudE5TLCBVbnNpZ25lZFNob3J0NDQ0NFR5cGUsIFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSwgVW5zaWduZWRJbnQ1OTk5VHlwZSwgVW5zaWduZWRJbnQxMDExMTFUeXBlLCBCeXRlVHlwZSwgU2hvcnRUeXBlLCBBbHBoYUZvcm1hdCwgUkdCRm9ybWF0LCBSZWRGb3JtYXQsIFJlZEludGVnZXJGb3JtYXQsIFJHRm9ybWF0LCBSR0ludGVnZXJGb3JtYXQsIFJHQkFJbnRlZ2VyRm9ybWF0LCBSR0JfUzNUQ19EWFQxX0Zvcm1hdCwgUkdCQV9TM1RDX0RYVDFfRm9ybWF0LCBSR0JBX1MzVENfRFhUM19Gb3JtYXQsIFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCwgUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQsIFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0LCBSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQsIFJHQkFfUFZSVENfMkJQUFYxX0Zvcm1hdCwgUkdCX0VUQzFfRm9ybWF0LCBSR0JfRVRDMl9Gb3JtYXQsIFJHQkFfRVRDMl9FQUNfRm9ybWF0LCBSR0JBX0FTVENfNHg0X0Zvcm1hdCwgUkdCQV9BU1RDXzV4NF9Gb3JtYXQsIFJHQkFfQVNUQ181eDVfRm9ybWF0LCBSR0JBX0FTVENfNng1X0Zvcm1hdCwgUkdCQV9BU1RDXzZ4Nl9Gb3JtYXQsIFJHQkFfQVNUQ184eDVfRm9ybWF0LCBSR0JBX0FTVENfOHg2X0Zvcm1hdCwgUkdCQV9BU1RDXzh4OF9Gb3JtYXQsIFJHQkFfQVNUQ18xMHg1X0Zvcm1hdCwgUkdCQV9BU1RDXzEweDZfRm9ybWF0LCBSR0JBX0FTVENfMTB4OF9Gb3JtYXQsIFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQsIFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQsIFJHQkFfQVNUQ18xMngxMl9Gb3JtYXQsIFJHQkFfQlBUQ19Gb3JtYXQsIFJHQl9CUFRDX1NJR05FRF9Gb3JtYXQsIFJHQl9CUFRDX1VOU0lHTkVEX0Zvcm1hdCwgUkVEX1JHVEMxX0Zvcm1hdCwgU0lHTkVEX1JFRF9SR1RDMV9Gb3JtYXQsIFJFRF9HUkVFTl9SR1RDMl9Gb3JtYXQsIFNJR05FRF9SRURfR1JFRU5fUkdUQzJfRm9ybWF0LCBFeHRlcm5hbFRleHR1cmUsIEV2ZW50RGlzcGF0Y2hlciwgQXJyYXlDYW1lcmEsIFdlYlhSQ29udHJvbGxlciwgUkFEMkRFRywgY3JlYXRlQ2FudmFzRWxlbWVudCwgU1JHQkNvbG9yU3BhY2UsIFJFVklTSU9OLCBXZWJHTENvb3JkaW5hdGVTeXN0ZW0sIHByb2JlQXN5bmMgfSBmcm9tICcuL3RocmVlLmNvcmUuanMnO1xuZXhwb3J0IHsgQWRkaXRpdmVBbmltYXRpb25CbGVuZE1vZGUsIEFsd2F5c1N0ZW5jaWxGdW5jLCBBbWJpZW50TGlnaHQsIEFuaW1hdGlvbkFjdGlvbiwgQW5pbWF0aW9uQ2xpcCwgQW5pbWF0aW9uTG9hZGVyLCBBbmltYXRpb25NaXhlciwgQW5pbWF0aW9uT2JqZWN0R3JvdXAsIEFuaW1hdGlvblV0aWxzLCBBcmNDdXJ2ZSwgQXJyb3dIZWxwZXIsIEF0dGFjaGVkQmluZE1vZGUsIEF1ZGlvLCBBdWRpb0FuYWx5c2VyLCBBdWRpb0NvbnRleHQsIEF1ZGlvTGlzdGVuZXIsIEF1ZGlvTG9hZGVyLCBBeGVzSGVscGVyLCBCYXNpY0RlcHRoUGFja2luZywgQmFzaWNTaGFkb3dNYXAsIEJhdGNoZWRNZXNoLCBCb25lLCBCb29sZWFuS2V5ZnJhbWVUcmFjaywgQm94MiwgQm94MywgQm94M0hlbHBlciwgQm94SGVscGVyLCBCdWZmZXJHZW9tZXRyeUxvYWRlciwgQ2FjaGUsIENhbWVyYSwgQ2FtZXJhSGVscGVyLCBDYW52YXNUZXh0dXJlLCBDYXBzdWxlR2VvbWV0cnksIENhdG11bGxSb21DdXJ2ZTMsIENpcmNsZUdlb21ldHJ5LCBDbG9jaywgQ29sb3JLZXlmcmFtZVRyYWNrLCBDb21wcmVzc2VkQXJyYXlUZXh0dXJlLCBDb21wcmVzc2VkQ3ViZVRleHR1cmUsIENvbXByZXNzZWRUZXh0dXJlLCBDb21wcmVzc2VkVGV4dHVyZUxvYWRlciwgQ29uZUdlb21ldHJ5LCBDb250cm9scywgQ3ViZUNhbWVyYSwgQ3ViZVRleHR1cmVMb2FkZXIsIEN1YmljQmV6aWVyQ3VydmUsIEN1YmljQmV6aWVyQ3VydmUzLCBDdWJpY0ludGVycG9sYW50LCBDdWxsRmFjZUZyb250QmFjaywgQ3VydmUsIEN1cnZlUGF0aCwgQ3lsaW5kZXJHZW9tZXRyeSwgQ3lsaW5kcmljYWwsIERhdGFUZXh0dXJlLCBEYXRhVGV4dHVyZUxvYWRlciwgRGF0YVV0aWxzLCBEZWNyZW1lbnRTdGVuY2lsT3AsIERlY3JlbWVudFdyYXBTdGVuY2lsT3AsIERlZmF1bHRMb2FkaW5nTWFuYWdlciwgRGV0YWNoZWRCaW5kTW9kZSwgRGlyZWN0aW9uYWxMaWdodCwgRGlyZWN0aW9uYWxMaWdodEhlbHBlciwgRGlzY3JldGVJbnRlcnBvbGFudCwgRG9kZWNhaGVkcm9uR2VvbWV0cnksIER5bmFtaWNDb3B5VXNhZ2UsIER5bmFtaWNEcmF3VXNhZ2UsIER5bmFtaWNSZWFkVXNhZ2UsIEVkZ2VzR2VvbWV0cnksIEVsbGlwc2VDdXJ2ZSwgRXF1YWxTdGVuY2lsRnVuYywgRXh0cnVkZUdlb21ldHJ5LCBGaWxlTG9hZGVyLCBGbG9hdDE2QnVmZmVyQXR0cmlidXRlLCBGbG9hdDMyQnVmZmVyQXR0cmlidXRlLCBGb2csIEZvZ0V4cDIsIEZyYW1lYnVmZmVyVGV4dHVyZSwgRnJ1c3R1bUFycmF5LCBHTEJ1ZmZlckF0dHJpYnV0ZSwgR0xTTDEsIEdyZWF0ZXJFcXVhbFN0ZW5jaWxGdW5jLCBHcmVhdGVyU3RlbmNpbEZ1bmMsIEdyaWRIZWxwZXIsIEdyb3VwLCBIZW1pc3BoZXJlTGlnaHQsIEhlbWlzcGhlcmVMaWdodEhlbHBlciwgSWNvc2FoZWRyb25HZW9tZXRyeSwgSW1hZ2VCaXRtYXBMb2FkZXIsIEltYWdlTG9hZGVyLCBJbWFnZVV0aWxzLCBJbmNyZW1lbnRTdGVuY2lsT3AsIEluY3JlbWVudFdyYXBTdGVuY2lsT3AsIEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSwgSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnksIEluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyLCBJbnN0YW5jZWRNZXNoLCBJbnQxNkJ1ZmZlckF0dHJpYnV0ZSwgSW50MzJCdWZmZXJBdHRyaWJ1dGUsIEludDhCdWZmZXJBdHRyaWJ1dGUsIEludGVybGVhdmVkQnVmZmVyLCBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSwgSW50ZXJwb2xhbnQsIEludGVycG9sYXRlRGlzY3JldGUsIEludGVycG9sYXRlTGluZWFyLCBJbnRlcnBvbGF0ZVNtb290aCwgSW50ZXJwb2xhdGlvblNhbXBsaW5nTW9kZSwgSW50ZXJwb2xhdGlvblNhbXBsaW5nVHlwZSwgSW52ZXJ0U3RlbmNpbE9wLCBLZWVwU3RlbmNpbE9wLCBLZXlmcmFtZVRyYWNrLCBMT0QsIExhdGhlR2VvbWV0cnksIExlc3NFcXVhbFN0ZW5jaWxGdW5jLCBMZXNzU3RlbmNpbEZ1bmMsIExpZ2h0LCBMaWdodFByb2JlLCBMaW5lLCBMaW5lMywgTGluZUJhc2ljTWF0ZXJpYWwsIExpbmVDdXJ2ZSwgTGluZUN1cnZlMywgTGluZURhc2hlZE1hdGVyaWFsLCBMaW5lTG9vcCwgTGluZVNlZ21lbnRzLCBMaW5lYXJJbnRlcnBvbGFudCwgTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyLCBMaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyLCBMb2FkZXIsIExvYWRlclV0aWxzLCBMb2FkaW5nTWFuYWdlciwgTG9vcE9uY2UsIExvb3BQaW5nUG9uZywgTG9vcFJlcGVhdCwgTU9VU0UsIE1hdGVyaWFsLCBNYXRlcmlhbExvYWRlciwgTWF0aFV0aWxzLCBNYXRyaXgyLCBNZXNoTGFtYmVydE1hdGVyaWFsLCBNZXNoTWF0Y2FwTWF0ZXJpYWwsIE1lc2hOb3JtYWxNYXRlcmlhbCwgTWVzaFBob25nTWF0ZXJpYWwsIE1lc2hQaHlzaWNhbE1hdGVyaWFsLCBNZXNoU3RhbmRhcmRNYXRlcmlhbCwgTWVzaFRvb25NYXRlcmlhbCwgTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlciwgTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXIsIE5ldmVyU3RlbmNpbEZ1bmMsIE5vcm1hbEFuaW1hdGlvbkJsZW5kTW9kZSwgTm90RXF1YWxTdGVuY2lsRnVuYywgTnVtYmVyS2V5ZnJhbWVUcmFjaywgT2JqZWN0M0QsIE9iamVjdExvYWRlciwgT2N0YWhlZHJvbkdlb21ldHJ5LCBQYXRoLCBQbGFuZUhlbHBlciwgUG9pbnRMaWdodCwgUG9pbnRMaWdodEhlbHBlciwgUG9pbnRzLCBQb2ludHNNYXRlcmlhbCwgUG9sYXJHcmlkSGVscGVyLCBQb2x5aGVkcm9uR2VvbWV0cnksIFBvc2l0aW9uYWxBdWRpbywgUHJvcGVydHlCaW5kaW5nLCBQcm9wZXJ0eU1peGVyLCBRdWFkcmF0aWNCZXppZXJDdXJ2ZSwgUXVhZHJhdGljQmV6aWVyQ3VydmUzLCBRdWF0ZXJuaW9uLCBRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjaywgUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50LCBSR0JEZXB0aFBhY2tpbmcsIFJHQkludGVnZXJGb3JtYXQsIFJHRGVwdGhQYWNraW5nLCBSYXdTaGFkZXJNYXRlcmlhbCwgUmF5LCBSYXljYXN0ZXIsIFJlY3RBcmVhTGlnaHQsIFJlbmRlclRhcmdldCwgUmVuZGVyVGFyZ2V0M0QsIFJlcGxhY2VTdGVuY2lsT3AsIFJpbmdHZW9tZXRyeSwgU2NlbmUsIFNoYWRvd01hdGVyaWFsLCBTaGFwZSwgU2hhcGVHZW9tZXRyeSwgU2hhcGVQYXRoLCBTaGFwZVV0aWxzLCBTa2VsZXRvbiwgU2tlbGV0b25IZWxwZXIsIFNraW5uZWRNZXNoLCBTb3VyY2UsIFNwaGVyZSwgU3BoZXJlR2VvbWV0cnksIFNwaGVyaWNhbCwgU3BoZXJpY2FsSGFybW9uaWNzMywgU3BsaW5lQ3VydmUsIFNwb3RMaWdodCwgU3BvdExpZ2h0SGVscGVyLCBTcHJpdGUsIFNwcml0ZU1hdGVyaWFsLCBTdGF0aWNDb3B5VXNhZ2UsIFN0YXRpY0RyYXdVc2FnZSwgU3RhdGljUmVhZFVzYWdlLCBTdGVyZW9DYW1lcmEsIFN0cmVhbUNvcHlVc2FnZSwgU3RyZWFtRHJhd1VzYWdlLCBTdHJlYW1SZWFkVXNhZ2UsIFN0cmluZ0tleWZyYW1lVHJhY2ssIFRPVUNILCBUZXRyYWhlZHJvbkdlb21ldHJ5LCBUZXh0dXJlTG9hZGVyLCBUZXh0dXJlVXRpbHMsIFRpbWVyLCBUaW1lc3RhbXBRdWVyeSwgVG9ydXNHZW9tZXRyeSwgVG9ydXNLbm90R2VvbWV0cnksIFRyaWFuZ2xlLCBUcmlhbmdsZUZhbkRyYXdNb2RlLCBUcmlhbmdsZVN0cmlwRHJhd01vZGUsIFRyaWFuZ2xlc0RyYXdNb2RlLCBUdWJlR2VvbWV0cnksIFVWTWFwcGluZywgVWludDhCdWZmZXJBdHRyaWJ1dGUsIFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSwgVW5pZm9ybSwgVW5pZm9ybXNHcm91cCwgVmVjdG9yS2V5ZnJhbWVUcmFjaywgVmlkZW9GcmFtZVRleHR1cmUsIFZpZGVvVGV4dHVyZSwgV2ViR0wzRFJlbmRlclRhcmdldCwgV2ViR0xBcnJheVJlbmRlclRhcmdldCwgV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSwgV2lyZWZyYW1lR2VvbWV0cnksIFdyYXBBcm91bmRFbmRpbmcsIFplcm9DdXJ2YXR1cmVFbmRpbmcsIFplcm9TbG9wZUVuZGluZywgWmVyb1N0ZW5jaWxPcCB9IGZyb20gJy4vdGhyZWUuY29yZS5qcyc7XG5cbmZ1bmN0aW9uIFdlYkdMQW5pbWF0aW9uKCkge1xuXG5cdGxldCBjb250ZXh0ID0gbnVsbDtcblx0bGV0IGlzQW5pbWF0aW5nID0gZmFsc2U7XG5cdGxldCBhbmltYXRpb25Mb29wID0gbnVsbDtcblx0bGV0IHJlcXVlc3RJZCA9IG51bGw7XG5cblx0ZnVuY3Rpb24gb25BbmltYXRpb25GcmFtZSggdGltZSwgZnJhbWUgKSB7XG5cblx0XHRhbmltYXRpb25Mb29wKCB0aW1lLCBmcmFtZSApO1xuXG5cdFx0cmVxdWVzdElkID0gY29udGV4dC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIG9uQW5pbWF0aW9uRnJhbWUgKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdHN0YXJ0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGlmICggaXNBbmltYXRpbmcgPT09IHRydWUgKSByZXR1cm47XG5cdFx0XHRpZiAoIGFuaW1hdGlvbkxvb3AgPT09IG51bGwgKSByZXR1cm47XG5cblx0XHRcdHJlcXVlc3RJZCA9IGNvbnRleHQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBvbkFuaW1hdGlvbkZyYW1lICk7XG5cblx0XHRcdGlzQW5pbWF0aW5nID0gdHJ1ZTtcblxuXHRcdH0sXG5cblx0XHRzdG9wOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnRleHQuY2FuY2VsQW5pbWF0aW9uRnJhbWUoIHJlcXVlc3RJZCApO1xuXG5cdFx0XHRpc0FuaW1hdGluZyA9IGZhbHNlO1xuXG5cdFx0fSxcblxuXHRcdHNldEFuaW1hdGlvbkxvb3A6IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHRcdGFuaW1hdGlvbkxvb3AgPSBjYWxsYmFjaztcblxuXHRcdH0sXG5cblx0XHRzZXRDb250ZXh0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb250ZXh0ID0gdmFsdWU7XG5cblx0XHR9XG5cblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTEF0dHJpYnV0ZXMoIGdsICkge1xuXG5cdGNvbnN0IGJ1ZmZlcnMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciggYXR0cmlidXRlLCBidWZmZXJUeXBlICkge1xuXG5cdFx0Y29uc3QgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7XG5cdFx0Y29uc3QgdXNhZ2UgPSBhdHRyaWJ1dGUudXNhZ2U7XG5cdFx0Y29uc3Qgc2l6ZSA9IGFycmF5LmJ5dGVMZW5ndGg7XG5cblx0XHRjb25zdCBidWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcblxuXHRcdGdsLmJpbmRCdWZmZXIoIGJ1ZmZlclR5cGUsIGJ1ZmZlciApO1xuXHRcdGdsLmJ1ZmZlckRhdGEoIGJ1ZmZlclR5cGUsIGFycmF5LCB1c2FnZSApO1xuXG5cdFx0YXR0cmlidXRlLm9uVXBsb2FkQ2FsbGJhY2soKTtcblxuXHRcdGxldCB0eXBlO1xuXG5cdFx0aWYgKCBhcnJheSBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IGdsLkZMT0FUO1xuXG5cdFx0fSBlbHNlIGlmICggdHlwZW9mIEZsb2F0MTZBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgYXJyYXkgaW5zdGFuY2VvZiBGbG9hdDE2QXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSBnbC5IQUxGX0ZMT0FUO1xuXG5cdFx0fSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBVaW50MTZBcnJheSApIHtcblxuXHRcdFx0aWYgKCBhdHRyaWJ1dGUuaXNGbG9hdDE2QnVmZmVyQXR0cmlidXRlICkge1xuXG5cdFx0XHRcdHR5cGUgPSBnbC5IQUxGX0ZMT0FUO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHR5cGUgPSBnbC5VTlNJR05FRF9TSE9SVDtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBJbnQxNkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gZ2wuU0hPUlQ7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIFVpbnQzMkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gZ2wuVU5TSUdORURfSU5UO1xuXG5cdFx0fSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBJbnQzMkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gZ2wuSU5UO1xuXG5cdFx0fSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBJbnQ4QXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSBnbC5CWVRFO1xuXG5cdFx0fSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBVaW50OEFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gZ2wuVU5TSUdORURfQllURTtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDhDbGFtcGVkQXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSBnbC5VTlNJR05FRF9CWVRFO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuV2ViR0xBdHRyaWJ1dGVzOiBVbnN1cHBvcnRlZCBidWZmZXIgZGF0YSBmb3JtYXQ6ICcgKyBhcnJheSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGJ1ZmZlcjogYnVmZmVyLFxuXHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdGJ5dGVzUGVyRWxlbWVudDogYXJyYXkuQllURVNfUEVSX0VMRU1FTlQsXG5cdFx0XHR2ZXJzaW9uOiBhdHRyaWJ1dGUudmVyc2lvbixcblx0XHRcdHNpemU6IHNpemVcblx0XHR9O1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVCdWZmZXIoIGJ1ZmZlciwgYXR0cmlidXRlLCBidWZmZXJUeXBlICkge1xuXG5cdFx0Y29uc3QgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7XG5cdFx0Y29uc3QgdXBkYXRlUmFuZ2VzID0gYXR0cmlidXRlLnVwZGF0ZVJhbmdlcztcblxuXHRcdGdsLmJpbmRCdWZmZXIoIGJ1ZmZlclR5cGUsIGJ1ZmZlciApO1xuXG5cdFx0aWYgKCB1cGRhdGVSYW5nZXMubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHQvLyBOb3QgdXNpbmcgdXBkYXRlIHJhbmdlc1xuXHRcdFx0Z2wuYnVmZmVyU3ViRGF0YSggYnVmZmVyVHlwZSwgMCwgYXJyYXkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEJlZm9yZSBhcHBseWluZyB1cGRhdGUgcmFuZ2VzLCB3ZSBtZXJnZSBhbnkgYWRqYWNlbnQgLyBvdmVybGFwcGluZ1xuXHRcdFx0Ly8gcmFuZ2VzIHRvIHJlZHVjZSBsb2FkIG9uIGBnbC5idWZmZXJTdWJEYXRhYC4gRW1waXJpY2FsbHksIHRoaXMgaGFzIGxlZFxuXHRcdFx0Ly8gdG8gcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnRzIGZvciBhcHBsaWNhdGlvbnMgd2hpY2ggbWFrZSBoZWF2eSB1c2Ugb2Zcblx0XHRcdC8vIHVwZGF0ZSByYW5nZXMuIExpa2VseSBkdWUgdG8gR1BVIGNvbW1hbmQgb3ZlcmhlYWQuXG5cdFx0XHQvL1xuXHRcdFx0Ly8gTm90ZSB0aGF0IHRvIHJlZHVjZSBnYXJiYWdlIGNvbGxlY3Rpb24gYmV0d2VlbiBmcmFtZXMsIHdlIG1lcmdlIHRoZVxuXHRcdFx0Ly8gdXBkYXRlIHJhbmdlcyBpbi1wbGFjZS4gVGhpcyBpcyBzYWZlIGJlY2F1c2UgdGhpcyBtZXRob2Qgd2lsbCBjbGVhciB0aGVcblx0XHRcdC8vIHVwZGF0ZSByYW5nZXMgb25jZSB1cGRhdGVkLlxuXG5cdFx0XHR1cGRhdGVSYW5nZXMuc29ydCggKCBhLCBiICkgPT4gYS5zdGFydCAtIGIuc3RhcnQgKTtcblxuXHRcdFx0Ly8gVG8gbWVyZ2UgdGhlIHVwZGF0ZSByYW5nZXMgaW4tcGxhY2UsIHdlIHdvcmsgZnJvbSBsZWZ0IHRvIHJpZ2h0IGluIHRoZVxuXHRcdFx0Ly8gZXhpc3RpbmcgdXBkYXRlUmFuZ2VzIGFycmF5LCBtZXJnaW5nIHJhbmdlcy4gVGhpcyBtYXkgcmVzdWx0IGluIGEgZmluYWxcblx0XHRcdC8vIGFycmF5IHdoaWNoIGlzIHNtYWxsZXIgdGhhbiB0aGUgb3JpZ2luYWwuIFRoaXMgaW5kZXggdHJhY2tzIHRoZSBsYXN0XG5cdFx0XHQvLyBpbmRleCByZXByZXNlbnRpbmcgYSBtZXJnZWQgcmFuZ2UsIGFueSBkYXRhIGFmdGVyIHRoaXMgaW5kZXggY2FuIGJlXG5cdFx0XHQvLyB0cmltbWVkIG9uY2UgdGhlIG1lcmdlIGFsZ29yaXRobSBpcyBjb21wbGV0ZWQuXG5cdFx0XHRsZXQgbWVyZ2VJbmRleCA9IDA7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMTsgaSA8IHVwZGF0ZVJhbmdlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgcHJldmlvdXNSYW5nZSA9IHVwZGF0ZVJhbmdlc1sgbWVyZ2VJbmRleCBdO1xuXHRcdFx0XHRjb25zdCByYW5nZSA9IHVwZGF0ZVJhbmdlc1sgaSBdO1xuXG5cdFx0XHRcdC8vIFdlIGFkZCBvbmUgaGVyZSB0byBtZXJnZSBhZGphY2VudCByYW5nZXMuIFRoaXMgaXMgc2FmZSBiZWNhdXNlIHJhbmdlc1xuXHRcdFx0XHQvLyBvcGVyYXRlIG92ZXIgcG9zaXRpdmUgaW50ZWdlcnMuXG5cdFx0XHRcdGlmICggcmFuZ2Uuc3RhcnQgPD0gcHJldmlvdXNSYW5nZS5zdGFydCArIHByZXZpb3VzUmFuZ2UuY291bnQgKyAxICkge1xuXG5cdFx0XHRcdFx0cHJldmlvdXNSYW5nZS5jb3VudCA9IE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0cHJldmlvdXNSYW5nZS5jb3VudCxcblx0XHRcdFx0XHRcdHJhbmdlLnN0YXJ0ICsgcmFuZ2UuY291bnQgLSBwcmV2aW91c1JhbmdlLnN0YXJ0XG5cdFx0XHRcdFx0KTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0KysgbWVyZ2VJbmRleDtcblx0XHRcdFx0XHR1cGRhdGVSYW5nZXNbIG1lcmdlSW5kZXggXSA9IHJhbmdlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmltIHRoZSBhcnJheSB0byBvbmx5IGNvbnRhaW4gdGhlIG1lcmdlZCByYW5nZXMuXG5cdFx0XHR1cGRhdGVSYW5nZXMubGVuZ3RoID0gbWVyZ2VJbmRleCArIDE7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHVwZGF0ZVJhbmdlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHJhbmdlID0gdXBkYXRlUmFuZ2VzWyBpIF07XG5cblx0XHRcdFx0Z2wuYnVmZmVyU3ViRGF0YSggYnVmZmVyVHlwZSwgcmFuZ2Uuc3RhcnQgKiBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCxcblx0XHRcdFx0XHRhcnJheSwgcmFuZ2Uuc3RhcnQsIHJhbmdlLmNvdW50ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0YXR0cmlidXRlLmNsZWFyVXBkYXRlUmFuZ2VzKCk7XG5cblx0XHR9XG5cblx0XHRhdHRyaWJ1dGUub25VcGxvYWRDYWxsYmFjaygpO1xuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIGdldCggYXR0cmlidXRlICkge1xuXG5cdFx0aWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZS5kYXRhO1xuXG5cdFx0cmV0dXJuIGJ1ZmZlcnMuZ2V0KCBhdHRyaWJ1dGUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVtb3ZlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkgYXR0cmlidXRlID0gYXR0cmlidXRlLmRhdGE7XG5cblx0XHRjb25zdCBkYXRhID0gYnVmZmVycy5nZXQoIGF0dHJpYnV0ZSApO1xuXG5cdFx0aWYgKCBkYXRhICkge1xuXG5cdFx0XHRnbC5kZWxldGVCdWZmZXIoIGRhdGEuYnVmZmVyICk7XG5cblx0XHRcdGJ1ZmZlcnMuZGVsZXRlKCBhdHRyaWJ1dGUgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUgKSB7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkgYXR0cmlidXRlID0gYXR0cmlidXRlLmRhdGE7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5pc0dMQnVmZmVyQXR0cmlidXRlICkge1xuXG5cdFx0XHRjb25zdCBjYWNoZWQgPSBidWZmZXJzLmdldCggYXR0cmlidXRlICk7XG5cblx0XHRcdGlmICggISBjYWNoZWQgfHwgY2FjaGVkLnZlcnNpb24gPCBhdHRyaWJ1dGUudmVyc2lvbiApIHtcblxuXHRcdFx0XHRidWZmZXJzLnNldCggYXR0cmlidXRlLCB7XG5cdFx0XHRcdFx0YnVmZmVyOiBhdHRyaWJ1dGUuYnVmZmVyLFxuXHRcdFx0XHRcdHR5cGU6IGF0dHJpYnV0ZS50eXBlLFxuXHRcdFx0XHRcdGJ5dGVzUGVyRWxlbWVudDogYXR0cmlidXRlLmVsZW1lbnRTaXplLFxuXHRcdFx0XHRcdHZlcnNpb246IGF0dHJpYnV0ZS52ZXJzaW9uXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRjb25zdCBkYXRhID0gYnVmZmVycy5nZXQoIGF0dHJpYnV0ZSApO1xuXG5cdFx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJ1ZmZlcnMuc2V0KCBhdHRyaWJ1dGUsIGNyZWF0ZUJ1ZmZlciggYXR0cmlidXRlLCBidWZmZXJUeXBlICkgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGRhdGEudmVyc2lvbiA8IGF0dHJpYnV0ZS52ZXJzaW9uICkge1xuXG5cdFx0XHRpZiAoIGRhdGEuc2l6ZSAhPT0gYXR0cmlidXRlLmFycmF5LmJ5dGVMZW5ndGggKSB7XG5cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuV2ViR0xBdHRyaWJ1dGVzOiBUaGUgc2l6ZSBvZiB0aGUgYnVmZmVyIGF0dHJpYnV0ZVxcJ3MgYXJyYXkgYnVmZmVyIGRvZXMgbm90IG1hdGNoIHRoZSBvcmlnaW5hbCBzaXplLiBSZXNpemluZyBidWZmZXIgYXR0cmlidXRlcyBpcyBub3Qgc3VwcG9ydGVkLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGVCdWZmZXIoIGRhdGEuYnVmZmVyLCBhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUgKTtcblxuXHRcdFx0ZGF0YS52ZXJzaW9uID0gYXR0cmlidXRlLnZlcnNpb247XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRnZXQ6IGdldCxcblx0XHRyZW1vdmU6IHJlbW92ZSxcblx0XHR1cGRhdGU6IHVwZGF0ZVxuXG5cdH07XG5cbn1cblxudmFyIGFscGhhaGFzaF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BTFBIQUhBU0hcXG5cXHRpZiAoIGRpZmZ1c2VDb2xvci5hIDwgZ2V0QWxwaGFIYXNoVGhyZXNob2xkKCB2UG9zaXRpb24gKSApIGRpc2NhcmQ7XFxuI2VuZGlmXCI7XG5cbnZhciBhbHBoYWhhc2hfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BTFBIQUhBU0hcXG5cXHRjb25zdCBmbG9hdCBBTFBIQV9IQVNIX1NDQUxFID0gMC4wNTtcXG5cXHRmbG9hdCBoYXNoMkQoIHZlYzIgdmFsdWUgKSB7XFxuXFx0XFx0cmV0dXJuIGZyYWN0KCAxLjBlNCAqIHNpbiggMTcuMCAqIHZhbHVlLnggKyAwLjEgKiB2YWx1ZS55ICkgKiAoIDAuMSArIGFicyggc2luKCAxMy4wICogdmFsdWUueSArIHZhbHVlLnggKSApICkgKTtcXG5cXHR9XFxuXFx0ZmxvYXQgaGFzaDNEKCB2ZWMzIHZhbHVlICkge1xcblxcdFxcdHJldHVybiBoYXNoMkQoIHZlYzIoIGhhc2gyRCggdmFsdWUueHkgKSwgdmFsdWUueiApICk7XFxuXFx0fVxcblxcdGZsb2F0IGdldEFscGhhSGFzaFRocmVzaG9sZCggdmVjMyBwb3NpdGlvbiApIHtcXG5cXHRcXHRmbG9hdCBtYXhEZXJpdiA9IG1heChcXG5cXHRcXHRcXHRsZW5ndGgoIGRGZHgoIHBvc2l0aW9uLnh5eiApICksXFxuXFx0XFx0XFx0bGVuZ3RoKCBkRmR5KCBwb3NpdGlvbi54eXogKSApXFxuXFx0XFx0KTtcXG5cXHRcXHRmbG9hdCBwaXhTY2FsZSA9IDEuMCAvICggQUxQSEFfSEFTSF9TQ0FMRSAqIG1heERlcml2ICk7XFxuXFx0XFx0dmVjMiBwaXhTY2FsZXMgPSB2ZWMyKFxcblxcdFxcdFxcdGV4cDIoIGZsb29yKCBsb2cyKCBwaXhTY2FsZSApICkgKSxcXG5cXHRcXHRcXHRleHAyKCBjZWlsKCBsb2cyKCBwaXhTY2FsZSApICkgKVxcblxcdFxcdCk7XFxuXFx0XFx0dmVjMiBhbHBoYSA9IHZlYzIoXFxuXFx0XFx0XFx0aGFzaDNEKCBmbG9vciggcGl4U2NhbGVzLnggKiBwb3NpdGlvbi54eXogKSApLFxcblxcdFxcdFxcdGhhc2gzRCggZmxvb3IoIHBpeFNjYWxlcy55ICogcG9zaXRpb24ueHl6ICkgKVxcblxcdFxcdCk7XFxuXFx0XFx0ZmxvYXQgbGVycEZhY3RvciA9IGZyYWN0KCBsb2cyKCBwaXhTY2FsZSApICk7XFxuXFx0XFx0ZmxvYXQgeCA9ICggMS4wIC0gbGVycEZhY3RvciApICogYWxwaGEueCArIGxlcnBGYWN0b3IgKiBhbHBoYS55O1xcblxcdFxcdGZsb2F0IGEgPSBtaW4oIGxlcnBGYWN0b3IsIDEuMCAtIGxlcnBGYWN0b3IgKTtcXG5cXHRcXHR2ZWMzIGNhc2VzID0gdmVjMyhcXG5cXHRcXHRcXHR4ICogeCAvICggMi4wICogYSAqICggMS4wIC0gYSApICksXFxuXFx0XFx0XFx0KCB4IC0gMC41ICogYSApIC8gKCAxLjAgLSBhICksXFxuXFx0XFx0XFx0MS4wIC0gKCAoIDEuMCAtIHggKSAqICggMS4wIC0geCApIC8gKCAyLjAgKiBhICogKCAxLjAgLSBhICkgKSApXFxuXFx0XFx0KTtcXG5cXHRcXHRmbG9hdCB0aHJlc2hvbGQgPSAoIHggPCAoIDEuMCAtIGEgKSApXFxuXFx0XFx0XFx0PyAoICggeCA8IGEgKSA/IGNhc2VzLnggOiBjYXNlcy55IClcXG5cXHRcXHRcXHQ6IGNhc2VzLno7XFxuXFx0XFx0cmV0dXJuIGNsYW1wKCB0aHJlc2hvbGQgLCAxLjBlLTYsIDEuMCApO1xcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIGFscGhhbWFwX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0FMUEhBTUFQXFxuXFx0ZGlmZnVzZUNvbG9yLmEgKj0gdGV4dHVyZTJEKCBhbHBoYU1hcCwgdkFscGhhTWFwVXYgKS5nO1xcbiNlbmRpZlwiO1xuXG52YXIgYWxwaGFtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BTFBIQU1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGFscGhhTWFwO1xcbiNlbmRpZlwiO1xuXG52YXIgYWxwaGF0ZXN0X2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0FMUEhBVEVTVFxcblxcdCNpZmRlZiBBTFBIQV9UT19DT1ZFUkFHRVxcblxcdGRpZmZ1c2VDb2xvci5hID0gc21vb3Roc3RlcCggYWxwaGFUZXN0LCBhbHBoYVRlc3QgKyBmd2lkdGgoIGRpZmZ1c2VDb2xvci5hICksIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0aWYgKCBkaWZmdXNlQ29sb3IuYSA9PSAwLjAgKSBkaXNjYXJkO1xcblxcdCNlbHNlXFxuXFx0aWYgKCBkaWZmdXNlQ29sb3IuYSA8IGFscGhhVGVzdCApIGRpc2NhcmQ7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBhbHBoYXRlc3RfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BTFBIQVRFU1RcXG5cXHR1bmlmb3JtIGZsb2F0IGFscGhhVGVzdDtcXG4jZW5kaWZcIjtcblxudmFyIGFvbWFwX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0FPTUFQXFxuXFx0ZmxvYXQgYW1iaWVudE9jY2x1c2lvbiA9ICggdGV4dHVyZTJEKCBhb01hcCwgdkFvTWFwVXYgKS5yIC0gMS4wICkgKiBhb01hcEludGVuc2l0eSArIDEuMDtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKj0gYW1iaWVudE9jY2x1c2lvbjtcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0NMRUFSQ09BVCApIFxcblxcdFxcdGNsZWFyY29hdFNwZWN1bGFySW5kaXJlY3QgKj0gYW1iaWVudE9jY2x1c2lvbjtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgZGVmaW5lZCggVVNFX1NIRUVOICkgXFxuXFx0XFx0c2hlZW5TcGVjdWxhckluZGlyZWN0ICo9IGFtYmllbnRPY2NsdXNpb247XFxuXFx0I2VuZGlmXFxuXFx0I2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSAmJiBkZWZpbmVkKCBTVEFOREFSRCApXFxuXFx0XFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeU5vcm1hbCwgZ2VvbWV0cnlWaWV3RGlyICkgKTtcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICo9IGNvbXB1dGVTcGVjdWxhck9jY2x1c2lvbiggZG90TlYsIGFtYmllbnRPY2NsdXNpb24sIG1hdGVyaWFsLnJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgYW9tYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BT01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGFvTWFwO1xcblxcdHVuaWZvcm0gZmxvYXQgYW9NYXBJbnRlbnNpdHk7XFxuI2VuZGlmXCI7XG5cbnZhciBiYXRjaGluZ19wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9CQVRDSElOR1xcblxcdCNpZiAhIGRlZmluZWQoIEdMX0FOR0xFX211bHRpX2RyYXcgKVxcblxcdCNkZWZpbmUgZ2xfRHJhd0lEIF9nbF9EcmF3SURcXG5cXHR1bmlmb3JtIGludCBfZ2xfRHJhd0lEO1xcblxcdCNlbmRpZlxcblxcdHVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIGJhdGNoaW5nVGV4dHVyZTtcXG5cXHR1bmlmb3JtIGhpZ2hwIHVzYW1wbGVyMkQgYmF0Y2hpbmdJZFRleHR1cmU7XFxuXFx0bWF0NCBnZXRCYXRjaGluZ01hdHJpeCggY29uc3QgaW4gZmxvYXQgaSApIHtcXG5cXHRcXHRpbnQgc2l6ZSA9IHRleHR1cmVTaXplKCBiYXRjaGluZ1RleHR1cmUsIDAgKS54O1xcblxcdFxcdGludCBqID0gaW50KCBpICkgKiA0O1xcblxcdFxcdGludCB4ID0gaiAlIHNpemU7XFxuXFx0XFx0aW50IHkgPSBqIC8gc2l6ZTtcXG5cXHRcXHR2ZWM0IHYxID0gdGV4ZWxGZXRjaCggYmF0Y2hpbmdUZXh0dXJlLCBpdmVjMiggeCwgeSApLCAwICk7XFxuXFx0XFx0dmVjNCB2MiA9IHRleGVsRmV0Y2goIGJhdGNoaW5nVGV4dHVyZSwgaXZlYzIoIHggKyAxLCB5ICksIDAgKTtcXG5cXHRcXHR2ZWM0IHYzID0gdGV4ZWxGZXRjaCggYmF0Y2hpbmdUZXh0dXJlLCBpdmVjMiggeCArIDIsIHkgKSwgMCApO1xcblxcdFxcdHZlYzQgdjQgPSB0ZXhlbEZldGNoKCBiYXRjaGluZ1RleHR1cmUsIGl2ZWMyKCB4ICsgMywgeSApLCAwICk7XFxuXFx0XFx0cmV0dXJuIG1hdDQoIHYxLCB2MiwgdjMsIHY0ICk7XFxuXFx0fVxcblxcdGZsb2F0IGdldEluZGlyZWN0SW5kZXgoIGNvbnN0IGluIGludCBpICkge1xcblxcdFxcdGludCBzaXplID0gdGV4dHVyZVNpemUoIGJhdGNoaW5nSWRUZXh0dXJlLCAwICkueDtcXG5cXHRcXHRpbnQgeCA9IGkgJSBzaXplO1xcblxcdFxcdGludCB5ID0gaSAvIHNpemU7XFxuXFx0XFx0cmV0dXJuIGZsb2F0KCB0ZXhlbEZldGNoKCBiYXRjaGluZ0lkVGV4dHVyZSwgaXZlYzIoIHgsIHkgKSwgMCApLnIgKTtcXG5cXHR9XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9CQVRDSElOR19DT0xPUlxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGJhdGNoaW5nQ29sb3JUZXh0dXJlO1xcblxcdHZlYzMgZ2V0QmF0Y2hpbmdDb2xvciggY29uc3QgaW4gZmxvYXQgaSApIHtcXG5cXHRcXHRpbnQgc2l6ZSA9IHRleHR1cmVTaXplKCBiYXRjaGluZ0NvbG9yVGV4dHVyZSwgMCApLng7XFxuXFx0XFx0aW50IGogPSBpbnQoIGkgKTtcXG5cXHRcXHRpbnQgeCA9IGogJSBzaXplO1xcblxcdFxcdGludCB5ID0gaiAvIHNpemU7XFxuXFx0XFx0cmV0dXJuIHRleGVsRmV0Y2goIGJhdGNoaW5nQ29sb3JUZXh0dXJlLCBpdmVjMiggeCwgeSApLCAwICkucmdiO1xcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIGJhdGNoaW5nX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9CQVRDSElOR1xcblxcdG1hdDQgYmF0Y2hpbmdNYXRyaXggPSBnZXRCYXRjaGluZ01hdHJpeCggZ2V0SW5kaXJlY3RJbmRleCggZ2xfRHJhd0lEICkgKTtcXG4jZW5kaWZcIjtcblxudmFyIGJlZ2luX3ZlcnRleCA9IFwidmVjMyB0cmFuc2Zvcm1lZCA9IHZlYzMoIHBvc2l0aW9uICk7XFxuI2lmZGVmIFVTRV9BTFBIQUhBU0hcXG5cXHR2UG9zaXRpb24gPSB2ZWMzKCBwb3NpdGlvbiApO1xcbiNlbmRpZlwiO1xuXG52YXIgYmVnaW5ub3JtYWxfdmVydGV4ID0gXCJ2ZWMzIG9iamVjdE5vcm1hbCA9IHZlYzMoIG5vcm1hbCApO1xcbiNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdHZlYzMgb2JqZWN0VGFuZ2VudCA9IHZlYzMoIHRhbmdlbnQueHl6ICk7XFxuI2VuZGlmXCI7XG5cbnZhciBic2RmcyA9IFwiZmxvYXQgR19CbGlublBob25nX0ltcGxpY2l0KCApIHtcXG5cXHRyZXR1cm4gMC4yNTtcXG59XFxuZmxvYXQgRF9CbGlublBob25nKCBjb25zdCBpbiBmbG9hdCBzaGluaW5lc3MsIGNvbnN0IGluIGZsb2F0IGRvdE5IICkge1xcblxcdHJldHVybiBSRUNJUFJPQ0FMX1BJICogKCBzaGluaW5lc3MgKiAwLjUgKyAxLjAgKSAqIHBvdyggZG90TkgsIHNoaW5pbmVzcyApO1xcbn1cXG52ZWMzIEJSREZfQmxpbm5QaG9uZyggY29uc3QgaW4gdmVjMyBsaWdodERpciwgY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCBzaGluaW5lc3MgKSB7XFxuXFx0dmVjMyBoYWxmRGlyID0gbm9ybWFsaXplKCBsaWdodERpciArIHZpZXdEaXIgKTtcXG5cXHRmbG9hdCBkb3ROSCA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgaGFsZkRpciApICk7XFxuXFx0ZmxvYXQgZG90VkggPSBzYXR1cmF0ZSggZG90KCB2aWV3RGlyLCBoYWxmRGlyICkgKTtcXG5cXHR2ZWMzIEYgPSBGX1NjaGxpY2soIHNwZWN1bGFyQ29sb3IsIDEuMCwgZG90VkggKTtcXG5cXHRmbG9hdCBHID0gR19CbGlublBob25nX0ltcGxpY2l0KCApO1xcblxcdGZsb2F0IEQgPSBEX0JsaW5uUGhvbmcoIHNoaW5pbmVzcywgZG90TkggKTtcXG5cXHRyZXR1cm4gRiAqICggRyAqIEQgKTtcXG59IC8vIHZhbGlkYXRlZFwiO1xuXG52YXIgaXJpZGVzY2VuY2VfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VcXG5cXHRjb25zdCBtYXQzIFhZWl9UT19SRUM3MDkgPSBtYXQzKFxcblxcdFxcdCAzLjI0MDQ1NDIsIC0wLjk2OTI2NjAsICAwLjA1NTY0MzQsXFxuXFx0XFx0LTEuNTM3MTM4NSwgIDEuODc2MDEwOCwgLTAuMjA0MDI1OSxcXG5cXHRcXHQtMC40OTg1MzE0LCAgMC4wNDE1NTYwLCAgMS4wNTcyMjUyXFxuXFx0KTtcXG5cXHR2ZWMzIEZyZXNuZWwwVG9Jb3IoIHZlYzMgZnJlc25lbDAgKSB7XFxuXFx0XFx0dmVjMyBzcXJ0RjAgPSBzcXJ0KCBmcmVzbmVsMCApO1xcblxcdFxcdHJldHVybiAoIHZlYzMoIDEuMCApICsgc3FydEYwICkgLyAoIHZlYzMoIDEuMCApIC0gc3FydEYwICk7XFxuXFx0fVxcblxcdHZlYzMgSW9yVG9GcmVzbmVsMCggdmVjMyB0cmFuc21pdHRlZElvciwgZmxvYXQgaW5jaWRlbnRJb3IgKSB7XFxuXFx0XFx0cmV0dXJuIHBvdzIoICggdHJhbnNtaXR0ZWRJb3IgLSB2ZWMzKCBpbmNpZGVudElvciApICkgLyAoIHRyYW5zbWl0dGVkSW9yICsgdmVjMyggaW5jaWRlbnRJb3IgKSApICk7XFxuXFx0fVxcblxcdGZsb2F0IElvclRvRnJlc25lbDAoIGZsb2F0IHRyYW5zbWl0dGVkSW9yLCBmbG9hdCBpbmNpZGVudElvciApIHtcXG5cXHRcXHRyZXR1cm4gcG93MiggKCB0cmFuc21pdHRlZElvciAtIGluY2lkZW50SW9yICkgLyAoIHRyYW5zbWl0dGVkSW9yICsgaW5jaWRlbnRJb3IgKSk7XFxuXFx0fVxcblxcdHZlYzMgZXZhbFNlbnNpdGl2aXR5KCBmbG9hdCBPUEQsIHZlYzMgc2hpZnQgKSB7XFxuXFx0XFx0ZmxvYXQgcGhhc2UgPSAyLjAgKiBQSSAqIE9QRCAqIDEuMGUtOTtcXG5cXHRcXHR2ZWMzIHZhbCA9IHZlYzMoIDUuNDg1NmUtMTMsIDQuNDIwMWUtMTMsIDUuMjQ4MWUtMTMgKTtcXG5cXHRcXHR2ZWMzIHBvcyA9IHZlYzMoIDEuNjgxMGUrMDYsIDEuNzk1M2UrMDYsIDIuMjA4NGUrMDYgKTtcXG5cXHRcXHR2ZWMzIHZhciA9IHZlYzMoIDQuMzI3OGUrMDksIDkuMzA0NmUrMDksIDYuNjEyMWUrMDkgKTtcXG5cXHRcXHR2ZWMzIHh5eiA9IHZhbCAqIHNxcnQoIDIuMCAqIFBJICogdmFyICkgKiBjb3MoIHBvcyAqIHBoYXNlICsgc2hpZnQgKSAqIGV4cCggLSBwb3cyKCBwaGFzZSApICogdmFyICk7XFxuXFx0XFx0eHl6LnggKz0gOS43NDcwZS0xNCAqIHNxcnQoIDIuMCAqIFBJICogNC41MjgyZSswOSApICogY29zKCAyLjIzOTllKzA2ICogcGhhc2UgKyBzaGlmdFsgMCBdICkgKiBleHAoIC0gNC41MjgyZSswOSAqIHBvdzIoIHBoYXNlICkgKTtcXG5cXHRcXHR4eXogLz0gMS4wNjg1ZS03O1xcblxcdFxcdHZlYzMgcmdiID0gWFlaX1RPX1JFQzcwOSAqIHh5ejtcXG5cXHRcXHRyZXR1cm4gcmdiO1xcblxcdH1cXG5cXHR2ZWMzIGV2YWxJcmlkZXNjZW5jZSggZmxvYXQgb3V0c2lkZUlPUiwgZmxvYXQgZXRhMiwgZmxvYXQgY29zVGhldGExLCBmbG9hdCB0aGluRmlsbVRoaWNrbmVzcywgdmVjMyBiYXNlRjAgKSB7XFxuXFx0XFx0dmVjMyBJO1xcblxcdFxcdGZsb2F0IGlyaWRlc2NlbmNlSU9SID0gbWl4KCBvdXRzaWRlSU9SLCBldGEyLCBzbW9vdGhzdGVwKCAwLjAsIDAuMDMsIHRoaW5GaWxtVGhpY2tuZXNzICkgKTtcXG5cXHRcXHRmbG9hdCBzaW5UaGV0YTJTcSA9IHBvdzIoIG91dHNpZGVJT1IgLyBpcmlkZXNjZW5jZUlPUiApICogKCAxLjAgLSBwb3cyKCBjb3NUaGV0YTEgKSApO1xcblxcdFxcdGZsb2F0IGNvc1RoZXRhMlNxID0gMS4wIC0gc2luVGhldGEyU3E7XFxuXFx0XFx0aWYgKCBjb3NUaGV0YTJTcSA8IDAuMCApIHtcXG5cXHRcXHRcXHRyZXR1cm4gdmVjMyggMS4wICk7XFxuXFx0XFx0fVxcblxcdFxcdGZsb2F0IGNvc1RoZXRhMiA9IHNxcnQoIGNvc1RoZXRhMlNxICk7XFxuXFx0XFx0ZmxvYXQgUjAgPSBJb3JUb0ZyZXNuZWwwKCBpcmlkZXNjZW5jZUlPUiwgb3V0c2lkZUlPUiApO1xcblxcdFxcdGZsb2F0IFIxMiA9IEZfU2NobGljayggUjAsIDEuMCwgY29zVGhldGExICk7XFxuXFx0XFx0ZmxvYXQgVDEyMSA9IDEuMCAtIFIxMjtcXG5cXHRcXHRmbG9hdCBwaGkxMiA9IDAuMDtcXG5cXHRcXHRpZiAoIGlyaWRlc2NlbmNlSU9SIDwgb3V0c2lkZUlPUiApIHBoaTEyID0gUEk7XFxuXFx0XFx0ZmxvYXQgcGhpMjEgPSBQSSAtIHBoaTEyO1xcblxcdFxcdHZlYzMgYmFzZUlPUiA9IEZyZXNuZWwwVG9Jb3IoIGNsYW1wKCBiYXNlRjAsIDAuMCwgMC45OTk5ICkgKTtcXHRcXHR2ZWMzIFIxID0gSW9yVG9GcmVzbmVsMCggYmFzZUlPUiwgaXJpZGVzY2VuY2VJT1IgKTtcXG5cXHRcXHR2ZWMzIFIyMyA9IEZfU2NobGljayggUjEsIDEuMCwgY29zVGhldGEyICk7XFxuXFx0XFx0dmVjMyBwaGkyMyA9IHZlYzMoIDAuMCApO1xcblxcdFxcdGlmICggYmFzZUlPUlsgMCBdIDwgaXJpZGVzY2VuY2VJT1IgKSBwaGkyM1sgMCBdID0gUEk7XFxuXFx0XFx0aWYgKCBiYXNlSU9SWyAxIF0gPCBpcmlkZXNjZW5jZUlPUiApIHBoaTIzWyAxIF0gPSBQSTtcXG5cXHRcXHRpZiAoIGJhc2VJT1JbIDIgXSA8IGlyaWRlc2NlbmNlSU9SICkgcGhpMjNbIDIgXSA9IFBJO1xcblxcdFxcdGZsb2F0IE9QRCA9IDIuMCAqIGlyaWRlc2NlbmNlSU9SICogdGhpbkZpbG1UaGlja25lc3MgKiBjb3NUaGV0YTI7XFxuXFx0XFx0dmVjMyBwaGkgPSB2ZWMzKCBwaGkyMSApICsgcGhpMjM7XFxuXFx0XFx0dmVjMyBSMTIzID0gY2xhbXAoIFIxMiAqIFIyMywgMWUtNSwgMC45OTk5ICk7XFxuXFx0XFx0dmVjMyByMTIzID0gc3FydCggUjEyMyApO1xcblxcdFxcdHZlYzMgUnMgPSBwb3cyKCBUMTIxICkgKiBSMjMgLyAoIHZlYzMoIDEuMCApIC0gUjEyMyApO1xcblxcdFxcdHZlYzMgQzAgPSBSMTIgKyBScztcXG5cXHRcXHRJID0gQzA7XFxuXFx0XFx0dmVjMyBDbSA9IFJzIC0gVDEyMTtcXG5cXHRcXHRmb3IgKCBpbnQgbSA9IDE7IG0gPD0gMjsgKysgbSApIHtcXG5cXHRcXHRcXHRDbSAqPSByMTIzO1xcblxcdFxcdFxcdHZlYzMgU20gPSAyLjAgKiBldmFsU2Vuc2l0aXZpdHkoIGZsb2F0KCBtICkgKiBPUEQsIGZsb2F0KCBtICkgKiBwaGkgKTtcXG5cXHRcXHRcXHRJICs9IENtICogU207XFxuXFx0XFx0fVxcblxcdFxcdHJldHVybiBtYXgoIEksIHZlYzMoIDAuMCApICk7XFxuXFx0fVxcbiNlbmRpZlwiO1xuXG52YXIgYnVtcG1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0JVTVBNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBidW1wTWFwO1xcblxcdHVuaWZvcm0gZmxvYXQgYnVtcFNjYWxlO1xcblxcdHZlYzIgZEhkeHlfZndkKCkge1xcblxcdFxcdHZlYzIgZFNUZHggPSBkRmR4KCB2QnVtcE1hcFV2ICk7XFxuXFx0XFx0dmVjMiBkU1RkeSA9IGRGZHkoIHZCdW1wTWFwVXYgKTtcXG5cXHRcXHRmbG9hdCBIbGwgPSBidW1wU2NhbGUgKiB0ZXh0dXJlMkQoIGJ1bXBNYXAsIHZCdW1wTWFwVXYgKS54O1xcblxcdFxcdGZsb2F0IGRCeCA9IGJ1bXBTY2FsZSAqIHRleHR1cmUyRCggYnVtcE1hcCwgdkJ1bXBNYXBVdiArIGRTVGR4ICkueCAtIEhsbDtcXG5cXHRcXHRmbG9hdCBkQnkgPSBidW1wU2NhbGUgKiB0ZXh0dXJlMkQoIGJ1bXBNYXAsIHZCdW1wTWFwVXYgKyBkU1RkeSApLnggLSBIbGw7XFxuXFx0XFx0cmV0dXJuIHZlYzIoIGRCeCwgZEJ5ICk7XFxuXFx0fVxcblxcdHZlYzMgcGVydHVyYk5vcm1hbEFyYiggdmVjMyBzdXJmX3BvcywgdmVjMyBzdXJmX25vcm0sIHZlYzIgZEhkeHksIGZsb2F0IGZhY2VEaXJlY3Rpb24gKSB7XFxuXFx0XFx0dmVjMyB2U2lnbWFYID0gbm9ybWFsaXplKCBkRmR4KCBzdXJmX3Bvcy54eXogKSApO1xcblxcdFxcdHZlYzMgdlNpZ21hWSA9IG5vcm1hbGl6ZSggZEZkeSggc3VyZl9wb3MueHl6ICkgKTtcXG5cXHRcXHR2ZWMzIHZOID0gc3VyZl9ub3JtO1xcblxcdFxcdHZlYzMgUjEgPSBjcm9zcyggdlNpZ21hWSwgdk4gKTtcXG5cXHRcXHR2ZWMzIFIyID0gY3Jvc3MoIHZOLCB2U2lnbWFYICk7XFxuXFx0XFx0ZmxvYXQgZkRldCA9IGRvdCggdlNpZ21hWCwgUjEgKSAqIGZhY2VEaXJlY3Rpb247XFxuXFx0XFx0dmVjMyB2R3JhZCA9IHNpZ24oIGZEZXQgKSAqICggZEhkeHkueCAqIFIxICsgZEhkeHkueSAqIFIyICk7XFxuXFx0XFx0cmV0dXJuIG5vcm1hbGl6ZSggYWJzKCBmRGV0ICkgKiBzdXJmX25vcm0gLSB2R3JhZCApO1xcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudCA9IFwiI2lmIE5VTV9DTElQUElOR19QTEFORVMgPiAwXFxuXFx0dmVjNCBwbGFuZTtcXG5cXHQjaWZkZWYgQUxQSEFfVE9fQ09WRVJBR0VcXG5cXHRcXHRmbG9hdCBkaXN0YW5jZVRvUGxhbmUsIGRpc3RhbmNlR3JhZGllbnQ7XFxuXFx0XFx0ZmxvYXQgY2xpcE9wYWNpdHkgPSAxLjA7XFxuXFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdFxcdGZvciAoIGludCBpID0gMDsgaSA8IFVOSU9OX0NMSVBQSU5HX1BMQU5FUzsgaSArKyApIHtcXG5cXHRcXHRcXHRwbGFuZSA9IGNsaXBwaW5nUGxhbmVzWyBpIF07XFxuXFx0XFx0XFx0ZGlzdGFuY2VUb1BsYW5lID0gLSBkb3QoIHZDbGlwUG9zaXRpb24sIHBsYW5lLnh5eiApICsgcGxhbmUudztcXG5cXHRcXHRcXHRkaXN0YW5jZUdyYWRpZW50ID0gZndpZHRoKCBkaXN0YW5jZVRvUGxhbmUgKSAvIDIuMDtcXG5cXHRcXHRcXHRjbGlwT3BhY2l0eSAqPSBzbW9vdGhzdGVwKCAtIGRpc3RhbmNlR3JhZGllbnQsIGRpc3RhbmNlR3JhZGllbnQsIGRpc3RhbmNlVG9QbGFuZSApO1xcblxcdFxcdFxcdGlmICggY2xpcE9wYWNpdHkgPT0gMC4wICkgZGlzY2FyZDtcXG5cXHRcXHR9XFxuXFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG5cXHRcXHQjaWYgVU5JT05fQ0xJUFBJTkdfUExBTkVTIDwgTlVNX0NMSVBQSU5HX1BMQU5FU1xcblxcdFxcdFxcdGZsb2F0IHVuaW9uQ2xpcE9wYWNpdHkgPSAxLjA7XFxuXFx0XFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdFxcdFxcdGZvciAoIGludCBpID0gVU5JT05fQ0xJUFBJTkdfUExBTkVTOyBpIDwgTlVNX0NMSVBQSU5HX1BMQU5FUzsgaSArKyApIHtcXG5cXHRcXHRcXHRcXHRwbGFuZSA9IGNsaXBwaW5nUGxhbmVzWyBpIF07XFxuXFx0XFx0XFx0XFx0ZGlzdGFuY2VUb1BsYW5lID0gLSBkb3QoIHZDbGlwUG9zaXRpb24sIHBsYW5lLnh5eiApICsgcGxhbmUudztcXG5cXHRcXHRcXHRcXHRkaXN0YW5jZUdyYWRpZW50ID0gZndpZHRoKCBkaXN0YW5jZVRvUGxhbmUgKSAvIDIuMDtcXG5cXHRcXHRcXHRcXHR1bmlvbkNsaXBPcGFjaXR5ICo9IDEuMCAtIHNtb290aHN0ZXAoIC0gZGlzdGFuY2VHcmFkaWVudCwgZGlzdGFuY2VHcmFkaWVudCwgZGlzdGFuY2VUb1BsYW5lICk7XFxuXFx0XFx0XFx0fVxcblxcdFxcdFxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuXFx0XFx0XFx0Y2xpcE9wYWNpdHkgKj0gMS4wIC0gdW5pb25DbGlwT3BhY2l0eTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRkaWZmdXNlQ29sb3IuYSAqPSBjbGlwT3BhY2l0eTtcXG5cXHRcXHRpZiAoIGRpZmZ1c2VDb2xvci5hID09IDAuMCApIGRpc2NhcmQ7XFxuXFx0I2Vsc2VcXG5cXHRcXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0XFx0Zm9yICggaW50IGkgPSAwOyBpIDwgVU5JT05fQ0xJUFBJTkdfUExBTkVTOyBpICsrICkge1xcblxcdFxcdFxcdHBsYW5lID0gY2xpcHBpbmdQbGFuZXNbIGkgXTtcXG5cXHRcXHRcXHRpZiAoIGRvdCggdkNsaXBQb3NpdGlvbiwgcGxhbmUueHl6ICkgPiBwbGFuZS53ICkgZGlzY2FyZDtcXG5cXHRcXHR9XFxuXFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG5cXHRcXHQjaWYgVU5JT05fQ0xJUFBJTkdfUExBTkVTIDwgTlVNX0NMSVBQSU5HX1BMQU5FU1xcblxcdFxcdFxcdGJvb2wgY2xpcHBlZCA9IHRydWU7XFxuXFx0XFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdFxcdFxcdGZvciAoIGludCBpID0gVU5JT05fQ0xJUFBJTkdfUExBTkVTOyBpIDwgTlVNX0NMSVBQSU5HX1BMQU5FUzsgaSArKyApIHtcXG5cXHRcXHRcXHRcXHRwbGFuZSA9IGNsaXBwaW5nUGxhbmVzWyBpIF07XFxuXFx0XFx0XFx0XFx0Y2xpcHBlZCA9ICggZG90KCB2Q2xpcFBvc2l0aW9uLCBwbGFuZS54eXogKSA+IHBsYW5lLncgKSAmJiBjbGlwcGVkO1xcblxcdFxcdFxcdH1cXG5cXHRcXHRcXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcblxcdFxcdFxcdGlmICggY2xpcHBlZCApIGRpc2NhcmQ7XFxuXFx0XFx0I2VuZGlmXFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudCA9IFwiI2lmIE5VTV9DTElQUElOR19QTEFORVMgPiAwXFxuXFx0dmFyeWluZyB2ZWMzIHZDbGlwUG9zaXRpb247XFxuXFx0dW5pZm9ybSB2ZWM0IGNsaXBwaW5nUGxhbmVzWyBOVU1fQ0xJUFBJTkdfUExBTkVTIF07XFxuI2VuZGlmXCI7XG5cbnZhciBjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXggPSBcIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMFxcblxcdHZhcnlpbmcgdmVjMyB2Q2xpcFBvc2l0aW9uO1xcbiNlbmRpZlwiO1xuXG52YXIgY2xpcHBpbmdfcGxhbmVzX3ZlcnRleCA9IFwiI2lmIE5VTV9DTElQUElOR19QTEFORVMgPiAwXFxuXFx0dkNsaXBQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxuI2VuZGlmXCI7XG5cbnZhciBjb2xvcl9mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9DT0xPUl9BTFBIQSApXFxuXFx0ZGlmZnVzZUNvbG9yICo9IHZDb2xvcjtcXG4jZWxpZiBkZWZpbmVkKCBVU0VfQ09MT1IgKVxcblxcdGRpZmZ1c2VDb2xvci5yZ2IgKj0gdkNvbG9yO1xcbiNlbmRpZlwiO1xuXG52YXIgY29sb3JfcGFyc19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9DT0xPUl9BTFBIQSApXFxuXFx0dmFyeWluZyB2ZWM0IHZDb2xvcjtcXG4jZWxpZiBkZWZpbmVkKCBVU0VfQ09MT1IgKVxcblxcdHZhcnlpbmcgdmVjMyB2Q29sb3I7XFxuI2VuZGlmXCI7XG5cbnZhciBjb2xvcl9wYXJzX3ZlcnRleCA9IFwiI2lmIGRlZmluZWQoIFVTRV9DT0xPUl9BTFBIQSApXFxuXFx0dmFyeWluZyB2ZWM0IHZDb2xvcjtcXG4jZWxpZiBkZWZpbmVkKCBVU0VfQ09MT1IgKSB8fCBkZWZpbmVkKCBVU0VfSU5TVEFOQ0lOR19DT0xPUiApIHx8IGRlZmluZWQoIFVTRV9CQVRDSElOR19DT0xPUiApXFxuXFx0dmFyeWluZyB2ZWMzIHZDb2xvcjtcXG4jZW5kaWZcIjtcblxudmFyIGNvbG9yX3ZlcnRleCA9IFwiI2lmIGRlZmluZWQoIFVTRV9DT0xPUl9BTFBIQSApXFxuXFx0dkNvbG9yID0gdmVjNCggMS4wICk7XFxuI2VsaWYgZGVmaW5lZCggVVNFX0NPTE9SICkgfHwgZGVmaW5lZCggVVNFX0lOU1RBTkNJTkdfQ09MT1IgKSB8fCBkZWZpbmVkKCBVU0VfQkFUQ0hJTkdfQ09MT1IgKVxcblxcdHZDb2xvciA9IHZlYzMoIDEuMCApO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQ09MT1JcXG5cXHR2Q29sb3IgKj0gY29sb3I7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9JTlNUQU5DSU5HX0NPTE9SXFxuXFx0dkNvbG9yLnh5eiAqPSBpbnN0YW5jZUNvbG9yLnh5ejtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0JBVENISU5HX0NPTE9SXFxuXFx0dmVjMyBiYXRjaGluZ0NvbG9yID0gZ2V0QmF0Y2hpbmdDb2xvciggZ2V0SW5kaXJlY3RJbmRleCggZ2xfRHJhd0lEICkgKTtcXG5cXHR2Q29sb3IueHl6ICo9IGJhdGNoaW5nQ29sb3IueHl6O1xcbiNlbmRpZlwiO1xuXG52YXIgY29tbW9uID0gXCIjZGVmaW5lIFBJIDMuMTQxNTkyNjUzNTg5NzkzXFxuI2RlZmluZSBQSTIgNi4yODMxODUzMDcxNzk1ODZcXG4jZGVmaW5lIFBJX0hBTEYgMS41NzA3OTYzMjY3OTQ4OTY2XFxuI2RlZmluZSBSRUNJUFJPQ0FMX1BJIDAuMzE4MzA5ODg2MTgzNzkwN1xcbiNkZWZpbmUgUkVDSVBST0NBTF9QSTIgMC4xNTkxNTQ5NDMwOTE4OTUzNVxcbiNkZWZpbmUgRVBTSUxPTiAxZS02XFxuI2lmbmRlZiBzYXR1cmF0ZVxcbiNkZWZpbmUgc2F0dXJhdGUoIGEgKSBjbGFtcCggYSwgMC4wLCAxLjAgKVxcbiNlbmRpZlxcbiNkZWZpbmUgd2hpdGVDb21wbGVtZW50KCBhICkgKCAxLjAgLSBzYXR1cmF0ZSggYSApIClcXG5mbG9hdCBwb3cyKCBjb25zdCBpbiBmbG9hdCB4ICkgeyByZXR1cm4geCp4OyB9XFxudmVjMyBwb3cyKCBjb25zdCBpbiB2ZWMzIHggKSB7IHJldHVybiB4Kng7IH1cXG5mbG9hdCBwb3czKCBjb25zdCBpbiBmbG9hdCB4ICkgeyByZXR1cm4geCp4Kng7IH1cXG5mbG9hdCBwb3c0KCBjb25zdCBpbiBmbG9hdCB4ICkgeyBmbG9hdCB4MiA9IHgqeDsgcmV0dXJuIHgyKngyOyB9XFxuZmxvYXQgbWF4MyggY29uc3QgaW4gdmVjMyB2ICkgeyByZXR1cm4gbWF4KCBtYXgoIHYueCwgdi55ICksIHYueiApOyB9XFxuZmxvYXQgYXZlcmFnZSggY29uc3QgaW4gdmVjMyB2ICkgeyByZXR1cm4gZG90KCB2LCB2ZWMzKCAwLjMzMzMzMzMgKSApOyB9XFxuaGlnaHAgZmxvYXQgcmFuZCggY29uc3QgaW4gdmVjMiB1diApIHtcXG5cXHRjb25zdCBoaWdocCBmbG9hdCBhID0gMTIuOTg5OCwgYiA9IDc4LjIzMywgYyA9IDQzNzU4LjU0NTM7XFxuXFx0aGlnaHAgZmxvYXQgZHQgPSBkb3QoIHV2Lnh5LCB2ZWMyKCBhLGIgKSApLCBzbiA9IG1vZCggZHQsIFBJICk7XFxuXFx0cmV0dXJuIGZyYWN0KCBzaW4oIHNuICkgKiBjICk7XFxufVxcbiNpZmRlZiBISUdIX1BSRUNJU0lPTlxcblxcdGZsb2F0IHByZWNpc2lvblNhZmVMZW5ndGgoIHZlYzMgdiApIHsgcmV0dXJuIGxlbmd0aCggdiApOyB9XFxuI2Vsc2VcXG5cXHRmbG9hdCBwcmVjaXNpb25TYWZlTGVuZ3RoKCB2ZWMzIHYgKSB7XFxuXFx0XFx0ZmxvYXQgbWF4Q29tcG9uZW50ID0gbWF4MyggYWJzKCB2ICkgKTtcXG5cXHRcXHRyZXR1cm4gbGVuZ3RoKCB2IC8gbWF4Q29tcG9uZW50ICkgKiBtYXhDb21wb25lbnQ7XFxuXFx0fVxcbiNlbmRpZlxcbnN0cnVjdCBJbmNpZGVudExpZ2h0IHtcXG5cXHR2ZWMzIGNvbG9yO1xcblxcdHZlYzMgZGlyZWN0aW9uO1xcblxcdGJvb2wgdmlzaWJsZTtcXG59O1xcbnN0cnVjdCBSZWZsZWN0ZWRMaWdodCB7XFxuXFx0dmVjMyBkaXJlY3REaWZmdXNlO1xcblxcdHZlYzMgZGlyZWN0U3BlY3VsYXI7XFxuXFx0dmVjMyBpbmRpcmVjdERpZmZ1c2U7XFxuXFx0dmVjMyBpbmRpcmVjdFNwZWN1bGFyO1xcbn07XFxuI2lmZGVmIFVTRV9BTFBIQUhBU0hcXG5cXHR2YXJ5aW5nIHZlYzMgdlBvc2l0aW9uO1xcbiNlbmRpZlxcbnZlYzMgdHJhbnNmb3JtRGlyZWN0aW9uKCBpbiB2ZWMzIGRpciwgaW4gbWF0NCBtYXRyaXggKSB7XFxuXFx0cmV0dXJuIG5vcm1hbGl6ZSggKCBtYXRyaXggKiB2ZWM0KCBkaXIsIDAuMCApICkueHl6ICk7XFxufVxcbnZlYzMgaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggaW4gdmVjMyBkaXIsIGluIG1hdDQgbWF0cml4ICkge1xcblxcdHJldHVybiBub3JtYWxpemUoICggdmVjNCggZGlyLCAwLjAgKSAqIG1hdHJpeCApLnh5eiApO1xcbn1cXG5tYXQzIHRyYW5zcG9zZU1hdDMoIGNvbnN0IGluIG1hdDMgbSApIHtcXG5cXHRtYXQzIHRtcDtcXG5cXHR0bXBbIDAgXSA9IHZlYzMoIG1bIDAgXS54LCBtWyAxIF0ueCwgbVsgMiBdLnggKTtcXG5cXHR0bXBbIDEgXSA9IHZlYzMoIG1bIDAgXS55LCBtWyAxIF0ueSwgbVsgMiBdLnkgKTtcXG5cXHR0bXBbIDIgXSA9IHZlYzMoIG1bIDAgXS56LCBtWyAxIF0ueiwgbVsgMiBdLnogKTtcXG5cXHRyZXR1cm4gdG1wO1xcbn1cXG5ib29sIGlzUGVyc3BlY3RpdmVNYXRyaXgoIG1hdDQgbSApIHtcXG5cXHRyZXR1cm4gbVsgMiBdWyAzIF0gPT0gLSAxLjA7XFxufVxcbnZlYzIgZXF1aXJlY3RVdiggaW4gdmVjMyBkaXIgKSB7XFxuXFx0ZmxvYXQgdSA9IGF0YW4oIGRpci56LCBkaXIueCApICogUkVDSVBST0NBTF9QSTIgKyAwLjU7XFxuXFx0ZmxvYXQgdiA9IGFzaW4oIGNsYW1wKCBkaXIueSwgLSAxLjAsIDEuMCApICkgKiBSRUNJUFJPQ0FMX1BJICsgMC41O1xcblxcdHJldHVybiB2ZWMyKCB1LCB2ICk7XFxufVxcbnZlYzMgQlJERl9MYW1iZXJ0KCBjb25zdCBpbiB2ZWMzIGRpZmZ1c2VDb2xvciApIHtcXG5cXHRyZXR1cm4gUkVDSVBST0NBTF9QSSAqIGRpZmZ1c2VDb2xvcjtcXG59XFxudmVjMyBGX1NjaGxpY2soIGNvbnN0IGluIHZlYzMgZjAsIGNvbnN0IGluIGZsb2F0IGY5MCwgY29uc3QgaW4gZmxvYXQgZG90VkggKSB7XFxuXFx0ZmxvYXQgZnJlc25lbCA9IGV4cDIoICggLSA1LjU1NDczICogZG90VkggLSA2Ljk4MzE2ICkgKiBkb3RWSCApO1xcblxcdHJldHVybiBmMCAqICggMS4wIC0gZnJlc25lbCApICsgKCBmOTAgKiBmcmVzbmVsICk7XFxufVxcbmZsb2F0IEZfU2NobGljayggY29uc3QgaW4gZmxvYXQgZjAsIGNvbnN0IGluIGZsb2F0IGY5MCwgY29uc3QgaW4gZmxvYXQgZG90VkggKSB7XFxuXFx0ZmxvYXQgZnJlc25lbCA9IGV4cDIoICggLSA1LjU1NDczICogZG90VkggLSA2Ljk4MzE2ICkgKiBkb3RWSCApO1xcblxcdHJldHVybiBmMCAqICggMS4wIC0gZnJlc25lbCApICsgKCBmOTAgKiBmcmVzbmVsICk7XFxufSAvLyB2YWxpZGF0ZWRcIjtcblxudmFyIGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudCA9IFwiI2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVfVVZcXG5cXHQjZGVmaW5lIGN1YmVVVl9taW5NaXBMZXZlbCA0LjBcXG5cXHQjZGVmaW5lIGN1YmVVVl9taW5UaWxlU2l6ZSAxNi4wXFxuXFx0ZmxvYXQgZ2V0RmFjZSggdmVjMyBkaXJlY3Rpb24gKSB7XFxuXFx0XFx0dmVjMyBhYnNEaXJlY3Rpb24gPSBhYnMoIGRpcmVjdGlvbiApO1xcblxcdFxcdGZsb2F0IGZhY2UgPSAtIDEuMDtcXG5cXHRcXHRpZiAoIGFic0RpcmVjdGlvbi54ID4gYWJzRGlyZWN0aW9uLnogKSB7XFxuXFx0XFx0XFx0aWYgKCBhYnNEaXJlY3Rpb24ueCA+IGFic0RpcmVjdGlvbi55IClcXG5cXHRcXHRcXHRcXHRmYWNlID0gZGlyZWN0aW9uLnggPiAwLjAgPyAwLjAgOiAzLjA7XFxuXFx0XFx0XFx0ZWxzZVxcblxcdFxcdFxcdFxcdGZhY2UgPSBkaXJlY3Rpb24ueSA+IDAuMCA/IDEuMCA6IDQuMDtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdGlmICggYWJzRGlyZWN0aW9uLnogPiBhYnNEaXJlY3Rpb24ueSApXFxuXFx0XFx0XFx0XFx0ZmFjZSA9IGRpcmVjdGlvbi56ID4gMC4wID8gMi4wIDogNS4wO1xcblxcdFxcdFxcdGVsc2VcXG5cXHRcXHRcXHRcXHRmYWNlID0gZGlyZWN0aW9uLnkgPiAwLjAgPyAxLjAgOiA0LjA7XFxuXFx0XFx0fVxcblxcdFxcdHJldHVybiBmYWNlO1xcblxcdH1cXG5cXHR2ZWMyIGdldFVWKCB2ZWMzIGRpcmVjdGlvbiwgZmxvYXQgZmFjZSApIHtcXG5cXHRcXHR2ZWMyIHV2O1xcblxcdFxcdGlmICggZmFjZSA9PSAwLjAgKSB7XFxuXFx0XFx0XFx0dXYgPSB2ZWMyKCBkaXJlY3Rpb24ueiwgZGlyZWN0aW9uLnkgKSAvIGFicyggZGlyZWN0aW9uLnggKTtcXG5cXHRcXHR9IGVsc2UgaWYgKCBmYWNlID09IDEuMCApIHtcXG5cXHRcXHRcXHR1diA9IHZlYzIoIC0gZGlyZWN0aW9uLngsIC0gZGlyZWN0aW9uLnogKSAvIGFicyggZGlyZWN0aW9uLnkgKTtcXG5cXHRcXHR9IGVsc2UgaWYgKCBmYWNlID09IDIuMCApIHtcXG5cXHRcXHRcXHR1diA9IHZlYzIoIC0gZGlyZWN0aW9uLngsIGRpcmVjdGlvbi55ICkgLyBhYnMoIGRpcmVjdGlvbi56ICk7XFxuXFx0XFx0fSBlbHNlIGlmICggZmFjZSA9PSAzLjAgKSB7XFxuXFx0XFx0XFx0dXYgPSB2ZWMyKCAtIGRpcmVjdGlvbi56LCBkaXJlY3Rpb24ueSApIC8gYWJzKCBkaXJlY3Rpb24ueCApO1xcblxcdFxcdH0gZWxzZSBpZiAoIGZhY2UgPT0gNC4wICkge1xcblxcdFxcdFxcdHV2ID0gdmVjMiggLSBkaXJlY3Rpb24ueCwgZGlyZWN0aW9uLnogKSAvIGFicyggZGlyZWN0aW9uLnkgKTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdHV2ID0gdmVjMiggZGlyZWN0aW9uLngsIGRpcmVjdGlvbi55ICkgLyBhYnMoIGRpcmVjdGlvbi56ICk7XFxuXFx0XFx0fVxcblxcdFxcdHJldHVybiAwLjUgKiAoIHV2ICsgMS4wICk7XFxuXFx0fVxcblxcdHZlYzMgYmlsaW5lYXJDdWJlVVYoIHNhbXBsZXIyRCBlbnZNYXAsIHZlYzMgZGlyZWN0aW9uLCBmbG9hdCBtaXBJbnQgKSB7XFxuXFx0XFx0ZmxvYXQgZmFjZSA9IGdldEZhY2UoIGRpcmVjdGlvbiApO1xcblxcdFxcdGZsb2F0IGZpbHRlckludCA9IG1heCggY3ViZVVWX21pbk1pcExldmVsIC0gbWlwSW50LCAwLjAgKTtcXG5cXHRcXHRtaXBJbnQgPSBtYXgoIG1pcEludCwgY3ViZVVWX21pbk1pcExldmVsICk7XFxuXFx0XFx0ZmxvYXQgZmFjZVNpemUgPSBleHAyKCBtaXBJbnQgKTtcXG5cXHRcXHRoaWdocCB2ZWMyIHV2ID0gZ2V0VVYoIGRpcmVjdGlvbiwgZmFjZSApICogKCBmYWNlU2l6ZSAtIDIuMCApICsgMS4wO1xcblxcdFxcdGlmICggZmFjZSA+IDIuMCApIHtcXG5cXHRcXHRcXHR1di55ICs9IGZhY2VTaXplO1xcblxcdFxcdFxcdGZhY2UgLT0gMy4wO1xcblxcdFxcdH1cXG5cXHRcXHR1di54ICs9IGZhY2UgKiBmYWNlU2l6ZTtcXG5cXHRcXHR1di54ICs9IGZpbHRlckludCAqIDMuMCAqIGN1YmVVVl9taW5UaWxlU2l6ZTtcXG5cXHRcXHR1di55ICs9IDQuMCAqICggZXhwMiggQ1VCRVVWX01BWF9NSVAgKSAtIGZhY2VTaXplICk7XFxuXFx0XFx0dXYueCAqPSBDVUJFVVZfVEVYRUxfV0lEVEg7XFxuXFx0XFx0dXYueSAqPSBDVUJFVVZfVEVYRUxfSEVJR0hUO1xcblxcdFxcdCNpZmRlZiB0ZXh0dXJlMkRHcmFkRVhUXFxuXFx0XFx0XFx0cmV0dXJuIHRleHR1cmUyREdyYWRFWFQoIGVudk1hcCwgdXYsIHZlYzIoIDAuMCApLCB2ZWMyKCAwLjAgKSApLnJnYjtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHJldHVybiB0ZXh0dXJlMkQoIGVudk1hcCwgdXYgKS5yZ2I7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcblxcdCNkZWZpbmUgY3ViZVVWX3IwIDEuMFxcblxcdCNkZWZpbmUgY3ViZVVWX20wIC0gMi4wXFxuXFx0I2RlZmluZSBjdWJlVVZfcjEgMC44XFxuXFx0I2RlZmluZSBjdWJlVVZfbTEgLSAxLjBcXG5cXHQjZGVmaW5lIGN1YmVVVl9yNCAwLjRcXG5cXHQjZGVmaW5lIGN1YmVVVl9tNCAyLjBcXG5cXHQjZGVmaW5lIGN1YmVVVl9yNSAwLjMwNVxcblxcdCNkZWZpbmUgY3ViZVVWX201IDMuMFxcblxcdCNkZWZpbmUgY3ViZVVWX3I2IDAuMjFcXG5cXHQjZGVmaW5lIGN1YmVVVl9tNiA0LjBcXG5cXHRmbG9hdCByb3VnaG5lc3NUb01pcCggZmxvYXQgcm91Z2huZXNzICkge1xcblxcdFxcdGZsb2F0IG1pcCA9IDAuMDtcXG5cXHRcXHRpZiAoIHJvdWdobmVzcyA+PSBjdWJlVVZfcjEgKSB7XFxuXFx0XFx0XFx0bWlwID0gKCBjdWJlVVZfcjAgLSByb3VnaG5lc3MgKSAqICggY3ViZVVWX20xIC0gY3ViZVVWX20wICkgLyAoIGN1YmVVVl9yMCAtIGN1YmVVVl9yMSApICsgY3ViZVVWX20wO1xcblxcdFxcdH0gZWxzZSBpZiAoIHJvdWdobmVzcyA+PSBjdWJlVVZfcjQgKSB7XFxuXFx0XFx0XFx0bWlwID0gKCBjdWJlVVZfcjEgLSByb3VnaG5lc3MgKSAqICggY3ViZVVWX200IC0gY3ViZVVWX20xICkgLyAoIGN1YmVVVl9yMSAtIGN1YmVVVl9yNCApICsgY3ViZVVWX20xO1xcblxcdFxcdH0gZWxzZSBpZiAoIHJvdWdobmVzcyA+PSBjdWJlVVZfcjUgKSB7XFxuXFx0XFx0XFx0bWlwID0gKCBjdWJlVVZfcjQgLSByb3VnaG5lc3MgKSAqICggY3ViZVVWX201IC0gY3ViZVVWX200ICkgLyAoIGN1YmVVVl9yNCAtIGN1YmVVVl9yNSApICsgY3ViZVVWX200O1xcblxcdFxcdH0gZWxzZSBpZiAoIHJvdWdobmVzcyA+PSBjdWJlVVZfcjYgKSB7XFxuXFx0XFx0XFx0bWlwID0gKCBjdWJlVVZfcjUgLSByb3VnaG5lc3MgKSAqICggY3ViZVVWX202IC0gY3ViZVVWX201ICkgLyAoIGN1YmVVVl9yNSAtIGN1YmVVVl9yNiApICsgY3ViZVVWX201O1xcblxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0bWlwID0gLSAyLjAgKiBsb2cyKCAxLjE2ICogcm91Z2huZXNzICk7XFx0XFx0fVxcblxcdFxcdHJldHVybiBtaXA7XFxuXFx0fVxcblxcdHZlYzQgdGV4dHVyZUN1YmVVViggc2FtcGxlcjJEIGVudk1hcCwgdmVjMyBzYW1wbGVEaXIsIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRcXHRmbG9hdCBtaXAgPSBjbGFtcCggcm91Z2huZXNzVG9NaXAoIHJvdWdobmVzcyApLCBjdWJlVVZfbTAsIENVQkVVVl9NQVhfTUlQICk7XFxuXFx0XFx0ZmxvYXQgbWlwRiA9IGZyYWN0KCBtaXAgKTtcXG5cXHRcXHRmbG9hdCBtaXBJbnQgPSBmbG9vciggbWlwICk7XFxuXFx0XFx0dmVjMyBjb2xvcjAgPSBiaWxpbmVhckN1YmVVViggZW52TWFwLCBzYW1wbGVEaXIsIG1pcEludCApO1xcblxcdFxcdGlmICggbWlwRiA9PSAwLjAgKSB7XFxuXFx0XFx0XFx0cmV0dXJuIHZlYzQoIGNvbG9yMCwgMS4wICk7XFxuXFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHR2ZWMzIGNvbG9yMSA9IGJpbGluZWFyQ3ViZVVWKCBlbnZNYXAsIHNhbXBsZURpciwgbWlwSW50ICsgMS4wICk7XFxuXFx0XFx0XFx0cmV0dXJuIHZlYzQoIG1peCggY29sb3IwLCBjb2xvcjEsIG1pcEYgKSwgMS4wICk7XFxuXFx0XFx0fVxcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIGRlZmF1bHRub3JtYWxfdmVydGV4ID0gXCJ2ZWMzIHRyYW5zZm9ybWVkTm9ybWFsID0gb2JqZWN0Tm9ybWFsO1xcbiNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdHZlYzMgdHJhbnNmb3JtZWRUYW5nZW50ID0gb2JqZWN0VGFuZ2VudDtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0JBVENISU5HXFxuXFx0bWF0MyBibSA9IG1hdDMoIGJhdGNoaW5nTWF0cml4ICk7XFxuXFx0dHJhbnNmb3JtZWROb3JtYWwgLz0gdmVjMyggZG90KCBibVsgMCBdLCBibVsgMCBdICksIGRvdCggYm1bIDEgXSwgYm1bIDEgXSApLCBkb3QoIGJtWyAyIF0sIGJtWyAyIF0gKSApO1xcblxcdHRyYW5zZm9ybWVkTm9ybWFsID0gYm0gKiB0cmFuc2Zvcm1lZE5vcm1hbDtcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHR0cmFuc2Zvcm1lZFRhbmdlbnQgPSBibSAqIHRyYW5zZm9ybWVkVGFuZ2VudDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0lOU1RBTkNJTkdcXG5cXHRtYXQzIGltID0gbWF0MyggaW5zdGFuY2VNYXRyaXggKTtcXG5cXHR0cmFuc2Zvcm1lZE5vcm1hbCAvPSB2ZWMzKCBkb3QoIGltWyAwIF0sIGltWyAwIF0gKSwgZG90KCBpbVsgMSBdLCBpbVsgMSBdICksIGRvdCggaW1bIDIgXSwgaW1bIDIgXSApICk7XFxuXFx0dHJhbnNmb3JtZWROb3JtYWwgPSBpbSAqIHRyYW5zZm9ybWVkTm9ybWFsO1xcblxcdCNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdFxcdHRyYW5zZm9ybWVkVGFuZ2VudCA9IGltICogdHJhbnNmb3JtZWRUYW5nZW50O1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcbnRyYW5zZm9ybWVkTm9ybWFsID0gbm9ybWFsTWF0cml4ICogdHJhbnNmb3JtZWROb3JtYWw7XFxuI2lmZGVmIEZMSVBfU0lERURcXG5cXHR0cmFuc2Zvcm1lZE5vcm1hbCA9IC0gdHJhbnNmb3JtZWROb3JtYWw7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9UQU5HRU5UXFxuXFx0dHJhbnNmb3JtZWRUYW5nZW50ID0gKCBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCB0cmFuc2Zvcm1lZFRhbmdlbnQsIDAuMCApICkueHl6O1xcblxcdCNpZmRlZiBGTElQX1NJREVEXFxuXFx0XFx0dHJhbnNmb3JtZWRUYW5nZW50ID0gLSB0cmFuc2Zvcm1lZFRhbmdlbnQ7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgZGlzcGxhY2VtZW50TWFwO1xcblxcdHVuaWZvcm0gZmxvYXQgZGlzcGxhY2VtZW50U2NhbGU7XFxuXFx0dW5pZm9ybSBmbG9hdCBkaXNwbGFjZW1lbnRCaWFzO1xcbiNlbmRpZlwiO1xuXG52YXIgZGlzcGxhY2VtZW50bWFwX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9ESVNQTEFDRU1FTlRNQVBcXG5cXHR0cmFuc2Zvcm1lZCArPSBub3JtYWxpemUoIG9iamVjdE5vcm1hbCApICogKCB0ZXh0dXJlMkQoIGRpc3BsYWNlbWVudE1hcCwgdkRpc3BsYWNlbWVudE1hcFV2ICkueCAqIGRpc3BsYWNlbWVudFNjYWxlICsgZGlzcGxhY2VtZW50QmlhcyApO1xcbiNlbmRpZlwiO1xuXG52YXIgZW1pc3NpdmVtYXBfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRU1JU1NJVkVNQVBcXG5cXHR2ZWM0IGVtaXNzaXZlQ29sb3IgPSB0ZXh0dXJlMkQoIGVtaXNzaXZlTWFwLCB2RW1pc3NpdmVNYXBVdiApO1xcblxcdCNpZmRlZiBERUNPREVfVklERU9fVEVYVFVSRV9FTUlTU0lWRVxcblxcdFxcdGVtaXNzaXZlQ29sb3IgPSBzUkdCVHJhbnNmZXJFT1RGKCBlbWlzc2l2ZUNvbG9yICk7XFxuXFx0I2VuZGlmXFxuXFx0dG90YWxFbWlzc2l2ZVJhZGlhbmNlICo9IGVtaXNzaXZlQ29sb3IucmdiO1xcbiNlbmRpZlwiO1xuXG52YXIgZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9FTUlTU0lWRU1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGVtaXNzaXZlTWFwO1xcbiNlbmRpZlwiO1xuXG52YXIgY29sb3JzcGFjZV9mcmFnbWVudCA9IFwiZ2xfRnJhZ0NvbG9yID0gbGluZWFyVG9PdXRwdXRUZXhlbCggZ2xfRnJhZ0NvbG9yICk7XCI7XG5cbnZhciBjb2xvcnNwYWNlX3BhcnNfZnJhZ21lbnQgPSBcInZlYzQgTGluZWFyVHJhbnNmZXJPRVRGKCBpbiB2ZWM0IHZhbHVlICkge1xcblxcdHJldHVybiB2YWx1ZTtcXG59XFxudmVjNCBzUkdCVHJhbnNmZXJFT1RGKCBpbiB2ZWM0IHZhbHVlICkge1xcblxcdHJldHVybiB2ZWM0KCBtaXgoIHBvdyggdmFsdWUucmdiICogMC45NDc4NjcyOTg2ICsgdmVjMyggMC4wNTIxMzI3MDE0ICksIHZlYzMoIDIuNCApICksIHZhbHVlLnJnYiAqIDAuMDc3Mzk5MzgwOCwgdmVjMyggbGVzc1RoYW5FcXVhbCggdmFsdWUucmdiLCB2ZWMzKCAwLjA0MDQ1ICkgKSApICksIHZhbHVlLmEgKTtcXG59XFxudmVjNCBzUkdCVHJhbnNmZXJPRVRGKCBpbiB2ZWM0IHZhbHVlICkge1xcblxcdHJldHVybiB2ZWM0KCBtaXgoIHBvdyggdmFsdWUucmdiLCB2ZWMzKCAwLjQxNjY2ICkgKSAqIDEuMDU1IC0gdmVjMyggMC4wNTUgKSwgdmFsdWUucmdiICogMTIuOTIsIHZlYzMoIGxlc3NUaGFuRXF1YWwoIHZhbHVlLnJnYiwgdmVjMyggMC4wMDMxMzA4ICkgKSApICksIHZhbHVlLmEgKTtcXG59XCI7XG5cbnZhciBlbnZtYXBfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0I2lmZGVmIEVOVl9XT1JMRFBPU1xcblxcdFxcdHZlYzMgY2FtZXJhVG9GcmFnO1xcblxcdFxcdGlmICggaXNPcnRob2dyYXBoaWMgKSB7XFxuXFx0XFx0XFx0Y2FtZXJhVG9GcmFnID0gbm9ybWFsaXplKCB2ZWMzKCAtIHZpZXdNYXRyaXhbIDAgXVsgMiBdLCAtIHZpZXdNYXRyaXhbIDEgXVsgMiBdLCAtIHZpZXdNYXRyaXhbIDIgXVsgMiBdICkgKTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdGNhbWVyYVRvRnJhZyA9IG5vcm1hbGl6ZSggdldvcmxkUG9zaXRpb24gLSBjYW1lcmFQb3NpdGlvbiApO1xcblxcdFxcdH1cXG5cXHRcXHR2ZWMzIHdvcmxkTm9ybWFsID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggbm9ybWFsLCB2aWV3TWF0cml4ICk7XFxuXFx0XFx0I2lmZGVmIEVOVk1BUF9NT0RFX1JFRkxFQ1RJT05cXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSByZWZsZWN0KCBjYW1lcmFUb0ZyYWcsIHdvcmxkTm9ybWFsICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSByZWZyYWN0KCBjYW1lcmFUb0ZyYWcsIHdvcmxkTm9ybWFsLCByZWZyYWN0aW9uUmF0aW8gKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzMgcmVmbGVjdFZlYyA9IHZSZWZsZWN0O1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXFxuXFx0XFx0dmVjNCBlbnZDb2xvciA9IHRleHR1cmVDdWJlKCBlbnZNYXAsIGVudk1hcFJvdGF0aW9uICogdmVjMyggZmxpcEVudk1hcCAqIHJlZmxlY3RWZWMueCwgcmVmbGVjdFZlYy55eiApICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHR2ZWM0IGVudkNvbG9yID0gdmVjNCggMC4wICk7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIEVOVk1BUF9CTEVORElOR19NVUxUSVBMWVxcblxcdFxcdG91dGdvaW5nTGlnaHQgPSBtaXgoIG91dGdvaW5nTGlnaHQsIG91dGdvaW5nTGlnaHQgKiBlbnZDb2xvci54eXosIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHkgKTtcXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfQkxFTkRJTkdfTUlYIClcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ID0gbWl4KCBvdXRnb2luZ0xpZ2h0LCBlbnZDb2xvci54eXosIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHkgKTtcXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfQkxFTkRJTkdfQUREIClcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ICs9IGVudkNvbG9yLnh5eiAqIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHk7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0dW5pZm9ybSBmbG9hdCBlbnZNYXBJbnRlbnNpdHk7XFxuXFx0dW5pZm9ybSBmbG9hdCBmbGlwRW52TWFwO1xcblxcdHVuaWZvcm0gbWF0MyBlbnZNYXBSb3RhdGlvbjtcXG5cXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxcblxcdFxcdHVuaWZvcm0gc2FtcGxlckN1YmUgZW52TWFwO1xcblxcdCNlbHNlXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgZW52TWFwO1xcblxcdCNlbmRpZlxcblxcdFxcbiNlbmRpZlwiO1xuXG52YXIgZW52bWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0dW5pZm9ybSBmbG9hdCByZWZsZWN0aXZpdHk7XFxuXFx0I2lmIGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFBIT05HICkgfHwgZGVmaW5lZCggTEFNQkVSVCApXFxuXFx0XFx0I2RlZmluZSBFTlZfV09STERQT1NcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgRU5WX1dPUkxEUE9TXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcblxcdFxcdHVuaWZvcm0gZmxvYXQgcmVmcmFjdGlvblJhdGlvO1xcblxcdCNlbHNlXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZSZWZsZWN0O1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgZW52bWFwX3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdCNpZiBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBQSE9ORyApIHx8IGRlZmluZWQoIExBTUJFUlQgKVxcblxcdFxcdCNkZWZpbmUgRU5WX1dPUkxEUE9TXFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIEVOVl9XT1JMRFBPU1xcblxcdFxcdFxcblxcdFxcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG5cXHQjZWxzZVxcblxcdFxcdHZhcnlpbmcgdmVjMyB2UmVmbGVjdDtcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IHJlZnJhY3Rpb25SYXRpbztcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGVudm1hcF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0I2lmZGVmIEVOVl9XT1JMRFBPU1xcblxcdFxcdHZXb3JsZFBvc2l0aW9uID0gd29ybGRQb3NpdGlvbi54eXo7XFxuXFx0I2Vsc2VcXG5cXHRcXHR2ZWMzIGNhbWVyYVRvVmVydGV4O1xcblxcdFxcdGlmICggaXNPcnRob2dyYXBoaWMgKSB7XFxuXFx0XFx0XFx0Y2FtZXJhVG9WZXJ0ZXggPSBub3JtYWxpemUoIHZlYzMoIC0gdmlld01hdHJpeFsgMCBdWyAyIF0sIC0gdmlld01hdHJpeFsgMSBdWyAyIF0sIC0gdmlld01hdHJpeFsgMiBdWyAyIF0gKSApO1xcblxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0Y2FtZXJhVG9WZXJ0ZXggPSBub3JtYWxpemUoIHdvcmxkUG9zaXRpb24ueHl6IC0gY2FtZXJhUG9zaXRpb24gKTtcXG5cXHRcXHR9XFxuXFx0XFx0dmVjMyB3b3JsZE5vcm1hbCA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIHRyYW5zZm9ybWVkTm9ybWFsLCB2aWV3TWF0cml4ICk7XFxuXFx0XFx0I2lmZGVmIEVOVk1BUF9NT0RFX1JFRkxFQ1RJT05cXG5cXHRcXHRcXHR2UmVmbGVjdCA9IHJlZmxlY3QoIGNhbWVyYVRvVmVydGV4LCB3b3JsZE5vcm1hbCApO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0dlJlZmxlY3QgPSByZWZyYWN0KCBjYW1lcmFUb1ZlcnRleCwgd29ybGROb3JtYWwsIHJlZnJhY3Rpb25SYXRpbyApO1xcblxcdFxcdCNlbmRpZlxcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgZm9nX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9GT0dcXG5cXHR2Rm9nRGVwdGggPSAtIG12UG9zaXRpb24uejtcXG4jZW5kaWZcIjtcblxudmFyIGZvZ19wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9GT0dcXG5cXHR2YXJ5aW5nIGZsb2F0IHZGb2dEZXB0aDtcXG4jZW5kaWZcIjtcblxudmFyIGZvZ19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9GT0dcXG5cXHQjaWZkZWYgRk9HX0VYUDJcXG5cXHRcXHRmbG9hdCBmb2dGYWN0b3IgPSAxLjAgLSBleHAoIC0gZm9nRGVuc2l0eSAqIGZvZ0RlbnNpdHkgKiB2Rm9nRGVwdGggKiB2Rm9nRGVwdGggKTtcXG5cXHQjZWxzZVxcblxcdFxcdGZsb2F0IGZvZ0ZhY3RvciA9IHNtb290aHN0ZXAoIGZvZ05lYXIsIGZvZ0ZhciwgdkZvZ0RlcHRoICk7XFxuXFx0I2VuZGlmXFxuXFx0Z2xfRnJhZ0NvbG9yLnJnYiA9IG1peCggZ2xfRnJhZ0NvbG9yLnJnYiwgZm9nQ29sb3IsIGZvZ0ZhY3RvciApO1xcbiNlbmRpZlwiO1xuXG52YXIgZm9nX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRk9HXFxuXFx0dW5pZm9ybSB2ZWMzIGZvZ0NvbG9yO1xcblxcdHZhcnlpbmcgZmxvYXQgdkZvZ0RlcHRoO1xcblxcdCNpZmRlZiBGT0dfRVhQMlxcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nRGVuc2l0eTtcXG5cXHQjZWxzZVxcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nTmVhcjtcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IGZvZ0ZhcjtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfR1JBRElFTlRNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBncmFkaWVudE1hcDtcXG4jZW5kaWZcXG52ZWMzIGdldEdyYWRpZW50SXJyYWRpYW5jZSggdmVjMyBub3JtYWwsIHZlYzMgbGlnaHREaXJlY3Rpb24gKSB7XFxuXFx0ZmxvYXQgZG90TkwgPSBkb3QoIG5vcm1hbCwgbGlnaHREaXJlY3Rpb24gKTtcXG5cXHR2ZWMyIGNvb3JkID0gdmVjMiggZG90TkwgKiAwLjUgKyAwLjUsIDAuMCApO1xcblxcdCNpZmRlZiBVU0VfR1JBRElFTlRNQVBcXG5cXHRcXHRyZXR1cm4gdmVjMyggdGV4dHVyZTJEKCBncmFkaWVudE1hcCwgY29vcmQgKS5yICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHR2ZWMyIGZ3ID0gZndpZHRoKCBjb29yZCApICogMC41O1xcblxcdFxcdHJldHVybiBtaXgoIHZlYzMoIDAuNyApLCB2ZWMzKCAxLjAgKSwgc21vb3Roc3RlcCggMC43IC0gZncueCwgMC43ICsgZncueCwgY29vcmQueCApICk7XFxuXFx0I2VuZGlmXFxufVwiO1xuXG52YXIgbGlnaHRtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9MSUdIVE1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGxpZ2h0TWFwO1xcblxcdHVuaWZvcm0gZmxvYXQgbGlnaHRNYXBJbnRlbnNpdHk7XFxuI2VuZGlmXCI7XG5cbnZhciBsaWdodHNfbGFtYmVydF9mcmFnbWVudCA9IFwiTGFtYmVydE1hdGVyaWFsIG1hdGVyaWFsO1xcbm1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxubWF0ZXJpYWwuc3BlY3VsYXJTdHJlbmd0aCA9IHNwZWN1bGFyU3RyZW5ndGg7XCI7XG5cbnZhciBsaWdodHNfbGFtYmVydF9wYXJzX2ZyYWdtZW50ID0gXCJ2YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG5zdHJ1Y3QgTGFtYmVydE1hdGVyaWFsIHtcXG5cXHR2ZWMzIGRpZmZ1c2VDb2xvcjtcXG5cXHRmbG9hdCBzcGVjdWxhclN0cmVuZ3RoO1xcbn07XFxudm9pZCBSRV9EaXJlY3RfTGFtYmVydCggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVBvc2l0aW9uLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Tm9ybWFsLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Vmlld0RpciwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgY29uc3QgaW4gTGFtYmVydE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRmbG9hdCBkb3ROTCA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Tm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSApO1xcblxcdHZlYzMgaXJyYWRpYW5jZSA9IGRvdE5MICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG59XFxudm9pZCBSRV9JbmRpcmVjdERpZmZ1c2VfTGFtYmVydCggY29uc3QgaW4gdmVjMyBpcnJhZGlhbmNlLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5UG9zaXRpb24sIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlOb3JtYWwsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlWaWV3RGlyLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBjb25zdCBpbiBMYW1iZXJ0TWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG59XFxuI2RlZmluZSBSRV9EaXJlY3RcXHRcXHRcXHRcXHRSRV9EaXJlY3RfTGFtYmVydFxcbiNkZWZpbmUgUkVfSW5kaXJlY3REaWZmdXNlXFx0XFx0UkVfSW5kaXJlY3REaWZmdXNlX0xhbWJlcnRcIjtcblxudmFyIGxpZ2h0c19wYXJzX2JlZ2luID0gXCJ1bmlmb3JtIGJvb2wgcmVjZWl2ZVNoYWRvdztcXG51bmlmb3JtIHZlYzMgYW1iaWVudExpZ2h0Q29sb3I7XFxuI2lmIGRlZmluZWQoIFVTRV9MSUdIVF9QUk9CRVMgKVxcblxcdHVuaWZvcm0gdmVjMyBsaWdodFByb2JlWyA5IF07XFxuI2VuZGlmXFxudmVjMyBzaEdldElycmFkaWFuY2VBdCggaW4gdmVjMyBub3JtYWwsIGluIHZlYzMgc2hDb2VmZmljaWVudHNbIDkgXSApIHtcXG5cXHRmbG9hdCB4ID0gbm9ybWFsLngsIHkgPSBub3JtYWwueSwgeiA9IG5vcm1hbC56O1xcblxcdHZlYzMgcmVzdWx0ID0gc2hDb2VmZmljaWVudHNbIDAgXSAqIDAuODg2MjI3O1xcblxcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgMSBdICogMi4wICogMC41MTE2NjQgKiB5O1xcblxcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgMiBdICogMi4wICogMC41MTE2NjQgKiB6O1xcblxcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgMyBdICogMi4wICogMC41MTE2NjQgKiB4O1xcblxcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgNCBdICogMi4wICogMC40MjkwNDMgKiB4ICogeTtcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDUgXSAqIDIuMCAqIDAuNDI5MDQzICogeSAqIHo7XFxuXFx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA2IF0gKiAoIDAuNzQzMTI1ICogeiAqIHogLSAwLjI0NzcwOCApO1xcblxcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgNyBdICogMi4wICogMC40MjkwNDMgKiB4ICogejtcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDggXSAqIDAuNDI5MDQzICogKCB4ICogeCAtIHkgKiB5ICk7XFxuXFx0cmV0dXJuIHJlc3VsdDtcXG59XFxudmVjMyBnZXRMaWdodFByb2JlSXJyYWRpYW5jZSggY29uc3QgaW4gdmVjMyBsaWdodFByb2JlWyA5IF0sIGNvbnN0IGluIHZlYzMgbm9ybWFsICkge1xcblxcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBub3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBzaEdldElycmFkaWFuY2VBdCggd29ybGROb3JtYWwsIGxpZ2h0UHJvYmUgKTtcXG5cXHRyZXR1cm4gaXJyYWRpYW5jZTtcXG59XFxudmVjMyBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiB2ZWMzIGFtYmllbnRMaWdodENvbG9yICkge1xcblxcdHZlYzMgaXJyYWRpYW5jZSA9IGFtYmllbnRMaWdodENvbG9yO1xcblxcdHJldHVybiBpcnJhZGlhbmNlO1xcbn1cXG5mbG9hdCBnZXREaXN0YW5jZUF0dGVudWF0aW9uKCBjb25zdCBpbiBmbG9hdCBsaWdodERpc3RhbmNlLCBjb25zdCBpbiBmbG9hdCBjdXRvZmZEaXN0YW5jZSwgY29uc3QgaW4gZmxvYXQgZGVjYXlFeHBvbmVudCApIHtcXG5cXHRmbG9hdCBkaXN0YW5jZUZhbGxvZmYgPSAxLjAgLyBtYXgoIHBvdyggbGlnaHREaXN0YW5jZSwgZGVjYXlFeHBvbmVudCApLCAwLjAxICk7XFxuXFx0aWYgKCBjdXRvZmZEaXN0YW5jZSA+IDAuMCApIHtcXG5cXHRcXHRkaXN0YW5jZUZhbGxvZmYgKj0gcG93Miggc2F0dXJhdGUoIDEuMCAtIHBvdzQoIGxpZ2h0RGlzdGFuY2UgLyBjdXRvZmZEaXN0YW5jZSApICkgKTtcXG5cXHR9XFxuXFx0cmV0dXJuIGRpc3RhbmNlRmFsbG9mZjtcXG59XFxuZmxvYXQgZ2V0U3BvdEF0dGVudWF0aW9uKCBjb25zdCBpbiBmbG9hdCBjb25lQ29zaW5lLCBjb25zdCBpbiBmbG9hdCBwZW51bWJyYUNvc2luZSwgY29uc3QgaW4gZmxvYXQgYW5nbGVDb3NpbmUgKSB7XFxuXFx0cmV0dXJuIHNtb290aHN0ZXAoIGNvbmVDb3NpbmUsIHBlbnVtYnJhQ29zaW5lLCBhbmdsZUNvc2luZSApO1xcbn1cXG4jaWYgTlVNX0RJUl9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IERpcmVjdGlvbmFsTGlnaHQge1xcblxcdFxcdHZlYzMgZGlyZWN0aW9uO1xcblxcdFxcdHZlYzMgY29sb3I7XFxuXFx0fTtcXG5cXHR1bmlmb3JtIERpcmVjdGlvbmFsTGlnaHQgZGlyZWN0aW9uYWxMaWdodHNbIE5VTV9ESVJfTElHSFRTIF07XFxuXFx0dm9pZCBnZXREaXJlY3Rpb25hbExpZ2h0SW5mbyggY29uc3QgaW4gRGlyZWN0aW9uYWxMaWdodCBkaXJlY3Rpb25hbExpZ2h0LCBvdXQgSW5jaWRlbnRMaWdodCBsaWdodCApIHtcXG5cXHRcXHRsaWdodC5jb2xvciA9IGRpcmVjdGlvbmFsTGlnaHQuY29sb3I7XFxuXFx0XFx0bGlnaHQuZGlyZWN0aW9uID0gZGlyZWN0aW9uYWxMaWdodC5kaXJlY3Rpb247XFxuXFx0XFx0bGlnaHQudmlzaWJsZSA9IHRydWU7XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBOVU1fUE9JTlRfTElHSFRTID4gMFxcblxcdHN0cnVjdCBQb2ludExpZ2h0IHtcXG5cXHRcXHR2ZWMzIHBvc2l0aW9uO1xcblxcdFxcdHZlYzMgY29sb3I7XFxuXFx0XFx0ZmxvYXQgZGlzdGFuY2U7XFxuXFx0XFx0ZmxvYXQgZGVjYXk7XFxuXFx0fTtcXG5cXHR1bmlmb3JtIFBvaW50TGlnaHQgcG9pbnRMaWdodHNbIE5VTV9QT0lOVF9MSUdIVFMgXTtcXG5cXHR2b2lkIGdldFBvaW50TGlnaHRJbmZvKCBjb25zdCBpbiBQb2ludExpZ2h0IHBvaW50TGlnaHQsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlQb3NpdGlvbiwgb3V0IEluY2lkZW50TGlnaHQgbGlnaHQgKSB7XFxuXFx0XFx0dmVjMyBsVmVjdG9yID0gcG9pbnRMaWdodC5wb3NpdGlvbiAtIGdlb21ldHJ5UG9zaXRpb247XFxuXFx0XFx0bGlnaHQuZGlyZWN0aW9uID0gbm9ybWFsaXplKCBsVmVjdG9yICk7XFxuXFx0XFx0ZmxvYXQgbGlnaHREaXN0YW5jZSA9IGxlbmd0aCggbFZlY3RvciApO1xcblxcdFxcdGxpZ2h0LmNvbG9yID0gcG9pbnRMaWdodC5jb2xvcjtcXG5cXHRcXHRsaWdodC5jb2xvciAqPSBnZXREaXN0YW5jZUF0dGVudWF0aW9uKCBsaWdodERpc3RhbmNlLCBwb2ludExpZ2h0LmRpc3RhbmNlLCBwb2ludExpZ2h0LmRlY2F5ICk7XFxuXFx0XFx0bGlnaHQudmlzaWJsZSA9ICggbGlnaHQuY29sb3IgIT0gdmVjMyggMC4wICkgKTtcXG5cXHR9XFxuI2VuZGlmXFxuI2lmIE5VTV9TUE9UX0xJR0hUUyA+IDBcXG5cXHRzdHJ1Y3QgU3BvdExpZ2h0IHtcXG5cXHRcXHR2ZWMzIHBvc2l0aW9uO1xcblxcdFxcdHZlYzMgZGlyZWN0aW9uO1xcblxcdFxcdHZlYzMgY29sb3I7XFxuXFx0XFx0ZmxvYXQgZGlzdGFuY2U7XFxuXFx0XFx0ZmxvYXQgZGVjYXk7XFxuXFx0XFx0ZmxvYXQgY29uZUNvcztcXG5cXHRcXHRmbG9hdCBwZW51bWJyYUNvcztcXG5cXHR9O1xcblxcdHVuaWZvcm0gU3BvdExpZ2h0IHNwb3RMaWdodHNbIE5VTV9TUE9UX0xJR0hUUyBdO1xcblxcdHZvaWQgZ2V0U3BvdExpZ2h0SW5mbyggY29uc3QgaW4gU3BvdExpZ2h0IHNwb3RMaWdodCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVBvc2l0aW9uLCBvdXQgSW5jaWRlbnRMaWdodCBsaWdodCApIHtcXG5cXHRcXHR2ZWMzIGxWZWN0b3IgPSBzcG90TGlnaHQucG9zaXRpb24gLSBnZW9tZXRyeVBvc2l0aW9uO1xcblxcdFxcdGxpZ2h0LmRpcmVjdGlvbiA9IG5vcm1hbGl6ZSggbFZlY3RvciApO1xcblxcdFxcdGZsb2F0IGFuZ2xlQ29zID0gZG90KCBsaWdodC5kaXJlY3Rpb24sIHNwb3RMaWdodC5kaXJlY3Rpb24gKTtcXG5cXHRcXHRmbG9hdCBzcG90QXR0ZW51YXRpb24gPSBnZXRTcG90QXR0ZW51YXRpb24oIHNwb3RMaWdodC5jb25lQ29zLCBzcG90TGlnaHQucGVudW1icmFDb3MsIGFuZ2xlQ29zICk7XFxuXFx0XFx0aWYgKCBzcG90QXR0ZW51YXRpb24gPiAwLjAgKSB7XFxuXFx0XFx0XFx0ZmxvYXQgbGlnaHREaXN0YW5jZSA9IGxlbmd0aCggbFZlY3RvciApO1xcblxcdFxcdFxcdGxpZ2h0LmNvbG9yID0gc3BvdExpZ2h0LmNvbG9yICogc3BvdEF0dGVudWF0aW9uO1xcblxcdFxcdFxcdGxpZ2h0LmNvbG9yICo9IGdldERpc3RhbmNlQXR0ZW51YXRpb24oIGxpZ2h0RGlzdGFuY2UsIHNwb3RMaWdodC5kaXN0YW5jZSwgc3BvdExpZ2h0LmRlY2F5ICk7XFxuXFx0XFx0XFx0bGlnaHQudmlzaWJsZSA9ICggbGlnaHQuY29sb3IgIT0gdmVjMyggMC4wICkgKTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdGxpZ2h0LmNvbG9yID0gdmVjMyggMC4wICk7XFxuXFx0XFx0XFx0bGlnaHQudmlzaWJsZSA9IGZhbHNlO1xcblxcdFxcdH1cXG5cXHR9XFxuI2VuZGlmXFxuI2lmIE5VTV9SRUNUX0FSRUFfTElHSFRTID4gMFxcblxcdHN0cnVjdCBSZWN0QXJlYUxpZ2h0IHtcXG5cXHRcXHR2ZWMzIGNvbG9yO1xcblxcdFxcdHZlYzMgcG9zaXRpb247XFxuXFx0XFx0dmVjMyBoYWxmV2lkdGg7XFxuXFx0XFx0dmVjMyBoYWxmSGVpZ2h0O1xcblxcdH07XFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbHRjXzE7XFx0dW5pZm9ybSBzYW1wbGVyMkQgbHRjXzI7XFxuXFx0dW5pZm9ybSBSZWN0QXJlYUxpZ2h0IHJlY3RBcmVhTGlnaHRzWyBOVU1fUkVDVF9BUkVBX0xJR0hUUyBdO1xcbiNlbmRpZlxcbiNpZiBOVU1fSEVNSV9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IEhlbWlzcGhlcmVMaWdodCB7XFxuXFx0XFx0dmVjMyBkaXJlY3Rpb247XFxuXFx0XFx0dmVjMyBza3lDb2xvcjtcXG5cXHRcXHR2ZWMzIGdyb3VuZENvbG9yO1xcblxcdH07XFxuXFx0dW5pZm9ybSBIZW1pc3BoZXJlTGlnaHQgaGVtaXNwaGVyZUxpZ2h0c1sgTlVNX0hFTUlfTElHSFRTIF07XFxuXFx0dmVjMyBnZXRIZW1pc3BoZXJlTGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiBIZW1pc3BoZXJlTGlnaHQgaGVtaUxpZ2h0LCBjb25zdCBpbiB2ZWMzIG5vcm1hbCApIHtcXG5cXHRcXHRmbG9hdCBkb3ROTCA9IGRvdCggbm9ybWFsLCBoZW1pTGlnaHQuZGlyZWN0aW9uICk7XFxuXFx0XFx0ZmxvYXQgaGVtaURpZmZ1c2VXZWlnaHQgPSAwLjUgKiBkb3ROTCArIDAuNTtcXG5cXHRcXHR2ZWMzIGlycmFkaWFuY2UgPSBtaXgoIGhlbWlMaWdodC5ncm91bmRDb2xvciwgaGVtaUxpZ2h0LnNreUNvbG9yLCBoZW1pRGlmZnVzZVdlaWdodCApO1xcblxcdFxcdHJldHVybiBpcnJhZGlhbmNlO1xcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIGVudm1hcF9waHlzaWNhbF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdHZlYzMgZ2V0SUJMSXJyYWRpYW5jZSggY29uc3QgaW4gdmVjMyBub3JtYWwgKSB7XFxuXFx0XFx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVfVVZcXG5cXHRcXHRcXHR2ZWMzIHdvcmxkTm9ybWFsID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggbm9ybWFsLCB2aWV3TWF0cml4ICk7XFxuXFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlVVYoIGVudk1hcCwgZW52TWFwUm90YXRpb24gKiB3b3JsZE5vcm1hbCwgMS4wICk7XFxuXFx0XFx0XFx0cmV0dXJuIFBJICogZW52TWFwQ29sb3IucmdiICogZW52TWFwSW50ZW5zaXR5O1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0cmV0dXJuIHZlYzMoIDAuMCApO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG5cXHR2ZWMzIGdldElCTFJhZGlhbmNlKCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIHZlYzMgbm9ybWFsLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0XFx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVfVVZcXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSByZWZsZWN0KCAtIHZpZXdEaXIsIG5vcm1hbCApO1xcblxcdFxcdFxcdHJlZmxlY3RWZWMgPSBub3JtYWxpemUoIG1peCggcmVmbGVjdFZlYywgbm9ybWFsLCByb3VnaG5lc3MgKiByb3VnaG5lc3MpICk7XFxuXFx0XFx0XFx0cmVmbGVjdFZlYyA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIHJlZmxlY3RWZWMsIHZpZXdNYXRyaXggKTtcXG5cXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmVVViggZW52TWFwLCBlbnZNYXBSb3RhdGlvbiAqIHJlZmxlY3RWZWMsIHJvdWdobmVzcyApO1xcblxcdFxcdFxcdHJldHVybiBlbnZNYXBDb2xvci5yZ2IgKiBlbnZNYXBJbnRlbnNpdHk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRyZXR1cm4gdmVjMyggMC4wICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcblxcdCNpZmRlZiBVU0VfQU5JU09UUk9QWVxcblxcdFxcdHZlYzMgZ2V0SUJMQW5pc290cm9weVJhZGlhbmNlKCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIHZlYzMgbm9ybWFsLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGNvbnN0IGluIHZlYzMgYml0YW5nZW50LCBjb25zdCBpbiBmbG9hdCBhbmlzb3Ryb3B5ICkge1xcblxcdFxcdFxcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFX1VWXFxuXFx0XFx0XFx0XFx0dmVjMyBiZW50Tm9ybWFsID0gY3Jvc3MoIGJpdGFuZ2VudCwgdmlld0RpciApO1xcblxcdFxcdFxcdFxcdGJlbnROb3JtYWwgPSBub3JtYWxpemUoIGNyb3NzKCBiZW50Tm9ybWFsLCBiaXRhbmdlbnQgKSApO1xcblxcdFxcdFxcdFxcdGJlbnROb3JtYWwgPSBub3JtYWxpemUoIG1peCggYmVudE5vcm1hbCwgbm9ybWFsLCBwb3cyKCBwb3cyKCAxLjAgLSBhbmlzb3Ryb3B5ICogKCAxLjAgLSByb3VnaG5lc3MgKSApICkgKSApO1xcblxcdFxcdFxcdFxcdHJldHVybiBnZXRJQkxSYWRpYW5jZSggdmlld0RpciwgYmVudE5vcm1hbCwgcm91Z2huZXNzICk7XFxuXFx0XFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRcXHRyZXR1cm4gdmVjMyggMC4wICk7XFxuXFx0XFx0XFx0I2VuZGlmXFxuXFx0XFx0fVxcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRzX3Rvb25fZnJhZ21lbnQgPSBcIlRvb25NYXRlcmlhbCBtYXRlcmlhbDtcXG5tYXRlcmlhbC5kaWZmdXNlQ29sb3IgPSBkaWZmdXNlQ29sb3IucmdiO1wiO1xuXG52YXIgbGlnaHRzX3Rvb25fcGFyc19mcmFnbWVudCA9IFwidmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuc3RydWN0IFRvb25NYXRlcmlhbCB7XFxuXFx0dmVjMyBkaWZmdXNlQ29sb3I7XFxufTtcXG52b2lkIFJFX0RpcmVjdF9Ub29uKCBjb25zdCBpbiBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0LCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5UG9zaXRpb24sIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlOb3JtYWwsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlWaWV3RGlyLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBjb25zdCBpbiBUb29uTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdHZlYzMgaXJyYWRpYW5jZSA9IGdldEdyYWRpZW50SXJyYWRpYW5jZSggZ2VvbWV0cnlOb3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG59XFxudm9pZCBSRV9JbmRpcmVjdERpZmZ1c2VfVG9vbiggY29uc3QgaW4gdmVjMyBpcnJhZGlhbmNlLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5UG9zaXRpb24sIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlOb3JtYWwsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlWaWV3RGlyLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBjb25zdCBpbiBUb29uTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG59XFxuI2RlZmluZSBSRV9EaXJlY3RcXHRcXHRcXHRcXHRSRV9EaXJlY3RfVG9vblxcbiNkZWZpbmUgUkVfSW5kaXJlY3REaWZmdXNlXFx0XFx0UkVfSW5kaXJlY3REaWZmdXNlX1Rvb25cIjtcblxudmFyIGxpZ2h0c19waG9uZ19mcmFnbWVudCA9IFwiQmxpbm5QaG9uZ01hdGVyaWFsIG1hdGVyaWFsO1xcbm1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxubWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IHNwZWN1bGFyO1xcbm1hdGVyaWFsLnNwZWN1bGFyU2hpbmluZXNzID0gc2hpbmluZXNzO1xcbm1hdGVyaWFsLnNwZWN1bGFyU3RyZW5ndGggPSBzcGVjdWxhclN0cmVuZ3RoO1wiO1xuXG52YXIgbGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQgPSBcInZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbnN0cnVjdCBCbGlublBob25nTWF0ZXJpYWwge1xcblxcdHZlYzMgZGlmZnVzZUNvbG9yO1xcblxcdHZlYzMgc3BlY3VsYXJDb2xvcjtcXG5cXHRmbG9hdCBzcGVjdWxhclNoaW5pbmVzcztcXG5cXHRmbG9hdCBzcGVjdWxhclN0cmVuZ3RoO1xcbn07XFxudm9pZCBSRV9EaXJlY3RfQmxpbm5QaG9uZyggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVBvc2l0aW9uLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Tm9ybWFsLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Vmlld0RpciwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgY29uc3QgaW4gQmxpbm5QaG9uZ01hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRmbG9hdCBkb3ROTCA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Tm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSApO1xcblxcdHZlYzMgaXJyYWRpYW5jZSA9IGRvdE5MICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPSBpcnJhZGlhbmNlICogQlJERl9CbGlublBob25nKCBkaXJlY3RMaWdodC5kaXJlY3Rpb24sIGdlb21ldHJ5Vmlld0RpciwgZ2VvbWV0cnlOb3JtYWwsIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyU2hpbmluZXNzICkgKiBtYXRlcmlhbC5zcGVjdWxhclN0cmVuZ3RoO1xcbn1cXG52b2lkIFJFX0luZGlyZWN0RGlmZnVzZV9CbGlublBob25nKCBjb25zdCBpbiB2ZWMzIGlycmFkaWFuY2UsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlQb3NpdGlvbiwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeU5vcm1hbCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVZpZXdEaXIsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIGNvbnN0IGluIEJsaW5uUGhvbmdNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcbn1cXG4jZGVmaW5lIFJFX0RpcmVjdFxcdFxcdFxcdFxcdFJFX0RpcmVjdF9CbGlublBob25nXFxuI2RlZmluZSBSRV9JbmRpcmVjdERpZmZ1c2VcXHRcXHRSRV9JbmRpcmVjdERpZmZ1c2VfQmxpbm5QaG9uZ1wiO1xuXG52YXIgbGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50ID0gXCJQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsO1xcbm1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IGRpZmZ1c2VDb2xvci5yZ2IgKiAoIDEuMCAtIG1ldGFsbmVzc0ZhY3RvciApO1xcbnZlYzMgZHh5ID0gbWF4KCBhYnMoIGRGZHgoIG5vblBlcnR1cmJlZE5vcm1hbCApICksIGFicyggZEZkeSggbm9uUGVydHVyYmVkTm9ybWFsICkgKSApO1xcbmZsb2F0IGdlb21ldHJ5Um91Z2huZXNzID0gbWF4KCBtYXgoIGR4eS54LCBkeHkueSApLCBkeHkueiApO1xcbm1hdGVyaWFsLnJvdWdobmVzcyA9IG1heCggcm91Z2huZXNzRmFjdG9yLCAwLjA1MjUgKTttYXRlcmlhbC5yb3VnaG5lc3MgKz0gZ2VvbWV0cnlSb3VnaG5lc3M7XFxubWF0ZXJpYWwucm91Z2huZXNzID0gbWluKCBtYXRlcmlhbC5yb3VnaG5lc3MsIDEuMCApO1xcbiNpZmRlZiBJT1JcXG5cXHRtYXRlcmlhbC5pb3IgPSBpb3I7XFxuXFx0I2lmZGVmIFVTRV9TUEVDVUxBUlxcblxcdFxcdGZsb2F0IHNwZWN1bGFySW50ZW5zaXR5RmFjdG9yID0gc3BlY3VsYXJJbnRlbnNpdHk7XFxuXFx0XFx0dmVjMyBzcGVjdWxhckNvbG9yRmFjdG9yID0gc3BlY3VsYXJDb2xvcjtcXG5cXHRcXHQjaWZkZWYgVVNFX1NQRUNVTEFSX0NPTE9STUFQXFxuXFx0XFx0XFx0c3BlY3VsYXJDb2xvckZhY3RvciAqPSB0ZXh0dXJlMkQoIHNwZWN1bGFyQ29sb3JNYXAsIHZTcGVjdWxhckNvbG9yTWFwVXYgKS5yZ2I7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0I2lmZGVmIFVTRV9TUEVDVUxBUl9JTlRFTlNJVFlNQVBcXG5cXHRcXHRcXHRzcGVjdWxhckludGVuc2l0eUZhY3RvciAqPSB0ZXh0dXJlMkQoIHNwZWN1bGFySW50ZW5zaXR5TWFwLCB2U3BlY3VsYXJJbnRlbnNpdHlNYXBVdiApLmE7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0bWF0ZXJpYWwuc3BlY3VsYXJGOTAgPSBtaXgoIHNwZWN1bGFySW50ZW5zaXR5RmFjdG9yLCAxLjAsIG1ldGFsbmVzc0ZhY3RvciApO1xcblxcdCNlbHNlXFxuXFx0XFx0ZmxvYXQgc3BlY3VsYXJJbnRlbnNpdHlGYWN0b3IgPSAxLjA7XFxuXFx0XFx0dmVjMyBzcGVjdWxhckNvbG9yRmFjdG9yID0gdmVjMyggMS4wICk7XFxuXFx0XFx0bWF0ZXJpYWwuc3BlY3VsYXJGOTAgPSAxLjA7XFxuXFx0I2VuZGlmXFxuXFx0bWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IG1peCggbWluKCBwb3cyKCAoIG1hdGVyaWFsLmlvciAtIDEuMCApIC8gKCBtYXRlcmlhbC5pb3IgKyAxLjAgKSApICogc3BlY3VsYXJDb2xvckZhY3RvciwgdmVjMyggMS4wICkgKSAqIHNwZWN1bGFySW50ZW5zaXR5RmFjdG9yLCBkaWZmdXNlQ29sb3IucmdiLCBtZXRhbG5lc3NGYWN0b3IgKTtcXG4jZWxzZVxcblxcdG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBtaXgoIHZlYzMoIDAuMDQgKSwgZGlmZnVzZUNvbG9yLnJnYiwgbWV0YWxuZXNzRmFjdG9yICk7XFxuXFx0bWF0ZXJpYWwuc3BlY3VsYXJGOTAgPSAxLjA7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9DTEVBUkNPQVRcXG5cXHRtYXRlcmlhbC5jbGVhcmNvYXQgPSBjbGVhcmNvYXQ7XFxuXFx0bWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzID0gY2xlYXJjb2F0Um91Z2huZXNzO1xcblxcdG1hdGVyaWFsLmNsZWFyY29hdEYwID0gdmVjMyggMC4wNCApO1xcblxcdG1hdGVyaWFsLmNsZWFyY29hdEY5MCA9IDEuMDtcXG5cXHQjaWZkZWYgVVNFX0NMRUFSQ09BVE1BUFxcblxcdFxcdG1hdGVyaWFsLmNsZWFyY29hdCAqPSB0ZXh0dXJlMkQoIGNsZWFyY29hdE1hcCwgdkNsZWFyY29hdE1hcFV2ICkueDtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX0NMRUFSQ09BVF9ST1VHSE5FU1NNQVBcXG5cXHRcXHRtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgKj0gdGV4dHVyZTJEKCBjbGVhcmNvYXRSb3VnaG5lc3NNYXAsIHZDbGVhcmNvYXRSb3VnaG5lc3NNYXBVdiApLnk7XFxuXFx0I2VuZGlmXFxuXFx0bWF0ZXJpYWwuY2xlYXJjb2F0ID0gc2F0dXJhdGUoIG1hdGVyaWFsLmNsZWFyY29hdCApO1xcdG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyA9IG1heCggbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzLCAwLjA1MjUgKTtcXG5cXHRtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgKz0gZ2VvbWV0cnlSb3VnaG5lc3M7XFxuXFx0bWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzID0gbWluKCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MsIDEuMCApO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfRElTUEVSU0lPTlxcblxcdG1hdGVyaWFsLmRpc3BlcnNpb24gPSBkaXNwZXJzaW9uO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VcXG5cXHRtYXRlcmlhbC5pcmlkZXNjZW5jZSA9IGlyaWRlc2NlbmNlO1xcblxcdG1hdGVyaWFsLmlyaWRlc2NlbmNlSU9SID0gaXJpZGVzY2VuY2VJT1I7XFxuXFx0I2lmZGVmIFVTRV9JUklERVNDRU5DRU1BUFxcblxcdFxcdG1hdGVyaWFsLmlyaWRlc2NlbmNlICo9IHRleHR1cmUyRCggaXJpZGVzY2VuY2VNYXAsIHZJcmlkZXNjZW5jZU1hcFV2ICkucjtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX0lSSURFU0NFTkNFX1RISUNLTkVTU01BUFxcblxcdFxcdG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzID0gKGlyaWRlc2NlbmNlVGhpY2tuZXNzTWF4aW11bSAtIGlyaWRlc2NlbmNlVGhpY2tuZXNzTWluaW11bSkgKiB0ZXh0dXJlMkQoIGlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwLCB2SXJpZGVzY2VuY2VUaGlja25lc3NNYXBVdiApLmcgKyBpcmlkZXNjZW5jZVRoaWNrbmVzc01pbmltdW07XFxuXFx0I2Vsc2VcXG5cXHRcXHRtYXRlcmlhbC5pcmlkZXNjZW5jZVRoaWNrbmVzcyA9IGlyaWRlc2NlbmNlVGhpY2tuZXNzTWF4aW11bTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1NIRUVOXFxuXFx0bWF0ZXJpYWwuc2hlZW5Db2xvciA9IHNoZWVuQ29sb3I7XFxuXFx0I2lmZGVmIFVTRV9TSEVFTl9DT0xPUk1BUFxcblxcdFxcdG1hdGVyaWFsLnNoZWVuQ29sb3IgKj0gdGV4dHVyZTJEKCBzaGVlbkNvbG9yTWFwLCB2U2hlZW5Db2xvck1hcFV2ICkucmdiO1xcblxcdCNlbmRpZlxcblxcdG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzID0gY2xhbXAoIHNoZWVuUm91Z2huZXNzLCAwLjA3LCAxLjAgKTtcXG5cXHQjaWZkZWYgVVNFX1NIRUVOX1JPVUdITkVTU01BUFxcblxcdFxcdG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzICo9IHRleHR1cmUyRCggc2hlZW5Sb3VnaG5lc3NNYXAsIHZTaGVlblJvdWdobmVzc01hcFV2ICkuYTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0FOSVNPVFJPUFlcXG5cXHQjaWZkZWYgVVNFX0FOSVNPVFJPUFlNQVBcXG5cXHRcXHRtYXQyIGFuaXNvdHJvcHlNYXQgPSBtYXQyKCBhbmlzb3Ryb3B5VmVjdG9yLngsIGFuaXNvdHJvcHlWZWN0b3IueSwgLSBhbmlzb3Ryb3B5VmVjdG9yLnksIGFuaXNvdHJvcHlWZWN0b3IueCApO1xcblxcdFxcdHZlYzMgYW5pc290cm9weVBvbGFyID0gdGV4dHVyZTJEKCBhbmlzb3Ryb3B5TWFwLCB2QW5pc290cm9weU1hcFV2ICkucmdiO1xcblxcdFxcdHZlYzIgYW5pc290cm9weVYgPSBhbmlzb3Ryb3B5TWF0ICogbm9ybWFsaXplKCAyLjAgKiBhbmlzb3Ryb3B5UG9sYXIucmcgLSB2ZWMyKCAxLjAgKSApICogYW5pc290cm9weVBvbGFyLmI7XFxuXFx0I2Vsc2VcXG5cXHRcXHR2ZWMyIGFuaXNvdHJvcHlWID0gYW5pc290cm9weVZlY3RvcjtcXG5cXHQjZW5kaWZcXG5cXHRtYXRlcmlhbC5hbmlzb3Ryb3B5ID0gbGVuZ3RoKCBhbmlzb3Ryb3B5ViApO1xcblxcdGlmKCBtYXRlcmlhbC5hbmlzb3Ryb3B5ID09IDAuMCApIHtcXG5cXHRcXHRhbmlzb3Ryb3B5ViA9IHZlYzIoIDEuMCwgMC4wICk7XFxuXFx0fSBlbHNlIHtcXG5cXHRcXHRhbmlzb3Ryb3B5ViAvPSBtYXRlcmlhbC5hbmlzb3Ryb3B5O1xcblxcdFxcdG1hdGVyaWFsLmFuaXNvdHJvcHkgPSBzYXR1cmF0ZSggbWF0ZXJpYWwuYW5pc290cm9weSApO1xcblxcdH1cXG5cXHRtYXRlcmlhbC5hbHBoYVQgPSBtaXgoIHBvdzIoIG1hdGVyaWFsLnJvdWdobmVzcyApLCAxLjAsIHBvdzIoIG1hdGVyaWFsLmFuaXNvdHJvcHkgKSApO1xcblxcdG1hdGVyaWFsLmFuaXNvdHJvcHlUID0gdGJuWyAwIF0gKiBhbmlzb3Ryb3B5Vi54ICsgdGJuWyAxIF0gKiBhbmlzb3Ryb3B5Vi55O1xcblxcdG1hdGVyaWFsLmFuaXNvdHJvcHlCID0gdGJuWyAxIF0gKiBhbmlzb3Ryb3B5Vi54IC0gdGJuWyAwIF0gKiBhbmlzb3Ryb3B5Vi55O1xcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQgPSBcInN0cnVjdCBQaHlzaWNhbE1hdGVyaWFsIHtcXG5cXHR2ZWMzIGRpZmZ1c2VDb2xvcjtcXG5cXHRmbG9hdCByb3VnaG5lc3M7XFxuXFx0dmVjMyBzcGVjdWxhckNvbG9yO1xcblxcdGZsb2F0IHNwZWN1bGFyRjkwO1xcblxcdGZsb2F0IGRpc3BlcnNpb247XFxuXFx0I2lmZGVmIFVTRV9DTEVBUkNPQVRcXG5cXHRcXHRmbG9hdCBjbGVhcmNvYXQ7XFxuXFx0XFx0ZmxvYXQgY2xlYXJjb2F0Um91Z2huZXNzO1xcblxcdFxcdHZlYzMgY2xlYXJjb2F0RjA7XFxuXFx0XFx0ZmxvYXQgY2xlYXJjb2F0RjkwO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VcXG5cXHRcXHRmbG9hdCBpcmlkZXNjZW5jZTtcXG5cXHRcXHRmbG9hdCBpcmlkZXNjZW5jZUlPUjtcXG5cXHRcXHRmbG9hdCBpcmlkZXNjZW5jZVRoaWNrbmVzcztcXG5cXHRcXHR2ZWMzIGlyaWRlc2NlbmNlRnJlc25lbDtcXG5cXHRcXHR2ZWMzIGlyaWRlc2NlbmNlRjA7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIFVTRV9TSEVFTlxcblxcdFxcdHZlYzMgc2hlZW5Db2xvcjtcXG5cXHRcXHRmbG9hdCBzaGVlblJvdWdobmVzcztcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgSU9SXFxuXFx0XFx0ZmxvYXQgaW9yO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBVU0VfVFJBTlNNSVNTSU9OXFxuXFx0XFx0ZmxvYXQgdHJhbnNtaXNzaW9uO1xcblxcdFxcdGZsb2F0IHRyYW5zbWlzc2lvbkFscGhhO1xcblxcdFxcdGZsb2F0IHRoaWNrbmVzcztcXG5cXHRcXHRmbG9hdCBhdHRlbnVhdGlvbkRpc3RhbmNlO1xcblxcdFxcdHZlYzMgYXR0ZW51YXRpb25Db2xvcjtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX0FOSVNPVFJPUFlcXG5cXHRcXHRmbG9hdCBhbmlzb3Ryb3B5O1xcblxcdFxcdGZsb2F0IGFscGhhVDtcXG5cXHRcXHR2ZWMzIGFuaXNvdHJvcHlUO1xcblxcdFxcdHZlYzMgYW5pc290cm9weUI7XFxuXFx0I2VuZGlmXFxufTtcXG52ZWMzIGNsZWFyY29hdFNwZWN1bGFyRGlyZWN0ID0gdmVjMyggMC4wICk7XFxudmVjMyBjbGVhcmNvYXRTcGVjdWxhckluZGlyZWN0ID0gdmVjMyggMC4wICk7XFxudmVjMyBzaGVlblNwZWN1bGFyRGlyZWN0ID0gdmVjMyggMC4wICk7XFxudmVjMyBzaGVlblNwZWN1bGFySW5kaXJlY3QgPSB2ZWMzKDAuMCApO1xcbnZlYzMgU2NobGlja190b19GMCggY29uc3QgaW4gdmVjMyBmLCBjb25zdCBpbiBmbG9hdCBmOTAsIGNvbnN0IGluIGZsb2F0IGRvdFZIICkge1xcbiAgICBmbG9hdCB4ID0gY2xhbXAoIDEuMCAtIGRvdFZILCAwLjAsIDEuMCApO1xcbiAgICBmbG9hdCB4MiA9IHggKiB4O1xcbiAgICBmbG9hdCB4NSA9IGNsYW1wKCB4ICogeDIgKiB4MiwgMC4wLCAwLjk5OTkgKTtcXG4gICAgcmV0dXJuICggZiAtIHZlYzMoIGY5MCApICogeDUgKSAvICggMS4wIC0geDUgKTtcXG59XFxuZmxvYXQgVl9HR1hfU21pdGhDb3JyZWxhdGVkKCBjb25zdCBpbiBmbG9hdCBhbHBoYSwgY29uc3QgaW4gZmxvYXQgZG90TkwsIGNvbnN0IGluIGZsb2F0IGRvdE5WICkge1xcblxcdGZsb2F0IGEyID0gcG93MiggYWxwaGEgKTtcXG5cXHRmbG9hdCBndiA9IGRvdE5MICogc3FydCggYTIgKyAoIDEuMCAtIGEyICkgKiBwb3cyKCBkb3ROViApICk7XFxuXFx0ZmxvYXQgZ2wgPSBkb3ROViAqIHNxcnQoIGEyICsgKCAxLjAgLSBhMiApICogcG93MiggZG90TkwgKSApO1xcblxcdHJldHVybiAwLjUgLyBtYXgoIGd2ICsgZ2wsIEVQU0lMT04gKTtcXG59XFxuZmxvYXQgRF9HR1goIGNvbnN0IGluIGZsb2F0IGFscGhhLCBjb25zdCBpbiBmbG9hdCBkb3ROSCApIHtcXG5cXHRmbG9hdCBhMiA9IHBvdzIoIGFscGhhICk7XFxuXFx0ZmxvYXQgZGVub20gPSBwb3cyKCBkb3ROSCApICogKCBhMiAtIDEuMCApICsgMS4wO1xcblxcdHJldHVybiBSRUNJUFJPQ0FMX1BJICogYTIgLyBwb3cyKCBkZW5vbSApO1xcbn1cXG4jaWZkZWYgVVNFX0FOSVNPVFJPUFlcXG5cXHRmbG9hdCBWX0dHWF9TbWl0aENvcnJlbGF0ZWRfQW5pc290cm9waWMoIGNvbnN0IGluIGZsb2F0IGFscGhhVCwgY29uc3QgaW4gZmxvYXQgYWxwaGFCLCBjb25zdCBpbiBmbG9hdCBkb3RUViwgY29uc3QgaW4gZmxvYXQgZG90QlYsIGNvbnN0IGluIGZsb2F0IGRvdFRMLCBjb25zdCBpbiBmbG9hdCBkb3RCTCwgY29uc3QgaW4gZmxvYXQgZG90TlYsIGNvbnN0IGluIGZsb2F0IGRvdE5MICkge1xcblxcdFxcdGZsb2F0IGd2ID0gZG90TkwgKiBsZW5ndGgoIHZlYzMoIGFscGhhVCAqIGRvdFRWLCBhbHBoYUIgKiBkb3RCViwgZG90TlYgKSApO1xcblxcdFxcdGZsb2F0IGdsID0gZG90TlYgKiBsZW5ndGgoIHZlYzMoIGFscGhhVCAqIGRvdFRMLCBhbHBoYUIgKiBkb3RCTCwgZG90TkwgKSApO1xcblxcdFxcdGZsb2F0IHYgPSAwLjUgLyAoIGd2ICsgZ2wgKTtcXG5cXHRcXHRyZXR1cm4gc2F0dXJhdGUodik7XFxuXFx0fVxcblxcdGZsb2F0IERfR0dYX0FuaXNvdHJvcGljKCBjb25zdCBpbiBmbG9hdCBhbHBoYVQsIGNvbnN0IGluIGZsb2F0IGFscGhhQiwgY29uc3QgaW4gZmxvYXQgZG90TkgsIGNvbnN0IGluIGZsb2F0IGRvdFRILCBjb25zdCBpbiBmbG9hdCBkb3RCSCApIHtcXG5cXHRcXHRmbG9hdCBhMiA9IGFscGhhVCAqIGFscGhhQjtcXG5cXHRcXHRoaWdocCB2ZWMzIHYgPSB2ZWMzKCBhbHBoYUIgKiBkb3RUSCwgYWxwaGFUICogZG90QkgsIGEyICogZG90TkggKTtcXG5cXHRcXHRoaWdocCBmbG9hdCB2MiA9IGRvdCggdiwgdiApO1xcblxcdFxcdGZsb2F0IHcyID0gYTIgLyB2MjtcXG5cXHRcXHRyZXR1cm4gUkVDSVBST0NBTF9QSSAqIGEyICogcG93MiAoIHcyICk7XFxuXFx0fVxcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUXFxuXFx0dmVjMyBCUkRGX0dHWF9DbGVhcmNvYXQoIGNvbnN0IGluIHZlYzMgbGlnaHREaXIsIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwpIHtcXG5cXHRcXHR2ZWMzIGYwID0gbWF0ZXJpYWwuY2xlYXJjb2F0RjA7XFxuXFx0XFx0ZmxvYXQgZjkwID0gbWF0ZXJpYWwuY2xlYXJjb2F0RjkwO1xcblxcdFxcdGZsb2F0IHJvdWdobmVzcyA9IG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcztcXG5cXHRcXHRmbG9hdCBhbHBoYSA9IHBvdzIoIHJvdWdobmVzcyApO1xcblxcdFxcdHZlYzMgaGFsZkRpciA9IG5vcm1hbGl6ZSggbGlnaHREaXIgKyB2aWV3RGlyICk7XFxuXFx0XFx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGxpZ2h0RGlyICkgKTtcXG5cXHRcXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgdmlld0RpciApICk7XFxuXFx0XFx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGhhbGZEaXIgKSApO1xcblxcdFxcdGZsb2F0IGRvdFZIID0gc2F0dXJhdGUoIGRvdCggdmlld0RpciwgaGFsZkRpciApICk7XFxuXFx0XFx0dmVjMyBGID0gRl9TY2hsaWNrKCBmMCwgZjkwLCBkb3RWSCApO1xcblxcdFxcdGZsb2F0IFYgPSBWX0dHWF9TbWl0aENvcnJlbGF0ZWQoIGFscGhhLCBkb3ROTCwgZG90TlYgKTtcXG5cXHRcXHRmbG9hdCBEID0gRF9HR1goIGFscGhhLCBkb3ROSCApO1xcblxcdFxcdHJldHVybiBGICogKCBWICogRCApO1xcblxcdH1cXG4jZW5kaWZcXG52ZWMzIEJSREZfR0dYKCBjb25zdCBpbiB2ZWMzIGxpZ2h0RGlyLCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIHZlYzMgbm9ybWFsLCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsICkge1xcblxcdHZlYzMgZjAgPSBtYXRlcmlhbC5zcGVjdWxhckNvbG9yO1xcblxcdGZsb2F0IGY5MCA9IG1hdGVyaWFsLnNwZWN1bGFyRjkwO1xcblxcdGZsb2F0IHJvdWdobmVzcyA9IG1hdGVyaWFsLnJvdWdobmVzcztcXG5cXHRmbG9hdCBhbHBoYSA9IHBvdzIoIHJvdWdobmVzcyApO1xcblxcdHZlYzMgaGFsZkRpciA9IG5vcm1hbGl6ZSggbGlnaHREaXIgKyB2aWV3RGlyICk7XFxuXFx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGxpZ2h0RGlyICkgKTtcXG5cXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgdmlld0RpciApICk7XFxuXFx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGhhbGZEaXIgKSApO1xcblxcdGZsb2F0IGRvdFZIID0gc2F0dXJhdGUoIGRvdCggdmlld0RpciwgaGFsZkRpciApICk7XFxuXFx0dmVjMyBGID0gRl9TY2hsaWNrKCBmMCwgZjkwLCBkb3RWSCApO1xcblxcdCNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VcXG5cXHRcXHRGID0gbWl4KCBGLCBtYXRlcmlhbC5pcmlkZXNjZW5jZUZyZXNuZWwsIG1hdGVyaWFsLmlyaWRlc2NlbmNlICk7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIFVTRV9BTklTT1RST1BZXFxuXFx0XFx0ZmxvYXQgZG90VEwgPSBkb3QoIG1hdGVyaWFsLmFuaXNvdHJvcHlULCBsaWdodERpciApO1xcblxcdFxcdGZsb2F0IGRvdFRWID0gZG90KCBtYXRlcmlhbC5hbmlzb3Ryb3B5VCwgdmlld0RpciApO1xcblxcdFxcdGZsb2F0IGRvdFRIID0gZG90KCBtYXRlcmlhbC5hbmlzb3Ryb3B5VCwgaGFsZkRpciApO1xcblxcdFxcdGZsb2F0IGRvdEJMID0gZG90KCBtYXRlcmlhbC5hbmlzb3Ryb3B5QiwgbGlnaHREaXIgKTtcXG5cXHRcXHRmbG9hdCBkb3RCViA9IGRvdCggbWF0ZXJpYWwuYW5pc290cm9weUIsIHZpZXdEaXIgKTtcXG5cXHRcXHRmbG9hdCBkb3RCSCA9IGRvdCggbWF0ZXJpYWwuYW5pc290cm9weUIsIGhhbGZEaXIgKTtcXG5cXHRcXHRmbG9hdCBWID0gVl9HR1hfU21pdGhDb3JyZWxhdGVkX0FuaXNvdHJvcGljKCBtYXRlcmlhbC5hbHBoYVQsIGFscGhhLCBkb3RUViwgZG90QlYsIGRvdFRMLCBkb3RCTCwgZG90TlYsIGRvdE5MICk7XFxuXFx0XFx0ZmxvYXQgRCA9IERfR0dYX0FuaXNvdHJvcGljKCBtYXRlcmlhbC5hbHBoYVQsIGFscGhhLCBkb3ROSCwgZG90VEgsIGRvdEJIICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRmbG9hdCBWID0gVl9HR1hfU21pdGhDb3JyZWxhdGVkKCBhbHBoYSwgZG90TkwsIGRvdE5WICk7XFxuXFx0XFx0ZmxvYXQgRCA9IERfR0dYKCBhbHBoYSwgZG90TkggKTtcXG5cXHQjZW5kaWZcXG5cXHRyZXR1cm4gRiAqICggViAqIEQgKTtcXG59XFxudmVjMiBMVENfVXYoIGNvbnN0IGluIHZlYzMgTiwgY29uc3QgaW4gdmVjMyBWLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0Y29uc3QgZmxvYXQgTFVUX1NJWkUgPSA2NC4wO1xcblxcdGNvbnN0IGZsb2F0IExVVF9TQ0FMRSA9ICggTFVUX1NJWkUgLSAxLjAgKSAvIExVVF9TSVpFO1xcblxcdGNvbnN0IGZsb2F0IExVVF9CSUFTID0gMC41IC8gTFVUX1NJWkU7XFxuXFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBOLCBWICkgKTtcXG5cXHR2ZWMyIHV2ID0gdmVjMiggcm91Z2huZXNzLCBzcXJ0KCAxLjAgLSBkb3ROViApICk7XFxuXFx0dXYgPSB1diAqIExVVF9TQ0FMRSArIExVVF9CSUFTO1xcblxcdHJldHVybiB1djtcXG59XFxuZmxvYXQgTFRDX0NsaXBwZWRTcGhlcmVGb3JtRmFjdG9yKCBjb25zdCBpbiB2ZWMzIGYgKSB7XFxuXFx0ZmxvYXQgbCA9IGxlbmd0aCggZiApO1xcblxcdHJldHVybiBtYXgoICggbCAqIGwgKyBmLnogKSAvICggbCArIDEuMCApLCAwLjAgKTtcXG59XFxudmVjMyBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvbnN0IGluIHZlYzMgdjEsIGNvbnN0IGluIHZlYzMgdjIgKSB7XFxuXFx0ZmxvYXQgeCA9IGRvdCggdjEsIHYyICk7XFxuXFx0ZmxvYXQgeSA9IGFicyggeCApO1xcblxcdGZsb2F0IGEgPSAwLjg1NDM5ODUgKyAoIDAuNDk2NTE1NSArIDAuMDE0NTIwNiAqIHkgKSAqIHk7XFxuXFx0ZmxvYXQgYiA9IDMuNDE3NTk0MCArICggNC4xNjE2NzI0ICsgeSApICogeTtcXG5cXHRmbG9hdCB2ID0gYSAvIGI7XFxuXFx0ZmxvYXQgdGhldGFfc2ludGhldGEgPSAoIHggPiAwLjAgKSA/IHYgOiAwLjUgKiBpbnZlcnNlc3FydCggbWF4KCAxLjAgLSB4ICogeCwgMWUtNyApICkgLSB2O1xcblxcdHJldHVybiBjcm9zcyggdjEsIHYyICkgKiB0aGV0YV9zaW50aGV0YTtcXG59XFxudmVjMyBMVENfRXZhbHVhdGUoIGNvbnN0IGluIHZlYzMgTiwgY29uc3QgaW4gdmVjMyBWLCBjb25zdCBpbiB2ZWMzIFAsIGNvbnN0IGluIG1hdDMgbUludiwgY29uc3QgaW4gdmVjMyByZWN0Q29vcmRzWyA0IF0gKSB7XFxuXFx0dmVjMyB2MSA9IHJlY3RDb29yZHNbIDEgXSAtIHJlY3RDb29yZHNbIDAgXTtcXG5cXHR2ZWMzIHYyID0gcmVjdENvb3Jkc1sgMyBdIC0gcmVjdENvb3Jkc1sgMCBdO1xcblxcdHZlYzMgbGlnaHROb3JtYWwgPSBjcm9zcyggdjEsIHYyICk7XFxuXFx0aWYoIGRvdCggbGlnaHROb3JtYWwsIFAgLSByZWN0Q29vcmRzWyAwIF0gKSA8IDAuMCApIHJldHVybiB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWMzIFQxLCBUMjtcXG5cXHRUMSA9IG5vcm1hbGl6ZSggViAtIE4gKiBkb3QoIFYsIE4gKSApO1xcblxcdFQyID0gLSBjcm9zcyggTiwgVDEgKTtcXG5cXHRtYXQzIG1hdCA9IG1JbnYgKiB0cmFuc3Bvc2VNYXQzKCBtYXQzKCBUMSwgVDIsIE4gKSApO1xcblxcdHZlYzMgY29vcmRzWyA0IF07XFxuXFx0Y29vcmRzWyAwIF0gPSBtYXQgKiAoIHJlY3RDb29yZHNbIDAgXSAtIFAgKTtcXG5cXHRjb29yZHNbIDEgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMSBdIC0gUCApO1xcblxcdGNvb3Jkc1sgMiBdID0gbWF0ICogKCByZWN0Q29vcmRzWyAyIF0gLSBQICk7XFxuXFx0Y29vcmRzWyAzIF0gPSBtYXQgKiAoIHJlY3RDb29yZHNbIDMgXSAtIFAgKTtcXG5cXHRjb29yZHNbIDAgXSA9IG5vcm1hbGl6ZSggY29vcmRzWyAwIF0gKTtcXG5cXHRjb29yZHNbIDEgXSA9IG5vcm1hbGl6ZSggY29vcmRzWyAxIF0gKTtcXG5cXHRjb29yZHNbIDIgXSA9IG5vcm1hbGl6ZSggY29vcmRzWyAyIF0gKTtcXG5cXHRjb29yZHNbIDMgXSA9IG5vcm1hbGl6ZSggY29vcmRzWyAzIF0gKTtcXG5cXHR2ZWMzIHZlY3RvckZvcm1GYWN0b3IgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWN0b3JGb3JtRmFjdG9yICs9IExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29vcmRzWyAwIF0sIGNvb3Jkc1sgMSBdICk7XFxuXFx0dmVjdG9yRm9ybUZhY3RvciArPSBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvb3Jkc1sgMSBdLCBjb29yZHNbIDIgXSApO1xcblxcdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDIgXSwgY29vcmRzWyAzIF0gKTtcXG5cXHR2ZWN0b3JGb3JtRmFjdG9yICs9IExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29vcmRzWyAzIF0sIGNvb3Jkc1sgMCBdICk7XFxuXFx0ZmxvYXQgcmVzdWx0ID0gTFRDX0NsaXBwZWRTcGhlcmVGb3JtRmFjdG9yKCB2ZWN0b3JGb3JtRmFjdG9yICk7XFxuXFx0cmV0dXJuIHZlYzMoIHJlc3VsdCApO1xcbn1cXG4jaWYgZGVmaW5lZCggVVNFX1NIRUVOIClcXG5mbG9hdCBEX0NoYXJsaWUoIGZsb2F0IHJvdWdobmVzcywgZmxvYXQgZG90TkggKSB7XFxuXFx0ZmxvYXQgYWxwaGEgPSBwb3cyKCByb3VnaG5lc3MgKTtcXG5cXHRmbG9hdCBpbnZBbHBoYSA9IDEuMCAvIGFscGhhO1xcblxcdGZsb2F0IGNvczJoID0gZG90TkggKiBkb3ROSDtcXG5cXHRmbG9hdCBzaW4yaCA9IG1heCggMS4wIC0gY29zMmgsIDAuMDA3ODEyNSApO1xcblxcdHJldHVybiAoIDIuMCArIGludkFscGhhICkgKiBwb3coIHNpbjJoLCBpbnZBbHBoYSAqIDAuNSApIC8gKCAyLjAgKiBQSSApO1xcbn1cXG5mbG9hdCBWX05ldWJlbHQoIGZsb2F0IGRvdE5WLCBmbG9hdCBkb3ROTCApIHtcXG5cXHRyZXR1cm4gc2F0dXJhdGUoIDEuMCAvICggNC4wICogKCBkb3ROTCArIGRvdE5WIC0gZG90TkwgKiBkb3ROViApICkgKTtcXG59XFxudmVjMyBCUkRGX1NoZWVuKCBjb25zdCBpbiB2ZWMzIGxpZ2h0RGlyLCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIHZlYzMgbm9ybWFsLCB2ZWMzIHNoZWVuQ29sb3IsIGNvbnN0IGluIGZsb2F0IHNoZWVuUm91Z2huZXNzICkge1xcblxcdHZlYzMgaGFsZkRpciA9IG5vcm1hbGl6ZSggbGlnaHREaXIgKyB2aWV3RGlyICk7XFxuXFx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGxpZ2h0RGlyICkgKTtcXG5cXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgdmlld0RpciApICk7XFxuXFx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGhhbGZEaXIgKSApO1xcblxcdGZsb2F0IEQgPSBEX0NoYXJsaWUoIHNoZWVuUm91Z2huZXNzLCBkb3ROSCApO1xcblxcdGZsb2F0IFYgPSBWX05ldWJlbHQoIGRvdE5WLCBkb3ROTCApO1xcblxcdHJldHVybiBzaGVlbkNvbG9yICogKCBEICogViApO1xcbn1cXG4jZW5kaWZcXG5mbG9hdCBJQkxTaGVlbkJSREYoIGNvbnN0IGluIHZlYzMgbm9ybWFsLCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgdmlld0RpciApICk7XFxuXFx0ZmxvYXQgcjIgPSByb3VnaG5lc3MgKiByb3VnaG5lc3M7XFxuXFx0ZmxvYXQgYSA9IHJvdWdobmVzcyA8IDAuMjUgPyAtMzM5LjIgKiByMiArIDE2MS40ICogcm91Z2huZXNzIC0gMjUuOSA6IC04LjQ4ICogcjIgKyAxNC4zICogcm91Z2huZXNzIC0gOS45NTtcXG5cXHRmbG9hdCBiID0gcm91Z2huZXNzIDwgMC4yNSA/IDQ0LjAgKiByMiAtIDIzLjcgKiByb3VnaG5lc3MgKyAzLjI2IDogMS45NyAqIHIyIC0gMy4yNyAqIHJvdWdobmVzcyArIDAuNzI7XFxuXFx0ZmxvYXQgREcgPSBleHAoIGEgKiBkb3ROViArIGIgKSArICggcm91Z2huZXNzIDwgMC4yNSA/IDAuMCA6IDAuMSAqICggcm91Z2huZXNzIC0gMC4yNSApICk7XFxuXFx0cmV0dXJuIHNhdHVyYXRlKCBERyAqIFJFQ0lQUk9DQUxfUEkgKTtcXG59XFxudmVjMiBERkdBcHByb3goIGNvbnN0IGluIHZlYzMgbm9ybWFsLCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgdmlld0RpciApICk7XFxuXFx0Y29uc3QgdmVjNCBjMCA9IHZlYzQoIC0gMSwgLSAwLjAyNzUsIC0gMC41NzIsIDAuMDIyICk7XFxuXFx0Y29uc3QgdmVjNCBjMSA9IHZlYzQoIDEsIDAuMDQyNSwgMS4wNCwgLSAwLjA0ICk7XFxuXFx0dmVjNCByID0gcm91Z2huZXNzICogYzAgKyBjMTtcXG5cXHRmbG9hdCBhMDA0ID0gbWluKCByLnggKiByLngsIGV4cDIoIC0gOS4yOCAqIGRvdE5WICkgKSAqIHIueCArIHIueTtcXG5cXHR2ZWMyIGZhYiA9IHZlYzIoIC0gMS4wNCwgMS4wNCApICogYTAwNCArIHIuenc7XFxuXFx0cmV0dXJuIGZhYjtcXG59XFxudmVjMyBFbnZpcm9ubWVudEJSREYoIGNvbnN0IGluIHZlYzMgbm9ybWFsLCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgc3BlY3VsYXJGOTAsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHR2ZWMyIGZhYiA9IERGR0FwcHJveCggbm9ybWFsLCB2aWV3RGlyLCByb3VnaG5lc3MgKTtcXG5cXHRyZXR1cm4gc3BlY3VsYXJDb2xvciAqIGZhYi54ICsgc3BlY3VsYXJGOTAgKiBmYWIueTtcXG59XFxuI2lmZGVmIFVTRV9JUklERVNDRU5DRVxcbnZvaWQgY29tcHV0ZU11bHRpc2NhdHRlcmluZ0lyaWRlc2NlbmNlKCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHNwZWN1bGFyRjkwLCBjb25zdCBpbiBmbG9hdCBpcmlkZXNjZW5jZSwgY29uc3QgaW4gdmVjMyBpcmlkZXNjZW5jZUYwLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGlub3V0IHZlYzMgc2luZ2xlU2NhdHRlciwgaW5vdXQgdmVjMyBtdWx0aVNjYXR0ZXIgKSB7XFxuI2Vsc2VcXG52b2lkIGNvbXB1dGVNdWx0aXNjYXR0ZXJpbmcoIGNvbnN0IGluIHZlYzMgbm9ybWFsLCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgc3BlY3VsYXJGOTAsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcywgaW5vdXQgdmVjMyBzaW5nbGVTY2F0dGVyLCBpbm91dCB2ZWMzIG11bHRpU2NhdHRlciApIHtcXG4jZW5kaWZcXG5cXHR2ZWMyIGZhYiA9IERGR0FwcHJveCggbm9ybWFsLCB2aWV3RGlyLCByb3VnaG5lc3MgKTtcXG5cXHQjaWZkZWYgVVNFX0lSSURFU0NFTkNFXFxuXFx0XFx0dmVjMyBGciA9IG1peCggc3BlY3VsYXJDb2xvciwgaXJpZGVzY2VuY2VGMCwgaXJpZGVzY2VuY2UgKTtcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzMgRnIgPSBzcGVjdWxhckNvbG9yO1xcblxcdCNlbmRpZlxcblxcdHZlYzMgRnNzRXNzID0gRnIgKiBmYWIueCArIHNwZWN1bGFyRjkwICogZmFiLnk7XFxuXFx0ZmxvYXQgRXNzID0gZmFiLnggKyBmYWIueTtcXG5cXHRmbG9hdCBFbXMgPSAxLjAgLSBFc3M7XFxuXFx0dmVjMyBGYXZnID0gRnIgKyAoIDEuMCAtIEZyICkgKiAwLjA0NzYxOTtcXHR2ZWMzIEZtcyA9IEZzc0VzcyAqIEZhdmcgLyAoIDEuMCAtIEVtcyAqIEZhdmcgKTtcXG5cXHRzaW5nbGVTY2F0dGVyICs9IEZzc0VzcztcXG5cXHRtdWx0aVNjYXR0ZXIgKz0gRm1zICogRW1zO1xcbn1cXG4jaWYgTlVNX1JFQ1RfQVJFQV9MSUdIVFMgPiAwXFxuXFx0dm9pZCBSRV9EaXJlY3RfUmVjdEFyZWFfUGh5c2ljYWwoIGNvbnN0IGluIFJlY3RBcmVhTGlnaHQgcmVjdEFyZWFMaWdodCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVBvc2l0aW9uLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Tm9ybWFsLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Vmlld0RpciwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0XFx0dmVjMyBub3JtYWwgPSBnZW9tZXRyeU5vcm1hbDtcXG5cXHRcXHR2ZWMzIHZpZXdEaXIgPSBnZW9tZXRyeVZpZXdEaXI7XFxuXFx0XFx0dmVjMyBwb3NpdGlvbiA9IGdlb21ldHJ5UG9zaXRpb247XFxuXFx0XFx0dmVjMyBsaWdodFBvcyA9IHJlY3RBcmVhTGlnaHQucG9zaXRpb247XFxuXFx0XFx0dmVjMyBoYWxmV2lkdGggPSByZWN0QXJlYUxpZ2h0LmhhbGZXaWR0aDtcXG5cXHRcXHR2ZWMzIGhhbGZIZWlnaHQgPSByZWN0QXJlYUxpZ2h0LmhhbGZIZWlnaHQ7XFxuXFx0XFx0dmVjMyBsaWdodENvbG9yID0gcmVjdEFyZWFMaWdodC5jb2xvcjtcXG5cXHRcXHRmbG9hdCByb3VnaG5lc3MgPSBtYXRlcmlhbC5yb3VnaG5lc3M7XFxuXFx0XFx0dmVjMyByZWN0Q29vcmRzWyA0IF07XFxuXFx0XFx0cmVjdENvb3Jkc1sgMCBdID0gbGlnaHRQb3MgKyBoYWxmV2lkdGggLSBoYWxmSGVpZ2h0O1xcdFxcdHJlY3RDb29yZHNbIDEgXSA9IGxpZ2h0UG9zIC0gaGFsZldpZHRoIC0gaGFsZkhlaWdodDtcXG5cXHRcXHRyZWN0Q29vcmRzWyAyIF0gPSBsaWdodFBvcyAtIGhhbGZXaWR0aCArIGhhbGZIZWlnaHQ7XFxuXFx0XFx0cmVjdENvb3Jkc1sgMyBdID0gbGlnaHRQb3MgKyBoYWxmV2lkdGggKyBoYWxmSGVpZ2h0O1xcblxcdFxcdHZlYzIgdXYgPSBMVENfVXYoIG5vcm1hbCwgdmlld0Rpciwgcm91Z2huZXNzICk7XFxuXFx0XFx0dmVjNCB0MSA9IHRleHR1cmUyRCggbHRjXzEsIHV2ICk7XFxuXFx0XFx0dmVjNCB0MiA9IHRleHR1cmUyRCggbHRjXzIsIHV2ICk7XFxuXFx0XFx0bWF0MyBtSW52ID0gbWF0MyhcXG5cXHRcXHRcXHR2ZWMzKCB0MS54LCAwLCB0MS55ICksXFxuXFx0XFx0XFx0dmVjMyggICAgMCwgMSwgICAgMCApLFxcblxcdFxcdFxcdHZlYzMoIHQxLnosIDAsIHQxLncgKVxcblxcdFxcdCk7XFxuXFx0XFx0dmVjMyBmcmVzbmVsID0gKCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yICogdDIueCArICggdmVjMyggMS4wICkgLSBtYXRlcmlhbC5zcGVjdWxhckNvbG9yICkgKiB0Mi55ICk7XFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKz0gbGlnaHRDb2xvciAqIGZyZXNuZWwgKiBMVENfRXZhbHVhdGUoIG5vcm1hbCwgdmlld0RpciwgcG9zaXRpb24sIG1JbnYsIHJlY3RDb29yZHMgKTtcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICs9IGxpZ2h0Q29sb3IgKiBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKiBMVENfRXZhbHVhdGUoIG5vcm1hbCwgdmlld0RpciwgcG9zaXRpb24sIG1hdDMoIDEuMCApLCByZWN0Q29vcmRzICk7XFxuXFx0fVxcbiNlbmRpZlxcbnZvaWQgUkVfRGlyZWN0X1BoeXNpY2FsKCBjb25zdCBpbiBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0LCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5UG9zaXRpb24sIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlOb3JtYWwsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlWaWV3RGlyLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRmbG9hdCBkb3ROTCA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Tm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSApO1xcblxcdHZlYzMgaXJyYWRpYW5jZSA9IGRvdE5MICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0I2lmZGVmIFVTRV9DTEVBUkNPQVRcXG5cXHRcXHRmbG9hdCBkb3ROTGNjID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApICk7XFxuXFx0XFx0dmVjMyBjY0lycmFkaWFuY2UgPSBkb3ROTGNjICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0XFx0Y2xlYXJjb2F0U3BlY3VsYXJEaXJlY3QgKz0gY2NJcnJhZGlhbmNlICogQlJERl9HR1hfQ2xlYXJjb2F0KCBkaXJlY3RMaWdodC5kaXJlY3Rpb24sIGdlb21ldHJ5Vmlld0RpciwgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIG1hdGVyaWFsICk7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIFVTRV9TSEVFTlxcblxcdFxcdHNoZWVuU3BlY3VsYXJEaXJlY3QgKz0gaXJyYWRpYW5jZSAqIEJSREZfU2hlZW4oIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiwgZ2VvbWV0cnlWaWV3RGlyLCBnZW9tZXRyeU5vcm1hbCwgbWF0ZXJpYWwuc2hlZW5Db2xvciwgbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3MgKTtcXG5cXHQjZW5kaWZcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPSBpcnJhZGlhbmNlICogQlJERl9HR1goIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiwgZ2VvbWV0cnlWaWV3RGlyLCBnZW9tZXRyeU5vcm1hbCwgbWF0ZXJpYWwgKTtcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcbn1cXG52b2lkIFJFX0luZGlyZWN0RGlmZnVzZV9QaHlzaWNhbCggY29uc3QgaW4gdmVjMyBpcnJhZGlhbmNlLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5UG9zaXRpb24sIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlOb3JtYWwsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlWaWV3RGlyLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XFxufVxcbnZvaWQgUkVfSW5kaXJlY3RTcGVjdWxhcl9QaHlzaWNhbCggY29uc3QgaW4gdmVjMyByYWRpYW5jZSwgY29uc3QgaW4gdmVjMyBpcnJhZGlhbmNlLCBjb25zdCBpbiB2ZWMzIGNsZWFyY29hdFJhZGlhbmNlLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5UG9zaXRpb24sIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlOb3JtYWwsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlWaWV3RGlyLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCkge1xcblxcdCNpZmRlZiBVU0VfQ0xFQVJDT0FUXFxuXFx0XFx0Y2xlYXJjb2F0U3BlY3VsYXJJbmRpcmVjdCArPSBjbGVhcmNvYXRSYWRpYW5jZSAqIEVudmlyb25tZW50QlJERiggZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIGdlb21ldHJ5Vmlld0RpciwgbWF0ZXJpYWwuY2xlYXJjb2F0RjAsIG1hdGVyaWFsLmNsZWFyY29hdEY5MCwgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzICk7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIFVTRV9TSEVFTlxcblxcdFxcdHNoZWVuU3BlY3VsYXJJbmRpcmVjdCArPSBpcnJhZGlhbmNlICogbWF0ZXJpYWwuc2hlZW5Db2xvciAqIElCTFNoZWVuQlJERiggZ2VvbWV0cnlOb3JtYWwsIGdlb21ldHJ5Vmlld0RpciwgbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3MgKTtcXG5cXHQjZW5kaWZcXG5cXHR2ZWMzIHNpbmdsZVNjYXR0ZXJpbmcgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWMzIG11bHRpU2NhdHRlcmluZyA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzMgY29zaW5lV2VpZ2h0ZWRJcnJhZGlhbmNlID0gaXJyYWRpYW5jZSAqIFJFQ0lQUk9DQUxfUEk7XFxuXFx0I2lmZGVmIFVTRV9JUklERVNDRU5DRVxcblxcdFxcdGNvbXB1dGVNdWx0aXNjYXR0ZXJpbmdJcmlkZXNjZW5jZSggZ2VvbWV0cnlOb3JtYWwsIGdlb21ldHJ5Vmlld0RpciwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJGOTAsIG1hdGVyaWFsLmlyaWRlc2NlbmNlLCBtYXRlcmlhbC5pcmlkZXNjZW5jZUZyZXNuZWwsIG1hdGVyaWFsLnJvdWdobmVzcywgc2luZ2xlU2NhdHRlcmluZywgbXVsdGlTY2F0dGVyaW5nICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRjb21wdXRlTXVsdGlzY2F0dGVyaW5nKCBnZW9tZXRyeU5vcm1hbCwgZ2VvbWV0cnlWaWV3RGlyLCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhckY5MCwgbWF0ZXJpYWwucm91Z2huZXNzLCBzaW5nbGVTY2F0dGVyaW5nLCBtdWx0aVNjYXR0ZXJpbmcgKTtcXG5cXHQjZW5kaWZcXG5cXHR2ZWMzIHRvdGFsU2NhdHRlcmluZyA9IHNpbmdsZVNjYXR0ZXJpbmcgKyBtdWx0aVNjYXR0ZXJpbmc7XFxuXFx0dmVjMyBkaWZmdXNlID0gbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICogKCAxLjAgLSBtYXgoIG1heCggdG90YWxTY2F0dGVyaW5nLnIsIHRvdGFsU2NhdHRlcmluZy5nICksIHRvdGFsU2NhdHRlcmluZy5iICkgKTtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICs9IHJhZGlhbmNlICogc2luZ2xlU2NhdHRlcmluZztcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICs9IG11bHRpU2NhdHRlcmluZyAqIGNvc2luZVdlaWdodGVkSXJyYWRpYW5jZTtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gZGlmZnVzZSAqIGNvc2luZVdlaWdodGVkSXJyYWRpYW5jZTtcXG59XFxuI2RlZmluZSBSRV9EaXJlY3RcXHRcXHRcXHRcXHRSRV9EaXJlY3RfUGh5c2ljYWxcXG4jZGVmaW5lIFJFX0RpcmVjdF9SZWN0QXJlYVxcdFxcdFJFX0RpcmVjdF9SZWN0QXJlYV9QaHlzaWNhbFxcbiNkZWZpbmUgUkVfSW5kaXJlY3REaWZmdXNlXFx0XFx0UkVfSW5kaXJlY3REaWZmdXNlX1BoeXNpY2FsXFxuI2RlZmluZSBSRV9JbmRpcmVjdFNwZWN1bGFyXFx0XFx0UkVfSW5kaXJlY3RTcGVjdWxhcl9QaHlzaWNhbFxcbmZsb2F0IGNvbXB1dGVTcGVjdWxhck9jY2x1c2lvbiggY29uc3QgaW4gZmxvYXQgZG90TlYsIGNvbnN0IGluIGZsb2F0IGFtYmllbnRPY2NsdXNpb24sIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRyZXR1cm4gc2F0dXJhdGUoIHBvdyggZG90TlYgKyBhbWJpZW50T2NjbHVzaW9uLCBleHAyKCAtIDE2LjAgKiByb3VnaG5lc3MgLSAxLjAgKSApIC0gMS4wICsgYW1iaWVudE9jY2x1c2lvbiApO1xcbn1cIjtcblxudmFyIGxpZ2h0c19mcmFnbWVudF9iZWdpbiA9IFwiXFxudmVjMyBnZW9tZXRyeVBvc2l0aW9uID0gLSB2Vmlld1Bvc2l0aW9uO1xcbnZlYzMgZ2VvbWV0cnlOb3JtYWwgPSBub3JtYWw7XFxudmVjMyBnZW9tZXRyeVZpZXdEaXIgPSAoIGlzT3J0aG9ncmFwaGljICkgPyB2ZWMzKCAwLCAwLCAxICkgOiBub3JtYWxpemUoIHZWaWV3UG9zaXRpb24gKTtcXG52ZWMzIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsID0gdmVjMyggMC4wICk7XFxuI2lmZGVmIFVTRV9DTEVBUkNPQVRcXG5cXHRnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCA9IGNsZWFyY29hdE5vcm1hbDtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0lSSURFU0NFTkNFXFxuXFx0ZmxvYXQgZG90TlZpID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBnZW9tZXRyeVZpZXdEaXIgKSApO1xcblxcdGlmICggbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3MgPT0gMC4wICkge1xcblxcdFxcdG1hdGVyaWFsLmlyaWRlc2NlbmNlID0gMC4wO1xcblxcdH0gZWxzZSB7XFxuXFx0XFx0bWF0ZXJpYWwuaXJpZGVzY2VuY2UgPSBzYXR1cmF0ZSggbWF0ZXJpYWwuaXJpZGVzY2VuY2UgKTtcXG5cXHR9XFxuXFx0aWYgKCBtYXRlcmlhbC5pcmlkZXNjZW5jZSA+IDAuMCApIHtcXG5cXHRcXHRtYXRlcmlhbC5pcmlkZXNjZW5jZUZyZXNuZWwgPSBldmFsSXJpZGVzY2VuY2UoIDEuMCwgbWF0ZXJpYWwuaXJpZGVzY2VuY2VJT1IsIGRvdE5WaSwgbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3MsIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgKTtcXG5cXHRcXHRtYXRlcmlhbC5pcmlkZXNjZW5jZUYwID0gU2NobGlja190b19GMCggbWF0ZXJpYWwuaXJpZGVzY2VuY2VGcmVzbmVsLCAxLjAsIGRvdE5WaSApO1xcblxcdH1cXG4jZW5kaWZcXG5JbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0O1xcbiNpZiAoIE5VTV9QT0lOVF9MSUdIVFMgPiAwICkgJiYgZGVmaW5lZCggUkVfRGlyZWN0IClcXG5cXHRQb2ludExpZ2h0IHBvaW50TGlnaHQ7XFxuXFx0I2lmIGRlZmluZWQoIFVTRV9TSEFET1dNQVAgKSAmJiBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRQb2ludExpZ2h0U2hhZG93IHBvaW50TGlnaHRTaGFkb3c7XFxuXFx0I2VuZGlmXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9QT0lOVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0cG9pbnRMaWdodCA9IHBvaW50TGlnaHRzWyBpIF07XFxuXFx0XFx0Z2V0UG9pbnRMaWdodEluZm8oIHBvaW50TGlnaHQsIGdlb21ldHJ5UG9zaXRpb24sIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0I2lmIGRlZmluZWQoIFVTRV9TSEFET1dNQVAgKSAmJiAoIFVOUk9MTEVEX0xPT1BfSU5ERVggPCBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyApXFxuXFx0XFx0cG9pbnRMaWdodFNoYWRvdyA9IHBvaW50TGlnaHRTaGFkb3dzWyBpIF07XFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gKCBkaXJlY3RMaWdodC52aXNpYmxlICYmIHJlY2VpdmVTaGFkb3cgKSA/IGdldFBvaW50U2hhZG93KCBwb2ludFNoYWRvd01hcFsgaSBdLCBwb2ludExpZ2h0U2hhZG93LnNoYWRvd01hcFNpemUsIHBvaW50TGlnaHRTaGFkb3cuc2hhZG93SW50ZW5zaXR5LCBwb2ludExpZ2h0U2hhZG93LnNoYWRvd0JpYXMsIHBvaW50TGlnaHRTaGFkb3cuc2hhZG93UmFkaXVzLCB2UG9pbnRTaGFkb3dDb29yZFsgaSBdLCBwb2ludExpZ2h0U2hhZG93LnNoYWRvd0NhbWVyYU5lYXIsIHBvaW50TGlnaHRTaGFkb3cuc2hhZG93Q2FtZXJhRmFyICkgOiAxLjA7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0UkVfRGlyZWN0KCBkaXJlY3RMaWdodCwgZ2VvbWV0cnlQb3NpdGlvbiwgZ2VvbWV0cnlOb3JtYWwsIGdlb21ldHJ5Vmlld0RpciwgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcblxcdH1cXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcbiNlbmRpZlxcbiNpZiAoIE5VTV9TUE9UX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3QgKVxcblxcdFNwb3RMaWdodCBzcG90TGlnaHQ7XFxuXFx0dmVjNCBzcG90Q29sb3I7XFxuXFx0dmVjMyBzcG90TGlnaHRDb29yZDtcXG5cXHRib29sIGluU3BvdExpZ2h0TWFwO1xcblxcdCNpZiBkZWZpbmVkKCBVU0VfU0hBRE9XTUFQICkgJiYgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRTcG90TGlnaHRTaGFkb3cgc3BvdExpZ2h0U2hhZG93O1xcblxcdCNlbmRpZlxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fU1BPVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0c3BvdExpZ2h0ID0gc3BvdExpZ2h0c1sgaSBdO1xcblxcdFxcdGdldFNwb3RMaWdodEluZm8oIHNwb3RMaWdodCwgZ2VvbWV0cnlQb3NpdGlvbiwgZGlyZWN0TGlnaHQgKTtcXG5cXHRcXHQjaWYgKCBVTlJPTExFRF9MT09QX0lOREVYIDwgTlVNX1NQT1RfTElHSFRfU0hBRE9XU19XSVRIX01BUFMgKVxcblxcdFxcdCNkZWZpbmUgU1BPVF9MSUdIVF9NQVBfSU5ERVggVU5ST0xMRURfTE9PUF9JTkRFWFxcblxcdFxcdCNlbGlmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgKVxcblxcdFxcdCNkZWZpbmUgU1BPVF9MSUdIVF9NQVBfSU5ERVggTlVNX1NQT1RfTElHSFRfTUFQU1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0I2RlZmluZSBTUE9UX0xJR0hUX01BUF9JTkRFWCAoIFVOUk9MTEVEX0xPT1BfSU5ERVggLSBOVU1fU1BPVF9MSUdIVF9TSEFET1dTICsgTlVNX1NQT1RfTElHSFRfU0hBRE9XU19XSVRIX01BUFMgKVxcblxcdFxcdCNlbmRpZlxcblxcdFxcdCNpZiAoIFNQT1RfTElHSFRfTUFQX0lOREVYIDwgTlVNX1NQT1RfTElHSFRfTUFQUyApXFxuXFx0XFx0XFx0c3BvdExpZ2h0Q29vcmQgPSB2U3BvdExpZ2h0Q29vcmRbIGkgXS54eXogLyB2U3BvdExpZ2h0Q29vcmRbIGkgXS53O1xcblxcdFxcdFxcdGluU3BvdExpZ2h0TWFwID0gYWxsKCBsZXNzVGhhbiggYWJzKCBzcG90TGlnaHRDb29yZCAqIDIuIC0gMS4gKSwgdmVjMyggMS4wICkgKSApO1xcblxcdFxcdFxcdHNwb3RDb2xvciA9IHRleHR1cmUyRCggc3BvdExpZ2h0TWFwWyBTUE9UX0xJR0hUX01BUF9JTkRFWCBdLCBzcG90TGlnaHRDb29yZC54eSApO1xcblxcdFxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yID0gaW5TcG90TGlnaHRNYXAgPyBkaXJlY3RMaWdodC5jb2xvciAqIHNwb3RDb2xvci5yZ2IgOiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHQjdW5kZWYgU1BPVF9MSUdIVF9NQVBfSU5ERVhcXG5cXHRcXHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgKVxcblxcdFxcdHNwb3RMaWdodFNoYWRvdyA9IHNwb3RMaWdodFNoYWRvd3NbIGkgXTtcXG5cXHRcXHRkaXJlY3RMaWdodC5jb2xvciAqPSAoIGRpcmVjdExpZ2h0LnZpc2libGUgJiYgcmVjZWl2ZVNoYWRvdyApID8gZ2V0U2hhZG93KCBzcG90U2hhZG93TWFwWyBpIF0sIHNwb3RMaWdodFNoYWRvdy5zaGFkb3dNYXBTaXplLCBzcG90TGlnaHRTaGFkb3cuc2hhZG93SW50ZW5zaXR5LCBzcG90TGlnaHRTaGFkb3cuc2hhZG93Qmlhcywgc3BvdExpZ2h0U2hhZG93LnNoYWRvd1JhZGl1cywgdlNwb3RMaWdodENvb3JkWyBpIF0gKSA6IDEuMDtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRSRV9EaXJlY3QoIGRpcmVjdExpZ2h0LCBnZW9tZXRyeVBvc2l0aW9uLCBnZW9tZXRyeU5vcm1hbCwgZ2VvbWV0cnlWaWV3RGlyLCBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuI2VuZGlmXFxuI2lmICggTlVNX0RJUl9MSUdIVFMgPiAwICkgJiYgZGVmaW5lZCggUkVfRGlyZWN0IClcXG5cXHREaXJlY3Rpb25hbExpZ2h0IGRpcmVjdGlvbmFsTGlnaHQ7XFxuXFx0I2lmIGRlZmluZWQoIFVTRV9TSEFET1dNQVAgKSAmJiBOVU1fRElSX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0RGlyZWN0aW9uYWxMaWdodFNoYWRvdyBkaXJlY3Rpb25hbExpZ2h0U2hhZG93O1xcblxcdCNlbmRpZlxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRkaXJlY3Rpb25hbExpZ2h0ID0gZGlyZWN0aW9uYWxMaWdodHNbIGkgXTtcXG5cXHRcXHRnZXREaXJlY3Rpb25hbExpZ2h0SW5mbyggZGlyZWN0aW9uYWxMaWdodCwgZGlyZWN0TGlnaHQgKTtcXG5cXHRcXHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9ESVJfTElHSFRfU0hBRE9XUyApXFxuXFx0XFx0ZGlyZWN0aW9uYWxMaWdodFNoYWRvdyA9IGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzWyBpIF07XFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gKCBkaXJlY3RMaWdodC52aXNpYmxlICYmIHJlY2VpdmVTaGFkb3cgKSA/IGdldFNoYWRvdyggZGlyZWN0aW9uYWxTaGFkb3dNYXBbIGkgXSwgZGlyZWN0aW9uYWxMaWdodFNoYWRvdy5zaGFkb3dNYXBTaXplLCBkaXJlY3Rpb25hbExpZ2h0U2hhZG93LnNoYWRvd0ludGVuc2l0eSwgZGlyZWN0aW9uYWxMaWdodFNoYWRvdy5zaGFkb3dCaWFzLCBkaXJlY3Rpb25hbExpZ2h0U2hhZG93LnNoYWRvd1JhZGl1cywgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdFJFX0RpcmVjdCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5UG9zaXRpb24sIGdlb21ldHJ5Tm9ybWFsLCBnZW9tZXRyeVZpZXdEaXIsIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG4jZW5kaWZcXG4jaWYgKCBOVU1fUkVDVF9BUkVBX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3RfUmVjdEFyZWEgKVxcblxcdFJlY3RBcmVhTGlnaHQgcmVjdEFyZWFMaWdodDtcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1JFQ1RfQVJFQV9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0cmVjdEFyZWFMaWdodCA9IHJlY3RBcmVhTGlnaHRzWyBpIF07XFxuXFx0XFx0UkVfRGlyZWN0X1JlY3RBcmVhKCByZWN0QXJlYUxpZ2h0LCBnZW9tZXRyeVBvc2l0aW9uLCBnZW9tZXRyeU5vcm1hbCwgZ2VvbWV0cnlWaWV3RGlyLCBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuI2VuZGlmXFxuI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0RGlmZnVzZSApXFxuXFx0dmVjMyBpYmxJcnJhZGlhbmNlID0gdmVjMyggMC4wICk7XFxuXFx0dmVjMyBpcnJhZGlhbmNlID0gZ2V0QW1iaWVudExpZ2h0SXJyYWRpYW5jZSggYW1iaWVudExpZ2h0Q29sb3IgKTtcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0xJR0hUX1BST0JFUyApXFxuXFx0XFx0aXJyYWRpYW5jZSArPSBnZXRMaWdodFByb2JlSXJyYWRpYW5jZSggbGlnaHRQcm9iZSwgZ2VvbWV0cnlOb3JtYWwgKTtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgKCBOVU1fSEVNSV9MSUdIVFMgPiAwIClcXG5cXHRcXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0XFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0hFTUlfTElHSFRTOyBpICsrICkge1xcblxcdFxcdFxcdGlycmFkaWFuY2UgKz0gZ2V0SGVtaXNwaGVyZUxpZ2h0SXJyYWRpYW5jZSggaGVtaXNwaGVyZUxpZ2h0c1sgaSBdLCBnZW9tZXRyeU5vcm1hbCApO1xcblxcdFxcdH1cXG5cXHRcXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcblxcdCNlbmRpZlxcbiNlbmRpZlxcbiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdFNwZWN1bGFyIClcXG5cXHR2ZWMzIHJhZGlhbmNlID0gdmVjMyggMC4wICk7XFxuXFx0dmVjMyBjbGVhcmNvYXRSYWRpYW5jZSA9IHZlYzMoIDAuMCApO1xcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRzX2ZyYWdtZW50X21hcHMgPSBcIiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdERpZmZ1c2UgKVxcblxcdCNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHRcXHR2ZWM0IGxpZ2h0TWFwVGV4ZWwgPSB0ZXh0dXJlMkQoIGxpZ2h0TWFwLCB2TGlnaHRNYXBVdiApO1xcblxcdFxcdHZlYzMgbGlnaHRNYXBJcnJhZGlhbmNlID0gbGlnaHRNYXBUZXhlbC5yZ2IgKiBsaWdodE1hcEludGVuc2l0eTtcXG5cXHRcXHRpcnJhZGlhbmNlICs9IGxpZ2h0TWFwSXJyYWRpYW5jZTtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmIGRlZmluZWQoIFNUQU5EQVJEICkgJiYgZGVmaW5lZCggRU5WTUFQX1RZUEVfQ1VCRV9VViApXFxuXFx0XFx0aWJsSXJyYWRpYW5jZSArPSBnZXRJQkxJcnJhZGlhbmNlKCBnZW9tZXRyeU5vcm1hbCApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcbiNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgJiYgZGVmaW5lZCggUkVfSW5kaXJlY3RTcGVjdWxhciApXFxuXFx0I2lmZGVmIFVTRV9BTklTT1RST1BZXFxuXFx0XFx0cmFkaWFuY2UgKz0gZ2V0SUJMQW5pc290cm9weVJhZGlhbmNlKCBnZW9tZXRyeVZpZXdEaXIsIGdlb21ldHJ5Tm9ybWFsLCBtYXRlcmlhbC5yb3VnaG5lc3MsIG1hdGVyaWFsLmFuaXNvdHJvcHlCLCBtYXRlcmlhbC5hbmlzb3Ryb3B5ICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRyYWRpYW5jZSArPSBnZXRJQkxSYWRpYW5jZSggZ2VvbWV0cnlWaWV3RGlyLCBnZW9tZXRyeU5vcm1hbCwgbWF0ZXJpYWwucm91Z2huZXNzICk7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIFVTRV9DTEVBUkNPQVRcXG5cXHRcXHRjbGVhcmNvYXRSYWRpYW5jZSArPSBnZXRJQkxSYWRpYW5jZSggZ2VvbWV0cnlWaWV3RGlyLCBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzICk7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBsaWdodHNfZnJhZ21lbnRfZW5kID0gXCIjaWYgZGVmaW5lZCggUkVfSW5kaXJlY3REaWZmdXNlIClcXG5cXHRSRV9JbmRpcmVjdERpZmZ1c2UoIGlycmFkaWFuY2UsIGdlb21ldHJ5UG9zaXRpb24sIGdlb21ldHJ5Tm9ybWFsLCBnZW9tZXRyeVZpZXdEaXIsIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG4jZW5kaWZcXG4jaWYgZGVmaW5lZCggUkVfSW5kaXJlY3RTcGVjdWxhciApXFxuXFx0UkVfSW5kaXJlY3RTcGVjdWxhciggcmFkaWFuY2UsIGlibElycmFkaWFuY2UsIGNsZWFyY29hdFJhZGlhbmNlLCBnZW9tZXRyeVBvc2l0aW9uLCBnZW9tZXRyeU5vcm1hbCwgZ2VvbWV0cnlWaWV3RGlyLCBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XFxuI2VuZGlmXCI7XG5cbnZhciBsb2dkZXB0aGJ1Zl9mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9MT0dBUklUSE1JQ19ERVBUSF9CVUZGRVIgKVxcblxcdGdsX0ZyYWdEZXB0aCA9IHZJc1BlcnNwZWN0aXZlID09IDAuMCA/IGdsX0ZyYWdDb29yZC56IDogbG9nMiggdkZyYWdEZXB0aCApICogbG9nRGVwdGhCdWZGQyAqIDAuNTtcXG4jZW5kaWZcIjtcblxudmFyIGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfTE9HQVJJVEhNSUNfREVQVEhfQlVGRkVSIClcXG5cXHR1bmlmb3JtIGZsb2F0IGxvZ0RlcHRoQnVmRkM7XFxuXFx0dmFyeWluZyBmbG9hdCB2RnJhZ0RlcHRoO1xcblxcdHZhcnlpbmcgZmxvYXQgdklzUGVyc3BlY3RpdmU7XFxuI2VuZGlmXCI7XG5cbnZhciBsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9MT0dBUklUSE1JQ19ERVBUSF9CVUZGRVJcXG5cXHR2YXJ5aW5nIGZsb2F0IHZGcmFnRGVwdGg7XFxuXFx0dmFyeWluZyBmbG9hdCB2SXNQZXJzcGVjdGl2ZTtcXG4jZW5kaWZcIjtcblxudmFyIGxvZ2RlcHRoYnVmX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9MT0dBUklUSE1JQ19ERVBUSF9CVUZGRVJcXG5cXHR2RnJhZ0RlcHRoID0gMS4wICsgZ2xfUG9zaXRpb24udztcXG5cXHR2SXNQZXJzcGVjdGl2ZSA9IGZsb2F0KCBpc1BlcnNwZWN0aXZlTWF0cml4KCBwcm9qZWN0aW9uTWF0cml4ICkgKTtcXG4jZW5kaWZcIjtcblxudmFyIG1hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9NQVBcXG5cXHR2ZWM0IHNhbXBsZWREaWZmdXNlQ29sb3IgPSB0ZXh0dXJlMkQoIG1hcCwgdk1hcFV2ICk7XFxuXFx0I2lmZGVmIERFQ09ERV9WSURFT19URVhUVVJFXFxuXFx0XFx0c2FtcGxlZERpZmZ1c2VDb2xvciA9IHNSR0JUcmFuc2ZlckVPVEYoIHNhbXBsZWREaWZmdXNlQ29sb3IgKTtcXG5cXHQjZW5kaWZcXG5cXHRkaWZmdXNlQ29sb3IgKj0gc2FtcGxlZERpZmZ1c2VDb2xvcjtcXG4jZW5kaWZcIjtcblxudmFyIG1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIG1hcDtcXG4jZW5kaWZcIjtcblxudmFyIG1hcF9wYXJ0aWNsZV9mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9NQVAgKSB8fCBkZWZpbmVkKCBVU0VfQUxQSEFNQVAgKVxcblxcdCNpZiBkZWZpbmVkKCBVU0VfUE9JTlRTX1VWIClcXG5cXHRcXHR2ZWMyIHV2ID0gdlV2O1xcblxcdCNlbHNlXFxuXFx0XFx0dmVjMiB1diA9ICggdXZUcmFuc2Zvcm0gKiB2ZWMzKCBnbF9Qb2ludENvb3JkLngsIDEuMCAtIGdsX1BvaW50Q29vcmQueSwgMSApICkueHk7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9NQVBcXG5cXHRkaWZmdXNlQ29sb3IgKj0gdGV4dHVyZTJEKCBtYXAsIHV2ICk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9BTFBIQU1BUFxcblxcdGRpZmZ1c2VDb2xvci5hICo9IHRleHR1cmUyRCggYWxwaGFNYXAsIHV2ICkuZztcXG4jZW5kaWZcIjtcblxudmFyIG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggVVNFX1BPSU5UU19VViApXFxuXFx0dmFyeWluZyB2ZWMyIHZVdjtcXG4jZWxzZVxcblxcdCNpZiBkZWZpbmVkKCBVU0VfTUFQICkgfHwgZGVmaW5lZCggVVNFX0FMUEhBTUFQIClcXG5cXHRcXHR1bmlmb3JtIG1hdDMgdXZUcmFuc2Zvcm07XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9NQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBtYXA7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9BTFBIQU1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGFscGhhTWFwO1xcbiNlbmRpZlwiO1xuXG52YXIgbWV0YWxuZXNzbWFwX2ZyYWdtZW50ID0gXCJmbG9hdCBtZXRhbG5lc3NGYWN0b3IgPSBtZXRhbG5lc3M7XFxuI2lmZGVmIFVTRV9NRVRBTE5FU1NNQVBcXG5cXHR2ZWM0IHRleGVsTWV0YWxuZXNzID0gdGV4dHVyZTJEKCBtZXRhbG5lc3NNYXAsIHZNZXRhbG5lc3NNYXBVdiApO1xcblxcdG1ldGFsbmVzc0ZhY3RvciAqPSB0ZXhlbE1ldGFsbmVzcy5iO1xcbiNlbmRpZlwiO1xuXG52YXIgbWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTUVUQUxORVNTTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbWV0YWxuZXNzTWFwO1xcbiNlbmRpZlwiO1xuXG52YXIgbW9ycGhpbnN0YW5jZV92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfSU5TVEFOQ0lOR19NT1JQSFxcblxcdGZsb2F0IG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgTU9SUEhUQVJHRVRTX0NPVU5UIF07XFxuXFx0ZmxvYXQgbW9ycGhUYXJnZXRCYXNlSW5mbHVlbmNlID0gdGV4ZWxGZXRjaCggbW9ycGhUZXh0dXJlLCBpdmVjMiggMCwgZ2xfSW5zdGFuY2VJRCApLCAwICkucjtcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBNT1JQSFRBUkdFVFNfQ09VTlQ7IGkgKysgKSB7XFxuXFx0XFx0bW9ycGhUYXJnZXRJbmZsdWVuY2VzW2ldID0gIHRleGVsRmV0Y2goIG1vcnBoVGV4dHVyZSwgaXZlYzIoIGkgKyAxLCBnbF9JbnN0YW5jZUlEICksIDAgKS5yO1xcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIG1vcnBoY29sb3JfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX01PUlBIQ09MT1JTIClcXG5cXHR2Q29sb3IgKj0gbW9ycGhUYXJnZXRCYXNlSW5mbHVlbmNlO1xcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE1PUlBIVEFSR0VUU19DT1VOVDsgaSArKyApIHtcXG5cXHRcXHQjaWYgZGVmaW5lZCggVVNFX0NPTE9SX0FMUEhBIClcXG5cXHRcXHRcXHRpZiAoIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdICE9IDAuMCApIHZDb2xvciArPSBnZXRNb3JwaCggZ2xfVmVydGV4SUQsIGksIDIgKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIFVTRV9DT0xPUiApXFxuXFx0XFx0XFx0aWYgKCBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXSAhPSAwLjAgKSB2Q29sb3IgKz0gZ2V0TW9ycGgoIGdsX1ZlcnRleElELCBpLCAyICkucmdiICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBpIF07XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcbiNlbmRpZlwiO1xuXG52YXIgbW9ycGhub3JtYWxfdmVydGV4ID0gXCIjaWZkZWYgVVNFX01PUlBITk9STUFMU1xcblxcdG9iamVjdE5vcm1hbCAqPSBtb3JwaFRhcmdldEJhc2VJbmZsdWVuY2U7XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTU9SUEhUQVJHRVRTX0NPVU5UOyBpICsrICkge1xcblxcdFxcdGlmICggbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBpIF0gIT0gMC4wICkgb2JqZWN0Tm9ybWFsICs9IGdldE1vcnBoKCBnbF9WZXJ0ZXhJRCwgaSwgMSApLnh5eiAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdO1xcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX01PUlBIVEFSR0VUU1xcblxcdCNpZm5kZWYgVVNFX0lOU1RBTkNJTkdfTU9SUEhcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IG1vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZTtcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgTU9SUEhUQVJHRVRTX0NPVU5UIF07XFxuXFx0I2VuZGlmXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkRBcnJheSBtb3JwaFRhcmdldHNUZXh0dXJlO1xcblxcdHVuaWZvcm0gaXZlYzIgbW9ycGhUYXJnZXRzVGV4dHVyZVNpemU7XFxuXFx0dmVjNCBnZXRNb3JwaCggY29uc3QgaW4gaW50IHZlcnRleEluZGV4LCBjb25zdCBpbiBpbnQgbW9ycGhUYXJnZXRJbmRleCwgY29uc3QgaW4gaW50IG9mZnNldCApIHtcXG5cXHRcXHRpbnQgdGV4ZWxJbmRleCA9IHZlcnRleEluZGV4ICogTU9SUEhUQVJHRVRTX1RFWFRVUkVfU1RSSURFICsgb2Zmc2V0O1xcblxcdFxcdGludCB5ID0gdGV4ZWxJbmRleCAvIG1vcnBoVGFyZ2V0c1RleHR1cmVTaXplLng7XFxuXFx0XFx0aW50IHggPSB0ZXhlbEluZGV4IC0geSAqIG1vcnBoVGFyZ2V0c1RleHR1cmVTaXplLng7XFxuXFx0XFx0aXZlYzMgbW9ycGhVViA9IGl2ZWMzKCB4LCB5LCBtb3JwaFRhcmdldEluZGV4ICk7XFxuXFx0XFx0cmV0dXJuIHRleGVsRmV0Y2goIG1vcnBoVGFyZ2V0c1RleHR1cmUsIG1vcnBoVVYsIDAgKTtcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBtb3JwaHRhcmdldF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTXFxuXFx0dHJhbnNmb3JtZWQgKj0gbW9ycGhUYXJnZXRCYXNlSW5mbHVlbmNlO1xcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE1PUlBIVEFSR0VUU19DT1VOVDsgaSArKyApIHtcXG5cXHRcXHRpZiAoIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdICE9IDAuMCApIHRyYW5zZm9ybWVkICs9IGdldE1vcnBoKCBnbF9WZXJ0ZXhJRCwgaSwgMCApLnh5eiAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdO1xcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIG5vcm1hbF9mcmFnbWVudF9iZWdpbiA9IFwiZmxvYXQgZmFjZURpcmVjdGlvbiA9IGdsX0Zyb250RmFjaW5nID8gMS4wIDogLSAxLjA7XFxuI2lmZGVmIEZMQVRfU0hBREVEXFxuXFx0dmVjMyBmZHggPSBkRmR4KCB2Vmlld1Bvc2l0aW9uICk7XFxuXFx0dmVjMyBmZHkgPSBkRmR5KCB2Vmlld1Bvc2l0aW9uICk7XFxuXFx0dmVjMyBub3JtYWwgPSBub3JtYWxpemUoIGNyb3NzKCBmZHgsIGZkeSApICk7XFxuI2Vsc2VcXG5cXHR2ZWMzIG5vcm1hbCA9IG5vcm1hbGl6ZSggdk5vcm1hbCApO1xcblxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRub3JtYWwgKj0gZmFjZURpcmVjdGlvbjtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaWYgZGVmaW5lZCggVVNFX05PUk1BTE1BUF9UQU5HRU5UU1BBQ0UgKSB8fCBkZWZpbmVkKCBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFVTRV9BTklTT1RST1BZIClcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHRtYXQzIHRibiA9IG1hdDMoIG5vcm1hbGl6ZSggdlRhbmdlbnQgKSwgbm9ybWFsaXplKCB2Qml0YW5nZW50ICksIG5vcm1hbCApO1xcblxcdCNlbHNlXFxuXFx0XFx0bWF0MyB0Ym4gPSBnZXRUYW5nZW50RnJhbWUoIC0gdlZpZXdQb3NpdGlvbiwgbm9ybWFsLFxcblxcdFxcdCNpZiBkZWZpbmVkKCBVU0VfTk9STUFMTUFQIClcXG5cXHRcXHRcXHR2Tm9ybWFsTWFwVXZcXG5cXHRcXHQjZWxpZiBkZWZpbmVkKCBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUCApXFxuXFx0XFx0XFx0dkNsZWFyY29hdE5vcm1hbE1hcFV2XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHR2VXZcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHQpO1xcblxcdCNlbmRpZlxcblxcdCNpZiBkZWZpbmVkKCBET1VCTEVfU0lERUQgKSAmJiAhIGRlZmluZWQoIEZMQVRfU0hBREVEIClcXG5cXHRcXHR0Ym5bMF0gKj0gZmFjZURpcmVjdGlvbjtcXG5cXHRcXHR0Ym5bMV0gKj0gZmFjZURpcmVjdGlvbjtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVBcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHRtYXQzIHRibjIgPSBtYXQzKCBub3JtYWxpemUoIHZUYW5nZW50ICksIG5vcm1hbGl6ZSggdkJpdGFuZ2VudCApLCBub3JtYWwgKTtcXG5cXHQjZWxzZVxcblxcdFxcdG1hdDMgdGJuMiA9IGdldFRhbmdlbnRGcmFtZSggLSB2Vmlld1Bvc2l0aW9uLCBub3JtYWwsIHZDbGVhcmNvYXROb3JtYWxNYXBVdiApO1xcblxcdCNlbmRpZlxcblxcdCNpZiBkZWZpbmVkKCBET1VCTEVfU0lERUQgKSAmJiAhIGRlZmluZWQoIEZMQVRfU0hBREVEIClcXG5cXHRcXHR0Ym4yWzBdICo9IGZhY2VEaXJlY3Rpb247XFxuXFx0XFx0dGJuMlsxXSAqPSBmYWNlRGlyZWN0aW9uO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcbnZlYzMgbm9uUGVydHVyYmVkTm9ybWFsID0gbm9ybWFsO1wiO1xuXG52YXIgbm9ybWFsX2ZyYWdtZW50X21hcHMgPSBcIiNpZmRlZiBVU0VfTk9STUFMTUFQX09CSkVDVFNQQUNFXFxuXFx0bm9ybWFsID0gdGV4dHVyZTJEKCBub3JtYWxNYXAsIHZOb3JtYWxNYXBVdiApLnh5eiAqIDIuMCAtIDEuMDtcXG5cXHQjaWZkZWYgRkxJUF9TSURFRFxcblxcdFxcdG5vcm1hbCA9IC0gbm9ybWFsO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRub3JtYWwgPSBub3JtYWwgKiBmYWNlRGlyZWN0aW9uO1xcblxcdCNlbmRpZlxcblxcdG5vcm1hbCA9IG5vcm1hbGl6ZSggbm9ybWFsTWF0cml4ICogbm9ybWFsICk7XFxuI2VsaWYgZGVmaW5lZCggVVNFX05PUk1BTE1BUF9UQU5HRU5UU1BBQ0UgKVxcblxcdHZlYzMgbWFwTiA9IHRleHR1cmUyRCggbm9ybWFsTWFwLCB2Tm9ybWFsTWFwVXYgKS54eXogKiAyLjAgLSAxLjA7XFxuXFx0bWFwTi54eSAqPSBub3JtYWxTY2FsZTtcXG5cXHRub3JtYWwgPSBub3JtYWxpemUoIHRibiAqIG1hcE4gKTtcXG4jZWxpZiBkZWZpbmVkKCBVU0VfQlVNUE1BUCApXFxuXFx0bm9ybWFsID0gcGVydHVyYk5vcm1hbEFyYiggLSB2Vmlld1Bvc2l0aW9uLCBub3JtYWwsIGRIZHh5X2Z3ZCgpLCBmYWNlRGlyZWN0aW9uICk7XFxuI2VuZGlmXCI7XG5cbnZhciBub3JtYWxfcGFyc19mcmFnbWVudCA9IFwiI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcblxcdCNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdFxcdHZhcnlpbmcgdmVjMyB2VGFuZ2VudDtcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdkJpdGFuZ2VudDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIG5vcm1hbF9wYXJzX3ZlcnRleCA9IFwiI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcblxcdCNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdFxcdHZhcnlpbmcgdmVjMyB2VGFuZ2VudDtcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdkJpdGFuZ2VudDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIG5vcm1hbF92ZXJ0ZXggPSBcIiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2Tm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xcblxcdCNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdFxcdHZUYW5nZW50ID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZFRhbmdlbnQgKTtcXG5cXHRcXHR2Qml0YW5nZW50ID0gbm9ybWFsaXplKCBjcm9zcyggdk5vcm1hbCwgdlRhbmdlbnQgKSAqIHRhbmdlbnQudyApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgbm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTk9STUFMTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbm9ybWFsTWFwO1xcblxcdHVuaWZvcm0gdmVjMiBub3JtYWxTY2FsZTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX05PUk1BTE1BUF9PQkpFQ1RTUEFDRVxcblxcdHVuaWZvcm0gbWF0MyBub3JtYWxNYXRyaXg7XFxuI2VuZGlmXFxuI2lmICEgZGVmaW5lZCAoIFVTRV9UQU5HRU5UICkgJiYgKCBkZWZpbmVkICggVVNFX05PUk1BTE1BUF9UQU5HRU5UU1BBQ0UgKSB8fCBkZWZpbmVkICggVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQU5JU09UUk9QWSApIClcXG5cXHRtYXQzIGdldFRhbmdlbnRGcmFtZSggdmVjMyBleWVfcG9zLCB2ZWMzIHN1cmZfbm9ybSwgdmVjMiB1diApIHtcXG5cXHRcXHR2ZWMzIHEwID0gZEZkeCggZXllX3Bvcy54eXogKTtcXG5cXHRcXHR2ZWMzIHExID0gZEZkeSggZXllX3Bvcy54eXogKTtcXG5cXHRcXHR2ZWMyIHN0MCA9IGRGZHgoIHV2LnN0ICk7XFxuXFx0XFx0dmVjMiBzdDEgPSBkRmR5KCB1di5zdCApO1xcblxcdFxcdHZlYzMgTiA9IHN1cmZfbm9ybTtcXG5cXHRcXHR2ZWMzIHExcGVycCA9IGNyb3NzKCBxMSwgTiApO1xcblxcdFxcdHZlYzMgcTBwZXJwID0gY3Jvc3MoIE4sIHEwICk7XFxuXFx0XFx0dmVjMyBUID0gcTFwZXJwICogc3QwLnggKyBxMHBlcnAgKiBzdDEueDtcXG5cXHRcXHR2ZWMzIEIgPSBxMXBlcnAgKiBzdDAueSArIHEwcGVycCAqIHN0MS55O1xcblxcdFxcdGZsb2F0IGRldCA9IG1heCggZG90KCBULCBUICksIGRvdCggQiwgQiApICk7XFxuXFx0XFx0ZmxvYXQgc2NhbGUgPSAoIGRldCA9PSAwLjAgKSA/IDAuMCA6IGludmVyc2VzcXJ0KCBkZXQgKTtcXG5cXHRcXHRyZXR1cm4gbWF0MyggVCAqIHNjYWxlLCBCICogc2NhbGUsIE4gKTtcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X2JlZ2luID0gXCIjaWZkZWYgVVNFX0NMRUFSQ09BVFxcblxcdHZlYzMgY2xlYXJjb2F0Tm9ybWFsID0gbm9uUGVydHVyYmVkTm9ybWFsO1xcbiNlbmRpZlwiO1xuXG52YXIgY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9tYXBzID0gXCIjaWZkZWYgVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVBcXG5cXHR2ZWMzIGNsZWFyY29hdE1hcE4gPSB0ZXh0dXJlMkQoIGNsZWFyY29hdE5vcm1hbE1hcCwgdkNsZWFyY29hdE5vcm1hbE1hcFV2ICkueHl6ICogMi4wIC0gMS4wO1xcblxcdGNsZWFyY29hdE1hcE4ueHkgKj0gY2xlYXJjb2F0Tm9ybWFsU2NhbGU7XFxuXFx0Y2xlYXJjb2F0Tm9ybWFsID0gbm9ybWFsaXplKCB0Ym4yICogY2xlYXJjb2F0TWFwTiApO1xcbiNlbmRpZlwiO1xuXG52YXIgY2xlYXJjb2F0X3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQ0xFQVJDT0FUTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgY2xlYXJjb2F0TWFwO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGNsZWFyY29hdE5vcm1hbE1hcDtcXG5cXHR1bmlmb3JtIHZlYzIgY2xlYXJjb2F0Tm9ybWFsU2NhbGU7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9DTEVBUkNPQVRfUk9VR0hORVNTTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgY2xlYXJjb2F0Um91Z2huZXNzTWFwO1xcbiNlbmRpZlwiO1xuXG52YXIgaXJpZGVzY2VuY2VfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9JUklERVNDRU5DRU1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGlyaWRlc2NlbmNlTWFwO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VfVEhJQ0tORVNTTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgaXJpZGVzY2VuY2VUaGlja25lc3NNYXA7XFxuI2VuZGlmXCI7XG5cbnZhciBvcGFxdWVfZnJhZ21lbnQgPSBcIiNpZmRlZiBPUEFRVUVcXG5kaWZmdXNlQ29sb3IuYSA9IDEuMDtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1RSQU5TTUlTU0lPTlxcbmRpZmZ1c2VDb2xvci5hICo9IG1hdGVyaWFsLnRyYW5zbWlzc2lvbkFscGhhO1xcbiNlbmRpZlxcbmdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XCI7XG5cbnZhciBwYWNraW5nID0gXCJ2ZWMzIHBhY2tOb3JtYWxUb1JHQiggY29uc3QgaW4gdmVjMyBub3JtYWwgKSB7XFxuXFx0cmV0dXJuIG5vcm1hbGl6ZSggbm9ybWFsICkgKiAwLjUgKyAwLjU7XFxufVxcbnZlYzMgdW5wYWNrUkdCVG9Ob3JtYWwoIGNvbnN0IGluIHZlYzMgcmdiICkge1xcblxcdHJldHVybiAyLjAgKiByZ2IueHl6IC0gMS4wO1xcbn1cXG5jb25zdCBmbG9hdCBQYWNrVXBzY2FsZSA9IDI1Ni4gLyAyNTUuO2NvbnN0IGZsb2F0IFVucGFja0Rvd25zY2FsZSA9IDI1NS4gLyAyNTYuO2NvbnN0IGZsb2F0IFNoaWZ0UmlnaHQ4ID0gMS4gLyAyNTYuO1xcbmNvbnN0IGZsb2F0IEludjI1NSA9IDEuIC8gMjU1LjtcXG5jb25zdCB2ZWM0IFBhY2tGYWN0b3JzID0gdmVjNCggMS4wLCAyNTYuMCwgMjU2LjAgKiAyNTYuMCwgMjU2LjAgKiAyNTYuMCAqIDI1Ni4wICk7XFxuY29uc3QgdmVjMiBVbnBhY2tGYWN0b3JzMiA9IHZlYzIoIFVucGFja0Rvd25zY2FsZSwgMS4wIC8gUGFja0ZhY3RvcnMuZyApO1xcbmNvbnN0IHZlYzMgVW5wYWNrRmFjdG9yczMgPSB2ZWMzKCBVbnBhY2tEb3duc2NhbGUgLyBQYWNrRmFjdG9ycy5yZywgMS4wIC8gUGFja0ZhY3RvcnMuYiApO1xcbmNvbnN0IHZlYzQgVW5wYWNrRmFjdG9yczQgPSB2ZWM0KCBVbnBhY2tEb3duc2NhbGUgLyBQYWNrRmFjdG9ycy5yZ2IsIDEuMCAvIFBhY2tGYWN0b3JzLmEgKTtcXG52ZWM0IHBhY2tEZXB0aFRvUkdCQSggY29uc3QgaW4gZmxvYXQgdiApIHtcXG5cXHRpZiggdiA8PSAwLjAgKVxcblxcdFxcdHJldHVybiB2ZWM0KCAwLiwgMC4sIDAuLCAwLiApO1xcblxcdGlmKCB2ID49IDEuMCApXFxuXFx0XFx0cmV0dXJuIHZlYzQoIDEuLCAxLiwgMS4sIDEuICk7XFxuXFx0ZmxvYXQgdnVmO1xcblxcdGZsb2F0IGFmID0gbW9kZiggdiAqIFBhY2tGYWN0b3JzLmEsIHZ1ZiApO1xcblxcdGZsb2F0IGJmID0gbW9kZiggdnVmICogU2hpZnRSaWdodDgsIHZ1ZiApO1xcblxcdGZsb2F0IGdmID0gbW9kZiggdnVmICogU2hpZnRSaWdodDgsIHZ1ZiApO1xcblxcdHJldHVybiB2ZWM0KCB2dWYgKiBJbnYyNTUsIGdmICogUGFja1Vwc2NhbGUsIGJmICogUGFja1Vwc2NhbGUsIGFmICk7XFxufVxcbnZlYzMgcGFja0RlcHRoVG9SR0IoIGNvbnN0IGluIGZsb2F0IHYgKSB7XFxuXFx0aWYoIHYgPD0gMC4wIClcXG5cXHRcXHRyZXR1cm4gdmVjMyggMC4sIDAuLCAwLiApO1xcblxcdGlmKCB2ID49IDEuMCApXFxuXFx0XFx0cmV0dXJuIHZlYzMoIDEuLCAxLiwgMS4gKTtcXG5cXHRmbG9hdCB2dWY7XFxuXFx0ZmxvYXQgYmYgPSBtb2RmKCB2ICogUGFja0ZhY3RvcnMuYiwgdnVmICk7XFxuXFx0ZmxvYXQgZ2YgPSBtb2RmKCB2dWYgKiBTaGlmdFJpZ2h0OCwgdnVmICk7XFxuXFx0cmV0dXJuIHZlYzMoIHZ1ZiAqIEludjI1NSwgZ2YgKiBQYWNrVXBzY2FsZSwgYmYgKTtcXG59XFxudmVjMiBwYWNrRGVwdGhUb1JHKCBjb25zdCBpbiBmbG9hdCB2ICkge1xcblxcdGlmKCB2IDw9IDAuMCApXFxuXFx0XFx0cmV0dXJuIHZlYzIoIDAuLCAwLiApO1xcblxcdGlmKCB2ID49IDEuMCApXFxuXFx0XFx0cmV0dXJuIHZlYzIoIDEuLCAxLiApO1xcblxcdGZsb2F0IHZ1ZjtcXG5cXHRmbG9hdCBnZiA9IG1vZGYoIHYgKiAyNTYuLCB2dWYgKTtcXG5cXHRyZXR1cm4gdmVjMiggdnVmICogSW52MjU1LCBnZiApO1xcbn1cXG5mbG9hdCB1bnBhY2tSR0JBVG9EZXB0aCggY29uc3QgaW4gdmVjNCB2ICkge1xcblxcdHJldHVybiBkb3QoIHYsIFVucGFja0ZhY3RvcnM0ICk7XFxufVxcbmZsb2F0IHVucGFja1JHQlRvRGVwdGgoIGNvbnN0IGluIHZlYzMgdiApIHtcXG5cXHRyZXR1cm4gZG90KCB2LCBVbnBhY2tGYWN0b3JzMyApO1xcbn1cXG5mbG9hdCB1bnBhY2tSR1RvRGVwdGgoIGNvbnN0IGluIHZlYzIgdiApIHtcXG5cXHRyZXR1cm4gdi5yICogVW5wYWNrRmFjdG9yczIuciArIHYuZyAqIFVucGFja0ZhY3RvcnMyLmc7XFxufVxcbnZlYzQgcGFjazJIYWxmVG9SR0JBKCBjb25zdCBpbiB2ZWMyIHYgKSB7XFxuXFx0dmVjNCByID0gdmVjNCggdi54LCBmcmFjdCggdi54ICogMjU1LjAgKSwgdi55LCBmcmFjdCggdi55ICogMjU1LjAgKSApO1xcblxcdHJldHVybiB2ZWM0KCByLnggLSByLnkgLyAyNTUuMCwgci55LCByLnogLSByLncgLyAyNTUuMCwgci53ICk7XFxufVxcbnZlYzIgdW5wYWNrUkdCQVRvMkhhbGYoIGNvbnN0IGluIHZlYzQgdiApIHtcXG5cXHRyZXR1cm4gdmVjMiggdi54ICsgKCB2LnkgLyAyNTUuMCApLCB2LnogKyAoIHYudyAvIDI1NS4wICkgKTtcXG59XFxuZmxvYXQgdmlld1pUb09ydGhvZ3JhcGhpY0RlcHRoKCBjb25zdCBpbiBmbG9hdCB2aWV3WiwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xcblxcdHJldHVybiAoIHZpZXdaICsgbmVhciApIC8gKCBuZWFyIC0gZmFyICk7XFxufVxcbmZsb2F0IG9ydGhvZ3JhcGhpY0RlcHRoVG9WaWV3WiggY29uc3QgaW4gZmxvYXQgZGVwdGgsIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcXG5cXHRyZXR1cm4gZGVwdGggKiAoIG5lYXIgLSBmYXIgKSAtIG5lYXI7XFxufVxcbmZsb2F0IHZpZXdaVG9QZXJzcGVjdGl2ZURlcHRoKCBjb25zdCBpbiBmbG9hdCB2aWV3WiwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xcblxcdHJldHVybiAoICggbmVhciArIHZpZXdaICkgKiBmYXIgKSAvICggKCBmYXIgLSBuZWFyICkgKiB2aWV3WiApO1xcbn1cXG5mbG9hdCBwZXJzcGVjdGl2ZURlcHRoVG9WaWV3WiggY29uc3QgaW4gZmxvYXQgZGVwdGgsIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcXG5cXHRyZXR1cm4gKCBuZWFyICogZmFyICkgLyAoICggZmFyIC0gbmVhciApICogZGVwdGggLSBmYXIgKTtcXG59XCI7XG5cbnZhciBwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50ID0gXCIjaWZkZWYgUFJFTVVMVElQTElFRF9BTFBIQVxcblxcdGdsX0ZyYWdDb2xvci5yZ2IgKj0gZ2xfRnJhZ0NvbG9yLmE7XFxuI2VuZGlmXCI7XG5cbnZhciBwcm9qZWN0X3ZlcnRleCA9IFwidmVjNCBtdlBvc2l0aW9uID0gdmVjNCggdHJhbnNmb3JtZWQsIDEuMCApO1xcbiNpZmRlZiBVU0VfQkFUQ0hJTkdcXG5cXHRtdlBvc2l0aW9uID0gYmF0Y2hpbmdNYXRyaXggKiBtdlBvc2l0aW9uO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfSU5TVEFOQ0lOR1xcblxcdG12UG9zaXRpb24gPSBpbnN0YW5jZU1hdHJpeCAqIG12UG9zaXRpb247XFxuI2VuZGlmXFxubXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIG12UG9zaXRpb247XFxuZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcIjtcblxudmFyIGRpdGhlcmluZ19mcmFnbWVudCA9IFwiI2lmZGVmIERJVEhFUklOR1xcblxcdGdsX0ZyYWdDb2xvci5yZ2IgPSBkaXRoZXJpbmcoIGdsX0ZyYWdDb2xvci5yZ2IgKTtcXG4jZW5kaWZcIjtcblxudmFyIGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgRElUSEVSSU5HXFxuXFx0dmVjMyBkaXRoZXJpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0XFx0ZmxvYXQgZ3JpZF9wb3NpdGlvbiA9IHJhbmQoIGdsX0ZyYWdDb29yZC54eSApO1xcblxcdFxcdHZlYzMgZGl0aGVyX3NoaWZ0X1JHQiA9IHZlYzMoIDAuMjUgLyAyNTUuMCwgLTAuMjUgLyAyNTUuMCwgMC4yNSAvIDI1NS4wICk7XFxuXFx0XFx0ZGl0aGVyX3NoaWZ0X1JHQiA9IG1peCggMi4wICogZGl0aGVyX3NoaWZ0X1JHQiwgLTIuMCAqIGRpdGhlcl9zaGlmdF9SR0IsIGdyaWRfcG9zaXRpb24gKTtcXG5cXHRcXHRyZXR1cm4gY29sb3IgKyBkaXRoZXJfc2hpZnRfUkdCO1xcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIHJvdWdobmVzc21hcF9mcmFnbWVudCA9IFwiZmxvYXQgcm91Z2huZXNzRmFjdG9yID0gcm91Z2huZXNzO1xcbiNpZmRlZiBVU0VfUk9VR0hORVNTTUFQXFxuXFx0dmVjNCB0ZXhlbFJvdWdobmVzcyA9IHRleHR1cmUyRCggcm91Z2huZXNzTWFwLCB2Um91Z2huZXNzTWFwVXYgKTtcXG5cXHRyb3VnaG5lc3NGYWN0b3IgKj0gdGV4ZWxSb3VnaG5lc3MuZztcXG4jZW5kaWZcIjtcblxudmFyIHJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX1JPVUdITkVTU01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIHJvdWdobmVzc01hcDtcXG4jZW5kaWZcIjtcblxudmFyIHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWYgTlVNX1NQT1RfTElHSFRfQ09PUkRTID4gMFxcblxcdHZhcnlpbmcgdmVjNCB2U3BvdExpZ2h0Q29vcmRbIE5VTV9TUE9UX0xJR0hUX0NPT1JEUyBdO1xcbiNlbmRpZlxcbiNpZiBOVU1fU1BPVF9MSUdIVF9NQVBTID4gMFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIHNwb3RMaWdodE1hcFsgTlVNX1NQT1RfTElHSFRfTUFQUyBdO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0I2lmIE5VTV9ESVJfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBkaXJlY3Rpb25hbFNoYWRvd01hcFsgTlVNX0RJUl9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBOVU1fRElSX0xJR0hUX1NIQURPV1MgXTtcXG5cXHRcXHRzdHJ1Y3QgRGlyZWN0aW9uYWxMaWdodFNoYWRvdyB7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93SW50ZW5zaXR5O1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0JpYXM7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93Tm9ybWFsQmlhcztcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0dmVjMiBzaGFkb3dNYXBTaXplO1xcblxcdFxcdH07XFxuXFx0XFx0dW5pZm9ybSBEaXJlY3Rpb25hbExpZ2h0U2hhZG93IGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzWyBOVU1fRElSX0xJR0hUX1NIQURPV1MgXTtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBzcG90U2hhZG93TWFwWyBOVU1fU1BPVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0c3RydWN0IFNwb3RMaWdodFNoYWRvdyB7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93SW50ZW5zaXR5O1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0JpYXM7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93Tm9ybWFsQmlhcztcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0dmVjMiBzaGFkb3dNYXBTaXplO1xcblxcdFxcdH07XFxuXFx0XFx0dW5pZm9ybSBTcG90TGlnaHRTaGFkb3cgc3BvdExpZ2h0U2hhZG93c1sgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyBdO1xcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBwb2ludFNoYWRvd01hcFsgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHRcXHR2YXJ5aW5nIHZlYzQgdlBvaW50U2hhZG93Q29vcmRbIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0c3RydWN0IFBvaW50TGlnaHRTaGFkb3cge1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0ludGVuc2l0eTtcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dCaWFzO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd05vcm1hbEJpYXM7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdHZlYzIgc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dDYW1lcmFOZWFyO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0NhbWVyYUZhcjtcXG5cXHRcXHR9O1xcblxcdFxcdHVuaWZvcm0gUG9pbnRMaWdodFNoYWRvdyBwb2ludExpZ2h0U2hhZG93c1sgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHQjZW5kaWZcXG5cXHRmbG9hdCB0ZXh0dXJlMkRDb21wYXJlKCBzYW1wbGVyMkQgZGVwdGhzLCB2ZWMyIHV2LCBmbG9hdCBjb21wYXJlICkge1xcblxcdFxcdGZsb2F0IGRlcHRoID0gdW5wYWNrUkdCQVRvRGVwdGgoIHRleHR1cmUyRCggZGVwdGhzLCB1diApICk7XFxuXFx0XFx0I2lmZGVmIFVTRV9SRVZFUlNFRF9ERVBUSF9CVUZGRVJcXG5cXHRcXHRcXHRyZXR1cm4gc3RlcCggZGVwdGgsIGNvbXBhcmUgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHJldHVybiBzdGVwKCBjb21wYXJlLCBkZXB0aCApO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG5cXHR2ZWMyIHRleHR1cmUyRERpc3RyaWJ1dGlvbiggc2FtcGxlcjJEIHNoYWRvdywgdmVjMiB1diApIHtcXG5cXHRcXHRyZXR1cm4gdW5wYWNrUkdCQVRvMkhhbGYoIHRleHR1cmUyRCggc2hhZG93LCB1diApICk7XFxuXFx0fVxcblxcdGZsb2F0IFZTTVNoYWRvdyggc2FtcGxlcjJEIHNoYWRvdywgdmVjMiB1diwgZmxvYXQgY29tcGFyZSApIHtcXG5cXHRcXHRmbG9hdCBvY2NsdXNpb24gPSAxLjA7XFxuXFx0XFx0dmVjMiBkaXN0cmlidXRpb24gPSB0ZXh0dXJlMkREaXN0cmlidXRpb24oIHNoYWRvdywgdXYgKTtcXG5cXHRcXHQjaWZkZWYgVVNFX1JFVkVSU0VEX0RFUFRIX0JVRkZFUlxcblxcdFxcdFxcdGZsb2F0IGhhcmRfc2hhZG93ID0gc3RlcCggZGlzdHJpYnV0aW9uLngsIGNvbXBhcmUgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdGZsb2F0IGhhcmRfc2hhZG93ID0gc3RlcCggY29tcGFyZSwgZGlzdHJpYnV0aW9uLnggKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRpZiAoIGhhcmRfc2hhZG93ICE9IDEuMCApIHtcXG5cXHRcXHRcXHRmbG9hdCBkaXN0YW5jZSA9IGNvbXBhcmUgLSBkaXN0cmlidXRpb24ueDtcXG5cXHRcXHRcXHRmbG9hdCB2YXJpYW5jZSA9IG1heCggMC4wMDAwMCwgZGlzdHJpYnV0aW9uLnkgKiBkaXN0cmlidXRpb24ueSApO1xcblxcdFxcdFxcdGZsb2F0IHNvZnRuZXNzX3Byb2JhYmlsaXR5ID0gdmFyaWFuY2UgLyAodmFyaWFuY2UgKyBkaXN0YW5jZSAqIGRpc3RhbmNlICk7XFx0XFx0XFx0c29mdG5lc3NfcHJvYmFiaWxpdHkgPSBjbGFtcCggKCBzb2Z0bmVzc19wcm9iYWJpbGl0eSAtIDAuMyApIC8gKCAwLjk1IC0gMC4zICksIDAuMCwgMS4wICk7XFx0XFx0XFx0b2NjbHVzaW9uID0gY2xhbXAoIG1heCggaGFyZF9zaGFkb3csIHNvZnRuZXNzX3Byb2JhYmlsaXR5ICksIDAuMCwgMS4wICk7XFxuXFx0XFx0fVxcblxcdFxcdHJldHVybiBvY2NsdXNpb247XFxuXFx0fVxcblxcdGZsb2F0IGdldFNoYWRvdyggc2FtcGxlcjJEIHNoYWRvd01hcCwgdmVjMiBzaGFkb3dNYXBTaXplLCBmbG9hdCBzaGFkb3dJbnRlbnNpdHksIGZsb2F0IHNoYWRvd0JpYXMsIGZsb2F0IHNoYWRvd1JhZGl1cywgdmVjNCBzaGFkb3dDb29yZCApIHtcXG5cXHRcXHRmbG9hdCBzaGFkb3cgPSAxLjA7XFxuXFx0XFx0c2hhZG93Q29vcmQueHl6IC89IHNoYWRvd0Nvb3JkLnc7XFxuXFx0XFx0c2hhZG93Q29vcmQueiArPSBzaGFkb3dCaWFzO1xcblxcdFxcdGJvb2wgaW5GcnVzdHVtID0gc2hhZG93Q29vcmQueCA+PSAwLjAgJiYgc2hhZG93Q29vcmQueCA8PSAxLjAgJiYgc2hhZG93Q29vcmQueSA+PSAwLjAgJiYgc2hhZG93Q29vcmQueSA8PSAxLjA7XFxuXFx0XFx0Ym9vbCBmcnVzdHVtVGVzdCA9IGluRnJ1c3R1bSAmJiBzaGFkb3dDb29yZC56IDw9IDEuMDtcXG5cXHRcXHRpZiAoIGZydXN0dW1UZXN0ICkge1xcblxcdFxcdCNpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0YgKVxcblxcdFxcdFxcdHZlYzIgdGV4ZWxTaXplID0gdmVjMiggMS4wICkgLyBzaGFkb3dNYXBTaXplO1xcblxcdFxcdFxcdGZsb2F0IGR4MCA9IC0gdGV4ZWxTaXplLnggKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHkwID0gLSB0ZXhlbFNpemUueSAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRmbG9hdCBkeDEgPSArIHRleGVsU2l6ZS54ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR5MSA9ICsgdGV4ZWxTaXplLnkgKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHgyID0gZHgwIC8gMi4wO1xcblxcdFxcdFxcdGZsb2F0IGR5MiA9IGR5MCAvIDIuMDtcXG5cXHRcXHRcXHRmbG9hdCBkeDMgPSBkeDEgLyAyLjA7XFxuXFx0XFx0XFx0ZmxvYXQgZHkzID0gZHkxIC8gMi4wO1xcblxcdFxcdFxcdHNoYWRvdyA9IChcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgyLCBkeTIgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTIgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgzLCBkeTIgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgyLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5LCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDMsIDAuMCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIDAuMCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDIsIGR5MyApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MyApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDMsIGR5MyApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIGR5MSApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MSApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIGR5MSApLCBzaGFkb3dDb29yZC56IClcXG5cXHRcXHRcXHQpICogKCAxLjAgLyAxNy4wICk7XFxuXFx0XFx0I2VsaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGX1NPRlQgKVxcblxcdFxcdFxcdHZlYzIgdGV4ZWxTaXplID0gdmVjMiggMS4wICkgLyBzaGFkb3dNYXBTaXplO1xcblxcdFxcdFxcdGZsb2F0IGR4ID0gdGV4ZWxTaXplLng7XFxuXFx0XFx0XFx0ZmxvYXQgZHkgPSB0ZXhlbFNpemUueTtcXG5cXHRcXHRcXHR2ZWMyIHV2ID0gc2hhZG93Q29vcmQueHk7XFxuXFx0XFx0XFx0dmVjMiBmID0gZnJhY3QoIHV2ICogc2hhZG93TWFwU2l6ZSArIDAuNSApO1xcblxcdFxcdFxcdHV2IC09IGYgKiB0ZXhlbFNpemU7XFxuXFx0XFx0XFx0c2hhZG93ID0gKFxcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYsIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIGR4LCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggMC4wLCBkeSApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB0ZXhlbFNpemUsIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0bWl4KCB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggLWR4LCAwLjAgKSwgc2hhZG93Q29vcmQueiApLFxcblxcdFxcdFxcdFxcdFxcdCB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggMi4wICogZHgsIDAuMCApLCBzaGFkb3dDb29yZC56ICksXFxuXFx0XFx0XFx0XFx0XFx0IGYueCApICtcXG5cXHRcXHRcXHRcXHRtaXgoIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAtZHgsIGR5ICksIHNoYWRvd0Nvb3JkLnogKSxcXG5cXHRcXHRcXHRcXHRcXHQgdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIDIuMCAqIGR4LCBkeSApLCBzaGFkb3dDb29yZC56ICksXFxuXFx0XFx0XFx0XFx0XFx0IGYueCApICtcXG5cXHRcXHRcXHRcXHRtaXgoIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAwLjAsIC1keSApLCBzaGFkb3dDb29yZC56ICksXFxuXFx0XFx0XFx0XFx0XFx0IHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAwLjAsIDIuMCAqIGR5ICksIHNoYWRvd0Nvb3JkLnogKSxcXG5cXHRcXHRcXHRcXHRcXHQgZi55ICkgK1xcblxcdFxcdFxcdFxcdG1peCggdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIGR4LCAtZHkgKSwgc2hhZG93Q29vcmQueiApLFxcblxcdFxcdFxcdFxcdFxcdCB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggZHgsIDIuMCAqIGR5ICksIHNoYWRvd0Nvb3JkLnogKSxcXG5cXHRcXHRcXHRcXHRcXHQgZi55ICkgK1xcblxcdFxcdFxcdFxcdG1peCggbWl4KCB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggLWR4LCAtZHkgKSwgc2hhZG93Q29vcmQueiApLFxcblxcdFxcdFxcdFxcdFxcdFxcdCAgdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIDIuMCAqIGR4LCAtZHkgKSwgc2hhZG93Q29vcmQueiApLFxcblxcdFxcdFxcdFxcdFxcdFxcdCAgZi54ICksXFxuXFx0XFx0XFx0XFx0XFx0IG1peCggdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIC1keCwgMi4wICogZHkgKSwgc2hhZG93Q29vcmQueiApLFxcblxcdFxcdFxcdFxcdFxcdFxcdCAgdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIDIuMCAqIGR4LCAyLjAgKiBkeSApLCBzaGFkb3dDb29yZC56ICksXFxuXFx0XFx0XFx0XFx0XFx0XFx0ICBmLnggKSxcXG5cXHRcXHRcXHRcXHRcXHQgZi55IClcXG5cXHRcXHRcXHQpICogKCAxLjAgLyA5LjAgKTtcXG5cXHRcXHQjZWxpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9WU00gKVxcblxcdFxcdFxcdHNoYWRvdyA9IFZTTVNoYWRvdyggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSwgc2hhZG93Q29vcmQueiApO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0c2hhZG93ID0gdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSwgc2hhZG93Q29vcmQueiApO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdH1cXG5cXHRcXHRyZXR1cm4gbWl4KCAxLjAsIHNoYWRvdywgc2hhZG93SW50ZW5zaXR5ICk7XFxuXFx0fVxcblxcdHZlYzIgY3ViZVRvVVYoIHZlYzMgdiwgZmxvYXQgdGV4ZWxTaXplWSApIHtcXG5cXHRcXHR2ZWMzIGFic1YgPSBhYnMoIHYgKTtcXG5cXHRcXHRmbG9hdCBzY2FsZVRvQ3ViZSA9IDEuMCAvIG1heCggYWJzVi54LCBtYXgoIGFic1YueSwgYWJzVi56ICkgKTtcXG5cXHRcXHRhYnNWICo9IHNjYWxlVG9DdWJlO1xcblxcdFxcdHYgKj0gc2NhbGVUb0N1YmUgKiAoIDEuMCAtIDIuMCAqIHRleGVsU2l6ZVkgKTtcXG5cXHRcXHR2ZWMyIHBsYW5hciA9IHYueHk7XFxuXFx0XFx0ZmxvYXQgYWxtb3N0QVRleGVsID0gMS41ICogdGV4ZWxTaXplWTtcXG5cXHRcXHRmbG9hdCBhbG1vc3RPbmUgPSAxLjAgLSBhbG1vc3RBVGV4ZWw7XFxuXFx0XFx0aWYgKCBhYnNWLnogPj0gYWxtb3N0T25lICkge1xcblxcdFxcdFxcdGlmICggdi56ID4gMC4wIClcXG5cXHRcXHRcXHRcXHRwbGFuYXIueCA9IDQuMCAtIHYueDtcXG5cXHRcXHR9IGVsc2UgaWYgKCBhYnNWLnggPj0gYWxtb3N0T25lICkge1xcblxcdFxcdFxcdGZsb2F0IHNpZ25YID0gc2lnbiggdi54ICk7XFxuXFx0XFx0XFx0cGxhbmFyLnggPSB2LnogKiBzaWduWCArIDIuMCAqIHNpZ25YO1xcblxcdFxcdH0gZWxzZSBpZiAoIGFic1YueSA+PSBhbG1vc3RPbmUgKSB7XFxuXFx0XFx0XFx0ZmxvYXQgc2lnblkgPSBzaWduKCB2LnkgKTtcXG5cXHRcXHRcXHRwbGFuYXIueCA9IHYueCArIDIuMCAqIHNpZ25ZICsgMi4wO1xcblxcdFxcdFxcdHBsYW5hci55ID0gdi56ICogc2lnblkgLSAyLjA7XFxuXFx0XFx0fVxcblxcdFxcdHJldHVybiB2ZWMyKCAwLjEyNSwgMC4yNSApICogcGxhbmFyICsgdmVjMiggMC4zNzUsIDAuNzUgKTtcXG5cXHR9XFxuXFx0ZmxvYXQgZ2V0UG9pbnRTaGFkb3coIHNhbXBsZXIyRCBzaGFkb3dNYXAsIHZlYzIgc2hhZG93TWFwU2l6ZSwgZmxvYXQgc2hhZG93SW50ZW5zaXR5LCBmbG9hdCBzaGFkb3dCaWFzLCBmbG9hdCBzaGFkb3dSYWRpdXMsIHZlYzQgc2hhZG93Q29vcmQsIGZsb2F0IHNoYWRvd0NhbWVyYU5lYXIsIGZsb2F0IHNoYWRvd0NhbWVyYUZhciApIHtcXG5cXHRcXHRmbG9hdCBzaGFkb3cgPSAxLjA7XFxuXFx0XFx0dmVjMyBsaWdodFRvUG9zaXRpb24gPSBzaGFkb3dDb29yZC54eXo7XFxuXFx0XFx0XFxuXFx0XFx0ZmxvYXQgbGlnaHRUb1Bvc2l0aW9uTGVuZ3RoID0gbGVuZ3RoKCBsaWdodFRvUG9zaXRpb24gKTtcXG5cXHRcXHRpZiAoIGxpZ2h0VG9Qb3NpdGlvbkxlbmd0aCAtIHNoYWRvd0NhbWVyYUZhciA8PSAwLjAgJiYgbGlnaHRUb1Bvc2l0aW9uTGVuZ3RoIC0gc2hhZG93Q2FtZXJhTmVhciA+PSAwLjAgKSB7XFxuXFx0XFx0XFx0ZmxvYXQgZHAgPSAoIGxpZ2h0VG9Qb3NpdGlvbkxlbmd0aCAtIHNoYWRvd0NhbWVyYU5lYXIgKSAvICggc2hhZG93Q2FtZXJhRmFyIC0gc2hhZG93Q2FtZXJhTmVhciApO1xcdFxcdFxcdGRwICs9IHNoYWRvd0JpYXM7XFxuXFx0XFx0XFx0dmVjMyBiZDNEID0gbm9ybWFsaXplKCBsaWdodFRvUG9zaXRpb24gKTtcXG5cXHRcXHRcXHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gKCBzaGFkb3dNYXBTaXplICogdmVjMiggNC4wLCAyLjAgKSApO1xcblxcdFxcdFxcdCNpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0YgKSB8fCBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0ZfU09GVCApIHx8IGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1ZTTSApXFxuXFx0XFx0XFx0XFx0dmVjMiBvZmZzZXQgPSB2ZWMyKCAtIDEsIDEgKSAqIHNoYWRvd1JhZGl1cyAqIHRleGVsU2l6ZS55O1xcblxcdFxcdFxcdFxcdHNoYWRvdyA9IChcXG5cXHRcXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnh5eSwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC55eXksIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueHl4LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnl5eCwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eHksIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueXh5LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnh4eCwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC55eHgsIHRleGVsU2l6ZS55ICksIGRwIClcXG5cXHRcXHRcXHRcXHQpICogKCAxLjAgLyA5LjAgKTtcXG5cXHRcXHRcXHQjZWxzZVxcblxcdFxcdFxcdFxcdHNoYWRvdyA9IHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QsIHRleGVsU2l6ZS55ICksIGRwICk7XFxuXFx0XFx0XFx0I2VuZGlmXFxuXFx0XFx0fVxcblxcdFxcdHJldHVybiBtaXgoIDEuMCwgc2hhZG93LCBzaGFkb3dJbnRlbnNpdHkgKTtcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBzaGFkb3dtYXBfcGFyc192ZXJ0ZXggPSBcIiNpZiBOVU1fU1BPVF9MSUdIVF9DT09SRFMgPiAwXFxuXFx0dW5pZm9ybSBtYXQ0IHNwb3RMaWdodE1hdHJpeFsgTlVNX1NQT1RfTElHSFRfQ09PUkRTIF07XFxuXFx0dmFyeWluZyB2ZWM0IHZTcG90TGlnaHRDb29yZFsgTlVNX1NQT1RfTElHSFRfQ09PUkRTIF07XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHQjaWYgTlVNX0RJUl9MSUdIVF9TSEFET1dTID4gMFxcblxcdFxcdHVuaWZvcm0gbWF0NCBkaXJlY3Rpb25hbFNoYWRvd01hdHJpeFsgTlVNX0RJUl9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBOVU1fRElSX0xJR0hUX1NIQURPV1MgXTtcXG5cXHRcXHRzdHJ1Y3QgRGlyZWN0aW9uYWxMaWdodFNoYWRvdyB7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93SW50ZW5zaXR5O1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0JpYXM7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93Tm9ybWFsQmlhcztcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0dmVjMiBzaGFkb3dNYXBTaXplO1xcblxcdFxcdH07XFxuXFx0XFx0dW5pZm9ybSBEaXJlY3Rpb25hbExpZ2h0U2hhZG93IGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzWyBOVU1fRElSX0xJR0hUX1NIQURPV1MgXTtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRcXHRzdHJ1Y3QgU3BvdExpZ2h0U2hhZG93IHtcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dJbnRlbnNpdHk7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93QmlhcztcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dOb3JtYWxCaWFzO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHR2ZWMyIHNoYWRvd01hcFNpemU7XFxuXFx0XFx0fTtcXG5cXHRcXHR1bmlmb3JtIFNwb3RMaWdodFNoYWRvdyBzcG90TGlnaHRTaGFkb3dzWyBOVU1fU1BPVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTID4gMFxcblxcdFxcdHVuaWZvcm0gbWF0NCBwb2ludFNoYWRvd01hdHJpeFsgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHRcXHR2YXJ5aW5nIHZlYzQgdlBvaW50U2hhZG93Q29vcmRbIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0c3RydWN0IFBvaW50TGlnaHRTaGFkb3cge1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0ludGVuc2l0eTtcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dCaWFzO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd05vcm1hbEJpYXM7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdHZlYzIgc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dDYW1lcmFOZWFyO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0NhbWVyYUZhcjtcXG5cXHRcXHR9O1xcblxcdFxcdHVuaWZvcm0gUG9pbnRMaWdodFNoYWRvdyBwb2ludExpZ2h0U2hhZG93c1sgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIHNoYWRvd21hcF92ZXJ0ZXggPSBcIiNpZiAoIGRlZmluZWQoIFVTRV9TSEFET1dNQVAgKSAmJiAoIE5VTV9ESVJfTElHSFRfU0hBRE9XUyA+IDAgfHwgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgPiAwICkgKSB8fCAoIE5VTV9TUE9UX0xJR0hUX0NPT1JEUyA+IDAgKVxcblxcdHZlYzMgc2hhZG93V29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCB0cmFuc2Zvcm1lZE5vcm1hbCwgdmlld01hdHJpeCApO1xcblxcdHZlYzQgc2hhZG93V29ybGRQb3NpdGlvbjtcXG4jZW5kaWZcXG4jaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApXFxuXFx0I2lmIE5VTV9ESVJfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRcXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0XFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0RJUl9MSUdIVF9TSEFET1dTOyBpICsrICkge1xcblxcdFxcdFxcdHNoYWRvd1dvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uICsgdmVjNCggc2hhZG93V29ybGROb3JtYWwgKiBkaXJlY3Rpb25hbExpZ2h0U2hhZG93c1sgaSBdLnNoYWRvd05vcm1hbEJpYXMsIDAgKTtcXG5cXHRcXHRcXHR2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgaSBdID0gZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXhbIGkgXSAqIHNoYWRvd1dvcmxkUG9zaXRpb247XFxuXFx0XFx0fVxcblxcdFxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTID4gMFxcblxcdFxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRcXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUzsgaSArKyApIHtcXG5cXHRcXHRcXHRzaGFkb3dXb3JsZFBvc2l0aW9uID0gd29ybGRQb3NpdGlvbiArIHZlYzQoIHNoYWRvd1dvcmxkTm9ybWFsICogcG9pbnRMaWdodFNoYWRvd3NbIGkgXS5zaGFkb3dOb3JtYWxCaWFzLCAwICk7XFxuXFx0XFx0XFx0dlBvaW50U2hhZG93Q29vcmRbIGkgXSA9IHBvaW50U2hhZG93TWF0cml4WyBpIF0gKiBzaGFkb3dXb3JsZFBvc2l0aW9uO1xcblxcdFxcdH1cXG5cXHRcXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcblxcdCNlbmRpZlxcbiNlbmRpZlxcbiNpZiBOVU1fU1BPVF9MSUdIVF9DT09SRFMgPiAwXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUX0NPT1JEUzsgaSArKyApIHtcXG5cXHRcXHRzaGFkb3dXb3JsZFBvc2l0aW9uID0gd29ybGRQb3NpdGlvbjtcXG5cXHRcXHQjaWYgKCBkZWZpbmVkKCBVU0VfU0hBRE9XTUFQICkgJiYgVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgKVxcblxcdFxcdFxcdHNoYWRvd1dvcmxkUG9zaXRpb24ueHl6ICs9IHNoYWRvd1dvcmxkTm9ybWFsICogc3BvdExpZ2h0U2hhZG93c1sgaSBdLnNoYWRvd05vcm1hbEJpYXM7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0dlNwb3RMaWdodENvb3JkWyBpIF0gPSBzcG90TGlnaHRNYXRyaXhbIGkgXSAqIHNoYWRvd1dvcmxkUG9zaXRpb247XFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuI2VuZGlmXCI7XG5cbnZhciBzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQgPSBcImZsb2F0IGdldFNoYWRvd01hc2soKSB7XFxuXFx0ZmxvYXQgc2hhZG93ID0gMS4wO1xcblxcdCNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0I2lmIE5VTV9ESVJfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHREaXJlY3Rpb25hbExpZ2h0U2hhZG93IGRpcmVjdGlvbmFsTGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9ESVJfTElHSFRfU0hBRE9XUzsgaSArKyApIHtcXG5cXHRcXHRkaXJlY3Rpb25hbExpZ2h0ID0gZGlyZWN0aW9uYWxMaWdodFNoYWRvd3NbIGkgXTtcXG5cXHRcXHRzaGFkb3cgKj0gcmVjZWl2ZVNoYWRvdyA/IGdldFNoYWRvdyggZGlyZWN0aW9uYWxTaGFkb3dNYXBbIGkgXSwgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dNYXBTaXplLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd0ludGVuc2l0eSwgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dCaWFzLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd1JhZGl1cywgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcblxcdH1cXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fU1BPVF9MSUdIVF9TSEFET1dTID4gMFxcblxcdFNwb3RMaWdodFNoYWRvdyBzcG90TGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUX1NIQURPV1M7IGkgKysgKSB7XFxuXFx0XFx0c3BvdExpZ2h0ID0gc3BvdExpZ2h0U2hhZG93c1sgaSBdO1xcblxcdFxcdHNoYWRvdyAqPSByZWNlaXZlU2hhZG93ID8gZ2V0U2hhZG93KCBzcG90U2hhZG93TWFwWyBpIF0sIHNwb3RMaWdodC5zaGFkb3dNYXBTaXplLCBzcG90TGlnaHQuc2hhZG93SW50ZW5zaXR5LCBzcG90TGlnaHQuc2hhZG93Qmlhcywgc3BvdExpZ2h0LnNoYWRvd1JhZGl1cywgdlNwb3RMaWdodENvb3JkWyBpIF0gKSA6IDEuMDtcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0UG9pbnRMaWdodFNoYWRvdyBwb2ludExpZ2h0O1xcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUzsgaSArKyApIHtcXG5cXHRcXHRwb2ludExpZ2h0ID0gcG9pbnRMaWdodFNoYWRvd3NbIGkgXTtcXG5cXHRcXHRzaGFkb3cgKj0gcmVjZWl2ZVNoYWRvdyA/IGdldFBvaW50U2hhZG93KCBwb2ludFNoYWRvd01hcFsgaSBdLCBwb2ludExpZ2h0LnNoYWRvd01hcFNpemUsIHBvaW50TGlnaHQuc2hhZG93SW50ZW5zaXR5LCBwb2ludExpZ2h0LnNoYWRvd0JpYXMsIHBvaW50TGlnaHQuc2hhZG93UmFkaXVzLCB2UG9pbnRTaGFkb3dDb29yZFsgaSBdLCBwb2ludExpZ2h0LnNoYWRvd0NhbWVyYU5lYXIsIHBvaW50TGlnaHQuc2hhZG93Q2FtZXJhRmFyICkgOiAxLjA7XFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuXFx0I2VuZGlmXFxuXFx0I2VuZGlmXFxuXFx0cmV0dXJuIHNoYWRvdztcXG59XCI7XG5cbnZhciBza2luYmFzZV92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfU0tJTk5JTkdcXG5cXHRtYXQ0IGJvbmVNYXRYID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LnggKTtcXG5cXHRtYXQ0IGJvbmVNYXRZID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LnkgKTtcXG5cXHRtYXQ0IGJvbmVNYXRaID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LnogKTtcXG5cXHRtYXQ0IGJvbmVNYXRXID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LncgKTtcXG4jZW5kaWZcIjtcblxudmFyIHNraW5uaW5nX3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFx0dW5pZm9ybSBtYXQ0IGJpbmRNYXRyaXg7XFxuXFx0dW5pZm9ybSBtYXQ0IGJpbmRNYXRyaXhJbnZlcnNlO1xcblxcdHVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIGJvbmVUZXh0dXJlO1xcblxcdG1hdDQgZ2V0Qm9uZU1hdHJpeCggY29uc3QgaW4gZmxvYXQgaSApIHtcXG5cXHRcXHRpbnQgc2l6ZSA9IHRleHR1cmVTaXplKCBib25lVGV4dHVyZSwgMCApLng7XFxuXFx0XFx0aW50IGogPSBpbnQoIGkgKSAqIDQ7XFxuXFx0XFx0aW50IHggPSBqICUgc2l6ZTtcXG5cXHRcXHRpbnQgeSA9IGogLyBzaXplO1xcblxcdFxcdHZlYzQgdjEgPSB0ZXhlbEZldGNoKCBib25lVGV4dHVyZSwgaXZlYzIoIHgsIHkgKSwgMCApO1xcblxcdFxcdHZlYzQgdjIgPSB0ZXhlbEZldGNoKCBib25lVGV4dHVyZSwgaXZlYzIoIHggKyAxLCB5ICksIDAgKTtcXG5cXHRcXHR2ZWM0IHYzID0gdGV4ZWxGZXRjaCggYm9uZVRleHR1cmUsIGl2ZWMyKCB4ICsgMiwgeSApLCAwICk7XFxuXFx0XFx0dmVjNCB2NCA9IHRleGVsRmV0Y2goIGJvbmVUZXh0dXJlLCBpdmVjMiggeCArIDMsIHkgKSwgMCApO1xcblxcdFxcdHJldHVybiBtYXQ0KCB2MSwgdjIsIHYzLCB2NCApO1xcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIHNraW5uaW5nX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcdHZlYzQgc2tpblZlcnRleCA9IGJpbmRNYXRyaXggKiB2ZWM0KCB0cmFuc2Zvcm1lZCwgMS4wICk7XFxuXFx0dmVjNCBza2lubmVkID0gdmVjNCggMC4wICk7XFxuXFx0c2tpbm5lZCArPSBib25lTWF0WCAqIHNraW5WZXJ0ZXggKiBza2luV2VpZ2h0Lng7XFxuXFx0c2tpbm5lZCArPSBib25lTWF0WSAqIHNraW5WZXJ0ZXggKiBza2luV2VpZ2h0Lnk7XFxuXFx0c2tpbm5lZCArPSBib25lTWF0WiAqIHNraW5WZXJ0ZXggKiBza2luV2VpZ2h0Lno7XFxuXFx0c2tpbm5lZCArPSBib25lTWF0VyAqIHNraW5WZXJ0ZXggKiBza2luV2VpZ2h0Lnc7XFxuXFx0dHJhbnNmb3JtZWQgPSAoIGJpbmRNYXRyaXhJbnZlcnNlICogc2tpbm5lZCApLnh5ejtcXG4jZW5kaWZcIjtcblxudmFyIHNraW5ub3JtYWxfdmVydGV4ID0gXCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFx0bWF0NCBza2luTWF0cml4ID0gbWF0NCggMC4wICk7XFxuXFx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LnggKiBib25lTWF0WDtcXG5cXHRza2luTWF0cml4ICs9IHNraW5XZWlnaHQueSAqIGJvbmVNYXRZO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC56ICogYm9uZU1hdFo7XFxuXFx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LncgKiBib25lTWF0VztcXG5cXHRza2luTWF0cml4ID0gYmluZE1hdHJpeEludmVyc2UgKiBza2luTWF0cml4ICogYmluZE1hdHJpeDtcXG5cXHRvYmplY3ROb3JtYWwgPSB2ZWM0KCBza2luTWF0cml4ICogdmVjNCggb2JqZWN0Tm9ybWFsLCAwLjAgKSApLnh5ejtcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHRvYmplY3RUYW5nZW50ID0gdmVjNCggc2tpbk1hdHJpeCAqIHZlYzQoIG9iamVjdFRhbmdlbnQsIDAuMCApICkueHl6O1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgc3BlY3VsYXJtYXBfZnJhZ21lbnQgPSBcImZsb2F0IHNwZWN1bGFyU3RyZW5ndGg7XFxuI2lmZGVmIFVTRV9TUEVDVUxBUk1BUFxcblxcdHZlYzQgdGV4ZWxTcGVjdWxhciA9IHRleHR1cmUyRCggc3BlY3VsYXJNYXAsIHZTcGVjdWxhck1hcFV2ICk7XFxuXFx0c3BlY3VsYXJTdHJlbmd0aCA9IHRleGVsU3BlY3VsYXIucjtcXG4jZWxzZVxcblxcdHNwZWN1bGFyU3RyZW5ndGggPSAxLjA7XFxuI2VuZGlmXCI7XG5cbnZhciBzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX1NQRUNVTEFSTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgc3BlY3VsYXJNYXA7XFxuI2VuZGlmXCI7XG5cbnZhciB0b25lbWFwcGluZ19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFRPTkVfTUFQUElORyApXFxuXFx0Z2xfRnJhZ0NvbG9yLnJnYiA9IHRvbmVNYXBwaW5nKCBnbF9GcmFnQ29sb3IucmdiICk7XFxuI2VuZGlmXCI7XG5cbnZhciB0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50ID0gXCIjaWZuZGVmIHNhdHVyYXRlXFxuI2RlZmluZSBzYXR1cmF0ZSggYSApIGNsYW1wKCBhLCAwLjAsIDEuMCApXFxuI2VuZGlmXFxudW5pZm9ybSBmbG9hdCB0b25lTWFwcGluZ0V4cG9zdXJlO1xcbnZlYzMgTGluZWFyVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0cmV0dXJuIHNhdHVyYXRlKCB0b25lTWFwcGluZ0V4cG9zdXJlICogY29sb3IgKTtcXG59XFxudmVjMyBSZWluaGFyZFRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdGNvbG9yICo9IHRvbmVNYXBwaW5nRXhwb3N1cmU7XFxuXFx0cmV0dXJuIHNhdHVyYXRlKCBjb2xvciAvICggdmVjMyggMS4wICkgKyBjb2xvciApICk7XFxufVxcbnZlYzMgQ2luZW9uVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZTtcXG5cXHRjb2xvciA9IG1heCggdmVjMyggMC4wICksIGNvbG9yIC0gMC4wMDQgKTtcXG5cXHRyZXR1cm4gcG93KCAoIGNvbG9yICogKCA2LjIgKiBjb2xvciArIDAuNSApICkgLyAoIGNvbG9yICogKCA2LjIgKiBjb2xvciArIDEuNyApICsgMC4wNiApLCB2ZWMzKCAyLjIgKSApO1xcbn1cXG52ZWMzIFJSVEFuZE9EVEZpdCggdmVjMyB2ICkge1xcblxcdHZlYzMgYSA9IHYgKiAoIHYgKyAwLjAyNDU3ODYgKSAtIDAuMDAwMDkwNTM3O1xcblxcdHZlYzMgYiA9IHYgKiAoIDAuOTgzNzI5ICogdiArIDAuNDMyOTUxMCApICsgMC4yMzgwODE7XFxuXFx0cmV0dXJuIGEgLyBiO1xcbn1cXG52ZWMzIEFDRVNGaWxtaWNUb25lTWFwcGluZyggdmVjMyBjb2xvciApIHtcXG5cXHRjb25zdCBtYXQzIEFDRVNJbnB1dE1hdCA9IG1hdDMoXFxuXFx0XFx0dmVjMyggMC41OTcxOSwgMC4wNzYwMCwgMC4wMjg0MCApLFxcdFxcdHZlYzMoIDAuMzU0NTgsIDAuOTA4MzQsIDAuMTMzODMgKSxcXG5cXHRcXHR2ZWMzKCAwLjA0ODIzLCAwLjAxNTY2LCAwLjgzNzc3IClcXG5cXHQpO1xcblxcdGNvbnN0IG1hdDMgQUNFU091dHB1dE1hdCA9IG1hdDMoXFxuXFx0XFx0dmVjMyggIDEuNjA0NzUsIC0wLjEwMjA4LCAtMC4wMDMyNyApLFxcdFxcdHZlYzMoIC0wLjUzMTA4LCAgMS4xMDgxMywgLTAuMDcyNzYgKSxcXG5cXHRcXHR2ZWMzKCAtMC4wNzM2NywgLTAuMDA2MDUsICAxLjA3NjAyIClcXG5cXHQpO1xcblxcdGNvbG9yICo9IHRvbmVNYXBwaW5nRXhwb3N1cmUgLyAwLjY7XFxuXFx0Y29sb3IgPSBBQ0VTSW5wdXRNYXQgKiBjb2xvcjtcXG5cXHRjb2xvciA9IFJSVEFuZE9EVEZpdCggY29sb3IgKTtcXG5cXHRjb2xvciA9IEFDRVNPdXRwdXRNYXQgKiBjb2xvcjtcXG5cXHRyZXR1cm4gc2F0dXJhdGUoIGNvbG9yICk7XFxufVxcbmNvbnN0IG1hdDMgTElORUFSX1JFQzIwMjBfVE9fTElORUFSX1NSR0IgPSBtYXQzKFxcblxcdHZlYzMoIDEuNjYwNSwgLSAwLjEyNDYsIC0gMC4wMTgyICksXFxuXFx0dmVjMyggLSAwLjU4NzYsIDEuMTMyOSwgLSAwLjEwMDYgKSxcXG5cXHR2ZWMzKCAtIDAuMDcyOCwgLSAwLjAwODMsIDEuMTE4NyApXFxuKTtcXG5jb25zdCBtYXQzIExJTkVBUl9TUkdCX1RPX0xJTkVBUl9SRUMyMDIwID0gbWF0MyhcXG5cXHR2ZWMzKCAwLjYyNzQsIDAuMDY5MSwgMC4wMTY0ICksXFxuXFx0dmVjMyggMC4zMjkzLCAwLjkxOTUsIDAuMDg4MCApLFxcblxcdHZlYzMoIDAuMDQzMywgMC4wMTEzLCAwLjg5NTYgKVxcbik7XFxudmVjMyBhZ3hEZWZhdWx0Q29udHJhc3RBcHByb3goIHZlYzMgeCApIHtcXG5cXHR2ZWMzIHgyID0geCAqIHg7XFxuXFx0dmVjMyB4NCA9IHgyICogeDI7XFxuXFx0cmV0dXJuICsgMTUuNSAqIHg0ICogeDJcXG5cXHRcXHQtIDQwLjE0ICogeDQgKiB4XFxuXFx0XFx0KyAzMS45NiAqIHg0XFxuXFx0XFx0LSA2Ljg2OCAqIHgyICogeFxcblxcdFxcdCsgMC40Mjk4ICogeDJcXG5cXHRcXHQrIDAuMTE5MSAqIHhcXG5cXHRcXHQtIDAuMDAyMzI7XFxufVxcbnZlYzMgQWdYVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0Y29uc3QgbWF0MyBBZ1hJbnNldE1hdHJpeCA9IG1hdDMoXFxuXFx0XFx0dmVjMyggMC44NTY2MjcxNTMzMTU5ODMsIDAuMTM3MzE4OTcyOTI5ODQ3LCAwLjExMTg5ODIxMjk5OTk1ICksXFxuXFx0XFx0dmVjMyggMC4wOTUxMjEyNDA1MzgxNTg4LCAwLjc2MTI0MTk5MDYwMjU5MSwgMC4wNzY3OTk0MTg2MDMxOTAzICksXFxuXFx0XFx0dmVjMyggMC4wNDgyNTE2MDYxNDU4NTgzLCAwLjEwMTQzOTAzNjQ2NzU2MiwgMC44MTEzMDIzNjgzOTY4NTkgKVxcblxcdCk7XFxuXFx0Y29uc3QgbWF0MyBBZ1hPdXRzZXRNYXRyaXggPSBtYXQzKFxcblxcdFxcdHZlYzMoIDEuMTI3MTAwNTgxODE0NDM2OCwgLSAwLjE0MTMyOTc2MzQ5ODQzODMsIC0gMC4xNDEzMjk3NjM0OTg0MzgyNiApLFxcblxcdFxcdHZlYzMoIC0gMC4xMTA2MDY2NDMwOTY2MDMyMywgMS4xNTc4MjM3MDIyMTYyNzIsIC0gMC4xMTA2MDY2NDMwOTY2MDI5NCApLFxcblxcdFxcdHZlYzMoIC0gMC4wMTY0OTM5Mzg3MTc4MzQ1NzMsIC0gMC4wMTY0OTM5Mzg3MTc4MzQyNTcsIDEuMjUxOTM2NDA2NTk1MDQwNSApXFxuXFx0KTtcXG5cXHRjb25zdCBmbG9hdCBBZ3hNaW5FdiA9IC0gMTIuNDczOTM7XFx0Y29uc3QgZmxvYXQgQWd4TWF4RXYgPSA0LjAyNjA2OTtcXG5cXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlO1xcblxcdGNvbG9yID0gTElORUFSX1NSR0JfVE9fTElORUFSX1JFQzIwMjAgKiBjb2xvcjtcXG5cXHRjb2xvciA9IEFnWEluc2V0TWF0cml4ICogY29sb3I7XFxuXFx0Y29sb3IgPSBtYXgoIGNvbG9yLCAxZS0xMCApO1xcdGNvbG9yID0gbG9nMiggY29sb3IgKTtcXG5cXHRjb2xvciA9ICggY29sb3IgLSBBZ3hNaW5FdiApIC8gKCBBZ3hNYXhFdiAtIEFneE1pbkV2ICk7XFxuXFx0Y29sb3IgPSBjbGFtcCggY29sb3IsIDAuMCwgMS4wICk7XFxuXFx0Y29sb3IgPSBhZ3hEZWZhdWx0Q29udHJhc3RBcHByb3goIGNvbG9yICk7XFxuXFx0Y29sb3IgPSBBZ1hPdXRzZXRNYXRyaXggKiBjb2xvcjtcXG5cXHRjb2xvciA9IHBvdyggbWF4KCB2ZWMzKCAwLjAgKSwgY29sb3IgKSwgdmVjMyggMi4yICkgKTtcXG5cXHRjb2xvciA9IExJTkVBUl9SRUMyMDIwX1RPX0xJTkVBUl9TUkdCICogY29sb3I7XFxuXFx0Y29sb3IgPSBjbGFtcCggY29sb3IsIDAuMCwgMS4wICk7XFxuXFx0cmV0dXJuIGNvbG9yO1xcbn1cXG52ZWMzIE5ldXRyYWxUb25lTWFwcGluZyggdmVjMyBjb2xvciApIHtcXG5cXHRjb25zdCBmbG9hdCBTdGFydENvbXByZXNzaW9uID0gMC44IC0gMC4wNDtcXG5cXHRjb25zdCBmbG9hdCBEZXNhdHVyYXRpb24gPSAwLjE1O1xcblxcdGNvbG9yICo9IHRvbmVNYXBwaW5nRXhwb3N1cmU7XFxuXFx0ZmxvYXQgeCA9IG1pbiggY29sb3IuciwgbWluKCBjb2xvci5nLCBjb2xvci5iICkgKTtcXG5cXHRmbG9hdCBvZmZzZXQgPSB4IDwgMC4wOCA/IHggLSA2LjI1ICogeCAqIHggOiAwLjA0O1xcblxcdGNvbG9yIC09IG9mZnNldDtcXG5cXHRmbG9hdCBwZWFrID0gbWF4KCBjb2xvci5yLCBtYXgoIGNvbG9yLmcsIGNvbG9yLmIgKSApO1xcblxcdGlmICggcGVhayA8IFN0YXJ0Q29tcHJlc3Npb24gKSByZXR1cm4gY29sb3I7XFxuXFx0ZmxvYXQgZCA9IDEuIC0gU3RhcnRDb21wcmVzc2lvbjtcXG5cXHRmbG9hdCBuZXdQZWFrID0gMS4gLSBkICogZCAvICggcGVhayArIGQgLSBTdGFydENvbXByZXNzaW9uICk7XFxuXFx0Y29sb3IgKj0gbmV3UGVhayAvIHBlYWs7XFxuXFx0ZmxvYXQgZyA9IDEuIC0gMS4gLyAoIERlc2F0dXJhdGlvbiAqICggcGVhayAtIG5ld1BlYWsgKSArIDEuICk7XFxuXFx0cmV0dXJuIG1peCggY29sb3IsIHZlYzMoIG5ld1BlYWsgKSwgZyApO1xcbn1cXG52ZWMzIEN1c3RvbVRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkgeyByZXR1cm4gY29sb3I7IH1cIjtcblxudmFyIHRyYW5zbWlzc2lvbl9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9UUkFOU01JU1NJT05cXG5cXHRtYXRlcmlhbC50cmFuc21pc3Npb24gPSB0cmFuc21pc3Npb247XFxuXFx0bWF0ZXJpYWwudHJhbnNtaXNzaW9uQWxwaGEgPSAxLjA7XFxuXFx0bWF0ZXJpYWwudGhpY2tuZXNzID0gdGhpY2tuZXNzO1xcblxcdG1hdGVyaWFsLmF0dGVudWF0aW9uRGlzdGFuY2UgPSBhdHRlbnVhdGlvbkRpc3RhbmNlO1xcblxcdG1hdGVyaWFsLmF0dGVudWF0aW9uQ29sb3IgPSBhdHRlbnVhdGlvbkNvbG9yO1xcblxcdCNpZmRlZiBVU0VfVFJBTlNNSVNTSU9OTUFQXFxuXFx0XFx0bWF0ZXJpYWwudHJhbnNtaXNzaW9uICo9IHRleHR1cmUyRCggdHJhbnNtaXNzaW9uTWFwLCB2VHJhbnNtaXNzaW9uTWFwVXYgKS5yO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBVU0VfVEhJQ0tORVNTTUFQXFxuXFx0XFx0bWF0ZXJpYWwudGhpY2tuZXNzICo9IHRleHR1cmUyRCggdGhpY2tuZXNzTWFwLCB2VGhpY2tuZXNzTWFwVXYgKS5nO1xcblxcdCNlbmRpZlxcblxcdHZlYzMgcG9zID0gdldvcmxkUG9zaXRpb247XFxuXFx0dmVjMyB2ID0gbm9ybWFsaXplKCBjYW1lcmFQb3NpdGlvbiAtIHBvcyApO1xcblxcdHZlYzMgbiA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIG5vcm1hbCwgdmlld01hdHJpeCApO1xcblxcdHZlYzQgdHJhbnNtaXR0ZWQgPSBnZXRJQkxWb2x1bWVSZWZyYWN0aW9uKFxcblxcdFxcdG4sIHYsIG1hdGVyaWFsLnJvdWdobmVzcywgbWF0ZXJpYWwuZGlmZnVzZUNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhckY5MCxcXG5cXHRcXHRwb3MsIG1vZGVsTWF0cml4LCB2aWV3TWF0cml4LCBwcm9qZWN0aW9uTWF0cml4LCBtYXRlcmlhbC5kaXNwZXJzaW9uLCBtYXRlcmlhbC5pb3IsIG1hdGVyaWFsLnRoaWNrbmVzcyxcXG5cXHRcXHRtYXRlcmlhbC5hdHRlbnVhdGlvbkNvbG9yLCBtYXRlcmlhbC5hdHRlbnVhdGlvbkRpc3RhbmNlICk7XFxuXFx0bWF0ZXJpYWwudHJhbnNtaXNzaW9uQWxwaGEgPSBtaXgoIG1hdGVyaWFsLnRyYW5zbWlzc2lvbkFscGhhLCB0cmFuc21pdHRlZC5hLCBtYXRlcmlhbC50cmFuc21pc3Npb24gKTtcXG5cXHR0b3RhbERpZmZ1c2UgPSBtaXgoIHRvdGFsRGlmZnVzZSwgdHJhbnNtaXR0ZWQucmdiLCBtYXRlcmlhbC50cmFuc21pc3Npb24gKTtcXG4jZW5kaWZcIjtcblxudmFyIHRyYW5zbWlzc2lvbl9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX1RSQU5TTUlTU0lPTlxcblxcdHVuaWZvcm0gZmxvYXQgdHJhbnNtaXNzaW9uO1xcblxcdHVuaWZvcm0gZmxvYXQgdGhpY2tuZXNzO1xcblxcdHVuaWZvcm0gZmxvYXQgYXR0ZW51YXRpb25EaXN0YW5jZTtcXG5cXHR1bmlmb3JtIHZlYzMgYXR0ZW51YXRpb25Db2xvcjtcXG5cXHQjaWZkZWYgVVNFX1RSQU5TTUlTU0lPTk1BUFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIHRyYW5zbWlzc2lvbk1hcDtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX1RISUNLTkVTU01BUFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIHRoaWNrbmVzc01hcDtcXG5cXHQjZW5kaWZcXG5cXHR1bmlmb3JtIHZlYzIgdHJhbnNtaXNzaW9uU2FtcGxlclNpemU7XFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgdHJhbnNtaXNzaW9uU2FtcGxlck1hcDtcXG5cXHR1bmlmb3JtIG1hdDQgbW9kZWxNYXRyaXg7XFxuXFx0dW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XFxuXFx0dmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcblxcdGZsb2F0IHcwKCBmbG9hdCBhICkge1xcblxcdFxcdHJldHVybiAoIDEuMCAvIDYuMCApICogKCBhICogKCBhICogKCAtIGEgKyAzLjAgKSAtIDMuMCApICsgMS4wICk7XFxuXFx0fVxcblxcdGZsb2F0IHcxKCBmbG9hdCBhICkge1xcblxcdFxcdHJldHVybiAoIDEuMCAvIDYuMCApICogKCBhICogIGEgKiAoIDMuMCAqIGEgLSA2LjAgKSArIDQuMCApO1xcblxcdH1cXG5cXHRmbG9hdCB3MiggZmxvYXQgYSApe1xcblxcdFxcdHJldHVybiAoIDEuMCAvIDYuMCApICogKCBhICogKCBhICogKCAtIDMuMCAqIGEgKyAzLjAgKSArIDMuMCApICsgMS4wICk7XFxuXFx0fVxcblxcdGZsb2F0IHczKCBmbG9hdCBhICkge1xcblxcdFxcdHJldHVybiAoIDEuMCAvIDYuMCApICogKCBhICogYSAqIGEgKTtcXG5cXHR9XFxuXFx0ZmxvYXQgZzAoIGZsb2F0IGEgKSB7XFxuXFx0XFx0cmV0dXJuIHcwKCBhICkgKyB3MSggYSApO1xcblxcdH1cXG5cXHRmbG9hdCBnMSggZmxvYXQgYSApIHtcXG5cXHRcXHRyZXR1cm4gdzIoIGEgKSArIHczKCBhICk7XFxuXFx0fVxcblxcdGZsb2F0IGgwKCBmbG9hdCBhICkge1xcblxcdFxcdHJldHVybiAtIDEuMCArIHcxKCBhICkgLyAoIHcwKCBhICkgKyB3MSggYSApICk7XFxuXFx0fVxcblxcdGZsb2F0IGgxKCBmbG9hdCBhICkge1xcblxcdFxcdHJldHVybiAxLjAgKyB3MyggYSApIC8gKCB3MiggYSApICsgdzMoIGEgKSApO1xcblxcdH1cXG5cXHR2ZWM0IGJpY3ViaWMoIHNhbXBsZXIyRCB0ZXgsIHZlYzIgdXYsIHZlYzQgdGV4ZWxTaXplLCBmbG9hdCBsb2QgKSB7XFxuXFx0XFx0dXYgPSB1diAqIHRleGVsU2l6ZS56dyArIDAuNTtcXG5cXHRcXHR2ZWMyIGl1diA9IGZsb29yKCB1diApO1xcblxcdFxcdHZlYzIgZnV2ID0gZnJhY3QoIHV2ICk7XFxuXFx0XFx0ZmxvYXQgZzB4ID0gZzAoIGZ1di54ICk7XFxuXFx0XFx0ZmxvYXQgZzF4ID0gZzEoIGZ1di54ICk7XFxuXFx0XFx0ZmxvYXQgaDB4ID0gaDAoIGZ1di54ICk7XFxuXFx0XFx0ZmxvYXQgaDF4ID0gaDEoIGZ1di54ICk7XFxuXFx0XFx0ZmxvYXQgaDB5ID0gaDAoIGZ1di55ICk7XFxuXFx0XFx0ZmxvYXQgaDF5ID0gaDEoIGZ1di55ICk7XFxuXFx0XFx0dmVjMiBwMCA9ICggdmVjMiggaXV2LnggKyBoMHgsIGl1di55ICsgaDB5ICkgLSAwLjUgKSAqIHRleGVsU2l6ZS54eTtcXG5cXHRcXHR2ZWMyIHAxID0gKCB2ZWMyKCBpdXYueCArIGgxeCwgaXV2LnkgKyBoMHkgKSAtIDAuNSApICogdGV4ZWxTaXplLnh5O1xcblxcdFxcdHZlYzIgcDIgPSAoIHZlYzIoIGl1di54ICsgaDB4LCBpdXYueSArIGgxeSApIC0gMC41ICkgKiB0ZXhlbFNpemUueHk7XFxuXFx0XFx0dmVjMiBwMyA9ICggdmVjMiggaXV2LnggKyBoMXgsIGl1di55ICsgaDF5ICkgLSAwLjUgKSAqIHRleGVsU2l6ZS54eTtcXG5cXHRcXHRyZXR1cm4gZzAoIGZ1di55ICkgKiAoIGcweCAqIHRleHR1cmVMb2QoIHRleCwgcDAsIGxvZCApICsgZzF4ICogdGV4dHVyZUxvZCggdGV4LCBwMSwgbG9kICkgKSArXFxuXFx0XFx0XFx0ZzEoIGZ1di55ICkgKiAoIGcweCAqIHRleHR1cmVMb2QoIHRleCwgcDIsIGxvZCApICsgZzF4ICogdGV4dHVyZUxvZCggdGV4LCBwMywgbG9kICkgKTtcXG5cXHR9XFxuXFx0dmVjNCB0ZXh0dXJlQmljdWJpYyggc2FtcGxlcjJEIHNhbXBsZXIsIHZlYzIgdXYsIGZsb2F0IGxvZCApIHtcXG5cXHRcXHR2ZWMyIGZMb2RTaXplID0gdmVjMiggdGV4dHVyZVNpemUoIHNhbXBsZXIsIGludCggbG9kICkgKSApO1xcblxcdFxcdHZlYzIgY0xvZFNpemUgPSB2ZWMyKCB0ZXh0dXJlU2l6ZSggc2FtcGxlciwgaW50KCBsb2QgKyAxLjAgKSApICk7XFxuXFx0XFx0dmVjMiBmTG9kU2l6ZUludiA9IDEuMCAvIGZMb2RTaXplO1xcblxcdFxcdHZlYzIgY0xvZFNpemVJbnYgPSAxLjAgLyBjTG9kU2l6ZTtcXG5cXHRcXHR2ZWM0IGZTYW1wbGUgPSBiaWN1YmljKCBzYW1wbGVyLCB1diwgdmVjNCggZkxvZFNpemVJbnYsIGZMb2RTaXplICksIGZsb29yKCBsb2QgKSApO1xcblxcdFxcdHZlYzQgY1NhbXBsZSA9IGJpY3ViaWMoIHNhbXBsZXIsIHV2LCB2ZWM0KCBjTG9kU2l6ZUludiwgY0xvZFNpemUgKSwgY2VpbCggbG9kICkgKTtcXG5cXHRcXHRyZXR1cm4gbWl4KCBmU2FtcGxlLCBjU2FtcGxlLCBmcmFjdCggbG9kICkgKTtcXG5cXHR9XFxuXFx0dmVjMyBnZXRWb2x1bWVUcmFuc21pc3Npb25SYXkoIGNvbnN0IGluIHZlYzMgbiwgY29uc3QgaW4gdmVjMyB2LCBjb25zdCBpbiBmbG9hdCB0aGlja25lc3MsIGNvbnN0IGluIGZsb2F0IGlvciwgY29uc3QgaW4gbWF0NCBtb2RlbE1hdHJpeCApIHtcXG5cXHRcXHR2ZWMzIHJlZnJhY3Rpb25WZWN0b3IgPSByZWZyYWN0KCAtIHYsIG5vcm1hbGl6ZSggbiApLCAxLjAgLyBpb3IgKTtcXG5cXHRcXHR2ZWMzIG1vZGVsU2NhbGU7XFxuXFx0XFx0bW9kZWxTY2FsZS54ID0gbGVuZ3RoKCB2ZWMzKCBtb2RlbE1hdHJpeFsgMCBdLnh5eiApICk7XFxuXFx0XFx0bW9kZWxTY2FsZS55ID0gbGVuZ3RoKCB2ZWMzKCBtb2RlbE1hdHJpeFsgMSBdLnh5eiApICk7XFxuXFx0XFx0bW9kZWxTY2FsZS56ID0gbGVuZ3RoKCB2ZWMzKCBtb2RlbE1hdHJpeFsgMiBdLnh5eiApICk7XFxuXFx0XFx0cmV0dXJuIG5vcm1hbGl6ZSggcmVmcmFjdGlvblZlY3RvciApICogdGhpY2tuZXNzICogbW9kZWxTY2FsZTtcXG5cXHR9XFxuXFx0ZmxvYXQgYXBwbHlJb3JUb1JvdWdobmVzcyggY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBjb25zdCBpbiBmbG9hdCBpb3IgKSB7XFxuXFx0XFx0cmV0dXJuIHJvdWdobmVzcyAqIGNsYW1wKCBpb3IgKiAyLjAgLSAyLjAsIDAuMCwgMS4wICk7XFxuXFx0fVxcblxcdHZlYzQgZ2V0VHJhbnNtaXNzaW9uU2FtcGxlKCBjb25zdCBpbiB2ZWMyIGZyYWdDb29yZCwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBjb25zdCBpbiBmbG9hdCBpb3IgKSB7XFxuXFx0XFx0ZmxvYXQgbG9kID0gbG9nMiggdHJhbnNtaXNzaW9uU2FtcGxlclNpemUueCApICogYXBwbHlJb3JUb1JvdWdobmVzcyggcm91Z2huZXNzLCBpb3IgKTtcXG5cXHRcXHRyZXR1cm4gdGV4dHVyZUJpY3ViaWMoIHRyYW5zbWlzc2lvblNhbXBsZXJNYXAsIGZyYWdDb29yZC54eSwgbG9kICk7XFxuXFx0fVxcblxcdHZlYzMgdm9sdW1lQXR0ZW51YXRpb24oIGNvbnN0IGluIGZsb2F0IHRyYW5zbWlzc2lvbkRpc3RhbmNlLCBjb25zdCBpbiB2ZWMzIGF0dGVudWF0aW9uQ29sb3IsIGNvbnN0IGluIGZsb2F0IGF0dGVudWF0aW9uRGlzdGFuY2UgKSB7XFxuXFx0XFx0aWYgKCBpc2luZiggYXR0ZW51YXRpb25EaXN0YW5jZSApICkge1xcblxcdFxcdFxcdHJldHVybiB2ZWMzKCAxLjAgKTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdHZlYzMgYXR0ZW51YXRpb25Db2VmZmljaWVudCA9IC1sb2coIGF0dGVudWF0aW9uQ29sb3IgKSAvIGF0dGVudWF0aW9uRGlzdGFuY2U7XFxuXFx0XFx0XFx0dmVjMyB0cmFuc21pdHRhbmNlID0gZXhwKCAtIGF0dGVudWF0aW9uQ29lZmZpY2llbnQgKiB0cmFuc21pc3Npb25EaXN0YW5jZSApO1xcdFxcdFxcdHJldHVybiB0cmFuc21pdHRhbmNlO1xcblxcdFxcdH1cXG5cXHR9XFxuXFx0dmVjNCBnZXRJQkxWb2x1bWVSZWZyYWN0aW9uKCBjb25zdCBpbiB2ZWMzIG4sIGNvbnN0IGluIHZlYzMgdiwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBjb25zdCBpbiB2ZWMzIGRpZmZ1c2VDb2xvcixcXG5cXHRcXHRjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHNwZWN1bGFyRjkwLCBjb25zdCBpbiB2ZWMzIHBvc2l0aW9uLCBjb25zdCBpbiBtYXQ0IG1vZGVsTWF0cml4LFxcblxcdFxcdGNvbnN0IGluIG1hdDQgdmlld01hdHJpeCwgY29uc3QgaW4gbWF0NCBwcm9qTWF0cml4LCBjb25zdCBpbiBmbG9hdCBkaXNwZXJzaW9uLCBjb25zdCBpbiBmbG9hdCBpb3IsIGNvbnN0IGluIGZsb2F0IHRoaWNrbmVzcyxcXG5cXHRcXHRjb25zdCBpbiB2ZWMzIGF0dGVudWF0aW9uQ29sb3IsIGNvbnN0IGluIGZsb2F0IGF0dGVudWF0aW9uRGlzdGFuY2UgKSB7XFxuXFx0XFx0dmVjNCB0cmFuc21pdHRlZExpZ2h0O1xcblxcdFxcdHZlYzMgdHJhbnNtaXR0YW5jZTtcXG5cXHRcXHQjaWZkZWYgVVNFX0RJU1BFUlNJT05cXG5cXHRcXHRcXHRmbG9hdCBoYWxmU3ByZWFkID0gKCBpb3IgLSAxLjAgKSAqIDAuMDI1ICogZGlzcGVyc2lvbjtcXG5cXHRcXHRcXHR2ZWMzIGlvcnMgPSB2ZWMzKCBpb3IgLSBoYWxmU3ByZWFkLCBpb3IsIGlvciArIGhhbGZTcHJlYWQgKTtcXG5cXHRcXHRcXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCAzOyBpICsrICkge1xcblxcdFxcdFxcdFxcdHZlYzMgdHJhbnNtaXNzaW9uUmF5ID0gZ2V0Vm9sdW1lVHJhbnNtaXNzaW9uUmF5KCBuLCB2LCB0aGlja25lc3MsIGlvcnNbIGkgXSwgbW9kZWxNYXRyaXggKTtcXG5cXHRcXHRcXHRcXHR2ZWMzIHJlZnJhY3RlZFJheUV4aXQgPSBwb3NpdGlvbiArIHRyYW5zbWlzc2lvblJheTtcXG5cXHRcXHRcXHRcXHR2ZWM0IG5kY1BvcyA9IHByb2pNYXRyaXggKiB2aWV3TWF0cml4ICogdmVjNCggcmVmcmFjdGVkUmF5RXhpdCwgMS4wICk7XFxuXFx0XFx0XFx0XFx0dmVjMiByZWZyYWN0aW9uQ29vcmRzID0gbmRjUG9zLnh5IC8gbmRjUG9zLnc7XFxuXFx0XFx0XFx0XFx0cmVmcmFjdGlvbkNvb3JkcyArPSAxLjA7XFxuXFx0XFx0XFx0XFx0cmVmcmFjdGlvbkNvb3JkcyAvPSAyLjA7XFxuXFx0XFx0XFx0XFx0dmVjNCB0cmFuc21pc3Npb25TYW1wbGUgPSBnZXRUcmFuc21pc3Npb25TYW1wbGUoIHJlZnJhY3Rpb25Db29yZHMsIHJvdWdobmVzcywgaW9yc1sgaSBdICk7XFxuXFx0XFx0XFx0XFx0dHJhbnNtaXR0ZWRMaWdodFsgaSBdID0gdHJhbnNtaXNzaW9uU2FtcGxlWyBpIF07XFxuXFx0XFx0XFx0XFx0dHJhbnNtaXR0ZWRMaWdodC5hICs9IHRyYW5zbWlzc2lvblNhbXBsZS5hO1xcblxcdFxcdFxcdFxcdHRyYW5zbWl0dGFuY2VbIGkgXSA9IGRpZmZ1c2VDb2xvclsgaSBdICogdm9sdW1lQXR0ZW51YXRpb24oIGxlbmd0aCggdHJhbnNtaXNzaW9uUmF5ICksIGF0dGVudWF0aW9uQ29sb3IsIGF0dGVudWF0aW9uRGlzdGFuY2UgKVsgaSBdO1xcblxcdFxcdFxcdH1cXG5cXHRcXHRcXHR0cmFuc21pdHRlZExpZ2h0LmEgLz0gMy4wO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0dmVjMyB0cmFuc21pc3Npb25SYXkgPSBnZXRWb2x1bWVUcmFuc21pc3Npb25SYXkoIG4sIHYsIHRoaWNrbmVzcywgaW9yLCBtb2RlbE1hdHJpeCApO1xcblxcdFxcdFxcdHZlYzMgcmVmcmFjdGVkUmF5RXhpdCA9IHBvc2l0aW9uICsgdHJhbnNtaXNzaW9uUmF5O1xcblxcdFxcdFxcdHZlYzQgbmRjUG9zID0gcHJvak1hdHJpeCAqIHZpZXdNYXRyaXggKiB2ZWM0KCByZWZyYWN0ZWRSYXlFeGl0LCAxLjAgKTtcXG5cXHRcXHRcXHR2ZWMyIHJlZnJhY3Rpb25Db29yZHMgPSBuZGNQb3MueHkgLyBuZGNQb3MudztcXG5cXHRcXHRcXHRyZWZyYWN0aW9uQ29vcmRzICs9IDEuMDtcXG5cXHRcXHRcXHRyZWZyYWN0aW9uQ29vcmRzIC89IDIuMDtcXG5cXHRcXHRcXHR0cmFuc21pdHRlZExpZ2h0ID0gZ2V0VHJhbnNtaXNzaW9uU2FtcGxlKCByZWZyYWN0aW9uQ29vcmRzLCByb3VnaG5lc3MsIGlvciApO1xcblxcdFxcdFxcdHRyYW5zbWl0dGFuY2UgPSBkaWZmdXNlQ29sb3IgKiB2b2x1bWVBdHRlbnVhdGlvbiggbGVuZ3RoKCB0cmFuc21pc3Npb25SYXkgKSwgYXR0ZW51YXRpb25Db2xvciwgYXR0ZW51YXRpb25EaXN0YW5jZSApO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdHZlYzMgYXR0ZW51YXRlZENvbG9yID0gdHJhbnNtaXR0YW5jZSAqIHRyYW5zbWl0dGVkTGlnaHQucmdiO1xcblxcdFxcdHZlYzMgRiA9IEVudmlyb25tZW50QlJERiggbiwgdiwgc3BlY3VsYXJDb2xvciwgc3BlY3VsYXJGOTAsIHJvdWdobmVzcyApO1xcblxcdFxcdGZsb2F0IHRyYW5zbWl0dGFuY2VGYWN0b3IgPSAoIHRyYW5zbWl0dGFuY2UuciArIHRyYW5zbWl0dGFuY2UuZyArIHRyYW5zbWl0dGFuY2UuYiApIC8gMy4wO1xcblxcdFxcdHJldHVybiB2ZWM0KCAoIDEuMCAtIEYgKSAqIGF0dGVudWF0ZWRDb2xvciwgMS4wIC0gKCAxLjAgLSB0cmFuc21pdHRlZExpZ2h0LmEgKSAqIHRyYW5zbWl0dGFuY2VGYWN0b3IgKTtcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciB1dl9wYXJzX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggVVNFX1VWICkgfHwgZGVmaW5lZCggVVNFX0FOSVNPVFJPUFkgKVxcblxcdHZhcnlpbmcgdmVjMiB2VXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9NQVBcXG5cXHR2YXJ5aW5nIHZlYzIgdk1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQUxQSEFNQVBcXG5cXHR2YXJ5aW5nIHZlYzIgdkFscGhhTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9MSUdIVE1BUFxcblxcdHZhcnlpbmcgdmVjMiB2TGlnaHRNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0FPTUFQXFxuXFx0dmFyeWluZyB2ZWMyIHZBb01hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQlVNUE1BUFxcblxcdHZhcnlpbmcgdmVjMiB2QnVtcE1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfTk9STUFMTUFQXFxuXFx0dmFyeWluZyB2ZWMyIHZOb3JtYWxNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0VNSVNTSVZFTUFQXFxuXFx0dmFyeWluZyB2ZWMyIHZFbWlzc2l2ZU1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfTUVUQUxORVNTTUFQXFxuXFx0dmFyeWluZyB2ZWMyIHZNZXRhbG5lc3NNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1JPVUdITkVTU01BUFxcblxcdHZhcnlpbmcgdmVjMiB2Um91Z2huZXNzTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9BTklTT1RST1BZTUFQXFxuXFx0dmFyeWluZyB2ZWMyIHZBbmlzb3Ryb3B5TWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9DTEVBUkNPQVRNQVBcXG5cXHR2YXJ5aW5nIHZlYzIgdkNsZWFyY29hdE1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUFxcblxcdHZhcnlpbmcgdmVjMiB2Q2xlYXJjb2F0Tm9ybWFsTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9DTEVBUkNPQVRfUk9VR0hORVNTTUFQXFxuXFx0dmFyeWluZyB2ZWMyIHZDbGVhcmNvYXRSb3VnaG5lc3NNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0lSSURFU0NFTkNFTUFQXFxuXFx0dmFyeWluZyB2ZWMyIHZJcmlkZXNjZW5jZU1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VfVEhJQ0tORVNTTUFQXFxuXFx0dmFyeWluZyB2ZWMyIHZJcmlkZXNjZW5jZVRoaWNrbmVzc01hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfU0hFRU5fQ09MT1JNQVBcXG5cXHR2YXJ5aW5nIHZlYzIgdlNoZWVuQ29sb3JNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1NIRUVOX1JPVUdITkVTU01BUFxcblxcdHZhcnlpbmcgdmVjMiB2U2hlZW5Sb3VnaG5lc3NNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1NQRUNVTEFSTUFQXFxuXFx0dmFyeWluZyB2ZWMyIHZTcGVjdWxhck1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfU1BFQ1VMQVJfQ09MT1JNQVBcXG5cXHR2YXJ5aW5nIHZlYzIgdlNwZWN1bGFyQ29sb3JNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1NQRUNVTEFSX0lOVEVOU0lUWU1BUFxcblxcdHZhcnlpbmcgdmVjMiB2U3BlY3VsYXJJbnRlbnNpdHlNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1RSQU5TTUlTU0lPTk1BUFxcblxcdHVuaWZvcm0gbWF0MyB0cmFuc21pc3Npb25NYXBUcmFuc2Zvcm07XFxuXFx0dmFyeWluZyB2ZWMyIHZUcmFuc21pc3Npb25NYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1RISUNLTkVTU01BUFxcblxcdHVuaWZvcm0gbWF0MyB0aGlja25lc3NNYXBUcmFuc2Zvcm07XFxuXFx0dmFyeWluZyB2ZWMyIHZUaGlja25lc3NNYXBVdjtcXG4jZW5kaWZcIjtcblxudmFyIHV2X3BhcnNfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX1VWICkgfHwgZGVmaW5lZCggVVNFX0FOSVNPVFJPUFkgKVxcblxcdHZhcnlpbmcgdmVjMiB2VXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9NQVBcXG5cXHR1bmlmb3JtIG1hdDMgbWFwVHJhbnNmb3JtO1xcblxcdHZhcnlpbmcgdmVjMiB2TWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9BTFBIQU1BUFxcblxcdHVuaWZvcm0gbWF0MyBhbHBoYU1hcFRyYW5zZm9ybTtcXG5cXHR2YXJ5aW5nIHZlYzIgdkFscGhhTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9MSUdIVE1BUFxcblxcdHVuaWZvcm0gbWF0MyBsaWdodE1hcFRyYW5zZm9ybTtcXG5cXHR2YXJ5aW5nIHZlYzIgdkxpZ2h0TWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9BT01BUFxcblxcdHVuaWZvcm0gbWF0MyBhb01hcFRyYW5zZm9ybTtcXG5cXHR2YXJ5aW5nIHZlYzIgdkFvTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9CVU1QTUFQXFxuXFx0dW5pZm9ybSBtYXQzIGJ1bXBNYXBUcmFuc2Zvcm07XFxuXFx0dmFyeWluZyB2ZWMyIHZCdW1wTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9OT1JNQUxNQVBcXG5cXHR1bmlmb3JtIG1hdDMgbm9ybWFsTWFwVHJhbnNmb3JtO1xcblxcdHZhcnlpbmcgdmVjMiB2Tm9ybWFsTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9ESVNQTEFDRU1FTlRNQVBcXG5cXHR1bmlmb3JtIG1hdDMgZGlzcGxhY2VtZW50TWFwVHJhbnNmb3JtO1xcblxcdHZhcnlpbmcgdmVjMiB2RGlzcGxhY2VtZW50TWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9FTUlTU0lWRU1BUFxcblxcdHVuaWZvcm0gbWF0MyBlbWlzc2l2ZU1hcFRyYW5zZm9ybTtcXG5cXHR2YXJ5aW5nIHZlYzIgdkVtaXNzaXZlTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9NRVRBTE5FU1NNQVBcXG5cXHR1bmlmb3JtIG1hdDMgbWV0YWxuZXNzTWFwVHJhbnNmb3JtO1xcblxcdHZhcnlpbmcgdmVjMiB2TWV0YWxuZXNzTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9ST1VHSE5FU1NNQVBcXG5cXHR1bmlmb3JtIG1hdDMgcm91Z2huZXNzTWFwVHJhbnNmb3JtO1xcblxcdHZhcnlpbmcgdmVjMiB2Um91Z2huZXNzTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9BTklTT1RST1BZTUFQXFxuXFx0dW5pZm9ybSBtYXQzIGFuaXNvdHJvcHlNYXBUcmFuc2Zvcm07XFxuXFx0dmFyeWluZyB2ZWMyIHZBbmlzb3Ryb3B5TWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9DTEVBUkNPQVRNQVBcXG5cXHR1bmlmb3JtIG1hdDMgY2xlYXJjb2F0TWFwVHJhbnNmb3JtO1xcblxcdHZhcnlpbmcgdmVjMiB2Q2xlYXJjb2F0TWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQXFxuXFx0dW5pZm9ybSBtYXQzIGNsZWFyY29hdE5vcm1hbE1hcFRyYW5zZm9ybTtcXG5cXHR2YXJ5aW5nIHZlYzIgdkNsZWFyY29hdE5vcm1hbE1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUX1JPVUdITkVTU01BUFxcblxcdHVuaWZvcm0gbWF0MyBjbGVhcmNvYXRSb3VnaG5lc3NNYXBUcmFuc2Zvcm07XFxuXFx0dmFyeWluZyB2ZWMyIHZDbGVhcmNvYXRSb3VnaG5lc3NNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1NIRUVOX0NPTE9STUFQXFxuXFx0dW5pZm9ybSBtYXQzIHNoZWVuQ29sb3JNYXBUcmFuc2Zvcm07XFxuXFx0dmFyeWluZyB2ZWMyIHZTaGVlbkNvbG9yTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TSEVFTl9ST1VHSE5FU1NNQVBcXG5cXHR1bmlmb3JtIG1hdDMgc2hlZW5Sb3VnaG5lc3NNYXBUcmFuc2Zvcm07XFxuXFx0dmFyeWluZyB2ZWMyIHZTaGVlblJvdWdobmVzc01hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VNQVBcXG5cXHR1bmlmb3JtIG1hdDMgaXJpZGVzY2VuY2VNYXBUcmFuc2Zvcm07XFxuXFx0dmFyeWluZyB2ZWMyIHZJcmlkZXNjZW5jZU1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VfVEhJQ0tORVNTTUFQXFxuXFx0dW5pZm9ybSBtYXQzIGlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwVHJhbnNmb3JtO1xcblxcdHZhcnlpbmcgdmVjMiB2SXJpZGVzY2VuY2VUaGlja25lc3NNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1NQRUNVTEFSTUFQXFxuXFx0dW5pZm9ybSBtYXQzIHNwZWN1bGFyTWFwVHJhbnNmb3JtO1xcblxcdHZhcnlpbmcgdmVjMiB2U3BlY3VsYXJNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1NQRUNVTEFSX0NPTE9STUFQXFxuXFx0dW5pZm9ybSBtYXQzIHNwZWN1bGFyQ29sb3JNYXBUcmFuc2Zvcm07XFxuXFx0dmFyeWluZyB2ZWMyIHZTcGVjdWxhckNvbG9yTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TUEVDVUxBUl9JTlRFTlNJVFlNQVBcXG5cXHR1bmlmb3JtIG1hdDMgc3BlY3VsYXJJbnRlbnNpdHlNYXBUcmFuc2Zvcm07XFxuXFx0dmFyeWluZyB2ZWMyIHZTcGVjdWxhckludGVuc2l0eU1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfVFJBTlNNSVNTSU9OTUFQXFxuXFx0dW5pZm9ybSBtYXQzIHRyYW5zbWlzc2lvbk1hcFRyYW5zZm9ybTtcXG5cXHR2YXJ5aW5nIHZlYzIgdlRyYW5zbWlzc2lvbk1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfVEhJQ0tORVNTTUFQXFxuXFx0dW5pZm9ybSBtYXQzIHRoaWNrbmVzc01hcFRyYW5zZm9ybTtcXG5cXHR2YXJ5aW5nIHZlYzIgdlRoaWNrbmVzc01hcFV2O1xcbiNlbmRpZlwiO1xuXG52YXIgdXZfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX1VWICkgfHwgZGVmaW5lZCggVVNFX0FOSVNPVFJPUFkgKVxcblxcdHZVdiA9IHZlYzMoIHV2LCAxICkueHk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9NQVBcXG5cXHR2TWFwVXYgPSAoIG1hcFRyYW5zZm9ybSAqIHZlYzMoIE1BUF9VViwgMSApICkueHk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9BTFBIQU1BUFxcblxcdHZBbHBoYU1hcFV2ID0gKCBhbHBoYU1hcFRyYW5zZm9ybSAqIHZlYzMoIEFMUEhBTUFQX1VWLCAxICkgKS54eTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0xJR0hUTUFQXFxuXFx0dkxpZ2h0TWFwVXYgPSAoIGxpZ2h0TWFwVHJhbnNmb3JtICogdmVjMyggTElHSFRNQVBfVVYsIDEgKSApLnh5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQU9NQVBcXG5cXHR2QW9NYXBVdiA9ICggYW9NYXBUcmFuc2Zvcm0gKiB2ZWMzKCBBT01BUF9VViwgMSApICkueHk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9CVU1QTUFQXFxuXFx0dkJ1bXBNYXBVdiA9ICggYnVtcE1hcFRyYW5zZm9ybSAqIHZlYzMoIEJVTVBNQVBfVVYsIDEgKSApLnh5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfTk9STUFMTUFQXFxuXFx0dk5vcm1hbE1hcFV2ID0gKCBub3JtYWxNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBOT1JNQUxNQVBfVVYsIDEgKSApLnh5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0dkRpc3BsYWNlbWVudE1hcFV2ID0gKCBkaXNwbGFjZW1lbnRNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBESVNQTEFDRU1FTlRNQVBfVVYsIDEgKSApLnh5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfRU1JU1NJVkVNQVBcXG5cXHR2RW1pc3NpdmVNYXBVdiA9ICggZW1pc3NpdmVNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBFTUlTU0lWRU1BUF9VViwgMSApICkueHk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9NRVRBTE5FU1NNQVBcXG5cXHR2TWV0YWxuZXNzTWFwVXYgPSAoIG1ldGFsbmVzc01hcFRyYW5zZm9ybSAqIHZlYzMoIE1FVEFMTkVTU01BUF9VViwgMSApICkueHk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9ST1VHSE5FU1NNQVBcXG5cXHR2Um91Z2huZXNzTWFwVXYgPSAoIHJvdWdobmVzc01hcFRyYW5zZm9ybSAqIHZlYzMoIFJPVUdITkVTU01BUF9VViwgMSApICkueHk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9BTklTT1RST1BZTUFQXFxuXFx0dkFuaXNvdHJvcHlNYXBVdiA9ICggYW5pc290cm9weU1hcFRyYW5zZm9ybSAqIHZlYzMoIEFOSVNPVFJPUFlNQVBfVVYsIDEgKSApLnh5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUTUFQXFxuXFx0dkNsZWFyY29hdE1hcFV2ID0gKCBjbGVhcmNvYXRNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBDTEVBUkNPQVRNQVBfVVYsIDEgKSApLnh5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUFxcblxcdHZDbGVhcmNvYXROb3JtYWxNYXBVdiA9ICggY2xlYXJjb2F0Tm9ybWFsTWFwVHJhbnNmb3JtICogdmVjMyggQ0xFQVJDT0FUX05PUk1BTE1BUF9VViwgMSApICkueHk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9DTEVBUkNPQVRfUk9VR0hORVNTTUFQXFxuXFx0dkNsZWFyY29hdFJvdWdobmVzc01hcFV2ID0gKCBjbGVhcmNvYXRSb3VnaG5lc3NNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBDTEVBUkNPQVRfUk9VR0hORVNTTUFQX1VWLCAxICkgKS54eTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0lSSURFU0NFTkNFTUFQXFxuXFx0dklyaWRlc2NlbmNlTWFwVXYgPSAoIGlyaWRlc2NlbmNlTWFwVHJhbnNmb3JtICogdmVjMyggSVJJREVTQ0VOQ0VNQVBfVVYsIDEgKSApLnh5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VfVEhJQ0tORVNTTUFQXFxuXFx0dklyaWRlc2NlbmNlVGhpY2tuZXNzTWFwVXYgPSAoIGlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwVHJhbnNmb3JtICogdmVjMyggSVJJREVTQ0VOQ0VfVEhJQ0tORVNTTUFQX1VWLCAxICkgKS54eTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1NIRUVOX0NPTE9STUFQXFxuXFx0dlNoZWVuQ29sb3JNYXBVdiA9ICggc2hlZW5Db2xvck1hcFRyYW5zZm9ybSAqIHZlYzMoIFNIRUVOX0NPTE9STUFQX1VWLCAxICkgKS54eTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1NIRUVOX1JPVUdITkVTU01BUFxcblxcdHZTaGVlblJvdWdobmVzc01hcFV2ID0gKCBzaGVlblJvdWdobmVzc01hcFRyYW5zZm9ybSAqIHZlYzMoIFNIRUVOX1JPVUdITkVTU01BUF9VViwgMSApICkueHk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TUEVDVUxBUk1BUFxcblxcdHZTcGVjdWxhck1hcFV2ID0gKCBzcGVjdWxhck1hcFRyYW5zZm9ybSAqIHZlYzMoIFNQRUNVTEFSTUFQX1VWLCAxICkgKS54eTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1NQRUNVTEFSX0NPTE9STUFQXFxuXFx0dlNwZWN1bGFyQ29sb3JNYXBVdiA9ICggc3BlY3VsYXJDb2xvck1hcFRyYW5zZm9ybSAqIHZlYzMoIFNQRUNVTEFSX0NPTE9STUFQX1VWLCAxICkgKS54eTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1NQRUNVTEFSX0lOVEVOU0lUWU1BUFxcblxcdHZTcGVjdWxhckludGVuc2l0eU1hcFV2ID0gKCBzcGVjdWxhckludGVuc2l0eU1hcFRyYW5zZm9ybSAqIHZlYzMoIFNQRUNVTEFSX0lOVEVOU0lUWU1BUF9VViwgMSApICkueHk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9UUkFOU01JU1NJT05NQVBcXG5cXHR2VHJhbnNtaXNzaW9uTWFwVXYgPSAoIHRyYW5zbWlzc2lvbk1hcFRyYW5zZm9ybSAqIHZlYzMoIFRSQU5TTUlTU0lPTk1BUF9VViwgMSApICkueHk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9USElDS05FU1NNQVBcXG5cXHR2VGhpY2tuZXNzTWFwVXYgPSAoIHRoaWNrbmVzc01hcFRyYW5zZm9ybSAqIHZlYzMoIFRISUNLTkVTU01BUF9VViwgMSApICkueHk7XFxuI2VuZGlmXCI7XG5cbnZhciB3b3JsZHBvc192ZXJ0ZXggPSBcIiNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgfHwgZGVmaW5lZCggRElTVEFOQ0UgKSB8fCBkZWZpbmVkICggVVNFX1NIQURPV01BUCApIHx8IGRlZmluZWQgKCBVU0VfVFJBTlNNSVNTSU9OICkgfHwgTlVNX1NQT1RfTElHSFRfQ09PUkRTID4gMFxcblxcdHZlYzQgd29ybGRQb3NpdGlvbiA9IHZlYzQoIHRyYW5zZm9ybWVkLCAxLjAgKTtcXG5cXHQjaWZkZWYgVVNFX0JBVENISU5HXFxuXFx0XFx0d29ybGRQb3NpdGlvbiA9IGJhdGNoaW5nTWF0cml4ICogd29ybGRQb3NpdGlvbjtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX0lOU1RBTkNJTkdcXG5cXHRcXHR3b3JsZFBvc2l0aW9uID0gaW5zdGFuY2VNYXRyaXggKiB3b3JsZFBvc2l0aW9uO1xcblxcdCNlbmRpZlxcblxcdHdvcmxkUG9zaXRpb24gPSBtb2RlbE1hdHJpeCAqIHdvcmxkUG9zaXRpb247XFxuI2VuZGlmXCI7XG5cbmNvbnN0IHZlcnRleCRoID0gXCJ2YXJ5aW5nIHZlYzIgdlV2O1xcbnVuaWZvcm0gbWF0MyB1dlRyYW5zZm9ybTtcXG52b2lkIG1haW4oKSB7XFxuXFx0dlV2ID0gKCB1dlRyYW5zZm9ybSAqIHZlYzMoIHV2LCAxICkgKS54eTtcXG5cXHRnbF9Qb3NpdGlvbiA9IHZlYzQoIHBvc2l0aW9uLnh5LCAxLjAsIDEuMCApO1xcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkaCA9IFwidW5pZm9ybSBzYW1wbGVyMkQgdDJEO1xcbnVuaWZvcm0gZmxvYXQgYmFja2dyb3VuZEludGVuc2l0eTtcXG52YXJ5aW5nIHZlYzIgdlV2O1xcbnZvaWQgbWFpbigpIHtcXG5cXHR2ZWM0IHRleENvbG9yID0gdGV4dHVyZTJEKCB0MkQsIHZVdiApO1xcblxcdCNpZmRlZiBERUNPREVfVklERU9fVEVYVFVSRVxcblxcdFxcdHRleENvbG9yID0gdmVjNCggbWl4KCBwb3coIHRleENvbG9yLnJnYiAqIDAuOTQ3ODY3Mjk4NiArIHZlYzMoIDAuMDUyMTMyNzAxNCApLCB2ZWMzKCAyLjQgKSApLCB0ZXhDb2xvci5yZ2IgKiAwLjA3NzM5OTM4MDgsIHZlYzMoIGxlc3NUaGFuRXF1YWwoIHRleENvbG9yLnJnYiwgdmVjMyggMC4wNDA0NSApICkgKSApLCB0ZXhDb2xvci53ICk7XFxuXFx0I2VuZGlmXFxuXFx0dGV4Q29sb3IucmdiICo9IGJhY2tncm91bmRJbnRlbnNpdHk7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdGV4Q29sb3I7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50Plxcbn1cIjtcblxuY29uc3QgdmVydGV4JGcgPSBcInZhcnlpbmcgdmVjMyB2V29ybGREaXJlY3Rpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG52b2lkIG1haW4oKSB7XFxuXFx0dldvcmxkRGlyZWN0aW9uID0gdHJhbnNmb3JtRGlyZWN0aW9uKCBwb3NpdGlvbiwgbW9kZWxNYXRyaXggKTtcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHRnbF9Qb3NpdGlvbi56ID0gZ2xfUG9zaXRpb24udztcXG59XCI7XG5cbmNvbnN0IGZyYWdtZW50JGcgPSBcIiNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXFxuXFx0dW5pZm9ybSBzYW1wbGVyQ3ViZSBlbnZNYXA7XFxuI2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfQ1VCRV9VViApXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgZW52TWFwO1xcbiNlbmRpZlxcbnVuaWZvcm0gZmxvYXQgZmxpcEVudk1hcDtcXG51bmlmb3JtIGZsb2F0IGJhY2tncm91bmRCbHVycmluZXNzO1xcbnVuaWZvcm0gZmxvYXQgYmFja2dyb3VuZEludGVuc2l0eTtcXG51bmlmb3JtIG1hdDMgYmFja2dyb3VuZFJvdGF0aW9uO1xcbnZhcnlpbmcgdmVjMyB2V29ybGREaXJlY3Rpb247XFxuI2luY2x1ZGUgPGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVcXG5cXHRcXHR2ZWM0IHRleENvbG9yID0gdGV4dHVyZUN1YmUoIGVudk1hcCwgYmFja2dyb3VuZFJvdGF0aW9uICogdmVjMyggZmxpcEVudk1hcCAqIHZXb3JsZERpcmVjdGlvbi54LCB2V29ybGREaXJlY3Rpb24ueXogKSApO1xcblxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0NVQkVfVVYgKVxcblxcdFxcdHZlYzQgdGV4Q29sb3IgPSB0ZXh0dXJlQ3ViZVVWKCBlbnZNYXAsIGJhY2tncm91bmRSb3RhdGlvbiAqIHZXb3JsZERpcmVjdGlvbiwgYmFja2dyb3VuZEJsdXJyaW5lc3MgKTtcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzQgdGV4Q29sb3IgPSB2ZWM0KCAwLjAsIDAuMCwgMC4wLCAxLjAgKTtcXG5cXHQjZW5kaWZcXG5cXHR0ZXhDb2xvci5yZ2IgKj0gYmFja2dyb3VuZEludGVuc2l0eTtcXG5cXHRnbF9GcmFnQ29sb3IgPSB0ZXhDb2xvcjtcXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yc3BhY2VfZnJhZ21lbnQ+XFxufVwiO1xuXG5jb25zdCB2ZXJ0ZXgkZiA9IFwidmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbnZvaWQgbWFpbigpIHtcXG5cXHR2V29ybGREaXJlY3Rpb24gPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIHBvc2l0aW9uLCBtb2RlbE1hdHJpeCApO1xcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdGdsX1Bvc2l0aW9uLnogPSBnbF9Qb3NpdGlvbi53O1xcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkZiA9IFwidW5pZm9ybSBzYW1wbGVyQ3ViZSB0Q3ViZTtcXG51bmlmb3JtIGZsb2F0IHRGbGlwO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG52YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xcbnZvaWQgbWFpbigpIHtcXG5cXHR2ZWM0IHRleENvbG9yID0gdGV4dHVyZUN1YmUoIHRDdWJlLCB2ZWMzKCB0RmxpcCAqIHZXb3JsZERpcmVjdGlvbi54LCB2V29ybGREaXJlY3Rpb24ueXogKSApO1xcblxcdGdsX0ZyYWdDb2xvciA9IHRleENvbG9yO1xcblxcdGdsX0ZyYWdDb2xvci5hICo9IG9wYWNpdHk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50Plxcbn1cIjtcblxuY29uc3QgdmVydGV4JGUgPSBcIiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGJhdGNoaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudmFyeWluZyB2ZWMyIHZIaWdoUHJlY2lzaW9uWlc7XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGluc3RhbmNlX3ZlcnRleD5cXG5cXHQjaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxcblxcdFxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0XFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0dkhpZ2hQcmVjaXNpb25aVyA9IGdsX1Bvc2l0aW9uLnp3O1xcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkZSA9IFwiI2lmIERFUFRIX1BBQ0tJTkcgPT0gMzIwMFxcblxcdHVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52YXJ5aW5nIHZlYzIgdkhpZ2hQcmVjaXNpb25aVztcXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCAxLjAgKTtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdCNpZiBERVBUSF9QQUNLSU5HID09IDMyMDBcXG5cXHRcXHRkaWZmdXNlQ29sb3IuYSA9IG9wYWNpdHk7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFoYXNoX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaWZkZWYgVVNFX1JFVkVSU0VEX0RFUFRIX0JVRkZFUlxcblxcdFxcdGZsb2F0IGZyYWdDb29yZFogPSB2SGlnaFByZWNpc2lvblpXWyAwIF0gLyB2SGlnaFByZWNpc2lvblpXWyAxIF07XFxuXFx0I2Vsc2VcXG5cXHRcXHRmbG9hdCBmcmFnQ29vcmRaID0gMC41ICogdkhpZ2hQcmVjaXNpb25aV1sgMCBdIC8gdkhpZ2hQcmVjaXNpb25aV1sgMSBdICsgMC41O1xcblxcdCNlbmRpZlxcblxcdCNpZiBERVBUSF9QQUNLSU5HID09IDMyMDBcXG5cXHRcXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCB2ZWMzKCAxLjAgLSBmcmFnQ29vcmRaICksIG9wYWNpdHkgKTtcXG5cXHQjZWxpZiBERVBUSF9QQUNLSU5HID09IDMyMDFcXG5cXHRcXHRnbF9GcmFnQ29sb3IgPSBwYWNrRGVwdGhUb1JHQkEoIGZyYWdDb29yZFogKTtcXG5cXHQjZWxpZiBERVBUSF9QQUNLSU5HID09IDMyMDJcXG5cXHRcXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBwYWNrRGVwdGhUb1JHQiggZnJhZ0Nvb3JkWiApLCAxLjAgKTtcXG5cXHQjZWxpZiBERVBUSF9QQUNLSU5HID09IDMyMDNcXG5cXHRcXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBwYWNrRGVwdGhUb1JHKCBmcmFnQ29vcmRaICksIDAuMCwgMS4wICk7XFxuXFx0I2VuZGlmXFxufVwiO1xuXG5jb25zdCB2ZXJ0ZXgkZCA9IFwiI2RlZmluZSBESVNUQU5DRVxcbnZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxiYXRjaGluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGluc3RhbmNlX3ZlcnRleD5cXG5cXHQjaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxcblxcdFxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0XFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0dldvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uLnh5ejtcXG59XCI7XG5cbmNvbnN0IGZyYWdtZW50JGQgPSBcIiNkZWZpbmUgRElTVEFOQ0VcXG51bmlmb3JtIHZlYzMgcmVmZXJlbmNlUG9zaXRpb247XFxudW5pZm9ybSBmbG9hdCBuZWFyRGlzdGFuY2U7XFxudW5pZm9ybSBmbG9hdCBmYXJEaXN0YW5jZTtcXG52YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYWhhc2hfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluICgpIHtcXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIDEuMCApO1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFoYXNoX2ZyYWdtZW50PlxcblxcdGZsb2F0IGRpc3QgPSBsZW5ndGgoIHZXb3JsZFBvc2l0aW9uIC0gcmVmZXJlbmNlUG9zaXRpb24gKTtcXG5cXHRkaXN0ID0gKCBkaXN0IC0gbmVhckRpc3RhbmNlICkgLyAoIGZhckRpc3RhbmNlIC0gbmVhckRpc3RhbmNlICk7XFxuXFx0ZGlzdCA9IHNhdHVyYXRlKCBkaXN0ICk7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gcGFja0RlcHRoVG9SR0JBKCBkaXN0ICk7XFxufVwiO1xuXG5jb25zdCB2ZXJ0ZXgkYyA9IFwidmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbnZvaWQgbWFpbigpIHtcXG5cXHR2V29ybGREaXJlY3Rpb24gPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIHBvc2l0aW9uLCBtb2RlbE1hdHJpeCApO1xcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4Plxcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkYyA9IFwidW5pZm9ybSBzYW1wbGVyMkQgdEVxdWlyZWN0O1xcbnZhcnlpbmcgdmVjMyB2V29ybGREaXJlY3Rpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjMyBkaXJlY3Rpb24gPSBub3JtYWxpemUoIHZXb3JsZERpcmVjdGlvbiApO1xcblxcdHZlYzIgc2FtcGxlVVYgPSBlcXVpcmVjdFV2KCBkaXJlY3Rpb24gKTtcXG5cXHRnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQoIHRFcXVpcmVjdCwgc2FtcGxlVVYgKTtcXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yc3BhY2VfZnJhZ21lbnQ+XFxufVwiO1xuXG5jb25zdCB2ZXJ0ZXgkYiA9IFwidW5pZm9ybSBmbG9hdCBzY2FsZTtcXG5hdHRyaWJ1dGUgZmxvYXQgbGluZURpc3RhbmNlO1xcbnZhcnlpbmcgZmxvYXQgdkxpbmVEaXN0YW5jZTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdHZMaW5lRGlzdGFuY2UgPSBzY2FsZSAqIGxpbmVEaXN0YW5jZTtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBoaW5zdGFuY2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCRiID0gXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudW5pZm9ybSBmbG9hdCBkYXNoU2l6ZTtcXG51bmlmb3JtIGZsb2F0IHRvdGFsU2l6ZTtcXG52YXJ5aW5nIGZsb2F0IHZMaW5lRGlzdGFuY2U7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHRpZiAoIG1vZCggdkxpbmVEaXN0YW5jZSwgdG90YWxTaXplICkgPiBkYXNoU2l6ZSApIHtcXG5cXHRcXHRkaXNjYXJkO1xcblxcdH1cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB2ZWMzKCAwLjAgKTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0b3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxuXFx0I2luY2x1ZGUgPG9wYXF1ZV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yc3BhY2VfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCRhID0gXCIjaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxiYXRjaGluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBoaW5zdGFuY2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmF0Y2hpbmdfdmVydGV4PlxcblxcdCNpZiBkZWZpbmVkICggVVNFX0VOVk1BUCApIHx8IGRlZmluZWQgKCBVU0VfU0tJTk5JTkcgKVxcblxcdFxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0XFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdFxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XG5cbmNvbnN0IGZyYWdtZW50JGEgPSBcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFoYXNoX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhaGFzaF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHQjaWZkZWYgVVNFX0xJR0hUTUFQXFxuXFx0XFx0dmVjNCBsaWdodE1hcFRleGVsID0gdGV4dHVyZTJEKCBsaWdodE1hcCwgdkxpZ2h0TWFwVXYgKTtcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gbGlnaHRNYXBUZXhlbC5yZ2IgKiBsaWdodE1hcEludGVuc2l0eSAqIFJFQ0lQUk9DQUxfUEk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gdmVjMyggMS4wICk7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSAqPSBkaWZmdXNlQ29sb3IucmdiO1xcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZTtcXG5cXHQjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxvcGFxdWVfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCQ5ID0gXCIjZGVmaW5lIExBTUJFUlRcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxiYXRjaGluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxub3JtYWxfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBoaW5zdGFuY2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmF0Y2hpbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XG5cbmNvbnN0IGZyYWdtZW50JDkgPSBcIiNkZWZpbmUgTEFNQkVSVFxcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFoYXNoX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XFxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodHNfbGFtYmVydF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxub3JtYWxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFoYXNoX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxzcGVjdWxhcm1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXHQjaW5jbHVkZSA8ZW1pc3NpdmVtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19sYW1iZXJ0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfZW5kPlxcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdCNpbmNsdWRlIDxlbnZtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG9wYXF1ZV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yc3BhY2VfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cIjtcblxuY29uc3QgdmVydGV4JDggPSBcIiNkZWZpbmUgTUFUQ0FQXFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8YmF0Y2hpbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBoaW5zdGFuY2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmF0Y2hpbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxuXFx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCQ4ID0gXCIjZGVmaW5lIE1BVENBUFxcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG51bmlmb3JtIHNhbXBsZXIyRCBtYXRjYXA7XFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFoYXNoX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxub3JtYWxfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxub3JtYWxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYWhhc2hfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XFxuXFx0dmVjMyB2aWV3RGlyID0gbm9ybWFsaXplKCB2Vmlld1Bvc2l0aW9uICk7XFxuXFx0dmVjMyB4ID0gbm9ybWFsaXplKCB2ZWMzKCB2aWV3RGlyLnosIDAuMCwgLSB2aWV3RGlyLnggKSApO1xcblxcdHZlYzMgeSA9IGNyb3NzKCB2aWV3RGlyLCB4ICk7XFxuXFx0dmVjMiB1diA9IHZlYzIoIGRvdCggeCwgbm9ybWFsICksIGRvdCggeSwgbm9ybWFsICkgKSAqIDAuNDk1ICsgMC41O1xcblxcdCNpZmRlZiBVU0VfTUFUQ0FQXFxuXFx0XFx0dmVjNCBtYXRjYXBDb2xvciA9IHRleHR1cmUyRCggbWF0Y2FwLCB1diApO1xcblxcdCNlbHNlXFxuXFx0XFx0dmVjNCBtYXRjYXBDb2xvciA9IHZlYzQoIHZlYzMoIG1peCggMC4yLCAwLjgsIHV2LnkgKSApLCAxLjAgKTtcXG5cXHQjZW5kaWZcXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSBkaWZmdXNlQ29sb3IucmdiICogbWF0Y2FwQ29sb3IucmdiO1xcblxcdCNpbmNsdWRlIDxvcGFxdWVfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCQ3ID0gXCIjZGVmaW5lIE5PUk1BTFxcbiNpZiBkZWZpbmVkKCBGTEFUX1NIQURFRCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUF9UQU5HRU5UU1BBQ0UgKVxcblxcdHZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGJhdGNoaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxub3JtYWxfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmF0Y2hpbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBoaW5zdGFuY2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcbiNpZiBkZWZpbmVkKCBGTEFUX1NIQURFRCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUF9UQU5HRU5UU1BBQ0UgKVxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcbiNlbmRpZlxcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkNyA9IFwiI2RlZmluZSBOT1JNQUxcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2lmIGRlZmluZWQoIEZMQVRfU0hBREVEICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQX1RBTkdFTlRTUEFDRSApXFxuXFx0dmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2VuZGlmXFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCAwLjAsIDAuMCwgMC4wLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggcGFja05vcm1hbFRvUkdCKCBub3JtYWwgKSwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaWZkZWYgT1BBUVVFXFxuXFx0XFx0Z2xfRnJhZ0NvbG9yLmEgPSAxLjA7XFxuXFx0I2VuZGlmXFxufVwiO1xuXG5jb25zdCB2ZXJ0ZXgkNiA9IFwiI2RlZmluZSBQSE9OR1xcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGJhdGNoaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGluc3RhbmNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxlbnZtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkNiA9IFwiI2RlZmluZSBQSE9OR1xcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIHZlYzMgc3BlY3VsYXI7XFxudW5pZm9ybSBmbG9hdCBzaGluaW5lc3M7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxcbiNpbmNsdWRlIDxub3JtYWxfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xcblxcdHZlYzMgdG90YWxFbWlzc2l2ZVJhZGlhbmNlID0gZW1pc3NpdmU7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYWhhc2hfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHNwZWN1bGFybWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX3Bob25nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfZW5kPlxcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdCNpbmNsdWRlIDxlbnZtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG9wYXF1ZV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yc3BhY2VfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cIjtcblxuY29uc3QgdmVydGV4JDUgPSBcIiNkZWZpbmUgU1RBTkRBUkRcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaWZkZWYgVVNFX1RSQU5TTUlTU0lPTlxcblxcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxiYXRjaGluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGluc3RhbmNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxuI2lmZGVmIFVTRV9UUkFOU01JU1NJT05cXG5cXHR2V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24ueHl6O1xcbiNlbmRpZlxcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkNSA9IFwiI2RlZmluZSBTVEFOREFSRFxcbiNpZmRlZiBQSFlTSUNBTFxcblxcdCNkZWZpbmUgSU9SXFxuXFx0I2RlZmluZSBVU0VfU1BFQ1VMQVJcXG4jZW5kaWZcXG51bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIHZlYzMgZW1pc3NpdmU7XFxudW5pZm9ybSBmbG9hdCByb3VnaG5lc3M7XFxudW5pZm9ybSBmbG9hdCBtZXRhbG5lc3M7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpZmRlZiBJT1JcXG5cXHR1bmlmb3JtIGZsb2F0IGlvcjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1NQRUNVTEFSXFxuXFx0dW5pZm9ybSBmbG9hdCBzcGVjdWxhckludGVuc2l0eTtcXG5cXHR1bmlmb3JtIHZlYzMgc3BlY3VsYXJDb2xvcjtcXG5cXHQjaWZkZWYgVVNFX1NQRUNVTEFSX0NPTE9STUFQXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgc3BlY3VsYXJDb2xvck1hcDtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX1NQRUNVTEFSX0lOVEVOU0lUWU1BUFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIHNwZWN1bGFySW50ZW5zaXR5TWFwO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUXFxuXFx0dW5pZm9ybSBmbG9hdCBjbGVhcmNvYXQ7XFxuXFx0dW5pZm9ybSBmbG9hdCBjbGVhcmNvYXRSb3VnaG5lc3M7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9ESVNQRVJTSU9OXFxuXFx0dW5pZm9ybSBmbG9hdCBkaXNwZXJzaW9uO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VcXG5cXHR1bmlmb3JtIGZsb2F0IGlyaWRlc2NlbmNlO1xcblxcdHVuaWZvcm0gZmxvYXQgaXJpZGVzY2VuY2VJT1I7XFxuXFx0dW5pZm9ybSBmbG9hdCBpcmlkZXNjZW5jZVRoaWNrbmVzc01pbmltdW07XFxuXFx0dW5pZm9ybSBmbG9hdCBpcmlkZXNjZW5jZVRoaWNrbmVzc01heGltdW07XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TSEVFTlxcblxcdHVuaWZvcm0gdmVjMyBzaGVlbkNvbG9yO1xcblxcdHVuaWZvcm0gZmxvYXQgc2hlZW5Sb3VnaG5lc3M7XFxuXFx0I2lmZGVmIFVTRV9TSEVFTl9DT0xPUk1BUFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIHNoZWVuQ29sb3JNYXA7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIFVTRV9TSEVFTl9ST1VHSE5FU1NNQVBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBzaGVlblJvdWdobmVzc01hcDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0FOSVNPVFJPUFlcXG5cXHR1bmlmb3JtIHZlYzIgYW5pc290cm9weVZlY3RvcjtcXG5cXHQjaWZkZWYgVVNFX0FOSVNPVFJPUFlNQVBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBhbmlzb3Ryb3B5TWFwO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxpcmlkZXNjZW5jZV9mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9waHlzaWNhbF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XFxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dHJhbnNtaXNzaW9uX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGVhcmNvYXRfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8aXJpZGVzY2VuY2VfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8cm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xcblxcdHZlYzMgdG90YWxFbWlzc2l2ZVJhZGlhbmNlID0gZW1pc3NpdmU7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYWhhc2hfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHJvdWdobmVzc21hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWV0YWxuZXNzbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X21hcHM+XFxuXFx0I2luY2x1ZGUgPGVtaXNzaXZlbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X21hcHM+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9lbmQ+XFxuXFx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxcblxcdHZlYzMgdG90YWxEaWZmdXNlID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZTtcXG5cXHR2ZWMzIHRvdGFsU3BlY3VsYXIgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXI7XFxuXFx0I2luY2x1ZGUgPHRyYW5zbWlzc2lvbl9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB0b3RhbERpZmZ1c2UgKyB0b3RhbFNwZWN1bGFyICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdCNpZmRlZiBVU0VfU0hFRU5cXG5cXHRcXHRmbG9hdCBzaGVlbkVuZXJneUNvbXAgPSAxLjAgLSAwLjE1NyAqIG1heDMoIG1hdGVyaWFsLnNoZWVuQ29sb3IgKTtcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ID0gb3V0Z29pbmdMaWdodCAqIHNoZWVuRW5lcmd5Q29tcCArIHNoZWVuU3BlY3VsYXJEaXJlY3QgKyBzaGVlblNwZWN1bGFySW5kaXJlY3Q7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIFVTRV9DTEVBUkNPQVRcXG5cXHRcXHRmbG9hdCBkb3ROVmNjID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIGdlb21ldHJ5Vmlld0RpciApICk7XFxuXFx0XFx0dmVjMyBGY2MgPSBGX1NjaGxpY2soIG1hdGVyaWFsLmNsZWFyY29hdEYwLCBtYXRlcmlhbC5jbGVhcmNvYXRGOTAsIGRvdE5WY2MgKTtcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ID0gb3V0Z29pbmdMaWdodCAqICggMS4wIC0gbWF0ZXJpYWwuY2xlYXJjb2F0ICogRmNjICkgKyAoIGNsZWFyY29hdFNwZWN1bGFyRGlyZWN0ICsgY2xlYXJjb2F0U3BlY3VsYXJJbmRpcmVjdCApICogbWF0ZXJpYWwuY2xlYXJjb2F0O1xcblxcdCNlbmRpZlxcblxcdCNpbmNsdWRlIDxvcGFxdWVfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCQ0ID0gXCIjZGVmaW5lIFRPT05cXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxiYXRjaGluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGluc3RhbmNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCQ0ID0gXCIjZGVmaW5lIFRPT05cXG51bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIHZlYzMgZW1pc3NpdmU7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxcbiNpbmNsdWRlIDxub3JtYWxfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRzX3Rvb25fcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XFxuXFx0dmVjMyB0b3RhbEVtaXNzaXZlUmFkaWFuY2UgPSBlbWlzc2l2ZTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhaGFzaF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXHQjaW5jbHVkZSA8ZW1pc3NpdmVtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c190b29uX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfZW5kPlxcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdCNpbmNsdWRlIDxvcGFxdWVfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCQzID0gXCJ1bmlmb3JtIGZsb2F0IHNpemU7XFxudW5pZm9ybSBmbG9hdCBzY2FsZTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG4jaWZkZWYgVVNFX1BPSU5UU19VVlxcblxcdHZhcnlpbmcgdmVjMiB2VXY7XFxuXFx0dW5pZm9ybSBtYXQzIHV2VHJhbnNmb3JtO1xcbiNlbmRpZlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaWZkZWYgVVNFX1BPSU5UU19VVlxcblxcdFxcdHZVdiA9ICggdXZUcmFuc2Zvcm0gKiB2ZWMzKCB1diwgMSApICkueHk7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhpbnN0YW5jZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBoY29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0Z2xfUG9pbnRTaXplID0gc2l6ZTtcXG5cXHQjaWZkZWYgVVNFX1NJWkVBVFRFTlVBVElPTlxcblxcdFxcdGJvb2wgaXNQZXJzcGVjdGl2ZSA9IGlzUGVyc3BlY3RpdmVNYXRyaXgoIHByb2plY3Rpb25NYXRyaXggKTtcXG5cXHRcXHRpZiAoIGlzUGVyc3BlY3RpdmUgKSBnbF9Qb2ludFNpemUgKj0gKCBzY2FsZSAvIC0gbXZQb3NpdGlvbi56ICk7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkMyA9IFwidW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFoYXNoX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB2ZWMzKCAwLjAgKTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9wYXJ0aWNsZV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFoYXNoX2ZyYWdtZW50PlxcblxcdG91dGdvaW5nTGlnaHQgPSBkaWZmdXNlQ29sb3IucmdiO1xcblxcdCNpbmNsdWRlIDxvcGFxdWVfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxufVwiO1xuXG5jb25zdCB2ZXJ0ZXgkMiA9IFwiI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8YmF0Y2hpbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8YmF0Y2hpbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBoaW5zdGFuY2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCQyID0gXCJ1bmlmb3JtIHZlYzMgY29sb3I7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBjb2xvciwgb3BhY2l0eSAqICggMS4wIC0gZ2V0U2hhZG93TWFzaygpICkgKTtcXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yc3BhY2VfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCQxID0gXCJ1bmlmb3JtIGZsb2F0IHJvdGF0aW9uO1xcbnVuaWZvcm0gdmVjMiBjZW50ZXI7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHR2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXhbIDMgXTtcXG5cXHR2ZWMyIHNjYWxlID0gdmVjMiggbGVuZ3RoKCBtb2RlbE1hdHJpeFsgMCBdLnh5eiApLCBsZW5ndGgoIG1vZGVsTWF0cml4WyAxIF0ueHl6ICkgKTtcXG5cXHQjaWZuZGVmIFVTRV9TSVpFQVRURU5VQVRJT05cXG5cXHRcXHRib29sIGlzUGVyc3BlY3RpdmUgPSBpc1BlcnNwZWN0aXZlTWF0cml4KCBwcm9qZWN0aW9uTWF0cml4ICk7XFxuXFx0XFx0aWYgKCBpc1BlcnNwZWN0aXZlICkgc2NhbGUgKj0gLSBtdlBvc2l0aW9uLno7XFxuXFx0I2VuZGlmXFxuXFx0dmVjMiBhbGlnbmVkUG9zaXRpb24gPSAoIHBvc2l0aW9uLnh5IC0gKCBjZW50ZXIgLSB2ZWMyKCAwLjUgKSApICkgKiBzY2FsZTtcXG5cXHR2ZWMyIHJvdGF0ZWRQb3NpdGlvbjtcXG5cXHRyb3RhdGVkUG9zaXRpb24ueCA9IGNvcyggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi54IC0gc2luKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnk7XFxuXFx0cm90YXRlZFBvc2l0aW9uLnkgPSBzaW4oIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueCArIGNvcyggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi55O1xcblxcdG12UG9zaXRpb24ueHkgKz0gcm90YXRlZFBvc2l0aW9uO1xcblxcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XG5cbmNvbnN0IGZyYWdtZW50JDEgPSBcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdmVjMyggMC4wICk7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhaGFzaF9mcmFnbWVudD5cXG5cXHRvdXRnb2luZ0xpZ2h0ID0gZGlmZnVzZUNvbG9yLnJnYjtcXG5cXHQjaW5jbHVkZSA8b3BhcXVlX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JzcGFjZV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cIjtcblxuY29uc3QgU2hhZGVyQ2h1bmsgPSB7XG5cdGFscGhhaGFzaF9mcmFnbWVudDogYWxwaGFoYXNoX2ZyYWdtZW50LFxuXHRhbHBoYWhhc2hfcGFyc19mcmFnbWVudDogYWxwaGFoYXNoX3BhcnNfZnJhZ21lbnQsXG5cdGFscGhhbWFwX2ZyYWdtZW50OiBhbHBoYW1hcF9mcmFnbWVudCxcblx0YWxwaGFtYXBfcGFyc19mcmFnbWVudDogYWxwaGFtYXBfcGFyc19mcmFnbWVudCxcblx0YWxwaGF0ZXN0X2ZyYWdtZW50OiBhbHBoYXRlc3RfZnJhZ21lbnQsXG5cdGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50OiBhbHBoYXRlc3RfcGFyc19mcmFnbWVudCxcblx0YW9tYXBfZnJhZ21lbnQ6IGFvbWFwX2ZyYWdtZW50LFxuXHRhb21hcF9wYXJzX2ZyYWdtZW50OiBhb21hcF9wYXJzX2ZyYWdtZW50LFxuXHRiYXRjaGluZ19wYXJzX3ZlcnRleDogYmF0Y2hpbmdfcGFyc192ZXJ0ZXgsXG5cdGJhdGNoaW5nX3ZlcnRleDogYmF0Y2hpbmdfdmVydGV4LFxuXHRiZWdpbl92ZXJ0ZXg6IGJlZ2luX3ZlcnRleCxcblx0YmVnaW5ub3JtYWxfdmVydGV4OiBiZWdpbm5vcm1hbF92ZXJ0ZXgsXG5cdGJzZGZzOiBic2Rmcyxcblx0aXJpZGVzY2VuY2VfZnJhZ21lbnQ6IGlyaWRlc2NlbmNlX2ZyYWdtZW50LFxuXHRidW1wbWFwX3BhcnNfZnJhZ21lbnQ6IGJ1bXBtYXBfcGFyc19mcmFnbWVudCxcblx0Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50OiBjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQsXG5cdGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50OiBjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudCxcblx0Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4OiBjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXgsXG5cdGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg6IGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXgsXG5cdGNvbG9yX2ZyYWdtZW50OiBjb2xvcl9mcmFnbWVudCxcblx0Y29sb3JfcGFyc19mcmFnbWVudDogY29sb3JfcGFyc19mcmFnbWVudCxcblx0Y29sb3JfcGFyc192ZXJ0ZXg6IGNvbG9yX3BhcnNfdmVydGV4LFxuXHRjb2xvcl92ZXJ0ZXg6IGNvbG9yX3ZlcnRleCxcblx0Y29tbW9uOiBjb21tb24sXG5cdGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudDogY3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50LFxuXHRkZWZhdWx0bm9ybWFsX3ZlcnRleDogZGVmYXVsdG5vcm1hbF92ZXJ0ZXgsXG5cdGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleDogZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4LFxuXHRkaXNwbGFjZW1lbnRtYXBfdmVydGV4OiBkaXNwbGFjZW1lbnRtYXBfdmVydGV4LFxuXHRlbWlzc2l2ZW1hcF9mcmFnbWVudDogZW1pc3NpdmVtYXBfZnJhZ21lbnQsXG5cdGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ6IGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQsXG5cdGNvbG9yc3BhY2VfZnJhZ21lbnQ6IGNvbG9yc3BhY2VfZnJhZ21lbnQsXG5cdGNvbG9yc3BhY2VfcGFyc19mcmFnbWVudDogY29sb3JzcGFjZV9wYXJzX2ZyYWdtZW50LFxuXHRlbnZtYXBfZnJhZ21lbnQ6IGVudm1hcF9mcmFnbWVudCxcblx0ZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50OiBlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQsXG5cdGVudm1hcF9wYXJzX2ZyYWdtZW50OiBlbnZtYXBfcGFyc19mcmFnbWVudCxcblx0ZW52bWFwX3BhcnNfdmVydGV4OiBlbnZtYXBfcGFyc192ZXJ0ZXgsXG5cdGVudm1hcF9waHlzaWNhbF9wYXJzX2ZyYWdtZW50OiBlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudCxcblx0ZW52bWFwX3ZlcnRleDogZW52bWFwX3ZlcnRleCxcblx0Zm9nX3ZlcnRleDogZm9nX3ZlcnRleCxcblx0Zm9nX3BhcnNfdmVydGV4OiBmb2dfcGFyc192ZXJ0ZXgsXG5cdGZvZ19mcmFnbWVudDogZm9nX2ZyYWdtZW50LFxuXHRmb2dfcGFyc19mcmFnbWVudDogZm9nX3BhcnNfZnJhZ21lbnQsXG5cdGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQ6IGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ6IGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0c19sYW1iZXJ0X2ZyYWdtZW50OiBsaWdodHNfbGFtYmVydF9mcmFnbWVudCxcblx0bGlnaHRzX2xhbWJlcnRfcGFyc19mcmFnbWVudDogbGlnaHRzX2xhbWJlcnRfcGFyc19mcmFnbWVudCxcblx0bGlnaHRzX3BhcnNfYmVnaW46IGxpZ2h0c19wYXJzX2JlZ2luLFxuXHRsaWdodHNfdG9vbl9mcmFnbWVudDogbGlnaHRzX3Rvb25fZnJhZ21lbnQsXG5cdGxpZ2h0c190b29uX3BhcnNfZnJhZ21lbnQ6IGxpZ2h0c190b29uX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0c19waG9uZ19mcmFnbWVudDogbGlnaHRzX3Bob25nX2ZyYWdtZW50LFxuXHRsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudDogbGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0c19waHlzaWNhbF9mcmFnbWVudDogbGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50LFxuXHRsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudDogbGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0c19mcmFnbWVudF9iZWdpbjogbGlnaHRzX2ZyYWdtZW50X2JlZ2luLFxuXHRsaWdodHNfZnJhZ21lbnRfbWFwczogbGlnaHRzX2ZyYWdtZW50X21hcHMsXG5cdGxpZ2h0c19mcmFnbWVudF9lbmQ6IGxpZ2h0c19mcmFnbWVudF9lbmQsXG5cdGxvZ2RlcHRoYnVmX2ZyYWdtZW50OiBsb2dkZXB0aGJ1Zl9mcmFnbWVudCxcblx0bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudDogbG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCxcblx0bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg6IGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4LFxuXHRsb2dkZXB0aGJ1Zl92ZXJ0ZXg6IGxvZ2RlcHRoYnVmX3ZlcnRleCxcblx0bWFwX2ZyYWdtZW50OiBtYXBfZnJhZ21lbnQsXG5cdG1hcF9wYXJzX2ZyYWdtZW50OiBtYXBfcGFyc19mcmFnbWVudCxcblx0bWFwX3BhcnRpY2xlX2ZyYWdtZW50OiBtYXBfcGFydGljbGVfZnJhZ21lbnQsXG5cdG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50OiBtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudCxcblx0bWV0YWxuZXNzbWFwX2ZyYWdtZW50OiBtZXRhbG5lc3NtYXBfZnJhZ21lbnQsXG5cdG1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50OiBtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudCxcblx0bW9ycGhpbnN0YW5jZV92ZXJ0ZXg6IG1vcnBoaW5zdGFuY2VfdmVydGV4LFxuXHRtb3JwaGNvbG9yX3ZlcnRleDogbW9ycGhjb2xvcl92ZXJ0ZXgsXG5cdG1vcnBobm9ybWFsX3ZlcnRleDogbW9ycGhub3JtYWxfdmVydGV4LFxuXHRtb3JwaHRhcmdldF9wYXJzX3ZlcnRleDogbW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXgsXG5cdG1vcnBodGFyZ2V0X3ZlcnRleDogbW9ycGh0YXJnZXRfdmVydGV4LFxuXHRub3JtYWxfZnJhZ21lbnRfYmVnaW46IG5vcm1hbF9mcmFnbWVudF9iZWdpbixcblx0bm9ybWFsX2ZyYWdtZW50X21hcHM6IG5vcm1hbF9mcmFnbWVudF9tYXBzLFxuXHRub3JtYWxfcGFyc19mcmFnbWVudDogbm9ybWFsX3BhcnNfZnJhZ21lbnQsXG5cdG5vcm1hbF9wYXJzX3ZlcnRleDogbm9ybWFsX3BhcnNfdmVydGV4LFxuXHRub3JtYWxfdmVydGV4OiBub3JtYWxfdmVydGV4LFxuXHRub3JtYWxtYXBfcGFyc19mcmFnbWVudDogbm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQsXG5cdGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfYmVnaW46IGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfYmVnaW4sXG5cdGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfbWFwczogY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9tYXBzLFxuXHRjbGVhcmNvYXRfcGFyc19mcmFnbWVudDogY2xlYXJjb2F0X3BhcnNfZnJhZ21lbnQsXG5cdGlyaWRlc2NlbmNlX3BhcnNfZnJhZ21lbnQ6IGlyaWRlc2NlbmNlX3BhcnNfZnJhZ21lbnQsXG5cdG9wYXF1ZV9mcmFnbWVudDogb3BhcXVlX2ZyYWdtZW50LFxuXHRwYWNraW5nOiBwYWNraW5nLFxuXHRwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50OiBwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50LFxuXHRwcm9qZWN0X3ZlcnRleDogcHJvamVjdF92ZXJ0ZXgsXG5cdGRpdGhlcmluZ19mcmFnbWVudDogZGl0aGVyaW5nX2ZyYWdtZW50LFxuXHRkaXRoZXJpbmdfcGFyc19mcmFnbWVudDogZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQsXG5cdHJvdWdobmVzc21hcF9mcmFnbWVudDogcm91Z2huZXNzbWFwX2ZyYWdtZW50LFxuXHRyb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudDogcm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQsXG5cdHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50OiBzaGFkb3dtYXBfcGFyc19mcmFnbWVudCxcblx0c2hhZG93bWFwX3BhcnNfdmVydGV4OiBzaGFkb3dtYXBfcGFyc192ZXJ0ZXgsXG5cdHNoYWRvd21hcF92ZXJ0ZXg6IHNoYWRvd21hcF92ZXJ0ZXgsXG5cdHNoYWRvd21hc2tfcGFyc19mcmFnbWVudDogc2hhZG93bWFza19wYXJzX2ZyYWdtZW50LFxuXHRza2luYmFzZV92ZXJ0ZXg6IHNraW5iYXNlX3ZlcnRleCxcblx0c2tpbm5pbmdfcGFyc192ZXJ0ZXg6IHNraW5uaW5nX3BhcnNfdmVydGV4LFxuXHRza2lubmluZ192ZXJ0ZXg6IHNraW5uaW5nX3ZlcnRleCxcblx0c2tpbm5vcm1hbF92ZXJ0ZXg6IHNraW5ub3JtYWxfdmVydGV4LFxuXHRzcGVjdWxhcm1hcF9mcmFnbWVudDogc3BlY3VsYXJtYXBfZnJhZ21lbnQsXG5cdHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ6IHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQsXG5cdHRvbmVtYXBwaW5nX2ZyYWdtZW50OiB0b25lbWFwcGluZ19mcmFnbWVudCxcblx0dG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudDogdG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudCxcblx0dHJhbnNtaXNzaW9uX2ZyYWdtZW50OiB0cmFuc21pc3Npb25fZnJhZ21lbnQsXG5cdHRyYW5zbWlzc2lvbl9wYXJzX2ZyYWdtZW50OiB0cmFuc21pc3Npb25fcGFyc19mcmFnbWVudCxcblx0dXZfcGFyc19mcmFnbWVudDogdXZfcGFyc19mcmFnbWVudCxcblx0dXZfcGFyc192ZXJ0ZXg6IHV2X3BhcnNfdmVydGV4LFxuXHR1dl92ZXJ0ZXg6IHV2X3ZlcnRleCxcblx0d29ybGRwb3NfdmVydGV4OiB3b3JsZHBvc192ZXJ0ZXgsXG5cblx0YmFja2dyb3VuZF92ZXJ0OiB2ZXJ0ZXgkaCxcblx0YmFja2dyb3VuZF9mcmFnOiBmcmFnbWVudCRoLFxuXHRiYWNrZ3JvdW5kQ3ViZV92ZXJ0OiB2ZXJ0ZXgkZyxcblx0YmFja2dyb3VuZEN1YmVfZnJhZzogZnJhZ21lbnQkZyxcblx0Y3ViZV92ZXJ0OiB2ZXJ0ZXgkZixcblx0Y3ViZV9mcmFnOiBmcmFnbWVudCRmLFxuXHRkZXB0aF92ZXJ0OiB2ZXJ0ZXgkZSxcblx0ZGVwdGhfZnJhZzogZnJhZ21lbnQkZSxcblx0ZGlzdGFuY2VSR0JBX3ZlcnQ6IHZlcnRleCRkLFxuXHRkaXN0YW5jZVJHQkFfZnJhZzogZnJhZ21lbnQkZCxcblx0ZXF1aXJlY3RfdmVydDogdmVydGV4JGMsXG5cdGVxdWlyZWN0X2ZyYWc6IGZyYWdtZW50JGMsXG5cdGxpbmVkYXNoZWRfdmVydDogdmVydGV4JGIsXG5cdGxpbmVkYXNoZWRfZnJhZzogZnJhZ21lbnQkYixcblx0bWVzaGJhc2ljX3ZlcnQ6IHZlcnRleCRhLFxuXHRtZXNoYmFzaWNfZnJhZzogZnJhZ21lbnQkYSxcblx0bWVzaGxhbWJlcnRfdmVydDogdmVydGV4JDksXG5cdG1lc2hsYW1iZXJ0X2ZyYWc6IGZyYWdtZW50JDksXG5cdG1lc2htYXRjYXBfdmVydDogdmVydGV4JDgsXG5cdG1lc2htYXRjYXBfZnJhZzogZnJhZ21lbnQkOCxcblx0bWVzaG5vcm1hbF92ZXJ0OiB2ZXJ0ZXgkNyxcblx0bWVzaG5vcm1hbF9mcmFnOiBmcmFnbWVudCQ3LFxuXHRtZXNocGhvbmdfdmVydDogdmVydGV4JDYsXG5cdG1lc2hwaG9uZ19mcmFnOiBmcmFnbWVudCQ2LFxuXHRtZXNocGh5c2ljYWxfdmVydDogdmVydGV4JDUsXG5cdG1lc2hwaHlzaWNhbF9mcmFnOiBmcmFnbWVudCQ1LFxuXHRtZXNodG9vbl92ZXJ0OiB2ZXJ0ZXgkNCxcblx0bWVzaHRvb25fZnJhZzogZnJhZ21lbnQkNCxcblx0cG9pbnRzX3ZlcnQ6IHZlcnRleCQzLFxuXHRwb2ludHNfZnJhZzogZnJhZ21lbnQkMyxcblx0c2hhZG93X3ZlcnQ6IHZlcnRleCQyLFxuXHRzaGFkb3dfZnJhZzogZnJhZ21lbnQkMixcblx0c3ByaXRlX3ZlcnQ6IHZlcnRleCQxLFxuXHRzcHJpdGVfZnJhZzogZnJhZ21lbnQkMVxufTtcblxuLy8gVW5pZm9ybXMgbGlicmFyeSBmb3Igc2hhcmVkIHdlYmdsIHNoYWRlcnNcbmNvbnN0IFVuaWZvcm1zTGliID0ge1xuXG5cdGNvbW1vbjoge1xuXG5cdFx0ZGlmZnVzZTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgQ29sb3IoIDB4ZmZmZmZmICkgfSxcblx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfSxcblxuXHRcdG1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdG1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sXG5cblx0XHRhbHBoYU1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGFscGhhTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblxuXHRcdGFscGhhVGVzdDogeyB2YWx1ZTogMCB9XG5cblx0fSxcblxuXHRzcGVjdWxhcm1hcDoge1xuXG5cdFx0c3BlY3VsYXJNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRzcGVjdWxhck1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH1cblxuXHR9LFxuXG5cdGVudm1hcDoge1xuXG5cdFx0ZW52TWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0ZW52TWFwUm90YXRpb246IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdGZsaXBFbnZNYXA6IHsgdmFsdWU6IC0xIH0sXG5cdFx0cmVmbGVjdGl2aXR5OiB7IHZhbHVlOiAxLjAgfSwgLy8gYmFzaWMsIGxhbWJlcnQsIHBob25nXG5cdFx0aW9yOiB7IHZhbHVlOiAxLjUgfSwgLy8gcGh5c2ljYWxcblx0XHRyZWZyYWN0aW9uUmF0aW86IHsgdmFsdWU6IDAuOTggfSwgLy8gYmFzaWMsIGxhbWJlcnQsIHBob25nXG5cblx0fSxcblxuXHRhb21hcDoge1xuXG5cdFx0YW9NYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRhb01hcEludGVuc2l0eTogeyB2YWx1ZTogMSB9LFxuXHRcdGFvTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfVxuXG5cdH0sXG5cblx0bGlnaHRtYXA6IHtcblxuXHRcdGxpZ2h0TWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0bGlnaHRNYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfSxcblx0XHRsaWdodE1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH1cblxuXHR9LFxuXG5cdGJ1bXBtYXA6IHtcblxuXHRcdGJ1bXBNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRidW1wTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRidW1wU2NhbGU6IHsgdmFsdWU6IDEgfVxuXG5cdH0sXG5cblx0bm9ybWFsbWFwOiB7XG5cblx0XHRub3JtYWxNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRub3JtYWxNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdG5vcm1hbFNjYWxlOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCAxLCAxICkgfVxuXG5cdH0sXG5cblx0ZGlzcGxhY2VtZW50bWFwOiB7XG5cblx0XHRkaXNwbGFjZW1lbnRNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRkaXNwbGFjZW1lbnRNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdGRpc3BsYWNlbWVudFNjYWxlOiB7IHZhbHVlOiAxIH0sXG5cdFx0ZGlzcGxhY2VtZW50QmlhczogeyB2YWx1ZTogMCB9XG5cblx0fSxcblxuXHRlbWlzc2l2ZW1hcDoge1xuXG5cdFx0ZW1pc3NpdmVNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRlbWlzc2l2ZU1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH1cblxuXHR9LFxuXG5cdG1ldGFsbmVzc21hcDoge1xuXG5cdFx0bWV0YWxuZXNzTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0bWV0YWxuZXNzTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfVxuXG5cdH0sXG5cblx0cm91Z2huZXNzbWFwOiB7XG5cblx0XHRyb3VnaG5lc3NNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRyb3VnaG5lc3NNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9XG5cblx0fSxcblxuXHRncmFkaWVudG1hcDoge1xuXG5cdFx0Z3JhZGllbnRNYXA6IHsgdmFsdWU6IG51bGwgfVxuXG5cdH0sXG5cblx0Zm9nOiB7XG5cblx0XHRmb2dEZW5zaXR5OiB7IHZhbHVlOiAwLjAwMDI1IH0sXG5cdFx0Zm9nTmVhcjogeyB2YWx1ZTogMSB9LFxuXHRcdGZvZ0ZhcjogeyB2YWx1ZTogMjAwMCB9LFxuXHRcdGZvZ0NvbG9yOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMHhmZmZmZmYgKSB9XG5cblx0fSxcblxuXHRsaWdodHM6IHtcblxuXHRcdGFtYmllbnRMaWdodENvbG9yOiB7IHZhbHVlOiBbXSB9LFxuXG5cdFx0bGlnaHRQcm9iZTogeyB2YWx1ZTogW10gfSxcblxuXHRcdGRpcmVjdGlvbmFsTGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0ZGlyZWN0aW9uOiB7fSxcblx0XHRcdGNvbG9yOiB7fVxuXHRcdH0gfSxcblxuXHRcdGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0c2hhZG93SW50ZW5zaXR5OiAxLFxuXHRcdFx0c2hhZG93Qmlhczoge30sXG5cdFx0XHRzaGFkb3dOb3JtYWxCaWFzOiB7fSxcblx0XHRcdHNoYWRvd1JhZGl1czoge30sXG5cdFx0XHRzaGFkb3dNYXBTaXplOiB7fVxuXHRcdH0gfSxcblxuXHRcdGRpcmVjdGlvbmFsU2hhZG93TWFwOiB7IHZhbHVlOiBbXSB9LFxuXHRcdGRpcmVjdGlvbmFsU2hhZG93TWF0cml4OiB7IHZhbHVlOiBbXSB9LFxuXG5cdFx0c3BvdExpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdGNvbG9yOiB7fSxcblx0XHRcdHBvc2l0aW9uOiB7fSxcblx0XHRcdGRpcmVjdGlvbjoge30sXG5cdFx0XHRkaXN0YW5jZToge30sXG5cdFx0XHRjb25lQ29zOiB7fSxcblx0XHRcdHBlbnVtYnJhQ29zOiB7fSxcblx0XHRcdGRlY2F5OiB7fVxuXHRcdH0gfSxcblxuXHRcdHNwb3RMaWdodFNoYWRvd3M6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7XG5cdFx0XHRzaGFkb3dJbnRlbnNpdHk6IDEsXG5cdFx0XHRzaGFkb3dCaWFzOiB7fSxcblx0XHRcdHNoYWRvd05vcm1hbEJpYXM6IHt9LFxuXHRcdFx0c2hhZG93UmFkaXVzOiB7fSxcblx0XHRcdHNoYWRvd01hcFNpemU6IHt9XG5cdFx0fSB9LFxuXG5cdFx0c3BvdExpZ2h0TWFwOiB7IHZhbHVlOiBbXSB9LFxuXHRcdHNwb3RTaGFkb3dNYXA6IHsgdmFsdWU6IFtdIH0sXG5cdFx0c3BvdExpZ2h0TWF0cml4OiB7IHZhbHVlOiBbXSB9LFxuXG5cdFx0cG9pbnRMaWdodHM6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7XG5cdFx0XHRjb2xvcjoge30sXG5cdFx0XHRwb3NpdGlvbjoge30sXG5cdFx0XHRkZWNheToge30sXG5cdFx0XHRkaXN0YW5jZToge31cblx0XHR9IH0sXG5cblx0XHRwb2ludExpZ2h0U2hhZG93czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdHNoYWRvd0ludGVuc2l0eTogMSxcblx0XHRcdHNoYWRvd0JpYXM6IHt9LFxuXHRcdFx0c2hhZG93Tm9ybWFsQmlhczoge30sXG5cdFx0XHRzaGFkb3dSYWRpdXM6IHt9LFxuXHRcdFx0c2hhZG93TWFwU2l6ZToge30sXG5cdFx0XHRzaGFkb3dDYW1lcmFOZWFyOiB7fSxcblx0XHRcdHNoYWRvd0NhbWVyYUZhcjoge31cblx0XHR9IH0sXG5cblx0XHRwb2ludFNoYWRvd01hcDogeyB2YWx1ZTogW10gfSxcblx0XHRwb2ludFNoYWRvd01hdHJpeDogeyB2YWx1ZTogW10gfSxcblxuXHRcdGhlbWlzcGhlcmVMaWdodHM6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7XG5cdFx0XHRkaXJlY3Rpb246IHt9LFxuXHRcdFx0c2t5Q29sb3I6IHt9LFxuXHRcdFx0Z3JvdW5kQ29sb3I6IHt9XG5cdFx0fSB9LFxuXG5cdFx0Ly8gVE9ETyAoYWJlbG5hdGlvbik6IFJlY3RBcmVhTGlnaHQgQlJERiBkYXRhIG5lZWRzIHRvIGJlIG1vdmVkIGZyb20gZXhhbXBsZSB0byBtYWluIHNyY1xuXHRcdHJlY3RBcmVhTGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0Y29sb3I6IHt9LFxuXHRcdFx0cG9zaXRpb246IHt9LFxuXHRcdFx0d2lkdGg6IHt9LFxuXHRcdFx0aGVpZ2h0OiB7fVxuXHRcdH0gfSxcblxuXHRcdGx0Y18xOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0bHRjXzI6IHsgdmFsdWU6IG51bGwgfVxuXG5cdH0sXG5cblx0cG9pbnRzOiB7XG5cblx0XHRkaWZmdXNlOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMHhmZmZmZmYgKSB9LFxuXHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9LFxuXHRcdHNpemU6IHsgdmFsdWU6IDEuMCB9LFxuXHRcdHNjYWxlOiB7IHZhbHVlOiAxLjAgfSxcblx0XHRtYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRhbHBoYU1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGFscGhhTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRhbHBoYVRlc3Q6IHsgdmFsdWU6IDAgfSxcblx0XHR1dlRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH1cblxuXHR9LFxuXG5cdHNwcml0ZToge1xuXG5cdFx0ZGlmZnVzZTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgQ29sb3IoIDB4ZmZmZmZmICkgfSxcblx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfSxcblx0XHRjZW50ZXI6IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoIDAuNSwgMC41ICkgfSxcblx0XHRyb3RhdGlvbjogeyB2YWx1ZTogMC4wIH0sXG5cdFx0bWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0bWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRhbHBoYU1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGFscGhhTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRhbHBoYVRlc3Q6IHsgdmFsdWU6IDAgfVxuXG5cdH1cblxufTtcblxuY29uc3QgU2hhZGVyTGliID0ge1xuXG5cdGJhc2ljOiB7XG5cblx0XHR1bmlmb3JtczogLypAX19QVVJFX18qLyBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5zcGVjdWxhcm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVudm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmFvbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2dcblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hiYXNpY192ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNoYmFzaWNfZnJhZ1xuXG5cdH0sXG5cblx0bGFtYmVydDoge1xuXG5cdFx0dW5pZm9ybXM6IC8qQF9fUFVSRV9fKi8gbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuc3BlY3VsYXJtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbnZtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5hb21hcCxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW1pc3NpdmVtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5idW1wbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubm9ybWFsbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRzLFxuXHRcdFx0e1xuXHRcdFx0XHRlbWlzc2l2ZTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaGxhbWJlcnRfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaGxhbWJlcnRfZnJhZ1xuXG5cdH0sXG5cblx0cGhvbmc6IHtcblxuXHRcdHVuaWZvcm1zOiAvKkBfX1BVUkVfXyovIG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLnNwZWN1bGFybWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW52bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYW9tYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVtaXNzaXZlbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYnVtcG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLm5vcm1hbG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0cyxcblx0XHRcdHtcblx0XHRcdFx0ZW1pc3NpdmU6IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IENvbG9yKCAweDAwMDAwMCApIH0sXG5cdFx0XHRcdHNwZWN1bGFyOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMHgxMTExMTEgKSB9LFxuXHRcdFx0XHRzaGluaW5lc3M6IHsgdmFsdWU6IDMwIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaG9uZ192ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGhvbmdfZnJhZ1xuXG5cdH0sXG5cblx0c3RhbmRhcmQ6IHtcblxuXHRcdHVuaWZvcm1zOiAvKkBfX1BVUkVfXyovIG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLmVudm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmFvbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbWlzc2l2ZW1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmJ1bXBtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5ub3JtYWxtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5yb3VnaG5lc3NtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5tZXRhbG5lc3NtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodHMsXG5cdFx0XHR7XG5cdFx0XHRcdGVtaXNzaXZlOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMHgwMDAwMDAgKSB9LFxuXHRcdFx0XHRyb3VnaG5lc3M6IHsgdmFsdWU6IDEuMCB9LFxuXHRcdFx0XHRtZXRhbG5lc3M6IHsgdmFsdWU6IDAuMCB9LFxuXHRcdFx0XHRlbnZNYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBoeXNpY2FsX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaHlzaWNhbF9mcmFnXG5cblx0fSxcblxuXHR0b29uOiB7XG5cblx0XHR1bmlmb3JtczogLypAX19QVVJFX18qLyBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5hb21hcCxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW1pc3NpdmVtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5idW1wbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubm9ybWFsbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZ3JhZGllbnRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodHMsXG5cdFx0XHR7XG5cdFx0XHRcdGVtaXNzaXZlOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMHgwMDAwMDAgKSB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNodG9vbl92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNodG9vbl9mcmFnXG5cblx0fSxcblxuXHRtYXRjYXA6IHtcblxuXHRcdHVuaWZvcm1zOiAvKkBfX1BVUkVfXyovIG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLmJ1bXBtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5ub3JtYWxtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHR7XG5cdFx0XHRcdG1hdGNhcDogeyB2YWx1ZTogbnVsbCB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNobWF0Y2FwX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2htYXRjYXBfZnJhZ1xuXG5cdH0sXG5cblx0cG9pbnRzOiB7XG5cblx0XHR1bmlmb3JtczogLypAX19QVVJFX18qLyBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5wb2ludHMsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2dcblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLnBvaW50c192ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5wb2ludHNfZnJhZ1xuXG5cdH0sXG5cblx0ZGFzaGVkOiB7XG5cblx0XHR1bmlmb3JtczogLypAX19QVVJFX18qLyBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHR7XG5cdFx0XHRcdHNjYWxlOiB7IHZhbHVlOiAxIH0sXG5cdFx0XHRcdGRhc2hTaXplOiB7IHZhbHVlOiAxIH0sXG5cdFx0XHRcdHRvdGFsU2l6ZTogeyB2YWx1ZTogMiB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5saW5lZGFzaGVkX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmxpbmVkYXNoZWRfZnJhZ1xuXG5cdH0sXG5cblx0ZGVwdGg6IHtcblxuXHRcdHVuaWZvcm1zOiAvKkBfX1BVUkVfXyovIG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcFxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuZGVwdGhfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuZGVwdGhfZnJhZ1xuXG5cdH0sXG5cblx0bm9ybWFsOiB7XG5cblx0XHR1bmlmb3JtczogLypAX19QVVJFX18qLyBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5idW1wbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubm9ybWFsbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxuXHRcdFx0e1xuXHRcdFx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaG5vcm1hbF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNobm9ybWFsX2ZyYWdcblxuXHR9LFxuXG5cdHNwcml0ZToge1xuXG5cdFx0dW5pZm9ybXM6IC8qQF9fUFVSRV9fKi8gbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuc3ByaXRlLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nXG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5zcHJpdGVfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuc3ByaXRlX2ZyYWdcblxuXHR9LFxuXG5cdGJhY2tncm91bmQ6IHtcblxuXHRcdHVuaWZvcm1zOiB7XG5cdFx0XHR1dlRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sXG5cdFx0XHR0MkQ6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdGJhY2tncm91bmRJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfVxuXHRcdH0sXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmJhY2tncm91bmRfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuYmFja2dyb3VuZF9mcmFnXG5cblx0fSxcblxuXHRiYWNrZ3JvdW5kQ3ViZToge1xuXG5cdFx0dW5pZm9ybXM6IHtcblx0XHRcdGVudk1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0ZmxpcEVudk1hcDogeyB2YWx1ZTogLTEgfSxcblx0XHRcdGJhY2tncm91bmRCbHVycmluZXNzOiB7IHZhbHVlOiAwIH0sXG5cdFx0XHRiYWNrZ3JvdW5kSW50ZW5zaXR5OiB7IHZhbHVlOiAxIH0sXG5cdFx0XHRiYWNrZ3JvdW5kUm90YXRpb246IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9XG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuYmFja2dyb3VuZEN1YmVfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuYmFja2dyb3VuZEN1YmVfZnJhZ1xuXG5cdH0sXG5cblx0Y3ViZToge1xuXG5cdFx0dW5pZm9ybXM6IHtcblx0XHRcdHRDdWJlOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHR0RmxpcDogeyB2YWx1ZTogLTEgfSxcblx0XHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9XG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuY3ViZV92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5jdWJlX2ZyYWdcblxuXHR9LFxuXG5cdGVxdWlyZWN0OiB7XG5cblx0XHR1bmlmb3Jtczoge1xuXHRcdFx0dEVxdWlyZWN0OiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuZXF1aXJlY3RfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuZXF1aXJlY3RfZnJhZ1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VSR0JBOiB7XG5cblx0XHR1bmlmb3JtczogLypAX19QVVJFX18qLyBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXG5cdFx0XHR7XG5cdFx0XHRcdHJlZmVyZW5jZVBvc2l0aW9uOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCkgfSxcblx0XHRcdFx0bmVhckRpc3RhbmNlOiB7IHZhbHVlOiAxIH0sXG5cdFx0XHRcdGZhckRpc3RhbmNlOiB7IHZhbHVlOiAxMDAwIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmRpc3RhbmNlUkdCQV92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5kaXN0YW5jZVJHQkFfZnJhZ1xuXG5cdH0sXG5cblx0c2hhZG93OiB7XG5cblx0XHR1bmlmb3JtczogLypAX19QVVJFX18qLyBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodHMsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHR7XG5cdFx0XHRcdGNvbG9yOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMHgwMDAwMCApIH0sXG5cdFx0XHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9XG5cdFx0XHR9LFxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuc2hhZG93X3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLnNoYWRvd19mcmFnXG5cblx0fVxuXG59O1xuXG5TaGFkZXJMaWIucGh5c2ljYWwgPSB7XG5cblx0dW5pZm9ybXM6IC8qQF9fUFVSRV9fKi8gbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFNoYWRlckxpYi5zdGFuZGFyZC51bmlmb3Jtcyxcblx0XHR7XG5cdFx0XHRjbGVhcmNvYXQ6IHsgdmFsdWU6IDAgfSxcblx0XHRcdGNsZWFyY29hdE1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0Y2xlYXJjb2F0TWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRcdGNsZWFyY29hdE5vcm1hbE1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0Y2xlYXJjb2F0Tm9ybWFsTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRcdGNsZWFyY29hdE5vcm1hbFNjYWxlOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCAxLCAxICkgfSxcblx0XHRcdGNsZWFyY29hdFJvdWdobmVzczogeyB2YWx1ZTogMCB9LFxuXHRcdFx0Y2xlYXJjb2F0Um91Z2huZXNzTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRjbGVhcmNvYXRSb3VnaG5lc3NNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdFx0ZGlzcGVyc2lvbjogeyB2YWx1ZTogMCB9LFxuXHRcdFx0aXJpZGVzY2VuY2U6IHsgdmFsdWU6IDAgfSxcblx0XHRcdGlyaWRlc2NlbmNlTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRpcmlkZXNjZW5jZU1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sXG5cdFx0XHRpcmlkZXNjZW5jZUlPUjogeyB2YWx1ZTogMS4zIH0sXG5cdFx0XHRpcmlkZXNjZW5jZVRoaWNrbmVzc01pbmltdW06IHsgdmFsdWU6IDEwMCB9LFxuXHRcdFx0aXJpZGVzY2VuY2VUaGlja25lc3NNYXhpbXVtOiB7IHZhbHVlOiA0MDAgfSxcblx0XHRcdGlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRpcmlkZXNjZW5jZVRoaWNrbmVzc01hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sXG5cdFx0XHRzaGVlbjogeyB2YWx1ZTogMCB9LFxuXHRcdFx0c2hlZW5Db2xvcjogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfSxcblx0XHRcdHNoZWVuQ29sb3JNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdHNoZWVuQ29sb3JNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdFx0c2hlZW5Sb3VnaG5lc3M6IHsgdmFsdWU6IDEgfSxcblx0XHRcdHNoZWVuUm91Z2huZXNzTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRzaGVlblJvdWdobmVzc01hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sXG5cdFx0XHR0cmFuc21pc3Npb246IHsgdmFsdWU6IDAgfSxcblx0XHRcdHRyYW5zbWlzc2lvbk1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0dHJhbnNtaXNzaW9uTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRcdHRyYW5zbWlzc2lvblNhbXBsZXJTaXplOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCkgfSxcblx0XHRcdHRyYW5zbWlzc2lvblNhbXBsZXJNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdHRoaWNrbmVzczogeyB2YWx1ZTogMCB9LFxuXHRcdFx0dGhpY2tuZXNzTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHR0aGlja25lc3NNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdFx0YXR0ZW51YXRpb25EaXN0YW5jZTogeyB2YWx1ZTogMCB9LFxuXHRcdFx0YXR0ZW51YXRpb25Db2xvcjogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfSxcblx0XHRcdHNwZWN1bGFyQ29sb3I6IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IENvbG9yKCAxLCAxLCAxICkgfSxcblx0XHRcdHNwZWN1bGFyQ29sb3JNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdHNwZWN1bGFyQ29sb3JNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdFx0c3BlY3VsYXJJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfSxcblx0XHRcdHNwZWN1bGFySW50ZW5zaXR5TWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRzcGVjdWxhckludGVuc2l0eU1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sXG5cdFx0XHRhbmlzb3Ryb3B5VmVjdG9yOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCkgfSxcblx0XHRcdGFuaXNvdHJvcHlNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdGFuaXNvdHJvcHlNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdH1cblx0XSApLFxuXG5cdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBoeXNpY2FsX3ZlcnQsXG5cdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGh5c2ljYWxfZnJhZ1xuXG59O1xuXG5jb25zdCBfcmdiID0geyByOiAwLCBiOiAwLCBnOiAwIH07XG5jb25zdCBfZTEkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IEV1bGVyKCk7XG5jb25zdCBfbTEkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcblxuZnVuY3Rpb24gV2ViR0xCYWNrZ3JvdW5kKCByZW5kZXJlciwgY3ViZW1hcHMsIGN1YmV1dm1hcHMsIHN0YXRlLCBvYmplY3RzLCBhbHBoYSwgcHJlbXVsdGlwbGllZEFscGhhICkge1xuXG5cdGNvbnN0IGNsZWFyQ29sb3IgPSBuZXcgQ29sb3IoIDB4MDAwMDAwICk7XG5cdGxldCBjbGVhckFscGhhID0gYWxwaGEgPT09IHRydWUgPyAwIDogMTtcblxuXHRsZXQgcGxhbmVNZXNoO1xuXHRsZXQgYm94TWVzaDtcblxuXHRsZXQgY3VycmVudEJhY2tncm91bmQgPSBudWxsO1xuXHRsZXQgY3VycmVudEJhY2tncm91bmRWZXJzaW9uID0gMDtcblx0bGV0IGN1cnJlbnRUb25lbWFwcGluZyA9IG51bGw7XG5cblx0ZnVuY3Rpb24gZ2V0QmFja2dyb3VuZCggc2NlbmUgKSB7XG5cblx0XHRsZXQgYmFja2dyb3VuZCA9IHNjZW5lLmlzU2NlbmUgPT09IHRydWUgPyBzY2VuZS5iYWNrZ3JvdW5kIDogbnVsbDtcblxuXHRcdGlmICggYmFja2dyb3VuZCAmJiBiYWNrZ3JvdW5kLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0Y29uc3QgdXNlUE1SRU0gPSBzY2VuZS5iYWNrZ3JvdW5kQmx1cnJpbmVzcyA+IDA7IC8vIHVzZSBQTVJFTSBpZiB0aGUgdXNlciB3YW50cyB0byBibHVyIHRoZSBiYWNrZ3JvdW5kXG5cdFx0XHRiYWNrZ3JvdW5kID0gKCB1c2VQTVJFTSA/IGN1YmV1dm1hcHMgOiBjdWJlbWFwcyApLmdldCggYmFja2dyb3VuZCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGJhY2tncm91bmQ7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlciggc2NlbmUgKSB7XG5cblx0XHRsZXQgZm9yY2VDbGVhciA9IGZhbHNlO1xuXHRcdGNvbnN0IGJhY2tncm91bmQgPSBnZXRCYWNrZ3JvdW5kKCBzY2VuZSApO1xuXG5cdFx0aWYgKCBiYWNrZ3JvdW5kID09PSBudWxsICkge1xuXG5cdFx0XHRzZXRDbGVhciggY2xlYXJDb2xvciwgY2xlYXJBbHBoYSApO1xuXG5cdFx0fSBlbHNlIGlmICggYmFja2dyb3VuZCAmJiBiYWNrZ3JvdW5kLmlzQ29sb3IgKSB7XG5cblx0XHRcdHNldENsZWFyKCBiYWNrZ3JvdW5kLCAxICk7XG5cdFx0XHRmb3JjZUNsZWFyID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGVudmlyb25tZW50QmxlbmRNb2RlID0gcmVuZGVyZXIueHIuZ2V0RW52aXJvbm1lbnRCbGVuZE1vZGUoKTtcblxuXHRcdGlmICggZW52aXJvbm1lbnRCbGVuZE1vZGUgPT09ICdhZGRpdGl2ZScgKSB7XG5cblx0XHRcdHN0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0Q2xlYXIoIDAsIDAsIDAsIDEsIHByZW11bHRpcGxpZWRBbHBoYSApO1xuXG5cdFx0fSBlbHNlIGlmICggZW52aXJvbm1lbnRCbGVuZE1vZGUgPT09ICdhbHBoYS1ibGVuZCcgKSB7XG5cblx0XHRcdHN0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0Q2xlYXIoIDAsIDAsIDAsIDAsIHByZW11bHRpcGxpZWRBbHBoYSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCByZW5kZXJlci5hdXRvQ2xlYXIgfHwgZm9yY2VDbGVhciApIHtcblxuXHRcdFx0Ly8gYnVmZmVycyBtaWdodCBub3QgYmUgd3JpdGFibGUgd2hpY2ggaXMgcmVxdWlyZWQgdG8gZW5zdXJlIGEgY29ycmVjdCBjbGVhclxuXG5cdFx0XHRzdGF0ZS5idWZmZXJzLmRlcHRoLnNldFRlc3QoIHRydWUgKTtcblx0XHRcdHN0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0TWFzayggdHJ1ZSApO1xuXHRcdFx0c3RhdGUuYnVmZmVycy5jb2xvci5zZXRNYXNrKCB0cnVlICk7XG5cblx0XHRcdHJlbmRlcmVyLmNsZWFyKCByZW5kZXJlci5hdXRvQ2xlYXJDb2xvciwgcmVuZGVyZXIuYXV0b0NsZWFyRGVwdGgsIHJlbmRlcmVyLmF1dG9DbGVhclN0ZW5jaWwgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gYWRkVG9SZW5kZXJMaXN0KCByZW5kZXJMaXN0LCBzY2VuZSApIHtcblxuXHRcdGNvbnN0IGJhY2tncm91bmQgPSBnZXRCYWNrZ3JvdW5kKCBzY2VuZSApO1xuXG5cdFx0aWYgKCBiYWNrZ3JvdW5kICYmICggYmFja2dyb3VuZC5pc0N1YmVUZXh0dXJlIHx8IGJhY2tncm91bmQubWFwcGluZyA9PT0gQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcgKSApIHtcblxuXHRcdFx0aWYgKCBib3hNZXNoID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ym94TWVzaCA9IG5ldyBNZXNoKFxuXHRcdFx0XHRcdG5ldyBCb3hHZW9tZXRyeSggMSwgMSwgMSApLFxuXHRcdFx0XHRcdG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXHRcdFx0XHRcdFx0bmFtZTogJ0JhY2tncm91bmRDdWJlTWF0ZXJpYWwnLFxuXHRcdFx0XHRcdFx0dW5pZm9ybXM6IGNsb25lVW5pZm9ybXMoIFNoYWRlckxpYi5iYWNrZ3JvdW5kQ3ViZS51bmlmb3JtcyApLFxuXHRcdFx0XHRcdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJMaWIuYmFja2dyb3VuZEN1YmUudmVydGV4U2hhZGVyLFxuXHRcdFx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckxpYi5iYWNrZ3JvdW5kQ3ViZS5mcmFnbWVudFNoYWRlcixcblx0XHRcdFx0XHRcdHNpZGU6IEJhY2tTaWRlLFxuXHRcdFx0XHRcdFx0ZGVwdGhUZXN0OiBmYWxzZSxcblx0XHRcdFx0XHRcdGRlcHRoV3JpdGU6IGZhbHNlLFxuXHRcdFx0XHRcdFx0Zm9nOiBmYWxzZSxcblx0XHRcdFx0XHRcdGFsbG93T3ZlcnJpZGU6IGZhbHNlXG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ym94TWVzaC5nZW9tZXRyeS5kZWxldGVBdHRyaWJ1dGUoICdub3JtYWwnICk7XG5cdFx0XHRcdGJveE1lc2guZ2VvbWV0cnkuZGVsZXRlQXR0cmlidXRlKCAndXYnICk7XG5cblx0XHRcdFx0Ym94TWVzaC5vbkJlZm9yZVJlbmRlciA9IGZ1bmN0aW9uICggcmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHlQb3NpdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBhZGQgXCJlbnZNYXBcIiBtYXRlcmlhbCBwcm9wZXJ0eSBzbyB0aGUgcmVuZGVyZXIgY2FuIGV2YWx1YXRlIGl0IGxpa2UgZm9yIGJ1aWx0LWluIG1hdGVyaWFsc1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGJveE1lc2gubWF0ZXJpYWwsICdlbnZNYXAnLCB7XG5cblx0XHRcdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMuZW52TWFwLnZhbHVlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRvYmplY3RzLnVwZGF0ZSggYm94TWVzaCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9lMSQxLmNvcHkoIHNjZW5lLmJhY2tncm91bmRSb3RhdGlvbiApO1xuXG5cdFx0XHQvLyBhY2NvbW1vZGF0ZSBsZWZ0LWhhbmRlZCBmcmFtZVxuXHRcdFx0X2UxJDEueCAqPSAtMTsgX2UxJDEueSAqPSAtMTsgX2UxJDEueiAqPSAtMTtcblxuXHRcdFx0aWYgKCBiYWNrZ3JvdW5kLmlzQ3ViZVRleHR1cmUgJiYgYmFja2dyb3VuZC5pc1JlbmRlclRhcmdldFRleHR1cmUgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIGVudmlyb25tZW50IG1hcHMgd2hpY2ggYXJlIG5vdCBjdWJlIHJlbmRlciB0YXJnZXRzIG9yIFBNUkVNcyBmb2xsb3cgYSBkaWZmZXJlbnQgY29udmVudGlvblxuXHRcdFx0XHRfZTEkMS55ICo9IC0xO1xuXHRcdFx0XHRfZTEkMS56ICo9IC0xO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJveE1lc2gubWF0ZXJpYWwudW5pZm9ybXMuZW52TWFwLnZhbHVlID0gYmFja2dyb3VuZDtcblx0XHRcdGJveE1lc2gubWF0ZXJpYWwudW5pZm9ybXMuZmxpcEVudk1hcC52YWx1ZSA9ICggYmFja2dyb3VuZC5pc0N1YmVUZXh0dXJlICYmIGJhY2tncm91bmQuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID09PSBmYWxzZSApID8gLTEgOiAxO1xuXHRcdFx0Ym94TWVzaC5tYXRlcmlhbC51bmlmb3Jtcy5iYWNrZ3JvdW5kQmx1cnJpbmVzcy52YWx1ZSA9IHNjZW5lLmJhY2tncm91bmRCbHVycmluZXNzO1xuXHRcdFx0Ym94TWVzaC5tYXRlcmlhbC51bmlmb3Jtcy5iYWNrZ3JvdW5kSW50ZW5zaXR5LnZhbHVlID0gc2NlbmUuYmFja2dyb3VuZEludGVuc2l0eTtcblx0XHRcdGJveE1lc2gubWF0ZXJpYWwudW5pZm9ybXMuYmFja2dyb3VuZFJvdGF0aW9uLnZhbHVlLnNldEZyb21NYXRyaXg0KCBfbTEkMS5tYWtlUm90YXRpb25Gcm9tRXVsZXIoIF9lMSQxICkgKTtcblx0XHRcdGJveE1lc2gubWF0ZXJpYWwudG9uZU1hcHBlZCA9IENvbG9yTWFuYWdlbWVudC5nZXRUcmFuc2ZlciggYmFja2dyb3VuZC5jb2xvclNwYWNlICkgIT09IFNSR0JUcmFuc2ZlcjtcblxuXHRcdFx0aWYgKCBjdXJyZW50QmFja2dyb3VuZCAhPT0gYmFja2dyb3VuZCB8fFxuXHRcdFx0XHRjdXJyZW50QmFja2dyb3VuZFZlcnNpb24gIT09IGJhY2tncm91bmQudmVyc2lvbiB8fFxuXHRcdFx0XHRjdXJyZW50VG9uZW1hcHBpbmcgIT09IHJlbmRlcmVyLnRvbmVNYXBwaW5nICkge1xuXG5cdFx0XHRcdGJveE1lc2gubWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kID0gYmFja2dyb3VuZDtcblx0XHRcdFx0Y3VycmVudEJhY2tncm91bmRWZXJzaW9uID0gYmFja2dyb3VuZC52ZXJzaW9uO1xuXHRcdFx0XHRjdXJyZW50VG9uZW1hcHBpbmcgPSByZW5kZXJlci50b25lTWFwcGluZztcblxuXHRcdFx0fVxuXG5cdFx0XHRib3hNZXNoLmxheWVycy5lbmFibGVBbGwoKTtcblxuXHRcdFx0Ly8gcHVzaCB0byB0aGUgcHJlLXNvcnRlZCBvcGFxdWUgcmVuZGVyIGxpc3Rcblx0XHRcdHJlbmRlckxpc3QudW5zaGlmdCggYm94TWVzaCwgYm94TWVzaC5nZW9tZXRyeSwgYm94TWVzaC5tYXRlcmlhbCwgMCwgMCwgbnVsbCApO1xuXG5cdFx0fSBlbHNlIGlmICggYmFja2dyb3VuZCAmJiBiYWNrZ3JvdW5kLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0aWYgKCBwbGFuZU1lc2ggPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRwbGFuZU1lc2ggPSBuZXcgTWVzaChcblx0XHRcdFx0XHRuZXcgUGxhbmVHZW9tZXRyeSggMiwgMiApLFxuXHRcdFx0XHRcdG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXHRcdFx0XHRcdFx0bmFtZTogJ0JhY2tncm91bmRNYXRlcmlhbCcsXG5cdFx0XHRcdFx0XHR1bmlmb3JtczogY2xvbmVVbmlmb3JtcyggU2hhZGVyTGliLmJhY2tncm91bmQudW5pZm9ybXMgKSxcblx0XHRcdFx0XHRcdHZlcnRleFNoYWRlcjogU2hhZGVyTGliLmJhY2tncm91bmQudmVydGV4U2hhZGVyLFxuXHRcdFx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckxpYi5iYWNrZ3JvdW5kLmZyYWdtZW50U2hhZGVyLFxuXHRcdFx0XHRcdFx0c2lkZTogRnJvbnRTaWRlLFxuXHRcdFx0XHRcdFx0ZGVwdGhUZXN0OiBmYWxzZSxcblx0XHRcdFx0XHRcdGRlcHRoV3JpdGU6IGZhbHNlLFxuXHRcdFx0XHRcdFx0Zm9nOiBmYWxzZSxcblx0XHRcdFx0XHRcdGFsbG93T3ZlcnJpZGU6IGZhbHNlXG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0cGxhbmVNZXNoLmdlb21ldHJ5LmRlbGV0ZUF0dHJpYnV0ZSggJ25vcm1hbCcgKTtcblxuXHRcdFx0XHQvLyBhZGQgXCJtYXBcIiBtYXRlcmlhbCBwcm9wZXJ0eSBzbyB0aGUgcmVuZGVyZXIgY2FuIGV2YWx1YXRlIGl0IGxpa2UgZm9yIGJ1aWx0LWluIG1hdGVyaWFsc1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHBsYW5lTWVzaC5tYXRlcmlhbCwgJ21hcCcsIHtcblxuXHRcdFx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy50MkQudmFsdWU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdG9iamVjdHMudXBkYXRlKCBwbGFuZU1lc2ggKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRwbGFuZU1lc2gubWF0ZXJpYWwudW5pZm9ybXMudDJELnZhbHVlID0gYmFja2dyb3VuZDtcblx0XHRcdHBsYW5lTWVzaC5tYXRlcmlhbC51bmlmb3Jtcy5iYWNrZ3JvdW5kSW50ZW5zaXR5LnZhbHVlID0gc2NlbmUuYmFja2dyb3VuZEludGVuc2l0eTtcblx0XHRcdHBsYW5lTWVzaC5tYXRlcmlhbC50b25lTWFwcGVkID0gQ29sb3JNYW5hZ2VtZW50LmdldFRyYW5zZmVyKCBiYWNrZ3JvdW5kLmNvbG9yU3BhY2UgKSAhPT0gU1JHQlRyYW5zZmVyO1xuXG5cdFx0XHRpZiAoIGJhY2tncm91bmQubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRiYWNrZ3JvdW5kLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHBsYW5lTWVzaC5tYXRlcmlhbC51bmlmb3Jtcy51dlRyYW5zZm9ybS52YWx1ZS5jb3B5KCBiYWNrZ3JvdW5kLm1hdHJpeCApO1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRCYWNrZ3JvdW5kICE9PSBiYWNrZ3JvdW5kIHx8XG5cdFx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiAhPT0gYmFja2dyb3VuZC52ZXJzaW9uIHx8XG5cdFx0XHRcdGN1cnJlbnRUb25lbWFwcGluZyAhPT0gcmVuZGVyZXIudG9uZU1hcHBpbmcgKSB7XG5cblx0XHRcdFx0cGxhbmVNZXNoLm1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRjdXJyZW50QmFja2dyb3VuZCA9IGJhY2tncm91bmQ7XG5cdFx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiA9IGJhY2tncm91bmQudmVyc2lvbjtcblx0XHRcdFx0Y3VycmVudFRvbmVtYXBwaW5nID0gcmVuZGVyZXIudG9uZU1hcHBpbmc7XG5cblx0XHRcdH1cblxuXHRcdFx0cGxhbmVNZXNoLmxheWVycy5lbmFibGVBbGwoKTtcblxuXHRcdFx0Ly8gcHVzaCB0byB0aGUgcHJlLXNvcnRlZCBvcGFxdWUgcmVuZGVyIGxpc3Rcblx0XHRcdHJlbmRlckxpc3QudW5zaGlmdCggcGxhbmVNZXNoLCBwbGFuZU1lc2guZ2VvbWV0cnksIHBsYW5lTWVzaC5tYXRlcmlhbCwgMCwgMCwgbnVsbCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRDbGVhciggY29sb3IsIGFscGhhICkge1xuXG5cdFx0Y29sb3IuZ2V0UkdCKCBfcmdiLCBnZXRVbmxpdFVuaWZvcm1Db2xvclNwYWNlKCByZW5kZXJlciApICk7XG5cblx0XHRzdGF0ZS5idWZmZXJzLmNvbG9yLnNldENsZWFyKCBfcmdiLnIsIF9yZ2IuZywgX3JnYi5iLCBhbHBoYSwgcHJlbXVsdGlwbGllZEFscGhhICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cblx0XHRpZiAoIGJveE1lc2ggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ym94TWVzaC5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0XHRib3hNZXNoLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHRcdFx0Ym94TWVzaCA9IHVuZGVmaW5lZDtcblxuXHRcdH1cblxuXHRcdGlmICggcGxhbmVNZXNoICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHBsYW5lTWVzaC5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0XHRwbGFuZU1lc2gubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdFx0XHRwbGFuZU1lc2ggPSB1bmRlZmluZWQ7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRnZXRDbGVhckNvbG9yOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBjbGVhckNvbG9yO1xuXG5cdFx0fSxcblx0XHRzZXRDbGVhckNvbG9yOiBmdW5jdGlvbiAoIGNvbG9yLCBhbHBoYSA9IDEgKSB7XG5cblx0XHRcdGNsZWFyQ29sb3Iuc2V0KCBjb2xvciApO1xuXHRcdFx0Y2xlYXJBbHBoYSA9IGFscGhhO1xuXHRcdFx0c2V0Q2xlYXIoIGNsZWFyQ29sb3IsIGNsZWFyQWxwaGEgKTtcblxuXHRcdH0sXG5cdFx0Z2V0Q2xlYXJBbHBoYTogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gY2xlYXJBbHBoYTtcblxuXHRcdH0sXG5cdFx0c2V0Q2xlYXJBbHBoYTogZnVuY3Rpb24gKCBhbHBoYSApIHtcblxuXHRcdFx0Y2xlYXJBbHBoYSA9IGFscGhhO1xuXHRcdFx0c2V0Q2xlYXIoIGNsZWFyQ29sb3IsIGNsZWFyQWxwaGEgKTtcblxuXHRcdH0sXG5cdFx0cmVuZGVyOiByZW5kZXIsXG5cdFx0YWRkVG9SZW5kZXJMaXN0OiBhZGRUb1JlbmRlckxpc3QsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xCaW5kaW5nU3RhdGVzKCBnbCwgYXR0cmlidXRlcyApIHtcblxuXHRjb25zdCBtYXhWZXJ0ZXhBdHRyaWJ1dGVzID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfVkVSVEVYX0FUVFJJQlMgKTtcblxuXHRjb25zdCBiaW5kaW5nU3RhdGVzID0ge307XG5cblx0Y29uc3QgZGVmYXVsdFN0YXRlID0gY3JlYXRlQmluZGluZ1N0YXRlKCBudWxsICk7XG5cdGxldCBjdXJyZW50U3RhdGUgPSBkZWZhdWx0U3RhdGU7XG5cdGxldCBmb3JjZVVwZGF0ZSA9IGZhbHNlO1xuXG5cdGZ1bmN0aW9uIHNldHVwKCBvYmplY3QsIG1hdGVyaWFsLCBwcm9ncmFtLCBnZW9tZXRyeSwgaW5kZXggKSB7XG5cblx0XHRsZXQgdXBkYXRlQnVmZmVycyA9IGZhbHNlO1xuXG5cdFx0Y29uc3Qgc3RhdGUgPSBnZXRCaW5kaW5nU3RhdGUoIGdlb21ldHJ5LCBwcm9ncmFtLCBtYXRlcmlhbCApO1xuXG5cdFx0aWYgKCBjdXJyZW50U3RhdGUgIT09IHN0YXRlICkge1xuXG5cdFx0XHRjdXJyZW50U3RhdGUgPSBzdGF0ZTtcblx0XHRcdGJpbmRWZXJ0ZXhBcnJheU9iamVjdCggY3VycmVudFN0YXRlLm9iamVjdCApO1xuXG5cdFx0fVxuXG5cdFx0dXBkYXRlQnVmZmVycyA9IG5lZWRzVXBkYXRlKCBvYmplY3QsIGdlb21ldHJ5LCBwcm9ncmFtLCBpbmRleCApO1xuXG5cdFx0aWYgKCB1cGRhdGVCdWZmZXJzICkgc2F2ZUNhY2hlKCBvYmplY3QsIGdlb21ldHJ5LCBwcm9ncmFtLCBpbmRleCApO1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0YXR0cmlidXRlcy51cGRhdGUoIGluZGV4LCBnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB1cGRhdGVCdWZmZXJzIHx8IGZvcmNlVXBkYXRlICkge1xuXG5cdFx0XHRmb3JjZVVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHRzZXR1cFZlcnRleEF0dHJpYnV0ZXMoIG9iamVjdCwgbWF0ZXJpYWwsIHByb2dyYW0sIGdlb21ldHJ5ICk7XG5cblx0XHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0Z2wuYmluZEJ1ZmZlciggZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGF0dHJpYnV0ZXMuZ2V0KCBpbmRleCApLmJ1ZmZlciApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZVZlcnRleEFycmF5T2JqZWN0KCkge1xuXG5cdFx0cmV0dXJuIGdsLmNyZWF0ZVZlcnRleEFycmF5KCk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGJpbmRWZXJ0ZXhBcnJheU9iamVjdCggdmFvICkge1xuXG5cdFx0cmV0dXJuIGdsLmJpbmRWZXJ0ZXhBcnJheSggdmFvICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRlbGV0ZVZlcnRleEFycmF5T2JqZWN0KCB2YW8gKSB7XG5cblx0XHRyZXR1cm4gZ2wuZGVsZXRlVmVydGV4QXJyYXkoIHZhbyApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRCaW5kaW5nU3RhdGUoIGdlb21ldHJ5LCBwcm9ncmFtLCBtYXRlcmlhbCApIHtcblxuXHRcdGNvbnN0IHdpcmVmcmFtZSA9ICggbWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlICk7XG5cblx0XHRsZXQgcHJvZ3JhbU1hcCA9IGJpbmRpbmdTdGF0ZXNbIGdlb21ldHJ5LmlkIF07XG5cblx0XHRpZiAoIHByb2dyYW1NYXAgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cHJvZ3JhbU1hcCA9IHt9O1xuXHRcdFx0YmluZGluZ1N0YXRlc1sgZ2VvbWV0cnkuaWQgXSA9IHByb2dyYW1NYXA7XG5cblx0XHR9XG5cblx0XHRsZXQgc3RhdGVNYXAgPSBwcm9ncmFtTWFwWyBwcm9ncmFtLmlkIF07XG5cblx0XHRpZiAoIHN0YXRlTWFwID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHN0YXRlTWFwID0ge307XG5cdFx0XHRwcm9ncmFtTWFwWyBwcm9ncmFtLmlkIF0gPSBzdGF0ZU1hcDtcblxuXHRcdH1cblxuXHRcdGxldCBzdGF0ZSA9IHN0YXRlTWFwWyB3aXJlZnJhbWUgXTtcblxuXHRcdGlmICggc3RhdGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c3RhdGUgPSBjcmVhdGVCaW5kaW5nU3RhdGUoIGNyZWF0ZVZlcnRleEFycmF5T2JqZWN0KCkgKTtcblx0XHRcdHN0YXRlTWFwWyB3aXJlZnJhbWUgXSA9IHN0YXRlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHN0YXRlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBjcmVhdGVCaW5kaW5nU3RhdGUoIHZhbyApIHtcblxuXHRcdGNvbnN0IG5ld0F0dHJpYnV0ZXMgPSBbXTtcblx0XHRjb25zdCBlbmFibGVkQXR0cmlidXRlcyA9IFtdO1xuXHRcdGNvbnN0IGF0dHJpYnV0ZURpdmlzb3JzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBtYXhWZXJ0ZXhBdHRyaWJ1dGVzOyBpICsrICkge1xuXG5cdFx0XHRuZXdBdHRyaWJ1dGVzWyBpIF0gPSAwO1xuXHRcdFx0ZW5hYmxlZEF0dHJpYnV0ZXNbIGkgXSA9IDA7XG5cdFx0XHRhdHRyaWJ1dGVEaXZpc29yc1sgaSBdID0gMDtcblxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cblx0XHRcdC8vIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IG9uIG5vbi1WQU8gc3VwcG9ydCBicm93c2VyXG5cdFx0XHRnZW9tZXRyeTogbnVsbCxcblx0XHRcdHByb2dyYW06IG51bGwsXG5cdFx0XHR3aXJlZnJhbWU6IGZhbHNlLFxuXG5cdFx0XHRuZXdBdHRyaWJ1dGVzOiBuZXdBdHRyaWJ1dGVzLFxuXHRcdFx0ZW5hYmxlZEF0dHJpYnV0ZXM6IGVuYWJsZWRBdHRyaWJ1dGVzLFxuXHRcdFx0YXR0cmlidXRlRGl2aXNvcnM6IGF0dHJpYnV0ZURpdmlzb3JzLFxuXHRcdFx0b2JqZWN0OiB2YW8sXG5cdFx0XHRhdHRyaWJ1dGVzOiB7fSxcblx0XHRcdGluZGV4OiBudWxsXG5cblx0XHR9O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBuZWVkc1VwZGF0ZSggb2JqZWN0LCBnZW9tZXRyeSwgcHJvZ3JhbSwgaW5kZXggKSB7XG5cblx0XHRjb25zdCBjYWNoZWRBdHRyaWJ1dGVzID0gY3VycmVudFN0YXRlLmF0dHJpYnV0ZXM7XG5cdFx0Y29uc3QgZ2VvbWV0cnlBdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcblxuXHRcdGxldCBhdHRyaWJ1dGVzTnVtID0gMDtcblxuXHRcdGNvbnN0IHByb2dyYW1BdHRyaWJ1dGVzID0gcHJvZ3JhbS5nZXRBdHRyaWJ1dGVzKCk7XG5cblx0XHRmb3IgKCBjb25zdCBuYW1lIGluIHByb2dyYW1BdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRjb25zdCBwcm9ncmFtQXR0cmlidXRlID0gcHJvZ3JhbUF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHRcdFx0aWYgKCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uID49IDAgKSB7XG5cblx0XHRcdFx0Y29uc3QgY2FjaGVkQXR0cmlidXRlID0gY2FjaGVkQXR0cmlidXRlc1sgbmFtZSBdO1xuXHRcdFx0XHRsZXQgZ2VvbWV0cnlBdHRyaWJ1dGUgPSBnZW9tZXRyeUF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHRcdFx0XHRpZiAoIGdlb21ldHJ5QXR0cmlidXRlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIG5hbWUgPT09ICdpbnN0YW5jZU1hdHJpeCcgJiYgb2JqZWN0Lmluc3RhbmNlTWF0cml4ICkgZ2VvbWV0cnlBdHRyaWJ1dGUgPSBvYmplY3QuaW5zdGFuY2VNYXRyaXg7XG5cdFx0XHRcdFx0aWYgKCBuYW1lID09PSAnaW5zdGFuY2VDb2xvcicgJiYgb2JqZWN0Lmluc3RhbmNlQ29sb3IgKSBnZW9tZXRyeUF0dHJpYnV0ZSA9IG9iamVjdC5pbnN0YW5jZUNvbG9yO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGNhY2hlZEF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuIHRydWU7XG5cblx0XHRcdFx0aWYgKCBjYWNoZWRBdHRyaWJ1dGUuYXR0cmlidXRlICE9PSBnZW9tZXRyeUF0dHJpYnV0ZSApIHJldHVybiB0cnVlO1xuXG5cdFx0XHRcdGlmICggZ2VvbWV0cnlBdHRyaWJ1dGUgJiYgY2FjaGVkQXR0cmlidXRlLmRhdGEgIT09IGdlb21ldHJ5QXR0cmlidXRlLmRhdGEgKSByZXR1cm4gdHJ1ZTtcblxuXHRcdFx0XHRhdHRyaWJ1dGVzTnVtICsrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIGN1cnJlbnRTdGF0ZS5hdHRyaWJ1dGVzTnVtICE9PSBhdHRyaWJ1dGVzTnVtICkgcmV0dXJuIHRydWU7XG5cblx0XHRpZiAoIGN1cnJlbnRTdGF0ZS5pbmRleCAhPT0gaW5kZXggKSByZXR1cm4gdHJ1ZTtcblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2F2ZUNhY2hlKCBvYmplY3QsIGdlb21ldHJ5LCBwcm9ncmFtLCBpbmRleCApIHtcblxuXHRcdGNvbnN0IGNhY2hlID0ge307XG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG5cdFx0bGV0IGF0dHJpYnV0ZXNOdW0gPSAwO1xuXG5cdFx0Y29uc3QgcHJvZ3JhbUF0dHJpYnV0ZXMgPSBwcm9ncmFtLmdldEF0dHJpYnV0ZXMoKTtcblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gcHJvZ3JhbUF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IHByb2dyYW1BdHRyaWJ1dGUgPSBwcm9ncmFtQXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0XHRpZiAoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24gPj0gMCApIHtcblxuXHRcdFx0XHRsZXQgYXR0cmlidXRlID0gYXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0XHRcdGlmICggYXR0cmlidXRlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIG5hbWUgPT09ICdpbnN0YW5jZU1hdHJpeCcgJiYgb2JqZWN0Lmluc3RhbmNlTWF0cml4ICkgYXR0cmlidXRlID0gb2JqZWN0Lmluc3RhbmNlTWF0cml4O1xuXHRcdFx0XHRcdGlmICggbmFtZSA9PT0gJ2luc3RhbmNlQ29sb3InICYmIG9iamVjdC5pbnN0YW5jZUNvbG9yICkgYXR0cmlidXRlID0gb2JqZWN0Lmluc3RhbmNlQ29sb3I7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IGRhdGEgPSB7fTtcblx0XHRcdFx0ZGF0YS5hdHRyaWJ1dGUgPSBhdHRyaWJ1dGU7XG5cblx0XHRcdFx0aWYgKCBhdHRyaWJ1dGUgJiYgYXR0cmlidXRlLmRhdGEgKSB7XG5cblx0XHRcdFx0XHRkYXRhLmRhdGEgPSBhdHRyaWJ1dGUuZGF0YTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FjaGVbIG5hbWUgXSA9IGRhdGE7XG5cblx0XHRcdFx0YXR0cmlidXRlc051bSArKztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y3VycmVudFN0YXRlLmF0dHJpYnV0ZXMgPSBjYWNoZTtcblx0XHRjdXJyZW50U3RhdGUuYXR0cmlidXRlc051bSA9IGF0dHJpYnV0ZXNOdW07XG5cblx0XHRjdXJyZW50U3RhdGUuaW5kZXggPSBpbmRleDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaW5pdEF0dHJpYnV0ZXMoKSB7XG5cblx0XHRjb25zdCBuZXdBdHRyaWJ1dGVzID0gY3VycmVudFN0YXRlLm5ld0F0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbmV3QXR0cmlidXRlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0bmV3QXR0cmlidXRlc1sgaSBdID0gMDtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZW5hYmxlQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRlbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKCBhdHRyaWJ1dGUsIDAgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciggYXR0cmlidXRlLCBtZXNoUGVyQXR0cmlidXRlICkge1xuXG5cdFx0Y29uc3QgbmV3QXR0cmlidXRlcyA9IGN1cnJlbnRTdGF0ZS5uZXdBdHRyaWJ1dGVzO1xuXHRcdGNvbnN0IGVuYWJsZWRBdHRyaWJ1dGVzID0gY3VycmVudFN0YXRlLmVuYWJsZWRBdHRyaWJ1dGVzO1xuXHRcdGNvbnN0IGF0dHJpYnV0ZURpdmlzb3JzID0gY3VycmVudFN0YXRlLmF0dHJpYnV0ZURpdmlzb3JzO1xuXG5cdFx0bmV3QXR0cmlidXRlc1sgYXR0cmlidXRlIF0gPSAxO1xuXG5cdFx0aWYgKCBlbmFibGVkQXR0cmlidXRlc1sgYXR0cmlidXRlIF0gPT09IDAgKSB7XG5cblx0XHRcdGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KCBhdHRyaWJ1dGUgKTtcblx0XHRcdGVuYWJsZWRBdHRyaWJ1dGVzWyBhdHRyaWJ1dGUgXSA9IDE7XG5cblx0XHR9XG5cblx0XHRpZiAoIGF0dHJpYnV0ZURpdmlzb3JzWyBhdHRyaWJ1dGUgXSAhPT0gbWVzaFBlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0Z2wudmVydGV4QXR0cmliRGl2aXNvciggYXR0cmlidXRlLCBtZXNoUGVyQXR0cmlidXRlICk7XG5cdFx0XHRhdHRyaWJ1dGVEaXZpc29yc1sgYXR0cmlidXRlIF0gPSBtZXNoUGVyQXR0cmlidXRlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNhYmxlVW51c2VkQXR0cmlidXRlcygpIHtcblxuXHRcdGNvbnN0IG5ld0F0dHJpYnV0ZXMgPSBjdXJyZW50U3RhdGUubmV3QXR0cmlidXRlcztcblx0XHRjb25zdCBlbmFibGVkQXR0cmlidXRlcyA9IGN1cnJlbnRTdGF0ZS5lbmFibGVkQXR0cmlidXRlcztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBlbmFibGVkQXR0cmlidXRlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBlbmFibGVkQXR0cmlidXRlc1sgaSBdICE9PSBuZXdBdHRyaWJ1dGVzWyBpIF0gKSB7XG5cblx0XHRcdFx0Z2wuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KCBpICk7XG5cdFx0XHRcdGVuYWJsZWRBdHRyaWJ1dGVzWyBpIF0gPSAwO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHZlcnRleEF0dHJpYlBvaW50ZXIoIGluZGV4LCBzaXplLCB0eXBlLCBub3JtYWxpemVkLCBzdHJpZGUsIG9mZnNldCwgaW50ZWdlciApIHtcblxuXHRcdGlmICggaW50ZWdlciA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Z2wudmVydGV4QXR0cmliSVBvaW50ZXIoIGluZGV4LCBzaXplLCB0eXBlLCBzdHJpZGUsIG9mZnNldCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Z2wudmVydGV4QXR0cmliUG9pbnRlciggaW5kZXgsIHNpemUsIHR5cGUsIG5vcm1hbGl6ZWQsIHN0cmlkZSwgb2Zmc2V0ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldHVwVmVydGV4QXR0cmlidXRlcyggb2JqZWN0LCBtYXRlcmlhbCwgcHJvZ3JhbSwgZ2VvbWV0cnkgKSB7XG5cblx0XHRpbml0QXR0cmlidXRlcygpO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnlBdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcblxuXHRcdGNvbnN0IHByb2dyYW1BdHRyaWJ1dGVzID0gcHJvZ3JhbS5nZXRBdHRyaWJ1dGVzKCk7XG5cblx0XHRjb25zdCBtYXRlcmlhbERlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMgPSBtYXRlcmlhbC5kZWZhdWx0QXR0cmlidXRlVmFsdWVzO1xuXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiBwcm9ncmFtQXR0cmlidXRlcyApIHtcblxuXHRcdFx0Y29uc3QgcHJvZ3JhbUF0dHJpYnV0ZSA9IHByb2dyYW1BdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0XHRcdGlmICggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiA+PSAwICkge1xuXG5cdFx0XHRcdGxldCBnZW9tZXRyeUF0dHJpYnV0ZSA9IGdlb21ldHJ5QXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0XHRcdGlmICggZ2VvbWV0cnlBdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGlmICggbmFtZSA9PT0gJ2luc3RhbmNlTWF0cml4JyAmJiBvYmplY3QuaW5zdGFuY2VNYXRyaXggKSBnZW9tZXRyeUF0dHJpYnV0ZSA9IG9iamVjdC5pbnN0YW5jZU1hdHJpeDtcblx0XHRcdFx0XHRpZiAoIG5hbWUgPT09ICdpbnN0YW5jZUNvbG9yJyAmJiBvYmplY3QuaW5zdGFuY2VDb2xvciApIGdlb21ldHJ5QXR0cmlidXRlID0gb2JqZWN0Lmluc3RhbmNlQ29sb3I7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZ2VvbWV0cnlBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGNvbnN0IG5vcm1hbGl6ZWQgPSBnZW9tZXRyeUF0dHJpYnV0ZS5ub3JtYWxpemVkO1xuXHRcdFx0XHRcdGNvbnN0IHNpemUgPSBnZW9tZXRyeUF0dHJpYnV0ZS5pdGVtU2l6ZTtcblxuXHRcdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXMuZ2V0KCBnZW9tZXRyeUF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdFx0Ly8gVE9ETyBBdHRyaWJ1dGUgbWF5IG5vdCBiZSBhdmFpbGFibGUgb24gY29udGV4dCByZXN0b3JlXG5cblx0XHRcdFx0XHRpZiAoIGF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkICkgY29udGludWU7XG5cblx0XHRcdFx0XHRjb25zdCBidWZmZXIgPSBhdHRyaWJ1dGUuYnVmZmVyO1xuXHRcdFx0XHRcdGNvbnN0IHR5cGUgPSBhdHRyaWJ1dGUudHlwZTtcblx0XHRcdFx0XHRjb25zdCBieXRlc1BlckVsZW1lbnQgPSBhdHRyaWJ1dGUuYnl0ZXNQZXJFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gY2hlY2sgZm9yIGludGVnZXIgYXR0cmlidXRlc1xuXG5cdFx0XHRcdFx0Y29uc3QgaW50ZWdlciA9ICggdHlwZSA9PT0gZ2wuSU5UIHx8IHR5cGUgPT09IGdsLlVOU0lHTkVEX0lOVCB8fCBnZW9tZXRyeUF0dHJpYnV0ZS5ncHVUeXBlID09PSBJbnRUeXBlICk7XG5cblx0XHRcdFx0XHRpZiAoIGdlb21ldHJ5QXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGRhdGEgPSBnZW9tZXRyeUF0dHJpYnV0ZS5kYXRhO1xuXHRcdFx0XHRcdFx0Y29uc3Qgc3RyaWRlID0gZGF0YS5zdHJpZGU7XG5cdFx0XHRcdFx0XHRjb25zdCBvZmZzZXQgPSBnZW9tZXRyeUF0dHJpYnV0ZS5vZmZzZXQ7XG5cblx0XHRcdFx0XHRcdGlmICggZGF0YS5pc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyICkge1xuXG5cdFx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0ZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiArIGksIGRhdGEubWVzaFBlckF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggIT09IHRydWUgJiYgZ2VvbWV0cnkuX21heEluc3RhbmNlQ291bnQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGdlb21ldHJ5Ll9tYXhJbnN0YW5jZUNvdW50ID0gZGF0YS5tZXNoUGVyQXR0cmlidXRlICogZGF0YS5jb3VudDtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvblNpemU7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRlbmFibGVBdHRyaWJ1dGUoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24gKyBpICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGdsLmJpbmRCdWZmZXIoIGdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyICk7XG5cblx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHZlcnRleEF0dHJpYlBvaW50ZXIoXG5cdFx0XHRcdFx0XHRcdFx0cHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiArIGksXG5cdFx0XHRcdFx0XHRcdFx0c2l6ZSAvIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplLFxuXHRcdFx0XHRcdFx0XHRcdHR5cGUsXG5cdFx0XHRcdFx0XHRcdFx0bm9ybWFsaXplZCxcblx0XHRcdFx0XHRcdFx0XHRzdHJpZGUgKiBieXRlc1BlckVsZW1lbnQsXG5cdFx0XHRcdFx0XHRcdFx0KCBvZmZzZXQgKyAoIHNpemUgLyBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uU2l6ZSApICogaSApICogYnl0ZXNQZXJFbGVtZW50LFxuXHRcdFx0XHRcdFx0XHRcdGludGVnZXJcblx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBnZW9tZXRyeUF0dHJpYnV0ZS5pc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uU2l6ZTsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24gKyBpLCBnZW9tZXRyeUF0dHJpYnV0ZS5tZXNoUGVyQXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCAhPT0gdHJ1ZSAmJiBnZW9tZXRyeS5fbWF4SW5zdGFuY2VDb3VudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Z2VvbWV0cnkuX21heEluc3RhbmNlQ291bnQgPSBnZW9tZXRyeUF0dHJpYnV0ZS5tZXNoUGVyQXR0cmlidXRlICogZ2VvbWV0cnlBdHRyaWJ1dGUuY291bnQ7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0ZW5hYmxlQXR0cmlidXRlKCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uICsgaSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRnbC5iaW5kQnVmZmVyKCBnbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlciApO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uU2l6ZTsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHR2ZXJ0ZXhBdHRyaWJQb2ludGVyKFxuXHRcdFx0XHRcdFx0XHRcdHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24gKyBpLFxuXHRcdFx0XHRcdFx0XHRcdHNpemUgLyBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uU2l6ZSxcblx0XHRcdFx0XHRcdFx0XHR0eXBlLFxuXHRcdFx0XHRcdFx0XHRcdG5vcm1hbGl6ZWQsXG5cdFx0XHRcdFx0XHRcdFx0c2l6ZSAqIGJ5dGVzUGVyRWxlbWVudCxcblx0XHRcdFx0XHRcdFx0XHQoIHNpemUgLyBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uU2l6ZSApICogaSAqIGJ5dGVzUGVyRWxlbWVudCxcblx0XHRcdFx0XHRcdFx0XHRpbnRlZ2VyXG5cdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbERlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHZhbHVlID0gbWF0ZXJpYWxEZWZhdWx0QXR0cmlidXRlVmFsdWVzWyBuYW1lIF07XG5cblx0XHRcdFx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdHN3aXRjaCAoIHZhbHVlLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0XHRcdFx0Z2wudmVydGV4QXR0cmliMmZ2KCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uLCB2YWx1ZSApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRcdFx0XHRnbC52ZXJ0ZXhBdHRyaWIzZnYoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24sIHZhbHVlICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSA0OlxuXHRcdFx0XHRcdFx0XHRcdGdsLnZlcnRleEF0dHJpYjRmdiggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiwgdmFsdWUgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdGdsLnZlcnRleEF0dHJpYjFmdiggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiwgdmFsdWUgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMoKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdHJlc2V0KCk7XG5cblx0XHRmb3IgKCBjb25zdCBnZW9tZXRyeUlkIGluIGJpbmRpbmdTdGF0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IHByb2dyYW1NYXAgPSBiaW5kaW5nU3RhdGVzWyBnZW9tZXRyeUlkIF07XG5cblx0XHRcdGZvciAoIGNvbnN0IHByb2dyYW1JZCBpbiBwcm9ncmFtTWFwICkge1xuXG5cdFx0XHRcdGNvbnN0IHN0YXRlTWFwID0gcHJvZ3JhbU1hcFsgcHJvZ3JhbUlkIF07XG5cblx0XHRcdFx0Zm9yICggY29uc3Qgd2lyZWZyYW1lIGluIHN0YXRlTWFwICkge1xuXG5cdFx0XHRcdFx0ZGVsZXRlVmVydGV4QXJyYXlPYmplY3QoIHN0YXRlTWFwWyB3aXJlZnJhbWUgXS5vYmplY3QgKTtcblxuXHRcdFx0XHRcdGRlbGV0ZSBzdGF0ZU1hcFsgd2lyZWZyYW1lIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBwcm9ncmFtTWFwWyBwcm9ncmFtSWQgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRkZWxldGUgYmluZGluZ1N0YXRlc1sgZ2VvbWV0cnlJZCBdO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWxlYXNlU3RhdGVzT2ZHZW9tZXRyeSggZ2VvbWV0cnkgKSB7XG5cblx0XHRpZiAoIGJpbmRpbmdTdGF0ZXNbIGdlb21ldHJ5LmlkIF0gPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdGNvbnN0IHByb2dyYW1NYXAgPSBiaW5kaW5nU3RhdGVzWyBnZW9tZXRyeS5pZCBdO1xuXG5cdFx0Zm9yICggY29uc3QgcHJvZ3JhbUlkIGluIHByb2dyYW1NYXAgKSB7XG5cblx0XHRcdGNvbnN0IHN0YXRlTWFwID0gcHJvZ3JhbU1hcFsgcHJvZ3JhbUlkIF07XG5cblx0XHRcdGZvciAoIGNvbnN0IHdpcmVmcmFtZSBpbiBzdGF0ZU1hcCApIHtcblxuXHRcdFx0XHRkZWxldGVWZXJ0ZXhBcnJheU9iamVjdCggc3RhdGVNYXBbIHdpcmVmcmFtZSBdLm9iamVjdCApO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdGF0ZU1hcFsgd2lyZWZyYW1lIF07XG5cblx0XHRcdH1cblxuXHRcdFx0ZGVsZXRlIHByb2dyYW1NYXBbIHByb2dyYW1JZCBdO1xuXG5cdFx0fVxuXG5cdFx0ZGVsZXRlIGJpbmRpbmdTdGF0ZXNbIGdlb21ldHJ5LmlkIF07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbGVhc2VTdGF0ZXNPZlByb2dyYW0oIHByb2dyYW0gKSB7XG5cblx0XHRmb3IgKCBjb25zdCBnZW9tZXRyeUlkIGluIGJpbmRpbmdTdGF0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IHByb2dyYW1NYXAgPSBiaW5kaW5nU3RhdGVzWyBnZW9tZXRyeUlkIF07XG5cblx0XHRcdGlmICggcHJvZ3JhbU1hcFsgcHJvZ3JhbS5pZCBdID09PSB1bmRlZmluZWQgKSBjb250aW51ZTtcblxuXHRcdFx0Y29uc3Qgc3RhdGVNYXAgPSBwcm9ncmFtTWFwWyBwcm9ncmFtLmlkIF07XG5cblx0XHRcdGZvciAoIGNvbnN0IHdpcmVmcmFtZSBpbiBzdGF0ZU1hcCApIHtcblxuXHRcdFx0XHRkZWxldGVWZXJ0ZXhBcnJheU9iamVjdCggc3RhdGVNYXBbIHdpcmVmcmFtZSBdLm9iamVjdCApO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdGF0ZU1hcFsgd2lyZWZyYW1lIF07XG5cblx0XHRcdH1cblxuXHRcdFx0ZGVsZXRlIHByb2dyYW1NYXBbIHByb2dyYW0uaWQgXTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVzZXQoKSB7XG5cblx0XHRyZXNldERlZmF1bHRTdGF0ZSgpO1xuXHRcdGZvcmNlVXBkYXRlID0gdHJ1ZTtcblxuXHRcdGlmICggY3VycmVudFN0YXRlID09PSBkZWZhdWx0U3RhdGUgKSByZXR1cm47XG5cblx0XHRjdXJyZW50U3RhdGUgPSBkZWZhdWx0U3RhdGU7XG5cdFx0YmluZFZlcnRleEFycmF5T2JqZWN0KCBjdXJyZW50U3RhdGUub2JqZWN0ICk7XG5cblx0fVxuXG5cdC8vIGZvciBiYWNrd2FyZC1jb21wYXRpYmlsaXR5XG5cblx0ZnVuY3Rpb24gcmVzZXREZWZhdWx0U3RhdGUoKSB7XG5cblx0XHRkZWZhdWx0U3RhdGUuZ2VvbWV0cnkgPSBudWxsO1xuXHRcdGRlZmF1bHRTdGF0ZS5wcm9ncmFtID0gbnVsbDtcblx0XHRkZWZhdWx0U3RhdGUud2lyZWZyYW1lID0gZmFsc2U7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRzZXR1cDogc2V0dXAsXG5cdFx0cmVzZXQ6IHJlc2V0LFxuXHRcdHJlc2V0RGVmYXVsdFN0YXRlOiByZXNldERlZmF1bHRTdGF0ZSxcblx0XHRkaXNwb3NlOiBkaXNwb3NlLFxuXHRcdHJlbGVhc2VTdGF0ZXNPZkdlb21ldHJ5OiByZWxlYXNlU3RhdGVzT2ZHZW9tZXRyeSxcblx0XHRyZWxlYXNlU3RhdGVzT2ZQcm9ncmFtOiByZWxlYXNlU3RhdGVzT2ZQcm9ncmFtLFxuXG5cdFx0aW5pdEF0dHJpYnV0ZXM6IGluaXRBdHRyaWJ1dGVzLFxuXHRcdGVuYWJsZUF0dHJpYnV0ZTogZW5hYmxlQXR0cmlidXRlLFxuXHRcdGRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzOiBkaXNhYmxlVW51c2VkQXR0cmlidXRlc1xuXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xCdWZmZXJSZW5kZXJlciggZ2wsIGV4dGVuc2lvbnMsIGluZm8gKSB7XG5cblx0bGV0IG1vZGU7XG5cblx0ZnVuY3Rpb24gc2V0TW9kZSggdmFsdWUgKSB7XG5cblx0XHRtb2RlID0gdmFsdWU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlciggc3RhcnQsIGNvdW50ICkge1xuXG5cdFx0Z2wuZHJhd0FycmF5cyggbW9kZSwgc3RhcnQsIGNvdW50ICk7XG5cblx0XHRpbmZvLnVwZGF0ZSggY291bnQsIG1vZGUsIDEgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVySW5zdGFuY2VzKCBzdGFydCwgY291bnQsIHByaW1jb3VudCApIHtcblxuXHRcdGlmICggcHJpbWNvdW50ID09PSAwICkgcmV0dXJuO1xuXG5cdFx0Z2wuZHJhd0FycmF5c0luc3RhbmNlZCggbW9kZSwgc3RhcnQsIGNvdW50LCBwcmltY291bnQgKTtcblxuXHRcdGluZm8udXBkYXRlKCBjb3VudCwgbW9kZSwgcHJpbWNvdW50ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlck11bHRpRHJhdyggc3RhcnRzLCBjb3VudHMsIGRyYXdDb3VudCApIHtcblxuXHRcdGlmICggZHJhd0NvdW50ID09PSAwICkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9tdWx0aV9kcmF3JyApO1xuXHRcdGV4dGVuc2lvbi5tdWx0aURyYXdBcnJheXNXRUJHTCggbW9kZSwgc3RhcnRzLCAwLCBjb3VudHMsIDAsIGRyYXdDb3VudCApO1xuXG5cdFx0bGV0IGVsZW1lbnRDb3VudCA9IDA7XG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZHJhd0NvdW50OyBpICsrICkge1xuXG5cdFx0XHRlbGVtZW50Q291bnQgKz0gY291bnRzWyBpIF07XG5cblx0XHR9XG5cblx0XHRpbmZvLnVwZGF0ZSggZWxlbWVudENvdW50LCBtb2RlLCAxICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlck11bHRpRHJhd0luc3RhbmNlcyggc3RhcnRzLCBjb3VudHMsIGRyYXdDb3VudCwgcHJpbWNvdW50ICkge1xuXG5cdFx0aWYgKCBkcmF3Q291bnQgPT09IDAgKSByZXR1cm47XG5cblx0XHRjb25zdCBleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX211bHRpX2RyYXcnICk7XG5cblx0XHRpZiAoIGV4dGVuc2lvbiA9PT0gbnVsbCApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgc3RhcnRzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRyZW5kZXJJbnN0YW5jZXMoIHN0YXJ0c1sgaSBdLCBjb3VudHNbIGkgXSwgcHJpbWNvdW50WyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0ZXh0ZW5zaW9uLm11bHRpRHJhd0FycmF5c0luc3RhbmNlZFdFQkdMKCBtb2RlLCBzdGFydHMsIDAsIGNvdW50cywgMCwgcHJpbWNvdW50LCAwLCBkcmF3Q291bnQgKTtcblxuXHRcdFx0bGV0IGVsZW1lbnRDb3VudCA9IDA7XG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkcmF3Q291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0ZWxlbWVudENvdW50ICs9IGNvdW50c1sgaSBdICogcHJpbWNvdW50WyBpIF07XG5cblx0XHRcdH1cblxuXHRcdFx0aW5mby51cGRhdGUoIGVsZW1lbnRDb3VudCwgbW9kZSwgMSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXG5cdHRoaXMuc2V0TW9kZSA9IHNldE1vZGU7XG5cdHRoaXMucmVuZGVyID0gcmVuZGVyO1xuXHR0aGlzLnJlbmRlckluc3RhbmNlcyA9IHJlbmRlckluc3RhbmNlcztcblx0dGhpcy5yZW5kZXJNdWx0aURyYXcgPSByZW5kZXJNdWx0aURyYXc7XG5cdHRoaXMucmVuZGVyTXVsdGlEcmF3SW5zdGFuY2VzID0gcmVuZGVyTXVsdGlEcmF3SW5zdGFuY2VzO1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMQ2FwYWJpbGl0aWVzKCBnbCwgZXh0ZW5zaW9ucywgcGFyYW1ldGVycywgdXRpbHMgKSB7XG5cblx0bGV0IG1heEFuaXNvdHJvcHk7XG5cblx0ZnVuY3Rpb24gZ2V0TWF4QW5pc290cm9weSgpIHtcblxuXHRcdGlmICggbWF4QW5pc290cm9weSAhPT0gdW5kZWZpbmVkICkgcmV0dXJuIG1heEFuaXNvdHJvcHk7XG5cblx0XHRpZiAoIGV4dGVuc2lvbnMuaGFzKCAnRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApID09PSB0cnVlICkge1xuXG5cdFx0XHRjb25zdCBleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKTtcblxuXHRcdFx0bWF4QW5pc290cm9weSA9IGdsLmdldFBhcmFtZXRlciggZXh0ZW5zaW9uLk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bWF4QW5pc290cm9weSA9IDA7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF4QW5pc290cm9weTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4dHVyZUZvcm1hdFJlYWRhYmxlKCB0ZXh0dXJlRm9ybWF0ICkge1xuXG5cdFx0aWYgKCB0ZXh0dXJlRm9ybWF0ICE9PSBSR0JBRm9ybWF0ICYmIHV0aWxzLmNvbnZlcnQoIHRleHR1cmVGb3JtYXQgKSAhPT0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5JTVBMRU1FTlRBVElPTl9DT0xPUl9SRUFEX0ZPUk1BVCApICkge1xuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4dHVyZVR5cGVSZWFkYWJsZSggdGV4dHVyZVR5cGUgKSB7XG5cblx0XHRjb25zdCBoYWxmRmxvYXRTdXBwb3J0ZWRCeUV4dCA9ICggdGV4dHVyZVR5cGUgPT09IEhhbGZGbG9hdFR5cGUgKSAmJiAoIGV4dGVuc2lvbnMuaGFzKCAnRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0JyApIHx8IGV4dGVuc2lvbnMuaGFzKCAnRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdCcgKSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlVHlwZSAhPT0gVW5zaWduZWRCeXRlVHlwZSAmJiB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlVHlwZSApICE9PSBnbC5nZXRQYXJhbWV0ZXIoIGdsLklNUExFTUVOVEFUSU9OX0NPTE9SX1JFQURfVFlQRSApICYmIC8vIEVkZ2UgYW5kIENocm9tZSBNYWMgPCA1MiAoIzk1MTMpXG5cdFx0XHR0ZXh0dXJlVHlwZSAhPT0gRmxvYXRUeXBlICYmICEgaGFsZkZsb2F0U3VwcG9ydGVkQnlFeHQgKSB7XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRNYXhQcmVjaXNpb24oIHByZWNpc2lvbiApIHtcblxuXHRcdGlmICggcHJlY2lzaW9uID09PSAnaGlnaHAnICkge1xuXG5cdFx0XHRpZiAoIGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCggZ2wuVkVSVEVYX1NIQURFUiwgZ2wuSElHSF9GTE9BVCApLnByZWNpc2lvbiA+IDAgJiZcblx0XHRcdFx0Z2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KCBnbC5GUkFHTUVOVF9TSEFERVIsIGdsLkhJR0hfRkxPQVQgKS5wcmVjaXNpb24gPiAwICkge1xuXG5cdFx0XHRcdHJldHVybiAnaGlnaHAnO1xuXG5cdFx0XHR9XG5cblx0XHRcdHByZWNpc2lvbiA9ICdtZWRpdW1wJztcblxuXHRcdH1cblxuXHRcdGlmICggcHJlY2lzaW9uID09PSAnbWVkaXVtcCcgKSB7XG5cblx0XHRcdGlmICggZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KCBnbC5WRVJURVhfU0hBREVSLCBnbC5NRURJVU1fRkxPQVQgKS5wcmVjaXNpb24gPiAwICYmXG5cdFx0XHRcdGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCggZ2wuRlJBR01FTlRfU0hBREVSLCBnbC5NRURJVU1fRkxPQVQgKS5wcmVjaXNpb24gPiAwICkge1xuXG5cdFx0XHRcdHJldHVybiAnbWVkaXVtcCc7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiAnbG93cCc7XG5cblx0fVxuXG5cdGxldCBwcmVjaXNpb24gPSBwYXJhbWV0ZXJzLnByZWNpc2lvbiAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5wcmVjaXNpb24gOiAnaGlnaHAnO1xuXHRjb25zdCBtYXhQcmVjaXNpb24gPSBnZXRNYXhQcmVjaXNpb24oIHByZWNpc2lvbiApO1xuXG5cdGlmICggbWF4UHJlY2lzaW9uICE9PSBwcmVjaXNpb24gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOicsIHByZWNpc2lvbiwgJ25vdCBzdXBwb3J0ZWQsIHVzaW5nJywgbWF4UHJlY2lzaW9uLCAnaW5zdGVhZC4nICk7XG5cdFx0cHJlY2lzaW9uID0gbWF4UHJlY2lzaW9uO1xuXG5cdH1cblxuXHRjb25zdCBsb2dhcml0aG1pY0RlcHRoQnVmZmVyID0gcGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyID09PSB0cnVlO1xuXHRjb25zdCByZXZlcnNlZERlcHRoQnVmZmVyID0gcGFyYW1ldGVycy5yZXZlcnNlZERlcHRoQnVmZmVyID09PSB0cnVlICYmIGV4dGVuc2lvbnMuaGFzKCAnRVhUX2NsaXBfY29udHJvbCcgKTtcblxuXHRjb25zdCBtYXhUZXh0dXJlcyA9IGdsLmdldFBhcmFtZXRlciggZ2wuTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMgKTtcblx0Y29uc3QgbWF4VmVydGV4VGV4dHVyZXMgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9WRVJURVhfVEVYVFVSRV9JTUFHRV9VTklUUyApO1xuXHRjb25zdCBtYXhUZXh0dXJlU2l6ZSA9IGdsLmdldFBhcmFtZXRlciggZ2wuTUFYX1RFWFRVUkVfU0laRSApO1xuXHRjb25zdCBtYXhDdWJlbWFwU2l6ZSA9IGdsLmdldFBhcmFtZXRlciggZ2wuTUFYX0NVQkVfTUFQX1RFWFRVUkVfU0laRSApO1xuXG5cdGNvbnN0IG1heEF0dHJpYnV0ZXMgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9WRVJURVhfQVRUUklCUyApO1xuXHRjb25zdCBtYXhWZXJ0ZXhVbmlmb3JtcyA9IGdsLmdldFBhcmFtZXRlciggZ2wuTUFYX1ZFUlRFWF9VTklGT1JNX1ZFQ1RPUlMgKTtcblx0Y29uc3QgbWF4VmFyeWluZ3MgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9WQVJZSU5HX1ZFQ1RPUlMgKTtcblx0Y29uc3QgbWF4RnJhZ21lbnRVbmlmb3JtcyA9IGdsLmdldFBhcmFtZXRlciggZ2wuTUFYX0ZSQUdNRU5UX1VOSUZPUk1fVkVDVE9SUyApO1xuXG5cdGNvbnN0IHZlcnRleFRleHR1cmVzID0gbWF4VmVydGV4VGV4dHVyZXMgPiAwO1xuXG5cdGNvbnN0IG1heFNhbXBsZXMgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9TQU1QTEVTICk7XG5cblx0cmV0dXJuIHtcblxuXHRcdGlzV2ViR0wyOiB0cnVlLCAvLyBrZWVwaW5nIHRoaXMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cblx0XHRnZXRNYXhBbmlzb3Ryb3B5OiBnZXRNYXhBbmlzb3Ryb3B5LFxuXHRcdGdldE1heFByZWNpc2lvbjogZ2V0TWF4UHJlY2lzaW9uLFxuXG5cdFx0dGV4dHVyZUZvcm1hdFJlYWRhYmxlOiB0ZXh0dXJlRm9ybWF0UmVhZGFibGUsXG5cdFx0dGV4dHVyZVR5cGVSZWFkYWJsZTogdGV4dHVyZVR5cGVSZWFkYWJsZSxcblxuXHRcdHByZWNpc2lvbjogcHJlY2lzaW9uLFxuXHRcdGxvZ2FyaXRobWljRGVwdGhCdWZmZXI6IGxvZ2FyaXRobWljRGVwdGhCdWZmZXIsXG5cdFx0cmV2ZXJzZWREZXB0aEJ1ZmZlcjogcmV2ZXJzZWREZXB0aEJ1ZmZlcixcblxuXHRcdG1heFRleHR1cmVzOiBtYXhUZXh0dXJlcyxcblx0XHRtYXhWZXJ0ZXhUZXh0dXJlczogbWF4VmVydGV4VGV4dHVyZXMsXG5cdFx0bWF4VGV4dHVyZVNpemU6IG1heFRleHR1cmVTaXplLFxuXHRcdG1heEN1YmVtYXBTaXplOiBtYXhDdWJlbWFwU2l6ZSxcblxuXHRcdG1heEF0dHJpYnV0ZXM6IG1heEF0dHJpYnV0ZXMsXG5cdFx0bWF4VmVydGV4VW5pZm9ybXM6IG1heFZlcnRleFVuaWZvcm1zLFxuXHRcdG1heFZhcnlpbmdzOiBtYXhWYXJ5aW5ncyxcblx0XHRtYXhGcmFnbWVudFVuaWZvcm1zOiBtYXhGcmFnbWVudFVuaWZvcm1zLFxuXG5cdFx0dmVydGV4VGV4dHVyZXM6IHZlcnRleFRleHR1cmVzLFxuXG5cdFx0bWF4U2FtcGxlczogbWF4U2FtcGxlc1xuXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xDbGlwcGluZyggcHJvcGVydGllcyApIHtcblxuXHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0bGV0IGdsb2JhbFN0YXRlID0gbnVsbCxcblx0XHRudW1HbG9iYWxQbGFuZXMgPSAwLFxuXHRcdGxvY2FsQ2xpcHBpbmdFbmFibGVkID0gZmFsc2UsXG5cdFx0cmVuZGVyaW5nU2hhZG93cyA9IGZhbHNlO1xuXG5cdGNvbnN0IHBsYW5lID0gbmV3IFBsYW5lKCksXG5cdFx0dmlld05vcm1hbE1hdHJpeCA9IG5ldyBNYXRyaXgzKCksXG5cblx0XHR1bmlmb3JtID0geyB2YWx1ZTogbnVsbCwgbmVlZHNVcGRhdGU6IGZhbHNlIH07XG5cblx0dGhpcy51bmlmb3JtID0gdW5pZm9ybTtcblx0dGhpcy5udW1QbGFuZXMgPSAwO1xuXHR0aGlzLm51bUludGVyc2VjdGlvbiA9IDA7XG5cblx0dGhpcy5pbml0ID0gZnVuY3Rpb24gKCBwbGFuZXMsIGVuYWJsZUxvY2FsQ2xpcHBpbmcgKSB7XG5cblx0XHRjb25zdCBlbmFibGVkID1cblx0XHRcdHBsYW5lcy5sZW5ndGggIT09IDAgfHxcblx0XHRcdGVuYWJsZUxvY2FsQ2xpcHBpbmcgfHxcblx0XHRcdC8vIGVuYWJsZSBzdGF0ZSBvZiBwcmV2aW91cyBmcmFtZSAtIHRoZSBjbGlwcGluZyBjb2RlIGhhcyB0b1xuXHRcdFx0Ly8gcnVuIGFub3RoZXIgZnJhbWUgaW4gb3JkZXIgdG8gcmVzZXQgdGhlIHN0YXRlOlxuXHRcdFx0bnVtR2xvYmFsUGxhbmVzICE9PSAwIHx8XG5cdFx0XHRsb2NhbENsaXBwaW5nRW5hYmxlZDtcblxuXHRcdGxvY2FsQ2xpcHBpbmdFbmFibGVkID0gZW5hYmxlTG9jYWxDbGlwcGluZztcblxuXHRcdG51bUdsb2JhbFBsYW5lcyA9IHBsYW5lcy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gZW5hYmxlZDtcblxuXHR9O1xuXG5cdHRoaXMuYmVnaW5TaGFkb3dzID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmVuZGVyaW5nU2hhZG93cyA9IHRydWU7XG5cdFx0cHJvamVjdFBsYW5lcyggbnVsbCApO1xuXG5cdH07XG5cblx0dGhpcy5lbmRTaGFkb3dzID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmVuZGVyaW5nU2hhZG93cyA9IGZhbHNlO1xuXG5cdH07XG5cblx0dGhpcy5zZXRHbG9iYWxTdGF0ZSA9IGZ1bmN0aW9uICggcGxhbmVzLCBjYW1lcmEgKSB7XG5cblx0XHRnbG9iYWxTdGF0ZSA9IHByb2plY3RQbGFuZXMoIHBsYW5lcywgY2FtZXJhLCAwICk7XG5cblx0fTtcblxuXHR0aGlzLnNldFN0YXRlID0gZnVuY3Rpb24gKCBtYXRlcmlhbCwgY2FtZXJhLCB1c2VDYWNoZSApIHtcblxuXHRcdGNvbnN0IHBsYW5lcyA9IG1hdGVyaWFsLmNsaXBwaW5nUGxhbmVzLFxuXHRcdFx0Y2xpcEludGVyc2VjdGlvbiA9IG1hdGVyaWFsLmNsaXBJbnRlcnNlY3Rpb24sXG5cdFx0XHRjbGlwU2hhZG93cyA9IG1hdGVyaWFsLmNsaXBTaGFkb3dzO1xuXG5cdFx0Y29uc3QgbWF0ZXJpYWxQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICk7XG5cblx0XHRpZiAoICEgbG9jYWxDbGlwcGluZ0VuYWJsZWQgfHwgcGxhbmVzID09PSBudWxsIHx8IHBsYW5lcy5sZW5ndGggPT09IDAgfHwgcmVuZGVyaW5nU2hhZG93cyAmJiAhIGNsaXBTaGFkb3dzICkge1xuXG5cdFx0XHQvLyB0aGVyZSdzIG5vIGxvY2FsIGNsaXBwaW5nXG5cblx0XHRcdGlmICggcmVuZGVyaW5nU2hhZG93cyApIHtcblxuXHRcdFx0XHQvLyB0aGVyZSdzIG5vIGdsb2JhbCBjbGlwcGluZ1xuXG5cdFx0XHRcdHByb2plY3RQbGFuZXMoIG51bGwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXNldEdsb2JhbFN0YXRlKCk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IG5HbG9iYWwgPSByZW5kZXJpbmdTaGFkb3dzID8gMCA6IG51bUdsb2JhbFBsYW5lcyxcblx0XHRcdFx0bEdsb2JhbCA9IG5HbG9iYWwgKiA0O1xuXG5cdFx0XHRsZXQgZHN0QXJyYXkgPSBtYXRlcmlhbFByb3BlcnRpZXMuY2xpcHBpbmdTdGF0ZSB8fCBudWxsO1xuXG5cdFx0XHR1bmlmb3JtLnZhbHVlID0gZHN0QXJyYXk7IC8vIGVuc3VyZSB1bmlxdWUgc3RhdGVcblxuXHRcdFx0ZHN0QXJyYXkgPSBwcm9qZWN0UGxhbmVzKCBwbGFuZXMsIGNhbWVyYSwgbEdsb2JhbCwgdXNlQ2FjaGUgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBsR2xvYmFsOyArKyBpICkge1xuXG5cdFx0XHRcdGRzdEFycmF5WyBpIF0gPSBnbG9iYWxTdGF0ZVsgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5jbGlwcGluZ1N0YXRlID0gZHN0QXJyYXk7XG5cdFx0XHR0aGlzLm51bUludGVyc2VjdGlvbiA9IGNsaXBJbnRlcnNlY3Rpb24gPyB0aGlzLm51bVBsYW5lcyA6IDA7XG5cdFx0XHR0aGlzLm51bVBsYW5lcyArPSBuR2xvYmFsO1xuXG5cdFx0fVxuXG5cblx0fTtcblxuXHRmdW5jdGlvbiByZXNldEdsb2JhbFN0YXRlKCkge1xuXG5cdFx0aWYgKCB1bmlmb3JtLnZhbHVlICE9PSBnbG9iYWxTdGF0ZSApIHtcblxuXHRcdFx0dW5pZm9ybS52YWx1ZSA9IGdsb2JhbFN0YXRlO1xuXHRcdFx0dW5pZm9ybS5uZWVkc1VwZGF0ZSA9IG51bUdsb2JhbFBsYW5lcyA+IDA7XG5cblx0XHR9XG5cblx0XHRzY29wZS5udW1QbGFuZXMgPSBudW1HbG9iYWxQbGFuZXM7XG5cdFx0c2NvcGUubnVtSW50ZXJzZWN0aW9uID0gMDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcHJvamVjdFBsYW5lcyggcGxhbmVzLCBjYW1lcmEsIGRzdE9mZnNldCwgc2tpcFRyYW5zZm9ybSApIHtcblxuXHRcdGNvbnN0IG5QbGFuZXMgPSBwbGFuZXMgIT09IG51bGwgPyBwbGFuZXMubGVuZ3RoIDogMDtcblx0XHRsZXQgZHN0QXJyYXkgPSBudWxsO1xuXG5cdFx0aWYgKCBuUGxhbmVzICE9PSAwICkge1xuXG5cdFx0XHRkc3RBcnJheSA9IHVuaWZvcm0udmFsdWU7XG5cblx0XHRcdGlmICggc2tpcFRyYW5zZm9ybSAhPT0gdHJ1ZSB8fCBkc3RBcnJheSA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRjb25zdCBmbGF0U2l6ZSA9IGRzdE9mZnNldCArIG5QbGFuZXMgKiA0LFxuXHRcdFx0XHRcdHZpZXdNYXRyaXggPSBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlO1xuXG5cdFx0XHRcdHZpZXdOb3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KCB2aWV3TWF0cml4ICk7XG5cblx0XHRcdFx0aWYgKCBkc3RBcnJheSA9PT0gbnVsbCB8fCBkc3RBcnJheS5sZW5ndGggPCBmbGF0U2l6ZSApIHtcblxuXHRcdFx0XHRcdGRzdEFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggZmxhdFNpemUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpNCA9IGRzdE9mZnNldDsgaSAhPT0gblBsYW5lczsgKysgaSwgaTQgKz0gNCApIHtcblxuXHRcdFx0XHRcdHBsYW5lLmNvcHkoIHBsYW5lc1sgaSBdICkuYXBwbHlNYXRyaXg0KCB2aWV3TWF0cml4LCB2aWV3Tm9ybWFsTWF0cml4ICk7XG5cblx0XHRcdFx0XHRwbGFuZS5ub3JtYWwudG9BcnJheSggZHN0QXJyYXksIGk0ICk7XG5cdFx0XHRcdFx0ZHN0QXJyYXlbIGk0ICsgMyBdID0gcGxhbmUuY29uc3RhbnQ7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHVuaWZvcm0udmFsdWUgPSBkc3RBcnJheTtcblx0XHRcdHVuaWZvcm0ubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0c2NvcGUubnVtUGxhbmVzID0gblBsYW5lcztcblx0XHRzY29wZS5udW1JbnRlcnNlY3Rpb24gPSAwO1xuXG5cdFx0cmV0dXJuIGRzdEFycmF5O1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBXZWJHTEN1YmVNYXBzKCByZW5kZXJlciApIHtcblxuXHRsZXQgY3ViZW1hcHMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdGZ1bmN0aW9uIG1hcFRleHR1cmVNYXBwaW5nKCB0ZXh0dXJlLCBtYXBwaW5nICkge1xuXG5cdFx0aWYgKCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyApIHtcblxuXHRcdFx0dGV4dHVyZS5tYXBwaW5nID0gQ3ViZVJlZmxlY3Rpb25NYXBwaW5nO1xuXG5cdFx0fSBlbHNlIGlmICggbWFwcGluZyA9PT0gRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmcgKSB7XG5cblx0XHRcdHRleHR1cmUubWFwcGluZyA9IEN1YmVSZWZyYWN0aW9uTWFwcGluZztcblxuXHRcdH1cblxuXHRcdHJldHVybiB0ZXh0dXJlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXQoIHRleHR1cmUgKSB7XG5cblx0XHRpZiAoIHRleHR1cmUgJiYgdGV4dHVyZS5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGNvbnN0IG1hcHBpbmcgPSB0ZXh0dXJlLm1hcHBpbmc7XG5cblx0XHRcdGlmICggbWFwcGluZyA9PT0gRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcgfHwgbWFwcGluZyA9PT0gRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmcgKSB7XG5cblx0XHRcdFx0aWYgKCBjdWJlbWFwcy5oYXMoIHRleHR1cmUgKSApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGN1YmVtYXAgPSBjdWJlbWFwcy5nZXQoIHRleHR1cmUgKS50ZXh0dXJlO1xuXHRcdFx0XHRcdHJldHVybiBtYXBUZXh0dXJlTWFwcGluZyggY3ViZW1hcCwgdGV4dHVyZS5tYXBwaW5nICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnN0IGltYWdlID0gdGV4dHVyZS5pbWFnZTtcblxuXHRcdFx0XHRcdGlmICggaW1hZ2UgJiYgaW1hZ2UuaGVpZ2h0ID4gMCApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgcmVuZGVyVGFyZ2V0ID0gbmV3IFdlYkdMQ3ViZVJlbmRlclRhcmdldCggaW1hZ2UuaGVpZ2h0ICk7XG5cdFx0XHRcdFx0XHRyZW5kZXJUYXJnZXQuZnJvbUVxdWlyZWN0YW5ndWxhclRleHR1cmUoIHJlbmRlcmVyLCB0ZXh0dXJlICk7XG5cdFx0XHRcdFx0XHRjdWJlbWFwcy5zZXQoIHRleHR1cmUsIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdFx0XHR0ZXh0dXJlLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gbWFwVGV4dHVyZU1hcHBpbmcoIHJlbmRlclRhcmdldC50ZXh0dXJlLCB0ZXh0dXJlLm1hcHBpbmcgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIGltYWdlIG5vdCB5ZXQgcmVhZHkuIHRyeSB0aGUgY29udmVyc2lvbiBuZXh0IGZyYW1lXG5cblx0XHRcdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uVGV4dHVyZURpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IGV2ZW50LnRhcmdldDtcblxuXHRcdHRleHR1cmUucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7XG5cblx0XHRjb25zdCBjdWJlbWFwID0gY3ViZW1hcHMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIGN1YmVtYXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y3ViZW1hcHMuZGVsZXRlKCB0ZXh0dXJlICk7XG5cdFx0XHRjdWJlbWFwLmRpc3Bvc2UoKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdGN1YmVtYXBzID0gbmV3IFdlYWtNYXAoKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGdldCxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cdH07XG5cbn1cblxuY29uc3QgTE9EX01JTiA9IDQ7XG5cbi8vIFRoZSBzdGFuZGFyZCBkZXZpYXRpb25zIChyYWRpYW5zKSBhc3NvY2lhdGVkIHdpdGggdGhlIGV4dHJhIG1pcHMuIFRoZXNlIGFyZVxuLy8gY2hvc2VuIHRvIGFwcHJveGltYXRlIGEgVHJvd2JyaWRnZS1SZWl0eiBkaXN0cmlidXRpb24gZnVuY3Rpb24gdGltZXMgdGhlXG4vLyBnZW9tZXRyaWMgc2hhZG93aW5nIGZ1bmN0aW9uLiBUaGVzZSBzaWdtYSB2YWx1ZXMgc3F1YXJlZCBtdXN0IG1hdGNoIHRoZVxuLy8gdmFyaWFuY2UgI2RlZmluZXMgaW4gY3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50Lmdsc2wuanMuXG5jb25zdCBFWFRSQV9MT0RfU0lHTUEgPSBbIDAuMTI1LCAwLjIxNSwgMC4zNSwgMC40NDYsIDAuNTI2LCAwLjU4MiBdO1xuXG4vLyBUaGUgbWF4aW11bSBsZW5ndGggb2YgdGhlIGJsdXIgZm9yIGxvb3AuIFNtYWxsZXIgc2lnbWFzIHdpbGwgdXNlIGZld2VyXG4vLyBzYW1wbGVzIGFuZCBleGl0IGVhcmx5LCBidXQgbm90IHJlY29tcGlsZSB0aGUgc2hhZGVyLlxuY29uc3QgTUFYX1NBTVBMRVMgPSAyMDtcblxuY29uc3QgX2ZsYXRDYW1lcmEgPSAvKkBfX1BVUkVfXyovIG5ldyBPcnRob2dyYXBoaWNDYW1lcmEoKTtcbmNvbnN0IF9jbGVhckNvbG9yID0gLypAX19QVVJFX18qLyBuZXcgQ29sb3IoKTtcbmxldCBfb2xkVGFyZ2V0ID0gbnVsbDtcbmxldCBfb2xkQWN0aXZlQ3ViZUZhY2UgPSAwO1xubGV0IF9vbGRBY3RpdmVNaXBtYXBMZXZlbCA9IDA7XG5sZXQgX29sZFhyRW5hYmxlZCA9IGZhbHNlO1xuXG4vLyBHb2xkZW4gUmF0aW9cbmNvbnN0IFBISSA9ICggMSArIE1hdGguc3FydCggNSApICkgLyAyO1xuY29uc3QgSU5WX1BISSA9IDEgLyBQSEk7XG5cbi8vIFZlcnRpY2VzIG9mIGEgZG9kZWNhaGVkcm9uIChleGNlcHQgdGhlIG9wcG9zaXRlcywgd2hpY2ggcmVwcmVzZW50IHRoZVxuLy8gc2FtZSBheGlzKSwgdXNlZCBhcyBheGlzIGRpcmVjdGlvbnMgZXZlbmx5IHNwcmVhZCBvbiBhIHNwaGVyZS5cbmNvbnN0IF9heGlzRGlyZWN0aW9ucyA9IFtcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggLSBQSEksIElOVl9QSEksIDAgKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggUEhJLCBJTlZfUEhJLCAwICksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIC0gSU5WX1BISSwgMCwgUEhJICksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIElOVl9QSEksIDAsIFBISSApLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAwLCBQSEksIC0gSU5WX1BISSApLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAwLCBQSEksIElOVl9QSEkgKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggLTEsIDEsIC0xICksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDEsIDEsIC0xICksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIC0xLCAxLCAxICksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDEsIDEsIDEgKSBdO1xuXG5jb25zdCBfb3JpZ2luID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgZ2VuZXJhdGVzIGEgUHJlZmlsdGVyZWQsIE1pcG1hcHBlZCBSYWRpYW5jZSBFbnZpcm9ubWVudCBNYXBcbiAqIChQTVJFTSkgZnJvbSBhIGN1YmVNYXAgZW52aXJvbm1lbnQgdGV4dHVyZS4gVGhpcyBhbGxvd3MgZGlmZmVyZW50IGxldmVscyBvZlxuICogYmx1ciB0byBiZSBxdWlja2x5IGFjY2Vzc2VkIGJhc2VkIG9uIG1hdGVyaWFsIHJvdWdobmVzcy4gSXQgaXMgcGFja2VkIGludG8gYVxuICogc3BlY2lhbCBDdWJlVVYgZm9ybWF0IHRoYXQgYWxsb3dzIHVzIHRvIHBlcmZvcm0gY3VzdG9tIGludGVycG9sYXRpb24gc28gdGhhdFxuICogd2UgY2FuIHN1cHBvcnQgbm9ubGluZWFyIGZvcm1hdHMgc3VjaCBhcyBSR0JFLiBVbmxpa2UgYSB0cmFkaXRpb25hbCBtaXBtYXBcbiAqIGNoYWluLCBpdCBvbmx5IGdvZXMgZG93biB0byB0aGUgTE9EX01JTiBsZXZlbCAoYWJvdmUpLCBhbmQgdGhlbiBjcmVhdGVzIGV4dHJhXG4gKiBldmVuIG1vcmUgZmlsdGVyZWQgJ21pcHMnIGF0IHRoZSBzYW1lIExPRF9NSU4gcmVzb2x1dGlvbiwgYXNzb2NpYXRlZCB3aXRoXG4gKiBoaWdoZXIgcm91Z2huZXNzIGxldmVscy4gSW4gdGhpcyB3YXkgd2UgbWFpbnRhaW4gcmVzb2x1dGlvbiB0byBzbW9vdGhseVxuICogaW50ZXJwb2xhdGUgZGlmZnVzZSBsaWdodGluZyB3aGlsZSBsaW1pdGluZyBzYW1wbGluZyBjb21wdXRhdGlvbi5cbiAqXG4gKiBQYXBlcjogRmFzdCwgQWNjdXJhdGUgSW1hZ2UtQmFzZWQgTGlnaHRpbmc6XG4gKiB7QGxpbmsgaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xNXk4cl9VcEtsVTlTdlY0SUxiMEMzcUNQZWNTOHB2THovdmlld31cbiovXG5jbGFzcyBQTVJFTUdlbmVyYXRvciB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgUE1SRU0gZ2VuZXJhdG9yLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1dlYkdMUmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHJlbmRlcmVyICkge1xuXG5cdFx0dGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcblx0XHR0aGlzLl9waW5nUG9uZ1JlbmRlclRhcmdldCA9IG51bGw7XG5cblx0XHR0aGlzLl9sb2RNYXggPSAwO1xuXHRcdHRoaXMuX2N1YmVTaXplID0gMDtcblx0XHR0aGlzLl9sb2RQbGFuZXMgPSBbXTtcblx0XHR0aGlzLl9zaXplTG9kcyA9IFtdO1xuXHRcdHRoaXMuX3NpZ21hcyA9IFtdO1xuXG5cdFx0dGhpcy5fYmx1ck1hdGVyaWFsID0gbnVsbDtcblx0XHR0aGlzLl9jdWJlbWFwTWF0ZXJpYWwgPSBudWxsO1xuXHRcdHRoaXMuX2VxdWlyZWN0TWF0ZXJpYWwgPSBudWxsO1xuXG5cdFx0dGhpcy5fY29tcGlsZU1hdGVyaWFsKCB0aGlzLl9ibHVyTWF0ZXJpYWwgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyBhIFBNUkVNIGZyb20gYSBzdXBwbGllZCBTY2VuZSwgd2hpY2ggY2FuIGJlIGZhc3RlciB0aGFuIHVzaW5nIGFuXG5cdCAqIGltYWdlIGlmIG5ldHdvcmtpbmcgYmFuZHdpZHRoIGlzIGxvdy4gT3B0aW9uYWwgc2lnbWEgc3BlY2lmaWVzIGEgYmx1ciByYWRpdXNcblx0ICogaW4gcmFkaWFucyB0byBiZSBhcHBsaWVkIHRvIHRoZSBzY2VuZSBiZWZvcmUgUE1SRU0gZ2VuZXJhdGlvbi4gT3B0aW9uYWwgbmVhclxuXHQgKiBhbmQgZmFyIHBsYW5lcyBlbnN1cmUgdGhlIHNjZW5lIGlzIHJlbmRlcmVkIGluIGl0cyBlbnRpcmV0eS5cblx0ICpcblx0ICogQHBhcmFtIHtTY2VuZX0gc2NlbmUgLSBUaGUgc2NlbmUgdG8gYmUgY2FwdHVyZWQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbc2lnbWE9MF0gLSBUaGUgYmx1ciByYWRpdXMgaW4gcmFkaWFucy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuZWFyPTAuMV0gLSBUaGUgbmVhciBwbGFuZSBkaXN0YW5jZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtmYXI9MTAwXSAtIFRoZSBmYXIgcGxhbmUgZGlzdGFuY2UuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gLSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuc2l6ZT0yNTZdIC0gVGhlIHRleHR1cmUgc2l6ZSBvZiB0aGUgUE1SRU0uXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gW29wdGlvbnMucmVuZGVyVGFyZ2V0PW9yaWdpbl0gLSBUaGUgcG9zaXRpb24gb2YgdGhlIGludGVybmFsIGN1YmUgY2FtZXJhIHRoYXQgcmVuZGVycyB0aGUgc2NlbmUuXG5cdCAqIEByZXR1cm4ge1dlYkdMUmVuZGVyVGFyZ2V0fSBUaGUgcmVzdWx0aW5nIFBNUkVNLlxuXHQgKi9cblx0ZnJvbVNjZW5lKCBzY2VuZSwgc2lnbWEgPSAwLCBuZWFyID0gMC4xLCBmYXIgPSAxMDAsIG9wdGlvbnMgPSB7fSApIHtcblxuXHRcdGNvbnN0IHtcblx0XHRcdHNpemUgPSAyNTYsXG5cdFx0XHRwb3NpdGlvbiA9IF9vcmlnaW4sXG5cdFx0fSA9IG9wdGlvbnM7XG5cblx0XHRfb2xkVGFyZ2V0ID0gdGhpcy5fcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cdFx0X29sZEFjdGl2ZUN1YmVGYWNlID0gdGhpcy5fcmVuZGVyZXIuZ2V0QWN0aXZlQ3ViZUZhY2UoKTtcblx0XHRfb2xkQWN0aXZlTWlwbWFwTGV2ZWwgPSB0aGlzLl9yZW5kZXJlci5nZXRBY3RpdmVNaXBtYXBMZXZlbCgpO1xuXHRcdF9vbGRYckVuYWJsZWQgPSB0aGlzLl9yZW5kZXJlci54ci5lbmFibGVkO1xuXG5cdFx0dGhpcy5fcmVuZGVyZXIueHIuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0dGhpcy5fc2V0U2l6ZSggc2l6ZSApO1xuXG5cdFx0Y29uc3QgY3ViZVVWUmVuZGVyVGFyZ2V0ID0gdGhpcy5fYWxsb2NhdGVUYXJnZXRzKCk7XG5cdFx0Y3ViZVVWUmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyID0gdHJ1ZTtcblxuXHRcdHRoaXMuX3NjZW5lVG9DdWJlVVYoIHNjZW5lLCBuZWFyLCBmYXIsIGN1YmVVVlJlbmRlclRhcmdldCwgcG9zaXRpb24gKTtcblxuXHRcdGlmICggc2lnbWEgPiAwICkge1xuXG5cdFx0XHR0aGlzLl9ibHVyKCBjdWJlVVZSZW5kZXJUYXJnZXQsIDAsIDAsIHNpZ21hICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9hcHBseVBNUkVNKCBjdWJlVVZSZW5kZXJUYXJnZXQgKTtcblx0XHR0aGlzLl9jbGVhbnVwKCBjdWJlVVZSZW5kZXJUYXJnZXQgKTtcblxuXHRcdHJldHVybiBjdWJlVVZSZW5kZXJUYXJnZXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgYSBQTVJFTSBmcm9tIGFuIGVxdWlyZWN0YW5ndWxhciB0ZXh0dXJlLCB3aGljaCBjYW4gYmUgZWl0aGVyIExEUlxuXHQgKiBvciBIRFIuIFRoZSBpZGVhbCBpbnB1dCBpbWFnZSBzaXplIGlzIDFrICgxMDI0IHggNTEyKSxcblx0ICogYXMgdGhpcyBtYXRjaGVzIGJlc3Qgd2l0aCB0aGUgMjU2IHggMjU2IGN1YmVtYXAgb3V0cHV0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IGVxdWlyZWN0YW5ndWxhciAtIFRoZSBlcXVpcmVjdGFuZ3VsYXIgdGV4dHVyZSB0byBiZSBjb252ZXJ0ZWQuXG5cdCAqIEBwYXJhbSB7P1dlYkdMUmVuZGVyVGFyZ2V0fSBbcmVuZGVyVGFyZ2V0PW51bGxdIC0gVGhlIHJlbmRlciB0YXJnZXQgdG8gdXNlLlxuXHQgKiBAcmV0dXJuIHtXZWJHTFJlbmRlclRhcmdldH0gVGhlIHJlc3VsdGluZyBQTVJFTS5cblx0ICovXG5cdGZyb21FcXVpcmVjdGFuZ3VsYXIoIGVxdWlyZWN0YW5ndWxhciwgcmVuZGVyVGFyZ2V0ID0gbnVsbCApIHtcblxuXHRcdHJldHVybiB0aGlzLl9mcm9tVGV4dHVyZSggZXF1aXJlY3Rhbmd1bGFyLCByZW5kZXJUYXJnZXQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyBhIFBNUkVNIGZyb20gYW4gY3ViZW1hcCB0ZXh0dXJlLCB3aGljaCBjYW4gYmUgZWl0aGVyIExEUlxuXHQgKiBvciBIRFIuIFRoZSBpZGVhbCBpbnB1dCBjdWJlIHNpemUgaXMgMjU2IHggMjU2LFxuXHQgKiBhcyB0aGlzIG1hdGNoZXMgYmVzdCB3aXRoIHRoZSAyNTYgeCAyNTYgY3ViZW1hcCBvdXRwdXQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gY3ViZW1hcCAtIFRoZSBjdWJlbWFwIHRleHR1cmUgdG8gYmUgY29udmVydGVkLlxuXHQgKiBAcGFyYW0gez9XZWJHTFJlbmRlclRhcmdldH0gW3JlbmRlclRhcmdldD1udWxsXSAtIFRoZSByZW5kZXIgdGFyZ2V0IHRvIHVzZS5cblx0ICogQHJldHVybiB7V2ViR0xSZW5kZXJUYXJnZXR9IFRoZSByZXN1bHRpbmcgUE1SRU0uXG5cdCAqL1xuXHRmcm9tQ3ViZW1hcCggY3ViZW1hcCwgcmVuZGVyVGFyZ2V0ID0gbnVsbCApIHtcblxuXHRcdHJldHVybiB0aGlzLl9mcm9tVGV4dHVyZSggY3ViZW1hcCwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBQcmUtY29tcGlsZXMgdGhlIGN1YmVtYXAgc2hhZGVyLiBZb3UgY2FuIGdldCBmYXN0ZXIgc3RhcnQtdXAgYnkgaW52b2tpbmcgdGhpcyBtZXRob2QgZHVyaW5nXG5cdCAqIHlvdXIgdGV4dHVyZSdzIG5ldHdvcmsgZmV0Y2ggZm9yIGluY3JlYXNlZCBjb25jdXJyZW5jeS5cblx0ICovXG5cdGNvbXBpbGVDdWJlbWFwU2hhZGVyKCkge1xuXG5cdFx0aWYgKCB0aGlzLl9jdWJlbWFwTWF0ZXJpYWwgPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX2N1YmVtYXBNYXRlcmlhbCA9IF9nZXRDdWJlbWFwTWF0ZXJpYWwoKTtcblx0XHRcdHRoaXMuX2NvbXBpbGVNYXRlcmlhbCggdGhpcy5fY3ViZW1hcE1hdGVyaWFsICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBQcmUtY29tcGlsZXMgdGhlIGVxdWlyZWN0YW5ndWxhciBzaGFkZXIuIFlvdSBjYW4gZ2V0IGZhc3RlciBzdGFydC11cCBieSBpbnZva2luZyB0aGlzIG1ldGhvZCBkdXJpbmdcblx0ICogeW91ciB0ZXh0dXJlJ3MgbmV0d29yayBmZXRjaCBmb3IgaW5jcmVhc2VkIGNvbmN1cnJlbmN5LlxuXHQgKi9cblx0Y29tcGlsZUVxdWlyZWN0YW5ndWxhclNoYWRlcigpIHtcblxuXHRcdGlmICggdGhpcy5fZXF1aXJlY3RNYXRlcmlhbCA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fZXF1aXJlY3RNYXRlcmlhbCA9IF9nZXRFcXVpcmVjdE1hdGVyaWFsKCk7XG5cdFx0XHR0aGlzLl9jb21waWxlTWF0ZXJpYWwoIHRoaXMuX2VxdWlyZWN0TWF0ZXJpYWwgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIERpc3Bvc2VzIG9mIHRoZSBQTVJFTUdlbmVyYXRvcidzIGludGVybmFsIG1lbW9yeS4gTm90ZSB0aGF0IFBNUkVNR2VuZXJhdG9yIGlzIGEgc3RhdGljIGNsYXNzLFxuXHQgKiBzbyB5b3Ugc2hvdWxkIG5vdCBuZWVkIG1vcmUgdGhhbiBvbmUgUE1SRU1HZW5lcmF0b3Igb2JqZWN0LiBJZiB5b3UgZG8sIGNhbGxpbmcgZGlzcG9zZSgpIG9uXG5cdCAqIG9uZSBvZiB0aGVtIHdpbGwgY2F1c2UgYW55IG90aGVycyB0byBhbHNvIGJlY29tZSB1bnVzYWJsZS5cblx0ICovXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLl9kaXNwb3NlKCk7XG5cblx0XHRpZiAoIHRoaXMuX2N1YmVtYXBNYXRlcmlhbCAhPT0gbnVsbCApIHRoaXMuX2N1YmVtYXBNYXRlcmlhbC5kaXNwb3NlKCk7XG5cdFx0aWYgKCB0aGlzLl9lcXVpcmVjdE1hdGVyaWFsICE9PSBudWxsICkgdGhpcy5fZXF1aXJlY3RNYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0fVxuXG5cdC8vIHByaXZhdGUgaW50ZXJmYWNlXG5cblx0X3NldFNpemUoIGN1YmVTaXplICkge1xuXG5cdFx0dGhpcy5fbG9kTWF4ID0gTWF0aC5mbG9vciggTWF0aC5sb2cyKCBjdWJlU2l6ZSApICk7XG5cdFx0dGhpcy5fY3ViZVNpemUgPSBNYXRoLnBvdyggMiwgdGhpcy5fbG9kTWF4ICk7XG5cblx0fVxuXG5cdF9kaXNwb3NlKCkge1xuXG5cdFx0aWYgKCB0aGlzLl9ibHVyTWF0ZXJpYWwgIT09IG51bGwgKSB0aGlzLl9ibHVyTWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdFx0aWYgKCB0aGlzLl9waW5nUG9uZ1JlbmRlclRhcmdldCAhPT0gbnVsbCApIHRoaXMuX3BpbmdQb25nUmVuZGVyVGFyZ2V0LmRpc3Bvc2UoKTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuX2xvZFBsYW5lcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuX2xvZFBsYW5lc1sgaSBdLmRpc3Bvc2UoKTtcblxuXHRcdH1cblxuXHR9XG5cblx0X2NsZWFudXAoIG91dHB1dFRhcmdldCApIHtcblxuXHRcdHRoaXMuX3JlbmRlcmVyLnNldFJlbmRlclRhcmdldCggX29sZFRhcmdldCwgX29sZEFjdGl2ZUN1YmVGYWNlLCBfb2xkQWN0aXZlTWlwbWFwTGV2ZWwgKTtcblx0XHR0aGlzLl9yZW5kZXJlci54ci5lbmFibGVkID0gX29sZFhyRW5hYmxlZDtcblxuXHRcdG91dHB1dFRhcmdldC5zY2lzc29yVGVzdCA9IGZhbHNlO1xuXHRcdF9zZXRWaWV3cG9ydCggb3V0cHV0VGFyZ2V0LCAwLCAwLCBvdXRwdXRUYXJnZXQud2lkdGgsIG91dHB1dFRhcmdldC5oZWlnaHQgKTtcblxuXHR9XG5cblx0X2Zyb21UZXh0dXJlKCB0ZXh0dXJlLCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRpZiAoIHRleHR1cmUubWFwcGluZyA9PT0gQ3ViZVJlZmxlY3Rpb25NYXBwaW5nIHx8IHRleHR1cmUubWFwcGluZyA9PT0gQ3ViZVJlZnJhY3Rpb25NYXBwaW5nICkge1xuXG5cdFx0XHR0aGlzLl9zZXRTaXplKCB0ZXh0dXJlLmltYWdlLmxlbmd0aCA9PT0gMCA/IDE2IDogKCB0ZXh0dXJlLmltYWdlWyAwIF0ud2lkdGggfHwgdGV4dHVyZS5pbWFnZVsgMCBdLmltYWdlLndpZHRoICkgKTtcblxuXHRcdH0gZWxzZSB7IC8vIEVxdWlyZWN0YW5ndWxhclxuXG5cdFx0XHR0aGlzLl9zZXRTaXplKCB0ZXh0dXJlLmltYWdlLndpZHRoIC8gNCApO1xuXG5cdFx0fVxuXG5cdFx0X29sZFRhcmdldCA9IHRoaXMuX3JlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xuXHRcdF9vbGRBY3RpdmVDdWJlRmFjZSA9IHRoaXMuX3JlbmRlcmVyLmdldEFjdGl2ZUN1YmVGYWNlKCk7XG5cdFx0X29sZEFjdGl2ZU1pcG1hcExldmVsID0gdGhpcy5fcmVuZGVyZXIuZ2V0QWN0aXZlTWlwbWFwTGV2ZWwoKTtcblx0XHRfb2xkWHJFbmFibGVkID0gdGhpcy5fcmVuZGVyZXIueHIuZW5hYmxlZDtcblxuXHRcdHRoaXMuX3JlbmRlcmVyLnhyLmVuYWJsZWQgPSBmYWxzZTtcblxuXHRcdGNvbnN0IGN1YmVVVlJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldCB8fCB0aGlzLl9hbGxvY2F0ZVRhcmdldHMoKTtcblx0XHR0aGlzLl90ZXh0dXJlVG9DdWJlVVYoIHRleHR1cmUsIGN1YmVVVlJlbmRlclRhcmdldCApO1xuXHRcdHRoaXMuX2FwcGx5UE1SRU0oIGN1YmVVVlJlbmRlclRhcmdldCApO1xuXHRcdHRoaXMuX2NsZWFudXAoIGN1YmVVVlJlbmRlclRhcmdldCApO1xuXG5cdFx0cmV0dXJuIGN1YmVVVlJlbmRlclRhcmdldDtcblxuXHR9XG5cblx0X2FsbG9jYXRlVGFyZ2V0cygpIHtcblxuXHRcdGNvbnN0IHdpZHRoID0gMyAqIE1hdGgubWF4KCB0aGlzLl9jdWJlU2l6ZSwgMTYgKiA3ICk7XG5cdFx0Y29uc3QgaGVpZ2h0ID0gNCAqIHRoaXMuX2N1YmVTaXplO1xuXG5cdFx0Y29uc3QgcGFyYW1zID0ge1xuXHRcdFx0bWFnRmlsdGVyOiBMaW5lYXJGaWx0ZXIsXG5cdFx0XHRtaW5GaWx0ZXI6IExpbmVhckZpbHRlcixcblx0XHRcdGdlbmVyYXRlTWlwbWFwczogZmFsc2UsXG5cdFx0XHR0eXBlOiBIYWxmRmxvYXRUeXBlLFxuXHRcdFx0Zm9ybWF0OiBSR0JBRm9ybWF0LFxuXHRcdFx0Y29sb3JTcGFjZTogTGluZWFyU1JHQkNvbG9yU3BhY2UsXG5cdFx0XHRkZXB0aEJ1ZmZlcjogZmFsc2Vcblx0XHR9O1xuXG5cdFx0Y29uc3QgY3ViZVVWUmVuZGVyVGFyZ2V0ID0gX2NyZWF0ZVJlbmRlclRhcmdldCggd2lkdGgsIGhlaWdodCwgcGFyYW1zICk7XG5cblx0XHRpZiAoIHRoaXMuX3BpbmdQb25nUmVuZGVyVGFyZ2V0ID09PSBudWxsIHx8IHRoaXMuX3BpbmdQb25nUmVuZGVyVGFyZ2V0LndpZHRoICE9PSB3aWR0aCB8fCB0aGlzLl9waW5nUG9uZ1JlbmRlclRhcmdldC5oZWlnaHQgIT09IGhlaWdodCApIHtcblxuXHRcdFx0aWYgKCB0aGlzLl9waW5nUG9uZ1JlbmRlclRhcmdldCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHR0aGlzLl9kaXNwb3NlKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQgPSBfY3JlYXRlUmVuZGVyVGFyZ2V0KCB3aWR0aCwgaGVpZ2h0LCBwYXJhbXMgKTtcblxuXHRcdFx0Y29uc3QgeyBfbG9kTWF4IH0gPSB0aGlzO1xuXHRcdFx0KCB7IHNpemVMb2RzOiB0aGlzLl9zaXplTG9kcywgbG9kUGxhbmVzOiB0aGlzLl9sb2RQbGFuZXMsIHNpZ21hczogdGhpcy5fc2lnbWFzIH0gPSBfY3JlYXRlUGxhbmVzKCBfbG9kTWF4ICkgKTtcblxuXHRcdFx0dGhpcy5fYmx1ck1hdGVyaWFsID0gX2dldEJsdXJTaGFkZXIoIF9sb2RNYXgsIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjdWJlVVZSZW5kZXJUYXJnZXQ7XG5cblx0fVxuXG5cdF9jb21waWxlTWF0ZXJpYWwoIG1hdGVyaWFsICkge1xuXG5cdFx0Y29uc3QgdG1wTWVzaCA9IG5ldyBNZXNoKCB0aGlzLl9sb2RQbGFuZXNbIDAgXSwgbWF0ZXJpYWwgKTtcblx0XHR0aGlzLl9yZW5kZXJlci5jb21waWxlKCB0bXBNZXNoLCBfZmxhdENhbWVyYSApO1xuXG5cdH1cblxuXHRfc2NlbmVUb0N1YmVVViggc2NlbmUsIG5lYXIsIGZhciwgY3ViZVVWUmVuZGVyVGFyZ2V0LCBwb3NpdGlvbiApIHtcblxuXHRcdGNvbnN0IGZvdiA9IDkwO1xuXHRcdGNvbnN0IGFzcGVjdCA9IDE7XG5cdFx0Y29uc3QgY3ViZUNhbWVyYSA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApO1xuXHRcdGNvbnN0IHVwU2lnbiA9IFsgMSwgLTEsIDEsIDEsIDEsIDEgXTtcblx0XHRjb25zdCBmb3J3YXJkU2lnbiA9IFsgMSwgMSwgMSwgLTEsIC0xLCAtMSBdO1xuXHRcdGNvbnN0IHJlbmRlcmVyID0gdGhpcy5fcmVuZGVyZXI7XG5cblx0XHRjb25zdCBvcmlnaW5hbEF1dG9DbGVhciA9IHJlbmRlcmVyLmF1dG9DbGVhcjtcblx0XHRjb25zdCB0b25lTWFwcGluZyA9IHJlbmRlcmVyLnRvbmVNYXBwaW5nO1xuXHRcdHJlbmRlcmVyLmdldENsZWFyQ29sb3IoIF9jbGVhckNvbG9yICk7XG5cblx0XHRyZW5kZXJlci50b25lTWFwcGluZyA9IE5vVG9uZU1hcHBpbmc7XG5cdFx0cmVuZGVyZXIuYXV0b0NsZWFyID0gZmFsc2U7XG5cblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL2lzc3Vlcy8zMTQxMyNpc3N1ZWNvbW1lbnQtMzA5NTk2NjgxMlxuXHRcdGNvbnN0IHJldmVyc2VkRGVwdGhCdWZmZXIgPSByZW5kZXJlci5zdGF0ZS5idWZmZXJzLmRlcHRoLmdldFJldmVyc2VkKCk7XG5cblx0XHRpZiAoIHJldmVyc2VkRGVwdGhCdWZmZXIgKSB7XG5cblx0XHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cdFx0XHRyZW5kZXJlci5jbGVhckRlcHRoKCk7XG5cdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIG51bGwgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGJhY2tncm91bmRNYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCgge1xuXHRcdFx0bmFtZTogJ1BNUkVNLkJhY2tncm91bmQnLFxuXHRcdFx0c2lkZTogQmFja1NpZGUsXG5cdFx0XHRkZXB0aFdyaXRlOiBmYWxzZSxcblx0XHRcdGRlcHRoVGVzdDogZmFsc2UsXG5cdFx0fSApO1xuXG5cdFx0Y29uc3QgYmFja2dyb3VuZEJveCA9IG5ldyBNZXNoKCBuZXcgQm94R2VvbWV0cnkoKSwgYmFja2dyb3VuZE1hdGVyaWFsICk7XG5cblx0XHRsZXQgdXNlU29saWRDb2xvciA9IGZhbHNlO1xuXHRcdGNvbnN0IGJhY2tncm91bmQgPSBzY2VuZS5iYWNrZ3JvdW5kO1xuXG5cdFx0aWYgKCBiYWNrZ3JvdW5kICkge1xuXG5cdFx0XHRpZiAoIGJhY2tncm91bmQuaXNDb2xvciApIHtcblxuXHRcdFx0XHRiYWNrZ3JvdW5kTWF0ZXJpYWwuY29sb3IuY29weSggYmFja2dyb3VuZCApO1xuXHRcdFx0XHRzY2VuZS5iYWNrZ3JvdW5kID0gbnVsbDtcblx0XHRcdFx0dXNlU29saWRDb2xvciA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGJhY2tncm91bmRNYXRlcmlhbC5jb2xvci5jb3B5KCBfY2xlYXJDb2xvciApO1xuXHRcdFx0dXNlU29saWRDb2xvciA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjb2wgPSBpICUgMztcblxuXHRcdFx0aWYgKCBjb2wgPT09IDAgKSB7XG5cblx0XHRcdFx0Y3ViZUNhbWVyYS51cC5zZXQoIDAsIHVwU2lnblsgaSBdLCAwICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEucG9zaXRpb24uc2V0KCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56ICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEubG9va0F0KCBwb3NpdGlvbi54ICsgZm9yd2FyZFNpZ25bIGkgXSwgcG9zaXRpb24ueSwgcG9zaXRpb24ueiApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBjb2wgPT09IDEgKSB7XG5cblx0XHRcdFx0Y3ViZUNhbWVyYS51cC5zZXQoIDAsIDAsIHVwU2lnblsgaSBdICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEucG9zaXRpb24uc2V0KCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56ICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEubG9va0F0KCBwb3NpdGlvbi54LCBwb3NpdGlvbi55ICsgZm9yd2FyZFNpZ25bIGkgXSwgcG9zaXRpb24ueiApO1xuXG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y3ViZUNhbWVyYS51cC5zZXQoIDAsIHVwU2lnblsgaSBdLCAwICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEucG9zaXRpb24uc2V0KCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56ICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEubG9va0F0KCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56ICsgZm9yd2FyZFNpZ25bIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHNpemUgPSB0aGlzLl9jdWJlU2l6ZTtcblxuXHRcdFx0X3NldFZpZXdwb3J0KCBjdWJlVVZSZW5kZXJUYXJnZXQsIGNvbCAqIHNpemUsIGkgPiAyID8gc2l6ZSA6IDAsIHNpemUsIHNpemUgKTtcblxuXHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBjdWJlVVZSZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0aWYgKCB1c2VTb2xpZENvbG9yICkge1xuXG5cdFx0XHRcdHJlbmRlcmVyLnJlbmRlciggYmFja2dyb3VuZEJveCwgY3ViZUNhbWVyYSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGN1YmVDYW1lcmEgKTtcblxuXHRcdH1cblxuXHRcdGJhY2tncm91bmRCb3guZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdGJhY2tncm91bmRCb3gubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdFx0cmVuZGVyZXIudG9uZU1hcHBpbmcgPSB0b25lTWFwcGluZztcblx0XHRyZW5kZXJlci5hdXRvQ2xlYXIgPSBvcmlnaW5hbEF1dG9DbGVhcjtcblx0XHRzY2VuZS5iYWNrZ3JvdW5kID0gYmFja2dyb3VuZDtcblxuXHR9XG5cblx0X3RleHR1cmVUb0N1YmVVViggdGV4dHVyZSwgY3ViZVVWUmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcblxuXHRcdGNvbnN0IGlzQ3ViZVRleHR1cmUgPSAoIHRleHR1cmUubWFwcGluZyA9PT0gQ3ViZVJlZmxlY3Rpb25NYXBwaW5nIHx8IHRleHR1cmUubWFwcGluZyA9PT0gQ3ViZVJlZnJhY3Rpb25NYXBwaW5nICk7XG5cblx0XHRpZiAoIGlzQ3ViZVRleHR1cmUgKSB7XG5cblx0XHRcdGlmICggdGhpcy5fY3ViZW1hcE1hdGVyaWFsID09PSBudWxsICkge1xuXG5cdFx0XHRcdHRoaXMuX2N1YmVtYXBNYXRlcmlhbCA9IF9nZXRDdWJlbWFwTWF0ZXJpYWwoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9jdWJlbWFwTWF0ZXJpYWwudW5pZm9ybXMuZmxpcEVudk1hcC52YWx1ZSA9ICggdGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPT09IGZhbHNlICkgPyAtMSA6IDE7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIHRoaXMuX2VxdWlyZWN0TWF0ZXJpYWwgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0dGhpcy5fZXF1aXJlY3RNYXRlcmlhbCA9IF9nZXRFcXVpcmVjdE1hdGVyaWFsKCk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IG1hdGVyaWFsID0gaXNDdWJlVGV4dHVyZSA/IHRoaXMuX2N1YmVtYXBNYXRlcmlhbCA6IHRoaXMuX2VxdWlyZWN0TWF0ZXJpYWw7XG5cdFx0Y29uc3QgbWVzaCA9IG5ldyBNZXNoKCB0aGlzLl9sb2RQbGFuZXNbIDAgXSwgbWF0ZXJpYWwgKTtcblxuXHRcdGNvbnN0IHVuaWZvcm1zID0gbWF0ZXJpYWwudW5pZm9ybXM7XG5cblx0XHR1bmlmb3Jtc1sgJ2Vudk1hcCcgXS52YWx1ZSA9IHRleHR1cmU7XG5cblx0XHRjb25zdCBzaXplID0gdGhpcy5fY3ViZVNpemU7XG5cblx0XHRfc2V0Vmlld3BvcnQoIGN1YmVVVlJlbmRlclRhcmdldCwgMCwgMCwgMyAqIHNpemUsIDIgKiBzaXplICk7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIGN1YmVVVlJlbmRlclRhcmdldCApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggbWVzaCwgX2ZsYXRDYW1lcmEgKTtcblxuXHR9XG5cblx0X2FwcGx5UE1SRU0oIGN1YmVVVlJlbmRlclRhcmdldCApIHtcblxuXHRcdGNvbnN0IHJlbmRlcmVyID0gdGhpcy5fcmVuZGVyZXI7XG5cdFx0Y29uc3QgYXV0b0NsZWFyID0gcmVuZGVyZXIuYXV0b0NsZWFyO1xuXHRcdHJlbmRlcmVyLmF1dG9DbGVhciA9IGZhbHNlO1xuXHRcdGNvbnN0IG4gPSB0aGlzLl9sb2RQbGFuZXMubGVuZ3RoO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAxOyBpIDwgbjsgaSArKyApIHtcblxuXHRcdFx0Y29uc3Qgc2lnbWEgPSBNYXRoLnNxcnQoIHRoaXMuX3NpZ21hc1sgaSBdICogdGhpcy5fc2lnbWFzWyBpIF0gLSB0aGlzLl9zaWdtYXNbIGkgLSAxIF0gKiB0aGlzLl9zaWdtYXNbIGkgLSAxIF0gKTtcblxuXHRcdFx0Y29uc3QgcG9sZUF4aXMgPSBfYXhpc0RpcmVjdGlvbnNbICggbiAtIGkgLSAxICkgJSBfYXhpc0RpcmVjdGlvbnMubGVuZ3RoIF07XG5cblx0XHRcdHRoaXMuX2JsdXIoIGN1YmVVVlJlbmRlclRhcmdldCwgaSAtIDEsIGksIHNpZ21hLCBwb2xlQXhpcyApO1xuXG5cdFx0fVxuXG5cdFx0cmVuZGVyZXIuYXV0b0NsZWFyID0gYXV0b0NsZWFyO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBpcyBhIHR3by1wYXNzIEdhdXNzaWFuIGJsdXIgZm9yIGEgY3ViZW1hcC4gTm9ybWFsbHkgdGhpcyBpcyBkb25lXG5cdCAqIHZlcnRpY2FsbHkgYW5kIGhvcml6b250YWxseSwgYnV0IHRoaXMgYnJlYWtzIGRvd24gb24gYSBjdWJlLiBIZXJlIHdlIGFwcGx5XG5cdCAqIHRoZSBibHVyIGxhdGl0dWRpbmFsbHkgKGFyb3VuZCB0aGUgcG9sZXMpLCBhbmQgdGhlbiBsb25naXR1ZGluYWxseSAodG93YXJkc1xuXHQgKiB0aGUgcG9sZXMpIHRvIGFwcHJveGltYXRlIHRoZSBvcnRob2dvbmFsbHktc2VwYXJhYmxlIGJsdXIuIEl0IGlzIGxlYXN0XG5cdCAqIGFjY3VyYXRlIGF0IHRoZSBwb2xlcywgYnV0IHN0aWxsIGRvZXMgYSBkZWNlbnQgam9iLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1dlYkdMUmVuZGVyVGFyZ2V0fSBjdWJlVVZSZW5kZXJUYXJnZXRcblx0ICogQHBhcmFtIHtudW1iZXJ9IGxvZEluXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBsb2RPdXRcblx0ICogQHBhcmFtIHtudW1iZXJ9IHNpZ21hXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gW3BvbGVBeGlzXVxuXHQgKi9cblx0X2JsdXIoIGN1YmVVVlJlbmRlclRhcmdldCwgbG9kSW4sIGxvZE91dCwgc2lnbWEsIHBvbGVBeGlzICkge1xuXG5cdFx0Y29uc3QgcGluZ1BvbmdSZW5kZXJUYXJnZXQgPSB0aGlzLl9waW5nUG9uZ1JlbmRlclRhcmdldDtcblxuXHRcdHRoaXMuX2hhbGZCbHVyKFxuXHRcdFx0Y3ViZVVWUmVuZGVyVGFyZ2V0LFxuXHRcdFx0cGluZ1BvbmdSZW5kZXJUYXJnZXQsXG5cdFx0XHRsb2RJbixcblx0XHRcdGxvZE91dCxcblx0XHRcdHNpZ21hLFxuXHRcdFx0J2xhdGl0dWRpbmFsJyxcblx0XHRcdHBvbGVBeGlzICk7XG5cblx0XHR0aGlzLl9oYWxmQmx1cihcblx0XHRcdHBpbmdQb25nUmVuZGVyVGFyZ2V0LFxuXHRcdFx0Y3ViZVVWUmVuZGVyVGFyZ2V0LFxuXHRcdFx0bG9kT3V0LFxuXHRcdFx0bG9kT3V0LFxuXHRcdFx0c2lnbWEsXG5cdFx0XHQnbG9uZ2l0dWRpbmFsJyxcblx0XHRcdHBvbGVBeGlzICk7XG5cblx0fVxuXG5cdF9oYWxmQmx1ciggdGFyZ2V0SW4sIHRhcmdldE91dCwgbG9kSW4sIGxvZE91dCwgc2lnbWFSYWRpYW5zLCBkaXJlY3Rpb24sIHBvbGVBeGlzICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcblx0XHRjb25zdCBibHVyTWF0ZXJpYWwgPSB0aGlzLl9ibHVyTWF0ZXJpYWw7XG5cblx0XHRpZiAoIGRpcmVjdGlvbiAhPT0gJ2xhdGl0dWRpbmFsJyAmJiBkaXJlY3Rpb24gIT09ICdsb25naXR1ZGluYWwnICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XHQnYmx1ciBkaXJlY3Rpb24gbXVzdCBiZSBlaXRoZXIgbGF0aXR1ZGluYWwgb3IgbG9uZ2l0dWRpbmFsIScgKTtcblxuXHRcdH1cblxuXHRcdC8vIE51bWJlciBvZiBzdGFuZGFyZCBkZXZpYXRpb25zIGF0IHdoaWNoIHRvIGN1dCBvZmYgdGhlIGRpc2NyZXRlIGFwcHJveGltYXRpb24uXG5cdFx0Y29uc3QgU1RBTkRBUkRfREVWSUFUSU9OUyA9IDM7XG5cblx0XHRjb25zdCBibHVyTWVzaCA9IG5ldyBNZXNoKCB0aGlzLl9sb2RQbGFuZXNbIGxvZE91dCBdLCBibHVyTWF0ZXJpYWwgKTtcblx0XHRjb25zdCBibHVyVW5pZm9ybXMgPSBibHVyTWF0ZXJpYWwudW5pZm9ybXM7XG5cblx0XHRjb25zdCBwaXhlbHMgPSB0aGlzLl9zaXplTG9kc1sgbG9kSW4gXSAtIDE7XG5cdFx0Y29uc3QgcmFkaWFuc1BlclBpeGVsID0gaXNGaW5pdGUoIHNpZ21hUmFkaWFucyApID8gTWF0aC5QSSAvICggMiAqIHBpeGVscyApIDogMiAqIE1hdGguUEkgLyAoIDIgKiBNQVhfU0FNUExFUyAtIDEgKTtcblx0XHRjb25zdCBzaWdtYVBpeGVscyA9IHNpZ21hUmFkaWFucyAvIHJhZGlhbnNQZXJQaXhlbDtcblx0XHRjb25zdCBzYW1wbGVzID0gaXNGaW5pdGUoIHNpZ21hUmFkaWFucyApID8gMSArIE1hdGguZmxvb3IoIFNUQU5EQVJEX0RFVklBVElPTlMgKiBzaWdtYVBpeGVscyApIDogTUFYX1NBTVBMRVM7XG5cblx0XHRpZiAoIHNhbXBsZXMgPiBNQVhfU0FNUExFUyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCBgc2lnbWFSYWRpYW5zLCAke1xuXHRcdFx0XHRzaWdtYVJhZGlhbnN9LCBpcyB0b28gbGFyZ2UgYW5kIHdpbGwgY2xpcCwgYXMgaXQgcmVxdWVzdGVkICR7XG5cdFx0XHRcdHNhbXBsZXN9IHNhbXBsZXMgd2hlbiB0aGUgbWF4aW11bSBpcyBzZXQgdG8gJHtNQVhfU0FNUExFU31gICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCB3ZWlnaHRzID0gW107XG5cdFx0bGV0IHN1bSA9IDA7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBNQVhfU0FNUExFUzsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgeCA9IGkgLyBzaWdtYVBpeGVscztcblx0XHRcdGNvbnN0IHdlaWdodCA9IE1hdGguZXhwKCAtIHggKiB4IC8gMiApO1xuXHRcdFx0d2VpZ2h0cy5wdXNoKCB3ZWlnaHQgKTtcblxuXHRcdFx0aWYgKCBpID09PSAwICkge1xuXG5cdFx0XHRcdHN1bSArPSB3ZWlnaHQ7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGkgPCBzYW1wbGVzICkge1xuXG5cdFx0XHRcdHN1bSArPSAyICogd2VpZ2h0O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB3ZWlnaHRzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0d2VpZ2h0c1sgaSBdID0gd2VpZ2h0c1sgaSBdIC8gc3VtO1xuXG5cdFx0fVxuXG5cdFx0Ymx1clVuaWZvcm1zWyAnZW52TWFwJyBdLnZhbHVlID0gdGFyZ2V0SW4udGV4dHVyZTtcblx0XHRibHVyVW5pZm9ybXNbICdzYW1wbGVzJyBdLnZhbHVlID0gc2FtcGxlcztcblx0XHRibHVyVW5pZm9ybXNbICd3ZWlnaHRzJyBdLnZhbHVlID0gd2VpZ2h0cztcblx0XHRibHVyVW5pZm9ybXNbICdsYXRpdHVkaW5hbCcgXS52YWx1ZSA9IGRpcmVjdGlvbiA9PT0gJ2xhdGl0dWRpbmFsJztcblxuXHRcdGlmICggcG9sZUF4aXMgKSB7XG5cblx0XHRcdGJsdXJVbmlmb3Jtc1sgJ3BvbGVBeGlzJyBdLnZhbHVlID0gcG9sZUF4aXM7XG5cblx0XHR9XG5cblx0XHRjb25zdCB7IF9sb2RNYXggfSA9IHRoaXM7XG5cdFx0Ymx1clVuaWZvcm1zWyAnZFRoZXRhJyBdLnZhbHVlID0gcmFkaWFuc1BlclBpeGVsO1xuXHRcdGJsdXJVbmlmb3Jtc1sgJ21pcEludCcgXS52YWx1ZSA9IF9sb2RNYXggLSBsb2RJbjtcblxuXHRcdGNvbnN0IG91dHB1dFNpemUgPSB0aGlzLl9zaXplTG9kc1sgbG9kT3V0IF07XG5cdFx0Y29uc3QgeCA9IDMgKiBvdXRwdXRTaXplICogKCBsb2RPdXQgPiBfbG9kTWF4IC0gTE9EX01JTiA/IGxvZE91dCAtIF9sb2RNYXggKyBMT0RfTUlOIDogMCApO1xuXHRcdGNvbnN0IHkgPSA0ICogKCB0aGlzLl9jdWJlU2l6ZSAtIG91dHB1dFNpemUgKTtcblxuXHRcdF9zZXRWaWV3cG9ydCggdGFyZ2V0T3V0LCB4LCB5LCAzICogb3V0cHV0U2l6ZSwgMiAqIG91dHB1dFNpemUgKTtcblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHRhcmdldE91dCApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggYmx1ck1lc2gsIF9mbGF0Q2FtZXJhICk7XG5cblx0fVxuXG59XG5cblxuXG5mdW5jdGlvbiBfY3JlYXRlUGxhbmVzKCBsb2RNYXggKSB7XG5cblx0Y29uc3QgbG9kUGxhbmVzID0gW107XG5cdGNvbnN0IHNpemVMb2RzID0gW107XG5cdGNvbnN0IHNpZ21hcyA9IFtdO1xuXG5cdGxldCBsb2QgPSBsb2RNYXg7XG5cblx0Y29uc3QgdG90YWxMb2RzID0gbG9kTWF4IC0gTE9EX01JTiArIDEgKyBFWFRSQV9MT0RfU0lHTUEubGVuZ3RoO1xuXG5cdGZvciAoIGxldCBpID0gMDsgaSA8IHRvdGFsTG9kczsgaSArKyApIHtcblxuXHRcdGNvbnN0IHNpemVMb2QgPSBNYXRoLnBvdyggMiwgbG9kICk7XG5cdFx0c2l6ZUxvZHMucHVzaCggc2l6ZUxvZCApO1xuXHRcdGxldCBzaWdtYSA9IDEuMCAvIHNpemVMb2Q7XG5cblx0XHRpZiAoIGkgPiBsb2RNYXggLSBMT0RfTUlOICkge1xuXG5cdFx0XHRzaWdtYSA9IEVYVFJBX0xPRF9TSUdNQVsgaSAtIGxvZE1heCArIExPRF9NSU4gLSAxIF07XG5cblx0XHR9IGVsc2UgaWYgKCBpID09PSAwICkge1xuXG5cdFx0XHRzaWdtYSA9IDA7XG5cblx0XHR9XG5cblx0XHRzaWdtYXMucHVzaCggc2lnbWEgKTtcblxuXHRcdGNvbnN0IHRleGVsU2l6ZSA9IDEuMCAvICggc2l6ZUxvZCAtIDIgKTtcblx0XHRjb25zdCBtaW4gPSAtIHRleGVsU2l6ZTtcblx0XHRjb25zdCBtYXggPSAxICsgdGV4ZWxTaXplO1xuXHRcdGNvbnN0IHV2MSA9IFsgbWluLCBtaW4sIG1heCwgbWluLCBtYXgsIG1heCwgbWluLCBtaW4sIG1heCwgbWF4LCBtaW4sIG1heCBdO1xuXG5cdFx0Y29uc3QgY3ViZUZhY2VzID0gNjtcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IDY7XG5cdFx0Y29uc3QgcG9zaXRpb25TaXplID0gMztcblx0XHRjb25zdCB1dlNpemUgPSAyO1xuXHRcdGNvbnN0IGZhY2VJbmRleFNpemUgPSAxO1xuXG5cdFx0Y29uc3QgcG9zaXRpb24gPSBuZXcgRmxvYXQzMkFycmF5KCBwb3NpdGlvblNpemUgKiB2ZXJ0aWNlcyAqIGN1YmVGYWNlcyApO1xuXHRcdGNvbnN0IHV2ID0gbmV3IEZsb2F0MzJBcnJheSggdXZTaXplICogdmVydGljZXMgKiBjdWJlRmFjZXMgKTtcblx0XHRjb25zdCBmYWNlSW5kZXggPSBuZXcgRmxvYXQzMkFycmF5KCBmYWNlSW5kZXhTaXplICogdmVydGljZXMgKiBjdWJlRmFjZXMgKTtcblxuXHRcdGZvciAoIGxldCBmYWNlID0gMDsgZmFjZSA8IGN1YmVGYWNlczsgZmFjZSArKyApIHtcblxuXHRcdFx0Y29uc3QgeCA9ICggZmFjZSAlIDMgKSAqIDIgLyAzIC0gMTtcblx0XHRcdGNvbnN0IHkgPSBmYWNlID4gMiA/IDAgOiAtMTtcblx0XHRcdGNvbnN0IGNvb3JkaW5hdGVzID0gW1xuXHRcdFx0XHR4LCB5LCAwLFxuXHRcdFx0XHR4ICsgMiAvIDMsIHksIDAsXG5cdFx0XHRcdHggKyAyIC8gMywgeSArIDEsIDAsXG5cdFx0XHRcdHgsIHksIDAsXG5cdFx0XHRcdHggKyAyIC8gMywgeSArIDEsIDAsXG5cdFx0XHRcdHgsIHkgKyAxLCAwXG5cdFx0XHRdO1xuXHRcdFx0cG9zaXRpb24uc2V0KCBjb29yZGluYXRlcywgcG9zaXRpb25TaXplICogdmVydGljZXMgKiBmYWNlICk7XG5cdFx0XHR1di5zZXQoIHV2MSwgdXZTaXplICogdmVydGljZXMgKiBmYWNlICk7XG5cdFx0XHRjb25zdCBmaWxsID0gWyBmYWNlLCBmYWNlLCBmYWNlLCBmYWNlLCBmYWNlLCBmYWNlIF07XG5cdFx0XHRmYWNlSW5kZXguc2V0KCBmaWxsLCBmYWNlSW5kZXhTaXplICogdmVydGljZXMgKiBmYWNlICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBwbGFuZXMgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRwbGFuZXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgcG9zaXRpb25TaXplICkgKTtcblx0XHRwbGFuZXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgQnVmZmVyQXR0cmlidXRlKCB1diwgdXZTaXplICkgKTtcblx0XHRwbGFuZXMuc2V0QXR0cmlidXRlKCAnZmFjZUluZGV4JywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggZmFjZUluZGV4LCBmYWNlSW5kZXhTaXplICkgKTtcblx0XHRsb2RQbGFuZXMucHVzaCggcGxhbmVzICk7XG5cblx0XHRpZiAoIGxvZCA+IExPRF9NSU4gKSB7XG5cblx0XHRcdGxvZCAtLTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHsgbG9kUGxhbmVzLCBzaXplTG9kcywgc2lnbWFzIH07XG5cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZVJlbmRlclRhcmdldCggd2lkdGgsIGhlaWdodCwgcGFyYW1zICkge1xuXG5cdGNvbnN0IGN1YmVVVlJlbmRlclRhcmdldCA9IG5ldyBXZWJHTFJlbmRlclRhcmdldCggd2lkdGgsIGhlaWdodCwgcGFyYW1zICk7XG5cdGN1YmVVVlJlbmRlclRhcmdldC50ZXh0dXJlLm1hcHBpbmcgPSBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZztcblx0Y3ViZVVWUmVuZGVyVGFyZ2V0LnRleHR1cmUubmFtZSA9ICdQTVJFTS5jdWJlVXYnO1xuXHRjdWJlVVZSZW5kZXJUYXJnZXQuc2Npc3NvclRlc3QgPSB0cnVlO1xuXHRyZXR1cm4gY3ViZVVWUmVuZGVyVGFyZ2V0O1xuXG59XG5cbmZ1bmN0aW9uIF9zZXRWaWV3cG9ydCggdGFyZ2V0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICkge1xuXG5cdHRhcmdldC52aWV3cG9ydC5zZXQoIHgsIHksIHdpZHRoLCBoZWlnaHQgKTtcblx0dGFyZ2V0LnNjaXNzb3Iuc2V0KCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICk7XG5cbn1cblxuZnVuY3Rpb24gX2dldEJsdXJTaGFkZXIoIGxvZE1heCwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRjb25zdCB3ZWlnaHRzID0gbmV3IEZsb2F0MzJBcnJheSggTUFYX1NBTVBMRVMgKTtcblx0Y29uc3QgcG9sZUF4aXMgPSBuZXcgVmVjdG9yMyggMCwgMSwgMCApO1xuXHRjb25zdCBzaGFkZXJNYXRlcmlhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXG5cdFx0bmFtZTogJ1NwaGVyaWNhbEdhdXNzaWFuQmx1cicsXG5cblx0XHRkZWZpbmVzOiB7XG5cdFx0XHQnbic6IE1BWF9TQU1QTEVTLFxuXHRcdFx0J0NVQkVVVl9URVhFTF9XSURUSCc6IDEuMCAvIHdpZHRoLFxuXHRcdFx0J0NVQkVVVl9URVhFTF9IRUlHSFQnOiAxLjAgLyBoZWlnaHQsXG5cdFx0XHQnQ1VCRVVWX01BWF9NSVAnOiBgJHtsb2RNYXh9LjBgLFxuXHRcdH0sXG5cblx0XHR1bmlmb3Jtczoge1xuXHRcdFx0J2Vudk1hcCc6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdCdzYW1wbGVzJzogeyB2YWx1ZTogMSB9LFxuXHRcdFx0J3dlaWdodHMnOiB7IHZhbHVlOiB3ZWlnaHRzIH0sXG5cdFx0XHQnbGF0aXR1ZGluYWwnOiB7IHZhbHVlOiBmYWxzZSB9LFxuXHRcdFx0J2RUaGV0YSc6IHsgdmFsdWU6IDAgfSxcblx0XHRcdCdtaXBJbnQnOiB7IHZhbHVlOiAwIH0sXG5cdFx0XHQncG9sZUF4aXMnOiB7IHZhbHVlOiBwb2xlQXhpcyB9XG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogX2dldENvbW1vblZlcnRleFNoYWRlcigpLFxuXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IC8qIGdsc2wgKi9gXG5cblx0XHRcdHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xuXHRcdFx0cHJlY2lzaW9uIG1lZGl1bXAgaW50O1xuXG5cdFx0XHR2YXJ5aW5nIHZlYzMgdk91dHB1dERpcmVjdGlvbjtcblxuXHRcdFx0dW5pZm9ybSBzYW1wbGVyMkQgZW52TWFwO1xuXHRcdFx0dW5pZm9ybSBpbnQgc2FtcGxlcztcblx0XHRcdHVuaWZvcm0gZmxvYXQgd2VpZ2h0c1sgbiBdO1xuXHRcdFx0dW5pZm9ybSBib29sIGxhdGl0dWRpbmFsO1xuXHRcdFx0dW5pZm9ybSBmbG9hdCBkVGhldGE7XG5cdFx0XHR1bmlmb3JtIGZsb2F0IG1pcEludDtcblx0XHRcdHVuaWZvcm0gdmVjMyBwb2xlQXhpcztcblxuXHRcdFx0I2RlZmluZSBFTlZNQVBfVFlQRV9DVUJFX1VWXG5cdFx0XHQjaW5jbHVkZSA8Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50PlxuXG5cdFx0XHR2ZWMzIGdldFNhbXBsZSggZmxvYXQgdGhldGEsIHZlYzMgYXhpcyApIHtcblxuXHRcdFx0XHRmbG9hdCBjb3NUaGV0YSA9IGNvcyggdGhldGEgKTtcblx0XHRcdFx0Ly8gUm9kcmlndWVzJyBheGlzLWFuZ2xlIHJvdGF0aW9uXG5cdFx0XHRcdHZlYzMgc2FtcGxlRGlyZWN0aW9uID0gdk91dHB1dERpcmVjdGlvbiAqIGNvc1RoZXRhXG5cdFx0XHRcdFx0KyBjcm9zcyggYXhpcywgdk91dHB1dERpcmVjdGlvbiApICogc2luKCB0aGV0YSApXG5cdFx0XHRcdFx0KyBheGlzICogZG90KCBheGlzLCB2T3V0cHV0RGlyZWN0aW9uICkgKiAoIDEuMCAtIGNvc1RoZXRhICk7XG5cblx0XHRcdFx0cmV0dXJuIGJpbGluZWFyQ3ViZVVWKCBlbnZNYXAsIHNhbXBsZURpcmVjdGlvbiwgbWlwSW50ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dm9pZCBtYWluKCkge1xuXG5cdFx0XHRcdHZlYzMgYXhpcyA9IGxhdGl0dWRpbmFsID8gcG9sZUF4aXMgOiBjcm9zcyggcG9sZUF4aXMsIHZPdXRwdXREaXJlY3Rpb24gKTtcblxuXHRcdFx0XHRpZiAoIGFsbCggZXF1YWwoIGF4aXMsIHZlYzMoIDAuMCApICkgKSApIHtcblxuXHRcdFx0XHRcdGF4aXMgPSB2ZWMzKCB2T3V0cHV0RGlyZWN0aW9uLnosIDAuMCwgLSB2T3V0cHV0RGlyZWN0aW9uLnggKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YXhpcyA9IG5vcm1hbGl6ZSggYXhpcyApO1xuXG5cdFx0XHRcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIDAuMCwgMC4wLCAwLjAsIDEuMCApO1xuXHRcdFx0XHRnbF9GcmFnQ29sb3IucmdiICs9IHdlaWdodHNbIDAgXSAqIGdldFNhbXBsZSggMC4wLCBheGlzICk7XG5cblx0XHRcdFx0Zm9yICggaW50IGkgPSAxOyBpIDwgbjsgaSsrICkge1xuXG5cdFx0XHRcdFx0aWYgKCBpID49IHNhbXBsZXMgKSB7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZmxvYXQgdGhldGEgPSBkVGhldGEgKiBmbG9hdCggaSApO1xuXHRcdFx0XHRcdGdsX0ZyYWdDb2xvci5yZ2IgKz0gd2VpZ2h0c1sgaSBdICogZ2V0U2FtcGxlKCAtMS4wICogdGhldGEsIGF4aXMgKTtcblx0XHRcdFx0XHRnbF9GcmFnQ29sb3IucmdiICs9IHdlaWdodHNbIGkgXSAqIGdldFNhbXBsZSggdGhldGEsIGF4aXMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblx0XHRgLFxuXG5cdFx0YmxlbmRpbmc6IE5vQmxlbmRpbmcsXG5cdFx0ZGVwdGhUZXN0OiBmYWxzZSxcblx0XHRkZXB0aFdyaXRlOiBmYWxzZVxuXG5cdH0gKTtcblxuXHRyZXR1cm4gc2hhZGVyTWF0ZXJpYWw7XG5cbn1cblxuZnVuY3Rpb24gX2dldEVxdWlyZWN0TWF0ZXJpYWwoKSB7XG5cblx0cmV0dXJuIG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXG5cdFx0bmFtZTogJ0VxdWlyZWN0YW5ndWxhclRvQ3ViZVVWJyxcblxuXHRcdHVuaWZvcm1zOiB7XG5cdFx0XHQnZW52TWFwJzogeyB2YWx1ZTogbnVsbCB9XG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogX2dldENvbW1vblZlcnRleFNoYWRlcigpLFxuXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IC8qIGdsc2wgKi9gXG5cblx0XHRcdHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xuXHRcdFx0cHJlY2lzaW9uIG1lZGl1bXAgaW50O1xuXG5cdFx0XHR2YXJ5aW5nIHZlYzMgdk91dHB1dERpcmVjdGlvbjtcblxuXHRcdFx0dW5pZm9ybSBzYW1wbGVyMkQgZW52TWFwO1xuXG5cdFx0XHQjaW5jbHVkZSA8Y29tbW9uPlxuXG5cdFx0XHR2b2lkIG1haW4oKSB7XG5cblx0XHRcdFx0dmVjMyBvdXRwdXREaXJlY3Rpb24gPSBub3JtYWxpemUoIHZPdXRwdXREaXJlY3Rpb24gKTtcblx0XHRcdFx0dmVjMiB1diA9IGVxdWlyZWN0VXYoIG91dHB1dERpcmVjdGlvbiApO1xuXG5cdFx0XHRcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIHRleHR1cmUyRCAoIGVudk1hcCwgdXYgKS5yZ2IsIDEuMCApO1xuXG5cdFx0XHR9XG5cdFx0YCxcblxuXHRcdGJsZW5kaW5nOiBOb0JsZW5kaW5nLFxuXHRcdGRlcHRoVGVzdDogZmFsc2UsXG5cdFx0ZGVwdGhXcml0ZTogZmFsc2VcblxuXHR9ICk7XG5cbn1cblxuZnVuY3Rpb24gX2dldEN1YmVtYXBNYXRlcmlhbCgpIHtcblxuXHRyZXR1cm4gbmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cblx0XHRuYW1lOiAnQ3ViZW1hcFRvQ3ViZVVWJyxcblxuXHRcdHVuaWZvcm1zOiB7XG5cdFx0XHQnZW52TWFwJzogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0J2ZsaXBFbnZNYXAnOiB7IHZhbHVlOiAtMSB9XG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogX2dldENvbW1vblZlcnRleFNoYWRlcigpLFxuXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IC8qIGdsc2wgKi9gXG5cblx0XHRcdHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xuXHRcdFx0cHJlY2lzaW9uIG1lZGl1bXAgaW50O1xuXG5cdFx0XHR1bmlmb3JtIGZsb2F0IGZsaXBFbnZNYXA7XG5cblx0XHRcdHZhcnlpbmcgdmVjMyB2T3V0cHV0RGlyZWN0aW9uO1xuXG5cdFx0XHR1bmlmb3JtIHNhbXBsZXJDdWJlIGVudk1hcDtcblxuXHRcdFx0dm9pZCBtYWluKCkge1xuXG5cdFx0XHRcdGdsX0ZyYWdDb2xvciA9IHRleHR1cmVDdWJlKCBlbnZNYXAsIHZlYzMoIGZsaXBFbnZNYXAgKiB2T3V0cHV0RGlyZWN0aW9uLngsIHZPdXRwdXREaXJlY3Rpb24ueXogKSApO1xuXG5cdFx0XHR9XG5cdFx0YCxcblxuXHRcdGJsZW5kaW5nOiBOb0JsZW5kaW5nLFxuXHRcdGRlcHRoVGVzdDogZmFsc2UsXG5cdFx0ZGVwdGhXcml0ZTogZmFsc2VcblxuXHR9ICk7XG5cbn1cblxuZnVuY3Rpb24gX2dldENvbW1vblZlcnRleFNoYWRlcigpIHtcblxuXHRyZXR1cm4gLyogZ2xzbCAqL2BcblxuXHRcdHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xuXHRcdHByZWNpc2lvbiBtZWRpdW1wIGludDtcblxuXHRcdGF0dHJpYnV0ZSBmbG9hdCBmYWNlSW5kZXg7XG5cblx0XHR2YXJ5aW5nIHZlYzMgdk91dHB1dERpcmVjdGlvbjtcblxuXHRcdC8vIFJIIGNvb3JkaW5hdGUgc3lzdGVtOyBQTVJFTSBmYWNlLWluZGV4aW5nIGNvbnZlbnRpb25cblx0XHR2ZWMzIGdldERpcmVjdGlvbiggdmVjMiB1diwgZmxvYXQgZmFjZSApIHtcblxuXHRcdFx0dXYgPSAyLjAgKiB1diAtIDEuMDtcblxuXHRcdFx0dmVjMyBkaXJlY3Rpb24gPSB2ZWMzKCB1diwgMS4wICk7XG5cblx0XHRcdGlmICggZmFjZSA9PSAwLjAgKSB7XG5cblx0XHRcdFx0ZGlyZWN0aW9uID0gZGlyZWN0aW9uLnp5eDsgLy8gKCAxLCB2LCB1ICkgcG9zIHhcblxuXHRcdFx0fSBlbHNlIGlmICggZmFjZSA9PSAxLjAgKSB7XG5cblx0XHRcdFx0ZGlyZWN0aW9uID0gZGlyZWN0aW9uLnh6eTtcblx0XHRcdFx0ZGlyZWN0aW9uLnh6ICo9IC0xLjA7IC8vICggLXUsIDEsIC12ICkgcG9zIHlcblxuXHRcdFx0fSBlbHNlIGlmICggZmFjZSA9PSAyLjAgKSB7XG5cblx0XHRcdFx0ZGlyZWN0aW9uLnggKj0gLTEuMDsgLy8gKCAtdSwgdiwgMSApIHBvcyB6XG5cblx0XHRcdH0gZWxzZSBpZiAoIGZhY2UgPT0gMy4wICkge1xuXG5cdFx0XHRcdGRpcmVjdGlvbiA9IGRpcmVjdGlvbi56eXg7XG5cdFx0XHRcdGRpcmVjdGlvbi54eiAqPSAtMS4wOyAvLyAoIC0xLCB2LCAtdSApIG5lZyB4XG5cblx0XHRcdH0gZWxzZSBpZiAoIGZhY2UgPT0gNC4wICkge1xuXG5cdFx0XHRcdGRpcmVjdGlvbiA9IGRpcmVjdGlvbi54enk7XG5cdFx0XHRcdGRpcmVjdGlvbi54eSAqPSAtMS4wOyAvLyAoIC11LCAtMSwgdiApIG5lZyB5XG5cblx0XHRcdH0gZWxzZSBpZiAoIGZhY2UgPT0gNS4wICkge1xuXG5cdFx0XHRcdGRpcmVjdGlvbi56ICo9IC0xLjA7IC8vICggdSwgdiwgLTEgKSBuZWcgelxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkaXJlY3Rpb247XG5cblx0XHR9XG5cblx0XHR2b2lkIG1haW4oKSB7XG5cblx0XHRcdHZPdXRwdXREaXJlY3Rpb24gPSBnZXREaXJlY3Rpb24oIHV2LCBmYWNlSW5kZXggKTtcblx0XHRcdGdsX1Bvc2l0aW9uID0gdmVjNCggcG9zaXRpb24sIDEuMCApO1xuXG5cdFx0fVxuXHRgO1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMQ3ViZVVWTWFwcyggcmVuZGVyZXIgKSB7XG5cblx0bGV0IGN1YmVVVm1hcHMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdGxldCBwbXJlbUdlbmVyYXRvciA9IG51bGw7XG5cblx0ZnVuY3Rpb24gZ2V0KCB0ZXh0dXJlICkge1xuXG5cdFx0aWYgKCB0ZXh0dXJlICYmIHRleHR1cmUuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRjb25zdCBtYXBwaW5nID0gdGV4dHVyZS5tYXBwaW5nO1xuXG5cdFx0XHRjb25zdCBpc0VxdWlyZWN0TWFwID0gKCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyB8fCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyApO1xuXHRcdFx0Y29uc3QgaXNDdWJlTWFwID0gKCBtYXBwaW5nID09PSBDdWJlUmVmbGVjdGlvbk1hcHBpbmcgfHwgbWFwcGluZyA9PT0gQ3ViZVJlZnJhY3Rpb25NYXBwaW5nICk7XG5cblx0XHRcdC8vIGVxdWlyZWN0L2N1YmUgbWFwIHRvIGN1YmVVViBjb252ZXJzaW9uXG5cblx0XHRcdGlmICggaXNFcXVpcmVjdE1hcCB8fCBpc0N1YmVNYXAgKSB7XG5cblx0XHRcdFx0bGV0IHJlbmRlclRhcmdldCA9IGN1YmVVVm1hcHMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0Y29uc3QgY3VycmVudFBNUkVNVmVyc2lvbiA9IHJlbmRlclRhcmdldCAhPT0gdW5kZWZpbmVkID8gcmVuZGVyVGFyZ2V0LnRleHR1cmUucG1yZW1WZXJzaW9uIDogMDtcblxuXHRcdFx0XHRpZiAoIHRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlICYmIHRleHR1cmUucG1yZW1WZXJzaW9uICE9PSBjdXJyZW50UE1SRU1WZXJzaW9uICkge1xuXG5cdFx0XHRcdFx0aWYgKCBwbXJlbUdlbmVyYXRvciA9PT0gbnVsbCApIHBtcmVtR2VuZXJhdG9yID0gbmV3IFBNUkVNR2VuZXJhdG9yKCByZW5kZXJlciApO1xuXG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0ID0gaXNFcXVpcmVjdE1hcCA/IHBtcmVtR2VuZXJhdG9yLmZyb21FcXVpcmVjdGFuZ3VsYXIoIHRleHR1cmUsIHJlbmRlclRhcmdldCApIDogcG1yZW1HZW5lcmF0b3IuZnJvbUN1YmVtYXAoIHRleHR1cmUsIHJlbmRlclRhcmdldCApO1xuXHRcdFx0XHRcdHJlbmRlclRhcmdldC50ZXh0dXJlLnBtcmVtVmVyc2lvbiA9IHRleHR1cmUucG1yZW1WZXJzaW9uO1xuXG5cdFx0XHRcdFx0Y3ViZVVWbWFwcy5zZXQoIHRleHR1cmUsIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHJlbmRlclRhcmdldC50ZXh0dXJlO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBpbWFnZSA9IHRleHR1cmUuaW1hZ2U7XG5cblx0XHRcdFx0XHRcdGlmICggKCBpc0VxdWlyZWN0TWFwICYmIGltYWdlICYmIGltYWdlLmhlaWdodCA+IDAgKSB8fCAoIGlzQ3ViZU1hcCAmJiBpbWFnZSAmJiBpc0N1YmVUZXh0dXJlQ29tcGxldGUoIGltYWdlICkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHBtcmVtR2VuZXJhdG9yID09PSBudWxsICkgcG1yZW1HZW5lcmF0b3IgPSBuZXcgUE1SRU1HZW5lcmF0b3IoIHJlbmRlcmVyICk7XG5cblx0XHRcdFx0XHRcdFx0cmVuZGVyVGFyZ2V0ID0gaXNFcXVpcmVjdE1hcCA/IHBtcmVtR2VuZXJhdG9yLmZyb21FcXVpcmVjdGFuZ3VsYXIoIHRleHR1cmUgKSA6IHBtcmVtR2VuZXJhdG9yLmZyb21DdWJlbWFwKCB0ZXh0dXJlICk7XG5cdFx0XHRcdFx0XHRcdHJlbmRlclRhcmdldC50ZXh0dXJlLnBtcmVtVmVyc2lvbiA9IHRleHR1cmUucG1yZW1WZXJzaW9uO1xuXG5cdFx0XHRcdFx0XHRcdGN1YmVVVm1hcHMuc2V0KCB0ZXh0dXJlLCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHRcdFx0XHR0ZXh0dXJlLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApO1xuXG5cdFx0XHRcdFx0XHRcdHJldHVybiByZW5kZXJUYXJnZXQudGV4dHVyZTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBpbWFnZSBub3QgeWV0IHJlYWR5LiB0cnkgdGhlIGNvbnZlcnNpb24gbmV4dCBmcmFtZVxuXG5cdFx0XHRcdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaXNDdWJlVGV4dHVyZUNvbXBsZXRlKCBpbWFnZSApIHtcblxuXHRcdGxldCBjb3VudCA9IDA7XG5cdFx0Y29uc3QgbGVuZ3RoID0gNjtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBpbWFnZVsgaSBdICE9PSB1bmRlZmluZWQgKSBjb3VudCArKztcblxuXHRcdH1cblxuXHRcdHJldHVybiBjb3VudCA9PT0gbGVuZ3RoO1xuXG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uVGV4dHVyZURpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IGV2ZW50LnRhcmdldDtcblxuXHRcdHRleHR1cmUucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7XG5cblx0XHRjb25zdCBjdWJlbWFwVVYgPSBjdWJlVVZtYXBzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCBjdWJlbWFwVVYgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y3ViZVVWbWFwcy5kZWxldGUoIHRleHR1cmUgKTtcblx0XHRcdGN1YmVtYXBVVi5kaXNwb3NlKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cblx0XHRjdWJlVVZtYXBzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRcdGlmICggcG1yZW1HZW5lcmF0b3IgIT09IG51bGwgKSB7XG5cblx0XHRcdHBtcmVtR2VuZXJhdG9yLmRpc3Bvc2UoKTtcblx0XHRcdHBtcmVtR2VuZXJhdG9yID0gbnVsbDtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGdldCxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xFeHRlbnNpb25zKCBnbCApIHtcblxuXHRjb25zdCBleHRlbnNpb25zID0ge307XG5cblx0ZnVuY3Rpb24gZ2V0RXh0ZW5zaW9uKCBuYW1lICkge1xuXG5cdFx0aWYgKCBleHRlbnNpb25zWyBuYW1lIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmV0dXJuIGV4dGVuc2lvbnNbIG5hbWUgXTtcblxuXHRcdH1cblxuXHRcdGxldCBleHRlbnNpb247XG5cblx0XHRzd2l0Y2ggKCBuYW1lICkge1xuXG5cdFx0XHRjYXNlICdXRUJHTF9kZXB0aF90ZXh0dXJlJzpcblx0XHRcdFx0ZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCR0xfZGVwdGhfdGV4dHVyZScgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdNT1pfV0VCR0xfZGVwdGhfdGV4dHVyZScgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdXRUJLSVRfV0VCR0xfZGVwdGhfdGV4dHVyZScgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYyc6XG5cdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdNT1pfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ1dFQktJVF9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Yyc6XG5cdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ01PWl9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdXRUJLSVRfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnOlxuXHRcdFx0XHRleHRlbnNpb24gPSBnbC5nZXRFeHRlbnNpb24oICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCS0lUX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggbmFtZSApO1xuXG5cdFx0fVxuXG5cdFx0ZXh0ZW5zaW9uc1sgbmFtZSBdID0gZXh0ZW5zaW9uO1xuXG5cdFx0cmV0dXJuIGV4dGVuc2lvbjtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGhhczogZnVuY3Rpb24gKCBuYW1lICkge1xuXG5cdFx0XHRyZXR1cm4gZ2V0RXh0ZW5zaW9uKCBuYW1lICkgIT09IG51bGw7XG5cblx0XHR9LFxuXG5cdFx0aW5pdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRnZXRFeHRlbnNpb24oICdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0JyApO1xuXHRcdFx0Z2V0RXh0ZW5zaW9uKCAnV0VCR0xfY2xpcF9jdWxsX2Rpc3RhbmNlJyApO1xuXHRcdFx0Z2V0RXh0ZW5zaW9uKCAnT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyApO1xuXHRcdFx0Z2V0RXh0ZW5zaW9uKCAnRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0JyApO1xuXHRcdFx0Z2V0RXh0ZW5zaW9uKCAnV0VCR0xfbXVsdGlzYW1wbGVkX3JlbmRlcl90b190ZXh0dXJlJyApO1xuXHRcdFx0Z2V0RXh0ZW5zaW9uKCAnV0VCR0xfcmVuZGVyX3NoYXJlZF9leHBvbmVudCcgKTtcblxuXHRcdH0sXG5cblx0XHRnZXQ6IGZ1bmN0aW9uICggbmFtZSApIHtcblxuXHRcdFx0Y29uc3QgZXh0ZW5zaW9uID0gZ2V0RXh0ZW5zaW9uKCBuYW1lICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uID09PSBudWxsICkge1xuXG5cdFx0XHRcdHdhcm5PbmNlKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogJyArIG5hbWUgKyAnIGV4dGVuc2lvbiBub3Qgc3VwcG9ydGVkLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXh0ZW5zaW9uO1xuXG5cdFx0fVxuXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xHZW9tZXRyaWVzKCBnbCwgYXR0cmlidXRlcywgaW5mbywgYmluZGluZ1N0YXRlcyApIHtcblxuXHRjb25zdCBnZW9tZXRyaWVzID0ge307XG5cdGNvbnN0IHdpcmVmcmFtZUF0dHJpYnV0ZXMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdGZ1bmN0aW9uIG9uR2VvbWV0cnlEaXNwb3NlKCBldmVudCApIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5pbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0YXR0cmlidXRlcy5yZW1vdmUoIGdlb21ldHJ5LmluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCBjb25zdCBuYW1lIGluIGdlb21ldHJ5LmF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZXMucmVtb3ZlKCBnZW9tZXRyeS5hdHRyaWJ1dGVzWyBuYW1lIF0gKTtcblxuXHRcdH1cblxuXHRcdGdlb21ldHJ5LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25HZW9tZXRyeURpc3Bvc2UgKTtcblxuXHRcdGRlbGV0ZSBnZW9tZXRyaWVzWyBnZW9tZXRyeS5pZCBdO1xuXG5cdFx0Y29uc3QgYXR0cmlidXRlID0gd2lyZWZyYW1lQXR0cmlidXRlcy5nZXQoIGdlb21ldHJ5ICk7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlcy5yZW1vdmUoIGF0dHJpYnV0ZSApO1xuXHRcdFx0d2lyZWZyYW1lQXR0cmlidXRlcy5kZWxldGUoIGdlb21ldHJ5ICk7XG5cblx0XHR9XG5cblx0XHRiaW5kaW5nU3RhdGVzLnJlbGVhc2VTdGF0ZXNPZkdlb21ldHJ5KCBnZW9tZXRyeSApO1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ID09PSB0cnVlICkge1xuXG5cdFx0XHRkZWxldGUgZ2VvbWV0cnkuX21heEluc3RhbmNlQ291bnQ7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aW5mby5tZW1vcnkuZ2VvbWV0cmllcyAtLTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0KCBvYmplY3QsIGdlb21ldHJ5ICkge1xuXG5cdFx0aWYgKCBnZW9tZXRyaWVzWyBnZW9tZXRyeS5pZCBdID09PSB0cnVlICkgcmV0dXJuIGdlb21ldHJ5O1xuXG5cdFx0Z2VvbWV0cnkuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbkdlb21ldHJ5RGlzcG9zZSApO1xuXG5cdFx0Z2VvbWV0cmllc1sgZ2VvbWV0cnkuaWQgXSA9IHRydWU7XG5cblx0XHRpbmZvLm1lbW9yeS5nZW9tZXRyaWVzICsrO1xuXG5cdFx0cmV0dXJuIGdlb21ldHJ5O1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGUoIGdlb21ldHJ5ICkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnlBdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcblxuXHRcdC8vIFVwZGF0aW5nIGluZGV4IGJ1ZmZlciBpbiBWQU8gbm93LiBTZWUgV2ViR0xCaW5kaW5nU3RhdGVzLlxuXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiBnZW9tZXRyeUF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZXMudXBkYXRlKCBnZW9tZXRyeUF0dHJpYnV0ZXNbIG5hbWUgXSwgZ2wuQVJSQVlfQlVGRkVSICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZVdpcmVmcmFtZUF0dHJpYnV0ZSggZ2VvbWV0cnkgKSB7XG5cblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cblx0XHRjb25zdCBnZW9tZXRyeUluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0Y29uc3QgZ2VvbWV0cnlQb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0bGV0IHZlcnNpb24gPSAwO1xuXG5cdFx0aWYgKCBnZW9tZXRyeUluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCBhcnJheSA9IGdlb21ldHJ5SW5kZXguYXJyYXk7XG5cdFx0XHR2ZXJzaW9uID0gZ2VvbWV0cnlJbmRleC52ZXJzaW9uO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0Y29uc3QgYSA9IGFycmF5WyBpICsgMCBdO1xuXHRcdFx0XHRjb25zdCBiID0gYXJyYXlbIGkgKyAxIF07XG5cdFx0XHRcdGNvbnN0IGMgPSBhcnJheVsgaSArIDIgXTtcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGIsIGMsIGMsIGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggZ2VvbWV0cnlQb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBhcnJheSA9IGdlb21ldHJ5UG9zaXRpb24uYXJyYXk7XG5cdFx0XHR2ZXJzaW9uID0gZ2VvbWV0cnlQb3NpdGlvbi52ZXJzaW9uO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSAoIGFycmF5Lmxlbmd0aCAvIDMgKSAtIDE7IGkgPCBsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0Y29uc3QgYSA9IGkgKyAwO1xuXHRcdFx0XHRjb25zdCBiID0gaSArIDE7XG5cdFx0XHRcdGNvbnN0IGMgPSBpICsgMjtcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGIsIGMsIGMsIGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYXR0cmlidXRlID0gbmV3ICggYXJyYXlOZWVkc1VpbnQzMiggaW5kaWNlcyApID8gVWludDMyQnVmZmVyQXR0cmlidXRlIDogVWludDE2QnVmZmVyQXR0cmlidXRlICkoIGluZGljZXMsIDEgKTtcblx0XHRhdHRyaWJ1dGUudmVyc2lvbiA9IHZlcnNpb247XG5cblx0XHQvLyBVcGRhdGluZyBpbmRleCBidWZmZXIgaW4gVkFPIG5vdy4gU2VlIFdlYkdMQmluZGluZ1N0YXRlc1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IHByZXZpb3VzQXR0cmlidXRlID0gd2lyZWZyYW1lQXR0cmlidXRlcy5nZXQoIGdlb21ldHJ5ICk7XG5cblx0XHRpZiAoIHByZXZpb3VzQXR0cmlidXRlICkgYXR0cmlidXRlcy5yZW1vdmUoIHByZXZpb3VzQXR0cmlidXRlICk7XG5cblx0XHQvL1xuXG5cdFx0d2lyZWZyYW1lQXR0cmlidXRlcy5zZXQoIGdlb21ldHJ5LCBhdHRyaWJ1dGUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0V2lyZWZyYW1lQXR0cmlidXRlKCBnZW9tZXRyeSApIHtcblxuXHRcdGNvbnN0IGN1cnJlbnRBdHRyaWJ1dGUgPSB3aXJlZnJhbWVBdHRyaWJ1dGVzLmdldCggZ2VvbWV0cnkgKTtcblxuXHRcdGlmICggY3VycmVudEF0dHJpYnV0ZSApIHtcblxuXHRcdFx0Y29uc3QgZ2VvbWV0cnlJbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5SW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0Ly8gaWYgdGhlIGF0dHJpYnV0ZSBpcyBvYnNvbGV0ZSwgY3JlYXRlIGEgbmV3IG9uZVxuXG5cdFx0XHRcdGlmICggY3VycmVudEF0dHJpYnV0ZS52ZXJzaW9uIDwgZ2VvbWV0cnlJbmRleC52ZXJzaW9uICkge1xuXG5cdFx0XHRcdFx0dXBkYXRlV2lyZWZyYW1lQXR0cmlidXRlKCBnZW9tZXRyeSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dXBkYXRlV2lyZWZyYW1lQXR0cmlidXRlKCBnZW9tZXRyeSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHdpcmVmcmFtZUF0dHJpYnV0ZXMuZ2V0KCBnZW9tZXRyeSApO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0Z2V0OiBnZXQsXG5cdFx0dXBkYXRlOiB1cGRhdGUsXG5cblx0XHRnZXRXaXJlZnJhbWVBdHRyaWJ1dGU6IGdldFdpcmVmcmFtZUF0dHJpYnV0ZVxuXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXIoIGdsLCBleHRlbnNpb25zLCBpbmZvICkge1xuXG5cdGxldCBtb2RlO1xuXG5cdGZ1bmN0aW9uIHNldE1vZGUoIHZhbHVlICkge1xuXG5cdFx0bW9kZSA9IHZhbHVlO1xuXG5cdH1cblxuXHRsZXQgdHlwZSwgYnl0ZXNQZXJFbGVtZW50O1xuXG5cdGZ1bmN0aW9uIHNldEluZGV4KCB2YWx1ZSApIHtcblxuXHRcdHR5cGUgPSB2YWx1ZS50eXBlO1xuXHRcdGJ5dGVzUGVyRWxlbWVudCA9IHZhbHVlLmJ5dGVzUGVyRWxlbWVudDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyKCBzdGFydCwgY291bnQgKSB7XG5cblx0XHRnbC5kcmF3RWxlbWVudHMoIG1vZGUsIGNvdW50LCB0eXBlLCBzdGFydCAqIGJ5dGVzUGVyRWxlbWVudCApO1xuXG5cdFx0aW5mby51cGRhdGUoIGNvdW50LCBtb2RlLCAxICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlckluc3RhbmNlcyggc3RhcnQsIGNvdW50LCBwcmltY291bnQgKSB7XG5cblx0XHRpZiAoIHByaW1jb3VudCA9PT0gMCApIHJldHVybjtcblxuXHRcdGdsLmRyYXdFbGVtZW50c0luc3RhbmNlZCggbW9kZSwgY291bnQsIHR5cGUsIHN0YXJ0ICogYnl0ZXNQZXJFbGVtZW50LCBwcmltY291bnQgKTtcblxuXHRcdGluZm8udXBkYXRlKCBjb3VudCwgbW9kZSwgcHJpbWNvdW50ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlck11bHRpRHJhdyggc3RhcnRzLCBjb3VudHMsIGRyYXdDb3VudCApIHtcblxuXHRcdGlmICggZHJhd0NvdW50ID09PSAwICkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9tdWx0aV9kcmF3JyApO1xuXHRcdGV4dGVuc2lvbi5tdWx0aURyYXdFbGVtZW50c1dFQkdMKCBtb2RlLCBjb3VudHMsIDAsIHR5cGUsIHN0YXJ0cywgMCwgZHJhd0NvdW50ICk7XG5cblx0XHRsZXQgZWxlbWVudENvdW50ID0gMDtcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkcmF3Q291bnQ7IGkgKysgKSB7XG5cblx0XHRcdGVsZW1lbnRDb3VudCArPSBjb3VudHNbIGkgXTtcblxuXHRcdH1cblxuXHRcdGluZm8udXBkYXRlKCBlbGVtZW50Q291bnQsIG1vZGUsIDEgKTtcblxuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXJNdWx0aURyYXdJbnN0YW5jZXMoIHN0YXJ0cywgY291bnRzLCBkcmF3Q291bnQsIHByaW1jb3VudCApIHtcblxuXHRcdGlmICggZHJhd0NvdW50ID09PSAwICkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9tdWx0aV9kcmF3JyApO1xuXG5cdFx0aWYgKCBleHRlbnNpb24gPT09IG51bGwgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHN0YXJ0cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0cmVuZGVySW5zdGFuY2VzKCBzdGFydHNbIGkgXSAvIGJ5dGVzUGVyRWxlbWVudCwgY291bnRzWyBpIF0sIHByaW1jb3VudFsgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGV4dGVuc2lvbi5tdWx0aURyYXdFbGVtZW50c0luc3RhbmNlZFdFQkdMKCBtb2RlLCBjb3VudHMsIDAsIHR5cGUsIHN0YXJ0cywgMCwgcHJpbWNvdW50LCAwLCBkcmF3Q291bnQgKTtcblxuXHRcdFx0bGV0IGVsZW1lbnRDb3VudCA9IDA7XG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkcmF3Q291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0ZWxlbWVudENvdW50ICs9IGNvdW50c1sgaSBdICogcHJpbWNvdW50WyBpIF07XG5cblx0XHRcdH1cblxuXHRcdFx0aW5mby51cGRhdGUoIGVsZW1lbnRDb3VudCwgbW9kZSwgMSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXG5cdHRoaXMuc2V0TW9kZSA9IHNldE1vZGU7XG5cdHRoaXMuc2V0SW5kZXggPSBzZXRJbmRleDtcblx0dGhpcy5yZW5kZXIgPSByZW5kZXI7XG5cdHRoaXMucmVuZGVySW5zdGFuY2VzID0gcmVuZGVySW5zdGFuY2VzO1xuXHR0aGlzLnJlbmRlck11bHRpRHJhdyA9IHJlbmRlck11bHRpRHJhdztcblx0dGhpcy5yZW5kZXJNdWx0aURyYXdJbnN0YW5jZXMgPSByZW5kZXJNdWx0aURyYXdJbnN0YW5jZXM7XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xJbmZvKCBnbCApIHtcblxuXHRjb25zdCBtZW1vcnkgPSB7XG5cdFx0Z2VvbWV0cmllczogMCxcblx0XHR0ZXh0dXJlczogMFxuXHR9O1xuXG5cdGNvbnN0IHJlbmRlciA9IHtcblx0XHRmcmFtZTogMCxcblx0XHRjYWxsczogMCxcblx0XHR0cmlhbmdsZXM6IDAsXG5cdFx0cG9pbnRzOiAwLFxuXHRcdGxpbmVzOiAwXG5cdH07XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBjb3VudCwgbW9kZSwgaW5zdGFuY2VDb3VudCApIHtcblxuXHRcdHJlbmRlci5jYWxscyArKztcblxuXHRcdHN3aXRjaCAoIG1vZGUgKSB7XG5cblx0XHRcdGNhc2UgZ2wuVFJJQU5HTEVTOlxuXHRcdFx0XHRyZW5kZXIudHJpYW5nbGVzICs9IGluc3RhbmNlQ291bnQgKiAoIGNvdW50IC8gMyApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBnbC5MSU5FUzpcblx0XHRcdFx0cmVuZGVyLmxpbmVzICs9IGluc3RhbmNlQ291bnQgKiAoIGNvdW50IC8gMiApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBnbC5MSU5FX1NUUklQOlxuXHRcdFx0XHRyZW5kZXIubGluZXMgKz0gaW5zdGFuY2VDb3VudCAqICggY291bnQgLSAxICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIGdsLkxJTkVfTE9PUDpcblx0XHRcdFx0cmVuZGVyLmxpbmVzICs9IGluc3RhbmNlQ291bnQgKiBjb3VudDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgZ2wuUE9JTlRTOlxuXHRcdFx0XHRyZW5kZXIucG9pbnRzICs9IGluc3RhbmNlQ291bnQgKiBjb3VudDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTEluZm86IFVua25vd24gZHJhdyBtb2RlOicsIG1vZGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlc2V0KCkge1xuXG5cdFx0cmVuZGVyLmNhbGxzID0gMDtcblx0XHRyZW5kZXIudHJpYW5nbGVzID0gMDtcblx0XHRyZW5kZXIucG9pbnRzID0gMDtcblx0XHRyZW5kZXIubGluZXMgPSAwO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdG1lbW9yeTogbWVtb3J5LFxuXHRcdHJlbmRlcjogcmVuZGVyLFxuXHRcdHByb2dyYW1zOiBudWxsLFxuXHRcdGF1dG9SZXNldDogdHJ1ZSxcblx0XHRyZXNldDogcmVzZXQsXG5cdFx0dXBkYXRlOiB1cGRhdGVcblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTE1vcnBodGFyZ2V0cyggZ2wsIGNhcGFiaWxpdGllcywgdGV4dHVyZXMgKSB7XG5cblx0Y29uc3QgbW9ycGhUZXh0dXJlcyA9IG5ldyBXZWFrTWFwKCk7XG5cdGNvbnN0IG1vcnBoID0gbmV3IFZlY3RvcjQoKTtcblxuXHRmdW5jdGlvbiB1cGRhdGUoIG9iamVjdCwgZ2VvbWV0cnksIHByb2dyYW0gKSB7XG5cblx0XHRjb25zdCBvYmplY3RJbmZsdWVuY2VzID0gb2JqZWN0Lm1vcnBoVGFyZ2V0SW5mbHVlbmNlcztcblxuXHRcdC8vIHRoZSBmb2xsb3dpbmcgZW5jb2RlcyBtb3JwaCB0YXJnZXRzIGludG8gYW4gYXJyYXkgb2YgZGF0YSB0ZXh0dXJlcy4gRWFjaCBsYXllciByZXByZXNlbnRzIGEgc2luZ2xlIG1vcnBoIHRhcmdldC5cblxuXHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uIHx8IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgfHwgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLmNvbG9yO1xuXHRcdGNvbnN0IG1vcnBoVGFyZ2V0c0NvdW50ID0gKCBtb3JwaEF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkgPyBtb3JwaEF0dHJpYnV0ZS5sZW5ndGggOiAwO1xuXG5cdFx0bGV0IGVudHJ5ID0gbW9ycGhUZXh0dXJlcy5nZXQoIGdlb21ldHJ5ICk7XG5cblx0XHRpZiAoIGVudHJ5ID09PSB1bmRlZmluZWQgfHwgZW50cnkuY291bnQgIT09IG1vcnBoVGFyZ2V0c0NvdW50ICkge1xuXG5cdFx0XHRpZiAoIGVudHJ5ICE9PSB1bmRlZmluZWQgKSBlbnRyeS50ZXh0dXJlLmRpc3Bvc2UoKTtcblxuXHRcdFx0Y29uc3QgaGFzTW9ycGhQb3NpdGlvbiA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbiAhPT0gdW5kZWZpbmVkO1xuXHRcdFx0Y29uc3QgaGFzTW9ycGhOb3JtYWxzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCAhPT0gdW5kZWZpbmVkO1xuXHRcdFx0Y29uc3QgaGFzTW9ycGhDb2xvcnMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3IgIT09IHVuZGVmaW5lZDtcblxuXHRcdFx0Y29uc3QgbW9ycGhUYXJnZXRzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uIHx8IFtdO1xuXHRcdFx0Y29uc3QgbW9ycGhOb3JtYWxzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCB8fCBbXTtcblx0XHRcdGNvbnN0IG1vcnBoQ29sb3JzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLmNvbG9yIHx8IFtdO1xuXG5cdFx0XHRsZXQgdmVydGV4RGF0YUNvdW50ID0gMDtcblxuXHRcdFx0aWYgKCBoYXNNb3JwaFBvc2l0aW9uID09PSB0cnVlICkgdmVydGV4RGF0YUNvdW50ID0gMTtcblx0XHRcdGlmICggaGFzTW9ycGhOb3JtYWxzID09PSB0cnVlICkgdmVydGV4RGF0YUNvdW50ID0gMjtcblx0XHRcdGlmICggaGFzTW9ycGhDb2xvcnMgPT09IHRydWUgKSB2ZXJ0ZXhEYXRhQ291bnQgPSAzO1xuXG5cdFx0XHRsZXQgd2lkdGggPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmNvdW50ICogdmVydGV4RGF0YUNvdW50O1xuXHRcdFx0bGV0IGhlaWdodCA9IDE7XG5cblx0XHRcdGlmICggd2lkdGggPiBjYXBhYmlsaXRpZXMubWF4VGV4dHVyZVNpemUgKSB7XG5cblx0XHRcdFx0aGVpZ2h0ID0gTWF0aC5jZWlsKCB3aWR0aCAvIGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlU2l6ZSApO1xuXHRcdFx0XHR3aWR0aCA9IGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlU2l6ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBidWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KCB3aWR0aCAqIGhlaWdodCAqIDQgKiBtb3JwaFRhcmdldHNDb3VudCApO1xuXG5cdFx0XHRjb25zdCB0ZXh0dXJlID0gbmV3IERhdGFBcnJheVRleHR1cmUoIGJ1ZmZlciwgd2lkdGgsIGhlaWdodCwgbW9ycGhUYXJnZXRzQ291bnQgKTtcblx0XHRcdHRleHR1cmUudHlwZSA9IEZsb2F0VHlwZTtcblx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHQvLyBmaWxsIGJ1ZmZlclxuXG5cdFx0XHRjb25zdCB2ZXJ0ZXhEYXRhU3RyaWRlID0gdmVydGV4RGF0YUNvdW50ICogNDtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgbW9ycGhUYXJnZXRzQ291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgbW9ycGhUYXJnZXQgPSBtb3JwaFRhcmdldHNbIGkgXTtcblx0XHRcdFx0Y29uc3QgbW9ycGhOb3JtYWwgPSBtb3JwaE5vcm1hbHNbIGkgXTtcblx0XHRcdFx0Y29uc3QgbW9ycGhDb2xvciA9IG1vcnBoQ29sb3JzWyBpIF07XG5cblx0XHRcdFx0Y29uc3Qgb2Zmc2V0ID0gd2lkdGggKiBoZWlnaHQgKiA0ICogaTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCBtb3JwaFRhcmdldC5jb3VudDsgaiArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHN0cmlkZSA9IGogKiB2ZXJ0ZXhEYXRhU3RyaWRlO1xuXG5cdFx0XHRcdFx0aWYgKCBoYXNNb3JwaFBvc2l0aW9uID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0XHRtb3JwaC5mcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaFRhcmdldCwgaiApO1xuXG5cdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDAgXSA9IG1vcnBoLng7XG5cdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDEgXSA9IG1vcnBoLnk7XG5cdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDIgXSA9IG1vcnBoLno7XG5cdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDMgXSA9IDA7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGhhc01vcnBoTm9ybWFscyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0bW9ycGguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhOb3JtYWwsIGogKTtcblxuXHRcdFx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyA0IF0gPSBtb3JwaC54O1xuXHRcdFx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyA1IF0gPSBtb3JwaC55O1xuXHRcdFx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyA2IF0gPSBtb3JwaC56O1xuXHRcdFx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyA3IF0gPSAwO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBoYXNNb3JwaENvbG9ycyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0bW9ycGguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhDb2xvciwgaiApO1xuXG5cdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDggXSA9IG1vcnBoLng7XG5cdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDkgXSA9IG1vcnBoLnk7XG5cdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDEwIF0gPSBtb3JwaC56O1xuXHRcdFx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyAxMSBdID0gKCBtb3JwaENvbG9yLml0ZW1TaXplID09PSA0ICkgPyBtb3JwaC53IDogMTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0ZW50cnkgPSB7XG5cdFx0XHRcdGNvdW50OiBtb3JwaFRhcmdldHNDb3VudCxcblx0XHRcdFx0dGV4dHVyZTogdGV4dHVyZSxcblx0XHRcdFx0c2l6ZTogbmV3IFZlY3RvcjIoIHdpZHRoLCBoZWlnaHQgKVxuXHRcdFx0fTtcblxuXHRcdFx0bW9ycGhUZXh0dXJlcy5zZXQoIGdlb21ldHJ5LCBlbnRyeSApO1xuXG5cdFx0XHRmdW5jdGlvbiBkaXNwb3NlVGV4dHVyZSgpIHtcblxuXHRcdFx0XHR0ZXh0dXJlLmRpc3Bvc2UoKTtcblxuXHRcdFx0XHRtb3JwaFRleHR1cmVzLmRlbGV0ZSggZ2VvbWV0cnkgKTtcblxuXHRcdFx0XHRnZW9tZXRyeS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIGRpc3Bvc2VUZXh0dXJlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cnkuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBkaXNwb3NlVGV4dHVyZSApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblx0XHRpZiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggPT09IHRydWUgJiYgb2JqZWN0Lm1vcnBoVGV4dHVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGV4dHVyZScsIG9iamVjdC5tb3JwaFRleHR1cmUsIHRleHR1cmVzICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRsZXQgbW9ycGhJbmZsdWVuY2VzU3VtID0gMDtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgb2JqZWN0SW5mbHVlbmNlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0bW9ycGhJbmZsdWVuY2VzU3VtICs9IG9iamVjdEluZmx1ZW5jZXNbIGkgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBtb3JwaEJhc2VJbmZsdWVuY2UgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHNSZWxhdGl2ZSA/IDEgOiAxIC0gbW9ycGhJbmZsdWVuY2VzU3VtO1xuXG5cblx0XHRcdHByb2dyYW0uZ2V0VW5pZm9ybXMoKS5zZXRWYWx1ZSggZ2wsICdtb3JwaFRhcmdldEJhc2VJbmZsdWVuY2UnLCBtb3JwaEJhc2VJbmZsdWVuY2UgKTtcblx0XHRcdHByb2dyYW0uZ2V0VW5pZm9ybXMoKS5zZXRWYWx1ZSggZ2wsICdtb3JwaFRhcmdldEluZmx1ZW5jZXMnLCBvYmplY3RJbmZsdWVuY2VzICk7XG5cblx0XHR9XG5cblx0XHRwcm9ncmFtLmdldFVuaWZvcm1zKCkuc2V0VmFsdWUoIGdsLCAnbW9ycGhUYXJnZXRzVGV4dHVyZScsIGVudHJ5LnRleHR1cmUsIHRleHR1cmVzICk7XG5cdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0c1RleHR1cmVTaXplJywgZW50cnkuc2l6ZSApO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0dXBkYXRlOiB1cGRhdGVcblxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMT2JqZWN0cyggZ2wsIGdlb21ldHJpZXMsIGF0dHJpYnV0ZXMsIGluZm8gKSB7XG5cblx0bGV0IHVwZGF0ZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBvYmplY3QgKSB7XG5cblx0XHRjb25zdCBmcmFtZSA9IGluZm8ucmVuZGVyLmZyYW1lO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XG5cdFx0Y29uc3QgYnVmZmVyZ2VvbWV0cnkgPSBnZW9tZXRyaWVzLmdldCggb2JqZWN0LCBnZW9tZXRyeSApO1xuXG5cdFx0Ly8gVXBkYXRlIG9uY2UgcGVyIGZyYW1lXG5cblx0XHRpZiAoIHVwZGF0ZU1hcC5nZXQoIGJ1ZmZlcmdlb21ldHJ5ICkgIT09IGZyYW1lICkge1xuXG5cdFx0XHRnZW9tZXRyaWVzLnVwZGF0ZSggYnVmZmVyZ2VvbWV0cnkgKTtcblxuXHRcdFx0dXBkYXRlTWFwLnNldCggYnVmZmVyZ2VvbWV0cnksIGZyYW1lICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggKSB7XG5cblx0XHRcdGlmICggb2JqZWN0Lmhhc0V2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25JbnN0YW5jZWRNZXNoRGlzcG9zZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRvYmplY3QuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbkluc3RhbmNlZE1lc2hEaXNwb3NlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB1cGRhdGVNYXAuZ2V0KCBvYmplY3QgKSAhPT0gZnJhbWUgKSB7XG5cblx0XHRcdFx0YXR0cmlidXRlcy51cGRhdGUoIG9iamVjdC5pbnN0YW5jZU1hdHJpeCwgZ2wuQVJSQVlfQlVGRkVSICk7XG5cblx0XHRcdFx0aWYgKCBvYmplY3QuaW5zdGFuY2VDb2xvciAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdGF0dHJpYnV0ZXMudXBkYXRlKCBvYmplY3QuaW5zdGFuY2VDb2xvciwgZ2wuQVJSQVlfQlVGRkVSICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHVwZGF0ZU1hcC5zZXQoIG9iamVjdCwgZnJhbWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3QuaXNTa2lubmVkTWVzaCApIHtcblxuXHRcdFx0Y29uc3Qgc2tlbGV0b24gPSBvYmplY3Quc2tlbGV0b247XG5cblx0XHRcdGlmICggdXBkYXRlTWFwLmdldCggc2tlbGV0b24gKSAhPT0gZnJhbWUgKSB7XG5cblx0XHRcdFx0c2tlbGV0b24udXBkYXRlKCk7XG5cblx0XHRcdFx0dXBkYXRlTWFwLnNldCggc2tlbGV0b24sIGZyYW1lICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBidWZmZXJnZW9tZXRyeTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdHVwZGF0ZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uSW5zdGFuY2VkTWVzaERpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgaW5zdGFuY2VkTWVzaCA9IGV2ZW50LnRhcmdldDtcblxuXHRcdGluc3RhbmNlZE1lc2gucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbkluc3RhbmNlZE1lc2hEaXNwb3NlICk7XG5cblx0XHRhdHRyaWJ1dGVzLnJlbW92ZSggaW5zdGFuY2VkTWVzaC5pbnN0YW5jZU1hdHJpeCApO1xuXG5cdFx0aWYgKCBpbnN0YW5jZWRNZXNoLmluc3RhbmNlQ29sb3IgIT09IG51bGwgKSBhdHRyaWJ1dGVzLnJlbW92ZSggaW5zdGFuY2VkTWVzaC5pbnN0YW5jZUNvbG9yICk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHR1cGRhdGU6IHVwZGF0ZSxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cblx0fTtcblxufVxuXG4vKipcbiAqIFVuaWZvcm1zIG9mIGEgcHJvZ3JhbS5cbiAqIFRob3NlIGZvcm0gYSB0cmVlIHN0cnVjdHVyZSB3aXRoIGEgc3BlY2lhbCB0b3AtbGV2ZWwgY29udGFpbmVyIGZvciB0aGUgcm9vdCxcbiAqIHdoaWNoIHlvdSBnZXQgYnkgY2FsbGluZyAnbmV3IFdlYkdMVW5pZm9ybXMoIGdsLCBwcm9ncmFtICknLlxuICpcbiAqXG4gKiBQcm9wZXJ0aWVzIG9mIGlubmVyIG5vZGVzIGluY2x1ZGluZyB0aGUgdG9wLWxldmVsIGNvbnRhaW5lcjpcbiAqXG4gKiAuc2VxIC0gYXJyYXkgb2YgbmVzdGVkIHVuaWZvcm1zXG4gKiAubWFwIC0gbmVzdGVkIHVuaWZvcm1zIGJ5IG5hbWVcbiAqXG4gKlxuICogTWV0aG9kcyBvZiBhbGwgbm9kZXMgZXhjZXB0IHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyOlxuICpcbiAqIC5zZXRWYWx1ZSggZ2wsIHZhbHVlLCBbdGV4dHVyZXNdIClcbiAqXG4gKiBcdFx0dXBsb2FkcyBhIHVuaWZvcm0gdmFsdWUocylcbiAqICBcdHRoZSAndGV4dHVyZXMnIHBhcmFtZXRlciBpcyBuZWVkZWQgZm9yIHNhbXBsZXIgdW5pZm9ybXNcbiAqXG4gKlxuICogU3RhdGljIG1ldGhvZHMgb2YgdGhlIHRvcC1sZXZlbCBjb250YWluZXIgKHRleHR1cmVzIGZhY3Rvcml6YXRpb25zKTpcbiAqXG4gKiAudXBsb2FkKCBnbCwgc2VxLCB2YWx1ZXMsIHRleHR1cmVzIClcbiAqXG4gKiBcdFx0c2V0cyB1bmlmb3JtcyBpbiAnc2VxJyB0byAndmFsdWVzW2lkXS52YWx1ZSdcbiAqXG4gKiAuc2VxV2l0aFZhbHVlKCBzZXEsIHZhbHVlcyApIDogZmlsdGVyZWRTZXFcbiAqXG4gKiBcdFx0ZmlsdGVycyAnc2VxJyBlbnRyaWVzIHdpdGggY29ycmVzcG9uZGluZyBlbnRyeSBpbiB2YWx1ZXNcbiAqXG4gKlxuICogTWV0aG9kcyBvZiB0aGUgdG9wLWxldmVsIGNvbnRhaW5lciAodGV4dHVyZXMgZmFjdG9yaXphdGlvbnMpOlxuICpcbiAqIC5zZXRWYWx1ZSggZ2wsIG5hbWUsIHZhbHVlLCB0ZXh0dXJlcyApXG4gKlxuICogXHRcdHNldHMgdW5pZm9ybSB3aXRoICBuYW1lICduYW1lJyB0byAndmFsdWUnXG4gKlxuICogLnNldE9wdGlvbmFsKCBnbCwgb2JqLCBwcm9wIClcbiAqXG4gKiBcdFx0bGlrZSAuc2V0IGZvciBhbiBvcHRpb25hbCBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0XG4gKlxuICovXG5cblxuY29uc3QgZW1wdHlUZXh0dXJlID0gLypAX19QVVJFX18qLyBuZXcgVGV4dHVyZSgpO1xuXG5jb25zdCBlbXB0eVNoYWRvd1RleHR1cmUgPSAvKkBfX1BVUkVfXyovIG5ldyBEZXB0aFRleHR1cmUoIDEsIDEgKTtcblxuY29uc3QgZW1wdHlBcnJheVRleHR1cmUgPSAvKkBfX1BVUkVfXyovIG5ldyBEYXRhQXJyYXlUZXh0dXJlKCk7XG5jb25zdCBlbXB0eTNkVGV4dHVyZSA9IC8qQF9fUFVSRV9fKi8gbmV3IERhdGEzRFRleHR1cmUoKTtcbmNvbnN0IGVtcHR5Q3ViZVRleHR1cmUgPSAvKkBfX1BVUkVfXyovIG5ldyBDdWJlVGV4dHVyZSgpO1xuXG4vLyAtLS0gVXRpbGl0aWVzIC0tLVxuXG4vLyBBcnJheSBDYWNoZXMgKHByb3ZpZGUgdHlwZWQgYXJyYXlzIGZvciB0ZW1wb3JhcnkgYnkgc2l6ZSlcblxuY29uc3QgYXJyYXlDYWNoZUYzMiA9IFtdO1xuY29uc3QgYXJyYXlDYWNoZUkzMiA9IFtdO1xuXG4vLyBGbG9hdDMyQXJyYXkgY2FjaGVzIHVzZWQgZm9yIHVwbG9hZGluZyBNYXRyaXggdW5pZm9ybXNcblxuY29uc3QgbWF0NGFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggMTYgKTtcbmNvbnN0IG1hdDNhcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIDkgKTtcbmNvbnN0IG1hdDJhcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIDQgKTtcblxuLy8gRmxhdHRlbmluZyBmb3IgYXJyYXlzIG9mIHZlY3RvcnMgYW5kIG1hdHJpY2VzXG5cbmZ1bmN0aW9uIGZsYXR0ZW4oIGFycmF5LCBuQmxvY2tzLCBibG9ja1NpemUgKSB7XG5cblx0Y29uc3QgZmlyc3RFbGVtID0gYXJyYXlbIDAgXTtcblxuXHRpZiAoIGZpcnN0RWxlbSA8PSAwIHx8IGZpcnN0RWxlbSA+IDAgKSByZXR1cm4gYXJyYXk7XG5cdC8vIHVub3B0aW1pemVkOiAhIGlzTmFOKCBmaXJzdEVsZW0gKVxuXHQvLyBzZWUgaHR0cDovL2phY2tzb25kdW5zdGFuLmNvbS9hcnRpY2xlcy85ODNcblxuXHRjb25zdCBuID0gbkJsb2NrcyAqIGJsb2NrU2l6ZTtcblx0bGV0IHIgPSBhcnJheUNhY2hlRjMyWyBuIF07XG5cblx0aWYgKCByID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRyID0gbmV3IEZsb2F0MzJBcnJheSggbiApO1xuXHRcdGFycmF5Q2FjaGVGMzJbIG4gXSA9IHI7XG5cblx0fVxuXG5cdGlmICggbkJsb2NrcyAhPT0gMCApIHtcblxuXHRcdGZpcnN0RWxlbS50b0FycmF5KCByLCAwICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDEsIG9mZnNldCA9IDA7IGkgIT09IG5CbG9ja3M7ICsrIGkgKSB7XG5cblx0XHRcdG9mZnNldCArPSBibG9ja1NpemU7XG5cdFx0XHRhcnJheVsgaSBdLnRvQXJyYXkoIHIsIG9mZnNldCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gcjtcblxufVxuXG5mdW5jdGlvbiBhcnJheXNFcXVhbCggYSwgYiApIHtcblxuXHRpZiAoIGEubGVuZ3RoICE9PSBiLmxlbmd0aCApIHJldHVybiBmYWxzZTtcblxuXHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBhLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRpZiAoIGFbIGkgXSAhPT0gYlsgaSBdICkgcmV0dXJuIGZhbHNlO1xuXG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcblxufVxuXG5mdW5jdGlvbiBjb3B5QXJyYXkoIGEsIGIgKSB7XG5cblx0Zm9yICggbGV0IGkgPSAwLCBsID0gYi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0YVsgaSBdID0gYlsgaSBdO1xuXG5cdH1cblxufVxuXG4vLyBUZXh0dXJlIHVuaXQgYWxsb2NhdGlvblxuXG5mdW5jdGlvbiBhbGxvY1RleFVuaXRzKCB0ZXh0dXJlcywgbiApIHtcblxuXHRsZXQgciA9IGFycmF5Q2FjaGVJMzJbIG4gXTtcblxuXHRpZiAoIHIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHIgPSBuZXcgSW50MzJBcnJheSggbiApO1xuXHRcdGFycmF5Q2FjaGVJMzJbIG4gXSA9IHI7XG5cblx0fVxuXG5cdGZvciAoIGxldCBpID0gMDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHJbIGkgXSA9IHRleHR1cmVzLmFsbG9jYXRlVGV4dHVyZVVuaXQoKTtcblxuXHR9XG5cblx0cmV0dXJuIHI7XG5cbn1cblxuLy8gLS0tIFNldHRlcnMgLS0tXG5cbi8vIE5vdGU6IERlZmluaW5nIHRoZXNlIG1ldGhvZHMgZXh0ZXJuYWxseSwgYmVjYXVzZSB0aGV5IGNvbWUgaW4gYSBidW5jaFxuLy8gYW5kIHRoaXMgd2F5IHRoZWlyIG5hbWVzIG1pbmlmeS5cblxuLy8gU2luZ2xlIHNjYWxhclxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYxZiggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggY2FjaGVbIDAgXSA9PT0gdiApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMWYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNhY2hlWyAwIF0gPSB2O1xuXG59XG5cbi8vIFNpbmdsZSBmbG9hdCB2ZWN0b3IgKGZyb20gZmxhdCBhcnJheSBvciBUSFJFRS5WZWN0b3JOKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYyZiggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggdi54ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGNhY2hlWyAwIF0gIT09IHYueCB8fCBjYWNoZVsgMSBdICE9PSB2LnkgKSB7XG5cblx0XHRcdGdsLnVuaWZvcm0yZiggdGhpcy5hZGRyLCB2LngsIHYueSApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi54O1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYueTtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm0yZnYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYzZiggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggdi54ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGNhY2hlWyAwIF0gIT09IHYueCB8fCBjYWNoZVsgMSBdICE9PSB2LnkgfHwgY2FjaGVbIDIgXSAhPT0gdi56ICkge1xuXG5cdFx0XHRnbC51bmlmb3JtM2YoIHRoaXMuYWRkciwgdi54LCB2LnksIHYueiApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi54O1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYueTtcblx0XHRcdGNhY2hlWyAyIF0gPSB2Lno7XG5cblx0XHR9XG5cblx0fSBlbHNlIGlmICggdi5yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGNhY2hlWyAwIF0gIT09IHYuciB8fCBjYWNoZVsgMSBdICE9PSB2LmcgfHwgY2FjaGVbIDIgXSAhPT0gdi5iICkge1xuXG5cdFx0XHRnbC51bmlmb3JtM2YoIHRoaXMuYWRkciwgdi5yLCB2LmcsIHYuYiApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi5yO1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYuZztcblx0XHRcdGNhY2hlWyAyIF0gPSB2LmI7XG5cblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0XHRnbC51bmlmb3JtM2Z2KCB0aGlzLmFkZHIsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWNGYoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55IHx8IGNhY2hlWyAyIF0gIT09IHYueiB8fCBjYWNoZVsgMyBdICE9PSB2LncgKSB7XG5cblx0XHRcdGdsLnVuaWZvcm00ZiggdGhpcy5hZGRyLCB2LngsIHYueSwgdi56LCB2LncgKTtcblxuXHRcdFx0Y2FjaGVbIDAgXSA9IHYueDtcblx0XHRcdGNhY2hlWyAxIF0gPSB2Lnk7XG5cdFx0XHRjYWNoZVsgMiBdID0gdi56O1xuXHRcdFx0Y2FjaGVbIDMgXSA9IHYudztcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm00ZnYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG4vLyBTaW5nbGUgbWF0cml4IChmcm9tIGZsYXQgYXJyYXkgb3IgVEhSRUUuTWF0cml4TilcblxuZnVuY3Rpb24gc2V0VmFsdWVNMiggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHRjb25zdCBlbGVtZW50cyA9IHYuZWxlbWVudHM7XG5cblx0aWYgKCBlbGVtZW50cyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm1NYXRyaXgyZnYoIHRoaXMuYWRkciwgZmFsc2UsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIGVsZW1lbnRzICkgKSByZXR1cm47XG5cblx0XHRtYXQyYXJyYXkuc2V0KCBlbGVtZW50cyApO1xuXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDJmdiggdGhpcy5hZGRyLCBmYWxzZSwgbWF0MmFycmF5ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCBlbGVtZW50cyApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZU0zKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdGNvbnN0IGVsZW1lbnRzID0gdi5lbGVtZW50cztcblxuXHRpZiAoIGVsZW1lbnRzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDNmdiggdGhpcy5hZGRyLCBmYWxzZSwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgZWxlbWVudHMgKSApIHJldHVybjtcblxuXHRcdG1hdDNhcnJheS5zZXQoIGVsZW1lbnRzICk7XG5cblx0XHRnbC51bmlmb3JtTWF0cml4M2Z2KCB0aGlzLmFkZHIsIGZhbHNlLCBtYXQzYXJyYXkgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIGVsZW1lbnRzICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlTTQoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblx0Y29uc3QgZWxlbWVudHMgPSB2LmVsZW1lbnRzO1xuXG5cdGlmICggZWxlbWVudHMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0XHRnbC51bmlmb3JtTWF0cml4NGZ2KCB0aGlzLmFkZHIsIGZhbHNlLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCBlbGVtZW50cyApICkgcmV0dXJuO1xuXG5cdFx0bWF0NGFycmF5LnNldCggZWxlbWVudHMgKTtcblxuXHRcdGdsLnVuaWZvcm1NYXRyaXg0ZnYoIHRoaXMuYWRkciwgZmFsc2UsIG1hdDRhcnJheSApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgZWxlbWVudHMgKTtcblxuXHR9XG5cbn1cblxuLy8gU2luZ2xlIGludGVnZXIgLyBib29sZWFuXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjFpKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCBjYWNoZVsgMCBdID09PSB2ICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm0xaSggdGhpcy5hZGRyLCB2ICk7XG5cblx0Y2FjaGVbIDAgXSA9IHY7XG5cbn1cblxuLy8gU2luZ2xlIGludGVnZXIgLyBib29sZWFuIHZlY3RvciAoZnJvbSBmbGF0IGFycmF5IG9yIFRIUkVFLlZlY3Rvck4pXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjJpKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCB2LnggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggY2FjaGVbIDAgXSAhPT0gdi54IHx8IGNhY2hlWyAxIF0gIT09IHYueSApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTJpKCB0aGlzLmFkZHIsIHYueCwgdi55ICk7XG5cblx0XHRcdGNhY2hlWyAwIF0gPSB2Lng7XG5cdFx0XHRjYWNoZVsgMSBdID0gdi55O1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybTJpdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjNpKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCB2LnggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggY2FjaGVbIDAgXSAhPT0gdi54IHx8IGNhY2hlWyAxIF0gIT09IHYueSB8fCBjYWNoZVsgMiBdICE9PSB2LnogKSB7XG5cblx0XHRcdGdsLnVuaWZvcm0zaSggdGhpcy5hZGRyLCB2LngsIHYueSwgdi56ICk7XG5cblx0XHRcdGNhY2hlWyAwIF0gPSB2Lng7XG5cdFx0XHRjYWNoZVsgMSBdID0gdi55O1xuXHRcdFx0Y2FjaGVbIDIgXSA9IHYuejtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm0zaXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVY0aSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggdi54ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGNhY2hlWyAwIF0gIT09IHYueCB8fCBjYWNoZVsgMSBdICE9PSB2LnkgfHwgY2FjaGVbIDIgXSAhPT0gdi56IHx8IGNhY2hlWyAzIF0gIT09IHYudyApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTRpKCB0aGlzLmFkZHIsIHYueCwgdi55LCB2LnosIHYudyApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi54O1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYueTtcblx0XHRcdGNhY2hlWyAyIF0gPSB2Lno7XG5cdFx0XHRjYWNoZVsgMyBdID0gdi53O1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybTRpdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fVxuXG59XG5cbi8vIFNpbmdsZSB1bnNpZ25lZCBpbnRlZ2VyXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjF1aSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggY2FjaGVbIDAgXSA9PT0gdiApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMXVpKCB0aGlzLmFkZHIsIHYgKTtcblxuXHRjYWNoZVsgMCBdID0gdjtcblxufVxuXG4vLyBTaW5nbGUgdW5zaWduZWQgaW50ZWdlciB2ZWN0b3IgKGZyb20gZmxhdCBhcnJheSBvciBUSFJFRS5WZWN0b3JOKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYydWkoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55ICkge1xuXG5cdFx0XHRnbC51bmlmb3JtMnVpKCB0aGlzLmFkZHIsIHYueCwgdi55ICk7XG5cblx0XHRcdGNhY2hlWyAwIF0gPSB2Lng7XG5cdFx0XHRjYWNoZVsgMSBdID0gdi55O1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybTJ1aXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYzdWkoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55IHx8IGNhY2hlWyAyIF0gIT09IHYueiApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTN1aSggdGhpcy5hZGRyLCB2LngsIHYueSwgdi56ICk7XG5cblx0XHRcdGNhY2hlWyAwIF0gPSB2Lng7XG5cdFx0XHRjYWNoZVsgMSBdID0gdi55O1xuXHRcdFx0Y2FjaGVbIDIgXSA9IHYuejtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm0zdWl2KCB0aGlzLmFkZHIsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWNHVpKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCB2LnggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggY2FjaGVbIDAgXSAhPT0gdi54IHx8IGNhY2hlWyAxIF0gIT09IHYueSB8fCBjYWNoZVsgMiBdICE9PSB2LnogfHwgY2FjaGVbIDMgXSAhPT0gdi53ICkge1xuXG5cdFx0XHRnbC51bmlmb3JtNHVpKCB0aGlzLmFkZHIsIHYueCwgdi55LCB2LnosIHYudyApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi54O1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYueTtcblx0XHRcdGNhY2hlWyAyIF0gPSB2Lno7XG5cdFx0XHRjYWNoZVsgMyBdID0gdi53O1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybTR1aXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG5cbi8vIFNpbmdsZSB0ZXh0dXJlICgyRCAvIEN1YmUpXG5cbmZ1bmN0aW9uIHNldFZhbHVlVDEoIGdsLCB2LCB0ZXh0dXJlcyApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdGNvbnN0IHVuaXQgPSB0ZXh0dXJlcy5hbGxvY2F0ZVRleHR1cmVVbml0KCk7XG5cblx0aWYgKCBjYWNoZVsgMCBdICE9PSB1bml0ICkge1xuXG5cdFx0Z2wudW5pZm9ybTFpKCB0aGlzLmFkZHIsIHVuaXQgKTtcblx0XHRjYWNoZVsgMCBdID0gdW5pdDtcblxuXHR9XG5cblx0bGV0IGVtcHR5VGV4dHVyZTJEO1xuXG5cdGlmICggdGhpcy50eXBlID09PSBnbC5TQU1QTEVSXzJEX1NIQURPVyApIHtcblxuXHRcdGVtcHR5U2hhZG93VGV4dHVyZS5jb21wYXJlRnVuY3Rpb24gPSBMZXNzRXF1YWxDb21wYXJlOyAvLyAjMjg2NzBcblx0XHRlbXB0eVRleHR1cmUyRCA9IGVtcHR5U2hhZG93VGV4dHVyZTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0ZW1wdHlUZXh0dXJlMkQgPSBlbXB0eVRleHR1cmU7XG5cblx0fVxuXG5cdHRleHR1cmVzLnNldFRleHR1cmUyRCggdiB8fCBlbXB0eVRleHR1cmUyRCwgdW5pdCApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVDNEMSggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblx0Y29uc3QgdW5pdCA9IHRleHR1cmVzLmFsbG9jYXRlVGV4dHVyZVVuaXQoKTtcblxuXHRpZiAoIGNhY2hlWyAwIF0gIT09IHVuaXQgKSB7XG5cblx0XHRnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdW5pdCApO1xuXHRcdGNhY2hlWyAwIF0gPSB1bml0O1xuXG5cdH1cblxuXHR0ZXh0dXJlcy5zZXRUZXh0dXJlM0QoIHYgfHwgZW1wdHkzZFRleHR1cmUsIHVuaXQgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQ2KCBnbCwgdiwgdGV4dHVyZXMgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHRjb25zdCB1bml0ID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpO1xuXG5cdGlmICggY2FjaGVbIDAgXSAhPT0gdW5pdCApIHtcblxuXHRcdGdsLnVuaWZvcm0xaSggdGhpcy5hZGRyLCB1bml0ICk7XG5cdFx0Y2FjaGVbIDAgXSA9IHVuaXQ7XG5cblx0fVxuXG5cdHRleHR1cmVzLnNldFRleHR1cmVDdWJlKCB2IHx8IGVtcHR5Q3ViZVRleHR1cmUsIHVuaXQgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQyREFycmF5MSggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblx0Y29uc3QgdW5pdCA9IHRleHR1cmVzLmFsbG9jYXRlVGV4dHVyZVVuaXQoKTtcblxuXHRpZiAoIGNhY2hlWyAwIF0gIT09IHVuaXQgKSB7XG5cblx0XHRnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdW5pdCApO1xuXHRcdGNhY2hlWyAwIF0gPSB1bml0O1xuXG5cdH1cblxuXHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkRBcnJheSggdiB8fCBlbXB0eUFycmF5VGV4dHVyZSwgdW5pdCApO1xuXG59XG5cbi8vIEhlbHBlciB0byBwaWNrIHRoZSByaWdodCBzZXR0ZXIgZm9yIHRoZSBzaW5ndWxhciBjYXNlXG5cbmZ1bmN0aW9uIGdldFNpbmd1bGFyU2V0dGVyKCB0eXBlICkge1xuXG5cdHN3aXRjaCAoIHR5cGUgKSB7XG5cblx0XHRjYXNlIDB4MTQwNjogcmV0dXJuIHNldFZhbHVlVjFmOyAvLyBGTE9BVFxuXHRcdGNhc2UgMHg4YjUwOiByZXR1cm4gc2V0VmFsdWVWMmY7IC8vIF9WRUMyXG5cdFx0Y2FzZSAweDhiNTE6IHJldHVybiBzZXRWYWx1ZVYzZjsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGI1MjogcmV0dXJuIHNldFZhbHVlVjRmOyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDhiNWE6IHJldHVybiBzZXRWYWx1ZU0yOyAvLyBfTUFUMlxuXHRcdGNhc2UgMHg4YjViOiByZXR1cm4gc2V0VmFsdWVNMzsgLy8gX01BVDNcblx0XHRjYXNlIDB4OGI1YzogcmV0dXJuIHNldFZhbHVlTTQ7IC8vIF9NQVQ0XG5cblx0XHRjYXNlIDB4MTQwNDogY2FzZSAweDhiNTY6IHJldHVybiBzZXRWYWx1ZVYxaTsgLy8gSU5ULCBCT09MXG5cdFx0Y2FzZSAweDhiNTM6IGNhc2UgMHg4YjU3OiByZXR1cm4gc2V0VmFsdWVWMmk7IC8vIF9WRUMyXG5cdFx0Y2FzZSAweDhiNTQ6IGNhc2UgMHg4YjU4OiByZXR1cm4gc2V0VmFsdWVWM2k7IC8vIF9WRUMzXG5cdFx0Y2FzZSAweDhiNTU6IGNhc2UgMHg4YjU5OiByZXR1cm4gc2V0VmFsdWVWNGk7IC8vIF9WRUM0XG5cblx0XHRjYXNlIDB4MTQwNTogcmV0dXJuIHNldFZhbHVlVjF1aTsgLy8gVUlOVFxuXHRcdGNhc2UgMHg4ZGM2OiByZXR1cm4gc2V0VmFsdWVWMnVpOyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4ZGM3OiByZXR1cm4gc2V0VmFsdWVWM3VpOyAvLyBfVkVDM1xuXHRcdGNhc2UgMHg4ZGM4OiByZXR1cm4gc2V0VmFsdWVWNHVpOyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDhiNWU6IC8vIFNBTVBMRVJfMkRcblx0XHRjYXNlIDB4OGQ2NjogLy8gU0FNUExFUl9FWFRFUk5BTF9PRVNcblx0XHRjYXNlIDB4OGRjYTogLy8gSU5UX1NBTVBMRVJfMkRcblx0XHRjYXNlIDB4OGRkMjogLy8gVU5TSUdORURfSU5UX1NBTVBMRVJfMkRcblx0XHRjYXNlIDB4OGI2MjogLy8gU0FNUExFUl8yRF9TSEFET1dcblx0XHRcdHJldHVybiBzZXRWYWx1ZVQxO1xuXG5cdFx0Y2FzZSAweDhiNWY6IC8vIFNBTVBMRVJfM0Rcblx0XHRjYXNlIDB4OGRjYjogLy8gSU5UX1NBTVBMRVJfM0Rcblx0XHRjYXNlIDB4OGRkMzogLy8gVU5TSUdORURfSU5UX1NBTVBMRVJfM0Rcblx0XHRcdHJldHVybiBzZXRWYWx1ZVQzRDE7XG5cblx0XHRjYXNlIDB4OGI2MDogLy8gU0FNUExFUl9DVUJFXG5cdFx0Y2FzZSAweDhkY2M6IC8vIElOVF9TQU1QTEVSX0NVQkVcblx0XHRjYXNlIDB4OGRkNDogLy8gVU5TSUdORURfSU5UX1NBTVBMRVJfQ1VCRVxuXHRcdGNhc2UgMHg4ZGM1OiAvLyBTQU1QTEVSX0NVQkVfU0hBRE9XXG5cdFx0XHRyZXR1cm4gc2V0VmFsdWVUNjtcblxuXHRcdGNhc2UgMHg4ZGMxOiAvLyBTQU1QTEVSXzJEX0FSUkFZXG5cdFx0Y2FzZSAweDhkY2Y6IC8vIElOVF9TQU1QTEVSXzJEX0FSUkFZXG5cdFx0Y2FzZSAweDhkZDc6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEX0FSUkFZXG5cdFx0Y2FzZSAweDhkYzQ6IC8vIFNBTVBMRVJfMkRfQVJSQVlfU0hBRE9XXG5cdFx0XHRyZXR1cm4gc2V0VmFsdWVUMkRBcnJheTE7XG5cblx0fVxuXG59XG5cblxuLy8gQXJyYXkgb2Ygc2NhbGFyc1xuXG5mdW5jdGlvbiBzZXRWYWx1ZVYxZkFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtMWZ2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG4vLyBBcnJheSBvZiB2ZWN0b3JzIChmcm9tIGZsYXQgYXJyYXkgb3IgYXJyYXkgb2YgVEhSRUUuVmVjdG9yTilcblxuZnVuY3Rpb24gc2V0VmFsdWVWMmZBcnJheSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgMiApO1xuXG5cdGdsLnVuaWZvcm0yZnYoIHRoaXMuYWRkciwgZGF0YSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjNmQXJyYXkoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDMgKTtcblxuXHRnbC51bmlmb3JtM2Z2KCB0aGlzLmFkZHIsIGRhdGEgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVY0ZkFycmF5KCBnbCwgdiApIHtcblxuXHRjb25zdCBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCA0ICk7XG5cblx0Z2wudW5pZm9ybTRmdiggdGhpcy5hZGRyLCBkYXRhICk7XG5cbn1cblxuLy8gQXJyYXkgb2YgbWF0cmljZXMgKGZyb20gZmxhdCBhcnJheSBvciBhcnJheSBvZiBUSFJFRS5NYXRyaXhOKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZU0yQXJyYXkoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDQgKTtcblxuXHRnbC51bmlmb3JtTWF0cml4MmZ2KCB0aGlzLmFkZHIsIGZhbHNlLCBkYXRhICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVNM0FycmF5KCBnbCwgdiApIHtcblxuXHRjb25zdCBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCA5ICk7XG5cblx0Z2wudW5pZm9ybU1hdHJpeDNmdiggdGhpcy5hZGRyLCBmYWxzZSwgZGF0YSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlTTRBcnJheSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgMTYgKTtcblxuXHRnbC51bmlmb3JtTWF0cml4NGZ2KCB0aGlzLmFkZHIsIGZhbHNlLCBkYXRhICk7XG5cbn1cblxuLy8gQXJyYXkgb2YgaW50ZWdlciAvIGJvb2xlYW5cblxuZnVuY3Rpb24gc2V0VmFsdWVWMWlBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTFpdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuLy8gQXJyYXkgb2YgaW50ZWdlciAvIGJvb2xlYW4gdmVjdG9ycyAoZnJvbSBmbGF0IGFycmF5KVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYyaUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtMml2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYzaUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtM2l2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVY0aUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtNGl2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG4vLyBBcnJheSBvZiB1bnNpZ25lZCBpbnRlZ2VyXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjF1aUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtMXVpdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuLy8gQXJyYXkgb2YgdW5zaWduZWQgaW50ZWdlciB2ZWN0b3JzIChmcm9tIGZsYXQgYXJyYXkpXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjJ1aUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtMnVpdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWM3VpQXJyYXkoIGdsLCB2ICkge1xuXG5cdGdsLnVuaWZvcm0zdWl2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVY0dWlBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTR1aXYoIHRoaXMuYWRkciwgdiApO1xuXG59XG5cblxuLy8gQXJyYXkgb2YgdGV4dHVyZXMgKDJEIC8gM0QgLyBDdWJlIC8gMkRBcnJheSlcblxuZnVuY3Rpb24gc2V0VmFsdWVUMUFycmF5KCBnbCwgdiwgdGV4dHVyZXMgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGNvbnN0IG4gPSB2Lmxlbmd0aDtcblxuXHRjb25zdCB1bml0cyA9IGFsbG9jVGV4VW5pdHMoIHRleHR1cmVzLCBuICk7XG5cblx0aWYgKCAhIGFycmF5c0VxdWFsKCBjYWNoZSwgdW5pdHMgKSApIHtcblxuXHRcdGdsLnVuaWZvcm0xaXYoIHRoaXMuYWRkciwgdW5pdHMgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHVuaXRzICk7XG5cblx0fVxuXG5cdGZvciAoIGxldCBpID0gMDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHRleHR1cmVzLnNldFRleHR1cmUyRCggdlsgaSBdIHx8IGVtcHR5VGV4dHVyZSwgdW5pdHNbIGkgXSApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQzREFycmF5KCBnbCwgdiwgdGV4dHVyZXMgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGNvbnN0IG4gPSB2Lmxlbmd0aDtcblxuXHRjb25zdCB1bml0cyA9IGFsbG9jVGV4VW5pdHMoIHRleHR1cmVzLCBuICk7XG5cblx0aWYgKCAhIGFycmF5c0VxdWFsKCBjYWNoZSwgdW5pdHMgKSApIHtcblxuXHRcdGdsLnVuaWZvcm0xaXYoIHRoaXMuYWRkciwgdW5pdHMgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHVuaXRzICk7XG5cblx0fVxuXG5cdGZvciAoIGxldCBpID0gMDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHRleHR1cmVzLnNldFRleHR1cmUzRCggdlsgaSBdIHx8IGVtcHR5M2RUZXh0dXJlLCB1bml0c1sgaSBdICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVDZBcnJheSggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRjb25zdCBuID0gdi5sZW5ndGg7XG5cblx0Y29uc3QgdW5pdHMgPSBhbGxvY1RleFVuaXRzKCB0ZXh0dXJlcywgbiApO1xuXG5cdGlmICggISBhcnJheXNFcXVhbCggY2FjaGUsIHVuaXRzICkgKSB7XG5cblx0XHRnbC51bmlmb3JtMWl2KCB0aGlzLmFkZHIsIHVuaXRzICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB1bml0cyApO1xuXG5cdH1cblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlQ3ViZSggdlsgaSBdIHx8IGVtcHR5Q3ViZVRleHR1cmUsIHVuaXRzWyBpIF0gKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVUMkRBcnJheUFycmF5KCBnbCwgdiwgdGV4dHVyZXMgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGNvbnN0IG4gPSB2Lmxlbmd0aDtcblxuXHRjb25zdCB1bml0cyA9IGFsbG9jVGV4VW5pdHMoIHRleHR1cmVzLCBuICk7XG5cblx0aWYgKCAhIGFycmF5c0VxdWFsKCBjYWNoZSwgdW5pdHMgKSApIHtcblxuXHRcdGdsLnVuaWZvcm0xaXYoIHRoaXMuYWRkciwgdW5pdHMgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHVuaXRzICk7XG5cblx0fVxuXG5cdGZvciAoIGxldCBpID0gMDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHRleHR1cmVzLnNldFRleHR1cmUyREFycmF5KCB2WyBpIF0gfHwgZW1wdHlBcnJheVRleHR1cmUsIHVuaXRzWyBpIF0gKTtcblxuXHR9XG5cbn1cblxuXG4vLyBIZWxwZXIgdG8gcGljayB0aGUgcmlnaHQgc2V0dGVyIGZvciBhIHB1cmUgKGJvdHRvbS1sZXZlbCkgYXJyYXlcblxuZnVuY3Rpb24gZ2V0UHVyZUFycmF5U2V0dGVyKCB0eXBlICkge1xuXG5cdHN3aXRjaCAoIHR5cGUgKSB7XG5cblx0XHRjYXNlIDB4MTQwNjogcmV0dXJuIHNldFZhbHVlVjFmQXJyYXk7IC8vIEZMT0FUXG5cdFx0Y2FzZSAweDhiNTA6IHJldHVybiBzZXRWYWx1ZVYyZkFycmF5OyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4YjUxOiByZXR1cm4gc2V0VmFsdWVWM2ZBcnJheTsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGI1MjogcmV0dXJuIHNldFZhbHVlVjRmQXJyYXk7IC8vIF9WRUM0XG5cblx0XHRjYXNlIDB4OGI1YTogcmV0dXJuIHNldFZhbHVlTTJBcnJheTsgLy8gX01BVDJcblx0XHRjYXNlIDB4OGI1YjogcmV0dXJuIHNldFZhbHVlTTNBcnJheTsgLy8gX01BVDNcblx0XHRjYXNlIDB4OGI1YzogcmV0dXJuIHNldFZhbHVlTTRBcnJheTsgLy8gX01BVDRcblxuXHRcdGNhc2UgMHgxNDA0OiBjYXNlIDB4OGI1NjogcmV0dXJuIHNldFZhbHVlVjFpQXJyYXk7IC8vIElOVCwgQk9PTFxuXHRcdGNhc2UgMHg4YjUzOiBjYXNlIDB4OGI1NzogcmV0dXJuIHNldFZhbHVlVjJpQXJyYXk7IC8vIF9WRUMyXG5cdFx0Y2FzZSAweDhiNTQ6IGNhc2UgMHg4YjU4OiByZXR1cm4gc2V0VmFsdWVWM2lBcnJheTsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGI1NTogY2FzZSAweDhiNTk6IHJldHVybiBzZXRWYWx1ZVY0aUFycmF5OyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDE0MDU6IHJldHVybiBzZXRWYWx1ZVYxdWlBcnJheTsgLy8gVUlOVFxuXHRcdGNhc2UgMHg4ZGM2OiByZXR1cm4gc2V0VmFsdWVWMnVpQXJyYXk7IC8vIF9WRUMyXG5cdFx0Y2FzZSAweDhkYzc6IHJldHVybiBzZXRWYWx1ZVYzdWlBcnJheTsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGRjODogcmV0dXJuIHNldFZhbHVlVjR1aUFycmF5OyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDhiNWU6IC8vIFNBTVBMRVJfMkRcblx0XHRjYXNlIDB4OGQ2NjogLy8gU0FNUExFUl9FWFRFUk5BTF9PRVNcblx0XHRjYXNlIDB4OGRjYTogLy8gSU5UX1NBTVBMRVJfMkRcblx0XHRjYXNlIDB4OGRkMjogLy8gVU5TSUdORURfSU5UX1NBTVBMRVJfMkRcblx0XHRjYXNlIDB4OGI2MjogLy8gU0FNUExFUl8yRF9TSEFET1dcblx0XHRcdHJldHVybiBzZXRWYWx1ZVQxQXJyYXk7XG5cblx0XHRjYXNlIDB4OGI1ZjogLy8gU0FNUExFUl8zRFxuXHRcdGNhc2UgMHg4ZGNiOiAvLyBJTlRfU0FNUExFUl8zRFxuXHRcdGNhc2UgMHg4ZGQzOiAvLyBVTlNJR05FRF9JTlRfU0FNUExFUl8zRFxuXHRcdFx0cmV0dXJuIHNldFZhbHVlVDNEQXJyYXk7XG5cblx0XHRjYXNlIDB4OGI2MDogLy8gU0FNUExFUl9DVUJFXG5cdFx0Y2FzZSAweDhkY2M6IC8vIElOVF9TQU1QTEVSX0NVQkVcblx0XHRjYXNlIDB4OGRkNDogLy8gVU5TSUdORURfSU5UX1NBTVBMRVJfQ1VCRVxuXHRcdGNhc2UgMHg4ZGM1OiAvLyBTQU1QTEVSX0NVQkVfU0hBRE9XXG5cdFx0XHRyZXR1cm4gc2V0VmFsdWVUNkFycmF5O1xuXG5cdFx0Y2FzZSAweDhkYzE6IC8vIFNBTVBMRVJfMkRfQVJSQVlcblx0XHRjYXNlIDB4OGRjZjogLy8gSU5UX1NBTVBMRVJfMkRfQVJSQVlcblx0XHRjYXNlIDB4OGRkNzogLy8gVU5TSUdORURfSU5UX1NBTVBMRVJfMkRfQVJSQVlcblx0XHRjYXNlIDB4OGRjNDogLy8gU0FNUExFUl8yRF9BUlJBWV9TSEFET1dcblx0XHRcdHJldHVybiBzZXRWYWx1ZVQyREFycmF5QXJyYXk7XG5cblx0fVxuXG59XG5cbi8vIC0tLSBVbmlmb3JtIENsYXNzZXMgLS0tXG5cbmNsYXNzIFNpbmdsZVVuaWZvcm0ge1xuXG5cdGNvbnN0cnVjdG9yKCBpZCwgYWN0aXZlSW5mbywgYWRkciApIHtcblxuXHRcdHRoaXMuaWQgPSBpZDtcblx0XHR0aGlzLmFkZHIgPSBhZGRyO1xuXHRcdHRoaXMuY2FjaGUgPSBbXTtcblx0XHR0aGlzLnR5cGUgPSBhY3RpdmVJbmZvLnR5cGU7XG5cdFx0dGhpcy5zZXRWYWx1ZSA9IGdldFNpbmd1bGFyU2V0dGVyKCBhY3RpdmVJbmZvLnR5cGUgKTtcblxuXHRcdC8vIHRoaXMucGF0aCA9IGFjdGl2ZUluZm8ubmFtZTsgLy8gREVCVUdcblxuXHR9XG5cbn1cblxuY2xhc3MgUHVyZUFycmF5VW5pZm9ybSB7XG5cblx0Y29uc3RydWN0b3IoIGlkLCBhY3RpdmVJbmZvLCBhZGRyICkge1xuXG5cdFx0dGhpcy5pZCA9IGlkO1xuXHRcdHRoaXMuYWRkciA9IGFkZHI7XG5cdFx0dGhpcy5jYWNoZSA9IFtdO1xuXHRcdHRoaXMudHlwZSA9IGFjdGl2ZUluZm8udHlwZTtcblx0XHR0aGlzLnNpemUgPSBhY3RpdmVJbmZvLnNpemU7XG5cdFx0dGhpcy5zZXRWYWx1ZSA9IGdldFB1cmVBcnJheVNldHRlciggYWN0aXZlSW5mby50eXBlICk7XG5cblx0XHQvLyB0aGlzLnBhdGggPSBhY3RpdmVJbmZvLm5hbWU7IC8vIERFQlVHXG5cblx0fVxuXG59XG5cbmNsYXNzIFN0cnVjdHVyZWRVbmlmb3JtIHtcblxuXHRjb25zdHJ1Y3RvciggaWQgKSB7XG5cblx0XHR0aGlzLmlkID0gaWQ7XG5cblx0XHR0aGlzLnNlcSA9IFtdO1xuXHRcdHRoaXMubWFwID0ge307XG5cblx0fVxuXG5cdHNldFZhbHVlKCBnbCwgdmFsdWUsIHRleHR1cmVzICkge1xuXG5cdFx0Y29uc3Qgc2VxID0gdGhpcy5zZXE7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBzZXEubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCB1ID0gc2VxWyBpIF07XG5cdFx0XHR1LnNldFZhbHVlKCBnbCwgdmFsdWVbIHUuaWQgXSwgdGV4dHVyZXMgKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuLy8gLS0tIFRvcC1sZXZlbCAtLS1cblxuLy8gUGFyc2VyIC0gYnVpbGRzIHVwIHRoZSBwcm9wZXJ0eSB0cmVlIGZyb20gdGhlIHBhdGggc3RyaW5nc1xuXG5jb25zdCBSZVBhdGhQYXJ0ID0gLyhcXHcrKShcXF0pPyhcXFt8XFwuKT8vZztcblxuLy8gZXh0cmFjdHNcbi8vIFx0LSB0aGUgaWRlbnRpZmllciAobWVtYmVyIG5hbWUgb3IgYXJyYXkgaW5kZXgpXG4vLyAgLSBmb2xsb3dlZCBieSBhbiBvcHRpb25hbCByaWdodCBicmFja2V0IChmb3VuZCB3aGVuIGFycmF5IGluZGV4KVxuLy8gIC0gZm9sbG93ZWQgYnkgYW4gb3B0aW9uYWwgbGVmdCBicmFja2V0IG9yIGRvdCAodHlwZSBvZiBzdWJzY3JpcHQpXG4vL1xuLy8gTm90ZTogVGhlc2UgcG9ydGlvbnMgY2FuIGJlIHJlYWQgaW4gYSBub24tb3ZlcmxhcHBpbmcgZmFzaGlvbiBhbmRcbi8vIGFsbG93IHN0cmFpZ2h0Zm9yd2FyZCBwYXJzaW5nIG9mIHRoZSBoaWVyYXJjaHkgdGhhdCBXZWJHTCBlbmNvZGVzXG4vLyBpbiB0aGUgdW5pZm9ybSBuYW1lcy5cblxuZnVuY3Rpb24gYWRkVW5pZm9ybSggY29udGFpbmVyLCB1bmlmb3JtT2JqZWN0ICkge1xuXG5cdGNvbnRhaW5lci5zZXEucHVzaCggdW5pZm9ybU9iamVjdCApO1xuXHRjb250YWluZXIubWFwWyB1bmlmb3JtT2JqZWN0LmlkIF0gPSB1bmlmb3JtT2JqZWN0O1xuXG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5pZm9ybSggYWN0aXZlSW5mbywgYWRkciwgY29udGFpbmVyICkge1xuXG5cdGNvbnN0IHBhdGggPSBhY3RpdmVJbmZvLm5hbWUsXG5cdFx0cGF0aExlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG5cdC8vIHJlc2V0IFJlZ0V4cCBvYmplY3QsIGJlY2F1c2Ugb2YgdGhlIGVhcmx5IGV4aXQgb2YgYSBwcmV2aW91cyBydW5cblx0UmVQYXRoUGFydC5sYXN0SW5kZXggPSAwO1xuXG5cdHdoaWxlICggdHJ1ZSApIHtcblxuXHRcdGNvbnN0IG1hdGNoID0gUmVQYXRoUGFydC5leGVjKCBwYXRoICksXG5cdFx0XHRtYXRjaEVuZCA9IFJlUGF0aFBhcnQubGFzdEluZGV4O1xuXG5cdFx0bGV0IGlkID0gbWF0Y2hbIDEgXTtcblx0XHRjb25zdCBpZElzSW5kZXggPSBtYXRjaFsgMiBdID09PSAnXScsXG5cdFx0XHRzdWJzY3JpcHQgPSBtYXRjaFsgMyBdO1xuXG5cdFx0aWYgKCBpZElzSW5kZXggKSBpZCA9IGlkIHwgMDsgLy8gY29udmVydCB0byBpbnRlZ2VyXG5cblx0XHRpZiAoIHN1YnNjcmlwdCA9PT0gdW5kZWZpbmVkIHx8IHN1YnNjcmlwdCA9PT0gJ1snICYmIG1hdGNoRW5kICsgMiA9PT0gcGF0aExlbmd0aCApIHtcblxuXHRcdFx0Ly8gYmFyZSBuYW1lIG9yIFwicHVyZVwiIGJvdHRvbS1sZXZlbCBhcnJheSBcIlswXVwiIHN1ZmZpeFxuXG5cdFx0XHRhZGRVbmlmb3JtKCBjb250YWluZXIsIHN1YnNjcmlwdCA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0bmV3IFNpbmdsZVVuaWZvcm0oIGlkLCBhY3RpdmVJbmZvLCBhZGRyICkgOlxuXHRcdFx0XHRuZXcgUHVyZUFycmF5VW5pZm9ybSggaWQsIGFjdGl2ZUluZm8sIGFkZHIgKSApO1xuXG5cdFx0XHRicmVhaztcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIHN0ZXAgaW50byBpbm5lciBub2RlIC8gY3JlYXRlIGl0IGluIGNhc2UgaXQgZG9lc24ndCBleGlzdFxuXG5cdFx0XHRjb25zdCBtYXAgPSBjb250YWluZXIubWFwO1xuXHRcdFx0bGV0IG5leHQgPSBtYXBbIGlkIF07XG5cblx0XHRcdGlmICggbmV4dCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG5leHQgPSBuZXcgU3RydWN0dXJlZFVuaWZvcm0oIGlkICk7XG5cdFx0XHRcdGFkZFVuaWZvcm0oIGNvbnRhaW5lciwgbmV4dCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnRhaW5lciA9IG5leHQ7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbi8vIFJvb3QgQ29udGFpbmVyXG5cbmNsYXNzIFdlYkdMVW5pZm9ybXMge1xuXG5cdGNvbnN0cnVjdG9yKCBnbCwgcHJvZ3JhbSApIHtcblxuXHRcdHRoaXMuc2VxID0gW107XG5cdFx0dGhpcy5tYXAgPSB7fTtcblxuXHRcdGNvbnN0IG4gPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKCBwcm9ncmFtLCBnbC5BQ1RJVkVfVU5JRk9STVMgKTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG47ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IGluZm8gPSBnbC5nZXRBY3RpdmVVbmlmb3JtKCBwcm9ncmFtLCBpICksXG5cdFx0XHRcdGFkZHIgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oIHByb2dyYW0sIGluZm8ubmFtZSApO1xuXG5cdFx0XHRwYXJzZVVuaWZvcm0oIGluZm8sIGFkZHIsIHRoaXMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0c2V0VmFsdWUoIGdsLCBuYW1lLCB2YWx1ZSwgdGV4dHVyZXMgKSB7XG5cblx0XHRjb25zdCB1ID0gdGhpcy5tYXBbIG5hbWUgXTtcblxuXHRcdGlmICggdSAhPT0gdW5kZWZpbmVkICkgdS5zZXRWYWx1ZSggZ2wsIHZhbHVlLCB0ZXh0dXJlcyApO1xuXG5cdH1cblxuXHRzZXRPcHRpb25hbCggZ2wsIG9iamVjdCwgbmFtZSApIHtcblxuXHRcdGNvbnN0IHYgPSBvYmplY3RbIG5hbWUgXTtcblxuXHRcdGlmICggdiAhPT0gdW5kZWZpbmVkICkgdGhpcy5zZXRWYWx1ZSggZ2wsIG5hbWUsIHYgKTtcblxuXHR9XG5cblx0c3RhdGljIHVwbG9hZCggZ2wsIHNlcSwgdmFsdWVzLCB0ZXh0dXJlcyApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbiA9IHNlcS5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IHUgPSBzZXFbIGkgXSxcblx0XHRcdFx0diA9IHZhbHVlc1sgdS5pZCBdO1xuXG5cdFx0XHRpZiAoIHYubmVlZHNVcGRhdGUgIT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIG5vdGU6IGFsd2F5cyB1cGRhdGluZyB3aGVuIC5uZWVkc1VwZGF0ZSBpcyB1bmRlZmluZWRcblx0XHRcdFx0dS5zZXRWYWx1ZSggZ2wsIHYudmFsdWUsIHRleHR1cmVzICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0c3RhdGljIHNlcVdpdGhWYWx1ZSggc2VxLCB2YWx1ZXMgKSB7XG5cblx0XHRjb25zdCByID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBzZXEubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCB1ID0gc2VxWyBpIF07XG5cdFx0XHRpZiAoIHUuaWQgaW4gdmFsdWVzICkgci5wdXNoKCB1ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcjtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xTaGFkZXIoIGdsLCB0eXBlLCBzdHJpbmcgKSB7XG5cblx0Y29uc3Qgc2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKCB0eXBlICk7XG5cblx0Z2wuc2hhZGVyU291cmNlKCBzaGFkZXIsIHN0cmluZyApO1xuXHRnbC5jb21waWxlU2hhZGVyKCBzaGFkZXIgKTtcblxuXHRyZXR1cm4gc2hhZGVyO1xuXG59XG5cbi8vIEZyb20gaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvcmVnaXN0cnkvd2ViZ2wvZXh0ZW5zaW9ucy9LSFJfcGFyYWxsZWxfc2hhZGVyX2NvbXBpbGUvXG5jb25zdCBDT01QTEVUSU9OX1NUQVRVU19LSFIgPSAweDkxQjE7XG5cbmxldCBwcm9ncmFtSWRDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGhhbmRsZVNvdXJjZSggc3RyaW5nLCBlcnJvckxpbmUgKSB7XG5cblx0Y29uc3QgbGluZXMgPSBzdHJpbmcuc3BsaXQoICdcXG4nICk7XG5cdGNvbnN0IGxpbmVzMiA9IFtdO1xuXG5cdGNvbnN0IGZyb20gPSBNYXRoLm1heCggZXJyb3JMaW5lIC0gNiwgMCApO1xuXHRjb25zdCB0byA9IE1hdGgubWluKCBlcnJvckxpbmUgKyA2LCBsaW5lcy5sZW5ndGggKTtcblxuXHRmb3IgKCBsZXQgaSA9IGZyb207IGkgPCB0bzsgaSArKyApIHtcblxuXHRcdGNvbnN0IGxpbmUgPSBpICsgMTtcblx0XHRsaW5lczIucHVzaCggYCR7bGluZSA9PT0gZXJyb3JMaW5lID8gJz4nIDogJyAnfSAke2xpbmV9OiAke2xpbmVzWyBpIF19YCApO1xuXG5cdH1cblxuXHRyZXR1cm4gbGluZXMyLmpvaW4oICdcXG4nICk7XG5cbn1cblxuY29uc3QgX20wID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpO1xuXG5mdW5jdGlvbiBnZXRFbmNvZGluZ0NvbXBvbmVudHMoIGNvbG9yU3BhY2UgKSB7XG5cblx0Q29sb3JNYW5hZ2VtZW50Ll9nZXRNYXRyaXgoIF9tMCwgQ29sb3JNYW5hZ2VtZW50LndvcmtpbmdDb2xvclNwYWNlLCBjb2xvclNwYWNlICk7XG5cblx0Y29uc3QgZW5jb2RpbmdNYXRyaXggPSBgbWF0MyggJHsgX20wLmVsZW1lbnRzLm1hcCggKCB2ICkgPT4gdi50b0ZpeGVkKCA0ICkgKSB9IClgO1xuXG5cdHN3aXRjaCAoIENvbG9yTWFuYWdlbWVudC5nZXRUcmFuc2ZlciggY29sb3JTcGFjZSApICkge1xuXG5cdFx0Y2FzZSBMaW5lYXJUcmFuc2Zlcjpcblx0XHRcdHJldHVybiBbIGVuY29kaW5nTWF0cml4LCAnTGluZWFyVHJhbnNmZXJPRVRGJyBdO1xuXG5cdFx0Y2FzZSBTUkdCVHJhbnNmZXI6XG5cdFx0XHRyZXR1cm4gWyBlbmNvZGluZ01hdHJpeCwgJ3NSR0JUcmFuc2Zlck9FVEYnIF07XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBVbnN1cHBvcnRlZCBjb2xvciBzcGFjZTogJywgY29sb3JTcGFjZSApO1xuXHRcdFx0cmV0dXJuIFsgZW5jb2RpbmdNYXRyaXgsICdMaW5lYXJUcmFuc2Zlck9FVEYnIF07XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGdldFNoYWRlckVycm9ycyggZ2wsIHNoYWRlciwgdHlwZSApIHtcblxuXHRjb25zdCBzdGF0dXMgPSBnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoIHNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMgKTtcblxuXHRjb25zdCBzaGFkZXJJbmZvTG9nID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyggc2hhZGVyICkgfHwgJyc7XG5cdGNvbnN0IGVycm9ycyA9IHNoYWRlckluZm9Mb2cudHJpbSgpO1xuXG5cdGlmICggc3RhdHVzICYmIGVycm9ycyA9PT0gJycgKSByZXR1cm4gJyc7XG5cblx0Y29uc3QgZXJyb3JNYXRjaGVzID0gL0VSUk9SOiAwOihcXGQrKS8uZXhlYyggZXJyb3JzICk7XG5cdGlmICggZXJyb3JNYXRjaGVzICkge1xuXG5cdFx0Ly8gLS1lbmFibGUtcHJpdmlsZWdlZC13ZWJnbC1leHRlbnNpb25cblx0XHQvLyBjb25zb2xlLmxvZyggJyoqJyArIHR5cGUgKyAnKionLCBnbC5nZXRFeHRlbnNpb24oICdXRUJHTF9kZWJ1Z19zaGFkZXJzJyApLmdldFRyYW5zbGF0ZWRTaGFkZXJTb3VyY2UoIHNoYWRlciApICk7XG5cblx0XHRjb25zdCBlcnJvckxpbmUgPSBwYXJzZUludCggZXJyb3JNYXRjaGVzWyAxIF0gKTtcblx0XHRyZXR1cm4gdHlwZS50b1VwcGVyQ2FzZSgpICsgJ1xcblxcbicgKyBlcnJvcnMgKyAnXFxuXFxuJyArIGhhbmRsZVNvdXJjZSggZ2wuZ2V0U2hhZGVyU291cmNlKCBzaGFkZXIgKSwgZXJyb3JMaW5lICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdHJldHVybiBlcnJvcnM7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGdldFRleGVsRW5jb2RpbmdGdW5jdGlvbiggZnVuY3Rpb25OYW1lLCBjb2xvclNwYWNlICkge1xuXG5cdGNvbnN0IGNvbXBvbmVudHMgPSBnZXRFbmNvZGluZ0NvbXBvbmVudHMoIGNvbG9yU3BhY2UgKTtcblxuXHRyZXR1cm4gW1xuXG5cdFx0YHZlYzQgJHtmdW5jdGlvbk5hbWV9KCB2ZWM0IHZhbHVlICkge2AsXG5cblx0XHRgXHRyZXR1cm4gJHtjb21wb25lbnRzWyAxIF19KCB2ZWM0KCB2YWx1ZS5yZ2IgKiAke2NvbXBvbmVudHNbIDAgXX0sIHZhbHVlLmEgKSApO2AsXG5cblx0XHQnfScsXG5cblx0XS5qb2luKCAnXFxuJyApO1xuXG59XG5cbmZ1bmN0aW9uIGdldFRvbmVNYXBwaW5nRnVuY3Rpb24oIGZ1bmN0aW9uTmFtZSwgdG9uZU1hcHBpbmcgKSB7XG5cblx0bGV0IHRvbmVNYXBwaW5nTmFtZTtcblxuXHRzd2l0Y2ggKCB0b25lTWFwcGluZyApIHtcblxuXHRcdGNhc2UgTGluZWFyVG9uZU1hcHBpbmc6XG5cdFx0XHR0b25lTWFwcGluZ05hbWUgPSAnTGluZWFyJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBSZWluaGFyZFRvbmVNYXBwaW5nOlxuXHRcdFx0dG9uZU1hcHBpbmdOYW1lID0gJ1JlaW5oYXJkJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBDaW5lb25Ub25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdDaW5lb24nO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIEFDRVNGaWxtaWNUb25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdBQ0VTRmlsbWljJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBBZ1hUb25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdBZ1gnO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIE5ldXRyYWxUb25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdOZXV0cmFsJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBDdXN0b21Ub25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdDdXN0b20nO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBVbnN1cHBvcnRlZCB0b25lTWFwcGluZzonLCB0b25lTWFwcGluZyApO1xuXHRcdFx0dG9uZU1hcHBpbmdOYW1lID0gJ0xpbmVhcic7XG5cblx0fVxuXG5cdHJldHVybiAndmVjMyAnICsgZnVuY3Rpb25OYW1lICsgJyggdmVjMyBjb2xvciApIHsgcmV0dXJuICcgKyB0b25lTWFwcGluZ05hbWUgKyAnVG9uZU1hcHBpbmcoIGNvbG9yICk7IH0nO1xuXG59XG5cbmNvbnN0IF92MCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuZnVuY3Rpb24gZ2V0THVtaW5hbmNlRnVuY3Rpb24oKSB7XG5cblx0Q29sb3JNYW5hZ2VtZW50LmdldEx1bWluYW5jZUNvZWZmaWNpZW50cyggX3YwICk7XG5cblx0Y29uc3QgciA9IF92MC54LnRvRml4ZWQoIDQgKTtcblx0Y29uc3QgZyA9IF92MC55LnRvRml4ZWQoIDQgKTtcblx0Y29uc3QgYiA9IF92MC56LnRvRml4ZWQoIDQgKTtcblxuXHRyZXR1cm4gW1xuXG5cdFx0J2Zsb2F0IGx1bWluYW5jZSggY29uc3QgaW4gdmVjMyByZ2IgKSB7JyxcblxuXHRcdGBcdGNvbnN0IHZlYzMgd2VpZ2h0cyA9IHZlYzMoICR7IHIgfSwgJHsgZyB9LCAkeyBiIH0gKTtgLFxuXG5cdFx0J1x0cmV0dXJuIGRvdCggd2VpZ2h0cywgcmdiICk7JyxcblxuXHRcdCd9J1xuXG5cdF0uam9pbiggJ1xcbicgKTtcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVZlcnRleEV4dGVuc2lvbnMoIHBhcmFtZXRlcnMgKSB7XG5cblx0Y29uc3QgY2h1bmtzID0gW1xuXHRcdHBhcmFtZXRlcnMuZXh0ZW5zaW9uQ2xpcEN1bGxEaXN0YW5jZSA/ICcjZXh0ZW5zaW9uIEdMX0FOR0xFX2NsaXBfY3VsbF9kaXN0YW5jZSA6IHJlcXVpcmUnIDogJycsXG5cdFx0cGFyYW1ldGVycy5leHRlbnNpb25NdWx0aURyYXcgPyAnI2V4dGVuc2lvbiBHTF9BTkdMRV9tdWx0aV9kcmF3IDogcmVxdWlyZScgOiAnJyxcblx0XTtcblxuXHRyZXR1cm4gY2h1bmtzLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZURlZmluZXMoIGRlZmluZXMgKSB7XG5cblx0Y29uc3QgY2h1bmtzID0gW107XG5cblx0Zm9yICggY29uc3QgbmFtZSBpbiBkZWZpbmVzICkge1xuXG5cdFx0Y29uc3QgdmFsdWUgPSBkZWZpbmVzWyBuYW1lIF07XG5cblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIGNvbnRpbnVlO1xuXG5cdFx0Y2h1bmtzLnB1c2goICcjZGVmaW5lICcgKyBuYW1lICsgJyAnICsgdmFsdWUgKTtcblxuXHR9XG5cblx0cmV0dXJuIGNodW5rcy5qb2luKCAnXFxuJyApO1xuXG59XG5cbmZ1bmN0aW9uIGZldGNoQXR0cmlidXRlTG9jYXRpb25zKCBnbCwgcHJvZ3JhbSApIHtcblxuXHRjb25zdCBhdHRyaWJ1dGVzID0ge307XG5cblx0Y29uc3QgbiA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIoIHByb2dyYW0sIGdsLkFDVElWRV9BVFRSSUJVVEVTICk7XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgbjsgaSArKyApIHtcblxuXHRcdGNvbnN0IGluZm8gPSBnbC5nZXRBY3RpdmVBdHRyaWIoIHByb2dyYW0sIGkgKTtcblx0XHRjb25zdCBuYW1lID0gaW5mby5uYW1lO1xuXG5cdFx0bGV0IGxvY2F0aW9uU2l6ZSA9IDE7XG5cdFx0aWYgKCBpbmZvLnR5cGUgPT09IGdsLkZMT0FUX01BVDIgKSBsb2NhdGlvblNpemUgPSAyO1xuXHRcdGlmICggaW5mby50eXBlID09PSBnbC5GTE9BVF9NQVQzICkgbG9jYXRpb25TaXplID0gMztcblx0XHRpZiAoIGluZm8udHlwZSA9PT0gZ2wuRkxPQVRfTUFUNCApIGxvY2F0aW9uU2l6ZSA9IDQ7XG5cblx0XHQvLyBjb25zb2xlLmxvZyggJ1RIUkVFLldlYkdMUHJvZ3JhbTogQUNUSVZFIFZFUlRFWCBBVFRSSUJVVEU6JywgbmFtZSwgaSApO1xuXG5cdFx0YXR0cmlidXRlc1sgbmFtZSBdID0ge1xuXHRcdFx0dHlwZTogaW5mby50eXBlLFxuXHRcdFx0bG9jYXRpb246IGdsLmdldEF0dHJpYkxvY2F0aW9uKCBwcm9ncmFtLCBuYW1lICksXG5cdFx0XHRsb2NhdGlvblNpemU6IGxvY2F0aW9uU2l6ZVxuXHRcdH07XG5cblx0fVxuXG5cdHJldHVybiBhdHRyaWJ1dGVzO1xuXG59XG5cbmZ1bmN0aW9uIGZpbHRlckVtcHR5TGluZSggc3RyaW5nICkge1xuXG5cdHJldHVybiBzdHJpbmcgIT09ICcnO1xuXG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VMaWdodE51bXMoIHN0cmluZywgcGFyYW1ldGVycyApIHtcblxuXHRjb25zdCBudW1TcG90TGlnaHRDb29yZHMgPSBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodFNoYWRvd3MgKyBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodE1hcHMgLSBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodFNoYWRvd3NXaXRoTWFwcztcblxuXHRyZXR1cm4gc3RyaW5nXG5cdFx0LnJlcGxhY2UoIC9OVU1fRElSX0xJR0hUUy9nLCBwYXJhbWV0ZXJzLm51bURpckxpZ2h0cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fU1BPVF9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1TcG90TGlnaHRzIClcblx0XHQucmVwbGFjZSggL05VTV9TUE9UX0xJR0hUX01BUFMvZywgcGFyYW1ldGVycy5udW1TcG90TGlnaHRNYXBzIClcblx0XHQucmVwbGFjZSggL05VTV9TUE9UX0xJR0hUX0NPT1JEUy9nLCBudW1TcG90TGlnaHRDb29yZHMgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1JFQ1RfQVJFQV9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1SZWN0QXJlYUxpZ2h0cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fUE9JTlRfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtUG9pbnRMaWdodHMgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX0hFTUlfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtSGVtaUxpZ2h0cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fRElSX0xJR0hUX1NIQURPV1MvZywgcGFyYW1ldGVycy5udW1EaXJMaWdodFNoYWRvd3MgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1NQT1RfTElHSFRfU0hBRE9XU19XSVRIX01BUFMvZywgcGFyYW1ldGVycy5udW1TcG90TGlnaHRTaGFkb3dzV2l0aE1hcHMgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1NQT1RfTElHSFRfU0hBRE9XUy9nLCBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodFNoYWRvd3MgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MvZywgcGFyYW1ldGVycy5udW1Qb2ludExpZ2h0U2hhZG93cyApO1xuXG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyggc3RyaW5nLCBwYXJhbWV0ZXJzICkge1xuXG5cdHJldHVybiBzdHJpbmdcblx0XHQucmVwbGFjZSggL05VTV9DTElQUElOR19QTEFORVMvZywgcGFyYW1ldGVycy5udW1DbGlwcGluZ1BsYW5lcyApXG5cdFx0LnJlcGxhY2UoIC9VTklPTl9DTElQUElOR19QTEFORVMvZywgKCBwYXJhbWV0ZXJzLm51bUNsaXBwaW5nUGxhbmVzIC0gcGFyYW1ldGVycy5udW1DbGlwSW50ZXJzZWN0aW9uICkgKTtcblxufVxuXG4vLyBSZXNvbHZlIEluY2x1ZGVzXG5cbmNvbnN0IGluY2x1ZGVQYXR0ZXJuID0gL15bIFxcdF0qI2luY2x1ZGUgKzwoW1xcd1xcZC4vXSspPi9nbTtcblxuZnVuY3Rpb24gcmVzb2x2ZUluY2x1ZGVzKCBzdHJpbmcgKSB7XG5cblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBpbmNsdWRlUGF0dGVybiwgaW5jbHVkZVJlcGxhY2VyICk7XG5cbn1cblxuY29uc3Qgc2hhZGVyQ2h1bmtNYXAgPSBuZXcgTWFwKCk7XG5cbmZ1bmN0aW9uIGluY2x1ZGVSZXBsYWNlciggbWF0Y2gsIGluY2x1ZGUgKSB7XG5cblx0bGV0IHN0cmluZyA9IFNoYWRlckNodW5rWyBpbmNsdWRlIF07XG5cblx0aWYgKCBzdHJpbmcgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGNvbnN0IG5ld0luY2x1ZGUgPSBzaGFkZXJDaHVua01hcC5nZXQoIGluY2x1ZGUgKTtcblxuXHRcdGlmICggbmV3SW5jbHVkZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzdHJpbmcgPSBTaGFkZXJDaHVua1sgbmV3SW5jbHVkZSBdO1xuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogU2hhZGVyIGNodW5rIFwiJXNcIiBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgXCIlc1wiIGluc3RlYWQuJywgaW5jbHVkZSwgbmV3SW5jbHVkZSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnQ2FuIG5vdCByZXNvbHZlICNpbmNsdWRlIDwnICsgaW5jbHVkZSArICc+JyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gcmVzb2x2ZUluY2x1ZGVzKCBzdHJpbmcgKTtcblxufVxuXG4vLyBVbnJvbGwgTG9vcHNcblxuY29uc3QgdW5yb2xsTG9vcFBhdHRlcm4gPSAvI3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxccytmb3JcXHMqXFwoXFxzKmludFxccytpXFxzKj1cXHMqKFxcZCspXFxzKjtcXHMqaVxccyo8XFxzKihcXGQrKVxccyo7XFxzKmlcXHMqXFwrXFwrXFxzKlxcKVxccyp7KFtcXHNcXFNdKz8pfVxccysjcHJhZ21hIHVucm9sbF9sb29wX2VuZC9nO1xuXG5mdW5jdGlvbiB1bnJvbGxMb29wcyggc3RyaW5nICkge1xuXG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggdW5yb2xsTG9vcFBhdHRlcm4sIGxvb3BSZXBsYWNlciApO1xuXG59XG5cbmZ1bmN0aW9uIGxvb3BSZXBsYWNlciggbWF0Y2gsIHN0YXJ0LCBlbmQsIHNuaXBwZXQgKSB7XG5cblx0bGV0IHN0cmluZyA9ICcnO1xuXG5cdGZvciAoIGxldCBpID0gcGFyc2VJbnQoIHN0YXJ0ICk7IGkgPCBwYXJzZUludCggZW5kICk7IGkgKysgKSB7XG5cblx0XHRzdHJpbmcgKz0gc25pcHBldFxuXHRcdFx0LnJlcGxhY2UoIC9cXFtcXHMqaVxccypcXF0vZywgJ1sgJyArIGkgKyAnIF0nIClcblx0XHRcdC5yZXBsYWNlKCAvVU5ST0xMRURfTE9PUF9JTkRFWC9nLCBpICk7XG5cblx0fVxuXG5cdHJldHVybiBzdHJpbmc7XG5cbn1cblxuLy9cblxuZnVuY3Rpb24gZ2VuZXJhdGVQcmVjaXNpb24oIHBhcmFtZXRlcnMgKSB7XG5cblx0bGV0IHByZWNpc2lvbnN0cmluZyA9IGBwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gZmxvYXQ7XG5cdHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBpbnQ7XG5cdHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBzYW1wbGVyMkQ7XG5cdHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBzYW1wbGVyQ3ViZTtcblx0cHJlY2lzaW9uICR7cGFyYW1ldGVycy5wcmVjaXNpb259IHNhbXBsZXIzRDtcblx0cHJlY2lzaW9uICR7cGFyYW1ldGVycy5wcmVjaXNpb259IHNhbXBsZXIyREFycmF5O1xuXHRwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gc2FtcGxlcjJEU2hhZG93O1xuXHRwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gc2FtcGxlckN1YmVTaGFkb3c7XG5cdHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBzYW1wbGVyMkRBcnJheVNoYWRvdztcblx0cHJlY2lzaW9uICR7cGFyYW1ldGVycy5wcmVjaXNpb259IGlzYW1wbGVyMkQ7XG5cdHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBpc2FtcGxlcjNEO1xuXHRwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gaXNhbXBsZXJDdWJlO1xuXHRwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gaXNhbXBsZXIyREFycmF5O1xuXHRwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gdXNhbXBsZXIyRDtcblx0cHJlY2lzaW9uICR7cGFyYW1ldGVycy5wcmVjaXNpb259IHVzYW1wbGVyM0Q7XG5cdHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSB1c2FtcGxlckN1YmU7XG5cdHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSB1c2FtcGxlcjJEQXJyYXk7XG5cdGA7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLnByZWNpc2lvbiA9PT0gJ2hpZ2hwJyApIHtcblxuXHRcdHByZWNpc2lvbnN0cmluZyArPSAnXFxuI2RlZmluZSBISUdIX1BSRUNJU0lPTic7XG5cblx0fSBlbHNlIGlmICggcGFyYW1ldGVycy5wcmVjaXNpb24gPT09ICdtZWRpdW1wJyApIHtcblxuXHRcdHByZWNpc2lvbnN0cmluZyArPSAnXFxuI2RlZmluZSBNRURJVU1fUFJFQ0lTSU9OJztcblxuXHR9IGVsc2UgaWYgKCBwYXJhbWV0ZXJzLnByZWNpc2lvbiA9PT0gJ2xvd3AnICkge1xuXG5cdFx0cHJlY2lzaW9uc3RyaW5nICs9ICdcXG4jZGVmaW5lIExPV19QUkVDSVNJT04nO1xuXG5cdH1cblxuXHRyZXR1cm4gcHJlY2lzaW9uc3RyaW5nO1xuXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU2hhZG93TWFwVHlwZURlZmluZSggcGFyYW1ldGVycyApIHtcblxuXHRsZXQgc2hhZG93TWFwVHlwZURlZmluZSA9ICdTSEFET1dNQVBfVFlQRV9CQVNJQyc7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLnNoYWRvd01hcFR5cGUgPT09IFBDRlNoYWRvd01hcCApIHtcblxuXHRcdHNoYWRvd01hcFR5cGVEZWZpbmUgPSAnU0hBRE9XTUFQX1RZUEVfUENGJztcblxuXHR9IGVsc2UgaWYgKCBwYXJhbWV0ZXJzLnNoYWRvd01hcFR5cGUgPT09IFBDRlNvZnRTaGFkb3dNYXAgKSB7XG5cblx0XHRzaGFkb3dNYXBUeXBlRGVmaW5lID0gJ1NIQURPV01BUF9UWVBFX1BDRl9TT0ZUJztcblxuXHR9IGVsc2UgaWYgKCBwYXJhbWV0ZXJzLnNoYWRvd01hcFR5cGUgPT09IFZTTVNoYWRvd01hcCApIHtcblxuXHRcdHNoYWRvd01hcFR5cGVEZWZpbmUgPSAnU0hBRE9XTUFQX1RZUEVfVlNNJztcblxuXHR9XG5cblx0cmV0dXJuIHNoYWRvd01hcFR5cGVEZWZpbmU7XG5cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVFbnZNYXBUeXBlRGVmaW5lKCBwYXJhbWV0ZXJzICkge1xuXG5cdGxldCBlbnZNYXBUeXBlRGVmaW5lID0gJ0VOVk1BUF9UWVBFX0NVQkUnO1xuXG5cdGlmICggcGFyYW1ldGVycy5lbnZNYXAgKSB7XG5cblx0XHRzd2l0Y2ggKCBwYXJhbWV0ZXJzLmVudk1hcE1vZGUgKSB7XG5cblx0XHRcdGNhc2UgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nOlxuXHRcdFx0Y2FzZSBDdWJlUmVmcmFjdGlvbk1hcHBpbmc6XG5cdFx0XHRcdGVudk1hcFR5cGVEZWZpbmUgPSAnRU5WTUFQX1RZUEVfQ1VCRSc7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nOlxuXHRcdFx0XHRlbnZNYXBUeXBlRGVmaW5lID0gJ0VOVk1BUF9UWVBFX0NVQkVfVVYnO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIGVudk1hcFR5cGVEZWZpbmU7XG5cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVFbnZNYXBNb2RlRGVmaW5lKCBwYXJhbWV0ZXJzICkge1xuXG5cdGxldCBlbnZNYXBNb2RlRGVmaW5lID0gJ0VOVk1BUF9NT0RFX1JFRkxFQ1RJT04nO1xuXG5cdGlmICggcGFyYW1ldGVycy5lbnZNYXAgKSB7XG5cblx0XHRzd2l0Y2ggKCBwYXJhbWV0ZXJzLmVudk1hcE1vZGUgKSB7XG5cblx0XHRcdGNhc2UgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nOlxuXG5cdFx0XHRcdGVudk1hcE1vZGVEZWZpbmUgPSAnRU5WTUFQX01PREVfUkVGUkFDVElPTic7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gZW52TWFwTW9kZURlZmluZTtcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUVudk1hcEJsZW5kaW5nRGVmaW5lKCBwYXJhbWV0ZXJzICkge1xuXG5cdGxldCBlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfTk9ORSc7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLmVudk1hcCApIHtcblxuXHRcdHN3aXRjaCAoIHBhcmFtZXRlcnMuY29tYmluZSApIHtcblxuXHRcdFx0Y2FzZSBNdWx0aXBseU9wZXJhdGlvbjpcblx0XHRcdFx0ZW52TWFwQmxlbmRpbmdEZWZpbmUgPSAnRU5WTUFQX0JMRU5ESU5HX01VTFRJUExZJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgTWl4T3BlcmF0aW9uOlxuXHRcdFx0XHRlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfTUlYJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgQWRkT3BlcmF0aW9uOlxuXHRcdFx0XHRlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfQUREJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiBlbnZNYXBCbGVuZGluZ0RlZmluZTtcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUN1YmVVVlNpemUoIHBhcmFtZXRlcnMgKSB7XG5cblx0Y29uc3QgaW1hZ2VIZWlnaHQgPSBwYXJhbWV0ZXJzLmVudk1hcEN1YmVVVkhlaWdodDtcblxuXHRpZiAoIGltYWdlSGVpZ2h0ID09PSBudWxsICkgcmV0dXJuIG51bGw7XG5cblx0Y29uc3QgbWF4TWlwID0gTWF0aC5sb2cyKCBpbWFnZUhlaWdodCApIC0gMjtcblxuXHRjb25zdCB0ZXhlbEhlaWdodCA9IDEuMCAvIGltYWdlSGVpZ2h0O1xuXG5cdGNvbnN0IHRleGVsV2lkdGggPSAxLjAgLyAoIDMgKiBNYXRoLm1heCggTWF0aC5wb3coIDIsIG1heE1pcCApLCA3ICogMTYgKSApO1xuXG5cdHJldHVybiB7IHRleGVsV2lkdGgsIHRleGVsSGVpZ2h0LCBtYXhNaXAgfTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTFByb2dyYW0oIHJlbmRlcmVyLCBjYWNoZUtleSwgcGFyYW1ldGVycywgYmluZGluZ1N0YXRlcyApIHtcblxuXHQvLyBUT0RPIFNlbmQgdGhpcyBldmVudCB0byBUaHJlZS5qcyBEZXZUb29sc1xuXHQvLyBjb25zb2xlLmxvZyggJ1dlYkdMUHJvZ3JhbScsIGNhY2hlS2V5ICk7XG5cblx0Y29uc3QgZ2wgPSByZW5kZXJlci5nZXRDb250ZXh0KCk7XG5cblx0Y29uc3QgZGVmaW5lcyA9IHBhcmFtZXRlcnMuZGVmaW5lcztcblxuXHRsZXQgdmVydGV4U2hhZGVyID0gcGFyYW1ldGVycy52ZXJ0ZXhTaGFkZXI7XG5cdGxldCBmcmFnbWVudFNoYWRlciA9IHBhcmFtZXRlcnMuZnJhZ21lbnRTaGFkZXI7XG5cblx0Y29uc3Qgc2hhZG93TWFwVHlwZURlZmluZSA9IGdlbmVyYXRlU2hhZG93TWFwVHlwZURlZmluZSggcGFyYW1ldGVycyApO1xuXHRjb25zdCBlbnZNYXBUeXBlRGVmaW5lID0gZ2VuZXJhdGVFbnZNYXBUeXBlRGVmaW5lKCBwYXJhbWV0ZXJzICk7XG5cdGNvbnN0IGVudk1hcE1vZGVEZWZpbmUgPSBnZW5lcmF0ZUVudk1hcE1vZGVEZWZpbmUoIHBhcmFtZXRlcnMgKTtcblx0Y29uc3QgZW52TWFwQmxlbmRpbmdEZWZpbmUgPSBnZW5lcmF0ZUVudk1hcEJsZW5kaW5nRGVmaW5lKCBwYXJhbWV0ZXJzICk7XG5cdGNvbnN0IGVudk1hcEN1YmVVVlNpemUgPSBnZW5lcmF0ZUN1YmVVVlNpemUoIHBhcmFtZXRlcnMgKTtcblxuXHRjb25zdCBjdXN0b21WZXJ0ZXhFeHRlbnNpb25zID0gZ2VuZXJhdGVWZXJ0ZXhFeHRlbnNpb25zKCBwYXJhbWV0ZXJzICk7XG5cblx0Y29uc3QgY3VzdG9tRGVmaW5lcyA9IGdlbmVyYXRlRGVmaW5lcyggZGVmaW5lcyApO1xuXG5cdGNvbnN0IHByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG5cblx0bGV0IHByZWZpeFZlcnRleCwgcHJlZml4RnJhZ21lbnQ7XG5cdGxldCB2ZXJzaW9uU3RyaW5nID0gcGFyYW1ldGVycy5nbHNsVmVyc2lvbiA/ICcjdmVyc2lvbiAnICsgcGFyYW1ldGVycy5nbHNsVmVyc2lvbiArICdcXG4nIDogJyc7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLmlzUmF3U2hhZGVyTWF0ZXJpYWwgKSB7XG5cblx0XHRwcmVmaXhWZXJ0ZXggPSBbXG5cblx0XHRcdCcjZGVmaW5lIFNIQURFUl9UWVBFICcgKyBwYXJhbWV0ZXJzLnNoYWRlclR5cGUsXG5cdFx0XHQnI2RlZmluZSBTSEFERVJfTkFNRSAnICsgcGFyYW1ldGVycy5zaGFkZXJOYW1lLFxuXG5cdFx0XHRjdXN0b21EZWZpbmVzXG5cblx0XHRdLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxuXHRcdGlmICggcHJlZml4VmVydGV4Lmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHByZWZpeFZlcnRleCArPSAnXFxuJztcblxuXHRcdH1cblxuXHRcdHByZWZpeEZyYWdtZW50ID0gW1xuXG5cdFx0XHQnI2RlZmluZSBTSEFERVJfVFlQRSAnICsgcGFyYW1ldGVycy5zaGFkZXJUeXBlLFxuXHRcdFx0JyNkZWZpbmUgU0hBREVSX05BTUUgJyArIHBhcmFtZXRlcnMuc2hhZGVyTmFtZSxcblxuXHRcdFx0Y3VzdG9tRGVmaW5lc1xuXG5cdFx0XS5maWx0ZXIoIGZpbHRlckVtcHR5TGluZSApLmpvaW4oICdcXG4nICk7XG5cblx0XHRpZiAoIHByZWZpeEZyYWdtZW50Lmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHByZWZpeEZyYWdtZW50ICs9ICdcXG4nO1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRwcmVmaXhWZXJ0ZXggPSBbXG5cblx0XHRcdGdlbmVyYXRlUHJlY2lzaW9uKCBwYXJhbWV0ZXJzICksXG5cblx0XHRcdCcjZGVmaW5lIFNIQURFUl9UWVBFICcgKyBwYXJhbWV0ZXJzLnNoYWRlclR5cGUsXG5cdFx0XHQnI2RlZmluZSBTSEFERVJfTkFNRSAnICsgcGFyYW1ldGVycy5zaGFkZXJOYW1lLFxuXG5cdFx0XHRjdXN0b21EZWZpbmVzLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmV4dGVuc2lvbkNsaXBDdWxsRGlzdGFuY2UgPyAnI2RlZmluZSBVU0VfQ0xJUF9ESVNUQU5DRScgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYmF0Y2hpbmcgPyAnI2RlZmluZSBVU0VfQkFUQ0hJTkcnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmJhdGNoaW5nQ29sb3IgPyAnI2RlZmluZSBVU0VfQkFUQ0hJTkdfQ09MT1InIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmluc3RhbmNpbmcgPyAnI2RlZmluZSBVU0VfSU5TVEFOQ0lORycgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuaW5zdGFuY2luZ0NvbG9yID8gJyNkZWZpbmUgVVNFX0lOU1RBTkNJTkdfQ09MT1InIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmluc3RhbmNpbmdNb3JwaCA/ICcjZGVmaW5lIFVTRV9JTlNUQU5DSU5HX01PUlBIJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnVzZUZvZyAmJiBwYXJhbWV0ZXJzLmZvZyA/ICcjZGVmaW5lIFVTRV9GT0cnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnVzZUZvZyAmJiBwYXJhbWV0ZXJzLmZvZ0V4cDIgPyAnI2RlZmluZSBGT0dfRVhQMicgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5tYXAgPyAnI2RlZmluZSBVU0VfTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSBVU0VfRU5WTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSAnICsgZW52TWFwTW9kZURlZmluZSA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5saWdodE1hcCA/ICcjZGVmaW5lIFVTRV9MSUdIVE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYW9NYXAgPyAnI2RlZmluZSBVU0VfQU9NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmJ1bXBNYXAgPyAnI2RlZmluZSBVU0VfQlVNUE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubm9ybWFsTWFwID8gJyNkZWZpbmUgVVNFX05PUk1BTE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubm9ybWFsTWFwT2JqZWN0U3BhY2UgPyAnI2RlZmluZSBVU0VfTk9STUFMTUFQX09CSkVDVFNQQUNFJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5ub3JtYWxNYXBUYW5nZW50U3BhY2UgPyAnI2RlZmluZSBVU0VfTk9STUFMTUFQX1RBTkdFTlRTUEFDRScgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZGlzcGxhY2VtZW50TWFwID8gJyNkZWZpbmUgVVNFX0RJU1BMQUNFTUVOVE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW1pc3NpdmVNYXAgPyAnI2RlZmluZSBVU0VfRU1JU1NJVkVNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuYW5pc290cm9weSA/ICcjZGVmaW5lIFVTRV9BTklTT1RST1BZJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hbmlzb3Ryb3B5TWFwID8gJyNkZWZpbmUgVVNFX0FOSVNPVFJPUFlNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuY2xlYXJjb2F0TWFwID8gJyNkZWZpbmUgVVNFX0NMRUFSQ09BVE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuY2xlYXJjb2F0Um91Z2huZXNzTWFwID8gJyNkZWZpbmUgVVNFX0NMRUFSQ09BVF9ST1VHSE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmNsZWFyY29hdE5vcm1hbE1hcCA/ICcjZGVmaW5lIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmlyaWRlc2NlbmNlTWFwID8gJyNkZWZpbmUgVVNFX0lSSURFU0NFTkNFTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9JUklERVNDRU5DRV9USElDS05FU1NNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNwZWN1bGFyQ29sb3JNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJfQ09MT1JNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNwZWN1bGFySW50ZW5zaXR5TWFwID8gJyNkZWZpbmUgVVNFX1NQRUNVTEFSX0lOVEVOU0lUWU1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5yb3VnaG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfUk9VR0hORVNTTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5tZXRhbG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfTUVUQUxORVNTTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hbHBoYU1hcCA/ICcjZGVmaW5lIFVTRV9BTFBIQU1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYWxwaGFIYXNoID8gJyNkZWZpbmUgVVNFX0FMUEhBSEFTSCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy50cmFuc21pc3Npb24gPyAnI2RlZmluZSBVU0VfVFJBTlNNSVNTSU9OJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy50cmFuc21pc3Npb25NYXAgPyAnI2RlZmluZSBVU0VfVFJBTlNNSVNTSU9OTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy50aGlja25lc3NNYXAgPyAnI2RlZmluZSBVU0VfVEhJQ0tORVNTTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNoZWVuQ29sb3JNYXAgPyAnI2RlZmluZSBVU0VfU0hFRU5fQ09MT1JNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNoZWVuUm91Z2huZXNzTWFwID8gJyNkZWZpbmUgVVNFX1NIRUVOX1JPVUdITkVTU01BUCcgOiAnJyxcblxuXHRcdFx0Ly9cblxuXHRcdFx0cGFyYW1ldGVycy5tYXBVdiA/ICcjZGVmaW5lIE1BUF9VViAnICsgcGFyYW1ldGVycy5tYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hbHBoYU1hcFV2ID8gJyNkZWZpbmUgQUxQSEFNQVBfVVYgJyArIHBhcmFtZXRlcnMuYWxwaGFNYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5saWdodE1hcFV2ID8gJyNkZWZpbmUgTElHSFRNQVBfVVYgJyArIHBhcmFtZXRlcnMubGlnaHRNYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hb01hcFV2ID8gJyNkZWZpbmUgQU9NQVBfVVYgJyArIHBhcmFtZXRlcnMuYW9NYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5lbWlzc2l2ZU1hcFV2ID8gJyNkZWZpbmUgRU1JU1NJVkVNQVBfVVYgJyArIHBhcmFtZXRlcnMuZW1pc3NpdmVNYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5idW1wTWFwVXYgPyAnI2RlZmluZSBCVU1QTUFQX1VWICcgKyBwYXJhbWV0ZXJzLmJ1bXBNYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5ub3JtYWxNYXBVdiA/ICcjZGVmaW5lIE5PUk1BTE1BUF9VViAnICsgcGFyYW1ldGVycy5ub3JtYWxNYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5kaXNwbGFjZW1lbnRNYXBVdiA/ICcjZGVmaW5lIERJU1BMQUNFTUVOVE1BUF9VViAnICsgcGFyYW1ldGVycy5kaXNwbGFjZW1lbnRNYXBVdiA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcFV2ID8gJyNkZWZpbmUgTUVUQUxORVNTTUFQX1VWICcgKyBwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcFV2IDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnJvdWdobmVzc01hcFV2ID8gJyNkZWZpbmUgUk9VR0hORVNTTUFQX1VWICcgKyBwYXJhbWV0ZXJzLnJvdWdobmVzc01hcFV2IDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuYW5pc290cm9weU1hcFV2ID8gJyNkZWZpbmUgQU5JU09UUk9QWU1BUF9VViAnICsgcGFyYW1ldGVycy5hbmlzb3Ryb3B5TWFwVXYgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXRNYXBVdiA/ICcjZGVmaW5lIENMRUFSQ09BVE1BUF9VViAnICsgcGFyYW1ldGVycy5jbGVhcmNvYXRNYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXROb3JtYWxNYXBVdiA/ICcjZGVmaW5lIENMRUFSQ09BVF9OT1JNQUxNQVBfVVYgJyArIHBhcmFtZXRlcnMuY2xlYXJjb2F0Tm9ybWFsTWFwVXYgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuY2xlYXJjb2F0Um91Z2huZXNzTWFwVXYgPyAnI2RlZmluZSBDTEVBUkNPQVRfUk9VR0hORVNTTUFQX1VWICcgKyBwYXJhbWV0ZXJzLmNsZWFyY29hdFJvdWdobmVzc01hcFV2IDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuaXJpZGVzY2VuY2VNYXBVdiA/ICcjZGVmaW5lIElSSURFU0NFTkNFTUFQX1VWICcgKyBwYXJhbWV0ZXJzLmlyaWRlc2NlbmNlTWFwVXYgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuaXJpZGVzY2VuY2VUaGlja25lc3NNYXBVdiA/ICcjZGVmaW5lIElSSURFU0NFTkNFX1RISUNLTkVTU01BUF9VViAnICsgcGFyYW1ldGVycy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcFV2IDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuc2hlZW5Db2xvck1hcFV2ID8gJyNkZWZpbmUgU0hFRU5fQ09MT1JNQVBfVVYgJyArIHBhcmFtZXRlcnMuc2hlZW5Db2xvck1hcFV2IDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNoZWVuUm91Z2huZXNzTWFwVXYgPyAnI2RlZmluZSBTSEVFTl9ST1VHSE5FU1NNQVBfVVYgJyArIHBhcmFtZXRlcnMuc2hlZW5Sb3VnaG5lc3NNYXBVdiA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNwZWN1bGFyTWFwVXYgPyAnI2RlZmluZSBTUEVDVUxBUk1BUF9VViAnICsgcGFyYW1ldGVycy5zcGVjdWxhck1hcFV2IDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNwZWN1bGFyQ29sb3JNYXBVdiA/ICcjZGVmaW5lIFNQRUNVTEFSX0NPTE9STUFQX1VWICcgKyBwYXJhbWV0ZXJzLnNwZWN1bGFyQ29sb3JNYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zcGVjdWxhckludGVuc2l0eU1hcFV2ID8gJyNkZWZpbmUgU1BFQ1VMQVJfSU5URU5TSVRZTUFQX1VWICcgKyBwYXJhbWV0ZXJzLnNwZWN1bGFySW50ZW5zaXR5TWFwVXYgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy50cmFuc21pc3Npb25NYXBVdiA/ICcjZGVmaW5lIFRSQU5TTUlTU0lPTk1BUF9VViAnICsgcGFyYW1ldGVycy50cmFuc21pc3Npb25NYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy50aGlja25lc3NNYXBVdiA/ICcjZGVmaW5lIFRISUNLTkVTU01BUF9VViAnICsgcGFyYW1ldGVycy50aGlja25lc3NNYXBVdiA6ICcnLFxuXG5cdFx0XHQvL1xuXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleFRhbmdlbnRzICYmIHBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgPT09IGZhbHNlID8gJyNkZWZpbmUgVVNFX1RBTkdFTlQnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleENvbG9ycyA/ICcjZGVmaW5lIFVTRV9DT0xPUicgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudmVydGV4QWxwaGFzID8gJyNkZWZpbmUgVVNFX0NPTE9SX0FMUEhBJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhVdjFzID8gJyNkZWZpbmUgVVNFX1VWMScgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudmVydGV4VXYycyA/ICcjZGVmaW5lIFVTRV9VVjInIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleFV2M3MgPyAnI2RlZmluZSBVU0VfVVYzJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnBvaW50c1V2cyA/ICcjZGVmaW5lIFVTRV9QT0lOVFNfVVYnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgPyAnI2RlZmluZSBGTEFUX1NIQURFRCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5za2lubmluZyA/ICcjZGVmaW5lIFVTRV9TS0lOTklORycgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5tb3JwaFRhcmdldHMgPyAnI2RlZmluZSBVU0VfTU9SUEhUQVJHRVRTJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5tb3JwaE5vcm1hbHMgJiYgcGFyYW1ldGVycy5mbGF0U2hhZGluZyA9PT0gZmFsc2UgPyAnI2RlZmluZSBVU0VfTU9SUEhOT1JNQUxTJyA6ICcnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLm1vcnBoQ29sb3JzICkgPyAnI2RlZmluZSBVU0VfTU9SUEhDT0xPUlMnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzQ291bnQgPiAwICkgPyAnI2RlZmluZSBNT1JQSFRBUkdFVFNfVEVYVFVSRV9TVFJJREUgJyArIHBhcmFtZXRlcnMubW9ycGhUZXh0dXJlU3RyaWRlIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzQ291bnQgPiAwICkgPyAnI2RlZmluZSBNT1JQSFRBUkdFVFNfQ09VTlQgJyArIHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzQ291bnQgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZG91YmxlU2lkZWQgPyAnI2RlZmluZSBET1VCTEVfU0lERUQnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmZsaXBTaWRlZCA/ICcjZGVmaW5lIEZMSVBfU0lERUQnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuc2hhZG93TWFwRW5hYmxlZCA/ICcjZGVmaW5lIFVTRV9TSEFET1dNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNoYWRvd01hcEVuYWJsZWQgPyAnI2RlZmluZSAnICsgc2hhZG93TWFwVHlwZURlZmluZSA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNpemVBdHRlbnVhdGlvbiA/ICcjZGVmaW5lIFVTRV9TSVpFQVRURU5VQVRJT04nIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMubnVtTGlnaHRQcm9iZXMgPiAwID8gJyNkZWZpbmUgVVNFX0xJR0hUX1BST0JFUycgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyID8gJyNkZWZpbmUgVVNFX0xPR0FSSVRITUlDX0RFUFRIX0JVRkZFUicgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMucmV2ZXJzZWREZXB0aEJ1ZmZlciA/ICcjZGVmaW5lIFVTRV9SRVZFUlNFRF9ERVBUSF9CVUZGRVInIDogJycsXG5cblx0XHRcdCd1bmlmb3JtIG1hdDQgbW9kZWxNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIG1hdDQgbW9kZWxWaWV3TWF0cml4OycsXG5cdFx0XHQndW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIG1hdDQgdmlld01hdHJpeDsnLFxuXHRcdFx0J3VuaWZvcm0gbWF0MyBub3JtYWxNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247Jyxcblx0XHRcdCd1bmlmb3JtIGJvb2wgaXNPcnRob2dyYXBoaWM7JyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfSU5TVEFOQ0lORycsXG5cblx0XHRcdCdcdGF0dHJpYnV0ZSBtYXQ0IGluc3RhbmNlTWF0cml4OycsXG5cblx0XHRcdCcjZW5kaWYnLFxuXG5cdFx0XHQnI2lmZGVmIFVTRV9JTlNUQU5DSU5HX0NPTE9SJyxcblxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzMgaW5zdGFuY2VDb2xvcjsnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfSU5TVEFOQ0lOR19NT1JQSCcsXG5cblx0XHRcdCdcdHVuaWZvcm0gc2FtcGxlcjJEIG1vcnBoVGV4dHVyZTsnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0J2F0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uOycsXG5cdFx0XHQnYXR0cmlidXRlIHZlYzMgbm9ybWFsOycsXG5cdFx0XHQnYXR0cmlidXRlIHZlYzIgdXY7JyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfVVYxJyxcblxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzIgdXYxOycsXG5cblx0XHRcdCcjZW5kaWYnLFxuXG5cdFx0XHQnI2lmZGVmIFVTRV9VVjInLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjMiB1djI7JyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCcjaWZkZWYgVVNFX1VWMycsXG5cblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWMyIHV2MzsnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfVEFOR0VOVCcsXG5cblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWM0IHRhbmdlbnQ7JyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCcjaWYgZGVmaW5lZCggVVNFX0NPTE9SX0FMUEhBICknLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjNCBjb2xvcjsnLFxuXG5cdFx0XHQnI2VsaWYgZGVmaW5lZCggVVNFX0NPTE9SICknLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjMyBjb2xvcjsnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfU0tJTk5JTkcnLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjNCBza2luSW5kZXg7Jyxcblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWM0IHNraW5XZWlnaHQ7JyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCdcXG4nXG5cblx0XHRdLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxuXHRcdHByZWZpeEZyYWdtZW50ID0gW1xuXG5cdFx0XHRnZW5lcmF0ZVByZWNpc2lvbiggcGFyYW1ldGVycyApLFxuXG5cdFx0XHQnI2RlZmluZSBTSEFERVJfVFlQRSAnICsgcGFyYW1ldGVycy5zaGFkZXJUeXBlLFxuXHRcdFx0JyNkZWZpbmUgU0hBREVSX05BTUUgJyArIHBhcmFtZXRlcnMuc2hhZGVyTmFtZSxcblxuXHRcdFx0Y3VzdG9tRGVmaW5lcyxcblxuXHRcdFx0cGFyYW1ldGVycy51c2VGb2cgJiYgcGFyYW1ldGVycy5mb2cgPyAnI2RlZmluZSBVU0VfRk9HJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy51c2VGb2cgJiYgcGFyYW1ldGVycy5mb2dFeHAyID8gJyNkZWZpbmUgRk9HX0VYUDInIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuYWxwaGFUb0NvdmVyYWdlID8gJyNkZWZpbmUgQUxQSEFfVE9fQ09WRVJBR0UnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm1hcCA/ICcjZGVmaW5lIFVTRV9NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm1hdGNhcCA/ICcjZGVmaW5lIFVTRV9NQVRDQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lIFVTRV9FTlZNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBUeXBlRGVmaW5lIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBNb2RlRGVmaW5lIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBCbGVuZGluZ0RlZmluZSA6ICcnLFxuXHRcdFx0ZW52TWFwQ3ViZVVWU2l6ZSA/ICcjZGVmaW5lIENVQkVVVl9URVhFTF9XSURUSCAnICsgZW52TWFwQ3ViZVVWU2l6ZS50ZXhlbFdpZHRoIDogJycsXG5cdFx0XHRlbnZNYXBDdWJlVVZTaXplID8gJyNkZWZpbmUgQ1VCRVVWX1RFWEVMX0hFSUdIVCAnICsgZW52TWFwQ3ViZVVWU2l6ZS50ZXhlbEhlaWdodCA6ICcnLFxuXHRcdFx0ZW52TWFwQ3ViZVVWU2l6ZSA/ICcjZGVmaW5lIENVQkVVVl9NQVhfTUlQICcgKyBlbnZNYXBDdWJlVVZTaXplLm1heE1pcCArICcuMCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubGlnaHRNYXAgPyAnI2RlZmluZSBVU0VfTElHSFRNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmFvTWFwID8gJyNkZWZpbmUgVVNFX0FPTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5idW1wTWFwID8gJyNkZWZpbmUgVVNFX0JVTVBNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm5vcm1hbE1hcCA/ICcjZGVmaW5lIFVTRV9OT1JNQUxNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm5vcm1hbE1hcE9iamVjdFNwYWNlID8gJyNkZWZpbmUgVVNFX05PUk1BTE1BUF9PQkpFQ1RTUEFDRScgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubm9ybWFsTWFwVGFuZ2VudFNwYWNlID8gJyNkZWZpbmUgVVNFX05PUk1BTE1BUF9UQU5HRU5UU1BBQ0UnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwID8gJyNkZWZpbmUgVVNFX0VNSVNTSVZFTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmFuaXNvdHJvcHkgPyAnI2RlZmluZSBVU0VfQU5JU09UUk9QWScgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYW5pc290cm9weU1hcCA/ICcjZGVmaW5lIFVTRV9BTklTT1RST1BZTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmNsZWFyY29hdCA/ICcjZGVmaW5lIFVTRV9DTEVBUkNPQVQnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmNsZWFyY29hdE1hcCA/ICcjZGVmaW5lIFVTRV9DTEVBUkNPQVRNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmNsZWFyY29hdFJvdWdobmVzc01hcCA/ICcjZGVmaW5lIFVTRV9DTEVBUkNPQVRfUk9VR0hORVNTTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXROb3JtYWxNYXAgPyAnI2RlZmluZSBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5kaXNwZXJzaW9uID8gJyNkZWZpbmUgVVNFX0RJU1BFUlNJT04nIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuaXJpZGVzY2VuY2UgPyAnI2RlZmluZSBVU0VfSVJJREVTQ0VOQ0UnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmlyaWRlc2NlbmNlTWFwID8gJyNkZWZpbmUgVVNFX0lSSURFU0NFTkNFTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9JUklERVNDRU5DRV9USElDS05FU1NNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNwZWN1bGFyQ29sb3JNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJfQ09MT1JNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNwZWN1bGFySW50ZW5zaXR5TWFwID8gJyNkZWZpbmUgVVNFX1NQRUNVTEFSX0lOVEVOU0lUWU1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5yb3VnaG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfUk9VR0hORVNTTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5tZXRhbG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfTUVUQUxORVNTTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmFscGhhTWFwID8gJyNkZWZpbmUgVVNFX0FMUEhBTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hbHBoYVRlc3QgPyAnI2RlZmluZSBVU0VfQUxQSEFURVNUJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hbHBoYUhhc2ggPyAnI2RlZmluZSBVU0VfQUxQSEFIQVNIJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNoZWVuID8gJyNkZWZpbmUgVVNFX1NIRUVOJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zaGVlbkNvbG9yTWFwID8gJyNkZWZpbmUgVVNFX1NIRUVOX0NPTE9STUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zaGVlblJvdWdobmVzc01hcCA/ICcjZGVmaW5lIFVTRV9TSEVFTl9ST1VHSE5FU1NNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMudHJhbnNtaXNzaW9uID8gJyNkZWZpbmUgVVNFX1RSQU5TTUlTU0lPTicgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudHJhbnNtaXNzaW9uTWFwID8gJyNkZWZpbmUgVVNFX1RSQU5TTUlTU0lPTk1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudGhpY2tuZXNzTWFwID8gJyNkZWZpbmUgVVNFX1RISUNLTkVTU01BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhUYW5nZW50cyAmJiBwYXJhbWV0ZXJzLmZsYXRTaGFkaW5nID09PSBmYWxzZSA/ICcjZGVmaW5lIFVTRV9UQU5HRU5UJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhDb2xvcnMgfHwgcGFyYW1ldGVycy5pbnN0YW5jaW5nQ29sb3IgfHwgcGFyYW1ldGVycy5iYXRjaGluZ0NvbG9yID8gJyNkZWZpbmUgVVNFX0NPTE9SJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhBbHBoYXMgPyAnI2RlZmluZSBVU0VfQ09MT1JfQUxQSEEnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleFV2MXMgPyAnI2RlZmluZSBVU0VfVVYxJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhVdjJzID8gJyNkZWZpbmUgVVNFX1VWMicgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudmVydGV4VXYzcyA/ICcjZGVmaW5lIFVTRV9VVjMnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMucG9pbnRzVXZzID8gJyNkZWZpbmUgVVNFX1BPSU5UU19VVicgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5ncmFkaWVudE1hcCA/ICcjZGVmaW5lIFVTRV9HUkFESUVOVE1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5mbGF0U2hhZGluZyA/ICcjZGVmaW5lIEZMQVRfU0hBREVEJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmRvdWJsZVNpZGVkID8gJyNkZWZpbmUgRE9VQkxFX1NJREVEJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5mbGlwU2lkZWQgPyAnI2RlZmluZSBGTElQX1NJREVEJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNoYWRvd01hcEVuYWJsZWQgPyAnI2RlZmluZSBVU0VfU0hBRE9XTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkID8gJyNkZWZpbmUgJyArIHNoYWRvd01hcFR5cGVEZWZpbmUgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5wcmVtdWx0aXBsaWVkQWxwaGEgPyAnI2RlZmluZSBQUkVNVUxUSVBMSUVEX0FMUEhBJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLm51bUxpZ2h0UHJvYmVzID4gMCA/ICcjZGVmaW5lIFVTRV9MSUdIVF9QUk9CRVMnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZGVjb2RlVmlkZW9UZXh0dXJlID8gJyNkZWZpbmUgREVDT0RFX1ZJREVPX1RFWFRVUkUnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmRlY29kZVZpZGVvVGV4dHVyZUVtaXNzaXZlID8gJyNkZWZpbmUgREVDT0RFX1ZJREVPX1RFWFRVUkVfRU1JU1NJVkUnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA/ICcjZGVmaW5lIFVTRV9MT0dBUklUSE1JQ19ERVBUSF9CVUZGRVInIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnJldmVyc2VkRGVwdGhCdWZmZXIgPyAnI2RlZmluZSBVU0VfUkVWRVJTRURfREVQVEhfQlVGRkVSJyA6ICcnLFxuXG5cdFx0XHQndW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247Jyxcblx0XHRcdCd1bmlmb3JtIGJvb2wgaXNPcnRob2dyYXBoaWM7JyxcblxuXHRcdFx0KCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICE9PSBOb1RvbmVNYXBwaW5nICkgPyAnI2RlZmluZSBUT05FX01BUFBJTkcnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMudG9uZU1hcHBpbmcgIT09IE5vVG9uZU1hcHBpbmcgKSA/IFNoYWRlckNodW5rWyAndG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudCcgXSA6ICcnLCAvLyB0aGlzIGNvZGUgaXMgcmVxdWlyZWQgaGVyZSBiZWNhdXNlIGl0IGlzIHVzZWQgYnkgdGhlIHRvbmVNYXBwaW5nKCkgZnVuY3Rpb24gZGVmaW5lZCBiZWxvd1xuXHRcdFx0KCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICE9PSBOb1RvbmVNYXBwaW5nICkgPyBnZXRUb25lTWFwcGluZ0Z1bmN0aW9uKCAndG9uZU1hcHBpbmcnLCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICkgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5kaXRoZXJpbmcgPyAnI2RlZmluZSBESVRIRVJJTkcnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm9wYXF1ZSA/ICcjZGVmaW5lIE9QQVFVRScgOiAnJyxcblxuXHRcdFx0U2hhZGVyQ2h1bmtbICdjb2xvcnNwYWNlX3BhcnNfZnJhZ21lbnQnIF0sIC8vIHRoaXMgY29kZSBpcyByZXF1aXJlZCBoZXJlIGJlY2F1c2UgaXQgaXMgdXNlZCBieSB0aGUgdmFyaW91cyBlbmNvZGluZy9kZWNvZGluZyBmdW5jdGlvbiBkZWZpbmVkIGJlbG93XG5cdFx0XHRnZXRUZXhlbEVuY29kaW5nRnVuY3Rpb24oICdsaW5lYXJUb091dHB1dFRleGVsJywgcGFyYW1ldGVycy5vdXRwdXRDb2xvclNwYWNlICksXG5cdFx0XHRnZXRMdW1pbmFuY2VGdW5jdGlvbigpLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnVzZURlcHRoUGFja2luZyA/ICcjZGVmaW5lIERFUFRIX1BBQ0tJTkcgJyArIHBhcmFtZXRlcnMuZGVwdGhQYWNraW5nIDogJycsXG5cblx0XHRcdCdcXG4nXG5cblx0XHRdLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxuXHR9XG5cblx0dmVydGV4U2hhZGVyID0gcmVzb2x2ZUluY2x1ZGVzKCB2ZXJ0ZXhTaGFkZXIgKTtcblx0dmVydGV4U2hhZGVyID0gcmVwbGFjZUxpZ2h0TnVtcyggdmVydGV4U2hhZGVyLCBwYXJhbWV0ZXJzICk7XG5cdHZlcnRleFNoYWRlciA9IHJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyggdmVydGV4U2hhZGVyLCBwYXJhbWV0ZXJzICk7XG5cblx0ZnJhZ21lbnRTaGFkZXIgPSByZXNvbHZlSW5jbHVkZXMoIGZyYWdtZW50U2hhZGVyICk7XG5cdGZyYWdtZW50U2hhZGVyID0gcmVwbGFjZUxpZ2h0TnVtcyggZnJhZ21lbnRTaGFkZXIsIHBhcmFtZXRlcnMgKTtcblx0ZnJhZ21lbnRTaGFkZXIgPSByZXBsYWNlQ2xpcHBpbmdQbGFuZU51bXMoIGZyYWdtZW50U2hhZGVyLCBwYXJhbWV0ZXJzICk7XG5cblx0dmVydGV4U2hhZGVyID0gdW5yb2xsTG9vcHMoIHZlcnRleFNoYWRlciApO1xuXHRmcmFnbWVudFNoYWRlciA9IHVucm9sbExvb3BzKCBmcmFnbWVudFNoYWRlciApO1xuXG5cdGlmICggcGFyYW1ldGVycy5pc1Jhd1NoYWRlck1hdGVyaWFsICE9PSB0cnVlICkge1xuXG5cdFx0Ly8gR0xTTCAzLjAgY29udmVyc2lvbiBmb3IgYnVpbHQtaW4gbWF0ZXJpYWxzIGFuZCBTaGFkZXJNYXRlcmlhbFxuXG5cdFx0dmVyc2lvblN0cmluZyA9ICcjdmVyc2lvbiAzMDAgZXNcXG4nO1xuXG5cdFx0cHJlZml4VmVydGV4ID0gW1xuXHRcdFx0Y3VzdG9tVmVydGV4RXh0ZW5zaW9ucyxcblx0XHRcdCcjZGVmaW5lIGF0dHJpYnV0ZSBpbicsXG5cdFx0XHQnI2RlZmluZSB2YXJ5aW5nIG91dCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkQgdGV4dHVyZSdcblx0XHRdLmpvaW4oICdcXG4nICkgKyAnXFxuJyArIHByZWZpeFZlcnRleDtcblxuXHRcdHByZWZpeEZyYWdtZW50ID0gW1xuXHRcdFx0JyNkZWZpbmUgdmFyeWluZyBpbicsXG5cdFx0XHQoIHBhcmFtZXRlcnMuZ2xzbFZlcnNpb24gPT09IEdMU0wzICkgPyAnJyA6ICdsYXlvdXQobG9jYXRpb24gPSAwKSBvdXQgaGlnaHAgdmVjNCBwY19mcmFnQ29sb3I7Jyxcblx0XHRcdCggcGFyYW1ldGVycy5nbHNsVmVyc2lvbiA9PT0gR0xTTDMgKSA/ICcnIDogJyNkZWZpbmUgZ2xfRnJhZ0NvbG9yIHBjX2ZyYWdDb2xvcicsXG5cdFx0XHQnI2RlZmluZSBnbF9GcmFnRGVwdGhFWFQgZ2xfRnJhZ0RlcHRoJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmUyRCB0ZXh0dXJlJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmVDdWJlIHRleHR1cmUnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJEUHJvaiB0ZXh0dXJlUHJvaicsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRMb2RFWFQgdGV4dHVyZUxvZCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRQcm9qTG9kRVhUIHRleHR1cmVQcm9qTG9kJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmVDdWJlTG9kRVhUIHRleHR1cmVMb2QnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJER3JhZEVYVCB0ZXh0dXJlR3JhZCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRQcm9qR3JhZEVYVCB0ZXh0dXJlUHJvakdyYWQnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZUN1YmVHcmFkRVhUIHRleHR1cmVHcmFkJ1xuXHRcdF0uam9pbiggJ1xcbicgKSArICdcXG4nICsgcHJlZml4RnJhZ21lbnQ7XG5cblx0fVxuXG5cdGNvbnN0IHZlcnRleEdsc2wgPSB2ZXJzaW9uU3RyaW5nICsgcHJlZml4VmVydGV4ICsgdmVydGV4U2hhZGVyO1xuXHRjb25zdCBmcmFnbWVudEdsc2wgPSB2ZXJzaW9uU3RyaW5nICsgcHJlZml4RnJhZ21lbnQgKyBmcmFnbWVudFNoYWRlcjtcblxuXHQvLyBjb25zb2xlLmxvZyggJypWRVJURVgqJywgdmVydGV4R2xzbCApO1xuXHQvLyBjb25zb2xlLmxvZyggJypGUkFHTUVOVConLCBmcmFnbWVudEdsc2wgKTtcblxuXHRjb25zdCBnbFZlcnRleFNoYWRlciA9IFdlYkdMU2hhZGVyKCBnbCwgZ2wuVkVSVEVYX1NIQURFUiwgdmVydGV4R2xzbCApO1xuXHRjb25zdCBnbEZyYWdtZW50U2hhZGVyID0gV2ViR0xTaGFkZXIoIGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIGZyYWdtZW50R2xzbCApO1xuXG5cdGdsLmF0dGFjaFNoYWRlciggcHJvZ3JhbSwgZ2xWZXJ0ZXhTaGFkZXIgKTtcblx0Z2wuYXR0YWNoU2hhZGVyKCBwcm9ncmFtLCBnbEZyYWdtZW50U2hhZGVyICk7XG5cblx0Ly8gRm9yY2UgYSBwYXJ0aWN1bGFyIGF0dHJpYnV0ZSB0byBpbmRleCAwLlxuXG5cdGlmICggcGFyYW1ldGVycy5pbmRleDBBdHRyaWJ1dGVOYW1lICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRnbC5iaW5kQXR0cmliTG9jYXRpb24oIHByb2dyYW0sIDAsIHBhcmFtZXRlcnMuaW5kZXgwQXR0cmlidXRlTmFtZSApO1xuXG5cdH0gZWxzZSBpZiAoIHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzID09PSB0cnVlICkge1xuXG5cdFx0Ly8gcHJvZ3JhbXMgd2l0aCBtb3JwaFRhcmdldHMgZGlzcGxhY2UgcG9zaXRpb24gb3V0IG9mIGF0dHJpYnV0ZSAwXG5cdFx0Z2wuYmluZEF0dHJpYkxvY2F0aW9uKCBwcm9ncmFtLCAwLCAncG9zaXRpb24nICk7XG5cblx0fVxuXG5cdGdsLmxpbmtQcm9ncmFtKCBwcm9ncmFtICk7XG5cblx0ZnVuY3Rpb24gb25GaXJzdFVzZSggc2VsZiApIHtcblxuXHRcdC8vIGNoZWNrIGZvciBsaW5rIGVycm9yc1xuXHRcdGlmICggcmVuZGVyZXIuZGVidWcuY2hlY2tTaGFkZXJFcnJvcnMgKSB7XG5cblx0XHRcdGNvbnN0IHByb2dyYW1JbmZvTG9nID0gZ2wuZ2V0UHJvZ3JhbUluZm9Mb2coIHByb2dyYW0gKSB8fCAnJztcblx0XHRcdGNvbnN0IHZlcnRleFNoYWRlckluZm9Mb2cgPSBnbC5nZXRTaGFkZXJJbmZvTG9nKCBnbFZlcnRleFNoYWRlciApIHx8ICcnO1xuXHRcdFx0Y29uc3QgZnJhZ21lbnRTaGFkZXJJbmZvTG9nID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyggZ2xGcmFnbWVudFNoYWRlciApIHx8ICcnO1xuXG5cdFx0XHRjb25zdCBwcm9ncmFtTG9nID0gcHJvZ3JhbUluZm9Mb2cudHJpbSgpO1xuXHRcdFx0Y29uc3QgdmVydGV4TG9nID0gdmVydGV4U2hhZGVySW5mb0xvZy50cmltKCk7XG5cdFx0XHRjb25zdCBmcmFnbWVudExvZyA9IGZyYWdtZW50U2hhZGVySW5mb0xvZy50cmltKCk7XG5cblx0XHRcdGxldCBydW5uYWJsZSA9IHRydWU7XG5cdFx0XHRsZXQgaGF2ZURpYWdub3N0aWNzID0gdHJ1ZTtcblxuXHRcdFx0aWYgKCBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKCBwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUyApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRydW5uYWJsZSA9IGZhbHNlO1xuXG5cdFx0XHRcdGlmICggdHlwZW9mIHJlbmRlcmVyLmRlYnVnLm9uU2hhZGVyRXJyb3IgPT09ICdmdW5jdGlvbicgKSB7XG5cblx0XHRcdFx0XHRyZW5kZXJlci5kZWJ1Zy5vblNoYWRlckVycm9yKCBnbCwgcHJvZ3JhbSwgZ2xWZXJ0ZXhTaGFkZXIsIGdsRnJhZ21lbnRTaGFkZXIgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gZGVmYXVsdCBlcnJvciByZXBvcnRpbmdcblxuXHRcdFx0XHRcdGNvbnN0IHZlcnRleEVycm9ycyA9IGdldFNoYWRlckVycm9ycyggZ2wsIGdsVmVydGV4U2hhZGVyLCAndmVydGV4JyApO1xuXHRcdFx0XHRcdGNvbnN0IGZyYWdtZW50RXJyb3JzID0gZ2V0U2hhZGVyRXJyb3JzKCBnbCwgZ2xGcmFnbWVudFNoYWRlciwgJ2ZyYWdtZW50JyApO1xuXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcblx0XHRcdFx0XHRcdCdUSFJFRS5XZWJHTFByb2dyYW06IFNoYWRlciBFcnJvciAnICsgZ2wuZ2V0RXJyb3IoKSArICcgLSAnICtcblx0XHRcdFx0XHRcdCdWQUxJREFURV9TVEFUVVMgJyArIGdsLmdldFByb2dyYW1QYXJhbWV0ZXIoIHByb2dyYW0sIGdsLlZBTElEQVRFX1NUQVRVUyApICsgJ1xcblxcbicgK1xuXHRcdFx0XHRcdFx0J01hdGVyaWFsIE5hbWU6ICcgKyBzZWxmLm5hbWUgKyAnXFxuJyArXG5cdFx0XHRcdFx0XHQnTWF0ZXJpYWwgVHlwZTogJyArIHNlbGYudHlwZSArICdcXG5cXG4nICtcblx0XHRcdFx0XHRcdCdQcm9ncmFtIEluZm8gTG9nOiAnICsgcHJvZ3JhbUxvZyArICdcXG4nICtcblx0XHRcdFx0XHRcdHZlcnRleEVycm9ycyArICdcXG4nICtcblx0XHRcdFx0XHRcdGZyYWdtZW50RXJyb3JzXG5cdFx0XHRcdFx0KTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIHByb2dyYW1Mb2cgIT09ICcnICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUHJvZ3JhbTogUHJvZ3JhbSBJbmZvIExvZzonLCBwcm9ncmFtTG9nICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHZlcnRleExvZyA9PT0gJycgfHwgZnJhZ21lbnRMb2cgPT09ICcnICkge1xuXG5cdFx0XHRcdGhhdmVEaWFnbm9zdGljcyA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGF2ZURpYWdub3N0aWNzICkge1xuXG5cdFx0XHRcdHNlbGYuZGlhZ25vc3RpY3MgPSB7XG5cblx0XHRcdFx0XHRydW5uYWJsZTogcnVubmFibGUsXG5cblx0XHRcdFx0XHRwcm9ncmFtTG9nOiBwcm9ncmFtTG9nLFxuXG5cdFx0XHRcdFx0dmVydGV4U2hhZGVyOiB7XG5cblx0XHRcdFx0XHRcdGxvZzogdmVydGV4TG9nLFxuXHRcdFx0XHRcdFx0cHJlZml4OiBwcmVmaXhWZXJ0ZXhcblxuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRmcmFnbWVudFNoYWRlcjoge1xuXG5cdFx0XHRcdFx0XHRsb2c6IGZyYWdtZW50TG9nLFxuXHRcdFx0XHRcdFx0cHJlZml4OiBwcmVmaXhGcmFnbWVudFxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIENsZWFuIHVwXG5cblx0XHQvLyBDcmFzaGVzIGluIGlPUzkgYW5kIGlPUzEwLiAjMTg0MDJcblx0XHQvLyBnbC5kZXRhY2hTaGFkZXIoIHByb2dyYW0sIGdsVmVydGV4U2hhZGVyICk7XG5cdFx0Ly8gZ2wuZGV0YWNoU2hhZGVyKCBwcm9ncmFtLCBnbEZyYWdtZW50U2hhZGVyICk7XG5cblx0XHRnbC5kZWxldGVTaGFkZXIoIGdsVmVydGV4U2hhZGVyICk7XG5cdFx0Z2wuZGVsZXRlU2hhZGVyKCBnbEZyYWdtZW50U2hhZGVyICk7XG5cblx0XHRjYWNoZWRVbmlmb3JtcyA9IG5ldyBXZWJHTFVuaWZvcm1zKCBnbCwgcHJvZ3JhbSApO1xuXHRcdGNhY2hlZEF0dHJpYnV0ZXMgPSBmZXRjaEF0dHJpYnV0ZUxvY2F0aW9ucyggZ2wsIHByb2dyYW0gKTtcblxuXHR9XG5cblx0Ly8gc2V0IHVwIGNhY2hpbmcgZm9yIHVuaWZvcm0gbG9jYXRpb25zXG5cblx0bGV0IGNhY2hlZFVuaWZvcm1zO1xuXG5cdHRoaXMuZ2V0VW5pZm9ybXMgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIGNhY2hlZFVuaWZvcm1zID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFBvcHVsYXRlcyBjYWNoZWRVbmlmb3JtcyBhbmQgY2FjaGVkQXR0cmlidXRlc1xuXHRcdFx0b25GaXJzdFVzZSggdGhpcyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNhY2hlZFVuaWZvcm1zO1xuXG5cdH07XG5cblx0Ly8gc2V0IHVwIGNhY2hpbmcgZm9yIGF0dHJpYnV0ZSBsb2NhdGlvbnNcblxuXHRsZXQgY2FjaGVkQXR0cmlidXRlcztcblxuXHR0aGlzLmdldEF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIGNhY2hlZEF0dHJpYnV0ZXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gUG9wdWxhdGVzIGNhY2hlZEF0dHJpYnV0ZXMgYW5kIGNhY2hlZFVuaWZvcm1zXG5cdFx0XHRvbkZpcnN0VXNlKCB0aGlzICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY2FjaGVkQXR0cmlidXRlcztcblxuXHR9O1xuXG5cdC8vIGluZGljYXRlIHdoZW4gdGhlIHByb2dyYW0gaXMgcmVhZHkgdG8gYmUgdXNlZC4gaWYgdGhlIEtIUl9wYXJhbGxlbF9zaGFkZXJfY29tcGlsZSBleHRlbnNpb24gaXNuJ3Qgc3VwcG9ydGVkLFxuXHQvLyBmbGFnIHRoZSBwcm9ncmFtIGFzIHJlYWR5IGltbWVkaWF0ZWx5LiBJdCBtYXkgY2F1c2UgYSBzdGFsbCB3aGVuIGl0J3MgZmlyc3QgdXNlZC5cblxuXHRsZXQgcHJvZ3JhbVJlYWR5ID0gKCBwYXJhbWV0ZXJzLnJlbmRlcmVyRXh0ZW5zaW9uUGFyYWxsZWxTaGFkZXJDb21waWxlID09PSBmYWxzZSApO1xuXG5cdHRoaXMuaXNSZWFkeSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggcHJvZ3JhbVJlYWR5ID09PSBmYWxzZSApIHtcblxuXHRcdFx0cHJvZ3JhbVJlYWR5ID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgQ09NUExFVElPTl9TVEFUVVNfS0hSICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcHJvZ3JhbVJlYWR5O1xuXG5cdH07XG5cblx0Ly8gZnJlZSByZXNvdXJjZVxuXG5cdHRoaXMuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGJpbmRpbmdTdGF0ZXMucmVsZWFzZVN0YXRlc09mUHJvZ3JhbSggdGhpcyApO1xuXG5cdFx0Z2wuZGVsZXRlUHJvZ3JhbSggcHJvZ3JhbSApO1xuXHRcdHRoaXMucHJvZ3JhbSA9IHVuZGVmaW5lZDtcblxuXHR9O1xuXG5cdC8vXG5cblx0dGhpcy50eXBlID0gcGFyYW1ldGVycy5zaGFkZXJUeXBlO1xuXHR0aGlzLm5hbWUgPSBwYXJhbWV0ZXJzLnNoYWRlck5hbWU7XG5cdHRoaXMuaWQgPSBwcm9ncmFtSWRDb3VudCArKztcblx0dGhpcy5jYWNoZUtleSA9IGNhY2hlS2V5O1xuXHR0aGlzLnVzZWRUaW1lcyA9IDE7XG5cdHRoaXMucHJvZ3JhbSA9IHByb2dyYW07XG5cdHRoaXMudmVydGV4U2hhZGVyID0gZ2xWZXJ0ZXhTaGFkZXI7XG5cdHRoaXMuZnJhZ21lbnRTaGFkZXIgPSBnbEZyYWdtZW50U2hhZGVyO1xuXG5cdHJldHVybiB0aGlzO1xuXG59XG5cbmxldCBfaWQgPSAwO1xuXG5jbGFzcyBXZWJHTFNoYWRlckNhY2hlIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHRoaXMuc2hhZGVyQ2FjaGUgPSBuZXcgTWFwKCk7XG5cdFx0dGhpcy5tYXRlcmlhbENhY2hlID0gbmV3IE1hcCgpO1xuXG5cdH1cblxuXHR1cGRhdGUoIG1hdGVyaWFsICkge1xuXG5cdFx0Y29uc3QgdmVydGV4U2hhZGVyID0gbWF0ZXJpYWwudmVydGV4U2hhZGVyO1xuXHRcdGNvbnN0IGZyYWdtZW50U2hhZGVyID0gbWF0ZXJpYWwuZnJhZ21lbnRTaGFkZXI7XG5cblx0XHRjb25zdCB2ZXJ0ZXhTaGFkZXJTdGFnZSA9IHRoaXMuX2dldFNoYWRlclN0YWdlKCB2ZXJ0ZXhTaGFkZXIgKTtcblx0XHRjb25zdCBmcmFnbWVudFNoYWRlclN0YWdlID0gdGhpcy5fZ2V0U2hhZGVyU3RhZ2UoIGZyYWdtZW50U2hhZGVyICk7XG5cblx0XHRjb25zdCBtYXRlcmlhbFNoYWRlcnMgPSB0aGlzLl9nZXRTaGFkZXJDYWNoZUZvck1hdGVyaWFsKCBtYXRlcmlhbCApO1xuXG5cdFx0aWYgKCBtYXRlcmlhbFNoYWRlcnMuaGFzKCB2ZXJ0ZXhTaGFkZXJTdGFnZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0bWF0ZXJpYWxTaGFkZXJzLmFkZCggdmVydGV4U2hhZGVyU3RhZ2UgKTtcblx0XHRcdHZlcnRleFNoYWRlclN0YWdlLnVzZWRUaW1lcyArKztcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWxTaGFkZXJzLmhhcyggZnJhZ21lbnRTaGFkZXJTdGFnZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0bWF0ZXJpYWxTaGFkZXJzLmFkZCggZnJhZ21lbnRTaGFkZXJTdGFnZSApO1xuXHRcdFx0ZnJhZ21lbnRTaGFkZXJTdGFnZS51c2VkVGltZXMgKys7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cmVtb3ZlKCBtYXRlcmlhbCApIHtcblxuXHRcdGNvbnN0IG1hdGVyaWFsU2hhZGVycyA9IHRoaXMubWF0ZXJpYWxDYWNoZS5nZXQoIG1hdGVyaWFsICk7XG5cblx0XHRmb3IgKCBjb25zdCBzaGFkZXJTdGFnZSBvZiBtYXRlcmlhbFNoYWRlcnMgKSB7XG5cblx0XHRcdHNoYWRlclN0YWdlLnVzZWRUaW1lcyAtLTtcblxuXHRcdFx0aWYgKCBzaGFkZXJTdGFnZS51c2VkVGltZXMgPT09IDAgKSB0aGlzLnNoYWRlckNhY2hlLmRlbGV0ZSggc2hhZGVyU3RhZ2UuY29kZSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5tYXRlcmlhbENhY2hlLmRlbGV0ZSggbWF0ZXJpYWwgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRWZXJ0ZXhTaGFkZXJJRCggbWF0ZXJpYWwgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZ2V0U2hhZGVyU3RhZ2UoIG1hdGVyaWFsLnZlcnRleFNoYWRlciApLmlkO1xuXG5cdH1cblxuXHRnZXRGcmFnbWVudFNoYWRlcklEKCBtYXRlcmlhbCApIHtcblxuXHRcdHJldHVybiB0aGlzLl9nZXRTaGFkZXJTdGFnZSggbWF0ZXJpYWwuZnJhZ21lbnRTaGFkZXIgKS5pZDtcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuc2hhZGVyQ2FjaGUuY2xlYXIoKTtcblx0XHR0aGlzLm1hdGVyaWFsQ2FjaGUuY2xlYXIoKTtcblxuXHR9XG5cblx0X2dldFNoYWRlckNhY2hlRm9yTWF0ZXJpYWwoIG1hdGVyaWFsICkge1xuXG5cdFx0Y29uc3QgY2FjaGUgPSB0aGlzLm1hdGVyaWFsQ2FjaGU7XG5cdFx0bGV0IHNldCA9IGNhY2hlLmdldCggbWF0ZXJpYWwgKTtcblxuXHRcdGlmICggc2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNldCA9IG5ldyBTZXQoKTtcblx0XHRcdGNhY2hlLnNldCggbWF0ZXJpYWwsIHNldCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNldDtcblxuXHR9XG5cblx0X2dldFNoYWRlclN0YWdlKCBjb2RlICkge1xuXG5cdFx0Y29uc3QgY2FjaGUgPSB0aGlzLnNoYWRlckNhY2hlO1xuXHRcdGxldCBzdGFnZSA9IGNhY2hlLmdldCggY29kZSApO1xuXG5cdFx0aWYgKCBzdGFnZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzdGFnZSA9IG5ldyBXZWJHTFNoYWRlclN0YWdlKCBjb2RlICk7XG5cdFx0XHRjYWNoZS5zZXQoIGNvZGUsIHN0YWdlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc3RhZ2U7XG5cblx0fVxuXG59XG5cbmNsYXNzIFdlYkdMU2hhZGVyU3RhZ2Uge1xuXG5cdGNvbnN0cnVjdG9yKCBjb2RlICkge1xuXG5cdFx0dGhpcy5pZCA9IF9pZCArKztcblxuXHRcdHRoaXMuY29kZSA9IGNvZGU7XG5cdFx0dGhpcy51c2VkVGltZXMgPSAwO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBXZWJHTFByb2dyYW1zKCByZW5kZXJlciwgY3ViZW1hcHMsIGN1YmV1dm1hcHMsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcywgYmluZGluZ1N0YXRlcywgY2xpcHBpbmcgKSB7XG5cblx0Y29uc3QgX3Byb2dyYW1MYXllcnMgPSBuZXcgTGF5ZXJzKCk7XG5cdGNvbnN0IF9jdXN0b21TaGFkZXJzID0gbmV3IFdlYkdMU2hhZGVyQ2FjaGUoKTtcblx0Y29uc3QgX2FjdGl2ZUNoYW5uZWxzID0gbmV3IFNldCgpO1xuXHRjb25zdCBwcm9ncmFtcyA9IFtdO1xuXG5cdGNvbnN0IGxvZ2FyaXRobWljRGVwdGhCdWZmZXIgPSBjYXBhYmlsaXRpZXMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjtcblx0Y29uc3QgU1VQUE9SVFNfVkVSVEVYX1RFWFRVUkVTID0gY2FwYWJpbGl0aWVzLnZlcnRleFRleHR1cmVzO1xuXG5cdGxldCBwcmVjaXNpb24gPSBjYXBhYmlsaXRpZXMucHJlY2lzaW9uO1xuXG5cdGNvbnN0IHNoYWRlcklEcyA9IHtcblx0XHRNZXNoRGVwdGhNYXRlcmlhbDogJ2RlcHRoJyxcblx0XHRNZXNoRGlzdGFuY2VNYXRlcmlhbDogJ2Rpc3RhbmNlUkdCQScsXG5cdFx0TWVzaE5vcm1hbE1hdGVyaWFsOiAnbm9ybWFsJyxcblx0XHRNZXNoQmFzaWNNYXRlcmlhbDogJ2Jhc2ljJyxcblx0XHRNZXNoTGFtYmVydE1hdGVyaWFsOiAnbGFtYmVydCcsXG5cdFx0TWVzaFBob25nTWF0ZXJpYWw6ICdwaG9uZycsXG5cdFx0TWVzaFRvb25NYXRlcmlhbDogJ3Rvb24nLFxuXHRcdE1lc2hTdGFuZGFyZE1hdGVyaWFsOiAncGh5c2ljYWwnLFxuXHRcdE1lc2hQaHlzaWNhbE1hdGVyaWFsOiAncGh5c2ljYWwnLFxuXHRcdE1lc2hNYXRjYXBNYXRlcmlhbDogJ21hdGNhcCcsXG5cdFx0TGluZUJhc2ljTWF0ZXJpYWw6ICdiYXNpYycsXG5cdFx0TGluZURhc2hlZE1hdGVyaWFsOiAnZGFzaGVkJyxcblx0XHRQb2ludHNNYXRlcmlhbDogJ3BvaW50cycsXG5cdFx0U2hhZG93TWF0ZXJpYWw6ICdzaGFkb3cnLFxuXHRcdFNwcml0ZU1hdGVyaWFsOiAnc3ByaXRlJ1xuXHR9O1xuXG5cdGZ1bmN0aW9uIGdldENoYW5uZWwoIHZhbHVlICkge1xuXG5cdFx0X2FjdGl2ZUNoYW5uZWxzLmFkZCggdmFsdWUgKTtcblxuXHRcdGlmICggdmFsdWUgPT09IDAgKSByZXR1cm4gJ3V2JztcblxuXHRcdHJldHVybiBgdXYkeyB2YWx1ZSB9YDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0UGFyYW1ldGVycyggbWF0ZXJpYWwsIGxpZ2h0cywgc2hhZG93cywgc2NlbmUsIG9iamVjdCApIHtcblxuXHRcdGNvbnN0IGZvZyA9IHNjZW5lLmZvZztcblx0XHRjb25zdCBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcblx0XHRjb25zdCBlbnZpcm9ubWVudCA9IG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPyBzY2VuZS5lbnZpcm9ubWVudCA6IG51bGw7XG5cblx0XHRjb25zdCBlbnZNYXAgPSAoIG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPyBjdWJldXZtYXBzIDogY3ViZW1hcHMgKS5nZXQoIG1hdGVyaWFsLmVudk1hcCB8fCBlbnZpcm9ubWVudCApO1xuXHRcdGNvbnN0IGVudk1hcEN1YmVVVkhlaWdodCA9ICggISEgZW52TWFwICkgJiYgKCBlbnZNYXAubWFwcGluZyA9PT0gQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcgKSA/IGVudk1hcC5pbWFnZS5oZWlnaHQgOiBudWxsO1xuXG5cdFx0Y29uc3Qgc2hhZGVySUQgPSBzaGFkZXJJRHNbIG1hdGVyaWFsLnR5cGUgXTtcblxuXHRcdC8vIGhldXJpc3RpY3MgdG8gY3JlYXRlIHNoYWRlciBwYXJhbWV0ZXJzIGFjY29yZGluZyB0byBsaWdodHMgaW4gdGhlIHNjZW5lXG5cdFx0Ly8gKG5vdCB0byBibG93IG92ZXIgbWF4TGlnaHRzIGJ1ZGdldClcblxuXHRcdGlmICggbWF0ZXJpYWwucHJlY2lzaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRwcmVjaXNpb24gPSBjYXBhYmlsaXRpZXMuZ2V0TWF4UHJlY2lzaW9uKCBtYXRlcmlhbC5wcmVjaXNpb24gKTtcblxuXHRcdFx0aWYgKCBwcmVjaXNpb24gIT09IG1hdGVyaWFsLnByZWNpc2lvbiApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFByb2dyYW0uZ2V0UGFyYW1ldGVyczonLCBtYXRlcmlhbC5wcmVjaXNpb24sICdub3Qgc3VwcG9ydGVkLCB1c2luZycsIHByZWNpc2lvbiwgJ2luc3RlYWQuJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gfHwgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCB8fCBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3I7XG5cdFx0Y29uc3QgbW9ycGhUYXJnZXRzQ291bnQgPSAoIG1vcnBoQXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSA/IG1vcnBoQXR0cmlidXRlLmxlbmd0aCA6IDA7XG5cblx0XHRsZXQgbW9ycGhUZXh0dXJlU3RyaWRlID0gMDtcblxuXHRcdGlmICggZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uICE9PSB1bmRlZmluZWQgKSBtb3JwaFRleHR1cmVTdHJpZGUgPSAxO1xuXHRcdGlmICggZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCAhPT0gdW5kZWZpbmVkICkgbW9ycGhUZXh0dXJlU3RyaWRlID0gMjtcblx0XHRpZiAoIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5jb2xvciAhPT0gdW5kZWZpbmVkICkgbW9ycGhUZXh0dXJlU3RyaWRlID0gMztcblxuXHRcdC8vXG5cblx0XHRsZXQgdmVydGV4U2hhZGVyLCBmcmFnbWVudFNoYWRlcjtcblx0XHRsZXQgY3VzdG9tVmVydGV4U2hhZGVySUQsIGN1c3RvbUZyYWdtZW50U2hhZGVySUQ7XG5cblx0XHRpZiAoIHNoYWRlcklEICkge1xuXG5cdFx0XHRjb25zdCBzaGFkZXIgPSBTaGFkZXJMaWJbIHNoYWRlcklEIF07XG5cblx0XHRcdHZlcnRleFNoYWRlciA9IHNoYWRlci52ZXJ0ZXhTaGFkZXI7XG5cdFx0XHRmcmFnbWVudFNoYWRlciA9IHNoYWRlci5mcmFnbWVudFNoYWRlcjtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHZlcnRleFNoYWRlciA9IG1hdGVyaWFsLnZlcnRleFNoYWRlcjtcblx0XHRcdGZyYWdtZW50U2hhZGVyID0gbWF0ZXJpYWwuZnJhZ21lbnRTaGFkZXI7XG5cblx0XHRcdF9jdXN0b21TaGFkZXJzLnVwZGF0ZSggbWF0ZXJpYWwgKTtcblxuXHRcdFx0Y3VzdG9tVmVydGV4U2hhZGVySUQgPSBfY3VzdG9tU2hhZGVycy5nZXRWZXJ0ZXhTaGFkZXJJRCggbWF0ZXJpYWwgKTtcblx0XHRcdGN1c3RvbUZyYWdtZW50U2hhZGVySUQgPSBfY3VzdG9tU2hhZGVycy5nZXRGcmFnbWVudFNoYWRlcklEKCBtYXRlcmlhbCApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xuXHRcdGNvbnN0IHJldmVyc2VkRGVwdGhCdWZmZXIgPSByZW5kZXJlci5zdGF0ZS5idWZmZXJzLmRlcHRoLmdldFJldmVyc2VkKCk7XG5cblx0XHRjb25zdCBJU19JTlNUQU5DRURNRVNIID0gb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCA9PT0gdHJ1ZTtcblx0XHRjb25zdCBJU19CQVRDSEVETUVTSCA9IG9iamVjdC5pc0JhdGNoZWRNZXNoID09PSB0cnVlO1xuXG5cdFx0Y29uc3QgSEFTX01BUCA9ICEhIG1hdGVyaWFsLm1hcDtcblx0XHRjb25zdCBIQVNfTUFUQ0FQID0gISEgbWF0ZXJpYWwubWF0Y2FwO1xuXHRcdGNvbnN0IEhBU19FTlZNQVAgPSAhISBlbnZNYXA7XG5cdFx0Y29uc3QgSEFTX0FPTUFQID0gISEgbWF0ZXJpYWwuYW9NYXA7XG5cdFx0Y29uc3QgSEFTX0xJR0hUTUFQID0gISEgbWF0ZXJpYWwubGlnaHRNYXA7XG5cdFx0Y29uc3QgSEFTX0JVTVBNQVAgPSAhISBtYXRlcmlhbC5idW1wTWFwO1xuXHRcdGNvbnN0IEhBU19OT1JNQUxNQVAgPSAhISBtYXRlcmlhbC5ub3JtYWxNYXA7XG5cdFx0Y29uc3QgSEFTX0RJU1BMQUNFTUVOVE1BUCA9ICEhIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcblx0XHRjb25zdCBIQVNfRU1JU1NJVkVNQVAgPSAhISBtYXRlcmlhbC5lbWlzc2l2ZU1hcDtcblxuXHRcdGNvbnN0IEhBU19NRVRBTE5FU1NNQVAgPSAhISBtYXRlcmlhbC5tZXRhbG5lc3NNYXA7XG5cdFx0Y29uc3QgSEFTX1JPVUdITkVTU01BUCA9ICEhIG1hdGVyaWFsLnJvdWdobmVzc01hcDtcblxuXHRcdGNvbnN0IEhBU19BTklTT1RST1BZID0gbWF0ZXJpYWwuYW5pc290cm9weSA+IDA7XG5cdFx0Y29uc3QgSEFTX0NMRUFSQ09BVCA9IG1hdGVyaWFsLmNsZWFyY29hdCA+IDA7XG5cdFx0Y29uc3QgSEFTX0RJU1BFUlNJT04gPSBtYXRlcmlhbC5kaXNwZXJzaW9uID4gMDtcblx0XHRjb25zdCBIQVNfSVJJREVTQ0VOQ0UgPSBtYXRlcmlhbC5pcmlkZXNjZW5jZSA+IDA7XG5cdFx0Y29uc3QgSEFTX1NIRUVOID0gbWF0ZXJpYWwuc2hlZW4gPiAwO1xuXHRcdGNvbnN0IEhBU19UUkFOU01JU1NJT04gPSBtYXRlcmlhbC50cmFuc21pc3Npb24gPiAwO1xuXG5cdFx0Y29uc3QgSEFTX0FOSVNPVFJPUFlNQVAgPSBIQVNfQU5JU09UUk9QWSAmJiAhISBtYXRlcmlhbC5hbmlzb3Ryb3B5TWFwO1xuXG5cdFx0Y29uc3QgSEFTX0NMRUFSQ09BVE1BUCA9IEhBU19DTEVBUkNPQVQgJiYgISEgbWF0ZXJpYWwuY2xlYXJjb2F0TWFwO1xuXHRcdGNvbnN0IEhBU19DTEVBUkNPQVRfTk9STUFMTUFQID0gSEFTX0NMRUFSQ09BVCAmJiAhISBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxNYXA7XG5cdFx0Y29uc3QgSEFTX0NMRUFSQ09BVF9ST1VHSE5FU1NNQVAgPSBIQVNfQ0xFQVJDT0FUICYmICEhIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzc01hcDtcblxuXHRcdGNvbnN0IEhBU19JUklERVNDRU5DRU1BUCA9IEhBU19JUklERVNDRU5DRSAmJiAhISBtYXRlcmlhbC5pcmlkZXNjZW5jZU1hcDtcblx0XHRjb25zdCBIQVNfSVJJREVTQ0VOQ0VfVEhJQ0tORVNTTUFQID0gSEFTX0lSSURFU0NFTkNFICYmICEhIG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwO1xuXG5cdFx0Y29uc3QgSEFTX1NIRUVOX0NPTE9STUFQID0gSEFTX1NIRUVOICYmICEhIG1hdGVyaWFsLnNoZWVuQ29sb3JNYXA7XG5cdFx0Y29uc3QgSEFTX1NIRUVOX1JPVUdITkVTU01BUCA9IEhBU19TSEVFTiAmJiAhISBtYXRlcmlhbC5zaGVlblJvdWdobmVzc01hcDtcblxuXHRcdGNvbnN0IEhBU19TUEVDVUxBUk1BUCA9ICEhIG1hdGVyaWFsLnNwZWN1bGFyTWFwO1xuXHRcdGNvbnN0IEhBU19TUEVDVUxBUl9DT0xPUk1BUCA9ICEhIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3JNYXA7XG5cdFx0Y29uc3QgSEFTX1NQRUNVTEFSX0lOVEVOU0lUWU1BUCA9ICEhIG1hdGVyaWFsLnNwZWN1bGFySW50ZW5zaXR5TWFwO1xuXG5cdFx0Y29uc3QgSEFTX1RSQU5TTUlTU0lPTk1BUCA9IEhBU19UUkFOU01JU1NJT04gJiYgISEgbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwO1xuXHRcdGNvbnN0IEhBU19USElDS05FU1NNQVAgPSBIQVNfVFJBTlNNSVNTSU9OICYmICEhIG1hdGVyaWFsLnRoaWNrbmVzc01hcDtcblxuXHRcdGNvbnN0IEhBU19HUkFESUVOVE1BUCA9ICEhIG1hdGVyaWFsLmdyYWRpZW50TWFwO1xuXG5cdFx0Y29uc3QgSEFTX0FMUEhBTUFQID0gISEgbWF0ZXJpYWwuYWxwaGFNYXA7XG5cblx0XHRjb25zdCBIQVNfQUxQSEFURVNUID0gbWF0ZXJpYWwuYWxwaGFUZXN0ID4gMDtcblxuXHRcdGNvbnN0IEhBU19BTFBIQUhBU0ggPSAhISBtYXRlcmlhbC5hbHBoYUhhc2g7XG5cblx0XHRjb25zdCBIQVNfRVhURU5TSU9OUyA9ICEhIG1hdGVyaWFsLmV4dGVuc2lvbnM7XG5cblx0XHRsZXQgdG9uZU1hcHBpbmcgPSBOb1RvbmVNYXBwaW5nO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC50b25lTWFwcGVkICkge1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRSZW5kZXJUYXJnZXQgPT09IG51bGwgfHwgY3VycmVudFJlbmRlclRhcmdldC5pc1hSUmVuZGVyVGFyZ2V0ID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHRvbmVNYXBwaW5nID0gcmVuZGVyZXIudG9uZU1hcHBpbmc7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IHBhcmFtZXRlcnMgPSB7XG5cblx0XHRcdHNoYWRlcklEOiBzaGFkZXJJRCxcblx0XHRcdHNoYWRlclR5cGU6IG1hdGVyaWFsLnR5cGUsXG5cdFx0XHRzaGFkZXJOYW1lOiBtYXRlcmlhbC5uYW1lLFxuXG5cdFx0XHR2ZXJ0ZXhTaGFkZXI6IHZlcnRleFNoYWRlcixcblx0XHRcdGZyYWdtZW50U2hhZGVyOiBmcmFnbWVudFNoYWRlcixcblx0XHRcdGRlZmluZXM6IG1hdGVyaWFsLmRlZmluZXMsXG5cblx0XHRcdGN1c3RvbVZlcnRleFNoYWRlcklEOiBjdXN0b21WZXJ0ZXhTaGFkZXJJRCxcblx0XHRcdGN1c3RvbUZyYWdtZW50U2hhZGVySUQ6IGN1c3RvbUZyYWdtZW50U2hhZGVySUQsXG5cblx0XHRcdGlzUmF3U2hhZGVyTWF0ZXJpYWw6IG1hdGVyaWFsLmlzUmF3U2hhZGVyTWF0ZXJpYWwgPT09IHRydWUsXG5cdFx0XHRnbHNsVmVyc2lvbjogbWF0ZXJpYWwuZ2xzbFZlcnNpb24sXG5cblx0XHRcdHByZWNpc2lvbjogcHJlY2lzaW9uLFxuXG5cdFx0XHRiYXRjaGluZzogSVNfQkFUQ0hFRE1FU0gsXG5cdFx0XHRiYXRjaGluZ0NvbG9yOiBJU19CQVRDSEVETUVTSCAmJiBvYmplY3QuX2NvbG9yc1RleHR1cmUgIT09IG51bGwsXG5cdFx0XHRpbnN0YW5jaW5nOiBJU19JTlNUQU5DRURNRVNILFxuXHRcdFx0aW5zdGFuY2luZ0NvbG9yOiBJU19JTlNUQU5DRURNRVNIICYmIG9iamVjdC5pbnN0YW5jZUNvbG9yICE9PSBudWxsLFxuXHRcdFx0aW5zdGFuY2luZ01vcnBoOiBJU19JTlNUQU5DRURNRVNIICYmIG9iamVjdC5tb3JwaFRleHR1cmUgIT09IG51bGwsXG5cblx0XHRcdHN1cHBvcnRzVmVydGV4VGV4dHVyZXM6IFNVUFBPUlRTX1ZFUlRFWF9URVhUVVJFUyxcblx0XHRcdG91dHB1dENvbG9yU3BhY2U6ICggY3VycmVudFJlbmRlclRhcmdldCA9PT0gbnVsbCApID8gcmVuZGVyZXIub3V0cHV0Q29sb3JTcGFjZSA6ICggY3VycmVudFJlbmRlclRhcmdldC5pc1hSUmVuZGVyVGFyZ2V0ID09PSB0cnVlID8gY3VycmVudFJlbmRlclRhcmdldC50ZXh0dXJlLmNvbG9yU3BhY2UgOiBMaW5lYXJTUkdCQ29sb3JTcGFjZSApLFxuXHRcdFx0YWxwaGFUb0NvdmVyYWdlOiAhISBtYXRlcmlhbC5hbHBoYVRvQ292ZXJhZ2UsXG5cblx0XHRcdG1hcDogSEFTX01BUCxcblx0XHRcdG1hdGNhcDogSEFTX01BVENBUCxcblx0XHRcdGVudk1hcDogSEFTX0VOVk1BUCxcblx0XHRcdGVudk1hcE1vZGU6IEhBU19FTlZNQVAgJiYgZW52TWFwLm1hcHBpbmcsXG5cdFx0XHRlbnZNYXBDdWJlVVZIZWlnaHQ6IGVudk1hcEN1YmVVVkhlaWdodCxcblx0XHRcdGFvTWFwOiBIQVNfQU9NQVAsXG5cdFx0XHRsaWdodE1hcDogSEFTX0xJR0hUTUFQLFxuXHRcdFx0YnVtcE1hcDogSEFTX0JVTVBNQVAsXG5cdFx0XHRub3JtYWxNYXA6IEhBU19OT1JNQUxNQVAsXG5cdFx0XHRkaXNwbGFjZW1lbnRNYXA6IFNVUFBPUlRTX1ZFUlRFWF9URVhUVVJFUyAmJiBIQVNfRElTUExBQ0VNRU5UTUFQLFxuXHRcdFx0ZW1pc3NpdmVNYXA6IEhBU19FTUlTU0lWRU1BUCxcblxuXHRcdFx0bm9ybWFsTWFwT2JqZWN0U3BhY2U6IEhBU19OT1JNQUxNQVAgJiYgbWF0ZXJpYWwubm9ybWFsTWFwVHlwZSA9PT0gT2JqZWN0U3BhY2VOb3JtYWxNYXAsXG5cdFx0XHRub3JtYWxNYXBUYW5nZW50U3BhY2U6IEhBU19OT1JNQUxNQVAgJiYgbWF0ZXJpYWwubm9ybWFsTWFwVHlwZSA9PT0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwLFxuXG5cdFx0XHRtZXRhbG5lc3NNYXA6IEhBU19NRVRBTE5FU1NNQVAsXG5cdFx0XHRyb3VnaG5lc3NNYXA6IEhBU19ST1VHSE5FU1NNQVAsXG5cblx0XHRcdGFuaXNvdHJvcHk6IEhBU19BTklTT1RST1BZLFxuXHRcdFx0YW5pc290cm9weU1hcDogSEFTX0FOSVNPVFJPUFlNQVAsXG5cblx0XHRcdGNsZWFyY29hdDogSEFTX0NMRUFSQ09BVCxcblx0XHRcdGNsZWFyY29hdE1hcDogSEFTX0NMRUFSQ09BVE1BUCxcblx0XHRcdGNsZWFyY29hdE5vcm1hbE1hcDogSEFTX0NMRUFSQ09BVF9OT1JNQUxNQVAsXG5cdFx0XHRjbGVhcmNvYXRSb3VnaG5lc3NNYXA6IEhBU19DTEVBUkNPQVRfUk9VR0hORVNTTUFQLFxuXG5cdFx0XHRkaXNwZXJzaW9uOiBIQVNfRElTUEVSU0lPTixcblxuXHRcdFx0aXJpZGVzY2VuY2U6IEhBU19JUklERVNDRU5DRSxcblx0XHRcdGlyaWRlc2NlbmNlTWFwOiBIQVNfSVJJREVTQ0VOQ0VNQVAsXG5cdFx0XHRpcmlkZXNjZW5jZVRoaWNrbmVzc01hcDogSEFTX0lSSURFU0NFTkNFX1RISUNLTkVTU01BUCxcblxuXHRcdFx0c2hlZW46IEhBU19TSEVFTixcblx0XHRcdHNoZWVuQ29sb3JNYXA6IEhBU19TSEVFTl9DT0xPUk1BUCxcblx0XHRcdHNoZWVuUm91Z2huZXNzTWFwOiBIQVNfU0hFRU5fUk9VR0hORVNTTUFQLFxuXG5cdFx0XHRzcGVjdWxhck1hcDogSEFTX1NQRUNVTEFSTUFQLFxuXHRcdFx0c3BlY3VsYXJDb2xvck1hcDogSEFTX1NQRUNVTEFSX0NPTE9STUFQLFxuXHRcdFx0c3BlY3VsYXJJbnRlbnNpdHlNYXA6IEhBU19TUEVDVUxBUl9JTlRFTlNJVFlNQVAsXG5cblx0XHRcdHRyYW5zbWlzc2lvbjogSEFTX1RSQU5TTUlTU0lPTixcblx0XHRcdHRyYW5zbWlzc2lvbk1hcDogSEFTX1RSQU5TTUlTU0lPTk1BUCxcblx0XHRcdHRoaWNrbmVzc01hcDogSEFTX1RISUNLTkVTU01BUCxcblxuXHRcdFx0Z3JhZGllbnRNYXA6IEhBU19HUkFESUVOVE1BUCxcblxuXHRcdFx0b3BhcXVlOiBtYXRlcmlhbC50cmFuc3BhcmVudCA9PT0gZmFsc2UgJiYgbWF0ZXJpYWwuYmxlbmRpbmcgPT09IE5vcm1hbEJsZW5kaW5nICYmIG1hdGVyaWFsLmFscGhhVG9Db3ZlcmFnZSA9PT0gZmFsc2UsXG5cblx0XHRcdGFscGhhTWFwOiBIQVNfQUxQSEFNQVAsXG5cdFx0XHRhbHBoYVRlc3Q6IEhBU19BTFBIQVRFU1QsXG5cdFx0XHRhbHBoYUhhc2g6IEhBU19BTFBIQUhBU0gsXG5cblx0XHRcdGNvbWJpbmU6IG1hdGVyaWFsLmNvbWJpbmUsXG5cblx0XHRcdC8vXG5cblx0XHRcdG1hcFV2OiBIQVNfTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLm1hcC5jaGFubmVsICksXG5cdFx0XHRhb01hcFV2OiBIQVNfQU9NQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuYW9NYXAuY2hhbm5lbCApLFxuXHRcdFx0bGlnaHRNYXBVdjogSEFTX0xJR0hUTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLmxpZ2h0TWFwLmNoYW5uZWwgKSxcblx0XHRcdGJ1bXBNYXBVdjogSEFTX0JVTVBNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuYnVtcE1hcC5jaGFubmVsICksXG5cdFx0XHRub3JtYWxNYXBVdjogSEFTX05PUk1BTE1BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5ub3JtYWxNYXAuY2hhbm5lbCApLFxuXHRcdFx0ZGlzcGxhY2VtZW50TWFwVXY6IEhBU19ESVNQTEFDRU1FTlRNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwLmNoYW5uZWwgKSxcblx0XHRcdGVtaXNzaXZlTWFwVXY6IEhBU19FTUlTU0lWRU1BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcC5jaGFubmVsICksXG5cblx0XHRcdG1ldGFsbmVzc01hcFV2OiBIQVNfTUVUQUxORVNTTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLm1ldGFsbmVzc01hcC5jaGFubmVsICksXG5cdFx0XHRyb3VnaG5lc3NNYXBVdjogSEFTX1JPVUdITkVTU01BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5yb3VnaG5lc3NNYXAuY2hhbm5lbCApLFxuXG5cdFx0XHRhbmlzb3Ryb3B5TWFwVXY6IEhBU19BTklTT1RST1BZTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLmFuaXNvdHJvcHlNYXAuY2hhbm5lbCApLFxuXG5cdFx0XHRjbGVhcmNvYXRNYXBVdjogSEFTX0NMRUFSQ09BVE1BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5jbGVhcmNvYXRNYXAuY2hhbm5lbCApLFxuXHRcdFx0Y2xlYXJjb2F0Tm9ybWFsTWFwVXY6IEhBU19DTEVBUkNPQVRfTk9STUFMTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcC5jaGFubmVsICksXG5cdFx0XHRjbGVhcmNvYXRSb3VnaG5lc3NNYXBVdjogSEFTX0NMRUFSQ09BVF9ST1VHSE5FU1NNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzTWFwLmNoYW5uZWwgKSxcblxuXHRcdFx0aXJpZGVzY2VuY2VNYXBVdjogSEFTX0lSSURFU0NFTkNFTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLmlyaWRlc2NlbmNlTWFwLmNoYW5uZWwgKSxcblx0XHRcdGlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwVXY6IEhBU19JUklERVNDRU5DRV9USElDS05FU1NNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3NNYXAuY2hhbm5lbCApLFxuXG5cdFx0XHRzaGVlbkNvbG9yTWFwVXY6IEhBU19TSEVFTl9DT0xPUk1BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5zaGVlbkNvbG9yTWFwLmNoYW5uZWwgKSxcblx0XHRcdHNoZWVuUm91Z2huZXNzTWFwVXY6IEhBU19TSEVFTl9ST1VHSE5FU1NNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3NNYXAuY2hhbm5lbCApLFxuXG5cdFx0XHRzcGVjdWxhck1hcFV2OiBIQVNfU1BFQ1VMQVJNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuc3BlY3VsYXJNYXAuY2hhbm5lbCApLFxuXHRcdFx0c3BlY3VsYXJDb2xvck1hcFV2OiBIQVNfU1BFQ1VMQVJfQ09MT1JNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuc3BlY3VsYXJDb2xvck1hcC5jaGFubmVsICksXG5cdFx0XHRzcGVjdWxhckludGVuc2l0eU1hcFV2OiBIQVNfU1BFQ1VMQVJfSU5URU5TSVRZTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLnNwZWN1bGFySW50ZW5zaXR5TWFwLmNoYW5uZWwgKSxcblxuXHRcdFx0dHJhbnNtaXNzaW9uTWFwVXY6IEhBU19UUkFOU01JU1NJT05NQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwLmNoYW5uZWwgKSxcblx0XHRcdHRoaWNrbmVzc01hcFV2OiBIQVNfVEhJQ0tORVNTTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLnRoaWNrbmVzc01hcC5jaGFubmVsICksXG5cblx0XHRcdGFscGhhTWFwVXY6IEhBU19BTFBIQU1BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5hbHBoYU1hcC5jaGFubmVsICksXG5cblx0XHRcdC8vXG5cblx0XHRcdHZlcnRleFRhbmdlbnRzOiAhISBnZW9tZXRyeS5hdHRyaWJ1dGVzLnRhbmdlbnQgJiYgKCBIQVNfTk9STUFMTUFQIHx8IEhBU19BTklTT1RST1BZICksXG5cdFx0XHR2ZXJ0ZXhDb2xvcnM6IG1hdGVyaWFsLnZlcnRleENvbG9ycyxcblx0XHRcdHZlcnRleEFscGhhczogbWF0ZXJpYWwudmVydGV4Q29sb3JzID09PSB0cnVlICYmICEhIGdlb21ldHJ5LmF0dHJpYnV0ZXMuY29sb3IgJiYgZ2VvbWV0cnkuYXR0cmlidXRlcy5jb2xvci5pdGVtU2l6ZSA9PT0gNCxcblxuXHRcdFx0cG9pbnRzVXZzOiBvYmplY3QuaXNQb2ludHMgPT09IHRydWUgJiYgISEgZ2VvbWV0cnkuYXR0cmlidXRlcy51diAmJiAoIEhBU19NQVAgfHwgSEFTX0FMUEhBTUFQICksXG5cblx0XHRcdGZvZzogISEgZm9nLFxuXHRcdFx0dXNlRm9nOiBtYXRlcmlhbC5mb2cgPT09IHRydWUsXG5cdFx0XHRmb2dFeHAyOiAoICEhIGZvZyAmJiBmb2cuaXNGb2dFeHAyICksXG5cblx0XHRcdGZsYXRTaGFkaW5nOiAoIG1hdGVyaWFsLmZsYXRTaGFkaW5nID09PSB0cnVlICYmIG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gZmFsc2UgKSxcblxuXHRcdFx0c2l6ZUF0dGVudWF0aW9uOiBtYXRlcmlhbC5zaXplQXR0ZW51YXRpb24gPT09IHRydWUsXG5cdFx0XHRsb2dhcml0aG1pY0RlcHRoQnVmZmVyOiBsb2dhcml0aG1pY0RlcHRoQnVmZmVyLFxuXHRcdFx0cmV2ZXJzZWREZXB0aEJ1ZmZlcjogcmV2ZXJzZWREZXB0aEJ1ZmZlcixcblxuXHRcdFx0c2tpbm5pbmc6IG9iamVjdC5pc1NraW5uZWRNZXNoID09PSB0cnVlLFxuXG5cdFx0XHRtb3JwaFRhcmdldHM6IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbiAhPT0gdW5kZWZpbmVkLFxuXHRcdFx0bW9ycGhOb3JtYWxzOiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMubm9ybWFsICE9PSB1bmRlZmluZWQsXG5cdFx0XHRtb3JwaENvbG9yczogZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLmNvbG9yICE9PSB1bmRlZmluZWQsXG5cdFx0XHRtb3JwaFRhcmdldHNDb3VudDogbW9ycGhUYXJnZXRzQ291bnQsXG5cdFx0XHRtb3JwaFRleHR1cmVTdHJpZGU6IG1vcnBoVGV4dHVyZVN0cmlkZSxcblxuXHRcdFx0bnVtRGlyTGlnaHRzOiBsaWdodHMuZGlyZWN0aW9uYWwubGVuZ3RoLFxuXHRcdFx0bnVtUG9pbnRMaWdodHM6IGxpZ2h0cy5wb2ludC5sZW5ndGgsXG5cdFx0XHRudW1TcG90TGlnaHRzOiBsaWdodHMuc3BvdC5sZW5ndGgsXG5cdFx0XHRudW1TcG90TGlnaHRNYXBzOiBsaWdodHMuc3BvdExpZ2h0TWFwLmxlbmd0aCxcblx0XHRcdG51bVJlY3RBcmVhTGlnaHRzOiBsaWdodHMucmVjdEFyZWEubGVuZ3RoLFxuXHRcdFx0bnVtSGVtaUxpZ2h0czogbGlnaHRzLmhlbWkubGVuZ3RoLFxuXG5cdFx0XHRudW1EaXJMaWdodFNoYWRvd3M6IGxpZ2h0cy5kaXJlY3Rpb25hbFNoYWRvd01hcC5sZW5ndGgsXG5cdFx0XHRudW1Qb2ludExpZ2h0U2hhZG93czogbGlnaHRzLnBvaW50U2hhZG93TWFwLmxlbmd0aCxcblx0XHRcdG51bVNwb3RMaWdodFNoYWRvd3M6IGxpZ2h0cy5zcG90U2hhZG93TWFwLmxlbmd0aCxcblx0XHRcdG51bVNwb3RMaWdodFNoYWRvd3NXaXRoTWFwczogbGlnaHRzLm51bVNwb3RMaWdodFNoYWRvd3NXaXRoTWFwcyxcblxuXHRcdFx0bnVtTGlnaHRQcm9iZXM6IGxpZ2h0cy5udW1MaWdodFByb2JlcyxcblxuXHRcdFx0bnVtQ2xpcHBpbmdQbGFuZXM6IGNsaXBwaW5nLm51bVBsYW5lcyxcblx0XHRcdG51bUNsaXBJbnRlcnNlY3Rpb246IGNsaXBwaW5nLm51bUludGVyc2VjdGlvbixcblxuXHRcdFx0ZGl0aGVyaW5nOiBtYXRlcmlhbC5kaXRoZXJpbmcsXG5cblx0XHRcdHNoYWRvd01hcEVuYWJsZWQ6IHJlbmRlcmVyLnNoYWRvd01hcC5lbmFibGVkICYmIHNoYWRvd3MubGVuZ3RoID4gMCxcblx0XHRcdHNoYWRvd01hcFR5cGU6IHJlbmRlcmVyLnNoYWRvd01hcC50eXBlLFxuXG5cdFx0XHR0b25lTWFwcGluZzogdG9uZU1hcHBpbmcsXG5cblx0XHRcdGRlY29kZVZpZGVvVGV4dHVyZTogSEFTX01BUCAmJiAoIG1hdGVyaWFsLm1hcC5pc1ZpZGVvVGV4dHVyZSA9PT0gdHJ1ZSApICYmICggQ29sb3JNYW5hZ2VtZW50LmdldFRyYW5zZmVyKCBtYXRlcmlhbC5tYXAuY29sb3JTcGFjZSApID09PSBTUkdCVHJhbnNmZXIgKSxcblx0XHRcdGRlY29kZVZpZGVvVGV4dHVyZUVtaXNzaXZlOiBIQVNfRU1JU1NJVkVNQVAgJiYgKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcC5pc1ZpZGVvVGV4dHVyZSA9PT0gdHJ1ZSApICYmICggQ29sb3JNYW5hZ2VtZW50LmdldFRyYW5zZmVyKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcC5jb2xvclNwYWNlICkgPT09IFNSR0JUcmFuc2ZlciApLFxuXG5cdFx0XHRwcmVtdWx0aXBsaWVkQWxwaGE6IG1hdGVyaWFsLnByZW11bHRpcGxpZWRBbHBoYSxcblxuXHRcdFx0ZG91YmxlU2lkZWQ6IG1hdGVyaWFsLnNpZGUgPT09IERvdWJsZVNpZGUsXG5cdFx0XHRmbGlwU2lkZWQ6IG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlLFxuXG5cdFx0XHR1c2VEZXB0aFBhY2tpbmc6IG1hdGVyaWFsLmRlcHRoUGFja2luZyA+PSAwLFxuXHRcdFx0ZGVwdGhQYWNraW5nOiBtYXRlcmlhbC5kZXB0aFBhY2tpbmcgfHwgMCxcblxuXHRcdFx0aW5kZXgwQXR0cmlidXRlTmFtZTogbWF0ZXJpYWwuaW5kZXgwQXR0cmlidXRlTmFtZSxcblxuXHRcdFx0ZXh0ZW5zaW9uQ2xpcEN1bGxEaXN0YW5jZTogSEFTX0VYVEVOU0lPTlMgJiYgbWF0ZXJpYWwuZXh0ZW5zaW9ucy5jbGlwQ3VsbERpc3RhbmNlID09PSB0cnVlICYmIGV4dGVuc2lvbnMuaGFzKCAnV0VCR0xfY2xpcF9jdWxsX2Rpc3RhbmNlJyApLFxuXHRcdFx0ZXh0ZW5zaW9uTXVsdGlEcmF3OiAoIEhBU19FWFRFTlNJT05TICYmIG1hdGVyaWFsLmV4dGVuc2lvbnMubXVsdGlEcmF3ID09PSB0cnVlIHx8IElTX0JBVENIRURNRVNIICkgJiYgZXh0ZW5zaW9ucy5oYXMoICdXRUJHTF9tdWx0aV9kcmF3JyApLFxuXG5cdFx0XHRyZW5kZXJlckV4dGVuc2lvblBhcmFsbGVsU2hhZGVyQ29tcGlsZTogZXh0ZW5zaW9ucy5oYXMoICdLSFJfcGFyYWxsZWxfc2hhZGVyX2NvbXBpbGUnICksXG5cblx0XHRcdGN1c3RvbVByb2dyYW1DYWNoZUtleTogbWF0ZXJpYWwuY3VzdG9tUHJvZ3JhbUNhY2hlS2V5KClcblxuXHRcdH07XG5cblx0XHQvLyB0aGUgdXNhZ2Ugb2YgZ2V0Q2hhbm5lbCgpIGRldGVybWluZXMgdGhlIGFjdGl2ZSB0ZXh0dXJlIGNoYW5uZWxzIGZvciB0aGlzIHNoYWRlclxuXG5cdFx0cGFyYW1ldGVycy52ZXJ0ZXhVdjFzID0gX2FjdGl2ZUNoYW5uZWxzLmhhcyggMSApO1xuXHRcdHBhcmFtZXRlcnMudmVydGV4VXYycyA9IF9hY3RpdmVDaGFubmVscy5oYXMoIDIgKTtcblx0XHRwYXJhbWV0ZXJzLnZlcnRleFV2M3MgPSBfYWN0aXZlQ2hhbm5lbHMuaGFzKCAzICk7XG5cblx0XHRfYWN0aXZlQ2hhbm5lbHMuY2xlYXIoKTtcblxuXHRcdHJldHVybiBwYXJhbWV0ZXJzO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRQcm9ncmFtQ2FjaGVLZXkoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRjb25zdCBhcnJheSA9IFtdO1xuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnNoYWRlcklEICkge1xuXG5cdFx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnNoYWRlcklEICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmN1c3RvbVZlcnRleFNoYWRlcklEICk7XG5cdFx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmN1c3RvbUZyYWdtZW50U2hhZGVySUQgKTtcblxuXHRcdH1cblxuXHRcdGlmICggcGFyYW1ldGVycy5kZWZpbmVzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gcGFyYW1ldGVycy5kZWZpbmVzICkge1xuXG5cdFx0XHRcdGFycmF5LnB1c2goIG5hbWUgKTtcblx0XHRcdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5kZWZpbmVzWyBuYW1lIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmlzUmF3U2hhZGVyTWF0ZXJpYWwgPT09IGZhbHNlICkge1xuXG5cdFx0XHRnZXRQcm9ncmFtQ2FjaGVLZXlQYXJhbWV0ZXJzKCBhcnJheSwgcGFyYW1ldGVycyApO1xuXHRcdFx0Z2V0UHJvZ3JhbUNhY2hlS2V5Qm9vbGVhbnMoIGFycmF5LCBwYXJhbWV0ZXJzICk7XG5cdFx0XHRhcnJheS5wdXNoKCByZW5kZXJlci5vdXRwdXRDb2xvclNwYWNlICk7XG5cblx0XHR9XG5cblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmN1c3RvbVByb2dyYW1DYWNoZUtleSApO1xuXG5cdFx0cmV0dXJuIGFycmF5LmpvaW4oKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0UHJvZ3JhbUNhY2hlS2V5UGFyYW1ldGVycyggYXJyYXksIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnByZWNpc2lvbiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMub3V0cHV0Q29sb3JTcGFjZSApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuZW52TWFwTW9kZSApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuZW52TWFwQ3ViZVVWSGVpZ2h0ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5tYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuYWxwaGFNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubGlnaHRNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuYW9NYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuYnVtcE1hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5ub3JtYWxNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuZGlzcGxhY2VtZW50TWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5yb3VnaG5lc3NNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuYW5pc290cm9weU1hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5jbGVhcmNvYXRNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuY2xlYXJjb2F0Tm9ybWFsTWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmNsZWFyY29hdFJvdWdobmVzc01hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5pcmlkZXNjZW5jZU1hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5zaGVlbkNvbG9yTWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnNoZWVuUm91Z2huZXNzTWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnNwZWN1bGFyTWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnNwZWN1bGFyQ29sb3JNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuc3BlY3VsYXJJbnRlbnNpdHlNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMudHJhbnNtaXNzaW9uTWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnRoaWNrbmVzc01hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5jb21iaW5lICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5mb2dFeHAyICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5zaXplQXR0ZW51YXRpb24gKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm1vcnBoVGFyZ2V0c0NvdW50ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5tb3JwaEF0dHJpYnV0ZUNvdW50ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1EaXJMaWdodHMgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm51bVBvaW50TGlnaHRzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1TcG90TGlnaHRzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1TcG90TGlnaHRNYXBzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1IZW1pTGlnaHRzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1SZWN0QXJlYUxpZ2h0cyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtRGlyTGlnaHRTaGFkb3dzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1Qb2ludExpZ2h0U2hhZG93cyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtU3BvdExpZ2h0U2hhZG93cyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtU3BvdExpZ2h0U2hhZG93c1dpdGhNYXBzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1MaWdodFByb2JlcyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuc2hhZG93TWFwVHlwZSApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMudG9uZU1hcHBpbmcgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm51bUNsaXBwaW5nUGxhbmVzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1DbGlwSW50ZXJzZWN0aW9uICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5kZXB0aFBhY2tpbmcgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0UHJvZ3JhbUNhY2hlS2V5Qm9vbGVhbnMoIGFycmF5LCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0X3Byb2dyYW1MYXllcnMuZGlzYWJsZUFsbCgpO1xuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnN1cHBvcnRzVmVydGV4VGV4dHVyZXMgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAwICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmluc3RhbmNpbmcgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmluc3RhbmNpbmdDb2xvciApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDIgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuaW5zdGFuY2luZ01vcnBoIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMyApO1xuXHRcdGlmICggcGFyYW1ldGVycy5tYXRjYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCA0ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmVudk1hcCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDUgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMubm9ybWFsTWFwT2JqZWN0U3BhY2UgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCA2ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLm5vcm1hbE1hcFRhbmdlbnRTcGFjZSApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDcgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuY2xlYXJjb2F0IClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggOCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5pcmlkZXNjZW5jZSApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDkgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuYWxwaGFUZXN0IClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTAgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudmVydGV4Q29sb3JzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTEgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudmVydGV4QWxwaGFzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTIgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudmVydGV4VXYxcyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDEzICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnZlcnRleFV2MnMgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxNCApO1xuXHRcdGlmICggcGFyYW1ldGVycy52ZXJ0ZXhVdjNzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTUgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudmVydGV4VGFuZ2VudHMgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxNiApO1xuXHRcdGlmICggcGFyYW1ldGVycy5hbmlzb3Ryb3B5IClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTcgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuYWxwaGFIYXNoIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTggKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuYmF0Y2hpbmcgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxOSApO1xuXHRcdGlmICggcGFyYW1ldGVycy5kaXNwZXJzaW9uIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMjAgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuYmF0Y2hpbmdDb2xvciApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDIxICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmdyYWRpZW50TWFwIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMjIgKTtcblxuXHRcdGFycmF5LnB1c2goIF9wcm9ncmFtTGF5ZXJzLm1hc2sgKTtcblx0XHRfcHJvZ3JhbUxheWVycy5kaXNhYmxlQWxsKCk7XG5cblx0XHRpZiAoIHBhcmFtZXRlcnMuZm9nIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMCApO1xuXHRcdGlmICggcGFyYW1ldGVycy51c2VGb2cgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmZsYXRTaGFkaW5nIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMiApO1xuXHRcdGlmICggcGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMyApO1xuXHRcdGlmICggcGFyYW1ldGVycy5yZXZlcnNlZERlcHRoQnVmZmVyIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggNCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5za2lubmluZyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDUgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggNiApO1xuXHRcdGlmICggcGFyYW1ldGVycy5tb3JwaE5vcm1hbHMgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCA3ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLm1vcnBoQ29sb3JzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggOCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5wcmVtdWx0aXBsaWVkQWxwaGEgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCA5ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnNoYWRvd01hcEVuYWJsZWQgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxMCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5kb3VibGVTaWRlZCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDExICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmZsaXBTaWRlZCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDEyICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnVzZURlcHRoUGFja2luZyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDEzICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmRpdGhlcmluZyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDE0ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnRyYW5zbWlzc2lvbiApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDE1ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnNoZWVuIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTYgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMub3BhcXVlIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTcgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMucG9pbnRzVXZzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTggKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuZGVjb2RlVmlkZW9UZXh0dXJlIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTkgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuZGVjb2RlVmlkZW9UZXh0dXJlRW1pc3NpdmUgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyMCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5hbHBoYVRvQ292ZXJhZ2UgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyMSApO1xuXG5cdFx0YXJyYXkucHVzaCggX3Byb2dyYW1MYXllcnMubWFzayApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRVbmlmb3JtcyggbWF0ZXJpYWwgKSB7XG5cblx0XHRjb25zdCBzaGFkZXJJRCA9IHNoYWRlcklEc1sgbWF0ZXJpYWwudHlwZSBdO1xuXHRcdGxldCB1bmlmb3JtcztcblxuXHRcdGlmICggc2hhZGVySUQgKSB7XG5cblx0XHRcdGNvbnN0IHNoYWRlciA9IFNoYWRlckxpYlsgc2hhZGVySUQgXTtcblx0XHRcdHVuaWZvcm1zID0gVW5pZm9ybXNVdGlscy5jbG9uZSggc2hhZGVyLnVuaWZvcm1zICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR1bmlmb3JtcyA9IG1hdGVyaWFsLnVuaWZvcm1zO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVuaWZvcm1zO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBhY3F1aXJlUHJvZ3JhbSggcGFyYW1ldGVycywgY2FjaGVLZXkgKSB7XG5cblx0XHRsZXQgcHJvZ3JhbTtcblxuXHRcdC8vIENoZWNrIGlmIGNvZGUgaGFzIGJlZW4gYWxyZWFkeSBjb21waWxlZFxuXHRcdGZvciAoIGxldCBwID0gMCwgcGwgPSBwcm9ncmFtcy5sZW5ndGg7IHAgPCBwbDsgcCArKyApIHtcblxuXHRcdFx0Y29uc3QgcHJlZXhpc3RpbmdQcm9ncmFtID0gcHJvZ3JhbXNbIHAgXTtcblxuXHRcdFx0aWYgKCBwcmVleGlzdGluZ1Byb2dyYW0uY2FjaGVLZXkgPT09IGNhY2hlS2V5ICkge1xuXG5cdFx0XHRcdHByb2dyYW0gPSBwcmVleGlzdGluZ1Byb2dyYW07XG5cdFx0XHRcdCsrIHByb2dyYW0udXNlZFRpbWVzO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHByb2dyYW0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cHJvZ3JhbSA9IG5ldyBXZWJHTFByb2dyYW0oIHJlbmRlcmVyLCBjYWNoZUtleSwgcGFyYW1ldGVycywgYmluZGluZ1N0YXRlcyApO1xuXHRcdFx0cHJvZ3JhbXMucHVzaCggcHJvZ3JhbSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByb2dyYW07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbGVhc2VQcm9ncmFtKCBwcm9ncmFtICkge1xuXG5cdFx0aWYgKCAtLSBwcm9ncmFtLnVzZWRUaW1lcyA9PT0gMCApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGZyb20gdW5vcmRlcmVkIHNldFxuXHRcdFx0Y29uc3QgaSA9IHByb2dyYW1zLmluZGV4T2YoIHByb2dyYW0gKTtcblx0XHRcdHByb2dyYW1zWyBpIF0gPSBwcm9ncmFtc1sgcHJvZ3JhbXMubGVuZ3RoIC0gMSBdO1xuXHRcdFx0cHJvZ3JhbXMucG9wKCk7XG5cblx0XHRcdC8vIEZyZWUgV2ViR0wgcmVzb3VyY2VzXG5cdFx0XHRwcm9ncmFtLmRlc3Ryb3koKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVsZWFzZVNoYWRlckNhY2hlKCBtYXRlcmlhbCApIHtcblxuXHRcdF9jdXN0b21TaGFkZXJzLnJlbW92ZSggbWF0ZXJpYWwgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdF9jdXN0b21TaGFkZXJzLmRpc3Bvc2UoKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZXRQYXJhbWV0ZXJzOiBnZXRQYXJhbWV0ZXJzLFxuXHRcdGdldFByb2dyYW1DYWNoZUtleTogZ2V0UHJvZ3JhbUNhY2hlS2V5LFxuXHRcdGdldFVuaWZvcm1zOiBnZXRVbmlmb3Jtcyxcblx0XHRhY3F1aXJlUHJvZ3JhbTogYWNxdWlyZVByb2dyYW0sXG5cdFx0cmVsZWFzZVByb2dyYW06IHJlbGVhc2VQcm9ncmFtLFxuXHRcdHJlbGVhc2VTaGFkZXJDYWNoZTogcmVsZWFzZVNoYWRlckNhY2hlLFxuXHRcdC8vIEV4cG9zZWQgZm9yIHJlc291cmNlIG1vbml0b3JpbmcgJiBlcnJvciBmZWVkYmFjayB2aWEgcmVuZGVyZXIuaW5mbzpcblx0XHRwcm9ncmFtczogcHJvZ3JhbXMsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMUHJvcGVydGllcygpIHtcblxuXHRsZXQgcHJvcGVydGllcyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0ZnVuY3Rpb24gaGFzKCBvYmplY3QgKSB7XG5cblx0XHRyZXR1cm4gcHJvcGVydGllcy5oYXMoIG9iamVjdCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXQoIG9iamVjdCApIHtcblxuXHRcdGxldCBtYXAgPSBwcm9wZXJ0aWVzLmdldCggb2JqZWN0ICk7XG5cblx0XHRpZiAoIG1hcCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRtYXAgPSB7fTtcblx0XHRcdHByb3BlcnRpZXMuc2V0KCBvYmplY3QsIG1hcCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hcDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVtb3ZlKCBvYmplY3QgKSB7XG5cblx0XHRwcm9wZXJ0aWVzLmRlbGV0ZSggb2JqZWN0ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZSggb2JqZWN0LCBrZXksIHZhbHVlICkge1xuXG5cdFx0cHJvcGVydGllcy5nZXQoIG9iamVjdCApWyBrZXkgXSA9IHZhbHVlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xuXG5cdFx0cHJvcGVydGllcyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0aGFzOiBoYXMsXG5cdFx0Z2V0OiBnZXQsXG5cdFx0cmVtb3ZlOiByZW1vdmUsXG5cdFx0dXBkYXRlOiB1cGRhdGUsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIHBhaW50ZXJTb3J0U3RhYmxlKCBhLCBiICkge1xuXG5cdGlmICggYS5ncm91cE9yZGVyICE9PSBiLmdyb3VwT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5ncm91cE9yZGVyIC0gYi5ncm91cE9yZGVyO1xuXG5cdH0gZWxzZSBpZiAoIGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG5cblx0fSBlbHNlIGlmICggYS5tYXRlcmlhbC5pZCAhPT0gYi5tYXRlcmlhbC5pZCApIHtcblxuXHRcdHJldHVybiBhLm1hdGVyaWFsLmlkIC0gYi5tYXRlcmlhbC5pZDtcblxuXHR9IGVsc2UgaWYgKCBhLnogIT09IGIueiApIHtcblxuXHRcdHJldHVybiBhLnogLSBiLno7XG5cblx0fSBlbHNlIHtcblxuXHRcdHJldHVybiBhLmlkIC0gYi5pZDtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gcmV2ZXJzZVBhaW50ZXJTb3J0U3RhYmxlKCBhLCBiICkge1xuXG5cdGlmICggYS5ncm91cE9yZGVyICE9PSBiLmdyb3VwT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5ncm91cE9yZGVyIC0gYi5ncm91cE9yZGVyO1xuXG5cdH0gZWxzZSBpZiAoIGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG5cblx0fSBlbHNlIGlmICggYS56ICE9PSBiLnogKSB7XG5cblx0XHRyZXR1cm4gYi56IC0gYS56O1xuXG5cdH0gZWxzZSB7XG5cblx0XHRyZXR1cm4gYS5pZCAtIGIuaWQ7XG5cblx0fVxuXG59XG5cblxuZnVuY3Rpb24gV2ViR0xSZW5kZXJMaXN0KCkge1xuXG5cdGNvbnN0IHJlbmRlckl0ZW1zID0gW107XG5cdGxldCByZW5kZXJJdGVtc0luZGV4ID0gMDtcblxuXHRjb25zdCBvcGFxdWUgPSBbXTtcblx0Y29uc3QgdHJhbnNtaXNzaXZlID0gW107XG5cdGNvbnN0IHRyYW5zcGFyZW50ID0gW107XG5cblx0ZnVuY3Rpb24gaW5pdCgpIHtcblxuXHRcdHJlbmRlckl0ZW1zSW5kZXggPSAwO1xuXG5cdFx0b3BhcXVlLmxlbmd0aCA9IDA7XG5cdFx0dHJhbnNtaXNzaXZlLmxlbmd0aCA9IDA7XG5cdFx0dHJhbnNwYXJlbnQubGVuZ3RoID0gMDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0TmV4dFJlbmRlckl0ZW0oIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApIHtcblxuXHRcdGxldCByZW5kZXJJdGVtID0gcmVuZGVySXRlbXNbIHJlbmRlckl0ZW1zSW5kZXggXTtcblxuXHRcdGlmICggcmVuZGVySXRlbSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZW5kZXJJdGVtID0ge1xuXHRcdFx0XHRpZDogb2JqZWN0LmlkLFxuXHRcdFx0XHRvYmplY3Q6IG9iamVjdCxcblx0XHRcdFx0Z2VvbWV0cnk6IGdlb21ldHJ5LFxuXHRcdFx0XHRtYXRlcmlhbDogbWF0ZXJpYWwsXG5cdFx0XHRcdGdyb3VwT3JkZXI6IGdyb3VwT3JkZXIsXG5cdFx0XHRcdHJlbmRlck9yZGVyOiBvYmplY3QucmVuZGVyT3JkZXIsXG5cdFx0XHRcdHo6IHosXG5cdFx0XHRcdGdyb3VwOiBncm91cFxuXHRcdFx0fTtcblxuXHRcdFx0cmVuZGVySXRlbXNbIHJlbmRlckl0ZW1zSW5kZXggXSA9IHJlbmRlckl0ZW07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZW5kZXJJdGVtLmlkID0gb2JqZWN0LmlkO1xuXHRcdFx0cmVuZGVySXRlbS5vYmplY3QgPSBvYmplY3Q7XG5cdFx0XHRyZW5kZXJJdGVtLmdlb21ldHJ5ID0gZ2VvbWV0cnk7XG5cdFx0XHRyZW5kZXJJdGVtLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG5cdFx0XHRyZW5kZXJJdGVtLmdyb3VwT3JkZXIgPSBncm91cE9yZGVyO1xuXHRcdFx0cmVuZGVySXRlbS5yZW5kZXJPcmRlciA9IG9iamVjdC5yZW5kZXJPcmRlcjtcblx0XHRcdHJlbmRlckl0ZW0ueiA9IHo7XG5cdFx0XHRyZW5kZXJJdGVtLmdyb3VwID0gZ3JvdXA7XG5cblx0XHR9XG5cblx0XHRyZW5kZXJJdGVtc0luZGV4ICsrO1xuXG5cdFx0cmV0dXJuIHJlbmRlckl0ZW07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHB1c2goIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApIHtcblxuXHRcdGNvbnN0IHJlbmRlckl0ZW0gPSBnZXROZXh0UmVuZGVySXRlbSggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwT3JkZXIsIHosIGdyb3VwICk7XG5cblx0XHRpZiAoIG1hdGVyaWFsLnRyYW5zbWlzc2lvbiA+IDAuMCApIHtcblxuXHRcdFx0dHJhbnNtaXNzaXZlLnB1c2goIHJlbmRlckl0ZW0gKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSB0cnVlICkge1xuXG5cdFx0XHR0cmFuc3BhcmVudC5wdXNoKCByZW5kZXJJdGVtICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRvcGFxdWUucHVzaCggcmVuZGVySXRlbSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1bnNoaWZ0KCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgeiwgZ3JvdXAgKSB7XG5cblx0XHRjb25zdCByZW5kZXJJdGVtID0gZ2V0TmV4dFJlbmRlckl0ZW0oIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC50cmFuc21pc3Npb24gPiAwLjAgKSB7XG5cblx0XHRcdHRyYW5zbWlzc2l2ZS51bnNoaWZ0KCByZW5kZXJJdGVtICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC50cmFuc3BhcmVudCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dHJhbnNwYXJlbnQudW5zaGlmdCggcmVuZGVySXRlbSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0b3BhcXVlLnVuc2hpZnQoIHJlbmRlckl0ZW0gKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc29ydCggY3VzdG9tT3BhcXVlU29ydCwgY3VzdG9tVHJhbnNwYXJlbnRTb3J0ICkge1xuXG5cdFx0aWYgKCBvcGFxdWUubGVuZ3RoID4gMSApIG9wYXF1ZS5zb3J0KCBjdXN0b21PcGFxdWVTb3J0IHx8IHBhaW50ZXJTb3J0U3RhYmxlICk7XG5cdFx0aWYgKCB0cmFuc21pc3NpdmUubGVuZ3RoID4gMSApIHRyYW5zbWlzc2l2ZS5zb3J0KCBjdXN0b21UcmFuc3BhcmVudFNvcnQgfHwgcmV2ZXJzZVBhaW50ZXJTb3J0U3RhYmxlICk7XG5cdFx0aWYgKCB0cmFuc3BhcmVudC5sZW5ndGggPiAxICkgdHJhbnNwYXJlbnQuc29ydCggY3VzdG9tVHJhbnNwYXJlbnRTb3J0IHx8IHJldmVyc2VQYWludGVyU29ydFN0YWJsZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBmaW5pc2goKSB7XG5cblx0XHQvLyBDbGVhciByZWZlcmVuY2VzIGZyb20gaW5hY3RpdmUgcmVuZGVySXRlbXMgaW4gdGhlIGxpc3RcblxuXHRcdGZvciAoIGxldCBpID0gcmVuZGVySXRlbXNJbmRleCwgaWwgPSByZW5kZXJJdGVtcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgcmVuZGVySXRlbSA9IHJlbmRlckl0ZW1zWyBpIF07XG5cblx0XHRcdGlmICggcmVuZGVySXRlbS5pZCA9PT0gbnVsbCApIGJyZWFrO1xuXG5cdFx0XHRyZW5kZXJJdGVtLmlkID0gbnVsbDtcblx0XHRcdHJlbmRlckl0ZW0ub2JqZWN0ID0gbnVsbDtcblx0XHRcdHJlbmRlckl0ZW0uZ2VvbWV0cnkgPSBudWxsO1xuXHRcdFx0cmVuZGVySXRlbS5tYXRlcmlhbCA9IG51bGw7XG5cdFx0XHRyZW5kZXJJdGVtLmdyb3VwID0gbnVsbDtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdG9wYXF1ZTogb3BhcXVlLFxuXHRcdHRyYW5zbWlzc2l2ZTogdHJhbnNtaXNzaXZlLFxuXHRcdHRyYW5zcGFyZW50OiB0cmFuc3BhcmVudCxcblxuXHRcdGluaXQ6IGluaXQsXG5cdFx0cHVzaDogcHVzaCxcblx0XHR1bnNoaWZ0OiB1bnNoaWZ0LFxuXHRcdGZpbmlzaDogZmluaXNoLFxuXG5cdFx0c29ydDogc29ydFxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMUmVuZGVyTGlzdHMoKSB7XG5cblx0bGV0IGxpc3RzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiBnZXQoIHNjZW5lLCByZW5kZXJDYWxsRGVwdGggKSB7XG5cblx0XHRjb25zdCBsaXN0QXJyYXkgPSBsaXN0cy5nZXQoIHNjZW5lICk7XG5cdFx0bGV0IGxpc3Q7XG5cblx0XHRpZiAoIGxpc3RBcnJheSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRsaXN0ID0gbmV3IFdlYkdMUmVuZGVyTGlzdCgpO1xuXHRcdFx0bGlzdHMuc2V0KCBzY2VuZSwgWyBsaXN0IF0gKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggcmVuZGVyQ2FsbERlcHRoID49IGxpc3RBcnJheS5sZW5ndGggKSB7XG5cblx0XHRcdFx0bGlzdCA9IG5ldyBXZWJHTFJlbmRlckxpc3QoKTtcblx0XHRcdFx0bGlzdEFycmF5LnB1c2goIGxpc3QgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRsaXN0ID0gbGlzdEFycmF5WyByZW5kZXJDYWxsRGVwdGggXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxpc3Q7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cblx0XHRsaXN0cyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBnZXQsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFVuaWZvcm1zQ2FjaGUoKSB7XG5cblx0Y29uc3QgbGlnaHRzID0ge307XG5cblx0cmV0dXJuIHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCBsaWdodCApIHtcblxuXHRcdFx0aWYgKCBsaWdodHNbIGxpZ2h0LmlkIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gbGlnaHRzWyBsaWdodC5pZCBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGxldCB1bmlmb3JtcztcblxuXHRcdFx0c3dpdGNoICggbGlnaHQudHlwZSApIHtcblxuXHRcdFx0XHRjYXNlICdEaXJlY3Rpb25hbExpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdGRpcmVjdGlvbjogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdGNvbG9yOiBuZXcgQ29sb3IoKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnU3BvdExpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0ZGlyZWN0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0Y29sb3I6IG5ldyBDb2xvcigpLFxuXHRcdFx0XHRcdFx0ZGlzdGFuY2U6IDAsXG5cdFx0XHRcdFx0XHRjb25lQ29zOiAwLFxuXHRcdFx0XHRcdFx0cGVudW1icmFDb3M6IDAsXG5cdFx0XHRcdFx0XHRkZWNheTogMFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnUG9pbnRMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRwb3NpdGlvbjogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdGNvbG9yOiBuZXcgQ29sb3IoKSxcblx0XHRcdFx0XHRcdGRpc3RhbmNlOiAwLFxuXHRcdFx0XHRcdFx0ZGVjYXk6IDBcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ0hlbWlzcGhlcmVMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRkaXJlY3Rpb246IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRza3lDb2xvcjogbmV3IENvbG9yKCksXG5cdFx0XHRcdFx0XHRncm91bmRDb2xvcjogbmV3IENvbG9yKClcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1JlY3RBcmVhTGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0Y29sb3I6IG5ldyBDb2xvcigpLFxuXHRcdFx0XHRcdFx0cG9zaXRpb246IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRoYWxmV2lkdGg6IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRoYWxmSGVpZ2h0OiBuZXcgVmVjdG9yMygpXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0XHRsaWdodHNbIGxpZ2h0LmlkIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0cmV0dXJuIHVuaWZvcm1zO1xuXG5cdFx0fVxuXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gU2hhZG93VW5pZm9ybXNDYWNoZSgpIHtcblxuXHRjb25zdCBsaWdodHMgPSB7fTtcblxuXHRyZXR1cm4ge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoIGxpZ2h0ICkge1xuXG5cdFx0XHRpZiAoIGxpZ2h0c1sgbGlnaHQuaWQgXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiBsaWdodHNbIGxpZ2h0LmlkIF07XG5cblx0XHRcdH1cblxuXHRcdFx0bGV0IHVuaWZvcm1zO1xuXG5cdFx0XHRzd2l0Y2ggKCBsaWdodC50eXBlICkge1xuXG5cdFx0XHRcdGNhc2UgJ0RpcmVjdGlvbmFsTGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0c2hhZG93SW50ZW5zaXR5OiAxLFxuXHRcdFx0XHRcdFx0c2hhZG93QmlhczogMCxcblx0XHRcdFx0XHRcdHNoYWRvd05vcm1hbEJpYXM6IDAsXG5cdFx0XHRcdFx0XHRzaGFkb3dSYWRpdXM6IDEsXG5cdFx0XHRcdFx0XHRzaGFkb3dNYXBTaXplOiBuZXcgVmVjdG9yMigpXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdTcG90TGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0c2hhZG93SW50ZW5zaXR5OiAxLFxuXHRcdFx0XHRcdFx0c2hhZG93QmlhczogMCxcblx0XHRcdFx0XHRcdHNoYWRvd05vcm1hbEJpYXM6IDAsXG5cdFx0XHRcdFx0XHRzaGFkb3dSYWRpdXM6IDEsXG5cdFx0XHRcdFx0XHRzaGFkb3dNYXBTaXplOiBuZXcgVmVjdG9yMigpXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdQb2ludExpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdHNoYWRvd0ludGVuc2l0eTogMSxcblx0XHRcdFx0XHRcdHNoYWRvd0JpYXM6IDAsXG5cdFx0XHRcdFx0XHRzaGFkb3dOb3JtYWxCaWFzOiAwLFxuXHRcdFx0XHRcdFx0c2hhZG93UmFkaXVzOiAxLFxuXHRcdFx0XHRcdFx0c2hhZG93TWFwU2l6ZTogbmV3IFZlY3RvcjIoKSxcblx0XHRcdFx0XHRcdHNoYWRvd0NhbWVyYU5lYXI6IDEsXG5cdFx0XHRcdFx0XHRzaGFkb3dDYW1lcmFGYXI6IDEwMDBcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdC8vIFRPRE8gKGFiZWxuYXRpb24pOiBzZXQgUmVjdEFyZWFMaWdodCBzaGFkb3cgdW5pZm9ybXNcblxuXHRcdFx0fVxuXG5cdFx0XHRsaWdodHNbIGxpZ2h0LmlkIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0cmV0dXJuIHVuaWZvcm1zO1xuXG5cdFx0fVxuXG5cdH07XG5cbn1cblxuXG5cbmxldCBuZXh0VmVyc2lvbiA9IDA7XG5cbmZ1bmN0aW9uIHNoYWRvd0Nhc3RpbmdBbmRUZXh0dXJpbmdMaWdodHNGaXJzdCggbGlnaHRBLCBsaWdodEIgKSB7XG5cblx0cmV0dXJuICggbGlnaHRCLmNhc3RTaGFkb3cgPyAyIDogMCApIC0gKCBsaWdodEEuY2FzdFNoYWRvdyA/IDIgOiAwICkgKyAoIGxpZ2h0Qi5tYXAgPyAxIDogMCApIC0gKCBsaWdodEEubWFwID8gMSA6IDAgKTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTExpZ2h0cyggZXh0ZW5zaW9ucyApIHtcblxuXHRjb25zdCBjYWNoZSA9IG5ldyBVbmlmb3Jtc0NhY2hlKCk7XG5cblx0Y29uc3Qgc2hhZG93Q2FjaGUgPSBTaGFkb3dVbmlmb3Jtc0NhY2hlKCk7XG5cblx0Y29uc3Qgc3RhdGUgPSB7XG5cblx0XHR2ZXJzaW9uOiAwLFxuXG5cdFx0aGFzaDoge1xuXHRcdFx0ZGlyZWN0aW9uYWxMZW5ndGg6IC0xLFxuXHRcdFx0cG9pbnRMZW5ndGg6IC0xLFxuXHRcdFx0c3BvdExlbmd0aDogLTEsXG5cdFx0XHRyZWN0QXJlYUxlbmd0aDogLTEsXG5cdFx0XHRoZW1pTGVuZ3RoOiAtMSxcblxuXHRcdFx0bnVtRGlyZWN0aW9uYWxTaGFkb3dzOiAtMSxcblx0XHRcdG51bVBvaW50U2hhZG93czogLTEsXG5cdFx0XHRudW1TcG90U2hhZG93czogLTEsXG5cdFx0XHRudW1TcG90TWFwczogLTEsXG5cblx0XHRcdG51bUxpZ2h0UHJvYmVzOiAtMVxuXHRcdH0sXG5cblx0XHRhbWJpZW50OiBbIDAsIDAsIDAgXSxcblx0XHRwcm9iZTogW10sXG5cdFx0ZGlyZWN0aW9uYWw6IFtdLFxuXHRcdGRpcmVjdGlvbmFsU2hhZG93OiBbXSxcblx0XHRkaXJlY3Rpb25hbFNoYWRvd01hcDogW10sXG5cdFx0ZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXg6IFtdLFxuXHRcdHNwb3Q6IFtdLFxuXHRcdHNwb3RMaWdodE1hcDogW10sXG5cdFx0c3BvdFNoYWRvdzogW10sXG5cdFx0c3BvdFNoYWRvd01hcDogW10sXG5cdFx0c3BvdExpZ2h0TWF0cml4OiBbXSxcblx0XHRyZWN0QXJlYTogW10sXG5cdFx0cmVjdEFyZWFMVEMxOiBudWxsLFxuXHRcdHJlY3RBcmVhTFRDMjogbnVsbCxcblx0XHRwb2ludDogW10sXG5cdFx0cG9pbnRTaGFkb3c6IFtdLFxuXHRcdHBvaW50U2hhZG93TWFwOiBbXSxcblx0XHRwb2ludFNoYWRvd01hdHJpeDogW10sXG5cdFx0aGVtaTogW10sXG5cdFx0bnVtU3BvdExpZ2h0U2hhZG93c1dpdGhNYXBzOiAwLFxuXHRcdG51bUxpZ2h0UHJvYmVzOiAwXG5cblx0fTtcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkgc3RhdGUucHJvYmUucHVzaCggbmV3IFZlY3RvcjMoKSApO1xuXG5cdGNvbnN0IHZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xuXHRjb25zdCBtYXRyaXg0ID0gbmV3IE1hdHJpeDQoKTtcblx0Y29uc3QgbWF0cml4NDIgPSBuZXcgTWF0cml4NCgpO1xuXG5cdGZ1bmN0aW9uIHNldHVwKCBsaWdodHMgKSB7XG5cblx0XHRsZXQgciA9IDAsIGcgPSAwLCBiID0gMDtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSBzdGF0ZS5wcm9iZVsgaSBdLnNldCggMCwgMCwgMCApO1xuXG5cdFx0bGV0IGRpcmVjdGlvbmFsTGVuZ3RoID0gMDtcblx0XHRsZXQgcG9pbnRMZW5ndGggPSAwO1xuXHRcdGxldCBzcG90TGVuZ3RoID0gMDtcblx0XHRsZXQgcmVjdEFyZWFMZW5ndGggPSAwO1xuXHRcdGxldCBoZW1pTGVuZ3RoID0gMDtcblxuXHRcdGxldCBudW1EaXJlY3Rpb25hbFNoYWRvd3MgPSAwO1xuXHRcdGxldCBudW1Qb2ludFNoYWRvd3MgPSAwO1xuXHRcdGxldCBudW1TcG90U2hhZG93cyA9IDA7XG5cdFx0bGV0IG51bVNwb3RNYXBzID0gMDtcblx0XHRsZXQgbnVtU3BvdFNoYWRvd3NXaXRoTWFwcyA9IDA7XG5cblx0XHRsZXQgbnVtTGlnaHRQcm9iZXMgPSAwO1xuXG5cdFx0Ly8gb3JkZXJpbmcgOiBbc2hhZG93IGNhc3RpbmcgKyBtYXAgdGV4dHVyaW5nLCBtYXAgdGV4dHVyaW5nLCBzaGFkb3cgY2FzdGluZywgbm9uZSBdXG5cdFx0bGlnaHRzLnNvcnQoIHNoYWRvd0Nhc3RpbmdBbmRUZXh0dXJpbmdMaWdodHNGaXJzdCApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gbGlnaHRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGxpZ2h0ID0gbGlnaHRzWyBpIF07XG5cblx0XHRcdGNvbnN0IGNvbG9yID0gbGlnaHQuY29sb3I7XG5cdFx0XHRjb25zdCBpbnRlbnNpdHkgPSBsaWdodC5pbnRlbnNpdHk7XG5cdFx0XHRjb25zdCBkaXN0YW5jZSA9IGxpZ2h0LmRpc3RhbmNlO1xuXG5cdFx0XHRjb25zdCBzaGFkb3dNYXAgPSAoIGxpZ2h0LnNoYWRvdyAmJiBsaWdodC5zaGFkb3cubWFwICkgPyBsaWdodC5zaGFkb3cubWFwLnRleHR1cmUgOiBudWxsO1xuXG5cdFx0XHRpZiAoIGxpZ2h0LmlzQW1iaWVudExpZ2h0ICkge1xuXG5cdFx0XHRcdHIgKz0gY29sb3IuciAqIGludGVuc2l0eTtcblx0XHRcdFx0ZyArPSBjb2xvci5nICogaW50ZW5zaXR5O1xuXHRcdFx0XHRiICs9IGNvbG9yLmIgKiBpbnRlbnNpdHk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGxpZ2h0LmlzTGlnaHRQcm9iZSApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCA5OyBqICsrICkge1xuXG5cdFx0XHRcdFx0c3RhdGUucHJvYmVbIGogXS5hZGRTY2FsZWRWZWN0b3IoIGxpZ2h0LnNoLmNvZWZmaWNpZW50c1sgaiBdLCBpbnRlbnNpdHkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bnVtTGlnaHRQcm9iZXMgKys7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGxpZ2h0LmlzRGlyZWN0aW9uYWxMaWdodCApIHtcblxuXHRcdFx0XHRjb25zdCB1bmlmb3JtcyA9IGNhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jb2xvci5jb3B5KCBsaWdodC5jb2xvciApLm11bHRpcGx5U2NhbGFyKCBsaWdodC5pbnRlbnNpdHkgKTtcblxuXHRcdFx0XHRpZiAoIGxpZ2h0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBzaGFkb3cgPSBsaWdodC5zaGFkb3c7XG5cblx0XHRcdFx0XHRjb25zdCBzaGFkb3dVbmlmb3JtcyA9IHNoYWRvd0NhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd0ludGVuc2l0eSA9IHNoYWRvdy5pbnRlbnNpdHk7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93QmlhcyA9IHNoYWRvdy5iaWFzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd05vcm1hbEJpYXMgPSBzaGFkb3cubm9ybWFsQmlhcztcblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dSYWRpdXMgPSBzaGFkb3cucmFkaXVzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd01hcFNpemUgPSBzaGFkb3cubWFwU2l6ZTtcblxuXHRcdFx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsU2hhZG93WyBkaXJlY3Rpb25hbExlbmd0aCBdID0gc2hhZG93VW5pZm9ybXM7XG5cdFx0XHRcdFx0c3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXBbIGRpcmVjdGlvbmFsTGVuZ3RoIF0gPSBzaGFkb3dNYXA7XG5cdFx0XHRcdFx0c3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXhbIGRpcmVjdGlvbmFsTGVuZ3RoIF0gPSBsaWdodC5zaGFkb3cubWF0cml4O1xuXG5cdFx0XHRcdFx0bnVtRGlyZWN0aW9uYWxTaGFkb3dzICsrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFsgZGlyZWN0aW9uYWxMZW5ndGggXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRcdGRpcmVjdGlvbmFsTGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc1Nwb3RMaWdodCApIHtcblxuXHRcdFx0XHRjb25zdCB1bmlmb3JtcyA9IGNhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuY29sb3IuY29weSggY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5ICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpc3RhbmNlID0gZGlzdGFuY2U7XG5cblx0XHRcdFx0dW5pZm9ybXMuY29uZUNvcyA9IE1hdGguY29zKCBsaWdodC5hbmdsZSApO1xuXHRcdFx0XHR1bmlmb3Jtcy5wZW51bWJyYUNvcyA9IE1hdGguY29zKCBsaWdodC5hbmdsZSAqICggMSAtIGxpZ2h0LnBlbnVtYnJhICkgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGVjYXkgPSBsaWdodC5kZWNheTtcblxuXHRcdFx0XHRzdGF0ZS5zcG90WyBzcG90TGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRjb25zdCBzaGFkb3cgPSBsaWdodC5zaGFkb3c7XG5cblx0XHRcdFx0aWYgKCBsaWdodC5tYXAgKSB7XG5cblx0XHRcdFx0XHRzdGF0ZS5zcG90TGlnaHRNYXBbIG51bVNwb3RNYXBzIF0gPSBsaWdodC5tYXA7XG5cdFx0XHRcdFx0bnVtU3BvdE1hcHMgKys7XG5cblx0XHRcdFx0XHQvLyBtYWtlIHN1cmUgdGhlIGxpZ2h0TWF0cml4IGlzIHVwIHRvIGRhdGVcblx0XHRcdFx0XHQvLyBUT0RPIDogZG8gaXQgaWYgcmVxdWlyZWQgb25seVxuXHRcdFx0XHRcdHNoYWRvdy51cGRhdGVNYXRyaWNlcyggbGlnaHQgKTtcblxuXHRcdFx0XHRcdGlmICggbGlnaHQuY2FzdFNoYWRvdyApIG51bVNwb3RTaGFkb3dzV2l0aE1hcHMgKys7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YXRlLnNwb3RMaWdodE1hdHJpeFsgc3BvdExlbmd0aCBdID0gc2hhZG93Lm1hdHJpeDtcblxuXHRcdFx0XHRpZiAoIGxpZ2h0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBzaGFkb3dVbmlmb3JtcyA9IHNoYWRvd0NhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd0ludGVuc2l0eSA9IHNoYWRvdy5pbnRlbnNpdHk7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93QmlhcyA9IHNoYWRvdy5iaWFzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd05vcm1hbEJpYXMgPSBzaGFkb3cubm9ybWFsQmlhcztcblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dSYWRpdXMgPSBzaGFkb3cucmFkaXVzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd01hcFNpemUgPSBzaGFkb3cubWFwU2l6ZTtcblxuXHRcdFx0XHRcdHN0YXRlLnNwb3RTaGFkb3dbIHNwb3RMZW5ndGggXSA9IHNoYWRvd1VuaWZvcm1zO1xuXHRcdFx0XHRcdHN0YXRlLnNwb3RTaGFkb3dNYXBbIHNwb3RMZW5ndGggXSA9IHNoYWRvd01hcDtcblxuXHRcdFx0XHRcdG51bVNwb3RTaGFkb3dzICsrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzcG90TGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc1JlY3RBcmVhTGlnaHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuY29sb3IuY29weSggY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuaGFsZldpZHRoLnNldCggbGlnaHQud2lkdGggKiAwLjUsIDAuMCwgMC4wICk7XG5cdFx0XHRcdHVuaWZvcm1zLmhhbGZIZWlnaHQuc2V0KCAwLjAsIGxpZ2h0LmhlaWdodCAqIDAuNSwgMC4wICk7XG5cblx0XHRcdFx0c3RhdGUucmVjdEFyZWFbIHJlY3RBcmVhTGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRyZWN0QXJlYUxlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNQb2ludExpZ2h0ICkge1xuXG5cdFx0XHRcdGNvbnN0IHVuaWZvcm1zID0gY2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmNvbG9yLmNvcHkoIGxpZ2h0LmNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGxpZ2h0LmludGVuc2l0eSApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXN0YW5jZSA9IGxpZ2h0LmRpc3RhbmNlO1xuXHRcdFx0XHR1bmlmb3Jtcy5kZWNheSA9IGxpZ2h0LmRlY2F5O1xuXG5cdFx0XHRcdGlmICggbGlnaHQuY2FzdFNoYWRvdyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHNoYWRvdyA9IGxpZ2h0LnNoYWRvdztcblxuXHRcdFx0XHRcdGNvbnN0IHNoYWRvd1VuaWZvcm1zID0gc2hhZG93Q2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93SW50ZW5zaXR5ID0gc2hhZG93LmludGVuc2l0eTtcblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dCaWFzID0gc2hhZG93LmJpYXM7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93Tm9ybWFsQmlhcyA9IHNoYWRvdy5ub3JtYWxCaWFzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd1JhZGl1cyA9IHNoYWRvdy5yYWRpdXM7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93TWFwU2l6ZSA9IHNoYWRvdy5tYXBTaXplO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd0NhbWVyYU5lYXIgPSBzaGFkb3cuY2FtZXJhLm5lYXI7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93Q2FtZXJhRmFyID0gc2hhZG93LmNhbWVyYS5mYXI7XG5cblx0XHRcdFx0XHRzdGF0ZS5wb2ludFNoYWRvd1sgcG9pbnRMZW5ndGggXSA9IHNoYWRvd1VuaWZvcm1zO1xuXHRcdFx0XHRcdHN0YXRlLnBvaW50U2hhZG93TWFwWyBwb2ludExlbmd0aCBdID0gc2hhZG93TWFwO1xuXHRcdFx0XHRcdHN0YXRlLnBvaW50U2hhZG93TWF0cml4WyBwb2ludExlbmd0aCBdID0gbGlnaHQuc2hhZG93Lm1hdHJpeDtcblxuXHRcdFx0XHRcdG51bVBvaW50U2hhZG93cyArKztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3RhdGUucG9pbnRbIHBvaW50TGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRwb2ludExlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNIZW1pc3BoZXJlTGlnaHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuc2t5Q29sb3IuY29weSggbGlnaHQuY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5ICk7XG5cdFx0XHRcdHVuaWZvcm1zLmdyb3VuZENvbG9yLmNvcHkoIGxpZ2h0Lmdyb3VuZENvbG9yICkubXVsdGlwbHlTY2FsYXIoIGludGVuc2l0eSApO1xuXG5cdFx0XHRcdHN0YXRlLmhlbWlbIGhlbWlMZW5ndGggXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRcdGhlbWlMZW5ndGggKys7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggcmVjdEFyZWFMZW5ndGggPiAwICkge1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbnMuaGFzKCAnT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyApID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHN0YXRlLnJlY3RBcmVhTFRDMSA9IFVuaWZvcm1zTGliLkxUQ19GTE9BVF8xO1xuXHRcdFx0XHRzdGF0ZS5yZWN0QXJlYUxUQzIgPSBVbmlmb3Jtc0xpYi5MVENfRkxPQVRfMjtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzdGF0ZS5yZWN0QXJlYUxUQzEgPSBVbmlmb3Jtc0xpYi5MVENfSEFMRl8xO1xuXHRcdFx0XHRzdGF0ZS5yZWN0QXJlYUxUQzIgPSBVbmlmb3Jtc0xpYi5MVENfSEFMRl8yO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5hbWJpZW50WyAwIF0gPSByO1xuXHRcdHN0YXRlLmFtYmllbnRbIDEgXSA9IGc7XG5cdFx0c3RhdGUuYW1iaWVudFsgMiBdID0gYjtcblxuXHRcdGNvbnN0IGhhc2ggPSBzdGF0ZS5oYXNoO1xuXG5cdFx0aWYgKCBoYXNoLmRpcmVjdGlvbmFsTGVuZ3RoICE9PSBkaXJlY3Rpb25hbExlbmd0aCB8fFxuXHRcdFx0aGFzaC5wb2ludExlbmd0aCAhPT0gcG9pbnRMZW5ndGggfHxcblx0XHRcdGhhc2guc3BvdExlbmd0aCAhPT0gc3BvdExlbmd0aCB8fFxuXHRcdFx0aGFzaC5yZWN0QXJlYUxlbmd0aCAhPT0gcmVjdEFyZWFMZW5ndGggfHxcblx0XHRcdGhhc2guaGVtaUxlbmd0aCAhPT0gaGVtaUxlbmd0aCB8fFxuXHRcdFx0aGFzaC5udW1EaXJlY3Rpb25hbFNoYWRvd3MgIT09IG51bURpcmVjdGlvbmFsU2hhZG93cyB8fFxuXHRcdFx0aGFzaC5udW1Qb2ludFNoYWRvd3MgIT09IG51bVBvaW50U2hhZG93cyB8fFxuXHRcdFx0aGFzaC5udW1TcG90U2hhZG93cyAhPT0gbnVtU3BvdFNoYWRvd3MgfHxcblx0XHRcdGhhc2gubnVtU3BvdE1hcHMgIT09IG51bVNwb3RNYXBzIHx8XG5cdFx0XHRoYXNoLm51bUxpZ2h0UHJvYmVzICE9PSBudW1MaWdodFByb2JlcyApIHtcblxuXHRcdFx0c3RhdGUuZGlyZWN0aW9uYWwubGVuZ3RoID0gZGlyZWN0aW9uYWxMZW5ndGg7XG5cdFx0XHRzdGF0ZS5zcG90Lmxlbmd0aCA9IHNwb3RMZW5ndGg7XG5cdFx0XHRzdGF0ZS5yZWN0QXJlYS5sZW5ndGggPSByZWN0QXJlYUxlbmd0aDtcblx0XHRcdHN0YXRlLnBvaW50Lmxlbmd0aCA9IHBvaW50TGVuZ3RoO1xuXHRcdFx0c3RhdGUuaGVtaS5sZW5ndGggPSBoZW1pTGVuZ3RoO1xuXG5cdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFNoYWRvdy5sZW5ndGggPSBudW1EaXJlY3Rpb25hbFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hcC5sZW5ndGggPSBudW1EaXJlY3Rpb25hbFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5wb2ludFNoYWRvdy5sZW5ndGggPSBudW1Qb2ludFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5wb2ludFNoYWRvd01hcC5sZW5ndGggPSBudW1Qb2ludFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5zcG90U2hhZG93Lmxlbmd0aCA9IG51bVNwb3RTaGFkb3dzO1xuXHRcdFx0c3RhdGUuc3BvdFNoYWRvd01hcC5sZW5ndGggPSBudW1TcG90U2hhZG93cztcblx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4Lmxlbmd0aCA9IG51bURpcmVjdGlvbmFsU2hhZG93cztcblx0XHRcdHN0YXRlLnBvaW50U2hhZG93TWF0cml4Lmxlbmd0aCA9IG51bVBvaW50U2hhZG93cztcblx0XHRcdHN0YXRlLnNwb3RMaWdodE1hdHJpeC5sZW5ndGggPSBudW1TcG90U2hhZG93cyArIG51bVNwb3RNYXBzIC0gbnVtU3BvdFNoYWRvd3NXaXRoTWFwcztcblx0XHRcdHN0YXRlLnNwb3RMaWdodE1hcC5sZW5ndGggPSBudW1TcG90TWFwcztcblx0XHRcdHN0YXRlLm51bVNwb3RMaWdodFNoYWRvd3NXaXRoTWFwcyA9IG51bVNwb3RTaGFkb3dzV2l0aE1hcHM7XG5cdFx0XHRzdGF0ZS5udW1MaWdodFByb2JlcyA9IG51bUxpZ2h0UHJvYmVzO1xuXG5cdFx0XHRoYXNoLmRpcmVjdGlvbmFsTGVuZ3RoID0gZGlyZWN0aW9uYWxMZW5ndGg7XG5cdFx0XHRoYXNoLnBvaW50TGVuZ3RoID0gcG9pbnRMZW5ndGg7XG5cdFx0XHRoYXNoLnNwb3RMZW5ndGggPSBzcG90TGVuZ3RoO1xuXHRcdFx0aGFzaC5yZWN0QXJlYUxlbmd0aCA9IHJlY3RBcmVhTGVuZ3RoO1xuXHRcdFx0aGFzaC5oZW1pTGVuZ3RoID0gaGVtaUxlbmd0aDtcblxuXHRcdFx0aGFzaC5udW1EaXJlY3Rpb25hbFNoYWRvd3MgPSBudW1EaXJlY3Rpb25hbFNoYWRvd3M7XG5cdFx0XHRoYXNoLm51bVBvaW50U2hhZG93cyA9IG51bVBvaW50U2hhZG93cztcblx0XHRcdGhhc2gubnVtU3BvdFNoYWRvd3MgPSBudW1TcG90U2hhZG93cztcblx0XHRcdGhhc2gubnVtU3BvdE1hcHMgPSBudW1TcG90TWFwcztcblxuXHRcdFx0aGFzaC5udW1MaWdodFByb2JlcyA9IG51bUxpZ2h0UHJvYmVzO1xuXG5cdFx0XHRzdGF0ZS52ZXJzaW9uID0gbmV4dFZlcnNpb24gKys7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldHVwVmlldyggbGlnaHRzLCBjYW1lcmEgKSB7XG5cblx0XHRsZXQgZGlyZWN0aW9uYWxMZW5ndGggPSAwO1xuXHRcdGxldCBwb2ludExlbmd0aCA9IDA7XG5cdFx0bGV0IHNwb3RMZW5ndGggPSAwO1xuXHRcdGxldCByZWN0QXJlYUxlbmd0aCA9IDA7XG5cdFx0bGV0IGhlbWlMZW5ndGggPSAwO1xuXG5cdFx0Y29uc3Qgdmlld01hdHJpeCA9IGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2U7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBsaWdodHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgbGlnaHQgPSBsaWdodHNbIGkgXTtcblxuXHRcdFx0aWYgKCBsaWdodC5pc0RpcmVjdGlvbmFsTGlnaHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBzdGF0ZS5kaXJlY3Rpb25hbFsgZGlyZWN0aW9uYWxMZW5ndGggXTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR2ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5zdWIoIHZlY3RvcjMgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdGRpcmVjdGlvbmFsTGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc1Nwb3RMaWdodCApIHtcblxuXHRcdFx0XHRjb25zdCB1bmlmb3JtcyA9IHN0YXRlLnNwb3RbIHNwb3RMZW5ndGggXTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLnBvc2l0aW9uLmFwcGx5TWF0cml4NCggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnN1YiggdmVjdG9yMyApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24udHJhbnNmb3JtRGlyZWN0aW9uKCB2aWV3TWF0cml4ICk7XG5cblx0XHRcdFx0c3BvdExlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNSZWN0QXJlYUxpZ2h0ICkge1xuXG5cdFx0XHRcdGNvbnN0IHVuaWZvcm1zID0gc3RhdGUucmVjdEFyZWFbIHJlY3RBcmVhTGVuZ3RoIF07XG5cblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5hcHBseU1hdHJpeDQoIHZpZXdNYXRyaXggKTtcblxuXHRcdFx0XHQvLyBleHRyYWN0IGxvY2FsIHJvdGF0aW9uIG9mIGxpZ2h0IHRvIGRlcml2ZSB3aWR0aC9oZWlnaHQgaGFsZiB2ZWN0b3JzXG5cdFx0XHRcdG1hdHJpeDQyLmlkZW50aXR5KCk7XG5cdFx0XHRcdG1hdHJpeDQuY29weSggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0bWF0cml4NC5wcmVtdWx0aXBseSggdmlld01hdHJpeCApO1xuXHRcdFx0XHRtYXRyaXg0Mi5leHRyYWN0Um90YXRpb24oIG1hdHJpeDQgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmV2lkdGguc2V0KCBsaWdodC53aWR0aCAqIDAuNSwgMC4wLCAwLjAgKTtcblx0XHRcdFx0dW5pZm9ybXMuaGFsZkhlaWdodC5zZXQoIDAuMCwgbGlnaHQuaGVpZ2h0ICogMC41LCAwLjAgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmV2lkdGguYXBwbHlNYXRyaXg0KCBtYXRyaXg0MiApO1xuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmSGVpZ2h0LmFwcGx5TWF0cml4NCggbWF0cml4NDIgKTtcblxuXHRcdFx0XHRyZWN0QXJlYUxlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNQb2ludExpZ2h0ICkge1xuXG5cdFx0XHRcdGNvbnN0IHVuaWZvcm1zID0gc3RhdGUucG9pbnRbIHBvaW50TGVuZ3RoIF07XG5cblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5hcHBseU1hdHJpeDQoIHZpZXdNYXRyaXggKTtcblxuXHRcdFx0XHRwb2ludExlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNIZW1pc3BoZXJlTGlnaHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBzdGF0ZS5oZW1pWyBoZW1pTGVuZ3RoIF07XG5cblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdGhlbWlMZW5ndGggKys7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRzZXR1cDogc2V0dXAsXG5cdFx0c2V0dXBWaWV3OiBzZXR1cFZpZXcsXG5cdFx0c3RhdGU6IHN0YXRlXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xSZW5kZXJTdGF0ZSggZXh0ZW5zaW9ucyApIHtcblxuXHRjb25zdCBsaWdodHMgPSBuZXcgV2ViR0xMaWdodHMoIGV4dGVuc2lvbnMgKTtcblxuXHRjb25zdCBsaWdodHNBcnJheSA9IFtdO1xuXHRjb25zdCBzaGFkb3dzQXJyYXkgPSBbXTtcblxuXHRmdW5jdGlvbiBpbml0KCBjYW1lcmEgKSB7XG5cblx0XHRzdGF0ZS5jYW1lcmEgPSBjYW1lcmE7XG5cblx0XHRsaWdodHNBcnJheS5sZW5ndGggPSAwO1xuXHRcdHNoYWRvd3NBcnJheS5sZW5ndGggPSAwO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBwdXNoTGlnaHQoIGxpZ2h0ICkge1xuXG5cdFx0bGlnaHRzQXJyYXkucHVzaCggbGlnaHQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcHVzaFNoYWRvdyggc2hhZG93TGlnaHQgKSB7XG5cblx0XHRzaGFkb3dzQXJyYXkucHVzaCggc2hhZG93TGlnaHQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0dXBMaWdodHMoKSB7XG5cblx0XHRsaWdodHMuc2V0dXAoIGxpZ2h0c0FycmF5ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldHVwTGlnaHRzVmlldyggY2FtZXJhICkge1xuXG5cdFx0bGlnaHRzLnNldHVwVmlldyggbGlnaHRzQXJyYXksIGNhbWVyYSApO1xuXG5cdH1cblxuXHRjb25zdCBzdGF0ZSA9IHtcblx0XHRsaWdodHNBcnJheTogbGlnaHRzQXJyYXksXG5cdFx0c2hhZG93c0FycmF5OiBzaGFkb3dzQXJyYXksXG5cblx0XHRjYW1lcmE6IG51bGwsXG5cblx0XHRsaWdodHM6IGxpZ2h0cyxcblxuXHRcdHRyYW5zbWlzc2lvblJlbmRlclRhcmdldDoge31cblx0fTtcblxuXHRyZXR1cm4ge1xuXHRcdGluaXQ6IGluaXQsXG5cdFx0c3RhdGU6IHN0YXRlLFxuXHRcdHNldHVwTGlnaHRzOiBzZXR1cExpZ2h0cyxcblx0XHRzZXR1cExpZ2h0c1ZpZXc6IHNldHVwTGlnaHRzVmlldyxcblxuXHRcdHB1c2hMaWdodDogcHVzaExpZ2h0LFxuXHRcdHB1c2hTaGFkb3c6IHB1c2hTaGFkb3dcblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTFJlbmRlclN0YXRlcyggZXh0ZW5zaW9ucyApIHtcblxuXHRsZXQgcmVuZGVyU3RhdGVzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiBnZXQoIHNjZW5lLCByZW5kZXJDYWxsRGVwdGggPSAwICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyU3RhdGVBcnJheSA9IHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lICk7XG5cdFx0bGV0IHJlbmRlclN0YXRlO1xuXG5cdFx0aWYgKCByZW5kZXJTdGF0ZUFycmF5ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJlbmRlclN0YXRlID0gbmV3IFdlYkdMUmVuZGVyU3RhdGUoIGV4dGVuc2lvbnMgKTtcblx0XHRcdHJlbmRlclN0YXRlcy5zZXQoIHNjZW5lLCBbIHJlbmRlclN0YXRlIF0gKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggcmVuZGVyQ2FsbERlcHRoID49IHJlbmRlclN0YXRlQXJyYXkubGVuZ3RoICkge1xuXG5cdFx0XHRcdHJlbmRlclN0YXRlID0gbmV3IFdlYkdMUmVuZGVyU3RhdGUoIGV4dGVuc2lvbnMgKTtcblx0XHRcdFx0cmVuZGVyU3RhdGVBcnJheS5wdXNoKCByZW5kZXJTdGF0ZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVBcnJheVsgcmVuZGVyQ2FsbERlcHRoIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiByZW5kZXJTdGF0ZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdHJlbmRlclN0YXRlcyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBnZXQsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXHR9O1xuXG59XG5cbmNvbnN0IHZlcnRleCA9IFwidm9pZCBtYWluKCkge1xcblxcdGdsX1Bvc2l0aW9uID0gdmVjNCggcG9zaXRpb24sIDEuMCApO1xcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQgPSBcInVuaWZvcm0gc2FtcGxlcjJEIHNoYWRvd19wYXNzO1xcbnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uO1xcbnVuaWZvcm0gZmxvYXQgcmFkaXVzO1xcbiNpbmNsdWRlIDxwYWNraW5nPlxcbnZvaWQgbWFpbigpIHtcXG5cXHRjb25zdCBmbG9hdCBzYW1wbGVzID0gZmxvYXQoIFZTTV9TQU1QTEVTICk7XFxuXFx0ZmxvYXQgbWVhbiA9IDAuMDtcXG5cXHRmbG9hdCBzcXVhcmVkX21lYW4gPSAwLjA7XFxuXFx0ZmxvYXQgdXZTdHJpZGUgPSBzYW1wbGVzIDw9IDEuMCA/IDAuMCA6IDIuMCAvICggc2FtcGxlcyAtIDEuMCApO1xcblxcdGZsb2F0IHV2U3RhcnQgPSBzYW1wbGVzIDw9IDEuMCA/IDAuMCA6IC0gMS4wO1xcblxcdGZvciAoIGZsb2F0IGkgPSAwLjA7IGkgPCBzYW1wbGVzOyBpICsrICkge1xcblxcdFxcdGZsb2F0IHV2T2Zmc2V0ID0gdXZTdGFydCArIGkgKiB1dlN0cmlkZTtcXG5cXHRcXHQjaWZkZWYgSE9SSVpPTlRBTF9QQVNTXFxuXFx0XFx0XFx0dmVjMiBkaXN0cmlidXRpb24gPSB1bnBhY2tSR0JBVG8ySGFsZiggdGV4dHVyZTJEKCBzaGFkb3dfcGFzcywgKCBnbF9GcmFnQ29vcmQueHkgKyB2ZWMyKCB1dk9mZnNldCwgMC4wICkgKiByYWRpdXMgKSAvIHJlc29sdXRpb24gKSApO1xcblxcdFxcdFxcdG1lYW4gKz0gZGlzdHJpYnV0aW9uLng7XFxuXFx0XFx0XFx0c3F1YXJlZF9tZWFuICs9IGRpc3RyaWJ1dGlvbi55ICogZGlzdHJpYnV0aW9uLnkgKyBkaXN0cmlidXRpb24ueCAqIGRpc3RyaWJ1dGlvbi54O1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0ZmxvYXQgZGVwdGggPSB1bnBhY2tSR0JBVG9EZXB0aCggdGV4dHVyZTJEKCBzaGFkb3dfcGFzcywgKCBnbF9GcmFnQ29vcmQueHkgKyB2ZWMyKCAwLjAsIHV2T2Zmc2V0ICkgKiByYWRpdXMgKSAvIHJlc29sdXRpb24gKSApO1xcblxcdFxcdFxcdG1lYW4gKz0gZGVwdGg7XFxuXFx0XFx0XFx0c3F1YXJlZF9tZWFuICs9IGRlcHRoICogZGVwdGg7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcblxcdG1lYW4gPSBtZWFuIC8gc2FtcGxlcztcXG5cXHRzcXVhcmVkX21lYW4gPSBzcXVhcmVkX21lYW4gLyBzYW1wbGVzO1xcblxcdGZsb2F0IHN0ZF9kZXYgPSBzcXJ0KCBzcXVhcmVkX21lYW4gLSBtZWFuICogbWVhbiApO1xcblxcdGdsX0ZyYWdDb2xvciA9IHBhY2sySGFsZlRvUkdCQSggdmVjMiggbWVhbiwgc3RkX2RldiApICk7XFxufVwiO1xuXG5mdW5jdGlvbiBXZWJHTFNoYWRvd01hcCggcmVuZGVyZXIsIG9iamVjdHMsIGNhcGFiaWxpdGllcyApIHtcblxuXHRsZXQgX2ZydXN0dW0gPSBuZXcgRnJ1c3R1bSgpO1xuXG5cdGNvbnN0IF9zaGFkb3dNYXBTaXplID0gbmV3IFZlY3RvcjIoKSxcblx0XHRfdmlld3BvcnRTaXplID0gbmV3IFZlY3RvcjIoKSxcblxuXHRcdF92aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCksXG5cblx0XHRfZGVwdGhNYXRlcmlhbCA9IG5ldyBNZXNoRGVwdGhNYXRlcmlhbCggeyBkZXB0aFBhY2tpbmc6IFJHQkFEZXB0aFBhY2tpbmcgfSApLFxuXHRcdF9kaXN0YW5jZU1hdGVyaWFsID0gbmV3IE1lc2hEaXN0YW5jZU1hdGVyaWFsKCksXG5cblx0XHRfbWF0ZXJpYWxDYWNoZSA9IHt9LFxuXG5cdFx0X21heFRleHR1cmVTaXplID0gY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplO1xuXG5cdGNvbnN0IHNoYWRvd1NpZGUgPSB7IFsgRnJvbnRTaWRlIF06IEJhY2tTaWRlLCBbIEJhY2tTaWRlIF06IEZyb250U2lkZSwgWyBEb3VibGVTaWRlIF06IERvdWJsZVNpZGUgfTtcblxuXHRjb25zdCBzaGFkb3dNYXRlcmlhbFZlcnRpY2FsID0gbmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cdFx0ZGVmaW5lczoge1xuXHRcdFx0VlNNX1NBTVBMRVM6IDhcblx0XHR9LFxuXHRcdHVuaWZvcm1zOiB7XG5cdFx0XHRzaGFkb3dfcGFzczogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0cmVzb2x1dGlvbjogeyB2YWx1ZTogbmV3IFZlY3RvcjIoKSB9LFxuXHRcdFx0cmFkaXVzOiB7IHZhbHVlOiA0LjAgfVxuXHRcdH0sXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IHZlcnRleCxcblx0XHRmcmFnbWVudFNoYWRlcjogZnJhZ21lbnRcblxuXHR9ICk7XG5cblx0Y29uc3Qgc2hhZG93TWF0ZXJpYWxIb3Jpem9udGFsID0gc2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC5jbG9uZSgpO1xuXHRzaGFkb3dNYXRlcmlhbEhvcml6b250YWwuZGVmaW5lcy5IT1JJWk9OVEFMX1BBU1MgPSAxO1xuXG5cdGNvbnN0IGZ1bGxTY3JlZW5UcmkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0ZnVsbFNjcmVlblRyaS5zZXRBdHRyaWJ1dGUoXG5cdFx0J3Bvc2l0aW9uJyxcblx0XHRuZXcgQnVmZmVyQXR0cmlidXRlKFxuXHRcdFx0bmV3IEZsb2F0MzJBcnJheSggWyAtMSwgLTEsIDAuNSwgMywgLTEsIDAuNSwgLTEsIDMsIDAuNSBdICksXG5cdFx0XHQzXG5cdFx0KVxuXHQpO1xuXG5cdGNvbnN0IGZ1bGxTY3JlZW5NZXNoID0gbmV3IE1lc2goIGZ1bGxTY3JlZW5UcmksIHNoYWRvd01hdGVyaWFsVmVydGljYWwgKTtcblxuXHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0dGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0dGhpcy5hdXRvVXBkYXRlID0gdHJ1ZTtcblx0dGhpcy5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdHRoaXMudHlwZSA9IFBDRlNoYWRvd01hcDtcblx0bGV0IF9wcmV2aW91c1R5cGUgPSB0aGlzLnR5cGU7XG5cblx0dGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAoIGxpZ2h0cywgc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cdFx0aWYgKCBzY29wZS5hdXRvVXBkYXRlID09PSBmYWxzZSAmJiBzY29wZS5uZWVkc1VwZGF0ZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRpZiAoIGxpZ2h0cy5sZW5ndGggPT09IDAgKSByZXR1cm47XG5cblx0XHRjb25zdCBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cdFx0Y29uc3QgYWN0aXZlQ3ViZUZhY2UgPSByZW5kZXJlci5nZXRBY3RpdmVDdWJlRmFjZSgpO1xuXHRcdGNvbnN0IGFjdGl2ZU1pcG1hcExldmVsID0gcmVuZGVyZXIuZ2V0QWN0aXZlTWlwbWFwTGV2ZWwoKTtcblxuXHRcdGNvbnN0IF9zdGF0ZSA9IHJlbmRlcmVyLnN0YXRlO1xuXG5cdFx0Ly8gU2V0IEdMIHN0YXRlIGZvciBkZXB0aCBtYXAuXG5cdFx0X3N0YXRlLnNldEJsZW5kaW5nKCBOb0JsZW5kaW5nICk7XG5cblx0XHRpZiAoIF9zdGF0ZS5idWZmZXJzLmRlcHRoLmdldFJldmVyc2VkKCkgPT09IHRydWUgKSB7XG5cblx0XHRcdF9zdGF0ZS5idWZmZXJzLmNvbG9yLnNldENsZWFyKCAwLCAwLCAwLCAwICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfc3RhdGUuYnVmZmVycy5jb2xvci5zZXRDbGVhciggMSwgMSwgMSwgMSApO1xuXG5cdFx0fVxuXG5cdFx0X3N0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0VGVzdCggdHJ1ZSApO1xuXHRcdF9zdGF0ZS5zZXRTY2lzc29yVGVzdCggZmFsc2UgKTtcblxuXHRcdC8vIGNoZWNrIGZvciBzaGFkb3cgbWFwIHR5cGUgY2hhbmdlc1xuXG5cdFx0Y29uc3QgdG9WU00gPSAoIF9wcmV2aW91c1R5cGUgIT09IFZTTVNoYWRvd01hcCAmJiB0aGlzLnR5cGUgPT09IFZTTVNoYWRvd01hcCApO1xuXHRcdGNvbnN0IGZyb21WU00gPSAoIF9wcmV2aW91c1R5cGUgPT09IFZTTVNoYWRvd01hcCAmJiB0aGlzLnR5cGUgIT09IFZTTVNoYWRvd01hcCApO1xuXG5cdFx0Ly8gcmVuZGVyIGRlcHRoIG1hcFxuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGxpZ2h0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgbGlnaHQgPSBsaWdodHNbIGkgXTtcblx0XHRcdGNvbnN0IHNoYWRvdyA9IGxpZ2h0LnNoYWRvdztcblxuXHRcdFx0aWYgKCBzaGFkb3cgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFNoYWRvd01hcDonLCBsaWdodCwgJ2hhcyBubyBzaGFkb3cuJyApO1xuXHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNoYWRvdy5hdXRvVXBkYXRlID09PSBmYWxzZSAmJiBzaGFkb3cubmVlZHNVcGRhdGUgPT09IGZhbHNlICkgY29udGludWU7XG5cblx0XHRcdF9zaGFkb3dNYXBTaXplLmNvcHkoIHNoYWRvdy5tYXBTaXplICk7XG5cblx0XHRcdGNvbnN0IHNoYWRvd0ZyYW1lRXh0ZW50cyA9IHNoYWRvdy5nZXRGcmFtZUV4dGVudHMoKTtcblxuXHRcdFx0X3NoYWRvd01hcFNpemUubXVsdGlwbHkoIHNoYWRvd0ZyYW1lRXh0ZW50cyApO1xuXG5cdFx0XHRfdmlld3BvcnRTaXplLmNvcHkoIHNoYWRvdy5tYXBTaXplICk7XG5cblx0XHRcdGlmICggX3NoYWRvd01hcFNpemUueCA+IF9tYXhUZXh0dXJlU2l6ZSB8fCBfc2hhZG93TWFwU2l6ZS55ID4gX21heFRleHR1cmVTaXplICkge1xuXG5cdFx0XHRcdGlmICggX3NoYWRvd01hcFNpemUueCA+IF9tYXhUZXh0dXJlU2l6ZSApIHtcblxuXHRcdFx0XHRcdF92aWV3cG9ydFNpemUueCA9IE1hdGguZmxvb3IoIF9tYXhUZXh0dXJlU2l6ZSAvIHNoYWRvd0ZyYW1lRXh0ZW50cy54ICk7XG5cdFx0XHRcdFx0X3NoYWRvd01hcFNpemUueCA9IF92aWV3cG9ydFNpemUueCAqIHNoYWRvd0ZyYW1lRXh0ZW50cy54O1xuXHRcdFx0XHRcdHNoYWRvdy5tYXBTaXplLnggPSBfdmlld3BvcnRTaXplLng7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggX3NoYWRvd01hcFNpemUueSA+IF9tYXhUZXh0dXJlU2l6ZSApIHtcblxuXHRcdFx0XHRcdF92aWV3cG9ydFNpemUueSA9IE1hdGguZmxvb3IoIF9tYXhUZXh0dXJlU2l6ZSAvIHNoYWRvd0ZyYW1lRXh0ZW50cy55ICk7XG5cdFx0XHRcdFx0X3NoYWRvd01hcFNpemUueSA9IF92aWV3cG9ydFNpemUueSAqIHNoYWRvd0ZyYW1lRXh0ZW50cy55O1xuXHRcdFx0XHRcdHNoYWRvdy5tYXBTaXplLnkgPSBfdmlld3BvcnRTaXplLnk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggc2hhZG93Lm1hcCA9PT0gbnVsbCB8fCB0b1ZTTSA9PT0gdHJ1ZSB8fCBmcm9tVlNNID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGNvbnN0IHBhcnMgPSAoIHRoaXMudHlwZSAhPT0gVlNNU2hhZG93TWFwICkgPyB7IG1pbkZpbHRlcjogTmVhcmVzdEZpbHRlciwgbWFnRmlsdGVyOiBOZWFyZXN0RmlsdGVyIH0gOiB7fTtcblxuXHRcdFx0XHRpZiAoIHNoYWRvdy5tYXAgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRzaGFkb3cubWFwLmRpc3Bvc2UoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2hhZG93Lm1hcCA9IG5ldyBXZWJHTFJlbmRlclRhcmdldCggX3NoYWRvd01hcFNpemUueCwgX3NoYWRvd01hcFNpemUueSwgcGFycyApO1xuXHRcdFx0XHRzaGFkb3cubWFwLnRleHR1cmUubmFtZSA9IGxpZ2h0Lm5hbWUgKyAnLnNoYWRvd01hcCc7XG5cblx0XHRcdFx0c2hhZG93LmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBzaGFkb3cubWFwICk7XG5cdFx0XHRyZW5kZXJlci5jbGVhcigpO1xuXG5cdFx0XHRjb25zdCB2aWV3cG9ydENvdW50ID0gc2hhZG93LmdldFZpZXdwb3J0Q291bnQoKTtcblxuXHRcdFx0Zm9yICggbGV0IHZwID0gMDsgdnAgPCB2aWV3cG9ydENvdW50OyB2cCArKyApIHtcblxuXHRcdFx0XHRjb25zdCB2aWV3cG9ydCA9IHNoYWRvdy5nZXRWaWV3cG9ydCggdnAgKTtcblxuXHRcdFx0XHRfdmlld3BvcnQuc2V0KFxuXHRcdFx0XHRcdF92aWV3cG9ydFNpemUueCAqIHZpZXdwb3J0LngsXG5cdFx0XHRcdFx0X3ZpZXdwb3J0U2l6ZS55ICogdmlld3BvcnQueSxcblx0XHRcdFx0XHRfdmlld3BvcnRTaXplLnggKiB2aWV3cG9ydC56LFxuXHRcdFx0XHRcdF92aWV3cG9ydFNpemUueSAqIHZpZXdwb3J0Lndcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRfc3RhdGUudmlld3BvcnQoIF92aWV3cG9ydCApO1xuXG5cdFx0XHRcdHNoYWRvdy51cGRhdGVNYXRyaWNlcyggbGlnaHQsIHZwICk7XG5cblx0XHRcdFx0X2ZydXN0dW0gPSBzaGFkb3cuZ2V0RnJ1c3R1bSgpO1xuXG5cdFx0XHRcdHJlbmRlck9iamVjdCggc2NlbmUsIGNhbWVyYSwgc2hhZG93LmNhbWVyYSwgbGlnaHQsIHRoaXMudHlwZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGRvIGJsdXIgcGFzcyBmb3IgVlNNXG5cblx0XHRcdGlmICggc2hhZG93LmlzUG9pbnRMaWdodFNoYWRvdyAhPT0gdHJ1ZSAmJiB0aGlzLnR5cGUgPT09IFZTTVNoYWRvd01hcCApIHtcblxuXHRcdFx0XHRWU01QYXNzKCBzaGFkb3csIGNhbWVyYSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNoYWRvdy5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0X3ByZXZpb3VzVHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdHNjb3BlLm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIGN1cnJlbnRSZW5kZXJUYXJnZXQsIGFjdGl2ZUN1YmVGYWNlLCBhY3RpdmVNaXBtYXBMZXZlbCApO1xuXG5cdH07XG5cblx0ZnVuY3Rpb24gVlNNUGFzcyggc2hhZG93LCBjYW1lcmEgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG9iamVjdHMudXBkYXRlKCBmdWxsU2NyZWVuTWVzaCApO1xuXG5cdFx0aWYgKCBzaGFkb3dNYXRlcmlhbFZlcnRpY2FsLmRlZmluZXMuVlNNX1NBTVBMRVMgIT09IHNoYWRvdy5ibHVyU2FtcGxlcyApIHtcblxuXHRcdFx0c2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC5kZWZpbmVzLlZTTV9TQU1QTEVTID0gc2hhZG93LmJsdXJTYW1wbGVzO1xuXHRcdFx0c2hhZG93TWF0ZXJpYWxIb3Jpem9udGFsLmRlZmluZXMuVlNNX1NBTVBMRVMgPSBzaGFkb3cuYmx1clNhbXBsZXM7XG5cblx0XHRcdHNoYWRvd01hdGVyaWFsVmVydGljYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0c2hhZG93TWF0ZXJpYWxIb3Jpem9udGFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGlmICggc2hhZG93Lm1hcFBhc3MgPT09IG51bGwgKSB7XG5cblx0XHRcdHNoYWRvdy5tYXBQYXNzID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KCBfc2hhZG93TWFwU2l6ZS54LCBfc2hhZG93TWFwU2l6ZS55ICk7XG5cblx0XHR9XG5cblx0XHQvLyB2ZXJ0aWNhbCBwYXNzXG5cblx0XHRzaGFkb3dNYXRlcmlhbFZlcnRpY2FsLnVuaWZvcm1zLnNoYWRvd19wYXNzLnZhbHVlID0gc2hhZG93Lm1hcC50ZXh0dXJlO1xuXHRcdHNoYWRvd01hdGVyaWFsVmVydGljYWwudW5pZm9ybXMucmVzb2x1dGlvbi52YWx1ZSA9IHNoYWRvdy5tYXBTaXplO1xuXHRcdHNoYWRvd01hdGVyaWFsVmVydGljYWwudW5pZm9ybXMucmFkaXVzLnZhbHVlID0gc2hhZG93LnJhZGl1cztcblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHNoYWRvdy5tYXBQYXNzICk7XG5cdFx0cmVuZGVyZXIuY2xlYXIoKTtcblx0XHRyZW5kZXJlci5yZW5kZXJCdWZmZXJEaXJlY3QoIGNhbWVyYSwgbnVsbCwgZ2VvbWV0cnksIHNoYWRvd01hdGVyaWFsVmVydGljYWwsIGZ1bGxTY3JlZW5NZXNoLCBudWxsICk7XG5cblx0XHQvLyBob3Jpem9udGFsIHBhc3NcblxuXHRcdHNoYWRvd01hdGVyaWFsSG9yaXpvbnRhbC51bmlmb3Jtcy5zaGFkb3dfcGFzcy52YWx1ZSA9IHNoYWRvdy5tYXBQYXNzLnRleHR1cmU7XG5cdFx0c2hhZG93TWF0ZXJpYWxIb3Jpem9udGFsLnVuaWZvcm1zLnJlc29sdXRpb24udmFsdWUgPSBzaGFkb3cubWFwU2l6ZTtcblx0XHRzaGFkb3dNYXRlcmlhbEhvcml6b250YWwudW5pZm9ybXMucmFkaXVzLnZhbHVlID0gc2hhZG93LnJhZGl1cztcblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHNoYWRvdy5tYXAgKTtcblx0XHRyZW5kZXJlci5jbGVhcigpO1xuXHRcdHJlbmRlcmVyLnJlbmRlckJ1ZmZlckRpcmVjdCggY2FtZXJhLCBudWxsLCBnZW9tZXRyeSwgc2hhZG93TWF0ZXJpYWxIb3Jpem9udGFsLCBmdWxsU2NyZWVuTWVzaCwgbnVsbCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXREZXB0aE1hdGVyaWFsKCBvYmplY3QsIG1hdGVyaWFsLCBsaWdodCwgdHlwZSApIHtcblxuXHRcdGxldCByZXN1bHQgPSBudWxsO1xuXG5cdFx0Y29uc3QgY3VzdG9tTWF0ZXJpYWwgPSAoIGxpZ2h0LmlzUG9pbnRMaWdodCA9PT0gdHJ1ZSApID8gb2JqZWN0LmN1c3RvbURpc3RhbmNlTWF0ZXJpYWwgOiBvYmplY3QuY3VzdG9tRGVwdGhNYXRlcmlhbDtcblxuXHRcdGlmICggY3VzdG9tTWF0ZXJpYWwgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmVzdWx0ID0gY3VzdG9tTWF0ZXJpYWw7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXN1bHQgPSAoIGxpZ2h0LmlzUG9pbnRMaWdodCA9PT0gdHJ1ZSApID8gX2Rpc3RhbmNlTWF0ZXJpYWwgOiBfZGVwdGhNYXRlcmlhbDtcblxuXHRcdFx0aWYgKCAoIHJlbmRlcmVyLmxvY2FsQ2xpcHBpbmdFbmFibGVkICYmIG1hdGVyaWFsLmNsaXBTaGFkb3dzID09PSB0cnVlICYmIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsLmNsaXBwaW5nUGxhbmVzICkgJiYgbWF0ZXJpYWwuY2xpcHBpbmdQbGFuZXMubGVuZ3RoICE9PSAwICkgfHxcblx0XHRcdFx0KCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgJiYgbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGUgIT09IDAgKSB8fFxuXHRcdFx0XHQoIG1hdGVyaWFsLmFscGhhTWFwICYmIG1hdGVyaWFsLmFscGhhVGVzdCA+IDAgKSB8fFxuXHRcdFx0XHQoIG1hdGVyaWFsLm1hcCAmJiBtYXRlcmlhbC5hbHBoYVRlc3QgPiAwICkgfHxcblx0XHRcdFx0KCBtYXRlcmlhbC5hbHBoYVRvQ292ZXJhZ2UgPT09IHRydWUgKSApIHtcblxuXHRcdFx0XHQvLyBpbiB0aGlzIGNhc2Ugd2UgbmVlZCBhIHVuaXF1ZSBtYXRlcmlhbCBpbnN0YW5jZSByZWZsZWN0aW5nIHRoZVxuXHRcdFx0XHQvLyBhcHByb3ByaWF0ZSBzdGF0ZVxuXG5cdFx0XHRcdGNvbnN0IGtleUEgPSByZXN1bHQudXVpZCwga2V5QiA9IG1hdGVyaWFsLnV1aWQ7XG5cblx0XHRcdFx0bGV0IG1hdGVyaWFsc0ZvclZhcmlhbnQgPSBfbWF0ZXJpYWxDYWNoZVsga2V5QSBdO1xuXG5cdFx0XHRcdGlmICggbWF0ZXJpYWxzRm9yVmFyaWFudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0bWF0ZXJpYWxzRm9yVmFyaWFudCA9IHt9O1xuXHRcdFx0XHRcdF9tYXRlcmlhbENhY2hlWyBrZXlBIF0gPSBtYXRlcmlhbHNGb3JWYXJpYW50O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsZXQgY2FjaGVkTWF0ZXJpYWwgPSBtYXRlcmlhbHNGb3JWYXJpYW50WyBrZXlCIF07XG5cblx0XHRcdFx0aWYgKCBjYWNoZWRNYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y2FjaGVkTWF0ZXJpYWwgPSByZXN1bHQuY2xvbmUoKTtcblx0XHRcdFx0XHRtYXRlcmlhbHNGb3JWYXJpYW50WyBrZXlCIF0gPSBjYWNoZWRNYXRlcmlhbDtcblx0XHRcdFx0XHRtYXRlcmlhbC5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uTWF0ZXJpYWxEaXNwb3NlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCA9IGNhY2hlZE1hdGVyaWFsO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXN1bHQudmlzaWJsZSA9IG1hdGVyaWFsLnZpc2libGU7XG5cdFx0cmVzdWx0LndpcmVmcmFtZSA9IG1hdGVyaWFsLndpcmVmcmFtZTtcblxuXHRcdGlmICggdHlwZSA9PT0gVlNNU2hhZG93TWFwICkge1xuXG5cdFx0XHRyZXN1bHQuc2lkZSA9ICggbWF0ZXJpYWwuc2hhZG93U2lkZSAhPT0gbnVsbCApID8gbWF0ZXJpYWwuc2hhZG93U2lkZSA6IG1hdGVyaWFsLnNpZGU7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXN1bHQuc2lkZSA9ICggbWF0ZXJpYWwuc2hhZG93U2lkZSAhPT0gbnVsbCApID8gbWF0ZXJpYWwuc2hhZG93U2lkZSA6IHNoYWRvd1NpZGVbIG1hdGVyaWFsLnNpZGUgXTtcblxuXHRcdH1cblxuXHRcdHJlc3VsdC5hbHBoYU1hcCA9IG1hdGVyaWFsLmFscGhhTWFwO1xuXHRcdHJlc3VsdC5hbHBoYVRlc3QgPSAoIG1hdGVyaWFsLmFscGhhVG9Db3ZlcmFnZSA9PT0gdHJ1ZSApID8gMC41IDogbWF0ZXJpYWwuYWxwaGFUZXN0OyAvLyBhcHByb3hpbWF0ZSBhbHBoYVRvQ292ZXJhZ2UgYnkgdXNpbmcgYSBmaXhlZCBhbHBoYVRlc3QgdmFsdWVcblx0XHRyZXN1bHQubWFwID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0cmVzdWx0LmNsaXBTaGFkb3dzID0gbWF0ZXJpYWwuY2xpcFNoYWRvd3M7XG5cdFx0cmVzdWx0LmNsaXBwaW5nUGxhbmVzID0gbWF0ZXJpYWwuY2xpcHBpbmdQbGFuZXM7XG5cdFx0cmVzdWx0LmNsaXBJbnRlcnNlY3Rpb24gPSBtYXRlcmlhbC5jbGlwSW50ZXJzZWN0aW9uO1xuXG5cdFx0cmVzdWx0LmRpc3BsYWNlbWVudE1hcCA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcblx0XHRyZXN1bHQuZGlzcGxhY2VtZW50U2NhbGUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRyZXN1bHQuZGlzcGxhY2VtZW50QmlhcyA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHRyZXN1bHQud2lyZWZyYW1lTGluZXdpZHRoID0gbWF0ZXJpYWwud2lyZWZyYW1lTGluZXdpZHRoO1xuXHRcdHJlc3VsdC5saW5ld2lkdGggPSBtYXRlcmlhbC5saW5ld2lkdGg7XG5cblx0XHRpZiAoIGxpZ2h0LmlzUG9pbnRMaWdodCA9PT0gdHJ1ZSAmJiByZXN1bHQuaXNNZXNoRGlzdGFuY2VNYXRlcmlhbCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Y29uc3QgbWF0ZXJpYWxQcm9wZXJ0aWVzID0gcmVuZGVyZXIucHJvcGVydGllcy5nZXQoIHJlc3VsdCApO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmxpZ2h0ID0gbGlnaHQ7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXJPYmplY3QoIG9iamVjdCwgY2FtZXJhLCBzaGFkb3dDYW1lcmEsIGxpZ2h0LCB0eXBlICkge1xuXG5cdFx0aWYgKCBvYmplY3QudmlzaWJsZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRjb25zdCB2aXNpYmxlID0gb2JqZWN0LmxheWVycy50ZXN0KCBjYW1lcmEubGF5ZXJzICk7XG5cblx0XHRpZiAoIHZpc2libGUgJiYgKCBvYmplY3QuaXNNZXNoIHx8IG9iamVjdC5pc0xpbmUgfHwgb2JqZWN0LmlzUG9pbnRzICkgKSB7XG5cblx0XHRcdGlmICggKCBvYmplY3QuY2FzdFNoYWRvdyB8fCAoIG9iamVjdC5yZWNlaXZlU2hhZG93ICYmIHR5cGUgPT09IFZTTVNoYWRvd01hcCApICkgJiYgKCAhIG9iamVjdC5mcnVzdHVtQ3VsbGVkIHx8IF9mcnVzdHVtLmludGVyc2VjdHNPYmplY3QoIG9iamVjdCApICkgKSB7XG5cblx0XHRcdFx0b2JqZWN0Lm1vZGVsVmlld01hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBzaGFkb3dDYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLCBvYmplY3QubWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHRjb25zdCBnZW9tZXRyeSA9IG9iamVjdHMudXBkYXRlKCBvYmplY3QgKTtcblx0XHRcdFx0Y29uc3QgbWF0ZXJpYWwgPSBvYmplY3QubWF0ZXJpYWw7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBtYXRlcmlhbCApICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGsgPSAwLCBrbCA9IGdyb3Vwcy5sZW5ndGg7IGsgPCBrbDsgayArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgZ3JvdXAgPSBncm91cHNbIGsgXTtcblx0XHRcdFx0XHRcdGNvbnN0IGdyb3VwTWF0ZXJpYWwgPSBtYXRlcmlhbFsgZ3JvdXAubWF0ZXJpYWxJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIGdyb3VwTWF0ZXJpYWwgJiYgZ3JvdXBNYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnN0IGRlcHRoTWF0ZXJpYWwgPSBnZXREZXB0aE1hdGVyaWFsKCBvYmplY3QsIGdyb3VwTWF0ZXJpYWwsIGxpZ2h0LCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0b2JqZWN0Lm9uQmVmb3JlU2hhZG93KCByZW5kZXJlciwgb2JqZWN0LCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgZ2VvbWV0cnksIGRlcHRoTWF0ZXJpYWwsIGdyb3VwICk7XG5cblx0XHRcdFx0XHRcdFx0cmVuZGVyZXIucmVuZGVyQnVmZmVyRGlyZWN0KCBzaGFkb3dDYW1lcmEsIG51bGwsIGdlb21ldHJ5LCBkZXB0aE1hdGVyaWFsLCBvYmplY3QsIGdyb3VwICk7XG5cblx0XHRcdFx0XHRcdFx0b2JqZWN0Lm9uQWZ0ZXJTaGFkb3coIHJlbmRlcmVyLCBvYmplY3QsIGNhbWVyYSwgc2hhZG93Q2FtZXJhLCBnZW9tZXRyeSwgZGVwdGhNYXRlcmlhbCwgZ3JvdXAgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLnZpc2libGUgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBkZXB0aE1hdGVyaWFsID0gZ2V0RGVwdGhNYXRlcmlhbCggb2JqZWN0LCBtYXRlcmlhbCwgbGlnaHQsIHR5cGUgKTtcblxuXHRcdFx0XHRcdG9iamVjdC5vbkJlZm9yZVNoYWRvdyggcmVuZGVyZXIsIG9iamVjdCwgY2FtZXJhLCBzaGFkb3dDYW1lcmEsIGdlb21ldHJ5LCBkZXB0aE1hdGVyaWFsLCBudWxsICk7XG5cblx0XHRcdFx0XHRyZW5kZXJlci5yZW5kZXJCdWZmZXJEaXJlY3QoIHNoYWRvd0NhbWVyYSwgbnVsbCwgZ2VvbWV0cnksIGRlcHRoTWF0ZXJpYWwsIG9iamVjdCwgbnVsbCApO1xuXG5cdFx0XHRcdFx0b2JqZWN0Lm9uQWZ0ZXJTaGFkb3coIHJlbmRlcmVyLCBvYmplY3QsIGNhbWVyYSwgc2hhZG93Q2FtZXJhLCBnZW9tZXRyeSwgZGVwdGhNYXRlcmlhbCwgbnVsbCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgY2hpbGRyZW4gPSBvYmplY3QuY2hpbGRyZW47XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRyZW5kZXJPYmplY3QoIGNoaWxkcmVuWyBpIF0sIGNhbWVyYSwgc2hhZG93Q2FtZXJhLCBsaWdodCwgdHlwZSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBvbk1hdGVyaWFsRGlzcG9zZSggZXZlbnQgKSB7XG5cblx0XHRjb25zdCBtYXRlcmlhbCA9IGV2ZW50LnRhcmdldDtcblxuXHRcdG1hdGVyaWFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25NYXRlcmlhbERpc3Bvc2UgKTtcblxuXHRcdC8vIG1ha2Ugc3VyZSB0byByZW1vdmUgdGhlIHVuaXF1ZSBkaXN0YW5jZS9kZXB0aCBtYXRlcmlhbHMgdXNlZCBmb3Igc2hhZG93IG1hcCByZW5kZXJpbmdcblxuXHRcdGZvciAoIGNvbnN0IGlkIGluIF9tYXRlcmlhbENhY2hlICkge1xuXG5cdFx0XHRjb25zdCBjYWNoZSA9IF9tYXRlcmlhbENhY2hlWyBpZCBdO1xuXG5cdFx0XHRjb25zdCB1dWlkID0gZXZlbnQudGFyZ2V0LnV1aWQ7XG5cblx0XHRcdGlmICggdXVpZCBpbiBjYWNoZSApIHtcblxuXHRcdFx0XHRjb25zdCBzaGFkb3dNYXRlcmlhbCA9IGNhY2hlWyB1dWlkIF07XG5cdFx0XHRcdHNoYWRvd01hdGVyaWFsLmRpc3Bvc2UoKTtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyB1dWlkIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cbn1cblxuY29uc3QgcmV2ZXJzZWRGdW5jcyA9IHtcblx0WyBOZXZlckRlcHRoIF06IEFsd2F5c0RlcHRoLFxuXHRbIExlc3NEZXB0aCBdOiBHcmVhdGVyRGVwdGgsXG5cdFsgRXF1YWxEZXB0aCBdOiBOb3RFcXVhbERlcHRoLFxuXHRbIExlc3NFcXVhbERlcHRoIF06IEdyZWF0ZXJFcXVhbERlcHRoLFxuXG5cdFsgQWx3YXlzRGVwdGggXTogTmV2ZXJEZXB0aCxcblx0WyBHcmVhdGVyRGVwdGggXTogTGVzc0RlcHRoLFxuXHRbIE5vdEVxdWFsRGVwdGggXTogRXF1YWxEZXB0aCxcblx0WyBHcmVhdGVyRXF1YWxEZXB0aCBdOiBMZXNzRXF1YWxEZXB0aCxcbn07XG5cbmZ1bmN0aW9uIFdlYkdMU3RhdGUoIGdsLCBleHRlbnNpb25zICkge1xuXG5cdGZ1bmN0aW9uIENvbG9yQnVmZmVyKCkge1xuXG5cdFx0bGV0IGxvY2tlZCA9IGZhbHNlO1xuXG5cdFx0Y29uc3QgY29sb3IgPSBuZXcgVmVjdG9yNCgpO1xuXHRcdGxldCBjdXJyZW50Q29sb3JNYXNrID0gbnVsbDtcblx0XHRjb25zdCBjdXJyZW50Q29sb3JDbGVhciA9IG5ldyBWZWN0b3I0KCAwLCAwLCAwLCAwICk7XG5cblx0XHRyZXR1cm4ge1xuXG5cdFx0XHRzZXRNYXNrOiBmdW5jdGlvbiAoIGNvbG9yTWFzayApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRDb2xvck1hc2sgIT09IGNvbG9yTWFzayAmJiAhIGxvY2tlZCApIHtcblxuXHRcdFx0XHRcdGdsLmNvbG9yTWFzayggY29sb3JNYXNrLCBjb2xvck1hc2ssIGNvbG9yTWFzaywgY29sb3JNYXNrICk7XG5cdFx0XHRcdFx0Y3VycmVudENvbG9yTWFzayA9IGNvbG9yTWFzaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldExvY2tlZDogZnVuY3Rpb24gKCBsb2NrICkge1xuXG5cdFx0XHRcdGxvY2tlZCA9IGxvY2s7XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldENsZWFyOiBmdW5jdGlvbiAoIHIsIGcsIGIsIGEsIHByZW11bHRpcGxpZWRBbHBoYSApIHtcblxuXHRcdFx0XHRpZiAoIHByZW11bHRpcGxpZWRBbHBoYSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdHIgKj0gYTsgZyAqPSBhOyBiICo9IGE7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbG9yLnNldCggciwgZywgYiwgYSApO1xuXG5cdFx0XHRcdGlmICggY3VycmVudENvbG9yQ2xlYXIuZXF1YWxzKCBjb2xvciApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGdsLmNsZWFyQ29sb3IoIHIsIGcsIGIsIGEgKTtcblx0XHRcdFx0XHRjdXJyZW50Q29sb3JDbGVhci5jb3B5KCBjb2xvciApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0cmVzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjdXJyZW50Q29sb3JNYXNrID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudENvbG9yQ2xlYXIuc2V0KCAtMSwgMCwgMCwgMCApOyAvLyBzZXQgdG8gaW52YWxpZCBzdGF0ZVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBEZXB0aEJ1ZmZlcigpIHtcblxuXHRcdGxldCBsb2NrZWQgPSBmYWxzZTtcblxuXHRcdGxldCBjdXJyZW50UmV2ZXJzZWQgPSBmYWxzZTtcblx0XHRsZXQgY3VycmVudERlcHRoTWFzayA9IG51bGw7XG5cdFx0bGV0IGN1cnJlbnREZXB0aEZ1bmMgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50RGVwdGhDbGVhciA9IG51bGw7XG5cblx0XHRyZXR1cm4ge1xuXG5cdFx0XHRzZXRSZXZlcnNlZDogZnVuY3Rpb24gKCByZXZlcnNlZCApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRSZXZlcnNlZCAhPT0gcmV2ZXJzZWQgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBleHQgPSBleHRlbnNpb25zLmdldCggJ0VYVF9jbGlwX2NvbnRyb2wnICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldmVyc2VkICkge1xuXG5cdFx0XHRcdFx0XHRleHQuY2xpcENvbnRyb2xFWFQoIGV4dC5MT1dFUl9MRUZUX0VYVCwgZXh0LlpFUk9fVE9fT05FX0VYVCApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0ZXh0LmNsaXBDb250cm9sRVhUKCBleHQuTE9XRVJfTEVGVF9FWFQsIGV4dC5ORUdBVElWRV9PTkVfVE9fT05FX0VYVCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y3VycmVudFJldmVyc2VkID0gcmV2ZXJzZWQ7XG5cblx0XHRcdFx0XHRjb25zdCBvbGREZXB0aCA9IGN1cnJlbnREZXB0aENsZWFyO1xuXHRcdFx0XHRcdGN1cnJlbnREZXB0aENsZWFyID0gbnVsbDtcblx0XHRcdFx0XHR0aGlzLnNldENsZWFyKCBvbGREZXB0aCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0Z2V0UmV2ZXJzZWQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRyZXR1cm4gY3VycmVudFJldmVyc2VkO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRUZXN0OiBmdW5jdGlvbiAoIGRlcHRoVGVzdCApIHtcblxuXHRcdFx0XHRpZiAoIGRlcHRoVGVzdCApIHtcblxuXHRcdFx0XHRcdGVuYWJsZSggZ2wuREVQVEhfVEVTVCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRkaXNhYmxlKCBnbC5ERVBUSF9URVNUICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRNYXNrOiBmdW5jdGlvbiAoIGRlcHRoTWFzayApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnREZXB0aE1hc2sgIT09IGRlcHRoTWFzayAmJiAhIGxvY2tlZCApIHtcblxuXHRcdFx0XHRcdGdsLmRlcHRoTWFzayggZGVwdGhNYXNrICk7XG5cdFx0XHRcdFx0Y3VycmVudERlcHRoTWFzayA9IGRlcHRoTWFzaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldEZ1bmM6IGZ1bmN0aW9uICggZGVwdGhGdW5jICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudFJldmVyc2VkICkgZGVwdGhGdW5jID0gcmV2ZXJzZWRGdW5jc1sgZGVwdGhGdW5jIF07XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50RGVwdGhGdW5jICE9PSBkZXB0aEZ1bmMgKSB7XG5cblx0XHRcdFx0XHRzd2l0Y2ggKCBkZXB0aEZ1bmMgKSB7XG5cblx0XHRcdFx0XHRcdGNhc2UgTmV2ZXJEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIGdsLk5FVkVSICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIEFsd2F5c0RlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggZ2wuQUxXQVlTICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIExlc3NEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIGdsLkxFU1MgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgTGVzc0VxdWFsRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCBnbC5MRVFVQUwgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgRXF1YWxEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIGdsLkVRVUFMICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIEdyZWF0ZXJFcXVhbERlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggZ2wuR0VRVUFMICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIEdyZWF0ZXJEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIGdsLkdSRUFURVIgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgTm90RXF1YWxEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIGdsLk5PVEVRVUFMICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggZ2wuTEVRVUFMICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjdXJyZW50RGVwdGhGdW5jID0gZGVwdGhGdW5jO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0TG9ja2VkOiBmdW5jdGlvbiAoIGxvY2sgKSB7XG5cblx0XHRcdFx0bG9ja2VkID0gbG9jaztcblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0Q2xlYXI6IGZ1bmN0aW9uICggZGVwdGggKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50RGVwdGhDbGVhciAhPT0gZGVwdGggKSB7XG5cblx0XHRcdFx0XHRpZiAoIGN1cnJlbnRSZXZlcnNlZCApIHtcblxuXHRcdFx0XHRcdFx0ZGVwdGggPSAxIC0gZGVwdGg7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRnbC5jbGVhckRlcHRoKCBkZXB0aCApO1xuXHRcdFx0XHRcdGN1cnJlbnREZXB0aENsZWFyID0gZGVwdGg7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRyZXNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGxvY2tlZCA9IGZhbHNlO1xuXG5cdFx0XHRcdGN1cnJlbnREZXB0aE1hc2sgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50RGVwdGhGdW5jID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudERlcHRoQ2xlYXIgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50UmV2ZXJzZWQgPSBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gU3RlbmNpbEJ1ZmZlcigpIHtcblxuXHRcdGxldCBsb2NrZWQgPSBmYWxzZTtcblxuXHRcdGxldCBjdXJyZW50U3RlbmNpbE1hc2sgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50U3RlbmNpbEZ1bmMgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50U3RlbmNpbFJlZiA9IG51bGw7XG5cdFx0bGV0IGN1cnJlbnRTdGVuY2lsRnVuY01hc2sgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50U3RlbmNpbEZhaWwgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50U3RlbmNpbFpGYWlsID0gbnVsbDtcblx0XHRsZXQgY3VycmVudFN0ZW5jaWxaUGFzcyA9IG51bGw7XG5cdFx0bGV0IGN1cnJlbnRTdGVuY2lsQ2xlYXIgPSBudWxsO1xuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0c2V0VGVzdDogZnVuY3Rpb24gKCBzdGVuY2lsVGVzdCApIHtcblxuXHRcdFx0XHRpZiAoICEgbG9ja2VkICkge1xuXG5cdFx0XHRcdFx0aWYgKCBzdGVuY2lsVGVzdCApIHtcblxuXHRcdFx0XHRcdFx0ZW5hYmxlKCBnbC5TVEVOQ0lMX1RFU1QgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGRpc2FibGUoIGdsLlNURU5DSUxfVEVTVCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0TWFzazogZnVuY3Rpb24gKCBzdGVuY2lsTWFzayApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRTdGVuY2lsTWFzayAhPT0gc3RlbmNpbE1hc2sgJiYgISBsb2NrZWQgKSB7XG5cblx0XHRcdFx0XHRnbC5zdGVuY2lsTWFzayggc3RlbmNpbE1hc2sgKTtcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbE1hc2sgPSBzdGVuY2lsTWFzaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldEZ1bmM6IGZ1bmN0aW9uICggc3RlbmNpbEZ1bmMsIHN0ZW5jaWxSZWYsIHN0ZW5jaWxNYXNrICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudFN0ZW5jaWxGdW5jICE9PSBzdGVuY2lsRnVuYyB8fFxuXHRcdFx0XHQgICAgIGN1cnJlbnRTdGVuY2lsUmVmICE9PSBzdGVuY2lsUmVmIHx8XG5cdFx0XHRcdCAgICAgY3VycmVudFN0ZW5jaWxGdW5jTWFzayAhPT0gc3RlbmNpbE1hc2sgKSB7XG5cblx0XHRcdFx0XHRnbC5zdGVuY2lsRnVuYyggc3RlbmNpbEZ1bmMsIHN0ZW5jaWxSZWYsIHN0ZW5jaWxNYXNrICk7XG5cblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbEZ1bmMgPSBzdGVuY2lsRnVuYztcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbFJlZiA9IHN0ZW5jaWxSZWY7XG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGdW5jTWFzayA9IHN0ZW5jaWxNYXNrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0T3A6IGZ1bmN0aW9uICggc3RlbmNpbEZhaWwsIHN0ZW5jaWxaRmFpbCwgc3RlbmNpbFpQYXNzICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudFN0ZW5jaWxGYWlsICE9PSBzdGVuY2lsRmFpbCB8fFxuXHRcdFx0XHQgICAgIGN1cnJlbnRTdGVuY2lsWkZhaWwgIT09IHN0ZW5jaWxaRmFpbCB8fFxuXHRcdFx0XHQgICAgIGN1cnJlbnRTdGVuY2lsWlBhc3MgIT09IHN0ZW5jaWxaUGFzcyApIHtcblxuXHRcdFx0XHRcdGdsLnN0ZW5jaWxPcCggc3RlbmNpbEZhaWwsIHN0ZW5jaWxaRmFpbCwgc3RlbmNpbFpQYXNzICk7XG5cblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbEZhaWwgPSBzdGVuY2lsRmFpbDtcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbFpGYWlsID0gc3RlbmNpbFpGYWlsO1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsWlBhc3MgPSBzdGVuY2lsWlBhc3M7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRMb2NrZWQ6IGZ1bmN0aW9uICggbG9jayApIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBsb2NrO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRDbGVhcjogZnVuY3Rpb24gKCBzdGVuY2lsICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudFN0ZW5jaWxDbGVhciAhPT0gc3RlbmNpbCApIHtcblxuXHRcdFx0XHRcdGdsLmNsZWFyU3RlbmNpbCggc3RlbmNpbCApO1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsQ2xlYXIgPSBzdGVuY2lsO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0cmVzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjdXJyZW50U3RlbmNpbE1hc2sgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbEZ1bmMgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbFJlZiA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsRnVuY01hc2sgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbEZhaWwgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbFpGYWlsID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxaUGFzcyA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsQ2xlYXIgPSBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH1cblxuXHQvL1xuXG5cdGNvbnN0IGNvbG9yQnVmZmVyID0gbmV3IENvbG9yQnVmZmVyKCk7XG5cdGNvbnN0IGRlcHRoQnVmZmVyID0gbmV3IERlcHRoQnVmZmVyKCk7XG5cdGNvbnN0IHN0ZW5jaWxCdWZmZXIgPSBuZXcgU3RlbmNpbEJ1ZmZlcigpO1xuXG5cdGNvbnN0IHVib0JpbmRpbmdzID0gbmV3IFdlYWtNYXAoKTtcblx0Y29uc3QgdWJvUHJvZ3JhbU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5cblx0bGV0IGVuYWJsZWRDYXBhYmlsaXRpZXMgPSB7fTtcblxuXHRsZXQgY3VycmVudEJvdW5kRnJhbWVidWZmZXJzID0ge307XG5cdGxldCBjdXJyZW50RHJhd2J1ZmZlcnMgPSBuZXcgV2Vha01hcCgpO1xuXHRsZXQgZGVmYXVsdERyYXdidWZmZXJzID0gW107XG5cblx0bGV0IGN1cnJlbnRQcm9ncmFtID0gbnVsbDtcblxuXHRsZXQgY3VycmVudEJsZW5kaW5nRW5hYmxlZCA9IGZhbHNlO1xuXHRsZXQgY3VycmVudEJsZW5kaW5nID0gbnVsbDtcblx0bGV0IGN1cnJlbnRCbGVuZEVxdWF0aW9uID0gbnVsbDtcblx0bGV0IGN1cnJlbnRCbGVuZFNyYyA9IG51bGw7XG5cdGxldCBjdXJyZW50QmxlbmREc3QgPSBudWxsO1xuXHRsZXQgY3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSA9IG51bGw7XG5cdGxldCBjdXJyZW50QmxlbmRTcmNBbHBoYSA9IG51bGw7XG5cdGxldCBjdXJyZW50QmxlbmREc3RBbHBoYSA9IG51bGw7XG5cdGxldCBjdXJyZW50QmxlbmRDb2xvciA9IG5ldyBDb2xvciggMCwgMCwgMCApO1xuXHRsZXQgY3VycmVudEJsZW5kQWxwaGEgPSAwO1xuXHRsZXQgY3VycmVudFByZW11bHRpcGxlZEFscGhhID0gZmFsc2U7XG5cblx0bGV0IGN1cnJlbnRGbGlwU2lkZWQgPSBudWxsO1xuXHRsZXQgY3VycmVudEN1bGxGYWNlID0gbnVsbDtcblxuXHRsZXQgY3VycmVudExpbmVXaWR0aCA9IG51bGw7XG5cblx0bGV0IGN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yID0gbnVsbDtcblx0bGV0IGN1cnJlbnRQb2x5Z29uT2Zmc2V0VW5pdHMgPSBudWxsO1xuXG5cdGNvbnN0IG1heFRleHR1cmVzID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfQ09NQklORURfVEVYVFVSRV9JTUFHRV9VTklUUyApO1xuXG5cdGxldCBsaW5lV2lkdGhBdmFpbGFibGUgPSBmYWxzZTtcblx0bGV0IHZlcnNpb24gPSAwO1xuXHRjb25zdCBnbFZlcnNpb24gPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLlZFUlNJT04gKTtcblxuXHRpZiAoIGdsVmVyc2lvbi5pbmRleE9mKCAnV2ViR0wnICkgIT09IC0xICkge1xuXG5cdFx0dmVyc2lvbiA9IHBhcnNlRmxvYXQoIC9eV2ViR0wgKFxcZCkvLmV4ZWMoIGdsVmVyc2lvbiApWyAxIF0gKTtcblx0XHRsaW5lV2lkdGhBdmFpbGFibGUgPSAoIHZlcnNpb24gPj0gMS4wICk7XG5cblx0fSBlbHNlIGlmICggZ2xWZXJzaW9uLmluZGV4T2YoICdPcGVuR0wgRVMnICkgIT09IC0xICkge1xuXG5cdFx0dmVyc2lvbiA9IHBhcnNlRmxvYXQoIC9eT3BlbkdMIEVTIChcXGQpLy5leGVjKCBnbFZlcnNpb24gKVsgMSBdICk7XG5cdFx0bGluZVdpZHRoQXZhaWxhYmxlID0gKCB2ZXJzaW9uID49IDIuMCApO1xuXG5cdH1cblxuXHRsZXQgY3VycmVudFRleHR1cmVTbG90ID0gbnVsbDtcblx0bGV0IGN1cnJlbnRCb3VuZFRleHR1cmVzID0ge307XG5cblx0Y29uc3Qgc2Npc3NvclBhcmFtID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5TQ0lTU09SX0JPWCApO1xuXHRjb25zdCB2aWV3cG9ydFBhcmFtID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5WSUVXUE9SVCApO1xuXG5cdGNvbnN0IGN1cnJlbnRTY2lzc29yID0gbmV3IFZlY3RvcjQoKS5mcm9tQXJyYXkoIHNjaXNzb3JQYXJhbSApO1xuXHRjb25zdCBjdXJyZW50Vmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpLmZyb21BcnJheSggdmlld3BvcnRQYXJhbSApO1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZVRleHR1cmUoIHR5cGUsIHRhcmdldCwgY291bnQsIGRpbWVuc2lvbnMgKSB7XG5cblx0XHRjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoIDQgKTsgLy8gNCBpcyByZXF1aXJlZCB0byBtYXRjaCBkZWZhdWx0IHVucGFjayBhbGlnbm1lbnQgb2YgNC5cblx0XHRjb25zdCB0ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXG5cdFx0Z2wuYmluZFRleHR1cmUoIHR5cGUsIHRleHR1cmUgKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKCB0eXBlLCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLk5FQVJFU1QgKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKCB0eXBlLCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLk5FQVJFU1QgKTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGNvdW50OyBpICsrICkge1xuXG5cdFx0XHRpZiAoIHR5cGUgPT09IGdsLlRFWFRVUkVfM0QgfHwgdHlwZSA9PT0gZ2wuVEVYVFVSRV8yRF9BUlJBWSApIHtcblxuXHRcdFx0XHRnbC50ZXhJbWFnZTNEKCB0YXJnZXQsIDAsIGdsLlJHQkEsIDEsIDEsIGRpbWVuc2lvbnMsIDAsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIGRhdGEgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRnbC50ZXhJbWFnZTJEKCB0YXJnZXQgKyBpLCAwLCBnbC5SR0JBLCAxLCAxLCAwLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBkYXRhICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0ZXh0dXJlO1xuXG5cdH1cblxuXHRjb25zdCBlbXB0eVRleHR1cmVzID0ge307XG5cdGVtcHR5VGV4dHVyZXNbIGdsLlRFWFRVUkVfMkQgXSA9IGNyZWF0ZVRleHR1cmUoIGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfMkQsIDEgKTtcblx0ZW1wdHlUZXh0dXJlc1sgZ2wuVEVYVFVSRV9DVUJFX01BUCBdID0gY3JlYXRlVGV4dHVyZSggZ2wuVEVYVFVSRV9DVUJFX01BUCwgZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YLCA2ICk7XG5cdGVtcHR5VGV4dHVyZXNbIGdsLlRFWFRVUkVfMkRfQVJSQVkgXSA9IGNyZWF0ZVRleHR1cmUoIGdsLlRFWFRVUkVfMkRfQVJSQVksIGdsLlRFWFRVUkVfMkRfQVJSQVksIDEsIDEgKTtcblx0ZW1wdHlUZXh0dXJlc1sgZ2wuVEVYVFVSRV8zRCBdID0gY3JlYXRlVGV4dHVyZSggZ2wuVEVYVFVSRV8zRCwgZ2wuVEVYVFVSRV8zRCwgMSwgMSApO1xuXG5cdC8vIGluaXRcblxuXHRjb2xvckJ1ZmZlci5zZXRDbGVhciggMCwgMCwgMCwgMSApO1xuXHRkZXB0aEJ1ZmZlci5zZXRDbGVhciggMSApO1xuXHRzdGVuY2lsQnVmZmVyLnNldENsZWFyKCAwICk7XG5cblx0ZW5hYmxlKCBnbC5ERVBUSF9URVNUICk7XG5cdGRlcHRoQnVmZmVyLnNldEZ1bmMoIExlc3NFcXVhbERlcHRoICk7XG5cblx0c2V0RmxpcFNpZGVkKCBmYWxzZSApO1xuXHRzZXRDdWxsRmFjZSggQ3VsbEZhY2VCYWNrICk7XG5cdGVuYWJsZSggZ2wuQ1VMTF9GQUNFICk7XG5cblx0c2V0QmxlbmRpbmcoIE5vQmxlbmRpbmcgKTtcblxuXHQvL1xuXG5cdGZ1bmN0aW9uIGVuYWJsZSggaWQgKSB7XG5cblx0XHRpZiAoIGVuYWJsZWRDYXBhYmlsaXRpZXNbIGlkIF0gIT09IHRydWUgKSB7XG5cblx0XHRcdGdsLmVuYWJsZSggaWQgKTtcblx0XHRcdGVuYWJsZWRDYXBhYmlsaXRpZXNbIGlkIF0gPSB0cnVlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNhYmxlKCBpZCApIHtcblxuXHRcdGlmICggZW5hYmxlZENhcGFiaWxpdGllc1sgaWQgXSAhPT0gZmFsc2UgKSB7XG5cblx0XHRcdGdsLmRpc2FibGUoIGlkICk7XG5cdFx0XHRlbmFibGVkQ2FwYWJpbGl0aWVzWyBpZCBdID0gZmFsc2U7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGJpbmRGcmFtZWJ1ZmZlciggdGFyZ2V0LCBmcmFtZWJ1ZmZlciApIHtcblxuXHRcdGlmICggY3VycmVudEJvdW5kRnJhbWVidWZmZXJzWyB0YXJnZXQgXSAhPT0gZnJhbWVidWZmZXIgKSB7XG5cblx0XHRcdGdsLmJpbmRGcmFtZWJ1ZmZlciggdGFyZ2V0LCBmcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHRjdXJyZW50Qm91bmRGcmFtZWJ1ZmZlcnNbIHRhcmdldCBdID0gZnJhbWVidWZmZXI7XG5cblx0XHRcdC8vIGdsLkRSQVdfRlJBTUVCVUZGRVIgaXMgZXF1aXZhbGVudCB0byBnbC5GUkFNRUJVRkZFUlxuXG5cdFx0XHRpZiAoIHRhcmdldCA9PT0gZ2wuRFJBV19GUkFNRUJVRkZFUiApIHtcblxuXHRcdFx0XHRjdXJyZW50Qm91bmRGcmFtZWJ1ZmZlcnNbIGdsLkZSQU1FQlVGRkVSIF0gPSBmcmFtZWJ1ZmZlcjtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRhcmdldCA9PT0gZ2wuRlJBTUVCVUZGRVIgKSB7XG5cblx0XHRcdFx0Y3VycmVudEJvdW5kRnJhbWVidWZmZXJzWyBnbC5EUkFXX0ZSQU1FQlVGRkVSIF0gPSBmcmFtZWJ1ZmZlcjtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZHJhd0J1ZmZlcnMoIHJlbmRlclRhcmdldCwgZnJhbWVidWZmZXIgKSB7XG5cblx0XHRsZXQgZHJhd0J1ZmZlcnMgPSBkZWZhdWx0RHJhd2J1ZmZlcnM7XG5cblx0XHRsZXQgbmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHRkcmF3QnVmZmVycyA9IGN1cnJlbnREcmF3YnVmZmVycy5nZXQoIGZyYW1lYnVmZmVyICk7XG5cblx0XHRcdGlmICggZHJhd0J1ZmZlcnMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRkcmF3QnVmZmVycyA9IFtdO1xuXHRcdFx0XHRjdXJyZW50RHJhd2J1ZmZlcnMuc2V0KCBmcmFtZWJ1ZmZlciwgZHJhd0J1ZmZlcnMgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCB0ZXh0dXJlcyA9IHJlbmRlclRhcmdldC50ZXh0dXJlcztcblxuXHRcdFx0aWYgKCBkcmF3QnVmZmVycy5sZW5ndGggIT09IHRleHR1cmVzLmxlbmd0aCB8fCBkcmF3QnVmZmVyc1sgMCBdICE9PSBnbC5DT0xPUl9BVFRBQ0hNRU5UMCApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGV4dHVyZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRkcmF3QnVmZmVyc1sgaSBdID0gZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkcmF3QnVmZmVycy5sZW5ndGggPSB0ZXh0dXJlcy5sZW5ndGg7XG5cblx0XHRcdFx0bmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIGRyYXdCdWZmZXJzWyAwIF0gIT09IGdsLkJBQ0sgKSB7XG5cblx0XHRcdFx0ZHJhd0J1ZmZlcnNbIDAgXSA9IGdsLkJBQ0s7XG5cblx0XHRcdFx0bmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG5lZWRzVXBkYXRlICkge1xuXG5cdFx0XHRnbC5kcmF3QnVmZmVycyggZHJhd0J1ZmZlcnMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdXNlUHJvZ3JhbSggcHJvZ3JhbSApIHtcblxuXHRcdGlmICggY3VycmVudFByb2dyYW0gIT09IHByb2dyYW0gKSB7XG5cblx0XHRcdGdsLnVzZVByb2dyYW0oIHByb2dyYW0gKTtcblxuXHRcdFx0Y3VycmVudFByb2dyYW0gPSBwcm9ncmFtO1xuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9XG5cblx0Y29uc3QgZXF1YXRpb25Ub0dMID0ge1xuXHRcdFsgQWRkRXF1YXRpb24gXTogZ2wuRlVOQ19BREQsXG5cdFx0WyBTdWJ0cmFjdEVxdWF0aW9uIF06IGdsLkZVTkNfU1VCVFJBQ1QsXG5cdFx0WyBSZXZlcnNlU3VidHJhY3RFcXVhdGlvbiBdOiBnbC5GVU5DX1JFVkVSU0VfU1VCVFJBQ1Rcblx0fTtcblxuXHRlcXVhdGlvblRvR0xbIE1pbkVxdWF0aW9uIF0gPSBnbC5NSU47XG5cdGVxdWF0aW9uVG9HTFsgTWF4RXF1YXRpb24gXSA9IGdsLk1BWDtcblxuXHRjb25zdCBmYWN0b3JUb0dMID0ge1xuXHRcdFsgWmVyb0ZhY3RvciBdOiBnbC5aRVJPLFxuXHRcdFsgT25lRmFjdG9yIF06IGdsLk9ORSxcblx0XHRbIFNyY0NvbG9yRmFjdG9yIF06IGdsLlNSQ19DT0xPUixcblx0XHRbIFNyY0FscGhhRmFjdG9yIF06IGdsLlNSQ19BTFBIQSxcblx0XHRbIFNyY0FscGhhU2F0dXJhdGVGYWN0b3IgXTogZ2wuU1JDX0FMUEhBX1NBVFVSQVRFLFxuXHRcdFsgRHN0Q29sb3JGYWN0b3IgXTogZ2wuRFNUX0NPTE9SLFxuXHRcdFsgRHN0QWxwaGFGYWN0b3IgXTogZ2wuRFNUX0FMUEhBLFxuXHRcdFsgT25lTWludXNTcmNDb2xvckZhY3RvciBdOiBnbC5PTkVfTUlOVVNfU1JDX0NPTE9SLFxuXHRcdFsgT25lTWludXNTcmNBbHBoYUZhY3RvciBdOiBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBLFxuXHRcdFsgT25lTWludXNEc3RDb2xvckZhY3RvciBdOiBnbC5PTkVfTUlOVVNfRFNUX0NPTE9SLFxuXHRcdFsgT25lTWludXNEc3RBbHBoYUZhY3RvciBdOiBnbC5PTkVfTUlOVVNfRFNUX0FMUEhBLFxuXHRcdFsgQ29uc3RhbnRDb2xvckZhY3RvciBdOiBnbC5DT05TVEFOVF9DT0xPUixcblx0XHRbIE9uZU1pbnVzQ29uc3RhbnRDb2xvckZhY3RvciBdOiBnbC5PTkVfTUlOVVNfQ09OU1RBTlRfQ09MT1IsXG5cdFx0WyBDb25zdGFudEFscGhhRmFjdG9yIF06IGdsLkNPTlNUQU5UX0FMUEhBLFxuXHRcdFsgT25lTWludXNDb25zdGFudEFscGhhRmFjdG9yIF06IGdsLk9ORV9NSU5VU19DT05TVEFOVF9BTFBIQVxuXHR9O1xuXG5cdGZ1bmN0aW9uIHNldEJsZW5kaW5nKCBibGVuZGluZywgYmxlbmRFcXVhdGlvbiwgYmxlbmRTcmMsIGJsZW5kRHN0LCBibGVuZEVxdWF0aW9uQWxwaGEsIGJsZW5kU3JjQWxwaGEsIGJsZW5kRHN0QWxwaGEsIGJsZW5kQ29sb3IsIGJsZW5kQWxwaGEsIHByZW11bHRpcGxpZWRBbHBoYSApIHtcblxuXHRcdGlmICggYmxlbmRpbmcgPT09IE5vQmxlbmRpbmcgKSB7XG5cblx0XHRcdGlmICggY3VycmVudEJsZW5kaW5nRW5hYmxlZCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRkaXNhYmxlKCBnbC5CTEVORCApO1xuXHRcdFx0XHRjdXJyZW50QmxlbmRpbmdFbmFibGVkID0gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBjdXJyZW50QmxlbmRpbmdFbmFibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0ZW5hYmxlKCBnbC5CTEVORCApO1xuXHRcdFx0Y3VycmVudEJsZW5kaW5nRW5hYmxlZCA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJsZW5kaW5nICE9PSBDdXN0b21CbGVuZGluZyApIHtcblxuXHRcdFx0aWYgKCBibGVuZGluZyAhPT0gY3VycmVudEJsZW5kaW5nIHx8IHByZW11bHRpcGxpZWRBbHBoYSAhPT0gY3VycmVudFByZW11bHRpcGxlZEFscGhhICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudEJsZW5kRXF1YXRpb24gIT09IEFkZEVxdWF0aW9uIHx8IGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgIT09IEFkZEVxdWF0aW9uICkge1xuXG5cdFx0XHRcdFx0Z2wuYmxlbmRFcXVhdGlvbiggZ2wuRlVOQ19BREQgKTtcblxuXHRcdFx0XHRcdGN1cnJlbnRCbGVuZEVxdWF0aW9uID0gQWRkRXF1YXRpb247XG5cdFx0XHRcdFx0Y3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSA9IEFkZEVxdWF0aW9uO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHByZW11bHRpcGxpZWRBbHBoYSApIHtcblxuXHRcdFx0XHRcdHN3aXRjaCAoIGJsZW5kaW5nICkge1xuXG5cdFx0XHRcdFx0XHRjYXNlIE5vcm1hbEJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBLCBnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgQWRkaXRpdmVCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jKCBnbC5PTkUsIGdsLk9ORSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBTdWJ0cmFjdGl2ZUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggZ2wuWkVSTywgZ2wuT05FX01JTlVTX1NSQ19DT0xPUiwgZ2wuWkVSTywgZ2wuT05FICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIE11bHRpcGx5QmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCBnbC5EU1RfQ09MT1IsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEsIGdsLlpFUk8sIGdsLk9ORSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6IEludmFsaWQgYmxlbmRpbmc6ICcsIGJsZW5kaW5nICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRzd2l0Y2ggKCBibGVuZGluZyApIHtcblxuXHRcdFx0XHRcdFx0Y2FzZSBOb3JtYWxCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoIGdsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSwgZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIEFkZGl0aXZlQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCBnbC5TUkNfQUxQSEEsIGdsLk9ORSwgZ2wuT05FLCBnbC5PTkUgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgU3VidHJhY3RpdmVCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6IFN1YnRyYWN0aXZlQmxlbmRpbmcgcmVxdWlyZXMgbWF0ZXJpYWwucHJlbXVsdGlwbGllZEFscGhhID0gdHJ1ZScgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgTXVsdGlwbHlCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6IE11bHRpcGx5QmxlbmRpbmcgcmVxdWlyZXMgbWF0ZXJpYWwucHJlbXVsdGlwbGllZEFscGhhID0gdHJ1ZScgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOiBJbnZhbGlkIGJsZW5kaW5nOiAnLCBibGVuZGluZyApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y3VycmVudEJsZW5kU3JjID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudEJsZW5kRHN0ID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudEJsZW5kU3JjQWxwaGEgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50QmxlbmREc3RBbHBoYSA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRCbGVuZENvbG9yLnNldCggMCwgMCwgMCApO1xuXHRcdFx0XHRjdXJyZW50QmxlbmRBbHBoYSA9IDA7XG5cblx0XHRcdFx0Y3VycmVudEJsZW5kaW5nID0gYmxlbmRpbmc7XG5cdFx0XHRcdGN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSA9IHByZW11bHRpcGxpZWRBbHBoYTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHQvLyBjdXN0b20gYmxlbmRpbmdcblxuXHRcdGJsZW5kRXF1YXRpb25BbHBoYSA9IGJsZW5kRXF1YXRpb25BbHBoYSB8fCBibGVuZEVxdWF0aW9uO1xuXHRcdGJsZW5kU3JjQWxwaGEgPSBibGVuZFNyY0FscGhhIHx8IGJsZW5kU3JjO1xuXHRcdGJsZW5kRHN0QWxwaGEgPSBibGVuZERzdEFscGhhIHx8IGJsZW5kRHN0O1xuXG5cdFx0aWYgKCBibGVuZEVxdWF0aW9uICE9PSBjdXJyZW50QmxlbmRFcXVhdGlvbiB8fCBibGVuZEVxdWF0aW9uQWxwaGEgIT09IGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgKSB7XG5cblx0XHRcdGdsLmJsZW5kRXF1YXRpb25TZXBhcmF0ZSggZXF1YXRpb25Ub0dMWyBibGVuZEVxdWF0aW9uIF0sIGVxdWF0aW9uVG9HTFsgYmxlbmRFcXVhdGlvbkFscGhhIF0gKTtcblxuXHRcdFx0Y3VycmVudEJsZW5kRXF1YXRpb24gPSBibGVuZEVxdWF0aW9uO1xuXHRcdFx0Y3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSA9IGJsZW5kRXF1YXRpb25BbHBoYTtcblxuXHRcdH1cblxuXHRcdGlmICggYmxlbmRTcmMgIT09IGN1cnJlbnRCbGVuZFNyYyB8fCBibGVuZERzdCAhPT0gY3VycmVudEJsZW5kRHN0IHx8IGJsZW5kU3JjQWxwaGEgIT09IGN1cnJlbnRCbGVuZFNyY0FscGhhIHx8IGJsZW5kRHN0QWxwaGEgIT09IGN1cnJlbnRCbGVuZERzdEFscGhhICkge1xuXG5cdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggZmFjdG9yVG9HTFsgYmxlbmRTcmMgXSwgZmFjdG9yVG9HTFsgYmxlbmREc3QgXSwgZmFjdG9yVG9HTFsgYmxlbmRTcmNBbHBoYSBdLCBmYWN0b3JUb0dMWyBibGVuZERzdEFscGhhIF0gKTtcblxuXHRcdFx0Y3VycmVudEJsZW5kU3JjID0gYmxlbmRTcmM7XG5cdFx0XHRjdXJyZW50QmxlbmREc3QgPSBibGVuZERzdDtcblx0XHRcdGN1cnJlbnRCbGVuZFNyY0FscGhhID0gYmxlbmRTcmNBbHBoYTtcblx0XHRcdGN1cnJlbnRCbGVuZERzdEFscGhhID0gYmxlbmREc3RBbHBoYTtcblxuXHRcdH1cblxuXHRcdGlmICggYmxlbmRDb2xvci5lcXVhbHMoIGN1cnJlbnRCbGVuZENvbG9yICkgPT09IGZhbHNlIHx8IGJsZW5kQWxwaGEgIT09IGN1cnJlbnRCbGVuZEFscGhhICkge1xuXG5cdFx0XHRnbC5ibGVuZENvbG9yKCBibGVuZENvbG9yLnIsIGJsZW5kQ29sb3IuZywgYmxlbmRDb2xvci5iLCBibGVuZEFscGhhICk7XG5cblx0XHRcdGN1cnJlbnRCbGVuZENvbG9yLmNvcHkoIGJsZW5kQ29sb3IgKTtcblx0XHRcdGN1cnJlbnRCbGVuZEFscGhhID0gYmxlbmRBbHBoYTtcblxuXHRcdH1cblxuXHRcdGN1cnJlbnRCbGVuZGluZyA9IGJsZW5kaW5nO1xuXHRcdGN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSA9IGZhbHNlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRNYXRlcmlhbCggbWF0ZXJpYWwsIGZyb250RmFjZUNXICkge1xuXG5cdFx0bWF0ZXJpYWwuc2lkZSA9PT0gRG91YmxlU2lkZVxuXHRcdFx0PyBkaXNhYmxlKCBnbC5DVUxMX0ZBQ0UgKVxuXHRcdFx0OiBlbmFibGUoIGdsLkNVTExfRkFDRSApO1xuXG5cdFx0bGV0IGZsaXBTaWRlZCA9ICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKTtcblx0XHRpZiAoIGZyb250RmFjZUNXICkgZmxpcFNpZGVkID0gISBmbGlwU2lkZWQ7XG5cblx0XHRzZXRGbGlwU2lkZWQoIGZsaXBTaWRlZCApO1xuXG5cdFx0KCBtYXRlcmlhbC5ibGVuZGluZyA9PT0gTm9ybWFsQmxlbmRpbmcgJiYgbWF0ZXJpYWwudHJhbnNwYXJlbnQgPT09IGZhbHNlIClcblx0XHRcdD8gc2V0QmxlbmRpbmcoIE5vQmxlbmRpbmcgKVxuXHRcdFx0OiBzZXRCbGVuZGluZyggbWF0ZXJpYWwuYmxlbmRpbmcsIG1hdGVyaWFsLmJsZW5kRXF1YXRpb24sIG1hdGVyaWFsLmJsZW5kU3JjLCBtYXRlcmlhbC5ibGVuZERzdCwgbWF0ZXJpYWwuYmxlbmRFcXVhdGlvbkFscGhhLCBtYXRlcmlhbC5ibGVuZFNyY0FscGhhLCBtYXRlcmlhbC5ibGVuZERzdEFscGhhLCBtYXRlcmlhbC5ibGVuZENvbG9yLCBtYXRlcmlhbC5ibGVuZEFscGhhLCBtYXRlcmlhbC5wcmVtdWx0aXBsaWVkQWxwaGEgKTtcblxuXHRcdGRlcHRoQnVmZmVyLnNldEZ1bmMoIG1hdGVyaWFsLmRlcHRoRnVuYyApO1xuXHRcdGRlcHRoQnVmZmVyLnNldFRlc3QoIG1hdGVyaWFsLmRlcHRoVGVzdCApO1xuXHRcdGRlcHRoQnVmZmVyLnNldE1hc2soIG1hdGVyaWFsLmRlcHRoV3JpdGUgKTtcblx0XHRjb2xvckJ1ZmZlci5zZXRNYXNrKCBtYXRlcmlhbC5jb2xvcldyaXRlICk7XG5cblx0XHRjb25zdCBzdGVuY2lsV3JpdGUgPSBtYXRlcmlhbC5zdGVuY2lsV3JpdGU7XG5cdFx0c3RlbmNpbEJ1ZmZlci5zZXRUZXN0KCBzdGVuY2lsV3JpdGUgKTtcblx0XHRpZiAoIHN0ZW5jaWxXcml0ZSApIHtcblxuXHRcdFx0c3RlbmNpbEJ1ZmZlci5zZXRNYXNrKCBtYXRlcmlhbC5zdGVuY2lsV3JpdGVNYXNrICk7XG5cdFx0XHRzdGVuY2lsQnVmZmVyLnNldEZ1bmMoIG1hdGVyaWFsLnN0ZW5jaWxGdW5jLCBtYXRlcmlhbC5zdGVuY2lsUmVmLCBtYXRlcmlhbC5zdGVuY2lsRnVuY01hc2sgKTtcblx0XHRcdHN0ZW5jaWxCdWZmZXIuc2V0T3AoIG1hdGVyaWFsLnN0ZW5jaWxGYWlsLCBtYXRlcmlhbC5zdGVuY2lsWkZhaWwsIG1hdGVyaWFsLnN0ZW5jaWxaUGFzcyApO1xuXG5cdFx0fVxuXG5cdFx0c2V0UG9seWdvbk9mZnNldCggbWF0ZXJpYWwucG9seWdvbk9mZnNldCwgbWF0ZXJpYWwucG9seWdvbk9mZnNldEZhY3RvciwgbWF0ZXJpYWwucG9seWdvbk9mZnNldFVuaXRzICk7XG5cblx0XHRtYXRlcmlhbC5hbHBoYVRvQ292ZXJhZ2UgPT09IHRydWVcblx0XHRcdD8gZW5hYmxlKCBnbC5TQU1QTEVfQUxQSEFfVE9fQ09WRVJBR0UgKVxuXHRcdFx0OiBkaXNhYmxlKCBnbC5TQU1QTEVfQUxQSEFfVE9fQ09WRVJBR0UgKTtcblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBzZXRGbGlwU2lkZWQoIGZsaXBTaWRlZCApIHtcblxuXHRcdGlmICggY3VycmVudEZsaXBTaWRlZCAhPT0gZmxpcFNpZGVkICkge1xuXG5cdFx0XHRpZiAoIGZsaXBTaWRlZCApIHtcblxuXHRcdFx0XHRnbC5mcm9udEZhY2UoIGdsLkNXICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Z2wuZnJvbnRGYWNlKCBnbC5DQ1cgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjdXJyZW50RmxpcFNpZGVkID0gZmxpcFNpZGVkO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRDdWxsRmFjZSggY3VsbEZhY2UgKSB7XG5cblx0XHRpZiAoIGN1bGxGYWNlICE9PSBDdWxsRmFjZU5vbmUgKSB7XG5cblx0XHRcdGVuYWJsZSggZ2wuQ1VMTF9GQUNFICk7XG5cblx0XHRcdGlmICggY3VsbEZhY2UgIT09IGN1cnJlbnRDdWxsRmFjZSApIHtcblxuXHRcdFx0XHRpZiAoIGN1bGxGYWNlID09PSBDdWxsRmFjZUJhY2sgKSB7XG5cblx0XHRcdFx0XHRnbC5jdWxsRmFjZSggZ2wuQkFDSyApO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGN1bGxGYWNlID09PSBDdWxsRmFjZUZyb250ICkge1xuXG5cdFx0XHRcdFx0Z2wuY3VsbEZhY2UoIGdsLkZST05UICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGdsLmN1bGxGYWNlKCBnbC5GUk9OVF9BTkRfQkFDSyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0ZGlzYWJsZSggZ2wuQ1VMTF9GQUNFICk7XG5cblx0XHR9XG5cblx0XHRjdXJyZW50Q3VsbEZhY2UgPSBjdWxsRmFjZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0TGluZVdpZHRoKCB3aWR0aCApIHtcblxuXHRcdGlmICggd2lkdGggIT09IGN1cnJlbnRMaW5lV2lkdGggKSB7XG5cblx0XHRcdGlmICggbGluZVdpZHRoQXZhaWxhYmxlICkgZ2wubGluZVdpZHRoKCB3aWR0aCApO1xuXG5cdFx0XHRjdXJyZW50TGluZVdpZHRoID0gd2lkdGg7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFBvbHlnb25PZmZzZXQoIHBvbHlnb25PZmZzZXQsIGZhY3RvciwgdW5pdHMgKSB7XG5cblx0XHRpZiAoIHBvbHlnb25PZmZzZXQgKSB7XG5cblx0XHRcdGVuYWJsZSggZ2wuUE9MWUdPTl9PRkZTRVRfRklMTCApO1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yICE9PSBmYWN0b3IgfHwgY3VycmVudFBvbHlnb25PZmZzZXRVbml0cyAhPT0gdW5pdHMgKSB7XG5cblx0XHRcdFx0Z2wucG9seWdvbk9mZnNldCggZmFjdG9yLCB1bml0cyApO1xuXG5cdFx0XHRcdGN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yID0gZmFjdG9yO1xuXHRcdFx0XHRjdXJyZW50UG9seWdvbk9mZnNldFVuaXRzID0gdW5pdHM7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRpc2FibGUoIGdsLlBPTFlHT05fT0ZGU0VUX0ZJTEwgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0U2Npc3NvclRlc3QoIHNjaXNzb3JUZXN0ICkge1xuXG5cdFx0aWYgKCBzY2lzc29yVGVzdCApIHtcblxuXHRcdFx0ZW5hYmxlKCBnbC5TQ0lTU09SX1RFU1QgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRpc2FibGUoIGdsLlNDSVNTT1JfVEVTVCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyB0ZXh0dXJlXG5cblx0ZnVuY3Rpb24gYWN0aXZlVGV4dHVyZSggd2ViZ2xTbG90ICkge1xuXG5cdFx0aWYgKCB3ZWJnbFNsb3QgPT09IHVuZGVmaW5lZCApIHdlYmdsU2xvdCA9IGdsLlRFWFRVUkUwICsgbWF4VGV4dHVyZXMgLSAxO1xuXG5cdFx0aWYgKCBjdXJyZW50VGV4dHVyZVNsb3QgIT09IHdlYmdsU2xvdCApIHtcblxuXHRcdFx0Z2wuYWN0aXZlVGV4dHVyZSggd2ViZ2xTbG90ICk7XG5cdFx0XHRjdXJyZW50VGV4dHVyZVNsb3QgPSB3ZWJnbFNsb3Q7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGJpbmRUZXh0dXJlKCB3ZWJnbFR5cGUsIHdlYmdsVGV4dHVyZSwgd2ViZ2xTbG90ICkge1xuXG5cdFx0aWYgKCB3ZWJnbFNsb3QgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCBjdXJyZW50VGV4dHVyZVNsb3QgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0d2ViZ2xTbG90ID0gZ2wuVEVYVFVSRTAgKyBtYXhUZXh0dXJlcyAtIDE7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0d2ViZ2xTbG90ID0gY3VycmVudFRleHR1cmVTbG90O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRsZXQgYm91bmRUZXh0dXJlID0gY3VycmVudEJvdW5kVGV4dHVyZXNbIHdlYmdsU2xvdCBdO1xuXG5cdFx0aWYgKCBib3VuZFRleHR1cmUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ym91bmRUZXh0dXJlID0geyB0eXBlOiB1bmRlZmluZWQsIHRleHR1cmU6IHVuZGVmaW5lZCB9O1xuXHRcdFx0Y3VycmVudEJvdW5kVGV4dHVyZXNbIHdlYmdsU2xvdCBdID0gYm91bmRUZXh0dXJlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBib3VuZFRleHR1cmUudHlwZSAhPT0gd2ViZ2xUeXBlIHx8IGJvdW5kVGV4dHVyZS50ZXh0dXJlICE9PSB3ZWJnbFRleHR1cmUgKSB7XG5cblx0XHRcdGlmICggY3VycmVudFRleHR1cmVTbG90ICE9PSB3ZWJnbFNsb3QgKSB7XG5cblx0XHRcdFx0Z2wuYWN0aXZlVGV4dHVyZSggd2ViZ2xTbG90ICk7XG5cdFx0XHRcdGN1cnJlbnRUZXh0dXJlU2xvdCA9IHdlYmdsU2xvdDtcblxuXHRcdFx0fVxuXG5cdFx0XHRnbC5iaW5kVGV4dHVyZSggd2ViZ2xUeXBlLCB3ZWJnbFRleHR1cmUgfHwgZW1wdHlUZXh0dXJlc1sgd2ViZ2xUeXBlIF0gKTtcblxuXHRcdFx0Ym91bmRUZXh0dXJlLnR5cGUgPSB3ZWJnbFR5cGU7XG5cdFx0XHRib3VuZFRleHR1cmUudGV4dHVyZSA9IHdlYmdsVGV4dHVyZTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdW5iaW5kVGV4dHVyZSgpIHtcblxuXHRcdGNvbnN0IGJvdW5kVGV4dHVyZSA9IGN1cnJlbnRCb3VuZFRleHR1cmVzWyBjdXJyZW50VGV4dHVyZVNsb3QgXTtcblxuXHRcdGlmICggYm91bmRUZXh0dXJlICE9PSB1bmRlZmluZWQgJiYgYm91bmRUZXh0dXJlLnR5cGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Z2wuYmluZFRleHR1cmUoIGJvdW5kVGV4dHVyZS50eXBlLCBudWxsICk7XG5cblx0XHRcdGJvdW5kVGV4dHVyZS50eXBlID0gdW5kZWZpbmVkO1xuXHRcdFx0Ym91bmRUZXh0dXJlLnRleHR1cmUgPSB1bmRlZmluZWQ7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNvbXByZXNzZWRUZXhJbWFnZTJEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wuY29tcHJlc3NlZFRleEltYWdlMkQoIC4uLmFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBjb21wcmVzc2VkVGV4SW1hZ2UzRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLmNvbXByZXNzZWRUZXhJbWFnZTNEKCAuLi5hcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4U3ViSW1hZ2UyRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLnRleFN1YkltYWdlMkQoIC4uLmFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB0ZXhTdWJJbWFnZTNEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wudGV4U3ViSW1hZ2UzRCggLi4uYXJndW1lbnRzICk7XG5cblx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOicsIGVycm9yICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNvbXByZXNzZWRUZXhTdWJJbWFnZTJEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wuY29tcHJlc3NlZFRleFN1YkltYWdlMkQoIC4uLmFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBjb21wcmVzc2VkVGV4U3ViSW1hZ2UzRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLmNvbXByZXNzZWRUZXhTdWJJbWFnZTNEKCAuLi5hcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4U3RvcmFnZTJEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wudGV4U3RvcmFnZTJEKCAuLi5hcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4U3RvcmFnZTNEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wudGV4U3RvcmFnZTNEKCAuLi5hcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4SW1hZ2UyRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLnRleEltYWdlMkQoIC4uLmFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB0ZXhJbWFnZTNEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wudGV4SW1hZ2UzRCggLi4uYXJndW1lbnRzICk7XG5cblx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOicsIGVycm9yICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vXG5cblx0ZnVuY3Rpb24gc2Npc3Nvciggc2Npc3NvciApIHtcblxuXHRcdGlmICggY3VycmVudFNjaXNzb3IuZXF1YWxzKCBzY2lzc29yICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRnbC5zY2lzc29yKCBzY2lzc29yLngsIHNjaXNzb3IueSwgc2Npc3Nvci56LCBzY2lzc29yLncgKTtcblx0XHRcdGN1cnJlbnRTY2lzc29yLmNvcHkoIHNjaXNzb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdmlld3BvcnQoIHZpZXdwb3J0ICkge1xuXG5cdFx0aWYgKCBjdXJyZW50Vmlld3BvcnQuZXF1YWxzKCB2aWV3cG9ydCApID09PSBmYWxzZSApIHtcblxuXHRcdFx0Z2wudmlld3BvcnQoIHZpZXdwb3J0LngsIHZpZXdwb3J0LnksIHZpZXdwb3J0LnosIHZpZXdwb3J0LncgKTtcblx0XHRcdGN1cnJlbnRWaWV3cG9ydC5jb3B5KCB2aWV3cG9ydCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVVQk9NYXBwaW5nKCB1bmlmb3Jtc0dyb3VwLCBwcm9ncmFtICkge1xuXG5cdFx0bGV0IG1hcHBpbmcgPSB1Ym9Qcm9ncmFtTWFwLmdldCggcHJvZ3JhbSApO1xuXG5cdFx0aWYgKCBtYXBwaW5nID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdG1hcHBpbmcgPSBuZXcgV2Vha01hcCgpO1xuXG5cdFx0XHR1Ym9Qcm9ncmFtTWFwLnNldCggcHJvZ3JhbSwgbWFwcGluZyApO1xuXG5cdFx0fVxuXG5cdFx0bGV0IGJsb2NrSW5kZXggPSBtYXBwaW5nLmdldCggdW5pZm9ybXNHcm91cCApO1xuXG5cdFx0aWYgKCBibG9ja0luZGV4ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJsb2NrSW5kZXggPSBnbC5nZXRVbmlmb3JtQmxvY2tJbmRleCggcHJvZ3JhbSwgdW5pZm9ybXNHcm91cC5uYW1lICk7XG5cblx0XHRcdG1hcHBpbmcuc2V0KCB1bmlmb3Jtc0dyb3VwLCBibG9ja0luZGV4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVuaWZvcm1CbG9ja0JpbmRpbmcoIHVuaWZvcm1zR3JvdXAsIHByb2dyYW0gKSB7XG5cblx0XHRjb25zdCBtYXBwaW5nID0gdWJvUHJvZ3JhbU1hcC5nZXQoIHByb2dyYW0gKTtcblx0XHRjb25zdCBibG9ja0luZGV4ID0gbWFwcGluZy5nZXQoIHVuaWZvcm1zR3JvdXAgKTtcblxuXHRcdGlmICggdWJvQmluZGluZ3MuZ2V0KCBwcm9ncmFtICkgIT09IGJsb2NrSW5kZXggKSB7XG5cblx0XHRcdC8vIGJpbmQgc2hhZGVyIHNwZWNpZmljIGJsb2NrIGluZGV4IHRvIGdsb2JhbCBibG9jayBwb2ludFxuXHRcdFx0Z2wudW5pZm9ybUJsb2NrQmluZGluZyggcHJvZ3JhbSwgYmxvY2tJbmRleCwgdW5pZm9ybXNHcm91cC5fX2JpbmRpbmdQb2ludEluZGV4ICk7XG5cblx0XHRcdHVib0JpbmRpbmdzLnNldCggcHJvZ3JhbSwgYmxvY2tJbmRleCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIHJlc2V0KCkge1xuXG5cdFx0Ly8gcmVzZXQgc3RhdGVcblxuXHRcdGdsLmRpc2FibGUoIGdsLkJMRU5EICk7XG5cdFx0Z2wuZGlzYWJsZSggZ2wuQ1VMTF9GQUNFICk7XG5cdFx0Z2wuZGlzYWJsZSggZ2wuREVQVEhfVEVTVCApO1xuXHRcdGdsLmRpc2FibGUoIGdsLlBPTFlHT05fT0ZGU0VUX0ZJTEwgKTtcblx0XHRnbC5kaXNhYmxlKCBnbC5TQ0lTU09SX1RFU1QgKTtcblx0XHRnbC5kaXNhYmxlKCBnbC5TVEVOQ0lMX1RFU1QgKTtcblx0XHRnbC5kaXNhYmxlKCBnbC5TQU1QTEVfQUxQSEFfVE9fQ09WRVJBR0UgKTtcblxuXHRcdGdsLmJsZW5kRXF1YXRpb24oIGdsLkZVTkNfQUREICk7XG5cdFx0Z2wuYmxlbmRGdW5jKCBnbC5PTkUsIGdsLlpFUk8gKTtcblx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggZ2wuT05FLCBnbC5aRVJPLCBnbC5PTkUsIGdsLlpFUk8gKTtcblx0XHRnbC5ibGVuZENvbG9yKCAwLCAwLCAwLCAwICk7XG5cblx0XHRnbC5jb2xvck1hc2soIHRydWUsIHRydWUsIHRydWUsIHRydWUgKTtcblx0XHRnbC5jbGVhckNvbG9yKCAwLCAwLCAwLCAwICk7XG5cblx0XHRnbC5kZXB0aE1hc2soIHRydWUgKTtcblx0XHRnbC5kZXB0aEZ1bmMoIGdsLkxFU1MgKTtcblxuXHRcdGRlcHRoQnVmZmVyLnNldFJldmVyc2VkKCBmYWxzZSApO1xuXG5cdFx0Z2wuY2xlYXJEZXB0aCggMSApO1xuXG5cdFx0Z2wuc3RlbmNpbE1hc2soIDB4ZmZmZmZmZmYgKTtcblx0XHRnbC5zdGVuY2lsRnVuYyggZ2wuQUxXQVlTLCAwLCAweGZmZmZmZmZmICk7XG5cdFx0Z2wuc3RlbmNpbE9wKCBnbC5LRUVQLCBnbC5LRUVQLCBnbC5LRUVQICk7XG5cdFx0Z2wuY2xlYXJTdGVuY2lsKCAwICk7XG5cblx0XHRnbC5jdWxsRmFjZSggZ2wuQkFDSyApO1xuXHRcdGdsLmZyb250RmFjZSggZ2wuQ0NXICk7XG5cblx0XHRnbC5wb2x5Z29uT2Zmc2V0KCAwLCAwICk7XG5cblx0XHRnbC5hY3RpdmVUZXh0dXJlKCBnbC5URVhUVVJFMCApO1xuXG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKCBnbC5GUkFNRUJVRkZFUiwgbnVsbCApO1xuXHRcdGdsLmJpbmRGcmFtZWJ1ZmZlciggZ2wuRFJBV19GUkFNRUJVRkZFUiwgbnVsbCApO1xuXHRcdGdsLmJpbmRGcmFtZWJ1ZmZlciggZ2wuUkVBRF9GUkFNRUJVRkZFUiwgbnVsbCApO1xuXG5cdFx0Z2wudXNlUHJvZ3JhbSggbnVsbCApO1xuXG5cdFx0Z2wubGluZVdpZHRoKCAxICk7XG5cblx0XHRnbC5zY2lzc29yKCAwLCAwLCBnbC5jYW52YXMud2lkdGgsIGdsLmNhbnZhcy5oZWlnaHQgKTtcblx0XHRnbC52aWV3cG9ydCggMCwgMCwgZ2wuY2FudmFzLndpZHRoLCBnbC5jYW52YXMuaGVpZ2h0ICk7XG5cblx0XHQvLyByZXNldCBpbnRlcm5hbHNcblxuXHRcdGVuYWJsZWRDYXBhYmlsaXRpZXMgPSB7fTtcblxuXHRcdGN1cnJlbnRUZXh0dXJlU2xvdCA9IG51bGw7XG5cdFx0Y3VycmVudEJvdW5kVGV4dHVyZXMgPSB7fTtcblxuXHRcdGN1cnJlbnRCb3VuZEZyYW1lYnVmZmVycyA9IHt9O1xuXHRcdGN1cnJlbnREcmF3YnVmZmVycyA9IG5ldyBXZWFrTWFwKCk7XG5cdFx0ZGVmYXVsdERyYXdidWZmZXJzID0gW107XG5cblx0XHRjdXJyZW50UHJvZ3JhbSA9IG51bGw7XG5cblx0XHRjdXJyZW50QmxlbmRpbmdFbmFibGVkID0gZmFsc2U7XG5cdFx0Y3VycmVudEJsZW5kaW5nID0gbnVsbDtcblx0XHRjdXJyZW50QmxlbmRFcXVhdGlvbiA9IG51bGw7XG5cdFx0Y3VycmVudEJsZW5kU3JjID0gbnVsbDtcblx0XHRjdXJyZW50QmxlbmREc3QgPSBudWxsO1xuXHRcdGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgPSBudWxsO1xuXHRcdGN1cnJlbnRCbGVuZFNyY0FscGhhID0gbnVsbDtcblx0XHRjdXJyZW50QmxlbmREc3RBbHBoYSA9IG51bGw7XG5cdFx0Y3VycmVudEJsZW5kQ29sb3IgPSBuZXcgQ29sb3IoIDAsIDAsIDAgKTtcblx0XHRjdXJyZW50QmxlbmRBbHBoYSA9IDA7XG5cdFx0Y3VycmVudFByZW11bHRpcGxlZEFscGhhID0gZmFsc2U7XG5cblx0XHRjdXJyZW50RmxpcFNpZGVkID0gbnVsbDtcblx0XHRjdXJyZW50Q3VsbEZhY2UgPSBudWxsO1xuXG5cdFx0Y3VycmVudExpbmVXaWR0aCA9IG51bGw7XG5cblx0XHRjdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciA9IG51bGw7XG5cdFx0Y3VycmVudFBvbHlnb25PZmZzZXRVbml0cyA9IG51bGw7XG5cblx0XHRjdXJyZW50U2Npc3Nvci5zZXQoIDAsIDAsIGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCApO1xuXHRcdGN1cnJlbnRWaWV3cG9ydC5zZXQoIDAsIDAsIGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCApO1xuXG5cdFx0Y29sb3JCdWZmZXIucmVzZXQoKTtcblx0XHRkZXB0aEJ1ZmZlci5yZXNldCgpO1xuXHRcdHN0ZW5jaWxCdWZmZXIucmVzZXQoKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGJ1ZmZlcnM6IHtcblx0XHRcdGNvbG9yOiBjb2xvckJ1ZmZlcixcblx0XHRcdGRlcHRoOiBkZXB0aEJ1ZmZlcixcblx0XHRcdHN0ZW5jaWw6IHN0ZW5jaWxCdWZmZXJcblx0XHR9LFxuXG5cdFx0ZW5hYmxlOiBlbmFibGUsXG5cdFx0ZGlzYWJsZTogZGlzYWJsZSxcblxuXHRcdGJpbmRGcmFtZWJ1ZmZlcjogYmluZEZyYW1lYnVmZmVyLFxuXHRcdGRyYXdCdWZmZXJzOiBkcmF3QnVmZmVycyxcblxuXHRcdHVzZVByb2dyYW06IHVzZVByb2dyYW0sXG5cblx0XHRzZXRCbGVuZGluZzogc2V0QmxlbmRpbmcsXG5cdFx0c2V0TWF0ZXJpYWw6IHNldE1hdGVyaWFsLFxuXG5cdFx0c2V0RmxpcFNpZGVkOiBzZXRGbGlwU2lkZWQsXG5cdFx0c2V0Q3VsbEZhY2U6IHNldEN1bGxGYWNlLFxuXG5cdFx0c2V0TGluZVdpZHRoOiBzZXRMaW5lV2lkdGgsXG5cdFx0c2V0UG9seWdvbk9mZnNldDogc2V0UG9seWdvbk9mZnNldCxcblxuXHRcdHNldFNjaXNzb3JUZXN0OiBzZXRTY2lzc29yVGVzdCxcblxuXHRcdGFjdGl2ZVRleHR1cmU6IGFjdGl2ZVRleHR1cmUsXG5cdFx0YmluZFRleHR1cmU6IGJpbmRUZXh0dXJlLFxuXHRcdHVuYmluZFRleHR1cmU6IHVuYmluZFRleHR1cmUsXG5cdFx0Y29tcHJlc3NlZFRleEltYWdlMkQ6IGNvbXByZXNzZWRUZXhJbWFnZTJELFxuXHRcdGNvbXByZXNzZWRUZXhJbWFnZTNEOiBjb21wcmVzc2VkVGV4SW1hZ2UzRCxcblx0XHR0ZXhJbWFnZTJEOiB0ZXhJbWFnZTJELFxuXHRcdHRleEltYWdlM0Q6IHRleEltYWdlM0QsXG5cblx0XHR1cGRhdGVVQk9NYXBwaW5nOiB1cGRhdGVVQk9NYXBwaW5nLFxuXHRcdHVuaWZvcm1CbG9ja0JpbmRpbmc6IHVuaWZvcm1CbG9ja0JpbmRpbmcsXG5cblx0XHR0ZXhTdG9yYWdlMkQ6IHRleFN0b3JhZ2UyRCxcblx0XHR0ZXhTdG9yYWdlM0Q6IHRleFN0b3JhZ2UzRCxcblx0XHR0ZXhTdWJJbWFnZTJEOiB0ZXhTdWJJbWFnZTJELFxuXHRcdHRleFN1YkltYWdlM0Q6IHRleFN1YkltYWdlM0QsXG5cdFx0Y29tcHJlc3NlZFRleFN1YkltYWdlMkQ6IGNvbXByZXNzZWRUZXhTdWJJbWFnZTJELFxuXHRcdGNvbXByZXNzZWRUZXhTdWJJbWFnZTNEOiBjb21wcmVzc2VkVGV4U3ViSW1hZ2UzRCxcblxuXHRcdHNjaXNzb3I6IHNjaXNzb3IsXG5cdFx0dmlld3BvcnQ6IHZpZXdwb3J0LFxuXG5cdFx0cmVzZXQ6IHJlc2V0XG5cblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTFRleHR1cmVzKCBfZ2wsIGV4dGVuc2lvbnMsIHN0YXRlLCBwcm9wZXJ0aWVzLCBjYXBhYmlsaXRpZXMsIHV0aWxzLCBpbmZvICkge1xuXG5cdGNvbnN0IG11bHRpc2FtcGxlZFJUVEV4dCA9IGV4dGVuc2lvbnMuaGFzKCAnV0VCR0xfbXVsdGlzYW1wbGVkX3JlbmRlcl90b190ZXh0dXJlJyApID8gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9tdWx0aXNhbXBsZWRfcmVuZGVyX3RvX3RleHR1cmUnICkgOiBudWxsO1xuXHRjb25zdCBzdXBwb3J0c0ludmFsaWRhdGVGcmFtZWJ1ZmZlciA9IHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnID8gZmFsc2UgOiAvT2N1bHVzQnJvd3Nlci9nLnRlc3QoIG5hdmlnYXRvci51c2VyQWdlbnQgKTtcblxuXHRjb25zdCBfaW1hZ2VEaW1lbnNpb25zID0gbmV3IFZlY3RvcjIoKTtcblx0Y29uc3QgX3ZpZGVvVGV4dHVyZXMgPSBuZXcgV2Vha01hcCgpO1xuXHRsZXQgX2NhbnZhcztcblxuXHRjb25zdCBfc291cmNlcyA9IG5ldyBXZWFrTWFwKCk7IC8vIG1hcHMgV2ViZ2xUZXh0dXJlIG9iamVjdHMgdG8gaW5zdGFuY2VzIG9mIFNvdXJjZVxuXG5cdC8vIGNvcmRvdmEgaU9TIChhcyBvZiA1LjApIHN0aWxsIHVzZXMgVUlXZWJWaWV3LCB3aGljaCBwcm92aWRlcyBPZmZzY3JlZW5DYW52YXMsXG5cdC8vIGFsc28gT2Zmc2NyZWVuQ2FudmFzLmdldENvbnRleHQoXCJ3ZWJnbFwiKSwgYnV0IG5vdCBPZmZzY3JlZW5DYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpIVxuXHQvLyBTb21lIGltcGxlbWVudGF0aW9ucyBtYXkgb25seSBpbXBsZW1lbnQgT2Zmc2NyZWVuQ2FudmFzIHBhcnRpYWxseSAoZS5nLiBsYWNraW5nIDJkKS5cblxuXHRsZXQgdXNlT2Zmc2NyZWVuQ2FudmFzID0gZmFsc2U7XG5cblx0dHJ5IHtcblxuXHRcdHVzZU9mZnNjcmVlbkNhbnZhcyA9IHR5cGVvZiBPZmZzY3JlZW5DYW52YXMgIT09ICd1bmRlZmluZWQnXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGF0L2NvbXBhdFxuXHRcdFx0JiYgKCBuZXcgT2Zmc2NyZWVuQ2FudmFzKCAxLCAxICkuZ2V0Q29udGV4dCggJzJkJyApICkgIT09IG51bGw7XG5cblx0fSBjYXRjaCAoIGVyciApIHtcblxuXHRcdC8vIElnbm9yZSBhbnkgZXJyb3JzXG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZUNhbnZhcyggd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdC8vIFVzZSBPZmZzY3JlZW5DYW52YXMgd2hlbiBhdmFpbGFibGUuIFNwZWNpYWxseSBuZWVkZWQgaW4gd2ViIHdvcmtlcnNcblxuXHRcdHJldHVybiB1c2VPZmZzY3JlZW5DYW52YXMgP1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBhdC9jb21wYXRcblx0XHRcdG5ldyBPZmZzY3JlZW5DYW52YXMoIHdpZHRoLCBoZWlnaHQgKSA6IGNyZWF0ZUVsZW1lbnROUyggJ2NhbnZhcycgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVzaXplSW1hZ2UoIGltYWdlLCBuZWVkc05ld0NhbnZhcywgbWF4U2l6ZSApIHtcblxuXHRcdGxldCBzY2FsZSA9IDE7XG5cblx0XHRjb25zdCBkaW1lbnNpb25zID0gZ2V0RGltZW5zaW9ucyggaW1hZ2UgKTtcblxuXHRcdC8vIGhhbmRsZSBjYXNlIGlmIHRleHR1cmUgZXhjZWVkcyBtYXggc2l6ZVxuXG5cdFx0aWYgKCBkaW1lbnNpb25zLndpZHRoID4gbWF4U2l6ZSB8fCBkaW1lbnNpb25zLmhlaWdodCA+IG1heFNpemUgKSB7XG5cblx0XHRcdHNjYWxlID0gbWF4U2l6ZSAvIE1hdGgubWF4KCBkaW1lbnNpb25zLndpZHRoLCBkaW1lbnNpb25zLmhlaWdodCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gb25seSBwZXJmb3JtIHJlc2l6ZSBpZiBuZWNlc3NhcnlcblxuXHRcdGlmICggc2NhbGUgPCAxICkge1xuXG5cdFx0XHQvLyBvbmx5IHBlcmZvcm0gcmVzaXplIGZvciBjZXJ0YWluIGltYWdlIHR5cGVzXG5cblx0XHRcdGlmICggKCB0eXBlb2YgSFRNTEltYWdlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50ICkgfHxcblx0XHRcdFx0KCB0eXBlb2YgSFRNTENhbnZhc0VsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQgKSB8fFxuXHRcdFx0XHQoIHR5cGVvZiBJbWFnZUJpdG1hcCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZUJpdG1hcCApIHx8XG5cdFx0XHRcdCggdHlwZW9mIFZpZGVvRnJhbWUgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgVmlkZW9GcmFtZSApICkge1xuXG5cdFx0XHRcdGNvbnN0IHdpZHRoID0gTWF0aC5mbG9vciggc2NhbGUgKiBkaW1lbnNpb25zLndpZHRoICk7XG5cdFx0XHRcdGNvbnN0IGhlaWdodCA9IE1hdGguZmxvb3IoIHNjYWxlICogZGltZW5zaW9ucy5oZWlnaHQgKTtcblxuXHRcdFx0XHRpZiAoIF9jYW52YXMgPT09IHVuZGVmaW5lZCApIF9jYW52YXMgPSBjcmVhdGVDYW52YXMoIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdFx0XHQvLyBjdWJlIHRleHR1cmVzIGNhbid0IHJldXNlIHRoZSBzYW1lIGNhbnZhc1xuXG5cdFx0XHRcdGNvbnN0IGNhbnZhcyA9IG5lZWRzTmV3Q2FudmFzID8gY3JlYXRlQ2FudmFzKCB3aWR0aCwgaGVpZ2h0ICkgOiBfY2FudmFzO1xuXG5cdFx0XHRcdGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuXHRcdFx0XHRjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0XHRcdGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCggJzJkJyApO1xuXHRcdFx0XHRjb250ZXh0LmRyYXdJbWFnZSggaW1hZ2UsIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIGhhcyBiZWVuIHJlc2l6ZWQgZnJvbSAoJyArIGRpbWVuc2lvbnMud2lkdGggKyAneCcgKyBkaW1lbnNpb25zLmhlaWdodCArICcpIHRvICgnICsgd2lkdGggKyAneCcgKyBoZWlnaHQgKyAnKS4nICk7XG5cblx0XHRcdFx0cmV0dXJuIGNhbnZhcztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoICdkYXRhJyBpbiBpbWFnZSApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEltYWdlIGluIERhdGFUZXh0dXJlIGlzIHRvbyBiaWcgKCcgKyBkaW1lbnNpb25zLndpZHRoICsgJ3gnICsgZGltZW5zaW9ucy5oZWlnaHQgKyAnKS4nICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBpbWFnZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGltYWdlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUgKSB7XG5cblx0XHRyZXR1cm4gdGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHM7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdlbmVyYXRlTWlwbWFwKCB0YXJnZXQgKSB7XG5cblx0XHRfZ2wuZ2VuZXJhdGVNaXBtYXAoIHRhcmdldCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRUYXJnZXRUeXBlKCB0ZXh0dXJlICkge1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ICkgcmV0dXJuIF9nbC5URVhUVVJFX0NVQkVfTUFQO1xuXHRcdGlmICggdGV4dHVyZS5pc1dlYkdMM0RSZW5kZXJUYXJnZXQgKSByZXR1cm4gX2dsLlRFWFRVUkVfM0Q7XG5cdFx0aWYgKCB0ZXh0dXJlLmlzV2ViR0xBcnJheVJlbmRlclRhcmdldCB8fCB0ZXh0dXJlLmlzQ29tcHJlc3NlZEFycmF5VGV4dHVyZSApIHJldHVybiBfZ2wuVEVYVFVSRV8yRF9BUlJBWTtcblx0XHRyZXR1cm4gX2dsLlRFWFRVUkVfMkQ7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldEludGVybmFsRm9ybWF0KCBpbnRlcm5hbEZvcm1hdE5hbWUsIGdsRm9ybWF0LCBnbFR5cGUsIGNvbG9yU3BhY2UsIGZvcmNlTGluZWFyVHJhbnNmZXIgPSBmYWxzZSApIHtcblxuXHRcdGlmICggaW50ZXJuYWxGb3JtYXROYW1lICE9PSBudWxsICkge1xuXG5cdFx0XHRpZiAoIF9nbFsgaW50ZXJuYWxGb3JtYXROYW1lIF0gIT09IHVuZGVmaW5lZCApIHJldHVybiBfZ2xbIGludGVybmFsRm9ybWF0TmFtZSBdO1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBBdHRlbXB0IHRvIHVzZSBub24tZXhpc3RpbmcgV2ViR0wgaW50ZXJuYWwgZm9ybWF0IFxcJycgKyBpbnRlcm5hbEZvcm1hdE5hbWUgKyAnXFwnJyApO1xuXG5cdFx0fVxuXG5cdFx0bGV0IGludGVybmFsRm9ybWF0ID0gZ2xGb3JtYXQ7XG5cblx0XHRpZiAoIGdsRm9ybWF0ID09PSBfZ2wuUkVEICkge1xuXG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLkZMT0FUICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUjMyRjtcblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuSEFMRl9GTE9BVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlIxNkY7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX0JZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SODtcblxuXHRcdH1cblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IF9nbC5SRURfSU5URUdFUiApIHtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUjhVSTtcblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuVU5TSUdORURfU0hPUlQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SMTZVSTtcblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuVU5TSUdORURfSU5UICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUjMyVUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLkJZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SOEk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlNIT1JUICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUjE2STtcblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuSU5UICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUjMySTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IF9nbC5SRyApIHtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5GTE9BVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHMzJGO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5IQUxGX0ZMT0FUICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkcxNkY7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX0JZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SRzg7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdsRm9ybWF0ID09PSBfZ2wuUkdfSU5URUdFUiApIHtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkc4VUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX1NIT1JUICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkcxNlVJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9JTlQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SRzMyVUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLkJZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SRzhJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5TSE9SVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHMTZJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5JTlQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SRzMySTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IF9nbC5SR0JfSU5URUdFUiApIHtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkdCOFVJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9TSE9SVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQjE2VUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX0lOVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQjMyVUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLkJZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SR0I4STtcblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuU0hPUlQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SR0IxNkk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLklOVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQjMySTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IF9nbC5SR0JBX0lOVEVHRVIgKSB7XG5cblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuVU5TSUdORURfQllURSApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQkE4VUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX1NIT1JUICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkdCQTE2VUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX0lOVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQkEzMlVJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkdCQThJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5TSE9SVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQkExNkk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLklOVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQkEzMkk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdsRm9ybWF0ID09PSBfZ2wuUkdCICkge1xuXG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX0lOVF81XzlfOV85X1JFViApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQjlfRTU7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX0lOVF8xMEZfMTFGXzExRl9SRVYgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SMTFGX0cxMUZfQjEwRjtcblxuXHRcdH1cblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IF9nbC5SR0JBICkge1xuXG5cdFx0XHRjb25zdCB0cmFuc2ZlciA9IGZvcmNlTGluZWFyVHJhbnNmZXIgPyBMaW5lYXJUcmFuc2ZlciA6IENvbG9yTWFuYWdlbWVudC5nZXRUcmFuc2ZlciggY29sb3JTcGFjZSApO1xuXG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLkZMT0FUICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkdCQTMyRjtcblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuSEFMRl9GTE9BVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQkExNkY7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX0JZVEUgKSBpbnRlcm5hbEZvcm1hdCA9ICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gX2dsLlNSR0I4X0FMUEhBOCA6IF9nbC5SR0JBODtcblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuVU5TSUdORURfU0hPUlRfNF80XzRfNCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQkE0O1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9TSE9SVF81XzVfNV8xICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkdCNV9BMTtcblxuXHRcdH1cblxuXHRcdGlmICggaW50ZXJuYWxGb3JtYXQgPT09IF9nbC5SMTZGIHx8IGludGVybmFsRm9ybWF0ID09PSBfZ2wuUjMyRiB8fFxuXHRcdFx0aW50ZXJuYWxGb3JtYXQgPT09IF9nbC5SRzE2RiB8fCBpbnRlcm5hbEZvcm1hdCA9PT0gX2dsLlJHMzJGIHx8XG5cdFx0XHRpbnRlcm5hbEZvcm1hdCA9PT0gX2dsLlJHQkExNkYgfHwgaW50ZXJuYWxGb3JtYXQgPT09IF9nbC5SR0JBMzJGICkge1xuXG5cdFx0XHRleHRlbnNpb25zLmdldCggJ0VYVF9jb2xvcl9idWZmZXJfZmxvYXQnICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaW50ZXJuYWxGb3JtYXQ7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldEludGVybmFsRGVwdGhGb3JtYXQoIHVzZVN0ZW5jaWwsIGRlcHRoVHlwZSApIHtcblxuXHRcdGxldCBnbEludGVybmFsRm9ybWF0O1xuXHRcdGlmICggdXNlU3RlbmNpbCApIHtcblxuXHRcdFx0aWYgKCBkZXB0aFR5cGUgPT09IG51bGwgfHwgZGVwdGhUeXBlID09PSBVbnNpZ25lZEludFR5cGUgfHwgZGVwdGhUeXBlID09PSBVbnNpZ25lZEludDI0OFR5cGUgKSB7XG5cblx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IF9nbC5ERVBUSDI0X1NURU5DSUw4O1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBkZXB0aFR5cGUgPT09IEZsb2F0VHlwZSApIHtcblxuXHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gX2dsLkRFUFRIMzJGX1NURU5DSUw4O1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBkZXB0aFR5cGUgPT09IFVuc2lnbmVkU2hvcnRUeXBlICkge1xuXG5cdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSBfZ2wuREVQVEgyNF9TVEVOQ0lMODtcblx0XHRcdFx0Y29uc29sZS53YXJuKCAnRGVwdGhUZXh0dXJlOiAxNiBiaXQgZGVwdGggYXR0YWNobWVudCBpcyBub3Qgc3VwcG9ydGVkIHdpdGggc3RlbmNpbC4gVXNpbmcgMjQtYml0IGF0dGFjaG1lbnQuJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIGRlcHRoVHlwZSA9PT0gbnVsbCB8fCBkZXB0aFR5cGUgPT09IFVuc2lnbmVkSW50VHlwZSB8fCBkZXB0aFR5cGUgPT09IFVuc2lnbmVkSW50MjQ4VHlwZSApIHtcblxuXHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gX2dsLkRFUFRIX0NPTVBPTkVOVDI0O1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBkZXB0aFR5cGUgPT09IEZsb2F0VHlwZSApIHtcblxuXHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gX2dsLkRFUFRIX0NPTVBPTkVOVDMyRjtcblxuXHRcdFx0fSBlbHNlIGlmICggZGVwdGhUeXBlID09PSBVbnNpZ25lZFNob3J0VHlwZSApIHtcblxuXHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gX2dsLkRFUFRIX0NPTVBPTkVOVDE2O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZ2xJbnRlcm5hbEZvcm1hdDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0TWlwTGV2ZWxzKCB0ZXh0dXJlLCBpbWFnZSApIHtcblxuXHRcdGlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCB0ZXh0dXJlICkgPT09IHRydWUgfHwgKCB0ZXh0dXJlLmlzRnJhbWVidWZmZXJUZXh0dXJlICYmIHRleHR1cmUubWluRmlsdGVyICE9PSBOZWFyZXN0RmlsdGVyICYmIHRleHR1cmUubWluRmlsdGVyICE9PSBMaW5lYXJGaWx0ZXIgKSApIHtcblxuXHRcdFx0cmV0dXJuIE1hdGgubG9nMiggTWF0aC5tYXgoIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKSApICsgMTtcblxuXHRcdH0gZWxzZSBpZiAoIHRleHR1cmUubWlwbWFwcyAhPT0gdW5kZWZpbmVkICYmIHRleHR1cmUubWlwbWFwcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHQvLyB1c2VyLWRlZmluZWQgbWlwbWFwc1xuXG5cdFx0XHRyZXR1cm4gdGV4dHVyZS5taXBtYXBzLmxlbmd0aDtcblxuXHRcdH0gZWxzZSBpZiAoIHRleHR1cmUuaXNDb21wcmVzc2VkVGV4dHVyZSAmJiBBcnJheS5pc0FycmF5KCB0ZXh0dXJlLmltYWdlICkgKSB7XG5cblx0XHRcdHJldHVybiBpbWFnZS5taXBtYXBzLmxlbmd0aDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIHRleHR1cmUgd2l0aG91dCBtaXBtYXBzIChvbmx5IGJhc2UgbGV2ZWwpXG5cblx0XHRcdHJldHVybiAxO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIG9uVGV4dHVyZURpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IGV2ZW50LnRhcmdldDtcblxuXHRcdHRleHR1cmUucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7XG5cblx0XHRkZWFsbG9jYXRlVGV4dHVyZSggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICkge1xuXG5cdFx0XHRfdmlkZW9UZXh0dXJlcy5kZWxldGUoIHRleHR1cmUgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gb25SZW5kZXJUYXJnZXREaXNwb3NlKCBldmVudCApIHtcblxuXHRcdGNvbnN0IHJlbmRlclRhcmdldCA9IGV2ZW50LnRhcmdldDtcblxuXHRcdHJlbmRlclRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uUmVuZGVyVGFyZ2V0RGlzcG9zZSApO1xuXG5cdFx0ZGVhbGxvY2F0ZVJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cblx0fVxuXG5cdC8vXG5cblx0ZnVuY3Rpb24gZGVhbGxvY2F0ZVRleHR1cmUoIHRleHR1cmUgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xJbml0ID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0XHQvLyBjaGVjayBpZiBpdCdzIG5lY2Vzc2FyeSB0byByZW1vdmUgdGhlIFdlYkdMVGV4dHVyZSBvYmplY3RcblxuXHRcdGNvbnN0IHNvdXJjZSA9IHRleHR1cmUuc291cmNlO1xuXHRcdGNvbnN0IHdlYmdsVGV4dHVyZXMgPSBfc291cmNlcy5nZXQoIHNvdXJjZSApO1xuXG5cdFx0aWYgKCB3ZWJnbFRleHR1cmVzICkge1xuXG5cdFx0XHRjb25zdCB3ZWJnbFRleHR1cmUgPSB3ZWJnbFRleHR1cmVzWyB0ZXh0dXJlUHJvcGVydGllcy5fX2NhY2hlS2V5IF07XG5cdFx0XHR3ZWJnbFRleHR1cmUudXNlZFRpbWVzIC0tO1xuXG5cdFx0XHQvLyB0aGUgV2ViR0xUZXh0dXJlIG9iamVjdCBpcyBub3QgdXNlZCBhbnltb3JlLCByZW1vdmUgaXRcblxuXHRcdFx0aWYgKCB3ZWJnbFRleHR1cmUudXNlZFRpbWVzID09PSAwICkge1xuXG5cdFx0XHRcdGRlbGV0ZVRleHR1cmUoIHRleHR1cmUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyByZW1vdmUgdGhlIHdlYWsgbWFwIGVudHJ5IGlmIG5vIFdlYkdMVGV4dHVyZSB1c2VzIHRoZSBzb3VyY2UgYW55bW9yZVxuXG5cdFx0XHRpZiAoIE9iamVjdC5rZXlzKCB3ZWJnbFRleHR1cmVzICkubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHRcdF9zb3VyY2VzLmRlbGV0ZSggc291cmNlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHByb3BlcnRpZXMucmVtb3ZlKCB0ZXh0dXJlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRlbGV0ZVRleHR1cmUoIHRleHR1cmUgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cdFx0X2dsLmRlbGV0ZVRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cblx0XHRjb25zdCBzb3VyY2UgPSB0ZXh0dXJlLnNvdXJjZTtcblx0XHRjb25zdCB3ZWJnbFRleHR1cmVzID0gX3NvdXJjZXMuZ2V0KCBzb3VyY2UgKTtcblx0XHRkZWxldGUgd2ViZ2xUZXh0dXJlc1sgdGV4dHVyZVByb3BlcnRpZXMuX19jYWNoZUtleSBdO1xuXG5cdFx0aW5mby5tZW1vcnkudGV4dHVyZXMgLS07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRlYWxsb2NhdGVSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdGNvbnN0IHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKSB7XG5cblx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuZGlzcG9zZSgpO1xuXG5cdFx0XHRwcm9wZXJ0aWVzLnJlbW92ZSggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdICkgKSB7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgbGV2ZWwgPSAwOyBsZXZlbCA8IHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBpIF0ubGVuZ3RoOyBsZXZlbCArKyApIF9nbC5kZWxldGVGcmFtZWJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGkgXVsgbGV2ZWwgXSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRfZ2wuZGVsZXRlRnJhbWVidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBpIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciApIF9nbC5kZWxldGVSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciApICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBsZXZlbCA9IDA7IGxldmVsIDwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIubGVuZ3RoOyBsZXZlbCArKyApIF9nbC5kZWxldGVGcmFtZWJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGxldmVsIF0gKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfZ2wuZGVsZXRlRnJhbWVidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciApIF9nbC5kZWxldGVSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyICk7XG5cdFx0XHRpZiAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyICkgX2dsLmRlbGV0ZUZyYW1lYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHRpZiAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JSZW5kZXJidWZmZXJbIGkgXSApIF9nbC5kZWxldGVSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyWyBpIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aFJlbmRlcmJ1ZmZlciApIF9nbC5kZWxldGVSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoUmVuZGVyYnVmZmVyICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCB0ZXh0dXJlcyA9IHJlbmRlclRhcmdldC50ZXh0dXJlcztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSB0ZXh0dXJlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgYXR0YWNobWVudFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZXNbIGkgXSApO1xuXG5cdFx0XHRpZiAoIGF0dGFjaG1lbnRQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICkge1xuXG5cdFx0XHRcdF9nbC5kZWxldGVUZXh0dXJlKCBhdHRhY2htZW50UHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdFx0XHRcdGluZm8ubWVtb3J5LnRleHR1cmVzIC0tO1xuXG5cdFx0XHR9XG5cblx0XHRcdHByb3BlcnRpZXMucmVtb3ZlKCB0ZXh0dXJlc1sgaSBdICk7XG5cblx0XHR9XG5cblx0XHRwcm9wZXJ0aWVzLnJlbW92ZSggcmVuZGVyVGFyZ2V0ICk7XG5cblx0fVxuXG5cdC8vXG5cblx0bGV0IHRleHR1cmVVbml0cyA9IDA7XG5cblx0ZnVuY3Rpb24gcmVzZXRUZXh0dXJlVW5pdHMoKSB7XG5cblx0XHR0ZXh0dXJlVW5pdHMgPSAwO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBhbGxvY2F0ZVRleHR1cmVVbml0KCkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZVVuaXQgPSB0ZXh0dXJlVW5pdHM7XG5cblx0XHRpZiAoIHRleHR1cmVVbml0ID49IGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlcyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xUZXh0dXJlczogVHJ5aW5nIHRvIHVzZSAnICsgdGV4dHVyZVVuaXQgKyAnIHRleHR1cmUgdW5pdHMgd2hpbGUgdGhpcyBHUFUgc3VwcG9ydHMgb25seSAnICsgY2FwYWJpbGl0aWVzLm1heFRleHR1cmVzICk7XG5cblx0XHR9XG5cblx0XHR0ZXh0dXJlVW5pdHMgKz0gMTtcblxuXHRcdHJldHVybiB0ZXh0dXJlVW5pdDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0VGV4dHVyZUNhY2hlS2V5KCB0ZXh0dXJlICkge1xuXG5cdFx0Y29uc3QgYXJyYXkgPSBbXTtcblxuXHRcdGFycmF5LnB1c2goIHRleHR1cmUud3JhcFMgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLndyYXBUICk7XG5cdFx0YXJyYXkucHVzaCggdGV4dHVyZS53cmFwUiB8fCAwICk7XG5cdFx0YXJyYXkucHVzaCggdGV4dHVyZS5tYWdGaWx0ZXIgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLm1pbkZpbHRlciApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUuYW5pc290cm9weSApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUuaW50ZXJuYWxGb3JtYXQgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLmZvcm1hdCApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUudHlwZSApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzICk7XG5cdFx0YXJyYXkucHVzaCggdGV4dHVyZS5wcmVtdWx0aXBseUFscGhhICk7XG5cdFx0YXJyYXkucHVzaCggdGV4dHVyZS5mbGlwWSApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUudW5wYWNrQWxpZ25tZW50ICk7XG5cdFx0YXJyYXkucHVzaCggdGV4dHVyZS5jb2xvclNwYWNlICk7XG5cblx0XHRyZXR1cm4gYXJyYXkuam9pbigpO1xuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIHNldFRleHR1cmUyRCggdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdGNvbnN0IHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS5pc1ZpZGVvVGV4dHVyZSApIHVwZGF0ZVZpZGVvVGV4dHVyZSggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9PT0gZmFsc2UgJiYgdGV4dHVyZS5pc0V4dGVybmFsVGV4dHVyZSAhPT0gdHJ1ZSAmJiB0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkge1xuXG5cdFx0XHRjb25zdCBpbWFnZSA9IHRleHR1cmUuaW1hZ2U7XG5cblx0XHRcdGlmICggaW1hZ2UgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVGV4dHVyZSBtYXJrZWQgZm9yIHVwZGF0ZSBidXQgbm8gaW1hZ2UgZGF0YSBmb3VuZC4nICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGltYWdlLmNvbXBsZXRlID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIG1hcmtlZCBmb3IgdXBkYXRlIGJ1dCBpbWFnZSBpcyBpbmNvbXBsZXRlJyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHVwbG9hZFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0V4dGVybmFsVGV4dHVyZSApIHtcblxuXHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgPSB0ZXh0dXJlLnNvdXJjZVRleHR1cmUgPyB0ZXh0dXJlLnNvdXJjZVRleHR1cmUgOiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUuYmluZFRleHR1cmUoIF9nbC5URVhUVVJFXzJELCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSwgX2dsLlRFWFRVUkUwICsgc2xvdCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlMkRBcnJheSggdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdGNvbnN0IHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPT09IGZhbHNlICYmIHRleHR1cmUudmVyc2lvbiA+IDAgJiYgdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24gKSB7XG5cblx0XHRcdHVwbG9hZFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggX2dsLlRFWFRVUkVfMkRfQVJSQVksIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBfZ2wuVEVYVFVSRTAgKyBzbG90ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFRleHR1cmUzRCggdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdGNvbnN0IHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPT09IGZhbHNlICYmIHRleHR1cmUudmVyc2lvbiA+IDAgJiYgdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24gKSB7XG5cblx0XHRcdHVwbG9hZFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggX2dsLlRFWFRVUkVfM0QsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBfZ2wuVEVYVFVSRTAgKyBzbG90ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFRleHR1cmVDdWJlKCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkge1xuXG5cdFx0XHR1cGxvYWRDdWJlVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUsIHNsb3QgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHN0YXRlLmJpbmRUZXh0dXJlKCBfZ2wuVEVYVFVSRV9DVUJFX01BUCwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUsIF9nbC5URVhUVVJFMCArIHNsb3QgKTtcblxuXHR9XG5cblx0Y29uc3Qgd3JhcHBpbmdUb0dMID0ge1xuXHRcdFsgUmVwZWF0V3JhcHBpbmcgXTogX2dsLlJFUEVBVCxcblx0XHRbIENsYW1wVG9FZGdlV3JhcHBpbmcgXTogX2dsLkNMQU1QX1RPX0VER0UsXG5cdFx0WyBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nIF06IF9nbC5NSVJST1JFRF9SRVBFQVRcblx0fTtcblxuXHRjb25zdCBmaWx0ZXJUb0dMID0ge1xuXHRcdFsgTmVhcmVzdEZpbHRlciBdOiBfZ2wuTkVBUkVTVCxcblx0XHRbIE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyIF06IF9nbC5ORUFSRVNUX01JUE1BUF9ORUFSRVNULFxuXHRcdFsgTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciBdOiBfZ2wuTkVBUkVTVF9NSVBNQVBfTElORUFSLFxuXG5cdFx0WyBMaW5lYXJGaWx0ZXIgXTogX2dsLkxJTkVBUixcblx0XHRbIExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIgXTogX2dsLkxJTkVBUl9NSVBNQVBfTkVBUkVTVCxcblx0XHRbIExpbmVhck1pcG1hcExpbmVhckZpbHRlciBdOiBfZ2wuTElORUFSX01JUE1BUF9MSU5FQVJcblx0fTtcblxuXHRjb25zdCBjb21wYXJlVG9HTCA9IHtcblx0XHRbIE5ldmVyQ29tcGFyZSBdOiBfZ2wuTkVWRVIsXG5cdFx0WyBBbHdheXNDb21wYXJlIF06IF9nbC5BTFdBWVMsXG5cdFx0WyBMZXNzQ29tcGFyZSBdOiBfZ2wuTEVTUyxcblx0XHRbIExlc3NFcXVhbENvbXBhcmUgXTogX2dsLkxFUVVBTCxcblx0XHRbIEVxdWFsQ29tcGFyZSBdOiBfZ2wuRVFVQUwsXG5cdFx0WyBHcmVhdGVyRXF1YWxDb21wYXJlIF06IF9nbC5HRVFVQUwsXG5cdFx0WyBHcmVhdGVyQ29tcGFyZSBdOiBfZ2wuR1JFQVRFUixcblx0XHRbIE5vdEVxdWFsQ29tcGFyZSBdOiBfZ2wuTk9URVFVQUxcblx0fTtcblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlUGFyYW1ldGVycyggdGV4dHVyZVR5cGUsIHRleHR1cmUgKSB7XG5cblx0XHRpZiAoIHRleHR1cmUudHlwZSA9PT0gRmxvYXRUeXBlICYmIGV4dGVuc2lvbnMuaGFzKCAnT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyApID09PSBmYWxzZSAmJlxuXHRcdFx0KCB0ZXh0dXJlLm1hZ0ZpbHRlciA9PT0gTGluZWFyRmlsdGVyIHx8IHRleHR1cmUubWFnRmlsdGVyID09PSBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyIHx8IHRleHR1cmUubWFnRmlsdGVyID09PSBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyIHx8IHRleHR1cmUubWFnRmlsdGVyID09PSBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIgfHxcblx0XHRcdHRleHR1cmUubWluRmlsdGVyID09PSBMaW5lYXJGaWx0ZXIgfHwgdGV4dHVyZS5taW5GaWx0ZXIgPT09IExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIgfHwgdGV4dHVyZS5taW5GaWx0ZXIgPT09IE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIgfHwgdGV4dHVyZS5taW5GaWx0ZXIgPT09IExpbmVhck1pcG1hcExpbmVhckZpbHRlciApICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBVbmFibGUgdG8gdXNlIGxpbmVhciBmaWx0ZXJpbmcgd2l0aCBmbG9hdGluZyBwb2ludCB0ZXh0dXJlcy4gT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBkZXZpY2UuJyApO1xuXG5cdFx0fVxuXG5cdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCBfZ2wuVEVYVFVSRV9XUkFQX1MsIHdyYXBwaW5nVG9HTFsgdGV4dHVyZS53cmFwUyBdICk7XG5cdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCBfZ2wuVEVYVFVSRV9XUkFQX1QsIHdyYXBwaW5nVG9HTFsgdGV4dHVyZS53cmFwVCBdICk7XG5cblx0XHRpZiAoIHRleHR1cmVUeXBlID09PSBfZ2wuVEVYVFVSRV8zRCB8fCB0ZXh0dXJlVHlwZSA9PT0gX2dsLlRFWFRVUkVfMkRfQVJSQVkgKSB7XG5cblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgX2dsLlRFWFRVUkVfV1JBUF9SLCB3cmFwcGluZ1RvR0xbIHRleHR1cmUud3JhcFIgXSApO1xuXG5cdFx0fVxuXG5cdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCBfZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBmaWx0ZXJUb0dMWyB0ZXh0dXJlLm1hZ0ZpbHRlciBdICk7XG5cdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCBfZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBmaWx0ZXJUb0dMWyB0ZXh0dXJlLm1pbkZpbHRlciBdICk7XG5cblx0XHRpZiAoIHRleHR1cmUuY29tcGFyZUZ1bmN0aW9uICkge1xuXG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIF9nbC5URVhUVVJFX0NPTVBBUkVfTU9ERSwgX2dsLkNPTVBBUkVfUkVGX1RPX1RFWFRVUkUgKTtcblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgX2dsLlRFWFRVUkVfQ09NUEFSRV9GVU5DLCBjb21wYXJlVG9HTFsgdGV4dHVyZS5jb21wYXJlRnVuY3Rpb24gXSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBleHRlbnNpb25zLmhhcyggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLm1hZ0ZpbHRlciA9PT0gTmVhcmVzdEZpbHRlciApIHJldHVybjtcblx0XHRcdGlmICggdGV4dHVyZS5taW5GaWx0ZXIgIT09IE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIgJiYgdGV4dHVyZS5taW5GaWx0ZXIgIT09IExpbmVhck1pcG1hcExpbmVhckZpbHRlciApIHJldHVybjtcblx0XHRcdGlmICggdGV4dHVyZS50eXBlID09PSBGbG9hdFR5cGUgJiYgZXh0ZW5zaW9ucy5oYXMoICdPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXInICkgPT09IGZhbHNlICkgcmV0dXJuOyAvLyB2ZXJpZnkgZXh0ZW5zaW9uXG5cblx0XHRcdGlmICggdGV4dHVyZS5hbmlzb3Ryb3B5ID4gMSB8fCBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApLl9fY3VycmVudEFuaXNvdHJvcHkgKSB7XG5cblx0XHRcdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICk7XG5cdFx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJmKCB0ZXh0dXJlVHlwZSwgZXh0ZW5zaW9uLlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULCBNYXRoLm1pbiggdGV4dHVyZS5hbmlzb3Ryb3B5LCBjYXBhYmlsaXRpZXMuZ2V0TWF4QW5pc290cm9weSgpICkgKTtcblx0XHRcdFx0cHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX2N1cnJlbnRBbmlzb3Ryb3B5ID0gdGV4dHVyZS5hbmlzb3Ryb3B5O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGluaXRUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSApIHtcblxuXHRcdGxldCBmb3JjZVVwbG9hZCA9IGZhbHNlO1xuXG5cdFx0aWYgKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsSW5pdCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsSW5pdCA9IHRydWU7XG5cblx0XHRcdHRleHR1cmUuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7XG5cblx0XHR9XG5cblx0XHQvLyBjcmVhdGUgU291cmNlIDwtPiBXZWJHTFRleHR1cmVzIG1hcHBpbmcgaWYgbmVjZXNzYXJ5XG5cblx0XHRjb25zdCBzb3VyY2UgPSB0ZXh0dXJlLnNvdXJjZTtcblx0XHRsZXQgd2ViZ2xUZXh0dXJlcyA9IF9zb3VyY2VzLmdldCggc291cmNlICk7XG5cblx0XHRpZiAoIHdlYmdsVGV4dHVyZXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0d2ViZ2xUZXh0dXJlcyA9IHt9O1xuXHRcdFx0X3NvdXJjZXMuc2V0KCBzb3VyY2UsIHdlYmdsVGV4dHVyZXMgKTtcblxuXHRcdH1cblxuXHRcdC8vIGNoZWNrIGlmIHRoZXJlIGlzIGFscmVhZHkgYSBXZWJHTFRleHR1cmUgb2JqZWN0IGZvciB0aGUgZ2l2ZW4gdGV4dHVyZSBwYXJhbWV0ZXJzXG5cblx0XHRjb25zdCB0ZXh0dXJlQ2FjaGVLZXkgPSBnZXRUZXh0dXJlQ2FjaGVLZXkoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZUNhY2hlS2V5ICE9PSB0ZXh0dXJlUHJvcGVydGllcy5fX2NhY2hlS2V5ICkge1xuXG5cdFx0XHQvLyBpZiBub3QsIGNyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBXZWJHTFRleHR1cmVcblxuXHRcdFx0aWYgKCB3ZWJnbFRleHR1cmVzWyB0ZXh0dXJlQ2FjaGVLZXkgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIGNyZWF0ZSBuZXcgZW50cnlcblxuXHRcdFx0XHR3ZWJnbFRleHR1cmVzWyB0ZXh0dXJlQ2FjaGVLZXkgXSA9IHtcblx0XHRcdFx0XHR0ZXh0dXJlOiBfZ2wuY3JlYXRlVGV4dHVyZSgpLFxuXHRcdFx0XHRcdHVzZWRUaW1lczogMFxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGluZm8ubWVtb3J5LnRleHR1cmVzICsrO1xuXG5cdFx0XHRcdC8vIHdoZW4gYSBuZXcgaW5zdGFuY2Ugb2YgV2ViR0xUZXh0dXJlIHdhcyBjcmVhdGVkLCBhIHRleHR1cmUgdXBsb2FkIGlzIHJlcXVpcmVkXG5cdFx0XHRcdC8vIGV2ZW4gaWYgdGhlIGltYWdlIGNvbnRlbnRzIGFyZSBpZGVudGljYWxcblxuXHRcdFx0XHRmb3JjZVVwbG9hZCA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0d2ViZ2xUZXh0dXJlc1sgdGV4dHVyZUNhY2hlS2V5IF0udXNlZFRpbWVzICsrO1xuXG5cdFx0XHQvLyBldmVyeSB0aW1lIHRoZSB0ZXh0dXJlIGNhY2hlIGtleSBjaGFuZ2VzLCBpdCdzIG5lY2Vzc2FyeSB0byBjaGVjayBpZiBhbiBpbnN0YW5jZSBvZlxuXHRcdFx0Ly8gV2ViR0xUZXh0dXJlIGNhbiBiZSBkZWxldGVkIGluIG9yZGVyIHRvIGF2b2lkIGEgbWVtb3J5IGxlYWsuXG5cblx0XHRcdGNvbnN0IHdlYmdsVGV4dHVyZSA9IHdlYmdsVGV4dHVyZXNbIHRleHR1cmVQcm9wZXJ0aWVzLl9fY2FjaGVLZXkgXTtcblxuXHRcdFx0aWYgKCB3ZWJnbFRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR3ZWJnbFRleHR1cmVzWyB0ZXh0dXJlUHJvcGVydGllcy5fX2NhY2hlS2V5IF0udXNlZFRpbWVzIC0tO1xuXG5cdFx0XHRcdGlmICggd2ViZ2xUZXh0dXJlLnVzZWRUaW1lcyA9PT0gMCApIHtcblxuXHRcdFx0XHRcdGRlbGV0ZVRleHR1cmUoIHRleHR1cmUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gc3RvcmUgcmVmZXJlbmNlcyB0byBjYWNoZSBrZXkgYW5kIFdlYkdMVGV4dHVyZSBvYmplY3RcblxuXHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX19jYWNoZUtleSA9IHRleHR1cmVDYWNoZUtleTtcblx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlID0gd2ViZ2xUZXh0dXJlc1sgdGV4dHVyZUNhY2hlS2V5IF0udGV4dHVyZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmb3JjZVVwbG9hZDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0Um93KCBpbmRleCwgcm93TGVuZ3RoLCBjb21wb25lbnRTdHJpZGUgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5mbG9vciggTWF0aC5mbG9vciggaW5kZXggLyBjb21wb25lbnRTdHJpZGUgKSAvIHJvd0xlbmd0aCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVUZXh0dXJlKCB0ZXh0dXJlLCBpbWFnZSwgZ2xGb3JtYXQsIGdsVHlwZSApIHtcblxuXHRcdGNvbnN0IGNvbXBvbmVudFN0cmlkZSA9IDQ7IC8vIG9ubHkgUkdCQSBzdXBwb3J0ZWRcblxuXHRcdGNvbnN0IHVwZGF0ZVJhbmdlcyA9IHRleHR1cmUudXBkYXRlUmFuZ2VzO1xuXG5cdFx0aWYgKCB1cGRhdGVSYW5nZXMubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHRzdGF0ZS50ZXhTdWJJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgMCwgMCwgMCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQmVmb3JlIGFwcGx5aW5nIHVwZGF0ZSByYW5nZXMsIHdlIG1lcmdlIGFueSBhZGphY2VudCAvIG92ZXJsYXBwaW5nXG5cdFx0XHQvLyByYW5nZXMgdG8gcmVkdWNlIGxvYWQgb24gYGdsLnRleFN1YkltYWdlMkRgLiBFbXBpcmljYWxseSwgdGhpcyBoYXMgbGVkXG5cdFx0XHQvLyB0byBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudHMgZm9yIGFwcGxpY2F0aW9ucyB3aGljaCBtYWtlIGhlYXZ5IHVzZSBvZlxuXHRcdFx0Ly8gdXBkYXRlIHJhbmdlcy4gTGlrZWx5IGR1ZSB0byBHUFUgY29tbWFuZCBvdmVyaGVhZC5cblx0XHRcdC8vXG5cdFx0XHQvLyBOb3RlIHRoYXQgdG8gcmVkdWNlIGdhcmJhZ2UgY29sbGVjdGlvbiBiZXR3ZWVuIGZyYW1lcywgd2UgbWVyZ2UgdGhlXG5cdFx0XHQvLyB1cGRhdGUgcmFuZ2VzIGluLXBsYWNlLiBUaGlzIGlzIHNhZmUgYmVjYXVzZSB0aGlzIG1ldGhvZCB3aWxsIGNsZWFyIHRoZVxuXHRcdFx0Ly8gdXBkYXRlIHJhbmdlcyBvbmNlIHVwZGF0ZWQuXG5cblx0XHRcdHVwZGF0ZVJhbmdlcy5zb3J0KCAoIGEsIGIgKSA9PiBhLnN0YXJ0IC0gYi5zdGFydCApO1xuXG5cdFx0XHQvLyBUbyBtZXJnZSB0aGUgdXBkYXRlIHJhbmdlcyBpbi1wbGFjZSwgd2Ugd29yayBmcm9tIGxlZnQgdG8gcmlnaHQgaW4gdGhlXG5cdFx0XHQvLyBleGlzdGluZyB1cGRhdGVSYW5nZXMgYXJyYXksIG1lcmdpbmcgcmFuZ2VzLiBUaGlzIG1heSByZXN1bHQgaW4gYSBmaW5hbFxuXHRcdFx0Ly8gYXJyYXkgd2hpY2ggaXMgc21hbGxlciB0aGFuIHRoZSBvcmlnaW5hbC4gVGhpcyBpbmRleCB0cmFja3MgdGhlIGxhc3Rcblx0XHRcdC8vIGluZGV4IHJlcHJlc2VudGluZyBhIG1lcmdlZCByYW5nZSwgYW55IGRhdGEgYWZ0ZXIgdGhpcyBpbmRleCBjYW4gYmVcblx0XHRcdC8vIHRyaW1tZWQgb25jZSB0aGUgbWVyZ2UgYWxnb3JpdGhtIGlzIGNvbXBsZXRlZC5cblx0XHRcdGxldCBtZXJnZUluZGV4ID0gMDtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAxOyBpIDwgdXBkYXRlUmFuZ2VzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBwcmV2aW91c1JhbmdlID0gdXBkYXRlUmFuZ2VzWyBtZXJnZUluZGV4IF07XG5cdFx0XHRcdGNvbnN0IHJhbmdlID0gdXBkYXRlUmFuZ2VzWyBpIF07XG5cblx0XHRcdFx0Ly8gT25seSBtZXJnZSBpZiBpbiB0aGUgc2FtZSByb3cgYW5kIG92ZXJsYXBwaW5nL2FkamFjZW50XG5cdFx0XHRcdGNvbnN0IHByZXZpb3VzRW5kID0gcHJldmlvdXNSYW5nZS5zdGFydCArIHByZXZpb3VzUmFuZ2UuY291bnQ7XG5cdFx0XHRcdGNvbnN0IGN1cnJlbnRSb3cgPSBnZXRSb3coIHJhbmdlLnN0YXJ0LCBpbWFnZS53aWR0aCwgY29tcG9uZW50U3RyaWRlICk7XG5cdFx0XHRcdGNvbnN0IHByZXZpb3VzUm93ID0gZ2V0Um93KCBwcmV2aW91c1JhbmdlLnN0YXJ0LCBpbWFnZS53aWR0aCwgY29tcG9uZW50U3RyaWRlICk7XG5cblx0XHRcdFx0Ly8gV2UgYWRkIG9uZSBoZXJlIHRvIG1lcmdlIGFkamFjZW50IHJhbmdlcy4gVGhpcyBpcyBzYWZlIGJlY2F1c2UgcmFuZ2VzXG5cdFx0XHRcdC8vIG9wZXJhdGUgb3ZlciBwb3NpdGl2ZSBpbnRlZ2Vycy5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJhbmdlLnN0YXJ0IDw9IHByZXZpb3VzRW5kICsgMSAmJlxuXHRcdFx0XHRcdGN1cnJlbnRSb3cgPT09IHByZXZpb3VzUm93ICYmXG5cdFx0XHRcdFx0Z2V0Um93KCByYW5nZS5zdGFydCArIHJhbmdlLmNvdW50IC0gMSwgaW1hZ2Uud2lkdGgsIGNvbXBvbmVudFN0cmlkZSApID09PSBjdXJyZW50Um93IC8vIGVuc3VyZSByYW5nZSBkb2Vzbid0IHNwaWxsXG5cdFx0XHRcdCkge1xuXG5cdFx0XHRcdFx0cHJldmlvdXNSYW5nZS5jb3VudCA9IE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0cHJldmlvdXNSYW5nZS5jb3VudCxcblx0XHRcdFx0XHRcdHJhbmdlLnN0YXJ0ICsgcmFuZ2UuY291bnQgLSBwcmV2aW91c1JhbmdlLnN0YXJ0XG5cdFx0XHRcdFx0KTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0KysgbWVyZ2VJbmRleDtcblx0XHRcdFx0XHR1cGRhdGVSYW5nZXNbIG1lcmdlSW5kZXggXSA9IHJhbmdlO1xuXG5cdFx0XHRcdH1cblxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyaW0gdGhlIGFycmF5IHRvIG9ubHkgY29udGFpbiB0aGUgbWVyZ2VkIHJhbmdlcy5cblx0XHRcdHVwZGF0ZVJhbmdlcy5sZW5ndGggPSBtZXJnZUluZGV4ICsgMTtcblxuXHRcdFx0Y29uc3QgY3VycmVudFVucGFja1Jvd0xlbiA9IF9nbC5nZXRQYXJhbWV0ZXIoIF9nbC5VTlBBQ0tfUk9XX0xFTkdUSCApO1xuXHRcdFx0Y29uc3QgY3VycmVudFVucGFja1NraXBQaXhlbHMgPSBfZ2wuZ2V0UGFyYW1ldGVyKCBfZ2wuVU5QQUNLX1NLSVBfUElYRUxTICk7XG5cdFx0XHRjb25zdCBjdXJyZW50VW5wYWNrU2tpcFJvd3MgPSBfZ2wuZ2V0UGFyYW1ldGVyKCBfZ2wuVU5QQUNLX1NLSVBfUk9XUyApO1xuXG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfUk9XX0xFTkdUSCwgaW1hZ2Uud2lkdGggKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdXBkYXRlUmFuZ2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgcmFuZ2UgPSB1cGRhdGVSYW5nZXNbIGkgXTtcblxuXHRcdFx0XHRjb25zdCBwaXhlbFN0YXJ0ID0gTWF0aC5mbG9vciggcmFuZ2Uuc3RhcnQgLyBjb21wb25lbnRTdHJpZGUgKTtcblx0XHRcdFx0Y29uc3QgcGl4ZWxDb3VudCA9IE1hdGguY2VpbCggcmFuZ2UuY291bnQgLyBjb21wb25lbnRTdHJpZGUgKTtcblxuXHRcdFx0XHRjb25zdCB4ID0gcGl4ZWxTdGFydCAlIGltYWdlLndpZHRoO1xuXHRcdFx0XHRjb25zdCB5ID0gTWF0aC5mbG9vciggcGl4ZWxTdGFydCAvIGltYWdlLndpZHRoICk7XG5cblx0XHRcdFx0Ly8gQXNzdW1lcyB1cGRhdGUgcmFuZ2VzIHJlZmVyIHRvIGNvbnRpZ3VvdXMgbWVtb3J5XG5cdFx0XHRcdGNvbnN0IHdpZHRoID0gcGl4ZWxDb3VudDtcblx0XHRcdFx0Y29uc3QgaGVpZ2h0ID0gMTtcblxuXHRcdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfU0tJUF9QSVhFTFMsIHggKTtcblx0XHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1NLSVBfUk9XUywgeSApO1xuXG5cdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlMkQoIF9nbC5URVhUVVJFXzJELCAwLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGV4dHVyZS5jbGVhclVwZGF0ZVJhbmdlcygpO1xuXG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfUk9XX0xFTkdUSCwgY3VycmVudFVucGFja1Jvd0xlbiApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1NLSVBfUElYRUxTLCBjdXJyZW50VW5wYWNrU2tpcFBpeGVscyApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1NLSVBfUk9XUywgY3VycmVudFVucGFja1NraXBSb3dzICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwbG9hZFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0bGV0IHRleHR1cmVUeXBlID0gX2dsLlRFWFRVUkVfMkQ7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNEYXRhQXJyYXlUZXh0dXJlIHx8IHRleHR1cmUuaXNDb21wcmVzc2VkQXJyYXlUZXh0dXJlICkgdGV4dHVyZVR5cGUgPSBfZ2wuVEVYVFVSRV8yRF9BUlJBWTtcblx0XHRpZiAoIHRleHR1cmUuaXNEYXRhM0RUZXh0dXJlICkgdGV4dHVyZVR5cGUgPSBfZ2wuVEVYVFVSRV8zRDtcblxuXHRcdGNvbnN0IGZvcmNlVXBsb2FkID0gaW5pdFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlICk7XG5cdFx0Y29uc3Qgc291cmNlID0gdGV4dHVyZS5zb3VyY2U7XG5cblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggdGV4dHVyZVR5cGUsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBfZ2wuVEVYVFVSRTAgKyBzbG90ICk7XG5cblx0XHRjb25zdCBzb3VyY2VQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHNvdXJjZSApO1xuXG5cdFx0aWYgKCBzb3VyY2UudmVyc2lvbiAhPT0gc291cmNlUHJvcGVydGllcy5fX3ZlcnNpb24gfHwgZm9yY2VVcGxvYWQgPT09IHRydWUgKSB7XG5cblx0XHRcdHN0YXRlLmFjdGl2ZVRleHR1cmUoIF9nbC5URVhUVVJFMCArIHNsb3QgKTtcblxuXHRcdFx0Y29uc3Qgd29ya2luZ1ByaW1hcmllcyA9IENvbG9yTWFuYWdlbWVudC5nZXRQcmltYXJpZXMoIENvbG9yTWFuYWdlbWVudC53b3JraW5nQ29sb3JTcGFjZSApO1xuXHRcdFx0Y29uc3QgdGV4dHVyZVByaW1hcmllcyA9IHRleHR1cmUuY29sb3JTcGFjZSA9PT0gTm9Db2xvclNwYWNlID8gbnVsbCA6IENvbG9yTWFuYWdlbWVudC5nZXRQcmltYXJpZXMoIHRleHR1cmUuY29sb3JTcGFjZSApO1xuXHRcdFx0Y29uc3QgdW5wYWNrQ29udmVyc2lvbiA9IHRleHR1cmUuY29sb3JTcGFjZSA9PT0gTm9Db2xvclNwYWNlIHx8IHdvcmtpbmdQcmltYXJpZXMgPT09IHRleHR1cmVQcmltYXJpZXMgPyBfZ2wuTk9ORSA6IF9nbC5CUk9XU0VSX0RFRkFVTFRfV0VCR0w7XG5cblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19GTElQX1lfV0VCR0wsIHRleHR1cmUuZmxpcFkgKTtcblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgdGV4dHVyZS5wcmVtdWx0aXBseUFscGhhICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfQUxJR05NRU5ULCB0ZXh0dXJlLnVucGFja0FsaWdubWVudCApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX0NPTE9SU1BBQ0VfQ09OVkVSU0lPTl9XRUJHTCwgdW5wYWNrQ29udmVyc2lvbiApO1xuXG5cdFx0XHRsZXQgaW1hZ2UgPSByZXNpemVJbWFnZSggdGV4dHVyZS5pbWFnZSwgZmFsc2UsIGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlU2l6ZSApO1xuXHRcdFx0aW1hZ2UgPSB2ZXJpZnlDb2xvclNwYWNlKCB0ZXh0dXJlLCBpbWFnZSApO1xuXG5cdFx0XHRjb25zdCBnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUuZm9ybWF0LCB0ZXh0dXJlLmNvbG9yU3BhY2UgKTtcblxuXHRcdFx0Y29uc3QgZ2xUeXBlID0gdXRpbHMuY29udmVydCggdGV4dHVyZS50eXBlICk7XG5cdFx0XHRsZXQgZ2xJbnRlcm5hbEZvcm1hdCA9IGdldEludGVybmFsRm9ybWF0KCB0ZXh0dXJlLmludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCB0ZXh0dXJlLmNvbG9yU3BhY2UsIHRleHR1cmUuaXNWaWRlb1RleHR1cmUgKTtcblxuXHRcdFx0c2V0VGV4dHVyZVBhcmFtZXRlcnMoIHRleHR1cmVUeXBlLCB0ZXh0dXJlICk7XG5cblx0XHRcdGxldCBtaXBtYXA7XG5cdFx0XHRjb25zdCBtaXBtYXBzID0gdGV4dHVyZS5taXBtYXBzO1xuXG5cdFx0XHRjb25zdCB1c2VUZXhTdG9yYWdlID0gKCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICE9PSB0cnVlICk7XG5cdFx0XHRjb25zdCBhbGxvY2F0ZU1lbW9yeSA9ICggc291cmNlUHJvcGVydGllcy5fX3ZlcnNpb24gPT09IHVuZGVmaW5lZCApIHx8ICggZm9yY2VVcGxvYWQgPT09IHRydWUgKTtcblx0XHRcdGNvbnN0IGRhdGFSZWFkeSA9IHNvdXJjZS5kYXRhUmVhZHk7XG5cdFx0XHRjb25zdCBsZXZlbHMgPSBnZXRNaXBMZXZlbHMoIHRleHR1cmUsIGltYWdlICk7XG5cblx0XHRcdGlmICggdGV4dHVyZS5pc0RlcHRoVGV4dHVyZSApIHtcblxuXHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxEZXB0aEZvcm1hdCggdGV4dHVyZS5mb3JtYXQgPT09IERlcHRoU3RlbmNpbEZvcm1hdCwgdGV4dHVyZS50eXBlICk7XG5cblx0XHRcdFx0Ly9cblxuXHRcdFx0XHRpZiAoIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdG9yYWdlMkQoIF9nbC5URVhUVVJFXzJELCAxLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbnVsbCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHRcdC8vIHVzZSBtYW51YWxseSBjcmVhdGVkIG1pcG1hcHMgaWYgYXZhaWxhYmxlXG5cdFx0XHRcdC8vIGlmIHRoZXJlIGFyZSBubyBtYW51YWwgbWlwbWFwc1xuXHRcdFx0XHQvLyBzZXQgMCBsZXZlbCBtaXBtYXAgYW5kIHRoZW4gdXNlIEdMIHRvIGdlbmVyYXRlIG90aGVyIG1pcG1hcCBsZXZlbHNcblxuXHRcdFx0XHRpZiAoIG1pcG1hcHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSAmJiBhbGxvY2F0ZU1lbW9yeSApIHtcblxuXHRcdFx0XHRcdFx0c3RhdGUudGV4U3RvcmFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXBzWyAwIF0ud2lkdGgsIG1pcG1hcHNbIDAgXS5oZWlnaHQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBtaXBtYXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRtaXBtYXAgPSBtaXBtYXBzWyBpIF07XG5cblx0XHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGRhdGFSZWFkeSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlMkQoIF9nbC5URVhUVVJFXzJELCBpLCAwLCAwLCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFXzJELCBpLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBhbGxvY2F0ZU1lbW9yeSApIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdG9yYWdlMkQoIF9nbC5URVhUVVJFXzJELCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAoIGRhdGFSZWFkeSApIHtcblxuXHRcdFx0XHRcdFx0XHR1cGRhdGVUZXh0dXJlKCB0ZXh0dXJlLCBpbWFnZSwgZ2xGb3JtYXQsIGdsVHlwZSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0NvbXByZXNzZWRUZXh0dXJlICkge1xuXG5cdFx0XHRcdGlmICggdGV4dHVyZS5pc0NvbXByZXNzZWRBcnJheVRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgJiYgYWxsb2NhdGVNZW1vcnkgKSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLnRleFN0b3JhZ2UzRCggX2dsLlRFWFRVUkVfMkRfQVJSQVksIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwc1sgMCBdLndpZHRoLCBtaXBtYXBzWyAwIF0uaGVpZ2h0LCBpbWFnZS5kZXB0aCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1pcG1hcHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdG1pcG1hcCA9IG1pcG1hcHNbIGkgXTtcblxuXHRcdFx0XHRcdFx0aWYgKCB0ZXh0dXJlLmZvcm1hdCAhPT0gUkdCQUZvcm1hdCApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGdsRm9ybWF0ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRhdGFSZWFkeSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHRleHR1cmUubGF5ZXJVcGRhdGVzLnNpemUgPiAwICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uc3QgbGF5ZXJCeXRlTGVuZ3RoID0gZ2V0Qnl0ZUxlbmd0aCggbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCB0ZXh0dXJlLmZvcm1hdCwgdGV4dHVyZS50eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRmb3IgKCBjb25zdCBsYXllckluZGV4IG9mIHRleHR1cmUubGF5ZXJVcGRhdGVzICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBsYXllckRhdGEgPSBtaXBtYXAuZGF0YS5zdWJhcnJheShcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bGF5ZXJJbmRleCAqIGxheWVyQnl0ZUxlbmd0aCAvIG1pcG1hcC5kYXRhLkJZVEVTX1BFUl9FTEVNRU5ULFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIGxheWVySW5kZXggKyAxICkgKiBsYXllckJ5dGVMZW5ndGggLyBtaXBtYXAuZGF0YS5CWVRFU19QRVJfRUxFTUVOVFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlLmNvbXByZXNzZWRUZXhTdWJJbWFnZTNEKCBfZ2wuVEVYVFVSRV8yRF9BUlJBWSwgaSwgMCwgMCwgbGF5ZXJJbmRleCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCAxLCBnbEZvcm1hdCwgbGF5ZXJEYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0ZXh0dXJlLmNsZWFyTGF5ZXJVcGRhdGVzKCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlLmNvbXByZXNzZWRUZXhTdWJJbWFnZTNEKCBfZ2wuVEVYVFVSRV8yRF9BUlJBWSwgaSwgMCwgMCwgMCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgZ2xGb3JtYXQsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0ZS5jb21wcmVzc2VkVGV4SW1hZ2UzRCggX2dsLlRFWFRVUkVfMkRfQVJSQVksIGksIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgaW1hZ2UuZGVwdGgsIDAsIG1pcG1hcC5kYXRhLCAwLCAwICk7XG5cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEF0dGVtcHQgdG8gbG9hZCB1bnN1cHBvcnRlZCBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0IGluIC51cGxvYWRUZXh0dXJlKCknICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggZGF0YVJlYWR5ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdWJJbWFnZTNEKCBfZ2wuVEVYVFVSRV8yRF9BUlJBWSwgaSwgMCwgMCwgMCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UzRCggX2dsLlRFWFRVUkVfMkRfQVJSQVksIGksIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgaW1hZ2UuZGVwdGgsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSAmJiBhbGxvY2F0ZU1lbW9yeSApIHtcblxuXHRcdFx0XHRcdFx0c3RhdGUudGV4U3RvcmFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXBzWyAwIF0ud2lkdGgsIG1pcG1hcHNbIDAgXS5oZWlnaHQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBtaXBtYXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRtaXBtYXAgPSBtaXBtYXBzWyBpIF07XG5cblx0XHRcdFx0XHRcdGlmICggdGV4dHVyZS5mb3JtYXQgIT09IFJHQkFGb3JtYXQgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBnbEZvcm1hdCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkYXRhUmVhZHkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0c3RhdGUuY29tcHJlc3NlZFRleFN1YkltYWdlMkQoIF9nbC5URVhUVVJFXzJELCBpLCAwLCAwLCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIGdsRm9ybWF0LCBtaXBtYXAuZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0ZS5jb21wcmVzc2VkVGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGksIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQXR0ZW1wdCB0byBsb2FkIHVuc3VwcG9ydGVkIGNvbXByZXNzZWQgdGV4dHVyZSBmb3JtYXQgaW4gLnVwbG9hZFRleHR1cmUoKScgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBkYXRhUmVhZHkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlMkQoIF9nbC5URVhUVVJFXzJELCBpLCAwLCAwLCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFXzJELCBpLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzRGF0YUFycmF5VGV4dHVyZSApIHtcblxuXHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdG9yYWdlM0QoIF9nbC5URVhUVVJFXzJEX0FSUkFZLCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGltYWdlLmRlcHRoICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGRhdGFSZWFkeSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCB0ZXh0dXJlLmxheWVyVXBkYXRlcy5zaXplID4gMCApIHtcblxuXHRcdFx0XHRcdFx0XHRjb25zdCBsYXllckJ5dGVMZW5ndGggPSBnZXRCeXRlTGVuZ3RoKCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCB0ZXh0dXJlLmZvcm1hdCwgdGV4dHVyZS50eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Zm9yICggY29uc3QgbGF5ZXJJbmRleCBvZiB0ZXh0dXJlLmxheWVyVXBkYXRlcyApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IGxheWVyRGF0YSA9IGltYWdlLmRhdGEuc3ViYXJyYXkoXG5cdFx0XHRcdFx0XHRcdFx0XHRsYXllckluZGV4ICogbGF5ZXJCeXRlTGVuZ3RoIC8gaW1hZ2UuZGF0YS5CWVRFU19QRVJfRUxFTUVOVCxcblx0XHRcdFx0XHRcdFx0XHRcdCggbGF5ZXJJbmRleCArIDEgKSAqIGxheWVyQnl0ZUxlbmd0aCAvIGltYWdlLmRhdGEuQllURVNfUEVSX0VMRU1FTlRcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlM0QoIF9nbC5URVhUVVJFXzJEX0FSUkFZLCAwLCAwLCAwLCBsYXllckluZGV4LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCAxLCBnbEZvcm1hdCwgZ2xUeXBlLCBsYXllckRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0dGV4dHVyZS5jbGVhckxheWVyVXBkYXRlcygpO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlM0QoIF9nbC5URVhUVVJFXzJEX0FSUkFZLCAwLCAwLCAwLCAwLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHN0YXRlLnRleEltYWdlM0QoIF9nbC5URVhUVVJFXzJEX0FSUkFZLCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0RhdGEzRFRleHR1cmUgKSB7XG5cblx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBhbGxvY2F0ZU1lbW9yeSApIHtcblxuXHRcdFx0XHRcdFx0c3RhdGUudGV4U3RvcmFnZTNEKCBfZ2wuVEVYVFVSRV8zRCwgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBpbWFnZS5kZXB0aCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBkYXRhUmVhZHkgKSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlM0QoIF9nbC5URVhUVVJFXzNELCAwLCAwLCAwLCAwLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTNEKCBfZ2wuVEVYVFVSRV8zRCwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgaW1hZ2UuZGVwdGgsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlLmRhdGEgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIHRleHR1cmUuaXNGcmFtZWJ1ZmZlclRleHR1cmUgKSB7XG5cblx0XHRcdFx0aWYgKCBhbGxvY2F0ZU1lbW9yeSApIHtcblxuXHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0c3RhdGUudGV4U3RvcmFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRsZXQgd2lkdGggPSBpbWFnZS53aWR0aCwgaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBsZXZlbHM7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGksIGdsSW50ZXJuYWxGb3JtYXQsIHdpZHRoLCBoZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG51bGwgKTtcblxuXHRcdFx0XHRcdFx0XHR3aWR0aCA+Pj0gMTtcblx0XHRcdFx0XHRcdFx0aGVpZ2h0ID4+PSAxO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIHJlZ3VsYXIgVGV4dHVyZSAoaW1hZ2UsIHZpZGVvLCBjYW52YXMpXG5cblx0XHRcdFx0Ly8gdXNlIG1hbnVhbGx5IGNyZWF0ZWQgbWlwbWFwcyBpZiBhdmFpbGFibGVcblx0XHRcdFx0Ly8gaWYgdGhlcmUgYXJlIG5vIG1hbnVhbCBtaXBtYXBzXG5cdFx0XHRcdC8vIHNldCAwIGxldmVsIG1pcG1hcCBhbmQgdGhlbiB1c2UgR0wgdG8gZ2VuZXJhdGUgb3RoZXIgbWlwbWFwIGxldmVsc1xuXG5cdFx0XHRcdGlmICggbWlwbWFwcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICYmIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBkaW1lbnNpb25zID0gZ2V0RGltZW5zaW9ucyggbWlwbWFwc1sgMCBdICk7XG5cblx0XHRcdFx0XHRcdHN0YXRlLnRleFN0b3JhZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgZGltZW5zaW9ucy53aWR0aCwgZGltZW5zaW9ucy5oZWlnaHQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBtaXBtYXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRtaXBtYXAgPSBtaXBtYXBzWyBpIF07XG5cblx0XHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGRhdGFSZWFkeSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlMkQoIF9nbC5URVhUVVJFXzJELCBpLCAwLCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGksIGdsSW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggYWxsb2NhdGVNZW1vcnkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y29uc3QgZGltZW5zaW9ucyA9IGdldERpbWVuc2lvbnMoIGltYWdlICk7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3RvcmFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBkaW1lbnNpb25zLndpZHRoLCBkaW1lbnNpb25zLmhlaWdodCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmICggZGF0YVJlYWR5ICkge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlMkQoIF9nbC5URVhUVVJFXzJELCAwLCAwLCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUgKSApIHtcblxuXHRcdFx0XHRnZW5lcmF0ZU1pcG1hcCggdGV4dHVyZVR5cGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzb3VyY2VQcm9wZXJ0aWVzLl9fdmVyc2lvbiA9IHNvdXJjZS52ZXJzaW9uO1xuXG5cdFx0XHRpZiAoIHRleHR1cmUub25VcGRhdGUgKSB0ZXh0dXJlLm9uVXBkYXRlKCB0ZXh0dXJlICk7XG5cblx0XHR9XG5cblx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gPSB0ZXh0dXJlLnZlcnNpb247XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwbG9hZEN1YmVUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdGlmICggdGV4dHVyZS5pbWFnZS5sZW5ndGggIT09IDYgKSByZXR1cm47XG5cblx0XHRjb25zdCBmb3JjZVVwbG9hZCA9IGluaXRUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSApO1xuXHRcdGNvbnN0IHNvdXJjZSA9IHRleHR1cmUuc291cmNlO1xuXG5cdFx0c3RhdGUuYmluZFRleHR1cmUoIF9nbC5URVhUVVJFX0NVQkVfTUFQLCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSwgX2dsLlRFWFRVUkUwICsgc2xvdCApO1xuXG5cdFx0Y29uc3Qgc291cmNlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBzb3VyY2UgKTtcblxuXHRcdGlmICggc291cmNlLnZlcnNpb24gIT09IHNvdXJjZVByb3BlcnRpZXMuX192ZXJzaW9uIHx8IGZvcmNlVXBsb2FkID09PSB0cnVlICkge1xuXG5cdFx0XHRzdGF0ZS5hY3RpdmVUZXh0dXJlKCBfZ2wuVEVYVFVSRTAgKyBzbG90ICk7XG5cblx0XHRcdGNvbnN0IHdvcmtpbmdQcmltYXJpZXMgPSBDb2xvck1hbmFnZW1lbnQuZ2V0UHJpbWFyaWVzKCBDb2xvck1hbmFnZW1lbnQud29ya2luZ0NvbG9yU3BhY2UgKTtcblx0XHRcdGNvbnN0IHRleHR1cmVQcmltYXJpZXMgPSB0ZXh0dXJlLmNvbG9yU3BhY2UgPT09IE5vQ29sb3JTcGFjZSA/IG51bGwgOiBDb2xvck1hbmFnZW1lbnQuZ2V0UHJpbWFyaWVzKCB0ZXh0dXJlLmNvbG9yU3BhY2UgKTtcblx0XHRcdGNvbnN0IHVucGFja0NvbnZlcnNpb24gPSB0ZXh0dXJlLmNvbG9yU3BhY2UgPT09IE5vQ29sb3JTcGFjZSB8fCB3b3JraW5nUHJpbWFyaWVzID09PSB0ZXh0dXJlUHJpbWFyaWVzID8gX2dsLk5PTkUgOiBfZ2wuQlJPV1NFUl9ERUZBVUxUX1dFQkdMO1xuXG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCB0ZXh0dXJlLmZsaXBZICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIHRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX0FMSUdOTUVOVCwgdGV4dHVyZS51bnBhY2tBbGlnbm1lbnQgKTtcblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19DT0xPUlNQQUNFX0NPTlZFUlNJT05fV0VCR0wsIHVucGFja0NvbnZlcnNpb24gKTtcblxuXHRcdFx0Y29uc3QgaXNDb21wcmVzc2VkID0gKCB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgfHwgdGV4dHVyZS5pbWFnZVsgMCBdLmlzQ29tcHJlc3NlZFRleHR1cmUgKTtcblx0XHRcdGNvbnN0IGlzRGF0YVRleHR1cmUgPSAoIHRleHR1cmUuaW1hZ2VbIDAgXSAmJiB0ZXh0dXJlLmltYWdlWyAwIF0uaXNEYXRhVGV4dHVyZSApO1xuXG5cdFx0XHRjb25zdCBjdWJlSW1hZ2UgPSBbXTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0XHRpZiAoICEgaXNDb21wcmVzc2VkICYmICEgaXNEYXRhVGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdGN1YmVJbWFnZVsgaSBdID0gcmVzaXplSW1hZ2UoIHRleHR1cmUuaW1hZ2VbIGkgXSwgdHJ1ZSwgY2FwYWJpbGl0aWVzLm1heEN1YmVtYXBTaXplICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGN1YmVJbWFnZVsgaSBdID0gaXNEYXRhVGV4dHVyZSA/IHRleHR1cmUuaW1hZ2VbIGkgXS5pbWFnZSA6IHRleHR1cmUuaW1hZ2VbIGkgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y3ViZUltYWdlWyBpIF0gPSB2ZXJpZnlDb2xvclNwYWNlKCB0ZXh0dXJlLCBjdWJlSW1hZ2VbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGltYWdlID0gY3ViZUltYWdlWyAwIF0sXG5cdFx0XHRcdGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCggdGV4dHVyZS5mb3JtYXQsIHRleHR1cmUuY29sb3JTcGFjZSApLFxuXHRcdFx0XHRnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKSxcblx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IGdldEludGVybmFsRm9ybWF0KCB0ZXh0dXJlLmludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCB0ZXh0dXJlLmNvbG9yU3BhY2UgKTtcblxuXHRcdFx0Y29uc3QgdXNlVGV4U3RvcmFnZSA9ICggdGV4dHVyZS5pc1ZpZGVvVGV4dHVyZSAhPT0gdHJ1ZSApO1xuXHRcdFx0Y29uc3QgYWxsb2NhdGVNZW1vcnkgPSAoIHNvdXJjZVByb3BlcnRpZXMuX192ZXJzaW9uID09PSB1bmRlZmluZWQgKSB8fCAoIGZvcmNlVXBsb2FkID09PSB0cnVlICk7XG5cdFx0XHRjb25zdCBkYXRhUmVhZHkgPSBzb3VyY2UuZGF0YVJlYWR5O1xuXHRcdFx0bGV0IGxldmVscyA9IGdldE1pcExldmVscyggdGV4dHVyZSwgaW1hZ2UgKTtcblxuXHRcdFx0c2V0VGV4dHVyZVBhcmFtZXRlcnMoIF9nbC5URVhUVVJFX0NVQkVfTUFQLCB0ZXh0dXJlICk7XG5cblx0XHRcdGxldCBtaXBtYXBzO1xuXG5cdFx0XHRpZiAoIGlzQ29tcHJlc3NlZCApIHtcblxuXHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgJiYgYWxsb2NhdGVNZW1vcnkgKSB7XG5cblx0XHRcdFx0XHRzdGF0ZS50ZXhTdG9yYWdlMkQoIF9nbC5URVhUVVJFX0NVQkVfTUFQLCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0XHRcdG1pcG1hcHMgPSBjdWJlSW1hZ2VbIGkgXS5taXBtYXBzO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgbWlwbWFwcy5sZW5ndGg7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IG1pcG1hcCA9IG1pcG1hcHNbIGogXTtcblxuXHRcdFx0XHRcdFx0aWYgKCB0ZXh0dXJlLmZvcm1hdCAhPT0gUkdCQUZvcm1hdCApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGdsRm9ybWF0ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRhdGFSZWFkeSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRzdGF0ZS5jb21wcmVzc2VkVGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIGosIDAsIDAsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgZ2xGb3JtYXQsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlLmNvbXByZXNzZWRUZXhJbWFnZTJEKCBfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSwgaiwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCAwLCBtaXBtYXAuZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBBdHRlbXB0IHRvIGxvYWQgdW5zdXBwb3J0ZWQgY29tcHJlc3NlZCB0ZXh0dXJlIGZvcm1hdCBpbiAuc2V0VGV4dHVyZUN1YmUoKScgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBkYXRhUmVhZHkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlMkQoIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLCBqLCAwLCAwLCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLCBqLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG1pcG1hcHMgPSB0ZXh0dXJlLm1pcG1hcHM7XG5cblx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICYmIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0Ly8gVE9ETzogVW5pZm9ybWx5IGhhbmRsZSBtaXBtYXAgZGVmaW5pdGlvbnNcblx0XHRcdFx0XHQvLyBOb3JtYWwgdGV4dHVyZXMgYW5kIGNvbXByZXNzZWQgY3ViZSB0ZXh0dXJlcyBkZWZpbmUgYmFzZSBsZXZlbCArIG1pcHMgd2l0aCB0aGVpciBtaXBtYXAgYXJyYXlcblx0XHRcdFx0XHQvLyBVbmNvbXByZXNzZWQgY3ViZSB0ZXh0dXJlcyB1c2UgdGhlaXIgbWlwbWFwIGFycmF5IG9ubHkgZm9yIG1pcHMgKG5vIGJhc2UgbGV2ZWwpXG5cblx0XHRcdFx0XHRpZiAoIG1pcG1hcHMubGVuZ3RoID4gMCApIGxldmVscyArKztcblxuXHRcdFx0XHRcdGNvbnN0IGRpbWVuc2lvbnMgPSBnZXREaW1lbnNpb25zKCBjdWJlSW1hZ2VbIDAgXSApO1xuXG5cdFx0XHRcdFx0c3RhdGUudGV4U3RvcmFnZTJEKCBfZ2wuVEVYVFVSRV9DVUJFX01BUCwgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBkaW1lbnNpb25zLndpZHRoLCBkaW1lbnNpb25zLmhlaWdodCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdFx0aWYgKCBpc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBkYXRhUmVhZHkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdWJJbWFnZTJEKCBfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSwgMCwgMCwgMCwgY3ViZUltYWdlWyBpIF0ud2lkdGgsIGN1YmVJbWFnZVsgaSBdLmhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgY3ViZUltYWdlWyBpIF0uZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCBfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgY3ViZUltYWdlWyBpIF0ud2lkdGgsIGN1YmVJbWFnZVsgaSBdLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgY3ViZUltYWdlWyBpIF0uZGF0YSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IG1pcG1hcHMubGVuZ3RoOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnN0IG1pcG1hcCA9IG1pcG1hcHNbIGogXTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgbWlwbWFwSW1hZ2UgPSBtaXBtYXAuaW1hZ2VbIGkgXS5pbWFnZTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIGRhdGFSZWFkeSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIGogKyAxLCAwLCAwLCBtaXBtYXBJbWFnZS53aWR0aCwgbWlwbWFwSW1hZ2UuaGVpZ2h0LCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXBJbWFnZS5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLCBqICsgMSwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwSW1hZ2Uud2lkdGgsIG1pcG1hcEltYWdlLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwSW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggZGF0YVJlYWR5ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIDAsIDAsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIGN1YmVJbWFnZVsgaSBdICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLCAwLCBnbEludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCBjdWJlSW1hZ2VbIGkgXSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IG1pcG1hcHMubGVuZ3RoOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnN0IG1pcG1hcCA9IG1pcG1hcHNbIGogXTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIGRhdGFSZWFkeSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIGogKyAxLCAwLCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAuaW1hZ2VbIGkgXSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCBfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSwgaiArIDEsIGdsSW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5pbWFnZVsgaSBdICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCB0ZXh0dXJlICkgKSB7XG5cblx0XHRcdFx0Ly8gV2UgYXNzdW1lIGltYWdlcyBmb3IgY3ViZSBtYXAgaGF2ZSB0aGUgc2FtZSBzaXplLlxuXHRcdFx0XHRnZW5lcmF0ZU1pcG1hcCggX2dsLlRFWFRVUkVfQ1VCRV9NQVAgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzb3VyY2VQcm9wZXJ0aWVzLl9fdmVyc2lvbiA9IHNvdXJjZS52ZXJzaW9uO1xuXG5cdFx0XHRpZiAoIHRleHR1cmUub25VcGRhdGUgKSB0ZXh0dXJlLm9uVXBkYXRlKCB0ZXh0dXJlICk7XG5cblx0XHR9XG5cblx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gPSB0ZXh0dXJlLnZlcnNpb247XG5cblx0fVxuXG5cdC8vIFJlbmRlciB0YXJnZXRzXG5cblx0Ly8gU2V0dXAgc3RvcmFnZSBmb3IgdGFyZ2V0IHRleHR1cmUgYW5kIGJpbmQgaXQgdG8gY29ycmVjdCBmcmFtZWJ1ZmZlclxuXHRmdW5jdGlvbiBzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSggZnJhbWVidWZmZXIsIHJlbmRlclRhcmdldCwgdGV4dHVyZSwgYXR0YWNobWVudCwgdGV4dHVyZVRhcmdldCwgbGV2ZWwgKSB7XG5cblx0XHRjb25zdCBnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUuZm9ybWF0LCB0ZXh0dXJlLmNvbG9yU3BhY2UgKTtcblx0XHRjb25zdCBnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKTtcblx0XHRjb25zdCBnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxGb3JtYXQoIHRleHR1cmUuaW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIHRleHR1cmUuY29sb3JTcGFjZSApO1xuXHRcdGNvbnN0IHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0dGV4dHVyZVByb3BlcnRpZXMuX19yZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQ7XG5cblx0XHRpZiAoICEgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2hhc0V4dGVybmFsVGV4dHVyZXMgKSB7XG5cblx0XHRcdGNvbnN0IHdpZHRoID0gTWF0aC5tYXgoIDEsIHJlbmRlclRhcmdldC53aWR0aCA+PiBsZXZlbCApO1xuXHRcdFx0Y29uc3QgaGVpZ2h0ID0gTWF0aC5tYXgoIDEsIHJlbmRlclRhcmdldC5oZWlnaHQgPj4gbGV2ZWwgKTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlVGFyZ2V0ID09PSBfZ2wuVEVYVFVSRV8zRCB8fCB0ZXh0dXJlVGFyZ2V0ID09PSBfZ2wuVEVYVFVSRV8yRF9BUlJBWSApIHtcblxuXHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTNEKCB0ZXh0dXJlVGFyZ2V0LCBsZXZlbCwgZ2xJbnRlcm5hbEZvcm1hdCwgd2lkdGgsIGhlaWdodCwgcmVuZGVyVGFyZ2V0LmRlcHRoLCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBudWxsICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggdGV4dHVyZVRhcmdldCwgbGV2ZWwsIGdsSW50ZXJuYWxGb3JtYXQsIHdpZHRoLCBoZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG51bGwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIGZyYW1lYnVmZmVyICk7XG5cblx0XHRpZiAoIHVzZU11bHRpc2FtcGxlZFJUVCggcmVuZGVyVGFyZ2V0ICkgKSB7XG5cblx0XHRcdG11bHRpc2FtcGxlZFJUVEV4dC5mcmFtZWJ1ZmZlclRleHR1cmUyRE11bHRpc2FtcGxlRVhUKCBfZ2wuRlJBTUVCVUZGRVIsIGF0dGFjaG1lbnQsIHRleHR1cmVUYXJnZXQsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCAwLCBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKCByZW5kZXJUYXJnZXQgKSApO1xuXG5cdFx0fSBlbHNlIGlmICggdGV4dHVyZVRhcmdldCA9PT0gX2dsLlRFWFRVUkVfMkQgfHwgKCB0ZXh0dXJlVGFyZ2V0ID49IF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggJiYgdGV4dHVyZVRhcmdldCA8PSBfZ2wuVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9aICkgKSB7IC8vIHNlZSAjMjQ3NTNcblxuXHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCBfZ2wuRlJBTUVCVUZGRVIsIGF0dGFjaG1lbnQsIHRleHR1cmVUYXJnZXQsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBsZXZlbCApO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIG51bGwgKTtcblxuXHR9XG5cblx0Ly8gU2V0dXAgc3RvcmFnZSBmb3IgaW50ZXJuYWwgZGVwdGgvc3RlbmNpbCBidWZmZXJzIGFuZCBiaW5kIHRvIGNvcnJlY3QgZnJhbWVidWZmZXJcblx0ZnVuY3Rpb24gc2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJidWZmZXIsIHJlbmRlclRhcmdldCwgaXNNdWx0aXNhbXBsZSApIHtcblxuXHRcdF9nbC5iaW5kUmVuZGVyYnVmZmVyKCBfZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIgKTtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICkge1xuXG5cdFx0XHQvLyByZXRyaWV2ZSB0aGUgZGVwdGggYXR0YWNobWVudCB0eXBlc1xuXHRcdFx0Y29uc3QgZGVwdGhUZXh0dXJlID0gcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZTtcblx0XHRcdGNvbnN0IGRlcHRoVHlwZSA9IGRlcHRoVGV4dHVyZSAmJiBkZXB0aFRleHR1cmUuaXNEZXB0aFRleHR1cmUgPyBkZXB0aFRleHR1cmUudHlwZSA6IG51bGw7XG5cdFx0XHRjb25zdCBnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxEZXB0aEZvcm1hdCggcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIsIGRlcHRoVHlwZSApO1xuXHRcdFx0Y29uc3QgZ2xBdHRhY2htZW50VHlwZSA9IHJlbmRlclRhcmdldC5zdGVuY2lsQnVmZmVyID8gX2dsLkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCA6IF9nbC5ERVBUSF9BVFRBQ0hNRU5UO1xuXG5cdFx0XHQvLyBzZXQgdXAgdGhlIGF0dGFjaG1lbnRcblx0XHRcdGNvbnN0IHNhbXBsZXMgPSBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKCByZW5kZXJUYXJnZXQgKTtcblx0XHRcdGNvbnN0IGlzVXNlTXVsdGlzYW1wbGVkUlRUID0gdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKTtcblx0XHRcdGlmICggaXNVc2VNdWx0aXNhbXBsZWRSVFQgKSB7XG5cblx0XHRcdFx0bXVsdGlzYW1wbGVkUlRURXh0LnJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZUVYVCggX2dsLlJFTkRFUkJVRkZFUiwgc2FtcGxlcywgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGlzTXVsdGlzYW1wbGUgKSB7XG5cblx0XHRcdFx0X2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZSggX2dsLlJFTkRFUkJVRkZFUiwgc2FtcGxlcywgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoIF9nbC5SRU5ERVJCVUZGRVIsIGdsSW50ZXJuYWxGb3JtYXQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9nbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBnbEF0dGFjaG1lbnRUeXBlLCBfZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IHRleHR1cmVzID0gcmVuZGVyVGFyZ2V0LnRleHR1cmVzO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0ZXh0dXJlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgdGV4dHVyZSA9IHRleHR1cmVzWyBpIF07XG5cblx0XHRcdFx0Y29uc3QgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLmZvcm1hdCwgdGV4dHVyZS5jb2xvclNwYWNlICk7XG5cdFx0XHRcdGNvbnN0IGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUudHlwZSApO1xuXHRcdFx0XHRjb25zdCBnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxGb3JtYXQoIHRleHR1cmUuaW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIHRleHR1cmUuY29sb3JTcGFjZSApO1xuXHRcdFx0XHRjb25zdCBzYW1wbGVzID0gZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdFx0aWYgKCBpc011bHRpc2FtcGxlICYmIHVzZU11bHRpc2FtcGxlZFJUVCggcmVuZGVyVGFyZ2V0ICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0X2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZSggX2dsLlJFTkRFUkJVRkZFUiwgc2FtcGxlcywgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSApIHtcblxuXHRcdFx0XHRcdG11bHRpc2FtcGxlZFJUVEV4dC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGVFWFQoIF9nbC5SRU5ERVJCVUZGRVIsIHNhbXBsZXMsIGdsSW50ZXJuYWxGb3JtYXQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZSggX2dsLlJFTkRFUkJVRkZFUiwgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRfZ2wuYmluZFJlbmRlcmJ1ZmZlciggX2dsLlJFTkRFUkJVRkZFUiwgbnVsbCApO1xuXG5cdH1cblxuXHQvLyBTZXR1cCByZXNvdXJjZXMgZm9yIGEgRGVwdGggVGV4dHVyZSBmb3IgYSBGQk8gKG5lZWRzIGFuIGV4dGVuc2lvbilcblx0ZnVuY3Rpb24gc2V0dXBEZXB0aFRleHR1cmUoIGZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRjb25zdCBpc0N1YmUgPSAoIHJlbmRlclRhcmdldCAmJiByZW5kZXJUYXJnZXQuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgKTtcblx0XHRpZiAoIGlzQ3ViZSApIHRocm93IG5ldyBFcnJvciggJ0RlcHRoIFRleHR1cmUgd2l0aCBjdWJlIHJlbmRlciB0YXJnZXRzIGlzIG5vdCBzdXBwb3J0ZWQnICk7XG5cblx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgZnJhbWVidWZmZXIgKTtcblxuXHRcdGlmICggISAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgJiYgcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pc0RlcHRoVGV4dHVyZSApICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuRGVwdGhUZXh0dXJlJyApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSApO1xuXHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fcmVuZGVyVGFyZ2V0ID0gcmVuZGVyVGFyZ2V0O1xuXG5cdFx0Ly8gdXBsb2FkIGFuIGVtcHR5IGRlcHRoIHRleHR1cmUgd2l0aCBmcmFtZWJ1ZmZlciBzaXplXG5cdFx0aWYgKCAhIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlIHx8XG5cdFx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuaW1hZ2Uud2lkdGggIT09IHJlbmRlclRhcmdldC53aWR0aCB8fFxuXHRcdFx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmltYWdlLmhlaWdodCAhPT0gcmVuZGVyVGFyZ2V0LmhlaWdodCApIHtcblxuXHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS53aWR0aCA9IHJlbmRlclRhcmdldC53aWR0aDtcblx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuaW1hZ2UuaGVpZ2h0ID0gcmVuZGVyVGFyZ2V0LmhlaWdodDtcblx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0c2V0VGV4dHVyZTJEKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLCAwICk7XG5cblx0XHRjb25zdCB3ZWJnbERlcHRoVGV4dHVyZSA9IHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlO1xuXHRcdGNvbnN0IHNhbXBsZXMgPSBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5mb3JtYXQgPT09IERlcHRoRm9ybWF0ICkge1xuXG5cdFx0XHRpZiAoIHVzZU11bHRpc2FtcGxlZFJUVCggcmVuZGVyVGFyZ2V0ICkgKSB7XG5cblx0XHRcdFx0bXVsdGlzYW1wbGVkUlRURXh0LmZyYW1lYnVmZmVyVGV4dHVyZTJETXVsdGlzYW1wbGVFWFQoIF9nbC5GUkFNRUJVRkZFUiwgX2dsLkRFUFRIX0FUVEFDSE1FTlQsIF9nbC5URVhUVVJFXzJELCB3ZWJnbERlcHRoVGV4dHVyZSwgMCwgc2FtcGxlcyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggX2dsLkZSQU1FQlVGRkVSLCBfZ2wuREVQVEhfQVRUQUNITUVOVCwgX2dsLlRFWFRVUkVfMkQsIHdlYmdsRGVwdGhUZXh0dXJlLCAwICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuZm9ybWF0ID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSB7XG5cblx0XHRcdGlmICggdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSApIHtcblxuXHRcdFx0XHRtdWx0aXNhbXBsZWRSVFRFeHQuZnJhbWVidWZmZXJUZXh0dXJlMkRNdWx0aXNhbXBsZUVYVCggX2dsLkZSQU1FQlVGRkVSLCBfZ2wuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5ULCBfZ2wuVEVYVFVSRV8yRCwgd2ViZ2xEZXB0aFRleHR1cmUsIDAsIHNhbXBsZXMgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIF9nbC5GUkFNRUJVRkZFUiwgX2dsLkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCwgX2dsLlRFWFRVUkVfMkQsIHdlYmdsRGVwdGhUZXh0dXJlLCAwICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1Vua25vd24gZGVwdGhUZXh0dXJlIGZvcm1hdCcgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gU2V0dXAgR0wgcmVzb3VyY2VzIGZvciBhIG5vbi10ZXh0dXJlIGRlcHRoIGJ1ZmZlclxuXHRmdW5jdGlvbiBzZXR1cERlcHRoUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdGNvbnN0IGlzQ3ViZSA9ICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ID09PSB0cnVlICk7XG5cblx0XHQvLyBpZiB0aGUgYm91bmQgZGVwdGggdGV4dHVyZSBoYXMgY2hhbmdlZFxuXHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2JvdW5kRGVwdGhUZXh0dXJlICE9PSByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHQvLyBmaXJlIHRoZSBkaXNwb3NlIGV2ZW50IHRvIGdldCByaWQgb2Ygc3RvcmVkIHN0YXRlIGFzc29jaWF0ZWQgd2l0aCB0aGUgcHJldmlvdXNseSBib3VuZCBkZXB0aCBidWZmZXJcblx0XHRcdGNvbnN0IGRlcHRoVGV4dHVyZSA9IHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmU7XG5cdFx0XHRpZiAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX19kZXB0aERpc3Bvc2VDYWxsYmFjayApIHtcblxuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fZGVwdGhEaXNwb3NlQ2FsbGJhY2soKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBzZXQgdXAgZGlzcG9zZSBsaXN0ZW5lcnMgdG8gdHJhY2sgd2hlbiB0aGUgY3VycmVudGx5IGF0dGFjaGVkIGJ1ZmZlciBpcyBpbXBsaWNpdGx5IHVuYm91bmRcblx0XHRcdGlmICggZGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHRcdGNvbnN0IGRpc3Bvc2VFdmVudCA9ICgpID0+IHtcblxuXHRcdFx0XHRcdGRlbGV0ZSByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fYm91bmREZXB0aFRleHR1cmU7XG5cdFx0XHRcdFx0ZGVsZXRlIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX19kZXB0aERpc3Bvc2VDYWxsYmFjaztcblx0XHRcdFx0XHRkZXB0aFRleHR1cmUucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBkaXNwb3NlRXZlbnQgKTtcblxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGRlcHRoVGV4dHVyZS5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIGRpc3Bvc2VFdmVudCApO1xuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fZGVwdGhEaXNwb3NlQ2FsbGJhY2sgPSBkaXNwb3NlRXZlbnQ7XG5cblx0XHRcdH1cblxuXHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2JvdW5kRGVwdGhUZXh0dXJlID0gZGVwdGhUZXh0dXJlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICYmICEgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2F1dG9BbGxvY2F0ZURlcHRoQnVmZmVyICkge1xuXG5cdFx0XHRpZiAoIGlzQ3ViZSApIHRocm93IG5ldyBFcnJvciggJ3RhcmdldC5kZXB0aFRleHR1cmUgbm90IHN1cHBvcnRlZCBpbiBDdWJlIHJlbmRlciB0YXJnZXRzJyApO1xuXG5cdFx0XHRjb25zdCBtaXBtYXBzID0gcmVuZGVyVGFyZ2V0LnRleHR1cmUubWlwbWFwcztcblxuXHRcdFx0aWYgKCBtaXBtYXBzICYmIG1pcG1hcHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRzZXR1cERlcHRoVGV4dHVyZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIDAgXSwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c2V0dXBEZXB0aFRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBpc0N1YmUgKSB7XG5cblx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBpIF0gKTtcblxuXHRcdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXJbIGkgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlclsgaSBdID0gX2dsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuXHRcdFx0XHRcdFx0c2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlclsgaSBdLCByZW5kZXJUYXJnZXQsIGZhbHNlICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBhdHRhY2ggYnVmZmVyIGlmIGl0J3MgYmVlbiBjcmVhdGVkIGFscmVhZHlcblx0XHRcdFx0XHRcdGNvbnN0IGdsQXR0YWNobWVudFR5cGUgPSByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlciA/IF9nbC5ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQgOiBfZ2wuREVQVEhfQVRUQUNITUVOVDtcblx0XHRcdFx0XHRcdGNvbnN0IHJlbmRlcmJ1ZmZlciA9IHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyWyBpIF07XG5cdFx0XHRcdFx0XHRfZ2wuYmluZFJlbmRlcmJ1ZmZlciggX2dsLlJFTkRFUkJVRkZFUiwgcmVuZGVyYnVmZmVyICk7XG5cdFx0XHRcdFx0XHRfZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgZ2xBdHRhY2htZW50VHlwZSwgX2dsLlJFTkRFUkJVRkZFUiwgcmVuZGVyYnVmZmVyICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnN0IG1pcG1hcHMgPSByZW5kZXJUYXJnZXQudGV4dHVyZS5taXBtYXBzO1xuXG5cdFx0XHRcdGlmICggbWlwbWFwcyAmJiBtaXBtYXBzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIDAgXSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cdFx0XHRcdFx0c2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCBmYWxzZSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBhdHRhY2ggYnVmZmVyIGlmIGl0J3MgYmVlbiBjcmVhdGVkIGFscmVhZHlcblx0XHRcdFx0XHRjb25zdCBnbEF0dGFjaG1lbnRUeXBlID0gcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgPyBfZ2wuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5UIDogX2dsLkRFUFRIX0FUVEFDSE1FTlQ7XG5cdFx0XHRcdFx0Y29uc3QgcmVuZGVyYnVmZmVyID0gcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXI7XG5cdFx0XHRcdFx0X2dsLmJpbmRSZW5kZXJidWZmZXIoIF9nbC5SRU5ERVJCVUZGRVIsIHJlbmRlcmJ1ZmZlciApO1xuXHRcdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBnbEF0dGFjaG1lbnRUeXBlLCBfZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBudWxsICk7XG5cblx0fVxuXG5cdC8vIHJlYmluZCBmcmFtZWJ1ZmZlciB3aXRoIGV4dGVybmFsIHRleHR1cmVzXG5cdGZ1bmN0aW9uIHJlYmluZFRleHR1cmVzKCByZW5kZXJUYXJnZXQsIGNvbG9yVGV4dHVyZSwgZGVwdGhUZXh0dXJlICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdGlmICggY29sb3JUZXh0dXJlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCByZW5kZXJUYXJnZXQudGV4dHVyZSwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwLCBfZ2wuVEVYVFVSRV8yRCwgMCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBkZXB0aFRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c2V0dXBEZXB0aFJlbmRlcmJ1ZmZlciggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIFNldCB1cCBHTCByZXNvdXJjZXMgZm9yIHRoZSByZW5kZXIgdGFyZ2V0XG5cdGZ1bmN0aW9uIHNldHVwUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdGNvbnN0IHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKTtcblxuXHRcdHJlbmRlclRhcmdldC5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uUmVuZGVyVGFyZ2V0RGlzcG9zZSApO1xuXG5cdFx0Y29uc3QgdGV4dHVyZXMgPSByZW5kZXJUYXJnZXQudGV4dHVyZXM7XG5cblx0XHRjb25zdCBpc0N1YmUgPSAoIHJlbmRlclRhcmdldC5pc1dlYkdMQ3ViZVJlbmRlclRhcmdldCA9PT0gdHJ1ZSApO1xuXHRcdGNvbnN0IGlzTXVsdGlwbGVSZW5kZXJUYXJnZXRzID0gKCB0ZXh0dXJlcy5sZW5ndGggPiAxICk7XG5cblx0XHRpZiAoICEgaXNNdWx0aXBsZVJlbmRlclRhcmdldHMgKSB7XG5cblx0XHRcdGlmICggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSA9IF9nbC5jcmVhdGVUZXh0dXJlKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uID0gdGV4dHVyZS52ZXJzaW9uO1xuXHRcdFx0aW5mby5tZW1vcnkudGV4dHVyZXMgKys7XG5cblx0XHR9XG5cblx0XHQvLyBTZXR1cCBmcmFtZWJ1ZmZlclxuXG5cdFx0aWYgKCBpc0N1YmUgKSB7XG5cblx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyID0gW107XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0aWYgKCB0ZXh0dXJlLm1pcG1hcHMgJiYgdGV4dHVyZS5taXBtYXBzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdID0gW107XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgbGV2ZWwgPSAwOyBsZXZlbCA8IHRleHR1cmUubWlwbWFwcy5sZW5ndGg7IGxldmVsICsrICkge1xuXG5cdFx0XHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdWyBsZXZlbCBdID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBpIF0gPSBfZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggdGV4dHVyZS5taXBtYXBzICYmIHRleHR1cmUubWlwbWFwcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyID0gW107XG5cblx0XHRcdFx0Zm9yICggbGV0IGxldmVsID0gMDsgbGV2ZWwgPCB0ZXh0dXJlLm1pcG1hcHMubGVuZ3RoOyBsZXZlbCArKyApIHtcblxuXHRcdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBsZXZlbCBdID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpc011bHRpcGxlUmVuZGVyVGFyZ2V0cyApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGV4dHVyZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBhdHRhY2htZW50UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlc1sgaSBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGF0dGFjaG1lbnRQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGF0dGFjaG1lbnRQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlID0gX2dsLmNyZWF0ZVRleHR1cmUoKTtcblxuXHRcdFx0XHRcdFx0aW5mby5tZW1vcnkudGV4dHVyZXMgKys7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggKCByZW5kZXJUYXJnZXQuc2FtcGxlcyA+IDAgKSAmJiB1c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciA9IF9nbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlciA9IFtdO1xuXG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRleHR1cmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHRleHR1cmUgPSB0ZXh0dXJlc1sgaSBdO1xuXHRcdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyWyBpIF0gPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cblx0XHRcdFx0XHRfZ2wuYmluZFJlbmRlcmJ1ZmZlciggX2dsLlJFTkRFUkJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JSZW5kZXJidWZmZXJbIGkgXSApO1xuXG5cdFx0XHRcdFx0Y29uc3QgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLmZvcm1hdCwgdGV4dHVyZS5jb2xvclNwYWNlICk7XG5cdFx0XHRcdFx0Y29uc3QgZ2xUeXBlID0gdXRpbHMuY29udmVydCggdGV4dHVyZS50eXBlICk7XG5cdFx0XHRcdFx0Y29uc3QgZ2xJbnRlcm5hbEZvcm1hdCA9IGdldEludGVybmFsRm9ybWF0KCB0ZXh0dXJlLmludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCB0ZXh0dXJlLmNvbG9yU3BhY2UsIHJlbmRlclRhcmdldC5pc1hSUmVuZGVyVGFyZ2V0ID09PSB0cnVlICk7XG5cdFx0XHRcdFx0Y29uc3Qgc2FtcGxlcyA9IGdldFJlbmRlclRhcmdldFNhbXBsZXMoIHJlbmRlclRhcmdldCApO1xuXHRcdFx0XHRcdF9nbC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGUoIF9nbC5SRU5ERVJCVUZGRVIsIHNhbXBsZXMsIGdsSW50ZXJuYWxGb3JtYXQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHRcdFx0X2dsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksIF9nbC5SRU5ERVJCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyWyBpIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0X2dsLmJpbmRSZW5kZXJidWZmZXIoIF9nbC5SRU5ERVJCVUZGRVIsIG51bGwgKTtcblxuXHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciApIHtcblxuXHRcdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoUmVuZGVyYnVmZmVyID0gX2dsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuXHRcdFx0XHRcdHNldHVwUmVuZGVyQnVmZmVyU3RvcmFnZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhSZW5kZXJidWZmZXIsIHJlbmRlclRhcmdldCwgdHJ1ZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgbnVsbCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBTZXR1cCBjb2xvciBidWZmZXJcblxuXHRcdGlmICggaXNDdWJlICkge1xuXG5cdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggX2dsLlRFWFRVUkVfQ1VCRV9NQVAsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cdFx0XHRzZXRUZXh0dXJlUGFyYW1ldGVycyggX2dsLlRFWFRVUkVfQ1VCRV9NQVAsIHRleHR1cmUgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0XHRpZiAoIHRleHR1cmUubWlwbWFwcyAmJiB0ZXh0dXJlLm1pcG1hcHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBsZXZlbCA9IDA7IGxldmVsIDwgdGV4dHVyZS5taXBtYXBzLmxlbmd0aDsgbGV2ZWwgKysgKSB7XG5cblx0XHRcdFx0XHRcdHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdWyBsZXZlbCBdLCByZW5kZXJUYXJnZXQsIHRleHR1cmUsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIGxldmVsICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdLCByZW5kZXJUYXJnZXQsIHRleHR1cmUsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIDAgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUgKSApIHtcblxuXHRcdFx0XHRnZW5lcmF0ZU1pcG1hcCggX2dsLlRFWFRVUkVfQ1VCRV9NQVAgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZS51bmJpbmRUZXh0dXJlKCk7XG5cblx0XHR9IGVsc2UgaWYgKCBpc011bHRpcGxlUmVuZGVyVGFyZ2V0cyApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHRleHR1cmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGF0dGFjaG1lbnQgPSB0ZXh0dXJlc1sgaSBdO1xuXHRcdFx0XHRjb25zdCBhdHRhY2htZW50UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBhdHRhY2htZW50ICk7XG5cblx0XHRcdFx0bGV0IGdsVGV4dHVyZVR5cGUgPSBfZ2wuVEVYVFVSRV8yRDtcblxuXHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldC5pc1dlYkdMM0RSZW5kZXJUYXJnZXQgfHwgcmVuZGVyVGFyZ2V0LmlzV2ViR0xBcnJheVJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0XHRcdGdsVGV4dHVyZVR5cGUgPSByZW5kZXJUYXJnZXQuaXNXZWJHTDNEUmVuZGVyVGFyZ2V0ID8gX2dsLlRFWFRVUkVfM0QgOiBfZ2wuVEVYVFVSRV8yRF9BUlJBWTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3RhdGUuYmluZFRleHR1cmUoIGdsVGV4dHVyZVR5cGUsIGF0dGFjaG1lbnRQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cdFx0XHRcdHNldFRleHR1cmVQYXJhbWV0ZXJzKCBnbFRleHR1cmVUeXBlLCBhdHRhY2htZW50ICk7XG5cdFx0XHRcdHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCBhdHRhY2htZW50LCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBpLCBnbFRleHR1cmVUeXBlLCAwICk7XG5cblx0XHRcdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIGF0dGFjaG1lbnQgKSApIHtcblxuXHRcdFx0XHRcdGdlbmVyYXRlTWlwbWFwKCBnbFRleHR1cmVUeXBlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHN0YXRlLnVuYmluZFRleHR1cmUoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGxldCBnbFRleHR1cmVUeXBlID0gX2dsLlRFWFRVUkVfMkQ7XG5cblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0wzRFJlbmRlclRhcmdldCB8fCByZW5kZXJUYXJnZXQuaXNXZWJHTEFycmF5UmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHRcdGdsVGV4dHVyZVR5cGUgPSByZW5kZXJUYXJnZXQuaXNXZWJHTDNEUmVuZGVyVGFyZ2V0ID8gX2dsLlRFWFRVUkVfM0QgOiBfZ2wuVEVYVFVSRV8yRF9BUlJBWTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggZ2xUZXh0dXJlVHlwZSwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblx0XHRcdHNldFRleHR1cmVQYXJhbWV0ZXJzKCBnbFRleHR1cmVUeXBlLCB0ZXh0dXJlICk7XG5cblx0XHRcdGlmICggdGV4dHVyZS5taXBtYXBzICYmIHRleHR1cmUubWlwbWFwcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBsZXZlbCA9IDA7IGxldmVsIDwgdGV4dHVyZS5taXBtYXBzLmxlbmd0aDsgbGV2ZWwgKysgKSB7XG5cblx0XHRcdFx0XHRzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGxldmVsIF0sIHJlbmRlclRhcmdldCwgdGV4dHVyZSwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbFRleHR1cmVUeXBlLCBsZXZlbCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIsIHJlbmRlclRhcmdldCwgdGV4dHVyZSwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbFRleHR1cmVUeXBlLCAwICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUgKSApIHtcblxuXHRcdFx0XHRnZW5lcmF0ZU1pcG1hcCggZ2xUZXh0dXJlVHlwZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHN0YXRlLnVuYmluZFRleHR1cmUoKTtcblxuXHRcdH1cblxuXHRcdC8vIFNldHVwIGRlcHRoIGFuZCBzdGVuY2lsIGJ1ZmZlcnNcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICkge1xuXG5cdFx0XHRzZXR1cERlcHRoUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlcyA9IHJlbmRlclRhcmdldC50ZXh0dXJlcztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSB0ZXh0dXJlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgdGV4dHVyZSA9IHRleHR1cmVzWyBpIF07XG5cblx0XHRcdGlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCB0ZXh0dXJlICkgKSB7XG5cblx0XHRcdFx0Y29uc3QgdGFyZ2V0VHlwZSA9IGdldFRhcmdldFR5cGUoIHJlbmRlclRhcmdldCApO1xuXHRcdFx0XHRjb25zdCB3ZWJnbFRleHR1cmUgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlO1xuXG5cdFx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCB0YXJnZXRUeXBlLCB3ZWJnbFRleHR1cmUgKTtcblx0XHRcdFx0Z2VuZXJhdGVNaXBtYXAoIHRhcmdldFR5cGUgKTtcblx0XHRcdFx0c3RhdGUudW5iaW5kVGV4dHVyZSgpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvbnN0IGludmFsaWRhdGlvbkFycmF5UmVhZCA9IFtdO1xuXHRjb25zdCBpbnZhbGlkYXRpb25BcnJheURyYXcgPSBbXTtcblxuXHRmdW5jdGlvbiB1cGRhdGVNdWx0aXNhbXBsZVJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuc2FtcGxlcyA+IDAgKSB7XG5cblx0XHRcdGlmICggdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Y29uc3QgdGV4dHVyZXMgPSByZW5kZXJUYXJnZXQudGV4dHVyZXM7XG5cdFx0XHRcdGNvbnN0IHdpZHRoID0gcmVuZGVyVGFyZ2V0LndpZHRoO1xuXHRcdFx0XHRjb25zdCBoZWlnaHQgPSByZW5kZXJUYXJnZXQuaGVpZ2h0O1xuXHRcdFx0XHRsZXQgbWFzayA9IF9nbC5DT0xPUl9CVUZGRVJfQklUO1xuXHRcdFx0XHRjb25zdCBkZXB0aFN0eWxlID0gcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgPyBfZ2wuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5UIDogX2dsLkRFUFRIX0FUVEFDSE1FTlQ7XG5cdFx0XHRcdGNvbnN0IHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cdFx0XHRcdGNvbnN0IGlzTXVsdGlwbGVSZW5kZXJUYXJnZXRzID0gKCB0ZXh0dXJlcy5sZW5ndGggPiAxICk7XG5cblx0XHRcdFx0Ly8gSWYgTVJUIHdlIG5lZWQgdG8gcmVtb3ZlIEZCTyBhdHRhY2htZW50c1xuXHRcdFx0XHRpZiAoIGlzTXVsdGlwbGVSZW5kZXJUYXJnZXRzICkge1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGV4dHVyZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIgKTtcblx0XHRcdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBpLCBfZ2wuUkVOREVSQlVGRkVSLCBudWxsICk7XG5cblx0XHRcdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciApO1xuXHRcdFx0XHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCBfZ2wuRFJBV19GUkFNRUJVRkZFUiwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwICsgaSwgX2dsLlRFWFRVUkVfMkQsIG51bGwsIDAgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuUkVBRF9GUkFNRUJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIgKTtcblxuXHRcdFx0XHRjb25zdCBtaXBtYXBzID0gcmVuZGVyVGFyZ2V0LnRleHR1cmUubWlwbWFwcztcblxuXHRcdFx0XHRpZiAoIG1pcG1hcHMgJiYgbWlwbWFwcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRFJBV19GUkFNRUJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIDAgXSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5EUkFXX0ZSQU1FQlVGRkVSLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0ZXh0dXJlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldC5yZXNvbHZlRGVwdGhCdWZmZXIgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICkgbWFzayB8PSBfZ2wuREVQVEhfQlVGRkVSX0JJVDtcblxuXHRcdFx0XHRcdFx0Ly8gcmVzb2x2aW5nIHN0ZW5jaWwgaXMgc2xvdyB3aXRoIGEgRDNEIGJhY2tlbmQuIGRpc2FibGUgaXQgZm9yIGFsbCB0cmFuc21pc3Npb24gcmVuZGVyIHRhcmdldHMgKHNlZSAjMjc3OTkpXG5cblx0XHRcdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgJiYgcmVuZGVyVGFyZ2V0LnJlc29sdmVTdGVuY2lsQnVmZmVyICkgbWFzayB8PSBfZ2wuU1RFTkNJTF9CVUZGRVJfQklUO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBpc011bHRpcGxlUmVuZGVyVGFyZ2V0cyApIHtcblxuXHRcdFx0XHRcdFx0X2dsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKCBfZ2wuUkVBRF9GUkFNRUJVRkZFUiwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwLCBfZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlclsgaSBdICk7XG5cblx0XHRcdFx0XHRcdGNvbnN0IHdlYmdsVGV4dHVyZSA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlc1sgaSBdICkuX193ZWJnbFRleHR1cmU7XG5cdFx0XHRcdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIF9nbC5EUkFXX0ZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAsIF9nbC5URVhUVVJFXzJELCB3ZWJnbFRleHR1cmUsIDAgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdF9nbC5ibGl0RnJhbWVidWZmZXIoIDAsIDAsIHdpZHRoLCBoZWlnaHQsIDAsIDAsIHdpZHRoLCBoZWlnaHQsIG1hc2ssIF9nbC5ORUFSRVNUICk7XG5cblx0XHRcdFx0XHRpZiAoIHN1cHBvcnRzSW52YWxpZGF0ZUZyYW1lYnVmZmVyID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0XHRpbnZhbGlkYXRpb25BcnJheVJlYWQubGVuZ3RoID0gMDtcblx0XHRcdFx0XHRcdGludmFsaWRhdGlvbkFycmF5RHJhdy5sZW5ndGggPSAwO1xuXG5cdFx0XHRcdFx0XHRpbnZhbGlkYXRpb25BcnJheVJlYWQucHVzaCggX2dsLkNPTE9SX0FUVEFDSE1FTlQwICsgaSApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciAmJiByZW5kZXJUYXJnZXQucmVzb2x2ZURlcHRoQnVmZmVyID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0XHRpbnZhbGlkYXRpb25BcnJheVJlYWQucHVzaCggZGVwdGhTdHlsZSApO1xuXHRcdFx0XHRcdFx0XHRpbnZhbGlkYXRpb25BcnJheURyYXcucHVzaCggZGVwdGhTdHlsZSApO1xuXG5cdFx0XHRcdFx0XHRcdF9nbC5pbnZhbGlkYXRlRnJhbWVidWZmZXIoIF9nbC5EUkFXX0ZSQU1FQlVGRkVSLCBpbnZhbGlkYXRpb25BcnJheURyYXcgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRfZ2wuaW52YWxpZGF0ZUZyYW1lYnVmZmVyKCBfZ2wuUkVBRF9GUkFNRUJVRkZFUiwgaW52YWxpZGF0aW9uQXJyYXlSZWFkICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLlJFQURfRlJBTUVCVUZGRVIsIG51bGwgKTtcblx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRFJBV19GUkFNRUJVRkZFUiwgbnVsbCApO1xuXG5cdFx0XHRcdC8vIElmIE1SVCBzaW5jZSBwcmUtYmxpdCB3ZSByZW1vdmVkIHRoZSBGQk8gd2UgbmVlZCB0byByZWNvbnN0cnVjdCB0aGUgYXR0YWNobWVudHNcblx0XHRcdFx0aWYgKCBpc011bHRpcGxlUmVuZGVyVGFyZ2V0cyApIHtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRleHR1cmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyICk7XG5cdFx0XHRcdFx0XHRfZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwICsgaSwgX2dsLlJFTkRFUkJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JSZW5kZXJidWZmZXJbIGkgXSApO1xuXG5cdFx0XHRcdFx0XHRjb25zdCB3ZWJnbFRleHR1cmUgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZXNbIGkgXSApLl9fd2ViZ2xUZXh0dXJlO1xuXG5cdFx0XHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKTtcblx0XHRcdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggX2dsLkRSQVdfRlJBTUVCVUZGRVIsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksIF9nbC5URVhUVVJFXzJELCB3ZWJnbFRleHR1cmUsIDAgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRFJBV19GUkFNRUJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciAmJiByZW5kZXJUYXJnZXQucmVzb2x2ZURlcHRoQnVmZmVyID09PSBmYWxzZSAmJiBzdXBwb3J0c0ludmFsaWRhdGVGcmFtZWJ1ZmZlciApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGRlcHRoU3R5bGUgPSByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlciA/IF9nbC5ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQgOiBfZ2wuREVQVEhfQVRUQUNITUVOVDtcblxuXHRcdFx0XHRcdF9nbC5pbnZhbGlkYXRlRnJhbWVidWZmZXIoIF9nbC5EUkFXX0ZSQU1FQlVGRkVSLCBbIGRlcHRoU3R5bGUgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5taW4oIGNhcGFiaWxpdGllcy5tYXhTYW1wbGVzLCByZW5kZXJUYXJnZXQuc2FtcGxlcyApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdGNvbnN0IHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRyZXR1cm4gcmVuZGVyVGFyZ2V0LnNhbXBsZXMgPiAwICYmIGV4dGVuc2lvbnMuaGFzKCAnV0VCR0xfbXVsdGlzYW1wbGVkX3JlbmRlcl90b190ZXh0dXJlJyApID09PSB0cnVlICYmIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX191c2VSZW5kZXJUb1RleHR1cmUgIT09IGZhbHNlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVWaWRlb1RleHR1cmUoIHRleHR1cmUgKSB7XG5cblx0XHRjb25zdCBmcmFtZSA9IGluZm8ucmVuZGVyLmZyYW1lO1xuXG5cdFx0Ly8gQ2hlY2sgdGhlIGxhc3QgZnJhbWUgd2UgdXBkYXRlZCB0aGUgVmlkZW9UZXh0dXJlXG5cblx0XHRpZiAoIF92aWRlb1RleHR1cmVzLmdldCggdGV4dHVyZSApICE9PSBmcmFtZSApIHtcblxuXHRcdFx0X3ZpZGVvVGV4dHVyZXMuc2V0KCB0ZXh0dXJlLCBmcmFtZSApO1xuXHRcdFx0dGV4dHVyZS51cGRhdGUoKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdmVyaWZ5Q29sb3JTcGFjZSggdGV4dHVyZSwgaW1hZ2UgKSB7XG5cblx0XHRjb25zdCBjb2xvclNwYWNlID0gdGV4dHVyZS5jb2xvclNwYWNlO1xuXHRcdGNvbnN0IGZvcm1hdCA9IHRleHR1cmUuZm9ybWF0O1xuXHRcdGNvbnN0IHR5cGUgPSB0ZXh0dXJlLnR5cGU7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNDb21wcmVzc2VkVGV4dHVyZSA9PT0gdHJ1ZSB8fCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlID09PSB0cnVlICkgcmV0dXJuIGltYWdlO1xuXG5cdFx0aWYgKCBjb2xvclNwYWNlICE9PSBMaW5lYXJTUkdCQ29sb3JTcGFjZSAmJiBjb2xvclNwYWNlICE9PSBOb0NvbG9yU3BhY2UgKSB7XG5cblx0XHRcdC8vIHNSR0JcblxuXHRcdFx0aWYgKCBDb2xvck1hbmFnZW1lbnQuZ2V0VHJhbnNmZXIoIGNvbG9yU3BhY2UgKSA9PT0gU1JHQlRyYW5zZmVyICkge1xuXG5cdFx0XHRcdC8vIGluIFdlYkdMIDIgdW5jb21wcmVzc2VkIHRleHR1cmVzIGNhbiBvbmx5IGJlIHNSR0IgZW5jb2RlZCBpZiB0aGV5IGhhdmUgdGhlIFJHQkE4IGZvcm1hdFxuXG5cdFx0XHRcdGlmICggZm9ybWF0ICE9PSBSR0JBRm9ybWF0IHx8IHR5cGUgIT09IFVuc2lnbmVkQnl0ZVR5cGUgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFRleHR1cmVzOiBzUkdCIGVuY29kZWQgdGV4dHVyZXMgaGF2ZSB0byB1c2UgUkdCQUZvcm1hdCBhbmQgVW5zaWduZWRCeXRlVHlwZS4nICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFRleHR1cmVzOiBVbnN1cHBvcnRlZCB0ZXh0dXJlIGNvbG9yIHNwYWNlOicsIGNvbG9yU3BhY2UgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGltYWdlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXREaW1lbnNpb25zKCBpbWFnZSApIHtcblxuXHRcdGlmICggdHlwZW9mIEhUTUxJbWFnZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCApIHtcblxuXHRcdFx0Ly8gaWYgaW50cmluc2ljIGRhdGEgYXJlIG5vdCBhdmFpbGFibGUsIGZhbGxiYWNrIHRvIHdpZHRoL2hlaWdodFxuXG5cdFx0XHRfaW1hZ2VEaW1lbnNpb25zLndpZHRoID0gaW1hZ2UubmF0dXJhbFdpZHRoIHx8IGltYWdlLndpZHRoO1xuXHRcdFx0X2ltYWdlRGltZW5zaW9ucy5oZWlnaHQgPSBpbWFnZS5uYXR1cmFsSGVpZ2h0IHx8IGltYWdlLmhlaWdodDtcblxuXHRcdH0gZWxzZSBpZiAoIHR5cGVvZiBWaWRlb0ZyYW1lICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIFZpZGVvRnJhbWUgKSB7XG5cblx0XHRcdF9pbWFnZURpbWVuc2lvbnMud2lkdGggPSBpbWFnZS5kaXNwbGF5V2lkdGg7XG5cdFx0XHRfaW1hZ2VEaW1lbnNpb25zLmhlaWdodCA9IGltYWdlLmRpc3BsYXlIZWlnaHQ7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfaW1hZ2VEaW1lbnNpb25zLndpZHRoID0gaW1hZ2Uud2lkdGg7XG5cdFx0XHRfaW1hZ2VEaW1lbnNpb25zLmhlaWdodCA9IGltYWdlLmhlaWdodDtcblxuXHRcdH1cblxuXHRcdHJldHVybiBfaW1hZ2VEaW1lbnNpb25zO1xuXG5cdH1cblxuXHQvL1xuXG5cdHRoaXMuYWxsb2NhdGVUZXh0dXJlVW5pdCA9IGFsbG9jYXRlVGV4dHVyZVVuaXQ7XG5cdHRoaXMucmVzZXRUZXh0dXJlVW5pdHMgPSByZXNldFRleHR1cmVVbml0cztcblxuXHR0aGlzLnNldFRleHR1cmUyRCA9IHNldFRleHR1cmUyRDtcblx0dGhpcy5zZXRUZXh0dXJlMkRBcnJheSA9IHNldFRleHR1cmUyREFycmF5O1xuXHR0aGlzLnNldFRleHR1cmUzRCA9IHNldFRleHR1cmUzRDtcblx0dGhpcy5zZXRUZXh0dXJlQ3ViZSA9IHNldFRleHR1cmVDdWJlO1xuXHR0aGlzLnJlYmluZFRleHR1cmVzID0gcmViaW5kVGV4dHVyZXM7XG5cdHRoaXMuc2V0dXBSZW5kZXJUYXJnZXQgPSBzZXR1cFJlbmRlclRhcmdldDtcblx0dGhpcy51cGRhdGVSZW5kZXJUYXJnZXRNaXBtYXAgPSB1cGRhdGVSZW5kZXJUYXJnZXRNaXBtYXA7XG5cdHRoaXMudXBkYXRlTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQgPSB1cGRhdGVNdWx0aXNhbXBsZVJlbmRlclRhcmdldDtcblx0dGhpcy5zZXR1cERlcHRoUmVuZGVyYnVmZmVyID0gc2V0dXBEZXB0aFJlbmRlcmJ1ZmZlcjtcblx0dGhpcy5zZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSA9IHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlO1xuXHR0aGlzLnVzZU11bHRpc2FtcGxlZFJUVCA9IHVzZU11bHRpc2FtcGxlZFJUVDtcblxufVxuXG5mdW5jdGlvbiBXZWJHTFV0aWxzKCBnbCwgZXh0ZW5zaW9ucyApIHtcblxuXHRmdW5jdGlvbiBjb252ZXJ0KCBwLCBjb2xvclNwYWNlID0gTm9Db2xvclNwYWNlICkge1xuXG5cdFx0bGV0IGV4dGVuc2lvbjtcblxuXHRcdGNvbnN0IHRyYW5zZmVyID0gQ29sb3JNYW5hZ2VtZW50LmdldFRyYW5zZmVyKCBjb2xvclNwYWNlICk7XG5cblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkQnl0ZVR5cGUgKSByZXR1cm4gZ2wuVU5TSUdORURfQllURTtcblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSApIHJldHVybiBnbC5VTlNJR05FRF9TSE9SVF80XzRfNF80O1xuXHRcdGlmICggcCA9PT0gVW5zaWduZWRTaG9ydDU1NTFUeXBlICkgcmV0dXJuIGdsLlVOU0lHTkVEX1NIT1JUXzVfNV81XzE7XG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZEludDU5OTlUeXBlICkgcmV0dXJuIGdsLlVOU0lHTkVEX0lOVF81XzlfOV85X1JFVjtcblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkSW50MTAxMTExVHlwZSApIHJldHVybiBnbC5VTlNJR05FRF9JTlRfMTBGXzExRl8xMUZfUkVWO1xuXG5cdFx0aWYgKCBwID09PSBCeXRlVHlwZSApIHJldHVybiBnbC5CWVRFO1xuXHRcdGlmICggcCA9PT0gU2hvcnRUeXBlICkgcmV0dXJuIGdsLlNIT1JUO1xuXHRcdGlmICggcCA9PT0gVW5zaWduZWRTaG9ydFR5cGUgKSByZXR1cm4gZ2wuVU5TSUdORURfU0hPUlQ7XG5cdFx0aWYgKCBwID09PSBJbnRUeXBlICkgcmV0dXJuIGdsLklOVDtcblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkSW50VHlwZSApIHJldHVybiBnbC5VTlNJR05FRF9JTlQ7XG5cdFx0aWYgKCBwID09PSBGbG9hdFR5cGUgKSByZXR1cm4gZ2wuRkxPQVQ7XG5cdFx0aWYgKCBwID09PSBIYWxmRmxvYXRUeXBlICkgcmV0dXJuIGdsLkhBTEZfRkxPQVQ7XG5cblx0XHRpZiAoIHAgPT09IEFscGhhRm9ybWF0ICkgcmV0dXJuIGdsLkFMUEhBO1xuXHRcdGlmICggcCA9PT0gUkdCRm9ybWF0ICkgcmV0dXJuIGdsLlJHQjtcblx0XHRpZiAoIHAgPT09IFJHQkFGb3JtYXQgKSByZXR1cm4gZ2wuUkdCQTtcblx0XHRpZiAoIHAgPT09IERlcHRoRm9ybWF0ICkgcmV0dXJuIGdsLkRFUFRIX0NPTVBPTkVOVDtcblx0XHRpZiAoIHAgPT09IERlcHRoU3RlbmNpbEZvcm1hdCApIHJldHVybiBnbC5ERVBUSF9TVEVOQ0lMO1xuXG5cdFx0Ly8gV2ViR0wyIGZvcm1hdHMuXG5cblx0XHRpZiAoIHAgPT09IFJlZEZvcm1hdCApIHJldHVybiBnbC5SRUQ7XG5cdFx0aWYgKCBwID09PSBSZWRJbnRlZ2VyRm9ybWF0ICkgcmV0dXJuIGdsLlJFRF9JTlRFR0VSO1xuXHRcdGlmICggcCA9PT0gUkdGb3JtYXQgKSByZXR1cm4gZ2wuUkc7XG5cdFx0aWYgKCBwID09PSBSR0ludGVnZXJGb3JtYXQgKSByZXR1cm4gZ2wuUkdfSU5URUdFUjtcblx0XHRpZiAoIHAgPT09IFJHQkFJbnRlZ2VyRm9ybWF0ICkgcmV0dXJuIGdsLlJHQkFfSU5URUdFUjtcblxuXHRcdC8vIFMzVENcblxuXHRcdGlmICggcCA9PT0gUkdCX1MzVENfRFhUMV9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9TM1RDX0RYVDFfRm9ybWF0IHx8IHAgPT09IFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCB8fCBwID09PSBSR0JBX1MzVENfRFhUNV9Gb3JtYXQgKSB7XG5cblx0XHRcdGlmICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApIHtcblxuXHRcdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjX3NyZ2InICk7XG5cblx0XHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHAgPT09IFJHQl9TM1RDX0RYVDFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0JfUzNUQ19EWFQxX0VYVDtcblx0XHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUzNUQ19EWFQxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCX0FMUEhBX1MzVENfRFhUMV9FWFQ7XG5cdFx0XHRcdFx0aWYgKCBwID09PSBSR0JBX1MzVENfRFhUM19Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDNfRVhUO1xuXHRcdFx0XHRcdGlmICggcCA9PT0gUkdCQV9TM1RDX0RYVDVfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQ1X0VYVDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICk7XG5cblx0XHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHAgPT09IFJHQl9TM1RDX0RYVDFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9TM1RDX0RYVDFfRVhUO1xuXHRcdFx0XHRcdGlmICggcCA9PT0gUkdCQV9TM1RDX0RYVDFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVDtcblx0XHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQ7XG5cdFx0XHRcdFx0aWYgKCBwID09PSBSR0JBX1MzVENfRFhUNV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDVfRVhUO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIFBWUlRDXG5cblx0XHRpZiAoIHAgPT09IFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0IHx8IHAgPT09IFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0IHx8IHAgPT09IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCB8fCBwID09PSBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIHAgPT09IFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9QVlJUQ18yQlBQVjFfSU1HO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzRCUFBWMV9JTUc7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUFZSVENfMkJQUFYxX0lNRztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gRVRDXG5cblx0XHRpZiAoIHAgPT09IFJHQl9FVEMxX0Zvcm1hdCB8fCBwID09PSBSR0JfRVRDMl9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9FVEMyX0VBQ19Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YycgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0aWYgKCBwID09PSBSR0JfRVRDMV9Gb3JtYXQgfHwgcCA9PT0gUkdCX0VUQzJfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfRVRDMiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQjhfRVRDMjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0VUQzJfRUFDX0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9FVEMyX0VBQyA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkE4X0VUQzJfRUFDO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBBU1RDXG5cblx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ180eDRfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ181eDRfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ181eDVfRm9ybWF0IHx8XG5cdFx0XHRwID09PSBSR0JBX0FTVENfNng1X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfNng2X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfOHg1X0Zvcm1hdCB8fFxuXHRcdFx0cCA9PT0gUkdCQV9BU1RDXzh4Nl9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzh4OF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzEweDVfRm9ybWF0IHx8XG5cdFx0XHRwID09PSBSR0JBX0FTVENfMTB4Nl9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzEweDhfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCApIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfYXN0YycgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfNHg0X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzR4NF9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfNHg0X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfNXg0X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzV4NF9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfNXg0X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfNXg1X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzV4NV9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfNXg1X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfNng1X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzZ4NV9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfNng1X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfNng2X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzZ4Nl9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfNng2X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfOHg1X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4NV9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg1X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfOHg2X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4Nl9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg2X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfOHg4X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4OF9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg4X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfMTB4NV9Gb3JtYXQgKSByZXR1cm4gKCB0cmFuc2ZlciA9PT0gU1JHQlRyYW5zZmVyICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHg1X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg1X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfMTB4Nl9Gb3JtYXQgKSByZXR1cm4gKCB0cmFuc2ZlciA9PT0gU1JHQlRyYW5zZmVyICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHg2X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg2X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfMTB4OF9Gb3JtYXQgKSByZXR1cm4gKCB0cmFuc2ZlciA9PT0gU1JHQlRyYW5zZmVyICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHg4X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg4X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfMTB4MTBfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4MTBfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDEwX0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTJ4MTBfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEyeDEwX0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTJ4MTJfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEyeDEyX0tIUjtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gQlBUQ1xuXG5cdFx0aWYgKCBwID09PSBSR0JBX0JQVENfRm9ybWF0IHx8IHAgPT09IFJHQl9CUFRDX1NJR05FRF9Gb3JtYXQgfHwgcCA9PT0gUkdCX0JQVENfVU5TSUdORURfRm9ybWF0ICkge1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0VYVF90ZXh0dXJlX2NvbXByZXNzaW9uX2JwdGMnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9CUFRDX0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0JfQUxQSEFfQlBUQ19VTk9STV9FWFQgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0JQVENfVU5PUk1fRVhUO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQl9CUFRDX1NJR05FRF9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCX0JQVENfU0lHTkVEX0ZMT0FUX0VYVDtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JfQlBUQ19VTlNJR05FRF9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCX0JQVENfVU5TSUdORURfRkxPQVRfRVhUO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBSR1RDXG5cblx0XHRpZiAoIHAgPT09IFJFRF9SR1RDMV9Gb3JtYXQgfHwgcCA9PT0gU0lHTkVEX1JFRF9SR1RDMV9Gb3JtYXQgfHwgcCA9PT0gUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdCB8fCBwID09PSBTSUdORURfUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdCApIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdFWFRfdGV4dHVyZV9jb21wcmVzc2lvbl9yZ3RjJyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIHAgPT09IFJFRF9SR1RDMV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkVEX1JHVEMxX0VYVDtcblx0XHRcdFx0aWYgKCBwID09PSBTSUdORURfUkVEX1JHVEMxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9TSUdORURfUkVEX1JHVEMxX0VYVDtcblx0XHRcdFx0aWYgKCBwID09PSBSRURfR1JFRU5fUkdUQzJfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JFRF9HUkVFTl9SR1RDMl9FWFQ7XG5cdFx0XHRcdGlmICggcCA9PT0gU0lHTkVEX1JFRF9HUkVFTl9SR1RDMl9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU0lHTkVEX1JFRF9HUkVFTl9SR1RDMl9FWFQ7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkSW50MjQ4VHlwZSApIHJldHVybiBnbC5VTlNJR05FRF9JTlRfMjRfODtcblxuXHRcdC8vIGlmIFwicFwiIGNhbid0IGJlIHJlc29sdmVkLCBhc3N1bWUgdGhlIHVzZXIgZGVmaW5lcyBhIFdlYkdMIGNvbnN0YW50IGFzIGEgc3RyaW5nIChmYWxsYmFjay93b3JrYXJvdW5kIGZvciBwYWNrZWQgUkdCIGZvcm1hdHMpXG5cblx0XHRyZXR1cm4gKCBnbFsgcCBdICE9PSB1bmRlZmluZWQgKSA/IGdsWyBwIF0gOiBudWxsO1xuXG5cdH1cblxuXHRyZXR1cm4geyBjb252ZXJ0OiBjb252ZXJ0IH07XG5cbn1cblxuY29uc3QgX29jY2x1c2lvbl92ZXJ0ZXggPSBgXG52b2lkIG1haW4oKSB7XG5cblx0Z2xfUG9zaXRpb24gPSB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XG5cbn1gO1xuXG5jb25zdCBfb2NjbHVzaW9uX2ZyYWdtZW50ID0gYFxudW5pZm9ybSBzYW1wbGVyMkRBcnJheSBkZXB0aENvbG9yO1xudW5pZm9ybSBmbG9hdCBkZXB0aFdpZHRoO1xudW5pZm9ybSBmbG9hdCBkZXB0aEhlaWdodDtcblxudm9pZCBtYWluKCkge1xuXG5cdHZlYzIgY29vcmQgPSB2ZWMyKCBnbF9GcmFnQ29vcmQueCAvIGRlcHRoV2lkdGgsIGdsX0ZyYWdDb29yZC55IC8gZGVwdGhIZWlnaHQgKTtcblxuXHRpZiAoIGNvb3JkLnggPj0gMS4wICkge1xuXG5cdFx0Z2xfRnJhZ0RlcHRoID0gdGV4dHVyZSggZGVwdGhDb2xvciwgdmVjMyggY29vcmQueCAtIDEuMCwgY29vcmQueSwgMSApICkucjtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Z2xfRnJhZ0RlcHRoID0gdGV4dHVyZSggZGVwdGhDb2xvciwgdmVjMyggY29vcmQueCwgY29vcmQueSwgMCApICkucjtcblxuXHR9XG5cbn1gO1xuXG4vKipcbiAqIEEgWFIgbW9kdWxlIHRoYXQgbWFuYWdlcyB0aGUgYWNjZXNzIHRvIHRoZSBEZXB0aCBTZW5zaW5nIEFQSS5cbiAqL1xuY2xhc3MgV2ViWFJEZXB0aFNlbnNpbmcge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGRlcHRoIHNlbnNpbmcgbW9kdWxlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHQvKipcblx0XHQgKiBBbiBvcGFxdWUgdGV4dHVyZSByZXByZXNlbnRpbmcgdGhlIGRlcHRoIG9mIHRoZSB1c2VyJ3MgZW52aXJvbm1lbnQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P0V4dGVybmFsVGV4dHVyZX1cblx0XHQgKi9cblx0XHR0aGlzLnRleHR1cmUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBwbGFuZSBtZXNoIGZvciB2aXN1YWxpemluZyB0aGUgZGVwdGggdGV4dHVyZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/TWVzaH1cblx0XHQgKi9cblx0XHR0aGlzLm1lc2ggPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGRlcHRoIG5lYXIgdmFsdWUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMuZGVwdGhOZWFyID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBkZXB0aCBuZWFyIGZhci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5kZXB0aEZhciA9IDA7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJbml0cyB0aGUgZGVwdGggc2Vuc2luZyBtb2R1bGVcblx0ICpcblx0ICogQHBhcmFtIHtYUldlYkdMRGVwdGhJbmZvcm1hdGlvbn0gZGVwdGhEYXRhIC0gVGhlIFhSIGRlcHRoIGRhdGEuXG5cdCAqIEBwYXJhbSB7WFJSZW5kZXJTdGF0ZX0gcmVuZGVyU3RhdGUgLSBUaGUgWFIgcmVuZGVyIHN0YXRlLlxuXHQgKi9cblx0aW5pdCggZGVwdGhEYXRhLCByZW5kZXJTdGF0ZSApIHtcblxuXHRcdGlmICggdGhpcy50ZXh0dXJlID09PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCB0ZXh0dXJlID0gbmV3IEV4dGVybmFsVGV4dHVyZSggZGVwdGhEYXRhLnRleHR1cmUgKTtcblxuXHRcdFx0aWYgKCAoIGRlcHRoRGF0YS5kZXB0aE5lYXIgIT09IHJlbmRlclN0YXRlLmRlcHRoTmVhciApIHx8ICggZGVwdGhEYXRhLmRlcHRoRmFyICE9PSByZW5kZXJTdGF0ZS5kZXB0aEZhciApICkge1xuXG5cdFx0XHRcdHRoaXMuZGVwdGhOZWFyID0gZGVwdGhEYXRhLmRlcHRoTmVhcjtcblx0XHRcdFx0dGhpcy5kZXB0aEZhciA9IGRlcHRoRGF0YS5kZXB0aEZhcjtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnRleHR1cmUgPSB0ZXh0dXJlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIHBsYW5lIG1lc2ggdGhhdCB2aXN1YWxpemVzIHRoZSBkZXB0aCB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5Q2FtZXJhfSBjYW1lcmFYUiAtIFRoZSBYUiBjYW1lcmEuXG5cdCAqIEByZXR1cm4gez9NZXNofSBUaGUgcGxhbmUgbWVzaC5cblx0ICovXG5cdGdldE1lc2goIGNhbWVyYVhSICkge1xuXG5cdFx0aWYgKCB0aGlzLnRleHR1cmUgIT09IG51bGwgKSB7XG5cblx0XHRcdGlmICggdGhpcy5tZXNoID09PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnN0IHZpZXdwb3J0ID0gY2FtZXJhWFIuY2FtZXJhc1sgMCBdLnZpZXdwb3J0O1xuXHRcdFx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXHRcdFx0XHRcdHZlcnRleFNoYWRlcjogX29jY2x1c2lvbl92ZXJ0ZXgsXG5cdFx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IF9vY2NsdXNpb25fZnJhZ21lbnQsXG5cdFx0XHRcdFx0dW5pZm9ybXM6IHtcblx0XHRcdFx0XHRcdGRlcHRoQ29sb3I6IHsgdmFsdWU6IHRoaXMudGV4dHVyZSB9LFxuXHRcdFx0XHRcdFx0ZGVwdGhXaWR0aDogeyB2YWx1ZTogdmlld3BvcnQueiB9LFxuXHRcdFx0XHRcdFx0ZGVwdGhIZWlnaHQ6IHsgdmFsdWU6IHZpZXdwb3J0LncgfVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdHRoaXMubWVzaCA9IG5ldyBNZXNoKCBuZXcgUGxhbmVHZW9tZXRyeSggMjAsIDIwICksIG1hdGVyaWFsICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLm1lc2g7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXNldHMgdGhlIG1vZHVsZVxuXHQgKi9cblx0cmVzZXQoKSB7XG5cblx0XHR0aGlzLnRleHR1cmUgPSBudWxsO1xuXHRcdHRoaXMubWVzaCA9IG51bGw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgdGV4dHVyZSByZXByZXNlbnRpbmcgdGhlIGRlcHRoIG9mIHRoZSB1c2VyJ3MgZW52aXJvbm1lbnQuXG5cdCAqXG5cdCAqIEByZXR1cm4gez9FeHRlcm5hbFRleHR1cmV9IFRoZSBkZXB0aCB0ZXh0dXJlLlxuXHQgKi9cblx0Z2V0RGVwdGhUZXh0dXJlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMudGV4dHVyZTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYW4gYWJzdHJhY3Rpb24gb2YgdGhlIFdlYlhSIERldmljZSBBUEkgYW5kIGlzXG4gKiBpbnRlcm5hbGx5IHVzZWQgYnkge0BsaW5rIFdlYkdMUmVuZGVyZXJ9LiBgV2ViWFJNYW5hZ2VyYCBhbHNvIHByb3ZpZGVzIGEgcHVibGljXG4gKiBpbnRlcmZhY2UgdGhhdCBhbGxvd3MgdXNlcnMgdG8gZW5hYmxlL2Rpc2FibGUgWFIgYW5kIHBlcmZvcm0gWFIgcmVsYXRlZFxuICogdGFza3MgbGlrZSBmb3IgaW5zdGFuY2UgcmV0cmlldmluZyBjb250cm9sbGVycy5cbiAqXG4gKiBAYXVnbWVudHMgRXZlbnREaXNwYXRjaGVyXG4gKiBAaGlkZWNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIFdlYlhSTWFuYWdlciBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgV2ViR0wgcmVuZGVyZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7V2ViR0xSZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIuXG5cdCAqIEBwYXJhbSB7V2ViR0wyUmVuZGVyaW5nQ29udGV4dH0gZ2wgLSBUaGUgcmVuZGVyaW5nIGNvbnRleHQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcmVuZGVyZXIsIGdsICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdGxldCBzZXNzaW9uID0gbnVsbDtcblxuXHRcdGxldCBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yID0gMS4wO1xuXG5cdFx0bGV0IHJlZmVyZW5jZVNwYWNlID0gbnVsbDtcblx0XHRsZXQgcmVmZXJlbmNlU3BhY2VUeXBlID0gJ2xvY2FsLWZsb29yJztcblx0XHQvLyBTZXQgZGVmYXVsdCBmb3ZlYXRpb24gdG8gbWF4aW11bS5cblx0XHRsZXQgZm92ZWF0aW9uID0gMS4wO1xuXHRcdGxldCBjdXN0b21SZWZlcmVuY2VTcGFjZSA9IG51bGw7XG5cblx0XHRsZXQgcG9zZSA9IG51bGw7XG5cdFx0bGV0IGdsQmluZGluZyA9IG51bGw7XG5cdFx0bGV0IGdsUHJvakxheWVyID0gbnVsbDtcblx0XHRsZXQgZ2xCYXNlTGF5ZXIgPSBudWxsO1xuXHRcdGxldCB4ckZyYW1lID0gbnVsbDtcblxuXHRcdGNvbnN0IHN1cHBvcnRzR2xCaW5kaW5nID0gdHlwZW9mIFhSV2ViR0xCaW5kaW5nICE9PSAndW5kZWZpbmVkJztcblxuXHRcdGNvbnN0IGRlcHRoU2Vuc2luZyA9IG5ldyBXZWJYUkRlcHRoU2Vuc2luZygpO1xuXHRcdGNvbnN0IGNhbWVyYUFjY2Vzc1RleHR1cmVzID0ge307XG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IGdsLmdldENvbnRleHRBdHRyaWJ1dGVzKCk7XG5cblx0XHRsZXQgaW5pdGlhbFJlbmRlclRhcmdldCA9IG51bGw7XG5cdFx0bGV0IG5ld1JlbmRlclRhcmdldCA9IG51bGw7XG5cblx0XHRjb25zdCBjb250cm9sbGVycyA9IFtdO1xuXHRcdGNvbnN0IGNvbnRyb2xsZXJJbnB1dFNvdXJjZXMgPSBbXTtcblxuXHRcdGNvbnN0IGN1cnJlbnRTaXplID0gbmV3IFZlY3RvcjIoKTtcblx0XHRsZXQgY3VycmVudFBpeGVsUmF0aW8gPSBudWxsO1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IGNhbWVyYUwgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcblx0XHRjYW1lcmFMLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKTtcblxuXHRcdGNvbnN0IGNhbWVyYVIgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcblx0XHRjYW1lcmFSLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKTtcblxuXHRcdGNvbnN0IGNhbWVyYXMgPSBbIGNhbWVyYUwsIGNhbWVyYVIgXTtcblxuXHRcdGNvbnN0IGNhbWVyYVhSID0gbmV3IEFycmF5Q2FtZXJhKCk7XG5cblx0XHRsZXQgX2N1cnJlbnREZXB0aE5lYXIgPSBudWxsO1xuXHRcdGxldCBfY3VycmVudERlcHRoRmFyID0gbnVsbDtcblxuXHRcdC8vXG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSBtYW5hZ2VyJ3MgWFIgY2FtZXJhIHNob3VsZCBiZSBhdXRvbWF0aWNhbGx5IHVwZGF0ZWQgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuY2FtZXJhQXV0b1VwZGF0ZSA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgbm90aWZpZXMgdGhlIHJlbmRlcmVyIHRvIGJlIHJlYWR5IGZvciBYUiByZW5kZXJpbmcuIFNldCBpdCB0byBgdHJ1ZWBcblx0XHQgKiBpZiB5b3UgYXJlIGdvaW5nIHRvIHVzZSBYUiBpbiB5b3VyIGFwcC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIFhSIHByZXNlbnRhdGlvbiBpcyBhY3RpdmUgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmlzUHJlc2VudGluZyA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyBhIGdyb3VwIHJlcHJlc2VudGluZyB0aGUgYHRhcmdldCByYXlgIHNwYWNlIG9mIHRoZSBYUiBjb250cm9sbGVyLlxuXHRcdCAqIFVzZSB0aGlzIHNwYWNlIGZvciB2aXN1YWxpemluZyAzRCBvYmplY3RzIHRoYXQgc3VwcG9ydCB0aGUgdXNlciBpbiBwb2ludGluZ1xuXHRcdCAqIHRhc2tzIGxpa2UgVUkgaW50ZXJhY3Rpb24uXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIGNvbnRyb2xsZXIuXG5cdFx0ICogQHJldHVybiB7R3JvdXB9IEEgZ3JvdXAgcmVwcmVzZW50aW5nIHRoZSBgdGFyZ2V0IHJheWAgc3BhY2UuXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRDb250cm9sbGVyID0gZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdFx0bGV0IGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgaW5kZXggXTtcblxuXHRcdFx0aWYgKCBjb250cm9sbGVyID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29udHJvbGxlciA9IG5ldyBXZWJYUkNvbnRyb2xsZXIoKTtcblx0XHRcdFx0Y29udHJvbGxlcnNbIGluZGV4IF0gPSBjb250cm9sbGVyO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBjb250cm9sbGVyLmdldFRhcmdldFJheVNwYWNlKCk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyBhIGdyb3VwIHJlcHJlc2VudGluZyB0aGUgYGdyaXBgIHNwYWNlIG9mIHRoZSBYUiBjb250cm9sbGVyLlxuXHRcdCAqIFVzZSB0aGlzIHNwYWNlIGZvciB2aXN1YWxpemluZyAzRCBvYmplY3RzIHRoYXQgc3VwcG9ydCB0aGUgdXNlciBpbiBwb2ludGluZ1xuXHRcdCAqIHRhc2tzIGxpa2UgVUkgaW50ZXJhY3Rpb24uXG5cdFx0ICpcblx0XHQgKiBOb3RlOiBJZiB5b3Ugd2FudCB0byBzaG93IHNvbWV0aGluZyBpbiB0aGUgdXNlcidzIGhhbmQgQU5EIG9mZmVyIGFcblx0XHQgKiBwb2ludGluZyByYXkgYXQgdGhlIHNhbWUgdGltZSwgeW91J2xsIHdhbnQgdG8gYXR0YWNoZWQgdGhlIGhhbmRoZWxkIG9iamVjdFxuXHRcdCAqIHRvIHRoZSBncm91cCByZXR1cm5lZCBieSBgZ2V0Q29udHJvbGxlckdyaXAoKWAgYW5kIHRoZSByYXkgdG8gdGhlXG5cdFx0ICogZ3JvdXAgcmV0dXJuZWQgYnkgYGdldENvbnRyb2xsZXIoKWAuIFRoZSBpZGVhIGlzIHRvIGhhdmUgdHdvXG5cdFx0ICogZGlmZmVyZW50IGdyb3VwcyBpbiB0d28gZGlmZmVyZW50IGNvb3JkaW5hdGUgc3BhY2VzIGZvciB0aGUgc2FtZSBXZWJYUlxuXHRcdCAqIGNvbnRyb2xsZXIuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIGNvbnRyb2xsZXIuXG5cdFx0ICogQHJldHVybiB7R3JvdXB9IEEgZ3JvdXAgcmVwcmVzZW50aW5nIHRoZSBgZ3JpcGAgc3BhY2UuXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRDb250cm9sbGVyR3JpcCA9IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRcdGxldCBjb250cm9sbGVyID0gY29udHJvbGxlcnNbIGluZGV4IF07XG5cblx0XHRcdGlmICggY29udHJvbGxlciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnRyb2xsZXIgPSBuZXcgV2ViWFJDb250cm9sbGVyKCk7XG5cdFx0XHRcdGNvbnRyb2xsZXJzWyBpbmRleCBdID0gY29udHJvbGxlcjtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gY29udHJvbGxlci5nZXRHcmlwU3BhY2UoKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIGEgZ3JvdXAgcmVwcmVzZW50aW5nIHRoZSBgaGFuZGAgc3BhY2Ugb2YgdGhlIFhSIGNvbnRyb2xsZXIuXG5cdFx0ICogVXNlIHRoaXMgc3BhY2UgZm9yIHZpc3VhbGl6aW5nIDNEIG9iamVjdHMgdGhhdCBzdXBwb3J0IHRoZSB1c2VyIGluIHBvaW50aW5nXG5cdFx0ICogdGFza3MgbGlrZSBVSSBpbnRlcmFjdGlvbi5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBvZiB0aGUgY29udHJvbGxlci5cblx0XHQgKiBAcmV0dXJuIHtHcm91cH0gQSBncm91cCByZXByZXNlbnRpbmcgdGhlIGBoYW5kYCBzcGFjZS5cblx0XHQgKi9cblx0XHR0aGlzLmdldEhhbmQgPSBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0XHRsZXQgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzWyBpbmRleCBdO1xuXG5cdFx0XHRpZiAoIGNvbnRyb2xsZXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb250cm9sbGVyID0gbmV3IFdlYlhSQ29udHJvbGxlcigpO1xuXHRcdFx0XHRjb250cm9sbGVyc1sgaW5kZXggXSA9IGNvbnRyb2xsZXI7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNvbnRyb2xsZXIuZ2V0SGFuZFNwYWNlKCk7XG5cblx0XHR9O1xuXG5cdFx0Ly9cblxuXHRcdGZ1bmN0aW9uIG9uU2Vzc2lvbkV2ZW50KCBldmVudCApIHtcblxuXHRcdFx0Y29uc3QgY29udHJvbGxlckluZGV4ID0gY29udHJvbGxlcklucHV0U291cmNlcy5pbmRleE9mKCBldmVudC5pbnB1dFNvdXJjZSApO1xuXG5cdFx0XHRpZiAoIGNvbnRyb2xsZXJJbmRleCA9PT0gLTEgKSB7XG5cblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgY29udHJvbGxlckluZGV4IF07XG5cblx0XHRcdGlmICggY29udHJvbGxlciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnRyb2xsZXIudXBkYXRlKCBldmVudC5pbnB1dFNvdXJjZSwgZXZlbnQuZnJhbWUsIGN1c3RvbVJlZmVyZW5jZVNwYWNlIHx8IHJlZmVyZW5jZVNwYWNlICk7XG5cdFx0XHRcdGNvbnRyb2xsZXIuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiBldmVudC50eXBlLCBkYXRhOiBldmVudC5pbnB1dFNvdXJjZSB9ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG9uU2Vzc2lvbkVuZCgpIHtcblxuXHRcdFx0c2Vzc2lvbi5yZW1vdmVFdmVudExpc3RlbmVyKCAnc2VsZWN0Jywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdHNlc3Npb24ucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3NlbGVjdHN0YXJ0Jywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdHNlc3Npb24ucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3NlbGVjdGVuZCcsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRzZXNzaW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzcXVlZXplJywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdHNlc3Npb24ucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3NxdWVlemVzdGFydCcsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRzZXNzaW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzcXVlZXplZW5kJywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdHNlc3Npb24ucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2VuZCcsIG9uU2Vzc2lvbkVuZCApO1xuXHRcdFx0c2Vzc2lvbi5yZW1vdmVFdmVudExpc3RlbmVyKCAnaW5wdXRzb3VyY2VzY2hhbmdlJywgb25JbnB1dFNvdXJjZXNDaGFuZ2UgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY29udHJvbGxlcnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGlucHV0U291cmNlID0gY29udHJvbGxlcklucHV0U291cmNlc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggaW5wdXRTb3VyY2UgPT09IG51bGwgKSBjb250aW51ZTtcblxuXHRcdFx0XHRjb250cm9sbGVySW5wdXRTb3VyY2VzWyBpIF0gPSBudWxsO1xuXG5cdFx0XHRcdGNvbnRyb2xsZXJzWyBpIF0uZGlzY29ubmVjdCggaW5wdXRTb3VyY2UgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRfY3VycmVudERlcHRoTmVhciA9IG51bGw7XG5cdFx0XHRfY3VycmVudERlcHRoRmFyID0gbnVsbDtcblxuXHRcdFx0ZGVwdGhTZW5zaW5nLnJlc2V0KCk7XG5cdFx0XHRmb3IgKCBjb25zdCBrZXkgaW4gY2FtZXJhQWNjZXNzVGV4dHVyZXMgKSB7XG5cblx0XHRcdFx0ZGVsZXRlIGNhbWVyYUFjY2Vzc1RleHR1cmVzWyBrZXkgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyByZXN0b3JlIGZyYW1lYnVmZmVyL3JlbmRlcmluZyBzdGF0ZVxuXG5cdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIGluaXRpYWxSZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0Z2xCYXNlTGF5ZXIgPSBudWxsO1xuXHRcdFx0Z2xQcm9qTGF5ZXIgPSBudWxsO1xuXHRcdFx0Z2xCaW5kaW5nID0gbnVsbDtcblx0XHRcdHNlc3Npb24gPSBudWxsO1xuXHRcdFx0bmV3UmVuZGVyVGFyZ2V0ID0gbnVsbDtcblxuXHRcdFx0Ly9cblxuXHRcdFx0YW5pbWF0aW9uLnN0b3AoKTtcblxuXHRcdFx0c2NvcGUuaXNQcmVzZW50aW5nID0gZmFsc2U7XG5cblx0XHRcdHJlbmRlcmVyLnNldFBpeGVsUmF0aW8oIGN1cnJlbnRQaXhlbFJhdGlvICk7XG5cdFx0XHRyZW5kZXJlci5zZXRTaXplKCBjdXJyZW50U2l6ZS53aWR0aCwgY3VycmVudFNpemUuaGVpZ2h0LCBmYWxzZSApO1xuXG5cdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdzZXNzaW9uZW5kJyB9ICk7XG5cblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBTZXRzIHRoZSBmcmFtZWJ1ZmZlciBzY2FsZSBmYWN0b3IuXG5cdFx0ICpcblx0XHQgKiBUaGlzIG1ldGhvZCBjYW4gbm90IGJlIHVzZWQgZHVyaW5nIGEgWFIgc2Vzc2lvbi5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSBmcmFtZWJ1ZmZlciBzY2FsZSBmYWN0b3IuXG5cdFx0ICovXG5cdFx0dGhpcy5zZXRGcmFtZWJ1ZmZlclNjYWxlRmFjdG9yID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0ZnJhbWVidWZmZXJTY2FsZUZhY3RvciA9IHZhbHVlO1xuXG5cdFx0XHRpZiAoIHNjb3BlLmlzUHJlc2VudGluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJYUk1hbmFnZXI6IENhbm5vdCBjaGFuZ2UgZnJhbWVidWZmZXIgc2NhbGUgd2hpbGUgcHJlc2VudGluZy4nICk7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBTZXRzIHRoZSByZWZlcmVuY2Ugc3BhY2UgdHlwZS4gQ2FuIGJlIHVzZWQgdG8gY29uZmlndXJlIGEgc3BhdGlhbCByZWxhdGlvbnNoaXAgd2l0aCB0aGUgdXNlcidzIHBoeXNpY2FsXG5cdFx0ICogZW52aXJvbm1lbnQuIERlcGVuZGluZyBvbiBob3cgdGhlIHVzZXIgbW92ZXMgaW4gM0Qgc3BhY2UsIHNldHRpbmcgYW4gYXBwcm9wcmlhdGUgcmVmZXJlbmNlIHNwYWNlIGNhblxuXHRcdCAqIGltcHJvdmUgdHJhY2tpbmcuIERlZmF1bHQgaXMgYGxvY2FsLWZsb29yYC4gVmFsaWQgdmFsdWVzIGNhbiBiZSBmb3VuZCBoZXJlXG5cdFx0ICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1hSUmVmZXJlbmNlU3BhY2UjcmVmZXJlbmNlX3NwYWNlX3R5cGVzLlxuXHRcdCAqXG5cdFx0ICogVGhpcyBtZXRob2QgY2FuIG5vdCBiZSB1c2VkIGR1cmluZyBhIFhSIHNlc3Npb24uXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgcmVmZXJlbmNlIHNwYWNlIHR5cGUuXG5cdFx0ICovXG5cdFx0dGhpcy5zZXRSZWZlcmVuY2VTcGFjZVR5cGUgPSBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRyZWZlcmVuY2VTcGFjZVR5cGUgPSB2YWx1ZTtcblxuXHRcdFx0aWYgKCBzY29wZS5pc1ByZXNlbnRpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViWFJNYW5hZ2VyOiBDYW5ub3QgY2hhbmdlIHJlZmVyZW5jZSBzcGFjZSB0eXBlIHdoaWxlIHByZXNlbnRpbmcuJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgWFIgcmVmZXJlbmNlIHNwYWNlLlxuXHRcdCAqXG5cdFx0ICogQHJldHVybiB7WFJSZWZlcmVuY2VTcGFjZX0gVGhlIFhSIHJlZmVyZW5jZSBzcGFjZS5cblx0XHQgKi9cblx0XHR0aGlzLmdldFJlZmVyZW5jZVNwYWNlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gY3VzdG9tUmVmZXJlbmNlU3BhY2UgfHwgcmVmZXJlbmNlU3BhY2U7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogU2V0cyBhIGN1c3RvbSBYUiByZWZlcmVuY2Ugc3BhY2UuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge1hSUmVmZXJlbmNlU3BhY2V9IHNwYWNlIC0gVGhlIFhSIHJlZmVyZW5jZSBzcGFjZS5cblx0XHQgKi9cblx0XHR0aGlzLnNldFJlZmVyZW5jZVNwYWNlID0gZnVuY3Rpb24gKCBzcGFjZSApIHtcblxuXHRcdFx0Y3VzdG9tUmVmZXJlbmNlU3BhY2UgPSBzcGFjZTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSBjdXJyZW50IGJhc2UgbGF5ZXIuXG5cdFx0ICpcblx0XHQgKiBUaGlzIGlzIGFuIGBYUlByb2plY3Rpb25MYXllcmAgd2hlbiB0aGUgdGFyZ2V0ZWQgWFIgZGV2aWNlIHN1cHBvcnRzIHRoZVxuXHRcdCAqIFdlYlhSIExheWVycyBBUEksIG9yIGFuIGBYUldlYkdMTGF5ZXJgIG90aGVyd2lzZS5cblx0XHQgKlxuXHRcdCAqIEByZXR1cm4gez8oWFJXZWJHTExheWVyfFhSUHJvamVjdGlvbkxheWVyKX0gVGhlIFhSIGJhc2UgbGF5ZXIuXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRCYXNlTGF5ZXIgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBnbFByb2pMYXllciAhPT0gbnVsbCA/IGdsUHJvakxheWVyIDogZ2xCYXNlTGF5ZXI7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgY3VycmVudCBYUiBiaW5kaW5nLlxuXHRcdCAqXG5cdFx0ICogQ3JlYXRlcyBhIG5ldyBiaW5kaW5nIGlmIG5lZWRlZCBhbmQgdGhlIGJyb3dzZXIgaXNcblx0XHQgKiBjYXBhYmxlIG9mIGRvaW5nIHNvLlxuXHRcdCAqXG5cdFx0ICogQHJldHVybiB7P1hSV2ViR0xCaW5kaW5nfSBUaGUgWFIgYmluZGluZy4gUmV0dXJucyBgbnVsbGAgaWYgb25lIGNhbm5vdCBiZSBjcmVhdGVkLlxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0QmluZGluZyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0aWYgKCBnbEJpbmRpbmcgPT09IG51bGwgJiYgc3VwcG9ydHNHbEJpbmRpbmcgKSB7XG5cblx0XHRcdFx0Z2xCaW5kaW5nID0gbmV3IFhSV2ViR0xCaW5kaW5nKCBzZXNzaW9uLCBnbCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBnbEJpbmRpbmc7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgY3VycmVudCBYUiBmcmFtZS5cblx0XHQgKlxuXHRcdCAqIEByZXR1cm4gez9YUkZyYW1lfSBUaGUgWFIgZnJhbWUuIFJldHVybnMgYG51bGxgIHdoZW4gdXNlZCBvdXRzaWRlIGEgWFIgc2Vzc2lvbi5cblx0XHQgKi9cblx0XHR0aGlzLmdldEZyYW1lID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4geHJGcmFtZTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSBjdXJyZW50IFhSIHNlc3Npb24uXG5cdFx0ICpcblx0XHQgKiBAcmV0dXJuIHs/WFJTZXNzaW9ufSBUaGUgWFIgc2Vzc2lvbi4gUmV0dXJucyBgbnVsbGAgd2hlbiB1c2VkIG91dHNpZGUgYSBYUiBzZXNzaW9uLlxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0U2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHNlc3Npb247XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQWZ0ZXIgYSBYUiBzZXNzaW9uIGhhcyBiZWVuIHJlcXVlc3RlZCB1c3VhbGx5IHdpdGggb25lIG9mIHRoZSBgKkJ1dHRvbmAgbW9kdWxlcywgaXRcblx0XHQgKiBpcyBpbmplY3RlZCBpbnRvIHRoZSByZW5kZXJlciB3aXRoIHRoaXMgbWV0aG9kLiBUaGlzIG1ldGhvZCB0cmlnZ2VycyB0aGUgc3RhcnQgb2Zcblx0XHQgKiB0aGUgYWN0dWFsIFhSIHJlbmRlcmluZy5cblx0XHQgKlxuXHRcdCAqIEBhc3luY1xuXHRcdCAqIEBwYXJhbSB7WFJTZXNzaW9ufSB2YWx1ZSAtIFRoZSBYUiBzZXNzaW9uIHRvIHNldC5cblx0XHQgKiBAcmV0dXJuIHtQcm9taXNlfSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBzZXNzaW9uIGhhcyBiZWVuIHNldC5cblx0XHQgKi9cblx0XHR0aGlzLnNldFNlc3Npb24gPSBhc3luYyBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRzZXNzaW9uID0gdmFsdWU7XG5cblx0XHRcdGlmICggc2Vzc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpbml0aWFsUmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cblx0XHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc2VsZWN0Jywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc2VsZWN0c3RhcnQnLCBvblNlc3Npb25FdmVudCApO1xuXHRcdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdzZWxlY3RlbmQnLCBvblNlc3Npb25FdmVudCApO1xuXHRcdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdzcXVlZXplJywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc3F1ZWV6ZXN0YXJ0Jywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc3F1ZWV6ZWVuZCcsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ2VuZCcsIG9uU2Vzc2lvbkVuZCApO1xuXHRcdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdpbnB1dHNvdXJjZXNjaGFuZ2UnLCBvbklucHV0U291cmNlc0NoYW5nZSApO1xuXG5cdFx0XHRcdGlmICggYXR0cmlidXRlcy54ckNvbXBhdGlibGUgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRhd2FpdCBnbC5tYWtlWFJDb21wYXRpYmxlKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGN1cnJlbnRQaXhlbFJhdGlvID0gcmVuZGVyZXIuZ2V0UGl4ZWxSYXRpbygpO1xuXHRcdFx0XHRyZW5kZXJlci5nZXRTaXplKCBjdXJyZW50U2l6ZSApO1xuXG5cblx0XHRcdFx0Ly8gQ2hlY2sgdGhhdCB0aGUgYnJvd3NlciBpbXBsZW1lbnRzIHRoZSBuZWNlc3NhcnkgQVBJcyB0byB1c2UgYW5cblx0XHRcdFx0Ly8gWFJQcm9qZWN0aW9uTGF5ZXIgcmF0aGVyIHRoYW4gYW4gWFJXZWJHTExheWVyXG5cdFx0XHRcdGNvbnN0IHN1cHBvcnRzTGF5ZXJzID0gc3VwcG9ydHNHbEJpbmRpbmcgJiYgJ2NyZWF0ZVByb2plY3Rpb25MYXllcicgaW4gWFJXZWJHTEJpbmRpbmcucHJvdG90eXBlO1xuXG5cdFx0XHRcdGlmICggISBzdXBwb3J0c0xheWVycyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGxheWVySW5pdCA9IHtcblx0XHRcdFx0XHRcdGFudGlhbGlhczogYXR0cmlidXRlcy5hbnRpYWxpYXMsXG5cdFx0XHRcdFx0XHRhbHBoYTogdHJ1ZSxcblx0XHRcdFx0XHRcdGRlcHRoOiBhdHRyaWJ1dGVzLmRlcHRoLFxuXHRcdFx0XHRcdFx0c3RlbmNpbDogYXR0cmlidXRlcy5zdGVuY2lsLFxuXHRcdFx0XHRcdFx0ZnJhbWVidWZmZXJTY2FsZUZhY3RvcjogZnJhbWVidWZmZXJTY2FsZUZhY3RvclxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRnbEJhc2VMYXllciA9IG5ldyBYUldlYkdMTGF5ZXIoIHNlc3Npb24sIGdsLCBsYXllckluaXQgKTtcblxuXHRcdFx0XHRcdHNlc3Npb24udXBkYXRlUmVuZGVyU3RhdGUoIHsgYmFzZUxheWVyOiBnbEJhc2VMYXllciB9ICk7XG5cblx0XHRcdFx0XHRyZW5kZXJlci5zZXRQaXhlbFJhdGlvKCAxICk7XG5cdFx0XHRcdFx0cmVuZGVyZXIuc2V0U2l6ZSggZ2xCYXNlTGF5ZXIuZnJhbWVidWZmZXJXaWR0aCwgZ2xCYXNlTGF5ZXIuZnJhbWVidWZmZXJIZWlnaHQsIGZhbHNlICk7XG5cblx0XHRcdFx0XHRuZXdSZW5kZXJUYXJnZXQgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoXG5cdFx0XHRcdFx0XHRnbEJhc2VMYXllci5mcmFtZWJ1ZmZlcldpZHRoLFxuXHRcdFx0XHRcdFx0Z2xCYXNlTGF5ZXIuZnJhbWVidWZmZXJIZWlnaHQsXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGZvcm1hdDogUkdCQUZvcm1hdCxcblx0XHRcdFx0XHRcdFx0dHlwZTogVW5zaWduZWRCeXRlVHlwZSxcblx0XHRcdFx0XHRcdFx0Y29sb3JTcGFjZTogcmVuZGVyZXIub3V0cHV0Q29sb3JTcGFjZSxcblx0XHRcdFx0XHRcdFx0c3RlbmNpbEJ1ZmZlcjogYXR0cmlidXRlcy5zdGVuY2lsLFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlRGVwdGhCdWZmZXI6ICggZ2xCYXNlTGF5ZXIuaWdub3JlRGVwdGhWYWx1ZXMgPT09IGZhbHNlICksXG5cdFx0XHRcdFx0XHRcdHJlc29sdmVTdGVuY2lsQnVmZmVyOiAoIGdsQmFzZUxheWVyLmlnbm9yZURlcHRoVmFsdWVzID09PSBmYWxzZSApXG5cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRsZXQgZGVwdGhGb3JtYXQgPSBudWxsO1xuXHRcdFx0XHRcdGxldCBkZXB0aFR5cGUgPSBudWxsO1xuXHRcdFx0XHRcdGxldCBnbERlcHRoRm9ybWF0ID0gbnVsbDtcblxuXHRcdFx0XHRcdGlmICggYXR0cmlidXRlcy5kZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0Z2xEZXB0aEZvcm1hdCA9IGF0dHJpYnV0ZXMuc3RlbmNpbCA/IGdsLkRFUFRIMjRfU1RFTkNJTDggOiBnbC5ERVBUSF9DT01QT05FTlQyNDtcblx0XHRcdFx0XHRcdGRlcHRoRm9ybWF0ID0gYXR0cmlidXRlcy5zdGVuY2lsID8gRGVwdGhTdGVuY2lsRm9ybWF0IDogRGVwdGhGb3JtYXQ7XG5cdFx0XHRcdFx0XHRkZXB0aFR5cGUgPSBhdHRyaWJ1dGVzLnN0ZW5jaWwgPyBVbnNpZ25lZEludDI0OFR5cGUgOiBVbnNpZ25lZEludFR5cGU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb25zdCBwcm9qZWN0aW9ubGF5ZXJJbml0ID0ge1xuXHRcdFx0XHRcdFx0Y29sb3JGb3JtYXQ6IGdsLlJHQkE4LFxuXHRcdFx0XHRcdFx0ZGVwdGhGb3JtYXQ6IGdsRGVwdGhGb3JtYXQsXG5cdFx0XHRcdFx0XHRzY2FsZUZhY3RvcjogZnJhbWVidWZmZXJTY2FsZUZhY3RvclxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRnbEJpbmRpbmcgPSB0aGlzLmdldEJpbmRpbmcoKTtcblxuXHRcdFx0XHRcdGdsUHJvakxheWVyID0gZ2xCaW5kaW5nLmNyZWF0ZVByb2plY3Rpb25MYXllciggcHJvamVjdGlvbmxheWVySW5pdCApO1xuXG5cdFx0XHRcdFx0c2Vzc2lvbi51cGRhdGVSZW5kZXJTdGF0ZSggeyBsYXllcnM6IFsgZ2xQcm9qTGF5ZXIgXSB9ICk7XG5cblx0XHRcdFx0XHRyZW5kZXJlci5zZXRQaXhlbFJhdGlvKCAxICk7XG5cdFx0XHRcdFx0cmVuZGVyZXIuc2V0U2l6ZSggZ2xQcm9qTGF5ZXIudGV4dHVyZVdpZHRoLCBnbFByb2pMYXllci50ZXh0dXJlSGVpZ2h0LCBmYWxzZSApO1xuXG5cdFx0XHRcdFx0bmV3UmVuZGVyVGFyZ2V0ID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KFxuXHRcdFx0XHRcdFx0Z2xQcm9qTGF5ZXIudGV4dHVyZVdpZHRoLFxuXHRcdFx0XHRcdFx0Z2xQcm9qTGF5ZXIudGV4dHVyZUhlaWdodCxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0Zm9ybWF0OiBSR0JBRm9ybWF0LFxuXHRcdFx0XHRcdFx0XHR0eXBlOiBVbnNpZ25lZEJ5dGVUeXBlLFxuXHRcdFx0XHRcdFx0XHRkZXB0aFRleHR1cmU6IG5ldyBEZXB0aFRleHR1cmUoIGdsUHJvakxheWVyLnRleHR1cmVXaWR0aCwgZ2xQcm9qTGF5ZXIudGV4dHVyZUhlaWdodCwgZGVwdGhUeXBlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBkZXB0aEZvcm1hdCApLFxuXHRcdFx0XHRcdFx0XHRzdGVuY2lsQnVmZmVyOiBhdHRyaWJ1dGVzLnN0ZW5jaWwsXG5cdFx0XHRcdFx0XHRcdGNvbG9yU3BhY2U6IHJlbmRlcmVyLm91dHB1dENvbG9yU3BhY2UsXG5cdFx0XHRcdFx0XHRcdHNhbXBsZXM6IGF0dHJpYnV0ZXMuYW50aWFsaWFzID8gNCA6IDAsXG5cdFx0XHRcdFx0XHRcdHJlc29sdmVEZXB0aEJ1ZmZlcjogKCBnbFByb2pMYXllci5pZ25vcmVEZXB0aFZhbHVlcyA9PT0gZmFsc2UgKSxcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZVN0ZW5jaWxCdWZmZXI6ICggZ2xQcm9qTGF5ZXIuaWdub3JlRGVwdGhWYWx1ZXMgPT09IGZhbHNlIClcblx0XHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bmV3UmVuZGVyVGFyZ2V0LmlzWFJSZW5kZXJUYXJnZXQgPSB0cnVlOyAvLyBUT0RPIFJlbW92ZSB0aGlzIHdoZW4gcG9zc2libGUsIHNlZSAjMjMyNzhcblxuXHRcdFx0XHR0aGlzLnNldEZvdmVhdGlvbiggZm92ZWF0aW9uICk7XG5cblx0XHRcdFx0Y3VzdG9tUmVmZXJlbmNlU3BhY2UgPSBudWxsO1xuXHRcdFx0XHRyZWZlcmVuY2VTcGFjZSA9IGF3YWl0IHNlc3Npb24ucmVxdWVzdFJlZmVyZW5jZVNwYWNlKCByZWZlcmVuY2VTcGFjZVR5cGUgKTtcblxuXHRcdFx0XHRhbmltYXRpb24uc2V0Q29udGV4dCggc2Vzc2lvbiApO1xuXHRcdFx0XHRhbmltYXRpb24uc3RhcnQoKTtcblxuXHRcdFx0XHRzY29wZS5pc1ByZXNlbnRpbmcgPSB0cnVlO1xuXG5cdFx0XHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ3Nlc3Npb25zdGFydCcgfSApO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgZW52aXJvbm1lbnQgYmxlbmQgbW9kZSBmcm9tIHRoZSBjdXJyZW50IFhSIHNlc3Npb24uXG5cdFx0ICpcblx0XHQgKiBAcmV0dXJuIHsnb3BhcXVlJ3wnYWRkaXRpdmUnfCdhbHBoYS1ibGVuZCd8dW5kZWZpbmVkfSBUaGUgZW52aXJvbm1lbnQgYmxlbmQgbW9kZS4gUmV0dXJucyBgdW5kZWZpbmVkYCB3aGVuIHVzZWQgb3V0c2lkZSBvZiBhIFhSIHNlc3Npb24uXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRFbnZpcm9ubWVudEJsZW5kTW9kZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0aWYgKCBzZXNzaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHJldHVybiBzZXNzaW9uLmVudmlyb25tZW50QmxlbmRNb2RlO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgY3VycmVudCBkZXB0aCB0ZXh0dXJlIGNvbXB1dGVkIHZpYSBkZXB0aCBzZW5zaW5nLlxuXHRcdCAqXG5cdFx0ICogU2VlIHtAbGluayBXZWJYUkRlcHRoU2Vuc2luZyNnZXREZXB0aFRleHR1cmV9LlxuXHRcdCAqXG5cdFx0ICogQHJldHVybiB7P1RleHR1cmV9IFRoZSBkZXB0aCB0ZXh0dXJlLlxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0RGVwdGhUZXh0dXJlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gZGVwdGhTZW5zaW5nLmdldERlcHRoVGV4dHVyZSgpO1xuXG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIG9uSW5wdXRTb3VyY2VzQ2hhbmdlKCBldmVudCApIHtcblxuXHRcdFx0Ly8gTm90aWZ5IGRpc2Nvbm5lY3RlZFxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBldmVudC5yZW1vdmVkLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBpbnB1dFNvdXJjZSA9IGV2ZW50LnJlbW92ZWRbIGkgXTtcblx0XHRcdFx0Y29uc3QgaW5kZXggPSBjb250cm9sbGVySW5wdXRTb3VyY2VzLmluZGV4T2YoIGlucHV0U291cmNlICk7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA+PSAwICkge1xuXG5cdFx0XHRcdFx0Y29udHJvbGxlcklucHV0U291cmNlc1sgaW5kZXggXSA9IG51bGw7XG5cdFx0XHRcdFx0Y29udHJvbGxlcnNbIGluZGV4IF0uZGlzY29ubmVjdCggaW5wdXRTb3VyY2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gTm90aWZ5IGNvbm5lY3RlZFxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBldmVudC5hZGRlZC5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW5wdXRTb3VyY2UgPSBldmVudC5hZGRlZFsgaSBdO1xuXG5cdFx0XHRcdGxldCBjb250cm9sbGVySW5kZXggPSBjb250cm9sbGVySW5wdXRTb3VyY2VzLmluZGV4T2YoIGlucHV0U291cmNlICk7XG5cblx0XHRcdFx0aWYgKCBjb250cm9sbGVySW5kZXggPT09IC0xICkge1xuXG5cdFx0XHRcdFx0Ly8gQXNzaWduIGlucHV0IHNvdXJjZSBhIGNvbnRyb2xsZXIgdGhhdCBjdXJyZW50bHkgaGFzIG5vIGlucHV0IHNvdXJjZVxuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY29udHJvbGxlcnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIGkgPj0gY29udHJvbGxlcklucHV0U291cmNlcy5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHRcdFx0Y29udHJvbGxlcklucHV0U291cmNlcy5wdXNoKCBpbnB1dFNvdXJjZSApO1xuXHRcdFx0XHRcdFx0XHRjb250cm9sbGVySW5kZXggPSBpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udHJvbGxlcklucHV0U291cmNlc1sgaSBdID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnRyb2xsZXJJbnB1dFNvdXJjZXNbIGkgXSA9IGlucHV0U291cmNlO1xuXHRcdFx0XHRcdFx0XHRjb250cm9sbGVySW5kZXggPSBpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gSWYgYWxsIGNvbnRyb2xsZXJzIGRvIGN1cnJlbnRseSByZWNlaXZlIGlucHV0IHdlIGlnbm9yZSBuZXcgb25lc1xuXG5cdFx0XHRcdFx0aWYgKCBjb250cm9sbGVySW5kZXggPT09IC0xICkgYnJlYWs7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgY29udHJvbGxlckluZGV4IF07XG5cblx0XHRcdFx0aWYgKCBjb250cm9sbGVyICkge1xuXG5cdFx0XHRcdFx0Y29udHJvbGxlci5jb25uZWN0KCBpbnB1dFNvdXJjZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IGNhbWVyYUxQb3MgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IGNhbWVyYVJQb3MgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0LyoqXG5cdFx0ICogQXNzdW1lcyAyIGNhbWVyYXMgdGhhdCBhcmUgcGFyYWxsZWwgYW5kIHNoYXJlIGFuIFgtYXhpcywgYW5kIHRoYXRcblx0XHQgKiB0aGUgY2FtZXJhcycgcHJvamVjdGlvbiBhbmQgd29ybGQgbWF0cmljZXMgaGF2ZSBhbHJlYWR5IGJlZW4gc2V0LlxuXHRcdCAqIEFuZCB0aGF0IG5lYXIgYW5kIGZhciBwbGFuZXMgYXJlIGlkZW50aWNhbCBmb3IgYm90aCBjYW1lcmFzLlxuXHRcdCAqIFZpc3VhbGl6YXRpb24gb2YgdGhpcyB0ZWNobmlxdWU6IGh0dHBzOi8vY29tcHV0ZXJncmFwaGljcy5zdGFja2V4Y2hhbmdlLmNvbS9hLzQ3NjVcblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7QXJyYXlDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEgdG8gdXBkYXRlLlxuXHRcdCAqIEBwYXJhbSB7UGVyc3BlY3RpdmVDYW1lcmF9IGNhbWVyYUwgLSBUaGUgbGVmdCBjYW1lcmEuXG5cdFx0ICogQHBhcmFtIHtQZXJzcGVjdGl2ZUNhbWVyYX0gY2FtZXJhUiAtIFRoZSByaWdodCBjYW1lcmEuXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gc2V0UHJvamVjdGlvbkZyb21VbmlvbiggY2FtZXJhLCBjYW1lcmFMLCBjYW1lcmFSICkge1xuXG5cdFx0XHRjYW1lcmFMUG9zLnNldEZyb21NYXRyaXhQb3NpdGlvbiggY2FtZXJhTC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0Y2FtZXJhUlBvcy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYVIubWF0cml4V29ybGQgKTtcblxuXHRcdFx0Y29uc3QgaXBkID0gY2FtZXJhTFBvcy5kaXN0YW5jZVRvKCBjYW1lcmFSUG9zICk7XG5cblx0XHRcdGNvbnN0IHByb2pMID0gY2FtZXJhTC5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzO1xuXHRcdFx0Y29uc3QgcHJvalIgPSBjYW1lcmFSLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHM7XG5cblx0XHRcdC8vIFZSIHN5c3RlbXMgd2lsbCBoYXZlIGlkZW50aWNhbCBmYXIgYW5kIG5lYXIgcGxhbmVzLCBhbmRcblx0XHRcdC8vIG1vc3QgbGlrZWx5IGlkZW50aWNhbCB0b3AgYW5kIGJvdHRvbSBmcnVzdHVtIGV4dGVudHMuXG5cdFx0XHQvLyBVc2UgdGhlIGxlZnQgY2FtZXJhIGZvciB0aGVzZSB2YWx1ZXMuXG5cdFx0XHRjb25zdCBuZWFyID0gcHJvakxbIDE0IF0gLyAoIHByb2pMWyAxMCBdIC0gMSApO1xuXHRcdFx0Y29uc3QgZmFyID0gcHJvakxbIDE0IF0gLyAoIHByb2pMWyAxMCBdICsgMSApO1xuXHRcdFx0Y29uc3QgdG9wRm92ID0gKCBwcm9qTFsgOSBdICsgMSApIC8gcHJvakxbIDUgXTtcblx0XHRcdGNvbnN0IGJvdHRvbUZvdiA9ICggcHJvakxbIDkgXSAtIDEgKSAvIHByb2pMWyA1IF07XG5cblx0XHRcdGNvbnN0IGxlZnRGb3YgPSAoIHByb2pMWyA4IF0gLSAxICkgLyBwcm9qTFsgMCBdO1xuXHRcdFx0Y29uc3QgcmlnaHRGb3YgPSAoIHByb2pSWyA4IF0gKyAxICkgLyBwcm9qUlsgMCBdO1xuXHRcdFx0Y29uc3QgbGVmdCA9IG5lYXIgKiBsZWZ0Rm92O1xuXHRcdFx0Y29uc3QgcmlnaHQgPSBuZWFyICogcmlnaHRGb3Y7XG5cblx0XHRcdC8vIENhbGN1bGF0ZSB0aGUgbmV3IGNhbWVyYSdzIHBvc2l0aW9uIG9mZnNldCBmcm9tIHRoZVxuXHRcdFx0Ly8gbGVmdCBjYW1lcmEuIHhPZmZzZXQgc2hvdWxkIGJlIHJvdWdobHkgaGFsZiBgaXBkYC5cblx0XHRcdGNvbnN0IHpPZmZzZXQgPSBpcGQgLyAoIC0gbGVmdEZvdiArIHJpZ2h0Rm92ICk7XG5cdFx0XHRjb25zdCB4T2Zmc2V0ID0gek9mZnNldCAqIC0gbGVmdEZvdjtcblxuXHRcdFx0Ly8gVE9ETzogQmV0dGVyIHdheSB0byBhcHBseSB0aGlzIG9mZnNldD9cblx0XHRcdGNhbWVyYUwubWF0cml4V29ybGQuZGVjb21wb3NlKCBjYW1lcmEucG9zaXRpb24sIGNhbWVyYS5xdWF0ZXJuaW9uLCBjYW1lcmEuc2NhbGUgKTtcblx0XHRcdGNhbWVyYS50cmFuc2xhdGVYKCB4T2Zmc2V0ICk7XG5cdFx0XHRjYW1lcmEudHJhbnNsYXRlWiggek9mZnNldCApO1xuXHRcdFx0Y2FtZXJhLm1hdHJpeFdvcmxkLmNvbXBvc2UoIGNhbWVyYS5wb3NpdGlvbiwgY2FtZXJhLnF1YXRlcm5pb24sIGNhbWVyYS5zY2FsZSApO1xuXHRcdFx0Y2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZS5jb3B5KCBjYW1lcmEubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgdGhlIHByb2plY3Rpb24gdXNlcyBhbiBpbmZpbml0ZSBmYXIgcGxhbmUuXG5cdFx0XHRpZiAoIHByb2pMWyAxMCBdID09PSAtMSApIHtcblxuXHRcdFx0XHQvLyBVc2UgdGhlIHByb2plY3Rpb24gbWF0cml4IGZyb20gdGhlIGxlZnQgZXllLlxuXHRcdFx0XHQvLyBUaGUgY2FtZXJhIG9mZnNldCBpcyBzdWZmaWNpZW50IHRvIGluY2x1ZGUgdGhlIHZpZXcgdm9sdW1lc1xuXHRcdFx0XHQvLyBvZiBib3RoIGV5ZXMgKGFzc3VtaW5nIHN5bW1ldHJpYyBwcm9qZWN0aW9ucykuXG5cdFx0XHRcdGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmNvcHkoIGNhbWVyYUwucHJvamVjdGlvbk1hdHJpeCApO1xuXHRcdFx0XHRjYW1lcmEucHJvamVjdGlvbk1hdHJpeEludmVyc2UuY29weSggY2FtZXJhTC5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEZpbmQgdGhlIHVuaW9uIG9mIHRoZSBmcnVzdHVtIHZhbHVlcyBvZiB0aGUgY2FtZXJhcyBhbmQgc2NhbGVcblx0XHRcdFx0Ly8gdGhlIHZhbHVlcyBzbyB0aGF0IHRoZSBuZWFyIHBsYW5lJ3MgcG9zaXRpb24gZG9lcyBub3QgY2hhbmdlIGluIHdvcmxkIHNwYWNlLFxuXHRcdFx0XHQvLyBhbHRob3VnaCBtdXN0IG5vdyBiZSByZWxhdGl2ZSB0byB0aGUgbmV3IHVuaW9uIGNhbWVyYS5cblx0XHRcdFx0Y29uc3QgbmVhcjIgPSBuZWFyICsgek9mZnNldDtcblx0XHRcdFx0Y29uc3QgZmFyMiA9IGZhciArIHpPZmZzZXQ7XG5cdFx0XHRcdGNvbnN0IGxlZnQyID0gbGVmdCAtIHhPZmZzZXQ7XG5cdFx0XHRcdGNvbnN0IHJpZ2h0MiA9IHJpZ2h0ICsgKCBpcGQgLSB4T2Zmc2V0ICk7XG5cdFx0XHRcdGNvbnN0IHRvcDIgPSB0b3BGb3YgKiBmYXIgLyBmYXIyICogbmVhcjI7XG5cdFx0XHRcdGNvbnN0IGJvdHRvbTIgPSBib3R0b21Gb3YgKiBmYXIgLyBmYXIyICogbmVhcjI7XG5cblx0XHRcdFx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXgubWFrZVBlcnNwZWN0aXZlKCBsZWZ0MiwgcmlnaHQyLCB0b3AyLCBib3R0b20yLCBuZWFyMiwgZmFyMiApO1xuXHRcdFx0XHRjYW1lcmEucHJvamVjdGlvbk1hdHJpeEludmVyc2UuY29weSggY2FtZXJhLnByb2plY3Rpb25NYXRyaXggKS5pbnZlcnQoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gdXBkYXRlQ2FtZXJhKCBjYW1lcmEsIHBhcmVudCApIHtcblxuXHRcdFx0aWYgKCBwYXJlbnQgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y2FtZXJhLm1hdHJpeFdvcmxkLmNvcHkoIGNhbWVyYS5tYXRyaXggKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjYW1lcmEubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyggcGFyZW50Lm1hdHJpeFdvcmxkLCBjYW1lcmEubWF0cml4ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZS5jb3B5KCBjYW1lcmEubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblxuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIFVwZGF0ZXMgdGhlIHN0YXRlIG9mIHRoZSBYUiBjYW1lcmEuIFVzZSB0aGlzIG1ldGhvZCBvbiBhcHAgbGV2ZWwgaWYgeW91XG5cdFx0ICogc2V0IGBjYW1lcmFBdXRvVXBkYXRlYCB0byBgZmFsc2VgLiBUaGUgbWV0aG9kIHJlcXVpcmVzIHRoZSBub24tWFJcblx0XHQgKiBjYW1lcmEgb2YgdGhlIHNjZW5lIGFzIGEgcGFyYW1ldGVyLiBUaGUgcGFzc2VkIGluIGNhbWVyYSdzIHRyYW5zZm9ybWF0aW9uXG5cdFx0ICogaXMgYXV0b21hdGljYWxseSBhZGp1c3RlZCB0byB0aGUgcG9zaXRpb24gb2YgdGhlIFhSIGNhbWVyYSB3aGVuIGNhbGxpbmdcblx0XHQgKiB0aGlzIG1ldGhvZC5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgLSBUaGUgY2FtZXJhLlxuXHRcdCAqL1xuXHRcdHRoaXMudXBkYXRlQ2FtZXJhID0gZnVuY3Rpb24gKCBjYW1lcmEgKSB7XG5cblx0XHRcdGlmICggc2Vzc2lvbiA9PT0gbnVsbCApIHJldHVybjtcblxuXHRcdFx0bGV0IGRlcHRoTmVhciA9IGNhbWVyYS5uZWFyO1xuXHRcdFx0bGV0IGRlcHRoRmFyID0gY2FtZXJhLmZhcjtcblxuXHRcdFx0aWYgKCBkZXB0aFNlbnNpbmcudGV4dHVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIGRlcHRoU2Vuc2luZy5kZXB0aE5lYXIgPiAwICkgZGVwdGhOZWFyID0gZGVwdGhTZW5zaW5nLmRlcHRoTmVhcjtcblx0XHRcdFx0aWYgKCBkZXB0aFNlbnNpbmcuZGVwdGhGYXIgPiAwICkgZGVwdGhGYXIgPSBkZXB0aFNlbnNpbmcuZGVwdGhGYXI7XG5cblx0XHRcdH1cblxuXHRcdFx0Y2FtZXJhWFIubmVhciA9IGNhbWVyYVIubmVhciA9IGNhbWVyYUwubmVhciA9IGRlcHRoTmVhcjtcblx0XHRcdGNhbWVyYVhSLmZhciA9IGNhbWVyYVIuZmFyID0gY2FtZXJhTC5mYXIgPSBkZXB0aEZhcjtcblxuXHRcdFx0aWYgKCBfY3VycmVudERlcHRoTmVhciAhPT0gY2FtZXJhWFIubmVhciB8fCBfY3VycmVudERlcHRoRmFyICE9PSBjYW1lcmFYUi5mYXIgKSB7XG5cblx0XHRcdFx0Ly8gTm90ZSB0aGF0IHRoZSBuZXcgcmVuZGVyU3RhdGUgd29uJ3QgYXBwbHkgdW50aWwgdGhlIG5leHQgZnJhbWUuIFNlZSAjMTgzMjBcblxuXHRcdFx0XHRzZXNzaW9uLnVwZGF0ZVJlbmRlclN0YXRlKCB7XG5cdFx0XHRcdFx0ZGVwdGhOZWFyOiBjYW1lcmFYUi5uZWFyLFxuXHRcdFx0XHRcdGRlcHRoRmFyOiBjYW1lcmFYUi5mYXJcblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdF9jdXJyZW50RGVwdGhOZWFyID0gY2FtZXJhWFIubmVhcjtcblx0XHRcdFx0X2N1cnJlbnREZXB0aEZhciA9IGNhbWVyYVhSLmZhcjtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBpbmhlcml0IGNhbWVyYSBsYXllcnMgYW5kIGVuYWJsZSBleWUgbGF5ZXJzICgxID0gbGVmdCwgMiA9IHJpZ2h0KVxuXHRcdFx0Y2FtZXJhWFIubGF5ZXJzLm1hc2sgPSBjYW1lcmEubGF5ZXJzLm1hc2sgfCAwYjExMDtcblx0XHRcdGNhbWVyYUwubGF5ZXJzLm1hc2sgPSBjYW1lcmFYUi5sYXllcnMubWFzayAmIDBiMDExO1xuXHRcdFx0Y2FtZXJhUi5sYXllcnMubWFzayA9IGNhbWVyYVhSLmxheWVycy5tYXNrICYgMGIxMDE7XG5cblx0XHRcdGNvbnN0IHBhcmVudCA9IGNhbWVyYS5wYXJlbnQ7XG5cdFx0XHRjb25zdCBjYW1lcmFzID0gY2FtZXJhWFIuY2FtZXJhcztcblxuXHRcdFx0dXBkYXRlQ2FtZXJhKCBjYW1lcmFYUiwgcGFyZW50ICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGNhbWVyYXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdHVwZGF0ZUNhbWVyYSggY2FtZXJhc1sgaSBdLCBwYXJlbnQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyB1cGRhdGUgcHJvamVjdGlvbiBtYXRyaXggZm9yIHByb3BlciB2aWV3IGZydXN0dW0gY3VsbGluZ1xuXG5cdFx0XHRpZiAoIGNhbWVyYXMubGVuZ3RoID09PSAyICkge1xuXG5cdFx0XHRcdHNldFByb2plY3Rpb25Gcm9tVW5pb24oIGNhbWVyYVhSLCBjYW1lcmFMLCBjYW1lcmFSICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gYXNzdW1lIHNpbmdsZSBjYW1lcmEgc2V0dXAgKEFSKVxuXG5cdFx0XHRcdGNhbWVyYVhSLnByb2plY3Rpb25NYXRyaXguY29weSggY2FtZXJhTC5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gdXBkYXRlIHVzZXIgY2FtZXJhIGFuZCBpdHMgY2hpbGRyZW5cblxuXHRcdFx0dXBkYXRlVXNlckNhbWVyYSggY2FtZXJhLCBjYW1lcmFYUiwgcGFyZW50ICk7XG5cblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gdXBkYXRlVXNlckNhbWVyYSggY2FtZXJhLCBjYW1lcmFYUiwgcGFyZW50ICkge1xuXG5cdFx0XHRpZiAoIHBhcmVudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRjYW1lcmEubWF0cml4LmNvcHkoIGNhbWVyYVhSLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y2FtZXJhLm1hdHJpeC5jb3B5KCBwYXJlbnQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0Y2FtZXJhLm1hdHJpeC5pbnZlcnQoKTtcblx0XHRcdFx0Y2FtZXJhLm1hdHJpeC5tdWx0aXBseSggY2FtZXJhWFIubWF0cml4V29ybGQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjYW1lcmEubWF0cml4LmRlY29tcG9zZSggY2FtZXJhLnBvc2l0aW9uLCBjYW1lcmEucXVhdGVybmlvbiwgY2FtZXJhLnNjYWxlICk7XG5cdFx0XHRjYW1lcmEudXBkYXRlTWF0cml4V29ybGQoIHRydWUgKTtcblxuXHRcdFx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXguY29weSggY2FtZXJhWFIucHJvamVjdGlvbk1hdHJpeCApO1xuXHRcdFx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIGNhbWVyYVhSLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlICk7XG5cblx0XHRcdGlmICggY2FtZXJhLmlzUGVyc3BlY3RpdmVDYW1lcmEgKSB7XG5cblx0XHRcdFx0Y2FtZXJhLmZvdiA9IFJBRDJERUcgKiAyICogTWF0aC5hdGFuKCAxIC8gY2FtZXJhLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDUgXSApO1xuXHRcdFx0XHRjYW1lcmEuem9vbSA9IDE7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIEFycmF5Q2FtZXJhfSB3aGljaCByZXByZXNlbnRzIHRoZSBYUiBjYW1lcmFcblx0XHQgKiBvZiB0aGUgYWN0aXZlIFhSIHNlc3Npb24uIEZvciBlYWNoIHZpZXcgaXQgaG9sZHMgYSBzZXBhcmF0ZSBjYW1lcmEgb2JqZWN0LlxuXHRcdCAqXG5cdFx0ICogVGhlIGNhbWVyYSdzIGBmb3ZgIGlzIGN1cnJlbnRseSBub3QgdXNlZCBhbmQgZG9lcyBub3QgcmVmbGVjdCB0aGUgZm92IG9mXG5cdFx0ICogdGhlIFhSIGNhbWVyYS4gSWYgeW91IG5lZWQgdGhlIGZvdiBvbiBhcHAgbGV2ZWwsIHlvdSBoYXZlIHRvIGNvbXB1dGUgaW5cblx0XHQgKiBtYW51YWxseSBmcm9tIHRoZSBYUiBjYW1lcmEncyBwcm9qZWN0aW9uIG1hdHJpY2VzLlxuXHRcdCAqXG5cdFx0ICogQHJldHVybiB7QXJyYXlDYW1lcmF9IFRoZSBYUiBjYW1lcmEuXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRDYW1lcmEgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBjYW1lcmFYUjtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSBhbW91bnQgb2YgZm92ZWF0aW9uIHVzZWQgYnkgdGhlIFhSIGNvbXBvc2l0b3IgZm9yIHRoZSBwcm9qZWN0aW9uIGxheWVyLlxuXHRcdCAqXG5cdFx0ICogQHJldHVybiB7bnVtYmVyfHVuZGVmaW5lZH0gVGhlIGFtb3VudCBvZiBmb3ZlYXRpb24uXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRGb3ZlYXRpb24gPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGlmICggZ2xQcm9qTGF5ZXIgPT09IG51bGwgJiYgZ2xCYXNlTGF5ZXIgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm92ZWF0aW9uO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFNldHMgdGhlIGZvdmVhdGlvbiB2YWx1ZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIEEgbnVtYmVyIGluIHRoZSByYW5nZSBgWzAsMV1gIHdoZXJlIGAwYCBtZWFucyBubyBmb3ZlYXRpb24gKGZ1bGwgcmVzb2x1dGlvbilcblx0XHQgKiBhbmQgYDFgIG1lYW5zIG1heGltdW0gZm92ZWF0aW9uICh0aGUgZWRnZXMgcmVuZGVyIGF0IGxvd2VyIHJlc29sdXRpb24pLlxuXHRcdCAqL1xuXHRcdHRoaXMuc2V0Rm92ZWF0aW9uID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Ly8gMCA9IG5vIGZvdmVhdGlvbiA9IGZ1bGwgcmVzb2x1dGlvblxuXHRcdFx0Ly8gMSA9IG1heGltdW0gZm92ZWF0aW9uID0gdGhlIGVkZ2VzIHJlbmRlciBhdCBsb3dlciByZXNvbHV0aW9uXG5cblx0XHRcdGZvdmVhdGlvbiA9IHZhbHVlO1xuXG5cdFx0XHRpZiAoIGdsUHJvakxheWVyICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGdsUHJvakxheWVyLmZpeGVkRm92ZWF0aW9uID0gdmFsdWU7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBnbEJhc2VMYXllciAhPT0gbnVsbCAmJiBnbEJhc2VMYXllci5maXhlZEZvdmVhdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGdsQmFzZUxheWVyLmZpeGVkRm92ZWF0aW9uID0gdmFsdWU7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIGB0cnVlYCBpZiBkZXB0aCBzZW5zaW5nIGlzIHN1cHBvcnRlZC5cblx0XHQgKlxuXHRcdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgZGVwdGggc2Vuc2luZyBpcyBzdXBwb3J0ZWQgb3Igbm90LlxuXHRcdCAqL1xuXHRcdHRoaXMuaGFzRGVwdGhTZW5zaW5nID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gZGVwdGhTZW5zaW5nLnRleHR1cmUgIT09IG51bGw7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgZGVwdGggc2Vuc2luZyBtZXNoLlxuXHRcdCAqXG5cdFx0ICogU2VlIHtAbGluayBXZWJYUkRlcHRoU2Vuc2luZyNnZXRNZXNofS5cblx0XHQgKlxuXHRcdCAqIEByZXR1cm4ge01lc2h9IFRoZSBkZXB0aCBzZW5zaW5nIG1lc2guXG5cdFx0ICovXG5cdFx0dGhpcy5nZXREZXB0aFNlbnNpbmdNZXNoID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gZGVwdGhTZW5zaW5nLmdldE1lc2goIGNhbWVyYVhSICk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0cmlldmVzIGFuIG9wYXF1ZSB0ZXh0dXJlIGZyb20gdGhlIHZpZXctYWxpZ25lZCB7QGxpbmsgWFJDYW1lcmF9LlxuXHRcdCAqIE9ubHkgYXZhaWxhYmxlIGR1cmluZyB0aGUgY3VycmVudCBhbmltYXRpb24gbG9vcC5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7WFJDYW1lcmF9IHhyQ2FtZXJhIC0gVGhlIGNhbWVyYSB0byBxdWVyeS5cblx0XHQgKiBAcmV0dXJuIHs/VGV4dHVyZX0gQW4gb3BhcXVlIHRleHR1cmUgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IHJhdyBjYW1lcmEgZnJhbWUuXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRDYW1lcmFUZXh0dXJlID0gZnVuY3Rpb24gKCB4ckNhbWVyYSApIHtcblxuXHRcdFx0cmV0dXJuIGNhbWVyYUFjY2Vzc1RleHR1cmVzWyB4ckNhbWVyYSBdO1xuXG5cdFx0fTtcblxuXHRcdC8vIEFuaW1hdGlvbiBMb29wXG5cblx0XHRsZXQgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gbnVsbDtcblxuXHRcdGZ1bmN0aW9uIG9uQW5pbWF0aW9uRnJhbWUoIHRpbWUsIGZyYW1lICkge1xuXG5cdFx0XHRwb3NlID0gZnJhbWUuZ2V0Vmlld2VyUG9zZSggY3VzdG9tUmVmZXJlbmNlU3BhY2UgfHwgcmVmZXJlbmNlU3BhY2UgKTtcblx0XHRcdHhyRnJhbWUgPSBmcmFtZTtcblxuXHRcdFx0aWYgKCBwb3NlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnN0IHZpZXdzID0gcG9zZS52aWV3cztcblxuXHRcdFx0XHRpZiAoIGdsQmFzZUxheWVyICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0RnJhbWVidWZmZXIoIG5ld1JlbmRlclRhcmdldCwgZ2xCYXNlTGF5ZXIuZnJhbWVidWZmZXIgKTtcblx0XHRcdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIG5ld1JlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsZXQgY2FtZXJhWFJOZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHRcdC8vIGNoZWNrIGlmIGl0J3MgbmVjZXNzYXJ5IHRvIHJlYnVpbGQgY2FtZXJhWFIncyBjYW1lcmEgbGlzdFxuXG5cdFx0XHRcdGlmICggdmlld3MubGVuZ3RoICE9PSBjYW1lcmFYUi5jYW1lcmFzLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdGNhbWVyYVhSLmNhbWVyYXMubGVuZ3RoID0gMDtcblx0XHRcdFx0XHRjYW1lcmFYUk5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdmlld3MubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdmlldyA9IHZpZXdzWyBpIF07XG5cblx0XHRcdFx0XHRsZXQgdmlld3BvcnQgPSBudWxsO1xuXG5cdFx0XHRcdFx0aWYgKCBnbEJhc2VMYXllciAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0dmlld3BvcnQgPSBnbEJhc2VMYXllci5nZXRWaWV3cG9ydCggdmlldyApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgZ2xTdWJJbWFnZSA9IGdsQmluZGluZy5nZXRWaWV3U3ViSW1hZ2UoIGdsUHJvakxheWVyLCB2aWV3ICk7XG5cdFx0XHRcdFx0XHR2aWV3cG9ydCA9IGdsU3ViSW1hZ2Uudmlld3BvcnQ7XG5cblx0XHRcdFx0XHRcdC8vIEZvciBzaWRlLWJ5LXNpZGUgcHJvamVjdGlvbiwgd2Ugb25seSBwcm9kdWNlIGEgc2luZ2xlIHRleHR1cmUgZm9yIGJvdGggZXllcy5cblx0XHRcdFx0XHRcdGlmICggaSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXRUZXh0dXJlcyhcblx0XHRcdFx0XHRcdFx0XHRuZXdSZW5kZXJUYXJnZXQsXG5cdFx0XHRcdFx0XHRcdFx0Z2xTdWJJbWFnZS5jb2xvclRleHR1cmUsXG5cdFx0XHRcdFx0XHRcdFx0Z2xTdWJJbWFnZS5kZXB0aFN0ZW5jaWxUZXh0dXJlICk7XG5cblx0XHRcdFx0XHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBuZXdSZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bGV0IGNhbWVyYSA9IGNhbWVyYXNbIGkgXTtcblxuXHRcdFx0XHRcdGlmICggY2FtZXJhID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGNhbWVyYSA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRcdFx0XHRcdFx0Y2FtZXJhLmxheWVycy5lbmFibGUoIGkgKTtcblx0XHRcdFx0XHRcdGNhbWVyYS52aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCk7XG5cdFx0XHRcdFx0XHRjYW1lcmFzWyBpIF0gPSBjYW1lcmE7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjYW1lcmEubWF0cml4LmZyb21BcnJheSggdmlldy50cmFuc2Zvcm0ubWF0cml4ICk7XG5cdFx0XHRcdFx0Y2FtZXJhLm1hdHJpeC5kZWNvbXBvc2UoIGNhbWVyYS5wb3NpdGlvbiwgY2FtZXJhLnF1YXRlcm5pb24sIGNhbWVyYS5zY2FsZSApO1xuXHRcdFx0XHRcdGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmZyb21BcnJheSggdmlldy5wcm9qZWN0aW9uTWF0cml4ICk7XG5cdFx0XHRcdFx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICkuaW52ZXJ0KCk7XG5cdFx0XHRcdFx0Y2FtZXJhLnZpZXdwb3J0LnNldCggdmlld3BvcnQueCwgdmlld3BvcnQueSwgdmlld3BvcnQud2lkdGgsIHZpZXdwb3J0LmhlaWdodCApO1xuXG5cdFx0XHRcdFx0aWYgKCBpID09PSAwICkge1xuXG5cdFx0XHRcdFx0XHRjYW1lcmFYUi5tYXRyaXguY29weSggY2FtZXJhLm1hdHJpeCApO1xuXHRcdFx0XHRcdFx0Y2FtZXJhWFIubWF0cml4LmRlY29tcG9zZSggY2FtZXJhWFIucG9zaXRpb24sIGNhbWVyYVhSLnF1YXRlcm5pb24sIGNhbWVyYVhSLnNjYWxlICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGNhbWVyYVhSTmVlZHNVcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRcdGNhbWVyYVhSLmNhbWVyYXMucHVzaCggY2FtZXJhICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vXG5cblx0XHRcdFx0Y29uc3QgZW5hYmxlZEZlYXR1cmVzID0gc2Vzc2lvbi5lbmFibGVkRmVhdHVyZXM7XG5cdFx0XHRcdGNvbnN0IGdwdURlcHRoU2Vuc2luZ0VuYWJsZWQgPSBlbmFibGVkRmVhdHVyZXMgJiZcblx0XHRcdFx0XHRlbmFibGVkRmVhdHVyZXMuaW5jbHVkZXMoICdkZXB0aC1zZW5zaW5nJyApICYmXG5cdFx0XHRcdFx0c2Vzc2lvbi5kZXB0aFVzYWdlID09ICdncHUtb3B0aW1pemVkJztcblxuXHRcdFx0XHRpZiAoIGdwdURlcHRoU2Vuc2luZ0VuYWJsZWQgJiYgc3VwcG9ydHNHbEJpbmRpbmcgKSB7XG5cblx0XHRcdFx0XHRnbEJpbmRpbmcgPSBzY29wZS5nZXRCaW5kaW5nKCk7XG5cblx0XHRcdFx0XHRjb25zdCBkZXB0aERhdGEgPSBnbEJpbmRpbmcuZ2V0RGVwdGhJbmZvcm1hdGlvbiggdmlld3NbIDAgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBkZXB0aERhdGEgJiYgZGVwdGhEYXRhLmlzVmFsaWQgJiYgZGVwdGhEYXRhLnRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRcdGRlcHRoU2Vuc2luZy5pbml0KCBkZXB0aERhdGEsIHNlc3Npb24ucmVuZGVyU3RhdGUgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgY2FtZXJhQWNjZXNzRW5hYmxlZCA9IGVuYWJsZWRGZWF0dXJlcyAmJlxuXHRcdFx0XHQgICAgZW5hYmxlZEZlYXR1cmVzLmluY2x1ZGVzKCAnY2FtZXJhLWFjY2VzcycgKTtcblxuXHRcdFx0XHRpZiAoIGNhbWVyYUFjY2Vzc0VuYWJsZWQgJiYgc3VwcG9ydHNHbEJpbmRpbmcgKSB7XG5cblx0XHRcdFx0XHRyZW5kZXJlci5zdGF0ZS51bmJpbmRUZXh0dXJlKCk7XG5cblx0XHRcdFx0XHRnbEJpbmRpbmcgPSBzY29wZS5nZXRCaW5kaW5nKCk7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB2aWV3cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGNhbWVyYSA9IHZpZXdzWyBpIF0uY2FtZXJhO1xuXG5cdFx0XHRcdFx0XHRpZiAoIGNhbWVyYSApIHtcblxuXHRcdFx0XHRcdFx0XHRsZXQgY2FtZXJhVGV4ID0gY2FtZXJhQWNjZXNzVGV4dHVyZXNbIGNhbWVyYSBdO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggISBjYW1lcmFUZXggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRjYW1lcmFUZXggPSBuZXcgRXh0ZXJuYWxUZXh0dXJlKCk7XG5cdFx0XHRcdFx0XHRcdFx0Y2FtZXJhQWNjZXNzVGV4dHVyZXNbIGNhbWVyYSBdID0gY2FtZXJhVGV4O1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRjb25zdCBnbFRleHR1cmUgPSBnbEJpbmRpbmcuZ2V0Q2FtZXJhSW1hZ2UoIGNhbWVyYSApO1xuXHRcdFx0XHRcdFx0XHRjYW1lcmFUZXguc291cmNlVGV4dHVyZSA9IGdsVGV4dHVyZTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvL1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb250cm9sbGVycy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW5wdXRTb3VyY2UgPSBjb250cm9sbGVySW5wdXRTb3VyY2VzWyBpIF07XG5cdFx0XHRcdGNvbnN0IGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggaW5wdXRTb3VyY2UgIT09IG51bGwgJiYgY29udHJvbGxlciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y29udHJvbGxlci51cGRhdGUoIGlucHV0U291cmNlLCBmcmFtZSwgY3VzdG9tUmVmZXJlbmNlU3BhY2UgfHwgcmVmZXJlbmNlU3BhY2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgKSBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2soIHRpbWUsIGZyYW1lICk7XG5cblx0XHRcdGlmICggZnJhbWUuZGV0ZWN0ZWRQbGFuZXMgKSB7XG5cblx0XHRcdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAncGxhbmVzZGV0ZWN0ZWQnLCBkYXRhOiBmcmFtZSB9ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0eHJGcmFtZSA9IG51bGw7XG5cblx0XHR9XG5cblx0XHRjb25zdCBhbmltYXRpb24gPSBuZXcgV2ViR0xBbmltYXRpb24oKTtcblxuXHRcdGFuaW1hdGlvbi5zZXRBbmltYXRpb25Mb29wKCBvbkFuaW1hdGlvbkZyYW1lICk7XG5cblx0XHR0aGlzLnNldEFuaW1hdGlvbkxvb3AgPSBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0XHRvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgPSBjYWxsYmFjaztcblxuXHRcdH07XG5cblx0XHR0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7fTtcblxuXHR9XG5cbn1cblxuY29uc3QgX2UxID0gLypAX19QVVJFX18qLyBuZXcgRXVsZXIoKTtcbmNvbnN0IF9tMSA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcblxuZnVuY3Rpb24gV2ViR0xNYXRlcmlhbHMoIHJlbmRlcmVyLCBwcm9wZXJ0aWVzICkge1xuXG5cdGZ1bmN0aW9uIHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXAsIHVuaWZvcm0gKSB7XG5cblx0XHRpZiAoIG1hcC5tYXRyaXhBdXRvVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRtYXAudXBkYXRlTWF0cml4KCk7XG5cblx0XHR9XG5cblx0XHR1bmlmb3JtLnZhbHVlLmNvcHkoIG1hcC5tYXRyaXggKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaEZvZ1VuaWZvcm1zKCB1bmlmb3JtcywgZm9nICkge1xuXG5cdFx0Zm9nLmNvbG9yLmdldFJHQiggdW5pZm9ybXMuZm9nQ29sb3IudmFsdWUsIGdldFVubGl0VW5pZm9ybUNvbG9yU3BhY2UoIHJlbmRlcmVyICkgKTtcblxuXHRcdGlmICggZm9nLmlzRm9nICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5mb2dOZWFyLnZhbHVlID0gZm9nLm5lYXI7XG5cdFx0XHR1bmlmb3Jtcy5mb2dGYXIudmFsdWUgPSBmb2cuZmFyO1xuXG5cdFx0fSBlbHNlIGlmICggZm9nLmlzRm9nRXhwMiApIHtcblxuXHRcdFx0dW5pZm9ybXMuZm9nRGVuc2l0eS52YWx1ZSA9IGZvZy5kZW5zaXR5O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoTWF0ZXJpYWxVbmlmb3JtcyggdW5pZm9ybXMsIG1hdGVyaWFsLCBwaXhlbFJhdGlvLCBoZWlnaHQsIHRyYW5zbWlzc2lvblJlbmRlclRhcmdldCApIHtcblxuXHRcdGlmICggbWF0ZXJpYWwuaXNNZXNoQmFzaWNNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaExhbWJlcnRNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaFRvb25NYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblx0XHRcdHJlZnJlc2hVbmlmb3Jtc1Rvb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoUGhvbmdNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblx0XHRcdHJlZnJlc2hVbmlmb3Jtc1Bob25nKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNTdGFuZGFyZCggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNNZXNoUGh5c2ljYWxNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNQaHlzaWNhbCggdW5pZm9ybXMsIG1hdGVyaWFsLCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoTWF0Y2FwTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNNYXRjYXAoIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoRGVwdGhNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaERpc3RhbmNlTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNEaXN0YW5jZSggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hOb3JtYWxNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTGluZUJhc2ljTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlZnJlc2hVbmlmb3Jtc0xpbmUoIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmlzTGluZURhc2hlZE1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0Rhc2goIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc1BvaW50c01hdGVyaWFsICkge1xuXG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNQb2ludHMoIHVuaWZvcm1zLCBtYXRlcmlhbCwgcGl4ZWxSYXRpbywgaGVpZ2h0ICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc1Nwcml0ZU1hdGVyaWFsICkge1xuXG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNTcHJpdGVzKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzU2hhZG93TWF0ZXJpYWwgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmNvbG9yLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmNvbG9yICk7XG5cdFx0XHR1bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgKSB7XG5cblx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zTmVlZFVwZGF0ZSA9IGZhbHNlOyAvLyAjMTU1ODFcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTtcblxuXHRcdGlmICggbWF0ZXJpYWwuY29sb3IgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmRpZmZ1c2UudmFsdWUuY29weSggbWF0ZXJpYWwuY29sb3IgKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZW1pc3NpdmUgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmVtaXNzaXZlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmVtaXNzaXZlICkubXVsdGlwbHlTY2FsYXIoIG1hdGVyaWFsLmVtaXNzaXZlSW50ZW5zaXR5ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubWFwLnZhbHVlID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwubWFwLCB1bmlmb3Jtcy5tYXBUcmFuc2Zvcm0gKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYWxwaGFNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmFscGhhTWFwLnZhbHVlID0gbWF0ZXJpYWwuYWxwaGFNYXA7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5hbHBoYU1hcCwgdW5pZm9ybXMuYWxwaGFNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYnVtcE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYnVtcE1hcC52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBNYXA7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5idW1wTWFwLCB1bmlmb3Jtcy5idW1wTWFwVHJhbnNmb3JtICk7XG5cblx0XHRcdHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBTY2FsZTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHtcblxuXHRcdFx0XHR1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgKj0gLTE7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwubm9ybWFsTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxNYXAudmFsdWUgPSBtYXRlcmlhbC5ub3JtYWxNYXA7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5ub3JtYWxNYXAsIHVuaWZvcm1zLm5vcm1hbE1hcFRyYW5zZm9ybSApO1xuXG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5ub3JtYWxTY2FsZSApO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLm5lZ2F0ZSgpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuXG5cdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwLCB1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50U2NhbGUudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudEJpYXMudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZW1pc3NpdmVNYXAudmFsdWUgPSBtYXRlcmlhbC5lbWlzc2l2ZU1hcDtcblxuXHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLmVtaXNzaXZlTWFwLCB1bmlmb3Jtcy5lbWlzc2l2ZU1hcFRyYW5zZm9ybSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5zcGVjdWxhck1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuc3BlY3VsYXJNYXAudmFsdWUgPSBtYXRlcmlhbC5zcGVjdWxhck1hcDtcblxuXHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLnNwZWN1bGFyTWFwLCB1bmlmb3Jtcy5zcGVjdWxhck1hcFRyYW5zZm9ybSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5hbHBoYVRlc3QgPiAwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5hbHBoYVRlc3QudmFsdWUgPSBtYXRlcmlhbC5hbHBoYVRlc3Q7XG5cblx0XHR9XG5cblx0XHRjb25zdCBtYXRlcmlhbFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwgKTtcblxuXHRcdGNvbnN0IGVudk1hcCA9IG1hdGVyaWFsUHJvcGVydGllcy5lbnZNYXA7XG5cdFx0Y29uc3QgZW52TWFwUm90YXRpb24gPSBtYXRlcmlhbFByb3BlcnRpZXMuZW52TWFwUm90YXRpb247XG5cblx0XHRpZiAoIGVudk1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZW52TWFwLnZhbHVlID0gZW52TWFwO1xuXG5cdFx0XHRfZTEuY29weSggZW52TWFwUm90YXRpb24gKTtcblxuXHRcdFx0Ly8gYWNjb21tb2RhdGUgbGVmdC1oYW5kZWQgZnJhbWVcblx0XHRcdF9lMS54ICo9IC0xOyBfZTEueSAqPSAtMTsgX2UxLnogKj0gLTE7XG5cblx0XHRcdGlmICggZW52TWFwLmlzQ3ViZVRleHR1cmUgJiYgZW52TWFwLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gZW52aXJvbm1lbnQgbWFwcyB3aGljaCBhcmUgbm90IGN1YmUgcmVuZGVyIHRhcmdldHMgb3IgUE1SRU1zIGZvbGxvdyBhIGRpZmZlcmVudCBjb252ZW50aW9uXG5cdFx0XHRcdF9lMS55ICo9IC0xO1xuXHRcdFx0XHRfZTEueiAqPSAtMTtcblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3Jtcy5lbnZNYXBSb3RhdGlvbi52YWx1ZS5zZXRGcm9tTWF0cml4NCggX20xLm1ha2VSb3RhdGlvbkZyb21FdWxlciggX2UxICkgKTtcblxuXHRcdFx0dW5pZm9ybXMuZmxpcEVudk1hcC52YWx1ZSA9ICggZW52TWFwLmlzQ3ViZVRleHR1cmUgJiYgZW52TWFwLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9PT0gZmFsc2UgKSA/IC0xIDogMTtcblxuXHRcdFx0dW5pZm9ybXMucmVmbGVjdGl2aXR5LnZhbHVlID0gbWF0ZXJpYWwucmVmbGVjdGl2aXR5O1xuXHRcdFx0dW5pZm9ybXMuaW9yLnZhbHVlID0gbWF0ZXJpYWwuaW9yO1xuXHRcdFx0dW5pZm9ybXMucmVmcmFjdGlvblJhdGlvLnZhbHVlID0gbWF0ZXJpYWwucmVmcmFjdGlvblJhdGlvO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5saWdodE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubGlnaHRNYXAudmFsdWUgPSBtYXRlcmlhbC5saWdodE1hcDtcblx0XHRcdHVuaWZvcm1zLmxpZ2h0TWFwSW50ZW5zaXR5LnZhbHVlID0gbWF0ZXJpYWwubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5saWdodE1hcCwgdW5pZm9ybXMubGlnaHRNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYW9NYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmFvTWFwLnZhbHVlID0gbWF0ZXJpYWwuYW9NYXA7XG5cdFx0XHR1bmlmb3Jtcy5hb01hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmFvTWFwSW50ZW5zaXR5O1xuXG5cdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuYW9NYXAsIHVuaWZvcm1zLmFvTWFwVHJhbnNmb3JtICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0xpbmUoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdHVuaWZvcm1zLmRpZmZ1c2UudmFsdWUuY29weSggbWF0ZXJpYWwuY29sb3IgKTtcblx0XHR1bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTtcblxuXHRcdGlmICggbWF0ZXJpYWwubWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5tYXAudmFsdWUgPSBtYXRlcmlhbC5tYXA7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5tYXAsIHVuaWZvcm1zLm1hcFRyYW5zZm9ybSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNEYXNoKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5kYXNoU2l6ZS52YWx1ZSA9IG1hdGVyaWFsLmRhc2hTaXplO1xuXHRcdHVuaWZvcm1zLnRvdGFsU2l6ZS52YWx1ZSA9IG1hdGVyaWFsLmRhc2hTaXplICsgbWF0ZXJpYWwuZ2FwU2l6ZTtcblx0XHR1bmlmb3Jtcy5zY2FsZS52YWx1ZSA9IG1hdGVyaWFsLnNjYWxlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNQb2ludHMoIHVuaWZvcm1zLCBtYXRlcmlhbCwgcGl4ZWxSYXRpbywgaGVpZ2h0ICkge1xuXG5cdFx0dW5pZm9ybXMuZGlmZnVzZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdHVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xuXHRcdHVuaWZvcm1zLnNpemUudmFsdWUgPSBtYXRlcmlhbC5zaXplICogcGl4ZWxSYXRpbztcblx0XHR1bmlmb3Jtcy5zY2FsZS52YWx1ZSA9IGhlaWdodCAqIDAuNTtcblxuXHRcdGlmICggbWF0ZXJpYWwubWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5tYXAudmFsdWUgPSBtYXRlcmlhbC5tYXA7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5tYXAsIHVuaWZvcm1zLnV2VHJhbnNmb3JtICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmFscGhhTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5hbHBoYU1hcC52YWx1ZSA9IG1hdGVyaWFsLmFscGhhTWFwO1xuXG5cdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuYWxwaGFNYXAsIHVuaWZvcm1zLmFscGhhTWFwVHJhbnNmb3JtICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmFscGhhVGVzdCA+IDAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmFscGhhVGVzdC52YWx1ZSA9IG1hdGVyaWFsLmFscGhhVGVzdDtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zU3ByaXRlcyggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMuZGlmZnVzZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdHVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xuXHRcdHVuaWZvcm1zLnJvdGF0aW9uLnZhbHVlID0gbWF0ZXJpYWwucm90YXRpb247XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubWFwLnZhbHVlID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwubWFwLCB1bmlmb3Jtcy5tYXBUcmFuc2Zvcm0gKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYWxwaGFNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmFscGhhTWFwLnZhbHVlID0gbWF0ZXJpYWwuYWxwaGFNYXA7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5hbHBoYU1hcCwgdW5pZm9ybXMuYWxwaGFNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYWxwaGFUZXN0ID4gMCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYWxwaGFUZXN0LnZhbHVlID0gbWF0ZXJpYWwuYWxwaGFUZXN0O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNQaG9uZyggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMuc3BlY3VsYXIudmFsdWUuY29weSggbWF0ZXJpYWwuc3BlY3VsYXIgKTtcblx0XHR1bmlmb3Jtcy5zaGluaW5lc3MudmFsdWUgPSBNYXRoLm1heCggbWF0ZXJpYWwuc2hpbmluZXNzLCAxZS00ICk7IC8vIHRvIHByZXZlbnQgcG93KCAwLjAsIDAuMCApXG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1Rvb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdGlmICggbWF0ZXJpYWwuZ3JhZGllbnRNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmdyYWRpZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZ3JhZGllbnRNYXA7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5tZXRhbG5lc3MudmFsdWUgPSBtYXRlcmlhbC5tZXRhbG5lc3M7XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1ldGFsbmVzc01hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubWV0YWxuZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwubWV0YWxuZXNzTWFwO1xuXG5cdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwubWV0YWxuZXNzTWFwLCB1bmlmb3Jtcy5tZXRhbG5lc3NNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdH1cblxuXHRcdHVuaWZvcm1zLnJvdWdobmVzcy52YWx1ZSA9IG1hdGVyaWFsLnJvdWdobmVzcztcblxuXHRcdGlmICggbWF0ZXJpYWwucm91Z2huZXNzTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5yb3VnaG5lc3NNYXAudmFsdWUgPSBtYXRlcmlhbC5yb3VnaG5lc3NNYXA7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5yb3VnaG5lc3NNYXAsIHVuaWZvcm1zLnJvdWdobmVzc01hcFRyYW5zZm9ybSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5lbnZNYXAgKSB7XG5cblx0XHRcdC8vdW5pZm9ybXMuZW52TWFwLnZhbHVlID0gbWF0ZXJpYWwuZW52TWFwOyAvLyBwYXJ0IG9mIHVuaWZvcm1zIGNvbW1vblxuXG5cdFx0XHR1bmlmb3Jtcy5lbnZNYXBJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5lbnZNYXBJbnRlbnNpdHk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1BoeXNpY2FsKCB1bmlmb3JtcywgbWF0ZXJpYWwsIHRyYW5zbWlzc2lvblJlbmRlclRhcmdldCApIHtcblxuXHRcdHVuaWZvcm1zLmlvci52YWx1ZSA9IG1hdGVyaWFsLmlvcjsgLy8gYWxzbyBwYXJ0IG9mIHVuaWZvcm1zIGNvbW1vblxuXG5cdFx0aWYgKCBtYXRlcmlhbC5zaGVlbiA+IDAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLnNoZWVuQ29sb3IudmFsdWUuY29weSggbWF0ZXJpYWwuc2hlZW5Db2xvciApLm11bHRpcGx5U2NhbGFyKCBtYXRlcmlhbC5zaGVlbiApO1xuXG5cdFx0XHR1bmlmb3Jtcy5zaGVlblJvdWdobmVzcy52YWx1ZSA9IG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNoZWVuQ29sb3JNYXAgKSB7XG5cblx0XHRcdFx0dW5pZm9ybXMuc2hlZW5Db2xvck1hcC52YWx1ZSA9IG1hdGVyaWFsLnNoZWVuQ29sb3JNYXA7XG5cblx0XHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLnNoZWVuQ29sb3JNYXAsIHVuaWZvcm1zLnNoZWVuQ29sb3JNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzTWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLnNoZWVuUm91Z2huZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3NNYXA7XG5cblx0XHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzTWFwLCB1bmlmb3Jtcy5zaGVlblJvdWdobmVzc01hcFRyYW5zZm9ybSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmNsZWFyY29hdCA+IDAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmNsZWFyY29hdC52YWx1ZSA9IG1hdGVyaWFsLmNsZWFyY29hdDtcblx0XHRcdHVuaWZvcm1zLmNsZWFyY29hdFJvdWdobmVzcy52YWx1ZSA9IG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcztcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5jbGVhcmNvYXRNYXAgKSB7XG5cblx0XHRcdFx0dW5pZm9ybXMuY2xlYXJjb2F0TWFwLnZhbHVlID0gbWF0ZXJpYWwuY2xlYXJjb2F0TWFwO1xuXG5cdFx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5jbGVhcmNvYXRNYXAsIHVuaWZvcm1zLmNsZWFyY29hdE1hcFRyYW5zZm9ybSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzTWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLmNsZWFyY29hdFJvdWdobmVzc01hcC52YWx1ZSA9IG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzc01hcDtcblxuXHRcdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzTWFwLCB1bmlmb3Jtcy5jbGVhcmNvYXRSb3VnaG5lc3NNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcCApIHtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jbGVhcmNvYXROb3JtYWxNYXAudmFsdWUgPSBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxNYXA7XG5cblx0XHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcCwgdW5pZm9ybXMuY2xlYXJjb2F0Tm9ybWFsTWFwVHJhbnNmb3JtICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuY2xlYXJjb2F0Tm9ybWFsU2NhbGUudmFsdWUuY29weSggbWF0ZXJpYWwuY2xlYXJjb2F0Tm9ybWFsU2NhbGUgKTtcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkge1xuXG5cdFx0XHRcdFx0dW5pZm9ybXMuY2xlYXJjb2F0Tm9ybWFsU2NhbGUudmFsdWUubmVnYXRlKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRpc3BlcnNpb24gPiAwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXNwZXJzaW9uLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGVyc2lvbjtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuaXJpZGVzY2VuY2UgPiAwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5pcmlkZXNjZW5jZS52YWx1ZSA9IG1hdGVyaWFsLmlyaWRlc2NlbmNlO1xuXHRcdFx0dW5pZm9ybXMuaXJpZGVzY2VuY2VJT1IudmFsdWUgPSBtYXRlcmlhbC5pcmlkZXNjZW5jZUlPUjtcblx0XHRcdHVuaWZvcm1zLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWluaW11bS52YWx1ZSA9IG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzUmFuZ2VbIDAgXTtcblx0XHRcdHVuaWZvcm1zLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWF4aW11bS52YWx1ZSA9IG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzUmFuZ2VbIDEgXTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5pcmlkZXNjZW5jZU1hcCApIHtcblxuXHRcdFx0XHR1bmlmb3Jtcy5pcmlkZXNjZW5jZU1hcC52YWx1ZSA9IG1hdGVyaWFsLmlyaWRlc2NlbmNlTWFwO1xuXG5cdFx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5pcmlkZXNjZW5jZU1hcCwgdW5pZm9ybXMuaXJpZGVzY2VuY2VNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3NNYXA7XG5cblx0XHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwLCB1bmlmb3Jtcy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcFRyYW5zZm9ybSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLnRyYW5zbWlzc2lvbiA+IDAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLnRyYW5zbWlzc2lvbi52YWx1ZSA9IG1hdGVyaWFsLnRyYW5zbWlzc2lvbjtcblx0XHRcdHVuaWZvcm1zLnRyYW5zbWlzc2lvblNhbXBsZXJNYXAudmFsdWUgPSB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQudGV4dHVyZTtcblx0XHRcdHVuaWZvcm1zLnRyYW5zbWlzc2lvblNhbXBsZXJTaXplLnZhbHVlLnNldCggdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0LndpZHRoLCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLnRyYW5zbWlzc2lvbk1hcC52YWx1ZSA9IG1hdGVyaWFsLnRyYW5zbWlzc2lvbk1hcDtcblxuXHRcdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwLCB1bmlmb3Jtcy50cmFuc21pc3Npb25NYXBUcmFuc2Zvcm0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3Jtcy50aGlja25lc3MudmFsdWUgPSBtYXRlcmlhbC50aGlja25lc3M7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwudGhpY2tuZXNzTWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLnRoaWNrbmVzc01hcC52YWx1ZSA9IG1hdGVyaWFsLnRoaWNrbmVzc01hcDtcblxuXHRcdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwudGhpY2tuZXNzTWFwLCB1bmlmb3Jtcy50aGlja25lc3NNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3Jtcy5hdHRlbnVhdGlvbkRpc3RhbmNlLnZhbHVlID0gbWF0ZXJpYWwuYXR0ZW51YXRpb25EaXN0YW5jZTtcblx0XHRcdHVuaWZvcm1zLmF0dGVudWF0aW9uQ29sb3IudmFsdWUuY29weSggbWF0ZXJpYWwuYXR0ZW51YXRpb25Db2xvciApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5hbmlzb3Ryb3B5ID4gMCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYW5pc290cm9weVZlY3Rvci52YWx1ZS5zZXQoIG1hdGVyaWFsLmFuaXNvdHJvcHkgKiBNYXRoLmNvcyggbWF0ZXJpYWwuYW5pc290cm9weVJvdGF0aW9uICksIG1hdGVyaWFsLmFuaXNvdHJvcHkgKiBNYXRoLnNpbiggbWF0ZXJpYWwuYW5pc290cm9weVJvdGF0aW9uICkgKTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5hbmlzb3Ryb3B5TWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLmFuaXNvdHJvcHlNYXAudmFsdWUgPSBtYXRlcmlhbC5hbmlzb3Ryb3B5TWFwO1xuXG5cdFx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5hbmlzb3Ryb3B5TWFwLCB1bmlmb3Jtcy5hbmlzb3Ryb3B5TWFwVHJhbnNmb3JtICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHVuaWZvcm1zLnNwZWN1bGFySW50ZW5zaXR5LnZhbHVlID0gbWF0ZXJpYWwuc3BlY3VsYXJJbnRlbnNpdHk7XG5cdFx0dW5pZm9ybXMuc3BlY3VsYXJDb2xvci52YWx1ZS5jb3B5KCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yICk7XG5cblx0XHRpZiAoIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3JNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLnNwZWN1bGFyQ29sb3JNYXAudmFsdWUgPSBtYXRlcmlhbC5zcGVjdWxhckNvbG9yTWFwO1xuXG5cdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuc3BlY3VsYXJDb2xvck1hcCwgdW5pZm9ybXMuc3BlY3VsYXJDb2xvck1hcFRyYW5zZm9ybSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5zcGVjdWxhckludGVuc2l0eU1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuc3BlY3VsYXJJbnRlbnNpdHlNYXAudmFsdWUgPSBtYXRlcmlhbC5zcGVjdWxhckludGVuc2l0eU1hcDtcblxuXHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLnNwZWN1bGFySW50ZW5zaXR5TWFwLCB1bmlmb3Jtcy5zcGVjdWxhckludGVuc2l0eU1hcFRyYW5zZm9ybSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNNYXRjYXAoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdGlmICggbWF0ZXJpYWwubWF0Y2FwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5tYXRjYXAudmFsdWUgPSBtYXRlcmlhbC5tYXRjYXA7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0Rpc3RhbmNlKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHRjb25zdCBsaWdodCA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApLmxpZ2h0O1xuXG5cdFx0dW5pZm9ybXMucmVmZXJlbmNlUG9zaXRpb24udmFsdWUuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdHVuaWZvcm1zLm5lYXJEaXN0YW5jZS52YWx1ZSA9IGxpZ2h0LnNoYWRvdy5jYW1lcmEubmVhcjtcblx0XHR1bmlmb3Jtcy5mYXJEaXN0YW5jZS52YWx1ZSA9IGxpZ2h0LnNoYWRvdy5jYW1lcmEuZmFyO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHJlZnJlc2hGb2dVbmlmb3JtczogcmVmcmVzaEZvZ1VuaWZvcm1zLFxuXHRcdHJlZnJlc2hNYXRlcmlhbFVuaWZvcm1zOiByZWZyZXNoTWF0ZXJpYWxVbmlmb3Jtc1xuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMVW5pZm9ybXNHcm91cHMoIGdsLCBpbmZvLCBjYXBhYmlsaXRpZXMsIHN0YXRlICkge1xuXG5cdGxldCBidWZmZXJzID0ge307XG5cdGxldCB1cGRhdGVMaXN0ID0ge307XG5cdGxldCBhbGxvY2F0ZWRCaW5kaW5nUG9pbnRzID0gW107XG5cblx0Y29uc3QgbWF4QmluZGluZ1BvaW50cyA9IGdsLmdldFBhcmFtZXRlciggZ2wuTUFYX1VOSUZPUk1fQlVGRkVSX0JJTkRJTkdTICk7IC8vIGJpbmRpbmcgcG9pbnRzIGFyZSBnbG9iYWwgd2hlcmVhcyBibG9jayBpbmRpY2VzIGFyZSBwZXIgc2hhZGVyIHByb2dyYW1cblxuXHRmdW5jdGlvbiBiaW5kKCB1bmlmb3Jtc0dyb3VwLCBwcm9ncmFtICkge1xuXG5cdFx0Y29uc3Qgd2ViZ2xQcm9ncmFtID0gcHJvZ3JhbS5wcm9ncmFtO1xuXHRcdHN0YXRlLnVuaWZvcm1CbG9ja0JpbmRpbmcoIHVuaWZvcm1zR3JvdXAsIHdlYmdsUHJvZ3JhbSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGUoIHVuaWZvcm1zR3JvdXAsIHByb2dyYW0gKSB7XG5cblx0XHRsZXQgYnVmZmVyID0gYnVmZmVyc1sgdW5pZm9ybXNHcm91cC5pZCBdO1xuXG5cdFx0aWYgKCBidWZmZXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cHJlcGFyZVVuaWZvcm1zR3JvdXAoIHVuaWZvcm1zR3JvdXAgKTtcblxuXHRcdFx0YnVmZmVyID0gY3JlYXRlQnVmZmVyKCB1bmlmb3Jtc0dyb3VwICk7XG5cdFx0XHRidWZmZXJzWyB1bmlmb3Jtc0dyb3VwLmlkIF0gPSBidWZmZXI7XG5cblx0XHRcdHVuaWZvcm1zR3JvdXAuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblVuaWZvcm1zR3JvdXBzRGlzcG9zZSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZW5zdXJlIHRvIHVwZGF0ZSB0aGUgYmluZGluZyBwb2ludHMvYmxvY2sgaW5kaWNlcyBtYXBwaW5nIGZvciB0aGlzIHByb2dyYW1cblxuXHRcdGNvbnN0IHdlYmdsUHJvZ3JhbSA9IHByb2dyYW0ucHJvZ3JhbTtcblx0XHRzdGF0ZS51cGRhdGVVQk9NYXBwaW5nKCB1bmlmb3Jtc0dyb3VwLCB3ZWJnbFByb2dyYW0gKTtcblxuXHRcdC8vIHVwZGF0ZSBVQk8gb25jZSBwZXIgZnJhbWVcblxuXHRcdGNvbnN0IGZyYW1lID0gaW5mby5yZW5kZXIuZnJhbWU7XG5cblx0XHRpZiAoIHVwZGF0ZUxpc3RbIHVuaWZvcm1zR3JvdXAuaWQgXSAhPT0gZnJhbWUgKSB7XG5cblx0XHRcdHVwZGF0ZUJ1ZmZlckRhdGEoIHVuaWZvcm1zR3JvdXAgKTtcblxuXHRcdFx0dXBkYXRlTGlzdFsgdW5pZm9ybXNHcm91cC5pZCBdID0gZnJhbWU7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciggdW5pZm9ybXNHcm91cCApIHtcblxuXHRcdC8vIHRoZSBzZXR1cCBvZiBhbiBVQk8gaXMgaW5kZXBlbmRlbnQgb2YgYSBwYXJ0aWN1bGFyIHNoYWRlciBwcm9ncmFtIGJ1dCBnbG9iYWxcblxuXHRcdGNvbnN0IGJpbmRpbmdQb2ludEluZGV4ID0gYWxsb2NhdGVCaW5kaW5nUG9pbnRJbmRleCgpO1xuXHRcdHVuaWZvcm1zR3JvdXAuX19iaW5kaW5nUG9pbnRJbmRleCA9IGJpbmRpbmdQb2ludEluZGV4O1xuXG5cdFx0Y29uc3QgYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdFx0Y29uc3Qgc2l6ZSA9IHVuaWZvcm1zR3JvdXAuX19zaXplO1xuXHRcdGNvbnN0IHVzYWdlID0gdW5pZm9ybXNHcm91cC51c2FnZTtcblxuXHRcdGdsLmJpbmRCdWZmZXIoIGdsLlVOSUZPUk1fQlVGRkVSLCBidWZmZXIgKTtcblx0XHRnbC5idWZmZXJEYXRhKCBnbC5VTklGT1JNX0JVRkZFUiwgc2l6ZSwgdXNhZ2UgKTtcblx0XHRnbC5iaW5kQnVmZmVyKCBnbC5VTklGT1JNX0JVRkZFUiwgbnVsbCApO1xuXHRcdGdsLmJpbmRCdWZmZXJCYXNlKCBnbC5VTklGT1JNX0JVRkZFUiwgYmluZGluZ1BvaW50SW5kZXgsIGJ1ZmZlciApO1xuXG5cdFx0cmV0dXJuIGJ1ZmZlcjtcblxuXHR9XG5cblx0ZnVuY3Rpb24gYWxsb2NhdGVCaW5kaW5nUG9pbnRJbmRleCgpIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG1heEJpbmRpbmdQb2ludHM7IGkgKysgKSB7XG5cblx0XHRcdGlmICggYWxsb2NhdGVkQmluZGluZ1BvaW50cy5pbmRleE9mKCBpICkgPT09IC0xICkge1xuXG5cdFx0XHRcdGFsbG9jYXRlZEJpbmRpbmdQb2ludHMucHVzaCggaSApO1xuXHRcdFx0XHRyZXR1cm4gaTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IE1heGltdW0gbnVtYmVyIG9mIHNpbXVsdGFuZW91c2x5IHVzYWJsZSB1bmlmb3JtcyBncm91cHMgcmVhY2hlZC4nICk7XG5cblx0XHRyZXR1cm4gMDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlQnVmZmVyRGF0YSggdW5pZm9ybXNHcm91cCApIHtcblxuXHRcdGNvbnN0IGJ1ZmZlciA9IGJ1ZmZlcnNbIHVuaWZvcm1zR3JvdXAuaWQgXTtcblx0XHRjb25zdCB1bmlmb3JtcyA9IHVuaWZvcm1zR3JvdXAudW5pZm9ybXM7XG5cdFx0Y29uc3QgY2FjaGUgPSB1bmlmb3Jtc0dyb3VwLl9fY2FjaGU7XG5cblx0XHRnbC5iaW5kQnVmZmVyKCBnbC5VTklGT1JNX0JVRkZFUiwgYnVmZmVyICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdW5pZm9ybXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHVuaWZvcm1BcnJheSA9IEFycmF5LmlzQXJyYXkoIHVuaWZvcm1zWyBpIF0gKSA/IHVuaWZvcm1zWyBpIF0gOiBbIHVuaWZvcm1zWyBpIF0gXTtcblxuXHRcdFx0Zm9yICggbGV0IGogPSAwLCBqbCA9IHVuaWZvcm1BcnJheS5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRjb25zdCB1bmlmb3JtID0gdW5pZm9ybUFycmF5WyBqIF07XG5cblx0XHRcdFx0aWYgKCBoYXNVbmlmb3JtQ2hhbmdlZCggdW5pZm9ybSwgaSwgaiwgY2FjaGUgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdGNvbnN0IG9mZnNldCA9IHVuaWZvcm0uX19vZmZzZXQ7XG5cblx0XHRcdFx0XHRjb25zdCB2YWx1ZXMgPSBBcnJheS5pc0FycmF5KCB1bmlmb3JtLnZhbHVlICkgPyB1bmlmb3JtLnZhbHVlIDogWyB1bmlmb3JtLnZhbHVlIF07XG5cblx0XHRcdFx0XHRsZXQgYXJyYXlPZmZzZXQgPSAwO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGsgPSAwOyBrIDwgdmFsdWVzLmxlbmd0aDsgayArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgdmFsdWUgPSB2YWx1ZXNbIGsgXTtcblxuXHRcdFx0XHRcdFx0Y29uc3QgaW5mbyA9IGdldFVuaWZvcm1TaXplKCB2YWx1ZSApO1xuXG5cdFx0XHRcdFx0XHQvLyBUT0RPIGFkZCBpbnRlZ2VyIGFuZCBzdHJ1Y3Qgc3VwcG9ydFxuXHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nICkge1xuXG5cdFx0XHRcdFx0XHRcdHVuaWZvcm0uX19kYXRhWyAwIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHRcdFx0Z2wuYnVmZmVyU3ViRGF0YSggZ2wuVU5JRk9STV9CVUZGRVIsIG9mZnNldCArIGFycmF5T2Zmc2V0LCB1bmlmb3JtLl9fZGF0YSApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZS5pc01hdHJpeDMgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gbWFudWFsbHkgY29udmVydGluZyAzeDMgdG8gM3g0XG5cblx0XHRcdFx0XHRcdFx0dW5pZm9ybS5fX2RhdGFbIDAgXSA9IHZhbHVlLmVsZW1lbnRzWyAwIF07XG5cdFx0XHRcdFx0XHRcdHVuaWZvcm0uX19kYXRhWyAxIF0gPSB2YWx1ZS5lbGVtZW50c1sgMSBdO1xuXHRcdFx0XHRcdFx0XHR1bmlmb3JtLl9fZGF0YVsgMiBdID0gdmFsdWUuZWxlbWVudHNbIDIgXTtcblx0XHRcdFx0XHRcdFx0dW5pZm9ybS5fX2RhdGFbIDMgXSA9IDA7XG5cdFx0XHRcdFx0XHRcdHVuaWZvcm0uX19kYXRhWyA0IF0gPSB2YWx1ZS5lbGVtZW50c1sgMyBdO1xuXHRcdFx0XHRcdFx0XHR1bmlmb3JtLl9fZGF0YVsgNSBdID0gdmFsdWUuZWxlbWVudHNbIDQgXTtcblx0XHRcdFx0XHRcdFx0dW5pZm9ybS5fX2RhdGFbIDYgXSA9IHZhbHVlLmVsZW1lbnRzWyA1IF07XG5cdFx0XHRcdFx0XHRcdHVuaWZvcm0uX19kYXRhWyA3IF0gPSAwO1xuXHRcdFx0XHRcdFx0XHR1bmlmb3JtLl9fZGF0YVsgOCBdID0gdmFsdWUuZWxlbWVudHNbIDYgXTtcblx0XHRcdFx0XHRcdFx0dW5pZm9ybS5fX2RhdGFbIDkgXSA9IHZhbHVlLmVsZW1lbnRzWyA3IF07XG5cdFx0XHRcdFx0XHRcdHVuaWZvcm0uX19kYXRhWyAxMCBdID0gdmFsdWUuZWxlbWVudHNbIDggXTtcblx0XHRcdFx0XHRcdFx0dW5pZm9ybS5fX2RhdGFbIDExIF0gPSAwO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHZhbHVlLnRvQXJyYXkoIHVuaWZvcm0uX19kYXRhLCBhcnJheU9mZnNldCApO1xuXG5cdFx0XHRcdFx0XHRcdGFycmF5T2Zmc2V0ICs9IGluZm8uc3RvcmFnZSAvIEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVDtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Z2wuYnVmZmVyU3ViRGF0YSggZ2wuVU5JRk9STV9CVUZGRVIsIG9mZnNldCwgdW5pZm9ybS5fX2RhdGEgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGdsLmJpbmRCdWZmZXIoIGdsLlVOSUZPUk1fQlVGRkVSLCBudWxsICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhc1VuaWZvcm1DaGFuZ2VkKCB1bmlmb3JtLCBpbmRleCwgaW5kZXhBcnJheSwgY2FjaGUgKSB7XG5cblx0XHRjb25zdCB2YWx1ZSA9IHVuaWZvcm0udmFsdWU7XG5cdFx0Y29uc3QgaW5kZXhTdHJpbmcgPSBpbmRleCArICdfJyArIGluZGV4QXJyYXk7XG5cblx0XHRpZiAoIGNhY2hlWyBpbmRleFN0cmluZyBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIGNhY2hlIGVudHJ5IGRvZXMgbm90IGV4aXN0IHNvIGZhclxuXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgKSB7XG5cblx0XHRcdFx0Y2FjaGVbIGluZGV4U3RyaW5nIF0gPSB2YWx1ZTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjYWNoZVsgaW5kZXhTdHJpbmcgXSA9IHZhbHVlLmNsb25lKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBjYWNoZWRPYmplY3QgPSBjYWNoZVsgaW5kZXhTdHJpbmcgXTtcblxuXHRcdFx0Ly8gY29tcGFyZSBjdXJyZW50IHZhbHVlIHdpdGggY2FjaGVkIGVudHJ5XG5cblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyApIHtcblxuXHRcdFx0XHRpZiAoIGNhY2hlZE9iamVjdCAhPT0gdmFsdWUgKSB7XG5cblx0XHRcdFx0XHRjYWNoZVsgaW5kZXhTdHJpbmcgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoIGNhY2hlZE9iamVjdC5lcXVhbHMoIHZhbHVlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0Y2FjaGVkT2JqZWN0LmNvcHkoIHZhbHVlICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHByZXBhcmVVbmlmb3Jtc0dyb3VwKCB1bmlmb3Jtc0dyb3VwICkge1xuXG5cdFx0Ly8gZGV0ZXJtaW5lIHRvdGFsIGJ1ZmZlciBzaXplIGFjY29yZGluZyB0byB0aGUgU1REMTQwIGxheW91dFxuXHRcdC8vIEhpbnQ6IFNURDE0MCBpcyB0aGUgb25seSBzdXBwb3J0ZWQgbGF5b3V0IGluIFdlYkdMIDJcblxuXHRcdGNvbnN0IHVuaWZvcm1zID0gdW5pZm9ybXNHcm91cC51bmlmb3JtcztcblxuXHRcdGxldCBvZmZzZXQgPSAwOyAvLyBnbG9iYWwgYnVmZmVyIG9mZnNldCBpbiBieXRlc1xuXHRcdGNvbnN0IGNodW5rU2l6ZSA9IDE2OyAvLyBzaXplIG9mIGEgY2h1bmsgaW4gYnl0ZXNcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHVuaWZvcm1zLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHVuaWZvcm1BcnJheSA9IEFycmF5LmlzQXJyYXkoIHVuaWZvcm1zWyBpIF0gKSA/IHVuaWZvcm1zWyBpIF0gOiBbIHVuaWZvcm1zWyBpIF0gXTtcblxuXHRcdFx0Zm9yICggbGV0IGogPSAwLCBqbCA9IHVuaWZvcm1BcnJheS5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRjb25zdCB1bmlmb3JtID0gdW5pZm9ybUFycmF5WyBqIF07XG5cblx0XHRcdFx0Y29uc3QgdmFsdWVzID0gQXJyYXkuaXNBcnJheSggdW5pZm9ybS52YWx1ZSApID8gdW5pZm9ybS52YWx1ZSA6IFsgdW5pZm9ybS52YWx1ZSBdO1xuXG5cdFx0XHRcdGZvciAoIGxldCBrID0gMCwga2wgPSB2YWx1ZXMubGVuZ3RoOyBrIDwga2w7IGsgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCB2YWx1ZSA9IHZhbHVlc1sgayBdO1xuXG5cdFx0XHRcdFx0Y29uc3QgaW5mbyA9IGdldFVuaWZvcm1TaXplKCB2YWx1ZSApO1xuXG5cdFx0XHRcdFx0Y29uc3QgY2h1bmtPZmZzZXQgPSBvZmZzZXQgJSBjaHVua1NpemU7IC8vIG9mZnNldCBpbiB0aGUgY3VycmVudCBjaHVua1xuXHRcdFx0XHRcdGNvbnN0IGNodW5rUGFkZGluZyA9IGNodW5rT2Zmc2V0ICUgaW5mby5ib3VuZGFyeTsgLy8gcmVxdWlyZWQgcGFkZGluZyB0byBtYXRjaCBib3VuZGFyeVxuXHRcdFx0XHRcdGNvbnN0IGNodW5rU3RhcnQgPSBjaHVua09mZnNldCArIGNodW5rUGFkZGluZzsgLy8gdGhlIHN0YXJ0IHBvc2l0aW9uIGluIHRoZSBjdXJyZW50IGNodW5rIGZvciB0aGUgZGF0YVxuXG5cdFx0XHRcdFx0b2Zmc2V0ICs9IGNodW5rUGFkZGluZztcblxuXHRcdFx0XHRcdC8vIENoZWNrIGZvciBjaHVuayBvdmVyZmxvd1xuXHRcdFx0XHRcdGlmICggY2h1bmtTdGFydCAhPT0gMCAmJiAoIGNodW5rU2l6ZSAtIGNodW5rU3RhcnQgKSA8IGluZm8uc3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQWRkIHBhZGRpbmcgYW5kIGFkanVzdCBvZmZzZXRcblx0XHRcdFx0XHRcdG9mZnNldCArPSAoIGNodW5rU2l6ZSAtIGNodW5rU3RhcnQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIHRoZSBmb2xsb3dpbmcgdHdvIHByb3BlcnRpZXMgd2lsbCBiZSB1c2VkIGZvciBwYXJ0aWFsIGJ1ZmZlciB1cGRhdGVzXG5cdFx0XHRcdFx0dW5pZm9ybS5fX2RhdGEgPSBuZXcgRmxvYXQzMkFycmF5KCBpbmZvLnN0b3JhZ2UgLyBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQgKTtcblx0XHRcdFx0XHR1bmlmb3JtLl9fb2Zmc2V0ID0gb2Zmc2V0O1xuXG5cdFx0XHRcdFx0Ly8gVXBkYXRlIHRoZSBnbG9iYWwgb2Zmc2V0XG5cdFx0XHRcdFx0b2Zmc2V0ICs9IGluZm8uc3RvcmFnZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGVuc3VyZSBjb3JyZWN0IGZpbmFsIHBhZGRpbmdcblxuXHRcdGNvbnN0IGNodW5rT2Zmc2V0ID0gb2Zmc2V0ICUgY2h1bmtTaXplO1xuXG5cdFx0aWYgKCBjaHVua09mZnNldCA+IDAgKSBvZmZzZXQgKz0gKCBjaHVua1NpemUgLSBjaHVua09mZnNldCApO1xuXG5cdFx0Ly9cblxuXHRcdHVuaWZvcm1zR3JvdXAuX19zaXplID0gb2Zmc2V0O1xuXHRcdHVuaWZvcm1zR3JvdXAuX19jYWNoZSA9IHt9O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldFVuaWZvcm1TaXplKCB2YWx1ZSApIHtcblxuXHRcdGNvbnN0IGluZm8gPSB7XG5cdFx0XHRib3VuZGFyeTogMCwgLy8gYnl0ZXNcblx0XHRcdHN0b3JhZ2U6IDAgLy8gYnl0ZXNcblx0XHR9O1xuXG5cdFx0Ly8gZGV0ZXJtaW5lIHNpemVzIGFjY29yZGluZyB0byBTVEQxNDBcblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyApIHtcblxuXHRcdFx0Ly8gZmxvYXQvaW50L2Jvb2xcblxuXHRcdFx0aW5mby5ib3VuZGFyeSA9IDQ7XG5cdFx0XHRpbmZvLnN0b3JhZ2UgPSA0O1xuXG5cdFx0fSBlbHNlIGlmICggdmFsdWUuaXNWZWN0b3IyICkge1xuXG5cdFx0XHQvLyB2ZWMyXG5cblx0XHRcdGluZm8uYm91bmRhcnkgPSA4O1xuXHRcdFx0aW5mby5zdG9yYWdlID0gODtcblxuXHRcdH0gZWxzZSBpZiAoIHZhbHVlLmlzVmVjdG9yMyB8fCB2YWx1ZS5pc0NvbG9yICkge1xuXG5cdFx0XHQvLyB2ZWMzXG5cblx0XHRcdGluZm8uYm91bmRhcnkgPSAxNjtcblx0XHRcdGluZm8uc3RvcmFnZSA9IDEyOyAvLyBldmlsOiB2ZWMzIG11c3Qgc3RhcnQgb24gYSAxNi1ieXRlIGJvdW5kYXJ5IGJ1dCBpdCBvbmx5IGNvbnN1bWVzIDEyIGJ5dGVzXG5cblx0XHR9IGVsc2UgaWYgKCB2YWx1ZS5pc1ZlY3RvcjQgKSB7XG5cblx0XHRcdC8vIHZlYzRcblxuXHRcdFx0aW5mby5ib3VuZGFyeSA9IDE2O1xuXHRcdFx0aW5mby5zdG9yYWdlID0gMTY7XG5cblx0XHR9IGVsc2UgaWYgKCB2YWx1ZS5pc01hdHJpeDMgKSB7XG5cblx0XHRcdC8vIG1hdDMgKGluIFNURDE0MCBhIDN4MyBtYXRyaXggaXMgcmVwcmVzZW50ZWQgYXMgM3g0KVxuXG5cdFx0XHRpbmZvLmJvdW5kYXJ5ID0gNDg7XG5cdFx0XHRpbmZvLnN0b3JhZ2UgPSA0ODtcblxuXHRcdH0gZWxzZSBpZiAoIHZhbHVlLmlzTWF0cml4NCApIHtcblxuXHRcdFx0Ly8gbWF0NFxuXG5cdFx0XHRpbmZvLmJvdW5kYXJ5ID0gNjQ7XG5cdFx0XHRpbmZvLnN0b3JhZ2UgPSA2NDtcblxuXHRcdH0gZWxzZSBpZiAoIHZhbHVlLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVGV4dHVyZSBzYW1wbGVycyBjYW4gbm90IGJlIHBhcnQgb2YgYW4gdW5pZm9ybXMgZ3JvdXAuJyApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVW5zdXBwb3J0ZWQgdW5pZm9ybSB2YWx1ZSB0eXBlLicsIHZhbHVlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaW5mbztcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25Vbmlmb3Jtc0dyb3Vwc0Rpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgdW5pZm9ybXNHcm91cCA9IGV2ZW50LnRhcmdldDtcblxuXHRcdHVuaWZvcm1zR3JvdXAucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblVuaWZvcm1zR3JvdXBzRGlzcG9zZSApO1xuXG5cdFx0Y29uc3QgaW5kZXggPSBhbGxvY2F0ZWRCaW5kaW5nUG9pbnRzLmluZGV4T2YoIHVuaWZvcm1zR3JvdXAuX19iaW5kaW5nUG9pbnRJbmRleCApO1xuXHRcdGFsbG9jYXRlZEJpbmRpbmdQb2ludHMuc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0Z2wuZGVsZXRlQnVmZmVyKCBidWZmZXJzWyB1bmlmb3Jtc0dyb3VwLmlkIF0gKTtcblxuXHRcdGRlbGV0ZSBidWZmZXJzWyB1bmlmb3Jtc0dyb3VwLmlkIF07XG5cdFx0ZGVsZXRlIHVwZGF0ZUxpc3RbIHVuaWZvcm1zR3JvdXAuaWQgXTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdGZvciAoIGNvbnN0IGlkIGluIGJ1ZmZlcnMgKSB7XG5cblx0XHRcdGdsLmRlbGV0ZUJ1ZmZlciggYnVmZmVyc1sgaWQgXSApO1xuXG5cdFx0fVxuXG5cdFx0YWxsb2NhdGVkQmluZGluZ1BvaW50cyA9IFtdO1xuXHRcdGJ1ZmZlcnMgPSB7fTtcblx0XHR1cGRhdGVMaXN0ID0ge307XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRiaW5kOiBiaW5kLFxuXHRcdHVwZGF0ZTogdXBkYXRlLFxuXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXG5cdH07XG5cbn1cblxuLyoqXG4gKiBUaGlzIHJlbmRlcmVyIHVzZXMgV2ViR0wgMiB0byBkaXNwbGF5IHNjZW5lcy5cbiAqXG4gKiBXZWJHTCAxIGlzIG5vdCBzdXBwb3J0ZWQgc2luY2UgYHIxNjNgLlxuICovXG5jbGFzcyBXZWJHTFJlbmRlcmVyIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBXZWJHTCByZW5kZXJlci5cblx0ICpcblx0ICogQHBhcmFtIHtXZWJHTFJlbmRlcmVyfk9wdGlvbnN9IFtwYXJhbWV0ZXJzXSAtIFRoZSBjb25maWd1cmF0aW9uIHBhcmFtZXRlci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzID0ge30gKSB7XG5cblx0XHRjb25zdCB7XG5cdFx0XHRjYW52YXMgPSBjcmVhdGVDYW52YXNFbGVtZW50KCksXG5cdFx0XHRjb250ZXh0ID0gbnVsbCxcblx0XHRcdGRlcHRoID0gdHJ1ZSxcblx0XHRcdHN0ZW5jaWwgPSBmYWxzZSxcblx0XHRcdGFscGhhID0gZmFsc2UsXG5cdFx0XHRhbnRpYWxpYXMgPSBmYWxzZSxcblx0XHRcdHByZW11bHRpcGxpZWRBbHBoYSA9IHRydWUsXG5cdFx0XHRwcmVzZXJ2ZURyYXdpbmdCdWZmZXIgPSBmYWxzZSxcblx0XHRcdHBvd2VyUHJlZmVyZW5jZSA9ICdkZWZhdWx0Jyxcblx0XHRcdGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQgPSBmYWxzZSxcblx0XHRcdHJldmVyc2VkRGVwdGhCdWZmZXIgPSBmYWxzZSxcblx0XHR9ID0gcGFyYW1ldGVycztcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNXZWJHTFJlbmRlcmVyID0gdHJ1ZTtcblxuXHRcdGxldCBfYWxwaGE7XG5cblx0XHRpZiAoIGNvbnRleHQgIT09IG51bGwgKSB7XG5cblx0XHRcdGlmICggdHlwZW9mIFdlYkdMUmVuZGVyaW5nQ29udGV4dCAhPT0gJ3VuZGVmaW5lZCcgJiYgY29udGV4dCBpbnN0YW5jZW9mIFdlYkdMUmVuZGVyaW5nQ29udGV4dCApIHtcblxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBXZWJHTCAxIGlzIG5vdCBzdXBwb3J0ZWQgc2luY2UgcjE2My4nICk7XG5cblx0XHRcdH1cblxuXHRcdFx0X2FscGhhID0gY29udGV4dC5nZXRDb250ZXh0QXR0cmlidXRlcygpLmFscGhhO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X2FscGhhID0gYWxwaGE7XG5cblx0XHR9XG5cblx0XHRjb25zdCB1aW50Q2xlYXJDb2xvciA9IG5ldyBVaW50MzJBcnJheSggNCApO1xuXHRcdGNvbnN0IGludENsZWFyQ29sb3IgPSBuZXcgSW50MzJBcnJheSggNCApO1xuXG5cdFx0bGV0IGN1cnJlbnRSZW5kZXJMaXN0ID0gbnVsbDtcblx0XHRsZXQgY3VycmVudFJlbmRlclN0YXRlID0gbnVsbDtcblxuXHRcdC8vIHJlbmRlcigpIGNhbiBiZSBjYWxsZWQgZnJvbSB3aXRoaW4gYSBjYWxsYmFjayB0cmlnZ2VyZWQgYnkgYW5vdGhlciByZW5kZXIuXG5cdFx0Ly8gV2UgdHJhY2sgdGhpcyBzbyB0aGF0IHRoZSBuZXN0ZWQgcmVuZGVyIGNhbGwgZ2V0cyBpdHMgbGlzdCBhbmQgc3RhdGUgaXNvbGF0ZWQgZnJvbSB0aGUgcGFyZW50IHJlbmRlciBjYWxsLlxuXG5cdFx0Y29uc3QgcmVuZGVyTGlzdFN0YWNrID0gW107XG5cdFx0Y29uc3QgcmVuZGVyU3RhdGVTdGFjayA9IFtdO1xuXG5cdFx0Ly8gcHVibGljIHByb3BlcnRpZXNcblxuXHRcdC8qKlxuXHRcdCAqIEEgY2FudmFzIHdoZXJlIHRoZSByZW5kZXJlciBkcmF3cyBpdHMgb3V0cHV0LlRoaXMgaXMgYXV0b21hdGljYWxseSBjcmVhdGVkIGJ5IHRoZSByZW5kZXJlclxuXHRcdCAqIGluIHRoZSBjb25zdHJ1Y3RvciAoaWYgbm90IHByb3ZpZGVkIGFscmVhZHkpOyB5b3UganVzdCBuZWVkIHRvIGFkZCBpdCB0byB5b3VyIHBhZ2UgbGlrZSBzbzpcblx0XHQgKiBgYGBqc1xuXHRcdCAqIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoIHJlbmRlcmVyLmRvbUVsZW1lbnQgKTtcblx0XHQgKiBgYGBcblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtET01FbGVtZW50fVxuXHRcdCAqL1xuXHRcdHRoaXMuZG9tRWxlbWVudCA9IGNhbnZhcztcblxuXHRcdC8qKlxuXHRcdCAqIEEgb2JqZWN0IHdpdGggZGVidWcgY29uZmlndXJhdGlvbiBzZXR0aW5ncy5cblx0XHQgKlxuXHRcdCAqIC0gYGNoZWNrU2hhZGVyRXJyb3JzYDogSWYgaXQgaXMgYHRydWVgLCBkZWZpbmVzIHdoZXRoZXIgbWF0ZXJpYWwgc2hhZGVyIHByb2dyYW1zIGFyZVxuXHRcdCAqIGNoZWNrZWQgZm9yIGVycm9ycyBkdXJpbmcgY29tcGlsYXRpb24gYW5kIGxpbmthZ2UgcHJvY2Vzcy4gSXQgbWF5IGJlIHVzZWZ1bCB0byBkaXNhYmxlXG5cdFx0ICogdGhpcyBjaGVjayBpbiBwcm9kdWN0aW9uIGZvciBwZXJmb3JtYW5jZSBnYWluLiBJdCBpcyBzdHJvbmdseSByZWNvbW1lbmRlZCB0byBrZWVwIHRoZXNlXG5cdFx0ICogY2hlY2tzIGVuYWJsZWQgZHVyaW5nIGRldmVsb3BtZW50LiBJZiB0aGUgc2hhZGVyIGRvZXMgbm90IGNvbXBpbGUgYW5kIGxpbmsgLSBpdCB3aWxsIG5vdFxuXHRcdCAqIHdvcmsgYW5kIGFzc29jaWF0ZWQgbWF0ZXJpYWwgd2lsbCBub3QgcmVuZGVyLlxuXHRcdCAqIC0gYG9uU2hhZGVyRXJyb3IoZ2wsIHByb2dyYW0sIGdsVmVydGV4U2hhZGVyLGdsRnJhZ21lbnRTaGFkZXIpYDogQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0XG5cdFx0ICogY2FuIGJlIHVzZWQgZm9yIGN1c3RvbSBlcnJvciByZXBvcnRpbmcuIFRoZSBjYWxsYmFjayByZWNlaXZlcyB0aGUgV2ViR0wgY29udGV4dCwgYW4gaW5zdGFuY2Vcblx0XHQgKiBvZiBXZWJHTFByb2dyYW0gYXMgd2VsbCB0d28gaW5zdGFuY2VzIG9mIFdlYkdMU2hhZGVyIHJlcHJlc2VudGluZyB0aGUgdmVydGV4IGFuZCBmcmFnbWVudCBzaGFkZXIuXG5cdFx0ICogQXNzaWduaW5nIGEgY3VzdG9tIGZ1bmN0aW9uIGRpc2FibGVzIHRoZSBkZWZhdWx0IGVycm9yIHJlcG9ydGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5kZWJ1ZyA9IHtcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBFbmFibGVzIGVycm9yIGNoZWNraW5nIGFuZCByZXBvcnRpbmcgd2hlbiBzaGFkZXIgcHJvZ3JhbXMgYXJlIGJlaW5nIGNvbXBpbGVkLlxuXHRcdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0XHQgKi9cblx0XHRcdGNoZWNrU2hhZGVyRXJyb3JzOiB0cnVlLFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBDYWxsYmFjayBmb3IgY3VzdG9tIGVycm9yIHJlcG9ydGluZy5cblx0XHRcdCAqIEB0eXBlIHs/RnVuY3Rpb259XG5cdFx0XHQgKi9cblx0XHRcdG9uU2hhZGVyRXJyb3I6IG51bGxcblx0XHR9O1xuXG5cdFx0Ly8gY2xlYXJpbmdcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIHJlbmRlcmVyIHNob3VsZCBhdXRvbWF0aWNhbGx5IGNsZWFyIGl0cyBvdXRwdXQgYmVmb3JlIHJlbmRlcmluZyBhIGZyYW1lIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmF1dG9DbGVhciA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBJZiB7QGxpbmsgV2ViR0xSZW5kZXJlciNhdXRvQ2xlYXJ9IHNldCB0byBgdHJ1ZWAsIHdoZXRoZXIgdGhlIHJlbmRlcmVyIHNob3VsZCBjbGVhclxuXHRcdCAqIHRoZSBjb2xvciBidWZmZXIgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuYXV0b0NsZWFyQ29sb3IgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogSWYge0BsaW5rIFdlYkdMUmVuZGVyZXIjYXV0b0NsZWFyfSBzZXQgdG8gYHRydWVgLCB3aGV0aGVyIHRoZSByZW5kZXJlciBzaG91bGQgY2xlYXJcblx0XHQgKiB0aGUgZGVwdGggYnVmZmVyIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmF1dG9DbGVhckRlcHRoID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIElmIHtAbGluayBXZWJHTFJlbmRlcmVyI2F1dG9DbGVhcn0gc2V0IHRvIGB0cnVlYCwgd2hldGhlciB0aGUgcmVuZGVyZXIgc2hvdWxkIGNsZWFyXG5cdFx0ICogdGhlIHN0ZW5jaWwgYnVmZmVyIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmF1dG9DbGVhclN0ZW5jaWwgPSB0cnVlO1xuXG5cdFx0Ly8gc2NlbmUgZ3JhcGhcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIHJlbmRlcmVyIHNob3VsZCBzb3J0IG9iamVjdHMgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogTm90ZTogU29ydGluZyBpcyB1c2VkIHRvIGF0dGVtcHQgdG8gcHJvcGVybHkgcmVuZGVyIG9iamVjdHMgdGhhdCBoYXZlIHNvbWVcblx0XHQgKiBkZWdyZWUgb2YgdHJhbnNwYXJlbmN5LiBCeSBkZWZpbml0aW9uLCBzb3J0aW5nIG9iamVjdHMgbWF5IG5vdCB3b3JrIGluIGFsbFxuXHRcdCAqIGNhc2VzLiBEZXBlbmRpbmcgb24gdGhlIG5lZWRzIG9mIGFwcGxpY2F0aW9uLCBpdCBtYXkgYmUgbmVjZXNzYXJ5IHRvIHR1cm5cblx0XHQgKiBvZmYgc29ydGluZyBhbmQgdXNlIG90aGVyIG1ldGhvZHMgdG8gZGVhbCB3aXRoIHRyYW5zcGFyZW5jeSByZW5kZXJpbmcgZS5nLlxuXHRcdCAqIG1hbnVhbGx5IGRldGVybWluaW5nIGVhY2ggb2JqZWN0J3MgcmVuZGVyaW5nIG9yZGVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuc29ydE9iamVjdHMgPSB0cnVlO1xuXG5cdFx0Ly8gdXNlci1kZWZpbmVkIGNsaXBwaW5nXG5cblx0XHQvKipcblx0XHQgKiBVc2VyLWRlZmluZWQgY2xpcHBpbmcgcGxhbmVzIHNwZWNpZmllZCBpbiB3b3JsZCBzcGFjZS4gVGhlc2UgcGxhbmVzIGFwcGx5IGdsb2JhbGx5LlxuXHRcdCAqIFBvaW50cyBpbiBzcGFjZSB3aG9zZSBkb3QgcHJvZHVjdCB3aXRoIHRoZSBwbGFuZSBpcyBuZWdhdGl2ZSBhcmUgY3V0IGF3YXkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8UGxhbmU+fVxuXHRcdCAqL1xuXHRcdHRoaXMuY2xpcHBpbmdQbGFuZXMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIHJlbmRlcmVyIHJlc3BlY3RzIG9iamVjdC1sZXZlbCBjbGlwcGluZyBwbGFuZXMgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmxvY2FsQ2xpcHBpbmdFbmFibGVkID0gZmFsc2U7XG5cblx0XHQvLyB0b25lIG1hcHBpbmdcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0b25lIG1hcHBpbmcgdGVjaG5pcXVlIG9mIHRoZSByZW5kZXJlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoTm9Ub25lTWFwcGluZ3xMaW5lYXJUb25lTWFwcGluZ3xSZWluaGFyZFRvbmVNYXBwaW5nfENpbmVvblRvbmVNYXBwaW5nfEFDRVNGaWxtaWNUb25lTWFwcGluZ3xDdXN0b21Ub25lTWFwcGluZ3xBZ1hUb25lTWFwcGluZ3xOZXV0cmFsVG9uZU1hcHBpbmcpfVxuXHRcdCAqIEBkZWZhdWx0IE5vVG9uZU1hcHBpbmdcblx0XHQgKi9cblx0XHR0aGlzLnRvbmVNYXBwaW5nID0gTm9Ub25lTWFwcGluZztcblxuXHRcdC8qKlxuXHRcdCAqIEV4cG9zdXJlIGxldmVsIG9mIHRvbmUgbWFwcGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMudG9uZU1hcHBpbmdFeHBvc3VyZSA9IDEuMDtcblxuXHRcdC8vIHRyYW5zbWlzc2lvblxuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5vcm1hbGl6ZWQgcmVzb2x1dGlvbiBzY2FsZSBmb3IgdGhlIHRyYW5zbWlzc2lvbiByZW5kZXIgdGFyZ2V0LCBtZWFzdXJlZCBpbiBwZXJjZW50YWdlXG5cdFx0ICogb2Ygdmlld3BvcnQgZGltZW5zaW9ucy4gTG93ZXJpbmcgdGhpcyB2YWx1ZSBjYW4gcmVzdWx0IGluIHNpZ25pZmljYW50IHBlcmZvcm1hbmNlIGltcHJvdmVtZW50c1xuXHRcdCAqIHdoZW4gdXNpbmcge0BsaW5rIE1lc2hQaHlzaWNhbE1hdGVyaWFsI3RyYW5zbWlzc2lvbn0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLnRyYW5zbWlzc2lvblJlc29sdXRpb25TY2FsZSA9IDEuMDtcblxuXHRcdC8vIGludGVybmFsIHByb3BlcnRpZXNcblxuXHRcdGNvbnN0IF90aGlzID0gdGhpcztcblxuXHRcdGxldCBfaXNDb250ZXh0TG9zdCA9IGZhbHNlO1xuXG5cdFx0Ly8gaW50ZXJuYWwgc3RhdGUgY2FjaGVcblxuXHRcdHRoaXMuX291dHB1dENvbG9yU3BhY2UgPSBTUkdCQ29sb3JTcGFjZTtcblxuXHRcdGxldCBfY3VycmVudEFjdGl2ZUN1YmVGYWNlID0gMDtcblx0XHRsZXQgX2N1cnJlbnRBY3RpdmVNaXBtYXBMZXZlbCA9IDA7XG5cdFx0bGV0IF9jdXJyZW50UmVuZGVyVGFyZ2V0ID0gbnVsbDtcblx0XHRsZXQgX2N1cnJlbnRNYXRlcmlhbElkID0gLTE7XG5cblx0XHRsZXQgX2N1cnJlbnRDYW1lcmEgPSBudWxsO1xuXG5cdFx0Y29uc3QgX2N1cnJlbnRWaWV3cG9ydCA9IG5ldyBWZWN0b3I0KCk7XG5cdFx0Y29uc3QgX2N1cnJlbnRTY2lzc29yID0gbmV3IFZlY3RvcjQoKTtcblx0XHRsZXQgX2N1cnJlbnRTY2lzc29yVGVzdCA9IG51bGw7XG5cblx0XHRjb25zdCBfY3VycmVudENsZWFyQ29sb3IgPSBuZXcgQ29sb3IoIDB4MDAwMDAwICk7XG5cdFx0bGV0IF9jdXJyZW50Q2xlYXJBbHBoYSA9IDA7XG5cblx0XHQvL1xuXG5cdFx0bGV0IF93aWR0aCA9IGNhbnZhcy53aWR0aDtcblx0XHRsZXQgX2hlaWdodCA9IGNhbnZhcy5oZWlnaHQ7XG5cblx0XHRsZXQgX3BpeGVsUmF0aW8gPSAxO1xuXHRcdGxldCBfb3BhcXVlU29ydCA9IG51bGw7XG5cdFx0bGV0IF90cmFuc3BhcmVudFNvcnQgPSBudWxsO1xuXG5cdFx0Y29uc3QgX3ZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoIDAsIDAsIF93aWR0aCwgX2hlaWdodCApO1xuXHRcdGNvbnN0IF9zY2lzc29yID0gbmV3IFZlY3RvcjQoIDAsIDAsIF93aWR0aCwgX2hlaWdodCApO1xuXHRcdGxldCBfc2Npc3NvclRlc3QgPSBmYWxzZTtcblxuXHRcdC8vIGZydXN0dW1cblxuXHRcdGNvbnN0IF9mcnVzdHVtID0gbmV3IEZydXN0dW0oKTtcblxuXHRcdC8vIGNsaXBwaW5nXG5cblx0XHRsZXQgX2NsaXBwaW5nRW5hYmxlZCA9IGZhbHNlO1xuXHRcdGxldCBfbG9jYWxDbGlwcGluZ0VuYWJsZWQgPSBmYWxzZTtcblxuXHRcdC8vIGNhbWVyYSBtYXRyaWNlcyBjYWNoZVxuXG5cdFx0Y29uc3QgX3Byb2pTY3JlZW5NYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0Y29uc3QgX3ZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Y29uc3QgX3ZlY3RvcjQgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdFx0Y29uc3QgX2VtcHR5U2NlbmUgPSB7IGJhY2tncm91bmQ6IG51bGwsIGZvZzogbnVsbCwgZW52aXJvbm1lbnQ6IG51bGwsIG92ZXJyaWRlTWF0ZXJpYWw6IG51bGwsIGlzU2NlbmU6IHRydWUgfTtcblxuXHRcdGxldCBfcmVuZGVyQmFja2dyb3VuZCA9IGZhbHNlO1xuXG5cdFx0ZnVuY3Rpb24gZ2V0VGFyZ2V0UGl4ZWxSYXRpbygpIHtcblxuXHRcdFx0cmV0dXJuIF9jdXJyZW50UmVuZGVyVGFyZ2V0ID09PSBudWxsID8gX3BpeGVsUmF0aW8gOiAxO1xuXG5cdFx0fVxuXG5cdFx0Ly8gaW5pdGlhbGl6ZVxuXG5cdFx0bGV0IF9nbCA9IGNvbnRleHQ7XG5cblx0XHRmdW5jdGlvbiBnZXRDb250ZXh0KCBjb250ZXh0TmFtZSwgY29udGV4dEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHJldHVybiBjYW52YXMuZ2V0Q29udGV4dCggY29udGV4dE5hbWUsIGNvbnRleHRBdHRyaWJ1dGVzICk7XG5cblx0XHR9XG5cblx0XHR0cnkge1xuXG5cdFx0XHRjb25zdCBjb250ZXh0QXR0cmlidXRlcyA9IHtcblx0XHRcdFx0YWxwaGE6IHRydWUsXG5cdFx0XHRcdGRlcHRoLFxuXHRcdFx0XHRzdGVuY2lsLFxuXHRcdFx0XHRhbnRpYWxpYXMsXG5cdFx0XHRcdHByZW11bHRpcGxpZWRBbHBoYSxcblx0XHRcdFx0cHJlc2VydmVEcmF3aW5nQnVmZmVyLFxuXHRcdFx0XHRwb3dlclByZWZlcmVuY2UsXG5cdFx0XHRcdGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQsXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBPZmZzY3JlZW5DYW52YXMgZG9lcyBub3QgaGF2ZSBzZXRBdHRyaWJ1dGUsIHNlZSAjMjI4MTFcblx0XHRcdGlmICggJ3NldEF0dHJpYnV0ZScgaW4gY2FudmFzICkgY2FudmFzLnNldEF0dHJpYnV0ZSggJ2RhdGEtZW5naW5lJywgYHRocmVlLmpzIHIke1JFVklTSU9OfWAgKTtcblxuXHRcdFx0Ly8gZXZlbnQgbGlzdGVuZXJzIG11c3QgYmUgcmVnaXN0ZXJlZCBiZWZvcmUgV2ViR0wgY29udGV4dCBpcyBjcmVhdGVkLCBzZWUgIzEyNzUzXG5cdFx0XHRjYW52YXMuYWRkRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dGxvc3QnLCBvbkNvbnRleHRMb3N0LCBmYWxzZSApO1xuXHRcdFx0Y2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRyZXN0b3JlZCcsIG9uQ29udGV4dFJlc3RvcmUsIGZhbHNlICk7XG5cdFx0XHRjYW52YXMuYWRkRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dGNyZWF0aW9uZXJyb3InLCBvbkNvbnRleHRDcmVhdGlvbkVycm9yLCBmYWxzZSApO1xuXG5cdFx0XHRpZiAoIF9nbCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRjb25zdCBjb250ZXh0TmFtZSA9ICd3ZWJnbDInO1xuXG5cdFx0XHRcdF9nbCA9IGdldENvbnRleHQoIGNvbnRleHROYW1lLCBjb250ZXh0QXR0cmlidXRlcyApO1xuXG5cdFx0XHRcdGlmICggX2dsID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0aWYgKCBnZXRDb250ZXh0KCBjb250ZXh0TmFtZSApICkge1xuXG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdFcnJvciBjcmVhdGluZyBXZWJHTCBjb250ZXh0IHdpdGggeW91ciBzZWxlY3RlZCBhdHRyaWJ1dGVzLicgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ0Vycm9yIGNyZWF0aW5nIFdlYkdMIGNvbnRleHQuJyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogJyArIGVycm9yLm1lc3NhZ2UgKTtcblx0XHRcdHRocm93IGVycm9yO1xuXG5cdFx0fVxuXG5cdFx0bGV0IGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcywgc3RhdGUsIGluZm87XG5cdFx0bGV0IHByb3BlcnRpZXMsIHRleHR1cmVzLCBjdWJlbWFwcywgY3ViZXV2bWFwcywgYXR0cmlidXRlcywgZ2VvbWV0cmllcywgb2JqZWN0cztcblx0XHRsZXQgcHJvZ3JhbUNhY2hlLCBtYXRlcmlhbHMsIHJlbmRlckxpc3RzLCByZW5kZXJTdGF0ZXMsIGNsaXBwaW5nLCBzaGFkb3dNYXA7XG5cblx0XHRsZXQgYmFja2dyb3VuZCwgbW9ycGh0YXJnZXRzLCBidWZmZXJSZW5kZXJlciwgaW5kZXhlZEJ1ZmZlclJlbmRlcmVyO1xuXG5cdFx0bGV0IHV0aWxzLCBiaW5kaW5nU3RhdGVzLCB1bmlmb3Jtc0dyb3VwcztcblxuXHRcdGZ1bmN0aW9uIGluaXRHTENvbnRleHQoKSB7XG5cblx0XHRcdGV4dGVuc2lvbnMgPSBuZXcgV2ViR0xFeHRlbnNpb25zKCBfZ2wgKTtcblx0XHRcdGV4dGVuc2lvbnMuaW5pdCgpO1xuXG5cdFx0XHR1dGlscyA9IG5ldyBXZWJHTFV0aWxzKCBfZ2wsIGV4dGVuc2lvbnMgKTtcblxuXHRcdFx0Y2FwYWJpbGl0aWVzID0gbmV3IFdlYkdMQ2FwYWJpbGl0aWVzKCBfZ2wsIGV4dGVuc2lvbnMsIHBhcmFtZXRlcnMsIHV0aWxzICk7XG5cblx0XHRcdHN0YXRlID0gbmV3IFdlYkdMU3RhdGUoIF9nbCwgZXh0ZW5zaW9ucyApO1xuXG5cdFx0XHRpZiAoIGNhcGFiaWxpdGllcy5yZXZlcnNlZERlcHRoQnVmZmVyICYmIHJldmVyc2VkRGVwdGhCdWZmZXIgKSB7XG5cblx0XHRcdFx0c3RhdGUuYnVmZmVycy5kZXB0aC5zZXRSZXZlcnNlZCggdHJ1ZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGluZm8gPSBuZXcgV2ViR0xJbmZvKCBfZ2wgKTtcblx0XHRcdHByb3BlcnRpZXMgPSBuZXcgV2ViR0xQcm9wZXJ0aWVzKCk7XG5cdFx0XHR0ZXh0dXJlcyA9IG5ldyBXZWJHTFRleHR1cmVzKCBfZ2wsIGV4dGVuc2lvbnMsIHN0YXRlLCBwcm9wZXJ0aWVzLCBjYXBhYmlsaXRpZXMsIHV0aWxzLCBpbmZvICk7XG5cdFx0XHRjdWJlbWFwcyA9IG5ldyBXZWJHTEN1YmVNYXBzKCBfdGhpcyApO1xuXHRcdFx0Y3ViZXV2bWFwcyA9IG5ldyBXZWJHTEN1YmVVVk1hcHMoIF90aGlzICk7XG5cdFx0XHRhdHRyaWJ1dGVzID0gbmV3IFdlYkdMQXR0cmlidXRlcyggX2dsICk7XG5cdFx0XHRiaW5kaW5nU3RhdGVzID0gbmV3IFdlYkdMQmluZGluZ1N0YXRlcyggX2dsLCBhdHRyaWJ1dGVzICk7XG5cdFx0XHRnZW9tZXRyaWVzID0gbmV3IFdlYkdMR2VvbWV0cmllcyggX2dsLCBhdHRyaWJ1dGVzLCBpbmZvLCBiaW5kaW5nU3RhdGVzICk7XG5cdFx0XHRvYmplY3RzID0gbmV3IFdlYkdMT2JqZWN0cyggX2dsLCBnZW9tZXRyaWVzLCBhdHRyaWJ1dGVzLCBpbmZvICk7XG5cdFx0XHRtb3JwaHRhcmdldHMgPSBuZXcgV2ViR0xNb3JwaHRhcmdldHMoIF9nbCwgY2FwYWJpbGl0aWVzLCB0ZXh0dXJlcyApO1xuXHRcdFx0Y2xpcHBpbmcgPSBuZXcgV2ViR0xDbGlwcGluZyggcHJvcGVydGllcyApO1xuXHRcdFx0cHJvZ3JhbUNhY2hlID0gbmV3IFdlYkdMUHJvZ3JhbXMoIF90aGlzLCBjdWJlbWFwcywgY3ViZXV2bWFwcywgZXh0ZW5zaW9ucywgY2FwYWJpbGl0aWVzLCBiaW5kaW5nU3RhdGVzLCBjbGlwcGluZyApO1xuXHRcdFx0bWF0ZXJpYWxzID0gbmV3IFdlYkdMTWF0ZXJpYWxzKCBfdGhpcywgcHJvcGVydGllcyApO1xuXHRcdFx0cmVuZGVyTGlzdHMgPSBuZXcgV2ViR0xSZW5kZXJMaXN0cygpO1xuXHRcdFx0cmVuZGVyU3RhdGVzID0gbmV3IFdlYkdMUmVuZGVyU3RhdGVzKCBleHRlbnNpb25zICk7XG5cdFx0XHRiYWNrZ3JvdW5kID0gbmV3IFdlYkdMQmFja2dyb3VuZCggX3RoaXMsIGN1YmVtYXBzLCBjdWJldXZtYXBzLCBzdGF0ZSwgb2JqZWN0cywgX2FscGhhLCBwcmVtdWx0aXBsaWVkQWxwaGEgKTtcblx0XHRcdHNoYWRvd01hcCA9IG5ldyBXZWJHTFNoYWRvd01hcCggX3RoaXMsIG9iamVjdHMsIGNhcGFiaWxpdGllcyApO1xuXHRcdFx0dW5pZm9ybXNHcm91cHMgPSBuZXcgV2ViR0xVbmlmb3Jtc0dyb3VwcyggX2dsLCBpbmZvLCBjYXBhYmlsaXRpZXMsIHN0YXRlICk7XG5cblx0XHRcdGJ1ZmZlclJlbmRlcmVyID0gbmV3IFdlYkdMQnVmZmVyUmVuZGVyZXIoIF9nbCwgZXh0ZW5zaW9ucywgaW5mbyApO1xuXHRcdFx0aW5kZXhlZEJ1ZmZlclJlbmRlcmVyID0gbmV3IFdlYkdMSW5kZXhlZEJ1ZmZlclJlbmRlcmVyKCBfZ2wsIGV4dGVuc2lvbnMsIGluZm8gKTtcblxuXHRcdFx0aW5mby5wcm9ncmFtcyA9IHByb2dyYW1DYWNoZS5wcm9ncmFtcztcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBIb2xkcyBkZXRhaWxzIGFib3V0IHRoZSBjYXBhYmlsaXRpZXMgb2YgdGhlIGN1cnJlbnQgcmVuZGVyaW5nIGNvbnRleHQuXG5cdFx0XHQgKlxuXHRcdFx0ICogQG5hbWUgV2ViR0xSZW5kZXJlciNjYXBhYmlsaXRpZXNcblx0XHRcdCAqIEB0eXBlIHtXZWJHTFJlbmRlcmVyfkNhcGFiaWxpdGllc31cblx0XHRcdCAqL1xuXHRcdFx0X3RoaXMuY2FwYWJpbGl0aWVzID0gY2FwYWJpbGl0aWVzO1xuXG5cdFx0XHQvKipcblx0XHRcdCAqIFByb3ZpZGVzIG1ldGhvZHMgZm9yIHJldHJpZXZpbmcgYW5kIHRlc3RpbmcgV2ViR0wgZXh0ZW5zaW9ucy5cblx0XHRcdCAqXG5cdFx0XHQgKiAtIGBnZXQoZXh0ZW5zaW9uTmFtZTpzdHJpbmcpYDogVXNlZCB0byBjaGVjayB3aGV0aGVyIGEgV2ViR0wgZXh0ZW5zaW9uIGlzIHN1cHBvcnRlZFxuXHRcdFx0ICogYW5kIHJldHVybiB0aGUgZXh0ZW5zaW9uIG9iamVjdCBpZiBhdmFpbGFibGUuXG5cdFx0XHQgKiAtIGBoYXMoZXh0ZW5zaW9uTmFtZTpzdHJpbmcpYDogcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGV4dGVuc2lvbiBpcyBzdXBwb3J0ZWQuXG5cdFx0XHQgKlxuXHRcdFx0ICogQG5hbWUgV2ViR0xSZW5kZXJlciNleHRlbnNpb25zXG5cdFx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdFx0ICovXG5cdFx0XHRfdGhpcy5leHRlbnNpb25zID0gZXh0ZW5zaW9ucztcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBVc2VkIHRvIHRyYWNrIHByb3BlcnRpZXMgb2Ygb3RoZXIgb2JqZWN0cyBsaWtlIG5hdGl2ZSBXZWJHTCBvYmplY3RzLlxuXHRcdFx0ICpcblx0XHRcdCAqIEBuYW1lIFdlYkdMUmVuZGVyZXIjcHJvcGVydGllc1xuXHRcdFx0ICogQHR5cGUge09iamVjdH1cblx0XHRcdCAqL1xuXHRcdFx0X3RoaXMucHJvcGVydGllcyA9IHByb3BlcnRpZXM7XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogTWFuYWdlcyB0aGUgcmVuZGVyIGxpc3RzIG9mIHRoZSByZW5kZXJlci5cblx0XHRcdCAqXG5cdFx0XHQgKiBAbmFtZSBXZWJHTFJlbmRlcmVyI3JlbmRlckxpc3RzXG5cdFx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdFx0ICovXG5cdFx0XHRfdGhpcy5yZW5kZXJMaXN0cyA9IHJlbmRlckxpc3RzO1xuXG5cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBJbnRlcmZhY2UgZm9yIG1hbmFnaW5nIHNoYWRvd3MuXG5cdFx0XHQgKlxuXHRcdFx0ICogQG5hbWUgV2ViR0xSZW5kZXJlciNzaGFkb3dNYXBcblx0XHRcdCAqIEB0eXBlIHtXZWJHTFJlbmRlcmVyflNoYWRvd01hcH1cblx0XHRcdCAqL1xuXHRcdFx0X3RoaXMuc2hhZG93TWFwID0gc2hhZG93TWFwO1xuXG5cdFx0XHQvKipcblx0XHRcdCAqIEludGVyZmFjZSBmb3IgbWFuYWdpbmcgdGhlIFdlYkdMIHN0YXRlLlxuXHRcdFx0ICpcblx0XHRcdCAqIEBuYW1lIFdlYkdMUmVuZGVyZXIjc3RhdGVcblx0XHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0XHQgKi9cblx0XHRcdF90aGlzLnN0YXRlID0gc3RhdGU7XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogSG9sZHMgYSBzZXJpZXMgb2Ygc3RhdGlzdGljYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIEdQVSBtZW1vcnlcblx0XHRcdCAqIGFuZCB0aGUgcmVuZGVyaW5nIHByb2Nlc3MuIFVzZWZ1bCBmb3IgZGVidWdnaW5nIGFuZCBtb25pdG9yaW5nLlxuXHRcdFx0ICpcblx0XHRcdCAqIEJ5IGRlZmF1bHQgdGhlc2UgZGF0YSBhcmUgcmVzZXQgYXQgZWFjaCByZW5kZXIgY2FsbCBidXQgd2hlbiBoYXZpbmdcblx0XHRcdCAqIG11bHRpcGxlIHJlbmRlciBwYXNzZXMgcGVyIGZyYW1lIChlLmcuIHdoZW4gdXNpbmcgcG9zdCBwcm9jZXNzaW5nKSBpdCBjYW5cblx0XHRcdCAqIGJlIHByZWZlcnJlZCB0byByZXNldCB3aXRoIGEgY3VzdG9tIHBhdHRlcm4uIEZpcnN0LCBzZXQgYGF1dG9SZXNldGAgdG9cblx0XHRcdCAqIGBmYWxzZWAuXG5cdFx0XHQgKiBgYGBqc1xuXHRcdFx0ICogcmVuZGVyZXIuaW5mby5hdXRvUmVzZXQgPSBmYWxzZTtcblx0XHRcdCAqIGBgYFxuXHRcdFx0ICogQ2FsbCBgcmVzZXQoKWAgd2hlbmV2ZXIgeW91IGhhdmUgZmluaXNoZWQgdG8gcmVuZGVyIGEgc2luZ2xlIGZyYW1lLlxuXHRcdFx0ICogYGBganNcblx0XHRcdCAqIHJlbmRlcmVyLmluZm8ucmVzZXQoKTtcblx0XHRcdCAqIGBgYFxuXHRcdFx0ICpcblx0XHRcdCAqIEBuYW1lIFdlYkdMUmVuZGVyZXIjaW5mb1xuXHRcdFx0ICogQHR5cGUge1dlYkdMUmVuZGVyZXJ+SW5mb31cblx0XHRcdCAqL1xuXHRcdFx0X3RoaXMuaW5mbyA9IGluZm87XG5cblx0XHR9XG5cblx0XHRpbml0R0xDb250ZXh0KCk7XG5cblx0XHQvLyB4clxuXG5cdFx0Y29uc3QgeHIgPSBuZXcgV2ViWFJNYW5hZ2VyKCBfdGhpcywgX2dsICk7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgWFIgbWFuYWdlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXZWJYUk1hbmFnZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy54ciA9IHhyO1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgcmVuZGVyaW5nIGNvbnRleHQuXG5cdFx0ICpcblx0XHQgKiBAcmV0dXJuIHtXZWJHTDJSZW5kZXJpbmdDb250ZXh0fSBUaGUgcmVuZGVyaW5nIGNvbnRleHQuXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRDb250ZXh0ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gX2dsO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgdGhlIHJlbmRlcmluZyBjb250ZXh0IGF0dHJpYnV0ZXMuXG5cdFx0ICpcblx0XHQgKiBAcmV0dXJuIHtXZWJHTENvbnRleHRBdHRyaWJ1dGVzfSBUaGUgcmVuZGVyaW5nIGNvbnRleHQgYXR0cmlidXRlcy5cblx0XHQgKi9cblx0XHR0aGlzLmdldENvbnRleHRBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gX2dsLmdldENvbnRleHRBdHRyaWJ1dGVzKCk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogU2ltdWxhdGVzIGEgbG9zcyBvZiB0aGUgV2ViR0wgY29udGV4dC4gVGhpcyByZXF1aXJlcyBzdXBwb3J0IGZvciB0aGUgYFdFQkdMX2xvc2VfY29udGV4dGAgZXh0ZW5zaW9uLlxuXHRcdCAqL1xuXHRcdHRoaXMuZm9yY2VDb250ZXh0TG9zcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9sb3NlX2NvbnRleHQnICk7XG5cdFx0XHRpZiAoIGV4dGVuc2lvbiApIGV4dGVuc2lvbi5sb3NlQ29udGV4dCgpO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFNpbXVsYXRlcyBhIHJlc3RvcmUgb2YgdGhlIFdlYkdMIGNvbnRleHQuIFRoaXMgcmVxdWlyZXMgc3VwcG9ydCBmb3IgdGhlIGBXRUJHTF9sb3NlX2NvbnRleHRgIGV4dGVuc2lvbi5cblx0XHQgKi9cblx0XHR0aGlzLmZvcmNlQ29udGV4dFJlc3RvcmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnN0IGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfbG9zZV9jb250ZXh0JyApO1xuXHRcdFx0aWYgKCBleHRlbnNpb24gKSBleHRlbnNpb24ucmVzdG9yZUNvbnRleHQoKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSBwaXhlbCByYXRpby5cblx0XHQgKlxuXHRcdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIHBpeGVsIHJhdGlvLlxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0UGl4ZWxSYXRpbyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIF9waXhlbFJhdGlvO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFNldHMgdGhlIGdpdmVuIHBpeGVsIHJhdGlvIGFuZCByZXNpemVzIHRoZSBjYW52YXMgaWYgbmVjZXNzYXJ5LlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIHBpeGVsIHJhdGlvLlxuXHRcdCAqL1xuXHRcdHRoaXMuc2V0UGl4ZWxSYXRpbyA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdFx0X3BpeGVsUmF0aW8gPSB2YWx1ZTtcblxuXHRcdFx0dGhpcy5zZXRTaXplKCBfd2lkdGgsIF9oZWlnaHQsIGZhbHNlICk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgcmVuZGVyZXIncyBzaXplIGluIGxvZ2ljYWwgcGl4ZWxzLiBUaGlzIG1ldGhvZCBkb2VzIG5vdCBob25vciB0aGUgcGl4ZWwgcmF0aW8uXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IHRhcmdldCAtIFRoZSBtZXRob2Qgd3JpdGVzIHRoZSByZXN1bHQgaW4gdGhpcyB0YXJnZXQgb2JqZWN0LlxuXHRcdCAqIEByZXR1cm4ge1ZlY3RvcjJ9IFRoZSByZW5kZXJlcidzIHNpemUgaW4gbG9naWNhbCBwaXhlbHMuXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRTaXplID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRcdHJldHVybiB0YXJnZXQuc2V0KCBfd2lkdGgsIF9oZWlnaHQgKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZXNpemVzIHRoZSBvdXRwdXQgY2FudmFzIHRvICh3aWR0aCwgaGVpZ2h0KSB3aXRoIGRldmljZSBwaXhlbCByYXRpbyB0YWtlblxuXHRcdCAqIGludG8gYWNjb3VudCwgYW5kIGFsc28gc2V0cyB0aGUgdmlld3BvcnQgdG8gZml0IHRoYXQgc2l6ZSwgc3RhcnRpbmcgaW4gKDAsXG5cdFx0ICogMCkuIFNldHRpbmcgYHVwZGF0ZVN0eWxlYCB0byBmYWxzZSBwcmV2ZW50cyBhbnkgc3R5bGUgY2hhbmdlcyB0byB0aGUgb3V0cHV0IGNhbnZhcy5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCBpbiBsb2dpY2FsIHBpeGVscy5cblx0XHQgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGhlIGhlaWdodCBpbiBsb2dpY2FsIHBpeGVscy5cblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IFt1cGRhdGVTdHlsZT10cnVlXSAtIFdoZXRoZXIgdG8gdXBkYXRlIHRoZSBgc3R5bGVgIGF0dHJpYnV0ZSBvZiB0aGUgY2FudmFzIG9yIG5vdC5cblx0XHQgKi9cblx0XHR0aGlzLnNldFNpemUgPSBmdW5jdGlvbiAoIHdpZHRoLCBoZWlnaHQsIHVwZGF0ZVN0eWxlID0gdHJ1ZSApIHtcblxuXHRcdFx0aWYgKCB4ci5pc1ByZXNlbnRpbmcgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQ2FuXFwndCBjaGFuZ2Ugc2l6ZSB3aGlsZSBWUiBkZXZpY2UgaXMgcHJlc2VudGluZy4nICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHRfd2lkdGggPSB3aWR0aDtcblx0XHRcdF9oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHRcdGNhbnZhcy53aWR0aCA9IE1hdGguZmxvb3IoIHdpZHRoICogX3BpeGVsUmF0aW8gKTtcblx0XHRcdGNhbnZhcy5oZWlnaHQgPSBNYXRoLmZsb29yKCBoZWlnaHQgKiBfcGl4ZWxSYXRpbyApO1xuXG5cdFx0XHRpZiAoIHVwZGF0ZVN0eWxlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGNhbnZhcy5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4Jztcblx0XHRcdFx0Y2FudmFzLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5zZXRWaWV3cG9ydCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgdGhlIGRyYXdpbmcgYnVmZmVyIHNpemUgaW4gcGh5c2ljYWwgcGl4ZWxzLiBUaGlzIG1ldGhvZCBob25vcnMgdGhlIHBpeGVsIHJhdGlvLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtWZWN0b3IyfSB0YXJnZXQgLSBUaGUgbWV0aG9kIHdyaXRlcyB0aGUgcmVzdWx0IGluIHRoaXMgdGFyZ2V0IG9iamVjdC5cblx0XHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBUaGUgZHJhd2luZyBidWZmZXIgc2l6ZS5cblx0XHQgKi9cblx0XHR0aGlzLmdldERyYXdpbmdCdWZmZXJTaXplID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRcdHJldHVybiB0YXJnZXQuc2V0KCBfd2lkdGggKiBfcGl4ZWxSYXRpbywgX2hlaWdodCAqIF9waXhlbFJhdGlvICkuZmxvb3IoKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIG1ldGhvZCBhbGxvd3MgdG8gZGVmaW5lIHRoZSBkcmF3aW5nIGJ1ZmZlciBzaXplIGJ5IHNwZWNpZnlpbmdcblx0XHQgKiB3aWR0aCwgaGVpZ2h0IGFuZCBwaXhlbCByYXRpbyBhbGwgYXQgb25jZS4gVGhlIHNpemUgb2YgdGhlIGRyYXdpbmdcblx0XHQgKiBidWZmZXIgaXMgY29tcHV0ZWQgd2l0aCB0aGlzIGZvcm11bGE6XG5cdFx0ICogYGBganNcblx0XHQgKiBzaXplLnggPSB3aWR0aCAqIHBpeGVsUmF0aW87XG5cdFx0ICogc2l6ZS55ID0gaGVpZ2h0ICogcGl4ZWxSYXRpbztcblx0XHQgKiBgYGBcblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCBpbiBsb2dpY2FsIHBpeGVscy5cblx0XHQgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGhlIGhlaWdodCBpbiBsb2dpY2FsIHBpeGVscy5cblx0XHQgKiBAcGFyYW0ge251bWJlcn0gcGl4ZWxSYXRpbyAtIFRoZSBwaXhlbCByYXRpby5cblx0XHQgKi9cblx0XHR0aGlzLnNldERyYXdpbmdCdWZmZXJTaXplID0gZnVuY3Rpb24gKCB3aWR0aCwgaGVpZ2h0LCBwaXhlbFJhdGlvICkge1xuXG5cdFx0XHRfd2lkdGggPSB3aWR0aDtcblx0XHRcdF9oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHRcdF9waXhlbFJhdGlvID0gcGl4ZWxSYXRpbztcblxuXHRcdFx0Y2FudmFzLndpZHRoID0gTWF0aC5mbG9vciggd2lkdGggKiBwaXhlbFJhdGlvICk7XG5cdFx0XHRjYW52YXMuaGVpZ2h0ID0gTWF0aC5mbG9vciggaGVpZ2h0ICogcGl4ZWxSYXRpbyApO1xuXG5cdFx0XHR0aGlzLnNldFZpZXdwb3J0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgY3VycmVudCB2aWV3cG9ydCBkZWZpbml0aW9uLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtWZWN0b3IyfSB0YXJnZXQgLSBUaGUgbWV0aG9kIHdyaXRlcyB0aGUgcmVzdWx0IGluIHRoaXMgdGFyZ2V0IG9iamVjdC5cblx0XHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBUaGUgY3VycmVudCB2aWV3cG9ydCBkZWZpbml0aW9uLlxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0Q3VycmVudFZpZXdwb3J0ID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRcdHJldHVybiB0YXJnZXQuY29weSggX2N1cnJlbnRWaWV3cG9ydCApO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgdGhlIHZpZXdwb3J0IGRlZmluaXRpb24uXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge1ZlY3RvcjR9IHRhcmdldCAtIFRoZSBtZXRob2Qgd3JpdGVzIHRoZSByZXN1bHQgaW4gdGhpcyB0YXJnZXQgb2JqZWN0LlxuXHRcdCAqIEByZXR1cm4ge1ZlY3RvcjR9IFRoZSB2aWV3cG9ydCBkZWZpbml0aW9uLlxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0Vmlld3BvcnQgPSBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBfdmlld3BvcnQgKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBTZXRzIHRoZSB2aWV3cG9ydCB0byByZW5kZXIgZnJvbSBgKHgsIHkpYCB0byBgKHggKyB3aWR0aCwgeSArIGhlaWdodClgLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtudW1iZXIgfCBWZWN0b3I0fSB4IC0gVGhlIGhvcml6b250YWwgY29vcmRpbmF0ZSBmb3IgdGhlIGxvd2VyIGxlZnQgY29ybmVyIG9mIHRoZSB2aWV3cG9ydCBvcmlnaW4gaW4gbG9naWNhbCBwaXhlbCB1bml0LlxuXHRcdCAqIE9yIGFsdGVybmF0aXZlbHkgYSBmb3VyLWNvbXBvbmVudCB2ZWN0b3Igc3BlY2lmeWluZyBhbGwgdGhlIHBhcmFtZXRlcnMgb2YgdGhlIHZpZXdwb3J0LlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHZlcnRpY2FsIGNvb3JkaW5hdGUgZm9yIHRoZSBsb3dlciBsZWZ0IGNvcm5lciBvZiB0aGUgdmlld3BvcnQgb3JpZ2luICBpbiBsb2dpY2FsIHBpeGVsIHVuaXQuXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoIG9mIHRoZSB2aWV3cG9ydCBpbiBsb2dpY2FsIHBpeGVsIHVuaXQuXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIFRoZSBoZWlnaHQgb2YgdGhlIHZpZXdwb3J0IGluIGxvZ2ljYWwgcGl4ZWwgdW5pdC5cblx0XHQgKi9cblx0XHR0aGlzLnNldFZpZXdwb3J0ID0gZnVuY3Rpb24gKCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICkge1xuXG5cdFx0XHRpZiAoIHguaXNWZWN0b3I0ICkge1xuXG5cdFx0XHRcdF92aWV3cG9ydC5zZXQoIHgueCwgeC55LCB4LnosIHgudyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdF92aWV3cG9ydC5zZXQoIHgsIHksIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZS52aWV3cG9ydCggX2N1cnJlbnRWaWV3cG9ydC5jb3B5KCBfdmlld3BvcnQgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKS5yb3VuZCgpICk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgc2Npc3NvciByZWdpb24uXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge1ZlY3RvcjR9IHRhcmdldCAtIFRoZSBtZXRob2Qgd3JpdGVzIHRoZSByZXN1bHQgaW4gdGhpcyB0YXJnZXQgb2JqZWN0LlxuXHRcdCAqIEByZXR1cm4ge1ZlY3RvcjR9IFRoZSBzY2lzc29yIHJlZ2lvbi5cblx0XHQgKi9cblx0XHR0aGlzLmdldFNjaXNzb3IgPSBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBfc2Npc3NvciApO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFNldHMgdGhlIHNjaXNzb3IgcmVnaW9uIHRvIHJlbmRlciBmcm9tIGAoeCwgeSlgIHRvIGAoeCArIHdpZHRoLCB5ICsgaGVpZ2h0KWAuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge251bWJlciB8IFZlY3RvcjR9IHggLSBUaGUgaG9yaXpvbnRhbCBjb29yZGluYXRlIGZvciB0aGUgbG93ZXIgbGVmdCBjb3JuZXIgb2YgdGhlIHNjaXNzb3IgcmVnaW9uIG9yaWdpbiBpbiBsb2dpY2FsIHBpeGVsIHVuaXQuXG5cdFx0ICogT3IgYWx0ZXJuYXRpdmVseSBhIGZvdXItY29tcG9uZW50IHZlY3RvciBzcGVjaWZ5aW5nIGFsbCB0aGUgcGFyYW1ldGVycyBvZiB0aGUgc2Npc3NvciByZWdpb24uXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgdmVydGljYWwgY29vcmRpbmF0ZSBmb3IgdGhlIGxvd2VyIGxlZnQgY29ybmVyIG9mIHRoZSBzY2lzc29yIHJlZ2lvbiBvcmlnaW4gIGluIGxvZ2ljYWwgcGl4ZWwgdW5pdC5cblx0XHQgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgd2lkdGggb2YgdGhlIHNjaXNzb3IgcmVnaW9uIGluIGxvZ2ljYWwgcGl4ZWwgdW5pdC5cblx0XHQgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGhlIGhlaWdodCBvZiB0aGUgc2Npc3NvciByZWdpb24gaW4gbG9naWNhbCBwaXhlbCB1bml0LlxuXHRcdCAqL1xuXHRcdHRoaXMuc2V0U2Npc3NvciA9IGZ1bmN0aW9uICggeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdFx0aWYgKCB4LmlzVmVjdG9yNCApIHtcblxuXHRcdFx0XHRfc2Npc3Nvci5zZXQoIHgueCwgeC55LCB4LnosIHgudyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdF9zY2lzc29yLnNldCggeCwgeSwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHN0YXRlLnNjaXNzb3IoIF9jdXJyZW50U2Npc3Nvci5jb3B5KCBfc2Npc3NvciApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApLnJvdW5kKCkgKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgc2Npc3NvciB0ZXN0IGlzIGVuYWJsZWQuXG5cdFx0ICpcblx0XHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBzY2lzc29yIHRlc3QgaXMgZW5hYmxlZCBvciBub3QuXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRTY2lzc29yVGVzdCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIF9zY2lzc29yVGVzdDtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBFbmFibGUgb3IgZGlzYWJsZSB0aGUgc2Npc3NvciB0ZXN0LiBXaGVuIHRoaXMgaXMgZW5hYmxlZCwgb25seSB0aGUgcGl4ZWxzXG5cdFx0ICogd2l0aGluIHRoZSBkZWZpbmVkIHNjaXNzb3IgYXJlYSB3aWxsIGJlIGFmZmVjdGVkIGJ5IGZ1cnRoZXIgcmVuZGVyZXJcblx0XHQgKiBhY3Rpb25zLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBib29sZWFuIC0gV2hldGhlciB0aGUgc2Npc3NvciB0ZXN0IGlzIGVuYWJsZWQgb3Igbm90LlxuXHRcdCAqL1xuXHRcdHRoaXMuc2V0U2Npc3NvclRlc3QgPSBmdW5jdGlvbiAoIGJvb2xlYW4gKSB7XG5cblx0XHRcdHN0YXRlLnNldFNjaXNzb3JUZXN0KCBfc2Npc3NvclRlc3QgPSBib29sZWFuICk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogU2V0cyBhIGN1c3RvbSBvcGFxdWUgc29ydCBmdW5jdGlvbiBmb3IgdGhlIHJlbmRlciBsaXN0cy4gUGFzcyBgbnVsbGBcblx0XHQgKiB0byB1c2UgdGhlIGRlZmF1bHQgYHBhaW50ZXJTb3J0U3RhYmxlYCBmdW5jdGlvbi5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7P0Z1bmN0aW9ufSBtZXRob2QgLSBUaGUgb3BhcXVlIHNvcnQgZnVuY3Rpb24uXG5cdFx0ICovXG5cdFx0dGhpcy5zZXRPcGFxdWVTb3J0ID0gZnVuY3Rpb24gKCBtZXRob2QgKSB7XG5cblx0XHRcdF9vcGFxdWVTb3J0ID0gbWV0aG9kO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFNldHMgYSBjdXN0b20gdHJhbnNwYXJlbnQgc29ydCBmdW5jdGlvbiBmb3IgdGhlIHJlbmRlciBsaXN0cy4gUGFzcyBgbnVsbGBcblx0XHQgKiB0byB1c2UgdGhlIGRlZmF1bHQgYHJldmVyc2VQYWludGVyU29ydFN0YWJsZWAgZnVuY3Rpb24uXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0gez9GdW5jdGlvbn0gbWV0aG9kIC0gVGhlIG9wYXF1ZSBzb3J0IGZ1bmN0aW9uLlxuXHRcdCAqL1xuXHRcdHRoaXMuc2V0VHJhbnNwYXJlbnRTb3J0ID0gZnVuY3Rpb24gKCBtZXRob2QgKSB7XG5cblx0XHRcdF90cmFuc3BhcmVudFNvcnQgPSBtZXRob2Q7XG5cblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYXJpbmdcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgdGhlIGNsZWFyIGNvbG9yLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtDb2xvcn0gdGFyZ2V0IC0gVGhlIG1ldGhvZCB3cml0ZXMgdGhlIHJlc3VsdCBpbiB0aGlzIHRhcmdldCBvYmplY3QuXG5cdFx0ICogQHJldHVybiB7Q29sb3J9IFRoZSBjbGVhciBjb2xvci5cblx0XHQgKi9cblx0XHR0aGlzLmdldENsZWFyQ29sb3IgPSBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBiYWNrZ3JvdW5kLmdldENsZWFyQ29sb3IoKSApO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFNldHMgdGhlIGNsZWFyIGNvbG9yIGFuZCBhbHBoYS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7Q29sb3J9IGNvbG9yIC0gVGhlIGNsZWFyIGNvbG9yLlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBbYWxwaGE9MV0gLSBUaGUgY2xlYXIgYWxwaGEuXG5cdFx0ICovXG5cdFx0dGhpcy5zZXRDbGVhckNvbG9yID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRiYWNrZ3JvdW5kLnNldENsZWFyQ29sb3IoIC4uLmFyZ3VtZW50cyApO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgdGhlIGNsZWFyIGFscGhhLiBSYW5nZXMgd2l0aGluIGBbMCwxXWAuXG5cdFx0ICpcblx0XHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjbGVhciBhbHBoYS5cblx0XHQgKi9cblx0XHR0aGlzLmdldENsZWFyQWxwaGEgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBiYWNrZ3JvdW5kLmdldENsZWFyQWxwaGEoKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBTZXRzIHRoZSBjbGVhciBhbHBoYS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBhbHBoYSAtIFRoZSBjbGVhciBhbHBoYS5cblx0XHQgKi9cblx0XHR0aGlzLnNldENsZWFyQWxwaGEgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGJhY2tncm91bmQuc2V0Q2xlYXJBbHBoYSggLi4uYXJndW1lbnRzICk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogVGVsbHMgdGhlIHJlbmRlcmVyIHRvIGNsZWFyIGl0cyBjb2xvciwgZGVwdGggb3Igc3RlbmNpbCBkcmF3aW5nIGJ1ZmZlcihzKS5cblx0XHQgKiBUaGlzIG1ldGhvZCBpbml0aWFsaXplcyB0aGUgYnVmZmVycyB0byB0aGUgY3VycmVudCBjbGVhciBjb2xvciB2YWx1ZXMuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtjb2xvcj10cnVlXSAtIFdoZXRoZXIgdGhlIGNvbG9yIGJ1ZmZlciBzaG91bGQgYmUgY2xlYXJlZCBvciBub3QuXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBbZGVwdGg9dHJ1ZV0gLSBXaGV0aGVyIHRoZSBkZXB0aCBidWZmZXIgc2hvdWxkIGJlIGNsZWFyZWQgb3Igbm90LlxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3N0ZW5jaWw9dHJ1ZV0gLSBXaGV0aGVyIHRoZSBzdGVuY2lsIGJ1ZmZlciBzaG91bGQgYmUgY2xlYXJlZCBvciBub3QuXG5cdFx0ICovXG5cdFx0dGhpcy5jbGVhciA9IGZ1bmN0aW9uICggY29sb3IgPSB0cnVlLCBkZXB0aCA9IHRydWUsIHN0ZW5jaWwgPSB0cnVlICkge1xuXG5cdFx0XHRsZXQgYml0cyA9IDA7XG5cblx0XHRcdGlmICggY29sb3IgKSB7XG5cblx0XHRcdFx0Ly8gY2hlY2sgaWYgd2UncmUgdHJ5aW5nIHRvIGNsZWFyIGFuIGludGVnZXIgdGFyZ2V0XG5cdFx0XHRcdGxldCBpc0ludGVnZXJGb3JtYXQgPSBmYWxzZTtcblx0XHRcdFx0aWYgKCBfY3VycmVudFJlbmRlclRhcmdldCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHRhcmdldEZvcm1hdCA9IF9jdXJyZW50UmVuZGVyVGFyZ2V0LnRleHR1cmUuZm9ybWF0O1xuXHRcdFx0XHRcdGlzSW50ZWdlckZvcm1hdCA9IHRhcmdldEZvcm1hdCA9PT0gUkdCQUludGVnZXJGb3JtYXQgfHxcblx0XHRcdFx0XHRcdHRhcmdldEZvcm1hdCA9PT0gUkdJbnRlZ2VyRm9ybWF0IHx8XG5cdFx0XHRcdFx0XHR0YXJnZXRGb3JtYXQgPT09IFJlZEludGVnZXJGb3JtYXQ7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIHVzZSB0aGUgYXBwcm9wcmlhdGUgY2xlYXIgZnVuY3Rpb25zIHRvIGNsZWFyIHRoZSB0YXJnZXQgaWYgaXQncyBhIHNpZ25lZFxuXHRcdFx0XHQvLyBvciB1bnNpZ25lZCBpbnRlZ2VyIHRhcmdldFxuXHRcdFx0XHRpZiAoIGlzSW50ZWdlckZvcm1hdCApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHRhcmdldFR5cGUgPSBfY3VycmVudFJlbmRlclRhcmdldC50ZXh0dXJlLnR5cGU7XG5cdFx0XHRcdFx0Y29uc3QgaXNVbnNpZ25lZFR5cGUgPSB0YXJnZXRUeXBlID09PSBVbnNpZ25lZEJ5dGVUeXBlIHx8XG5cdFx0XHRcdFx0XHR0YXJnZXRUeXBlID09PSBVbnNpZ25lZEludFR5cGUgfHxcblx0XHRcdFx0XHRcdHRhcmdldFR5cGUgPT09IFVuc2lnbmVkU2hvcnRUeXBlIHx8XG5cdFx0XHRcdFx0XHR0YXJnZXRUeXBlID09PSBVbnNpZ25lZEludDI0OFR5cGUgfHxcblx0XHRcdFx0XHRcdHRhcmdldFR5cGUgPT09IFVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSB8fFxuXHRcdFx0XHRcdFx0dGFyZ2V0VHlwZSA9PT0gVW5zaWduZWRTaG9ydDU1NTFUeXBlO1xuXG5cdFx0XHRcdFx0Y29uc3QgY2xlYXJDb2xvciA9IGJhY2tncm91bmQuZ2V0Q2xlYXJDb2xvcigpO1xuXHRcdFx0XHRcdGNvbnN0IGEgPSBiYWNrZ3JvdW5kLmdldENsZWFyQWxwaGEoKTtcblx0XHRcdFx0XHRjb25zdCByID0gY2xlYXJDb2xvci5yO1xuXHRcdFx0XHRcdGNvbnN0IGcgPSBjbGVhckNvbG9yLmc7XG5cdFx0XHRcdFx0Y29uc3QgYiA9IGNsZWFyQ29sb3IuYjtcblxuXHRcdFx0XHRcdGlmICggaXNVbnNpZ25lZFR5cGUgKSB7XG5cblx0XHRcdFx0XHRcdHVpbnRDbGVhckNvbG9yWyAwIF0gPSByO1xuXHRcdFx0XHRcdFx0dWludENsZWFyQ29sb3JbIDEgXSA9IGc7XG5cdFx0XHRcdFx0XHR1aW50Q2xlYXJDb2xvclsgMiBdID0gYjtcblx0XHRcdFx0XHRcdHVpbnRDbGVhckNvbG9yWyAzIF0gPSBhO1xuXHRcdFx0XHRcdFx0X2dsLmNsZWFyQnVmZmVydWl2KCBfZ2wuQ09MT1IsIDAsIHVpbnRDbGVhckNvbG9yICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRpbnRDbGVhckNvbG9yWyAwIF0gPSByO1xuXHRcdFx0XHRcdFx0aW50Q2xlYXJDb2xvclsgMSBdID0gZztcblx0XHRcdFx0XHRcdGludENsZWFyQ29sb3JbIDIgXSA9IGI7XG5cdFx0XHRcdFx0XHRpbnRDbGVhckNvbG9yWyAzIF0gPSBhO1xuXHRcdFx0XHRcdFx0X2dsLmNsZWFyQnVmZmVyaXYoIF9nbC5DT0xPUiwgMCwgaW50Q2xlYXJDb2xvciApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRiaXRzIHw9IF9nbC5DT0xPUl9CVUZGRVJfQklUO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGRlcHRoICkge1xuXG5cdFx0XHRcdGJpdHMgfD0gX2dsLkRFUFRIX0JVRkZFUl9CSVQ7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzdGVuY2lsICkge1xuXG5cdFx0XHRcdGJpdHMgfD0gX2dsLlNURU5DSUxfQlVGRkVSX0JJVDtcblx0XHRcdFx0dGhpcy5zdGF0ZS5idWZmZXJzLnN0ZW5jaWwuc2V0TWFzayggMHhmZmZmZmZmZiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9nbC5jbGVhciggYml0cyApO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIENsZWFycyB0aGUgY29sb3IgYnVmZmVyLiBFcXVpdmFsZW50IHRvIGNhbGxpbmcgYHJlbmRlcmVyLmNsZWFyKCB0cnVlLCBmYWxzZSwgZmFsc2UgKWAuXG5cdFx0ICovXG5cdFx0dGhpcy5jbGVhckNvbG9yID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHR0aGlzLmNsZWFyKCB0cnVlLCBmYWxzZSwgZmFsc2UgKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBDbGVhcnMgdGhlIGRlcHRoIGJ1ZmZlci4gRXF1aXZhbGVudCB0byBjYWxsaW5nIGByZW5kZXJlci5jbGVhciggZmFsc2UsIHRydWUsIGZhbHNlIClgLlxuXHRcdCAqL1xuXHRcdHRoaXMuY2xlYXJEZXB0aCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0dGhpcy5jbGVhciggZmFsc2UsIHRydWUsIGZhbHNlICk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQ2xlYXJzIHRoZSBzdGVuY2lsIGJ1ZmZlci4gRXF1aXZhbGVudCB0byBjYWxsaW5nIGByZW5kZXJlci5jbGVhciggZmFsc2UsIGZhbHNlLCB0cnVlIClgLlxuXHRcdCAqL1xuXHRcdHRoaXMuY2xlYXJTdGVuY2lsID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHR0aGlzLmNsZWFyKCBmYWxzZSwgZmFsc2UsIHRydWUgKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBGcmVlcyB0aGUgR1BVLXJlbGF0ZWQgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSB0aGlzIGluc3RhbmNlLiBDYWxsIHRoaXNcblx0XHQgKiBtZXRob2Qgd2hlbmV2ZXIgdGhpcyBpbnN0YW5jZSBpcyBubyBsb25nZXIgdXNlZCBpbiB5b3VyIGFwcC5cblx0XHQgKi9cblx0XHR0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCAnd2ViZ2xjb250ZXh0bG9zdCcsIG9uQ29udGV4dExvc3QsIGZhbHNlICk7XG5cdFx0XHRjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dHJlc3RvcmVkJywgb25Db250ZXh0UmVzdG9yZSwgZmFsc2UgKTtcblx0XHRcdGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCAnd2ViZ2xjb250ZXh0Y3JlYXRpb25lcnJvcicsIG9uQ29udGV4dENyZWF0aW9uRXJyb3IsIGZhbHNlICk7XG5cblx0XHRcdGJhY2tncm91bmQuZGlzcG9zZSgpO1xuXHRcdFx0cmVuZGVyTGlzdHMuZGlzcG9zZSgpO1xuXHRcdFx0cmVuZGVyU3RhdGVzLmRpc3Bvc2UoKTtcblx0XHRcdHByb3BlcnRpZXMuZGlzcG9zZSgpO1xuXHRcdFx0Y3ViZW1hcHMuZGlzcG9zZSgpO1xuXHRcdFx0Y3ViZXV2bWFwcy5kaXNwb3NlKCk7XG5cdFx0XHRvYmplY3RzLmRpc3Bvc2UoKTtcblx0XHRcdGJpbmRpbmdTdGF0ZXMuZGlzcG9zZSgpO1xuXHRcdFx0dW5pZm9ybXNHcm91cHMuZGlzcG9zZSgpO1xuXHRcdFx0cHJvZ3JhbUNhY2hlLmRpc3Bvc2UoKTtcblxuXHRcdFx0eHIuZGlzcG9zZSgpO1xuXG5cdFx0XHR4ci5yZW1vdmVFdmVudExpc3RlbmVyKCAnc2Vzc2lvbnN0YXJ0Jywgb25YUlNlc3Npb25TdGFydCApO1xuXHRcdFx0eHIucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3Nlc3Npb25lbmQnLCBvblhSU2Vzc2lvbkVuZCApO1xuXG5cdFx0XHRhbmltYXRpb24uc3RvcCgpO1xuXG5cdFx0fTtcblxuXHRcdC8vIEV2ZW50c1xuXG5cdFx0ZnVuY3Rpb24gb25Db250ZXh0TG9zdCggZXZlbnQgKSB7XG5cblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdGNvbnNvbGUubG9nKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQ29udGV4dCBMb3N0LicgKTtcblxuXHRcdFx0X2lzQ29udGV4dExvc3QgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25Db250ZXh0UmVzdG9yZSggLyogZXZlbnQgKi8gKSB7XG5cblx0XHRcdGNvbnNvbGUubG9nKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQ29udGV4dCBSZXN0b3JlZC4nICk7XG5cblx0XHRcdF9pc0NvbnRleHRMb3N0ID0gZmFsc2U7XG5cblx0XHRcdGNvbnN0IGluZm9BdXRvUmVzZXQgPSBpbmZvLmF1dG9SZXNldDtcblx0XHRcdGNvbnN0IHNoYWRvd01hcEVuYWJsZWQgPSBzaGFkb3dNYXAuZW5hYmxlZDtcblx0XHRcdGNvbnN0IHNoYWRvd01hcEF1dG9VcGRhdGUgPSBzaGFkb3dNYXAuYXV0b1VwZGF0ZTtcblx0XHRcdGNvbnN0IHNoYWRvd01hcE5lZWRzVXBkYXRlID0gc2hhZG93TWFwLm5lZWRzVXBkYXRlO1xuXHRcdFx0Y29uc3Qgc2hhZG93TWFwVHlwZSA9IHNoYWRvd01hcC50eXBlO1xuXG5cdFx0XHRpbml0R0xDb250ZXh0KCk7XG5cblx0XHRcdGluZm8uYXV0b1Jlc2V0ID0gaW5mb0F1dG9SZXNldDtcblx0XHRcdHNoYWRvd01hcC5lbmFibGVkID0gc2hhZG93TWFwRW5hYmxlZDtcblx0XHRcdHNoYWRvd01hcC5hdXRvVXBkYXRlID0gc2hhZG93TWFwQXV0b1VwZGF0ZTtcblx0XHRcdHNoYWRvd01hcC5uZWVkc1VwZGF0ZSA9IHNoYWRvd01hcE5lZWRzVXBkYXRlO1xuXHRcdFx0c2hhZG93TWFwLnR5cGUgPSBzaGFkb3dNYXBUeXBlO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25Db250ZXh0Q3JlYXRpb25FcnJvciggZXZlbnQgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBBIFdlYkdMIGNvbnRleHQgY291bGQgbm90IGJlIGNyZWF0ZWQuIFJlYXNvbjogJywgZXZlbnQuc3RhdHVzTWVzc2FnZSApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25NYXRlcmlhbERpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0XHRjb25zdCBtYXRlcmlhbCA9IGV2ZW50LnRhcmdldDtcblxuXHRcdFx0bWF0ZXJpYWwucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbk1hdGVyaWFsRGlzcG9zZSApO1xuXG5cdFx0XHRkZWFsbG9jYXRlTWF0ZXJpYWwoIG1hdGVyaWFsICk7XG5cblx0XHR9XG5cblx0XHQvLyBCdWZmZXIgZGVhbGxvY2F0aW9uXG5cblx0XHRmdW5jdGlvbiBkZWFsbG9jYXRlTWF0ZXJpYWwoIG1hdGVyaWFsICkge1xuXG5cdFx0XHRyZWxlYXNlTWF0ZXJpYWxQcm9ncmFtUmVmZXJlbmNlcyggbWF0ZXJpYWwgKTtcblxuXHRcdFx0cHJvcGVydGllcy5yZW1vdmUoIG1hdGVyaWFsICk7XG5cblx0XHR9XG5cblxuXHRcdGZ1bmN0aW9uIHJlbGVhc2VNYXRlcmlhbFByb2dyYW1SZWZlcmVuY2VzKCBtYXRlcmlhbCApIHtcblxuXHRcdFx0Y29uc3QgcHJvZ3JhbXMgPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwgKS5wcm9ncmFtcztcblxuXHRcdFx0aWYgKCBwcm9ncmFtcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHByb2dyYW1zLmZvckVhY2goIGZ1bmN0aW9uICggcHJvZ3JhbSApIHtcblxuXHRcdFx0XHRcdHByb2dyYW1DYWNoZS5yZWxlYXNlUHJvZ3JhbSggcHJvZ3JhbSApO1xuXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0XHRwcm9ncmFtQ2FjaGUucmVsZWFzZVNoYWRlckNhY2hlKCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gQnVmZmVyIHJlbmRlcmluZ1xuXG5cdFx0dGhpcy5yZW5kZXJCdWZmZXJEaXJlY3QgPSBmdW5jdGlvbiAoIGNhbWVyYSwgc2NlbmUsIGdlb21ldHJ5LCBtYXRlcmlhbCwgb2JqZWN0LCBncm91cCApIHtcblxuXHRcdFx0aWYgKCBzY2VuZSA9PT0gbnVsbCApIHNjZW5lID0gX2VtcHR5U2NlbmU7IC8vIHJlbmRlckJ1ZmZlckRpcmVjdCBzZWNvbmQgcGFyYW1ldGVyIHVzZWQgdG8gYmUgZm9nIChjb3VsZCBiZSBudWxsKVxuXG5cdFx0XHRjb25zdCBmcm9udEZhY2VDVyA9ICggb2JqZWN0LmlzTWVzaCAmJiBvYmplY3QubWF0cml4V29ybGQuZGV0ZXJtaW5hbnQoKSA8IDAgKTtcblxuXHRcdFx0Y29uc3QgcHJvZ3JhbSA9IHNldFByb2dyYW0oIGNhbWVyYSwgc2NlbmUsIGdlb21ldHJ5LCBtYXRlcmlhbCwgb2JqZWN0ICk7XG5cblx0XHRcdHN0YXRlLnNldE1hdGVyaWFsKCBtYXRlcmlhbCwgZnJvbnRGYWNlQ1cgKTtcblxuXHRcdFx0Ly9cblxuXHRcdFx0bGV0IGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0XHRsZXQgcmFuZ2VGYWN0b3IgPSAxO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRpbmRleCA9IGdlb21ldHJpZXMuZ2V0V2lyZWZyYW1lQXR0cmlidXRlKCBnZW9tZXRyeSApO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdFx0XHRyYW5nZUZhY3RvciA9IDI7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly9cblxuXHRcdFx0Y29uc3QgZHJhd1JhbmdlID0gZ2VvbWV0cnkuZHJhd1JhbmdlO1xuXHRcdFx0Y29uc3QgcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0XHRsZXQgZHJhd1N0YXJ0ID0gZHJhd1JhbmdlLnN0YXJ0ICogcmFuZ2VGYWN0b3I7XG5cdFx0XHRsZXQgZHJhd0VuZCA9ICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKiByYW5nZUZhY3RvcjtcblxuXHRcdFx0aWYgKCBncm91cCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRkcmF3U3RhcnQgPSBNYXRoLm1heCggZHJhd1N0YXJ0LCBncm91cC5zdGFydCAqIHJhbmdlRmFjdG9yICk7XG5cdFx0XHRcdGRyYXdFbmQgPSBNYXRoLm1pbiggZHJhd0VuZCwgKCBncm91cC5zdGFydCArIGdyb3VwLmNvdW50ICkgKiByYW5nZUZhY3RvciApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0ZHJhd1N0YXJ0ID0gTWF0aC5tYXgoIGRyYXdTdGFydCwgMCApO1xuXHRcdFx0XHRkcmF3RW5kID0gTWF0aC5taW4oIGRyYXdFbmQsIGluZGV4LmNvdW50ICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHBvc2l0aW9uICE9PSB1bmRlZmluZWQgJiYgcG9zaXRpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0ZHJhd1N0YXJ0ID0gTWF0aC5tYXgoIGRyYXdTdGFydCwgMCApO1xuXHRcdFx0XHRkcmF3RW5kID0gTWF0aC5taW4oIGRyYXdFbmQsIHBvc2l0aW9uLmNvdW50ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgZHJhd0NvdW50ID0gZHJhd0VuZCAtIGRyYXdTdGFydDtcblxuXHRcdFx0aWYgKCBkcmF3Q291bnQgPCAwIHx8IGRyYXdDb3VudCA9PT0gSW5maW5pdHkgKSByZXR1cm47XG5cblx0XHRcdC8vXG5cblx0XHRcdGJpbmRpbmdTdGF0ZXMuc2V0dXAoIG9iamVjdCwgbWF0ZXJpYWwsIHByb2dyYW0sIGdlb21ldHJ5LCBpbmRleCApO1xuXG5cdFx0XHRsZXQgYXR0cmlidXRlO1xuXHRcdFx0bGV0IHJlbmRlcmVyID0gYnVmZmVyUmVuZGVyZXI7XG5cblx0XHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0YXR0cmlidXRlID0gYXR0cmlidXRlcy5nZXQoIGluZGV4ICk7XG5cblx0XHRcdFx0cmVuZGVyZXIgPSBpbmRleGVkQnVmZmVyUmVuZGVyZXI7XG5cdFx0XHRcdHJlbmRlcmVyLnNldEluZGV4KCBhdHRyaWJ1dGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvL1xuXG5cdFx0XHRpZiAoIG9iamVjdC5pc01lc2ggKSB7XG5cblx0XHRcdFx0aWYgKCBtYXRlcmlhbC53aXJlZnJhbWUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRzdGF0ZS5zZXRMaW5lV2lkdGgoIG1hdGVyaWFsLndpcmVmcmFtZUxpbmV3aWR0aCAqIGdldFRhcmdldFBpeGVsUmF0aW8oKSApO1xuXHRcdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIF9nbC5MSU5FUyApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKCBfZ2wuVFJJQU5HTEVTICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNMaW5lICkge1xuXG5cdFx0XHRcdGxldCBsaW5lV2lkdGggPSBtYXRlcmlhbC5saW5ld2lkdGg7XG5cblx0XHRcdFx0aWYgKCBsaW5lV2lkdGggPT09IHVuZGVmaW5lZCApIGxpbmVXaWR0aCA9IDE7IC8vIE5vdCB1c2luZyBMaW5lKk1hdGVyaWFsXG5cblx0XHRcdFx0c3RhdGUuc2V0TGluZVdpZHRoKCBsaW5lV2lkdGggKiBnZXRUYXJnZXRQaXhlbFJhdGlvKCkgKTtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5pc0xpbmVTZWdtZW50cyApIHtcblxuXHRcdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIF9nbC5MSU5FUyApO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0xpbmVMb29wICkge1xuXG5cdFx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggX2dsLkxJTkVfTE9PUCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKCBfZ2wuTElORV9TVFJJUCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzUG9pbnRzICkge1xuXG5cdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIF9nbC5QT0lOVFMgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzU3ByaXRlICkge1xuXG5cdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIF9nbC5UUklBTkdMRVMgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG9iamVjdC5pc0JhdGNoZWRNZXNoICkge1xuXG5cdFx0XHRcdGlmICggb2JqZWN0Ll9tdWx0aURyYXdJbnN0YW5jZXMgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHQvLyBAZGVwcmVjYXRlZCwgcjE3NFxuXHRcdFx0XHRcdHdhcm5PbmNlKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogcmVuZGVyTXVsdGlEcmF3SW5zdGFuY2VzIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiByMTg0LiBBcHBlbmQgdG8gcmVuZGVyTXVsdGlEcmF3IGFyZ3VtZW50cyBhbmQgdXNlIGluZGlyZWN0aW9uLicgKTtcblx0XHRcdFx0XHRyZW5kZXJlci5yZW5kZXJNdWx0aURyYXdJbnN0YW5jZXMoIG9iamVjdC5fbXVsdGlEcmF3U3RhcnRzLCBvYmplY3QuX211bHRpRHJhd0NvdW50cywgb2JqZWN0Ll9tdWx0aURyYXdDb3VudCwgb2JqZWN0Ll9tdWx0aURyYXdJbnN0YW5jZXMgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCAhIGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfbXVsdGlfZHJhdycgKSApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3Qgc3RhcnRzID0gb2JqZWN0Ll9tdWx0aURyYXdTdGFydHM7XG5cdFx0XHRcdFx0XHRjb25zdCBjb3VudHMgPSBvYmplY3QuX211bHRpRHJhd0NvdW50cztcblx0XHRcdFx0XHRcdGNvbnN0IGRyYXdDb3VudCA9IG9iamVjdC5fbXVsdGlEcmF3Q291bnQ7XG5cdFx0XHRcdFx0XHRjb25zdCBieXRlc1BlckVsZW1lbnQgPSBpbmRleCA/IGF0dHJpYnV0ZXMuZ2V0KCBpbmRleCApLmJ5dGVzUGVyRWxlbWVudCA6IDE7XG5cdFx0XHRcdFx0XHRjb25zdCB1bmlmb3JtcyA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApLmN1cnJlbnRQcm9ncmFtLmdldFVuaWZvcm1zKCk7XG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkcmF3Q291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0dW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ19nbF9EcmF3SUQnLCBpICk7XG5cdFx0XHRcdFx0XHRcdHJlbmRlcmVyLnJlbmRlciggc3RhcnRzWyBpIF0gLyBieXRlc1BlckVsZW1lbnQsIGNvdW50c1sgaSBdICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHJlbmRlcmVyLnJlbmRlck11bHRpRHJhdyggb2JqZWN0Ll9tdWx0aURyYXdTdGFydHMsIG9iamVjdC5fbXVsdGlEcmF3Q291bnRzLCBvYmplY3QuX211bHRpRHJhd0NvdW50ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNJbnN0YW5jZWRNZXNoICkge1xuXG5cdFx0XHRcdHJlbmRlcmVyLnJlbmRlckluc3RhbmNlcyggZHJhd1N0YXJ0LCBkcmF3Q291bnQsIG9iamVjdC5jb3VudCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBnZW9tZXRyeS5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHRcdGNvbnN0IG1heEluc3RhbmNlQ291bnQgPSBnZW9tZXRyeS5fbWF4SW5zdGFuY2VDb3VudCAhPT0gdW5kZWZpbmVkID8gZ2VvbWV0cnkuX21heEluc3RhbmNlQ291bnQgOiBJbmZpbml0eTtcblx0XHRcdFx0Y29uc3QgaW5zdGFuY2VDb3VudCA9IE1hdGgubWluKCBnZW9tZXRyeS5pbnN0YW5jZUNvdW50LCBtYXhJbnN0YW5jZUNvdW50ICk7XG5cblx0XHRcdFx0cmVuZGVyZXIucmVuZGVySW5zdGFuY2VzKCBkcmF3U3RhcnQsIGRyYXdDb3VudCwgaW5zdGFuY2VDb3VudCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJlbmRlcmVyLnJlbmRlciggZHJhd1N0YXJ0LCBkcmF3Q291bnQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdC8vIENvbXBpbGVcblxuXHRcdGZ1bmN0aW9uIHByZXBhcmVNYXRlcmlhbCggbWF0ZXJpYWwsIHNjZW5lLCBvYmplY3QgKSB7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwudHJhbnNwYXJlbnQgPT09IHRydWUgJiYgbWF0ZXJpYWwuc2lkZSA9PT0gRG91YmxlU2lkZSAmJiBtYXRlcmlhbC5mb3JjZVNpbmdsZVBhc3MgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsLnNpZGUgPSBCYWNrU2lkZTtcblx0XHRcdFx0bWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0XHRnZXRQcm9ncmFtKCBtYXRlcmlhbCwgc2NlbmUsIG9iamVjdCApO1xuXG5cdFx0XHRcdG1hdGVyaWFsLnNpZGUgPSBGcm9udFNpZGU7XG5cdFx0XHRcdG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdFx0Z2V0UHJvZ3JhbSggbWF0ZXJpYWwsIHNjZW5lLCBvYmplY3QgKTtcblxuXHRcdFx0XHRtYXRlcmlhbC5zaWRlID0gRG91YmxlU2lkZTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRnZXRQcm9ncmFtKCBtYXRlcmlhbCwgc2NlbmUsIG9iamVjdCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBDb21waWxlcyBhbGwgbWF0ZXJpYWxzIGluIHRoZSBzY2VuZSB3aXRoIHRoZSBjYW1lcmEuIFRoaXMgaXMgdXNlZnVsIHRvIHByZWNvbXBpbGUgc2hhZGVyc1xuXHRcdCAqIGJlZm9yZSB0aGUgZmlyc3QgcmVuZGVyaW5nLiBJZiB5b3Ugd2FudCB0byBhZGQgYSAzRCBvYmplY3QgdG8gYW4gZXhpc3Rpbmcgc2NlbmUsIHVzZSB0aGUgdGhpcmRcblx0XHQgKiBvcHRpb25hbCBwYXJhbWV0ZXIgZm9yIGFwcGx5aW5nIHRoZSB0YXJnZXQgc2NlbmUuXG5cdFx0ICpcblx0XHQgKiBOb3RlIHRoYXQgdGhlICh0YXJnZXQpIHNjZW5lJ3MgbGlnaHRpbmcgYW5kIGVudmlyb25tZW50IG11c3QgYmUgY29uZmlndXJlZCBiZWZvcmUgY2FsbGluZyB0aGlzIG1ldGhvZC5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7T2JqZWN0M0R9IHNjZW5lIC0gVGhlIHNjZW5lIG9yIGFub3RoZXIgdHlwZSBvZiAzRCBvYmplY3QgdG8gcHJlY29tcGlsZS5cblx0XHQgKiBAcGFyYW0ge0NhbWVyYX0gY2FtZXJhIC0gVGhlIGNhbWVyYS5cblx0XHQgKiBAcGFyYW0gez9TY2VuZX0gW3RhcmdldFNjZW5lPW51bGxdIC0gVGhlIHRhcmdldCBzY2VuZS5cblx0XHQgKiBAcmV0dXJuIHtTZXQ8TWF0ZXJpYWw+fSBUaGUgcHJlY29tcGlsZWQgbWF0ZXJpYWxzLlxuXHRcdCAqL1xuXHRcdHRoaXMuY29tcGlsZSA9IGZ1bmN0aW9uICggc2NlbmUsIGNhbWVyYSwgdGFyZ2V0U2NlbmUgPSBudWxsICkge1xuXG5cdFx0XHRpZiAoIHRhcmdldFNjZW5lID09PSBudWxsICkgdGFyZ2V0U2NlbmUgPSBzY2VuZTtcblxuXHRcdFx0Y3VycmVudFJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzLmdldCggdGFyZ2V0U2NlbmUgKTtcblx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5pbml0KCBjYW1lcmEgKTtcblxuXHRcdFx0cmVuZGVyU3RhdGVTdGFjay5wdXNoKCBjdXJyZW50UmVuZGVyU3RhdGUgKTtcblxuXHRcdFx0Ly8gZ2F0aGVyIGxpZ2h0cyBmcm9tIGJvdGggdGhlIHRhcmdldCBzY2VuZSBhbmQgdGhlIG5ldyBvYmplY3QgdGhhdCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBzY2VuZS5cblxuXHRcdFx0dGFyZ2V0U2NlbmUudHJhdmVyc2VWaXNpYmxlKCBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5pc0xpZ2h0ICYmIG9iamVjdC5sYXllcnMudGVzdCggY2FtZXJhLmxheWVycyApICkge1xuXG5cdFx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnB1c2hMaWdodCggb2JqZWN0ICk7XG5cblx0XHRcdFx0XHRpZiAoIG9iamVjdC5jYXN0U2hhZG93ICkge1xuXG5cdFx0XHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaFNoYWRvdyggb2JqZWN0ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9ICk7XG5cblx0XHRcdGlmICggc2NlbmUgIT09IHRhcmdldFNjZW5lICkge1xuXG5cdFx0XHRcdHNjZW5lLnRyYXZlcnNlVmlzaWJsZSggZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRcdFx0XHRpZiAoIG9iamVjdC5pc0xpZ2h0ICYmIG9iamVjdC5sYXllcnMudGVzdCggY2FtZXJhLmxheWVycyApICkge1xuXG5cdFx0XHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaExpZ2h0KCBvYmplY3QgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBvYmplY3QuY2FzdFNoYWRvdyApIHtcblxuXHRcdFx0XHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaFNoYWRvdyggb2JqZWN0ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzKCk7XG5cblx0XHRcdC8vIE9ubHkgaW5pdGlhbGl6ZSBtYXRlcmlhbHMgaW4gdGhlIG5ldyBzY2VuZSwgbm90IHRoZSB0YXJnZXRTY2VuZS5cblxuXHRcdFx0Y29uc3QgbWF0ZXJpYWxzID0gbmV3IFNldCgpO1xuXG5cdFx0XHRzY2VuZS50cmF2ZXJzZSggZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRcdFx0aWYgKCAhICggb2JqZWN0LmlzTWVzaCB8fCBvYmplY3QuaXNQb2ludHMgfHwgb2JqZWN0LmlzTGluZSB8fCBvYmplY3QuaXNTcHJpdGUgKSApIHtcblxuXHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgbWF0ZXJpYWwgPSBvYmplY3QubWF0ZXJpYWw7XG5cblx0XHRcdFx0aWYgKCBtYXRlcmlhbCApIHtcblxuXHRcdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbWF0ZXJpYWwgKSApIHtcblxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgbWF0ZXJpYWwubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnN0IG1hdGVyaWFsMiA9IG1hdGVyaWFsWyBpIF07XG5cblx0XHRcdFx0XHRcdFx0cHJlcGFyZU1hdGVyaWFsKCBtYXRlcmlhbDIsIHRhcmdldFNjZW5lLCBvYmplY3QgKTtcblx0XHRcdFx0XHRcdFx0bWF0ZXJpYWxzLmFkZCggbWF0ZXJpYWwyICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHByZXBhcmVNYXRlcmlhbCggbWF0ZXJpYWwsIHRhcmdldFNjZW5lLCBvYmplY3QgKTtcblx0XHRcdFx0XHRcdG1hdGVyaWFscy5hZGQoIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9ICk7XG5cblx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlU3RhY2sucG9wKCk7XG5cblx0XHRcdHJldHVybiBtYXRlcmlhbHM7XG5cblx0XHR9O1xuXG5cdFx0Ly8gY29tcGlsZUFzeW5jXG5cblx0XHQvKipcblx0XHQgKiBBc3luY2hyb25vdXMgdmVyc2lvbiBvZiB7QGxpbmsgV2ViR0xSZW5kZXJlciNjb21waWxlfS5cblx0XHQgKlxuXHRcdCAqIFRoaXMgbWV0aG9kIG1ha2VzIHVzZSBvZiB0aGUgYEtIUl9wYXJhbGxlbF9zaGFkZXJfY29tcGlsZWAgV2ViR0wgZXh0ZW5zaW9uLiBIZW5jZSxcblx0XHQgKiBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyB2ZXJzaW9uIG9mIGBjb21waWxlKClgIHdoZW5ldmVyIHBvc3NpYmxlLlxuXHRcdCAqXG5cdFx0ICogQGFzeW5jXG5cdFx0ICogQHBhcmFtIHtPYmplY3QzRH0gc2NlbmUgLSBUaGUgc2NlbmUgb3IgYW5vdGhlciB0eXBlIG9mIDNEIG9iamVjdCB0byBwcmVjb21waWxlLlxuXHRcdCAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgLSBUaGUgY2FtZXJhLlxuXHRcdCAqIEBwYXJhbSB7P1NjZW5lfSBbdGFyZ2V0U2NlbmU9bnVsbF0gLSBUaGUgdGFyZ2V0IHNjZW5lLlxuXHRcdCAqIEByZXR1cm4ge1Byb21pc2V9IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGdpdmVuIHNjZW5lIGNhbiBiZSByZW5kZXJlZCB3aXRob3V0IHVubmVjZXNzYXJ5IHN0YWxsaW5nIGR1ZSB0byBzaGFkZXIgY29tcGlsYXRpb24uXG5cdFx0ICovXG5cdFx0dGhpcy5jb21waWxlQXN5bmMgPSBmdW5jdGlvbiAoIHNjZW5lLCBjYW1lcmEsIHRhcmdldFNjZW5lID0gbnVsbCApIHtcblxuXHRcdFx0Y29uc3QgbWF0ZXJpYWxzID0gdGhpcy5jb21waWxlKCBzY2VuZSwgY2FtZXJhLCB0YXJnZXRTY2VuZSApO1xuXG5cdFx0XHQvLyBXYWl0IGZvciBhbGwgdGhlIG1hdGVyaWFscyBpbiB0aGUgbmV3IG9iamVjdCB0byBpbmRpY2F0ZSB0aGF0IHRoZXkncmVcblx0XHRcdC8vIHJlYWR5IHRvIGJlIHVzZWQgYmVmb3JlIHJlc29sdmluZyB0aGUgcHJvbWlzZS5cblxuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKCAoIHJlc29sdmUgKSA9PiB7XG5cblx0XHRcdFx0ZnVuY3Rpb24gY2hlY2tNYXRlcmlhbHNSZWFkeSgpIHtcblxuXHRcdFx0XHRcdG1hdGVyaWFscy5mb3JFYWNoKCBmdW5jdGlvbiAoIG1hdGVyaWFsICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBtYXRlcmlhbFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwgKTtcblx0XHRcdFx0XHRcdGNvbnN0IHByb2dyYW0gPSBtYXRlcmlhbFByb3BlcnRpZXMuY3VycmVudFByb2dyYW07XG5cblx0XHRcdFx0XHRcdGlmICggcHJvZ3JhbS5pc1JlYWR5KCkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gcmVtb3ZlIGFueSBwcm9ncmFtcyB0aGF0IHJlcG9ydCB0aGV5J3JlIHJlYWR5IHRvIHVzZSBmcm9tIHRoZSBsaXN0XG5cdFx0XHRcdFx0XHRcdG1hdGVyaWFscy5kZWxldGUoIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdC8vIG9uY2UgdGhlIGxpc3Qgb2YgY29tcGlsaW5nIG1hdGVyaWFscyBpcyBlbXB0eSwgY2FsbCB0aGUgY2FsbGJhY2tcblxuXHRcdFx0XHRcdGlmICggbWF0ZXJpYWxzLnNpemUgPT09IDAgKSB7XG5cblx0XHRcdFx0XHRcdHJlc29sdmUoIHNjZW5lICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBpZiBzb21lIG1hdGVyaWFscyBhcmUgc3RpbGwgbm90IHJlYWR5LCB3YWl0IGEgYml0IGFuZCBjaGVjayBhZ2FpblxuXG5cdFx0XHRcdFx0c2V0VGltZW91dCggY2hlY2tNYXRlcmlhbHNSZWFkeSwgMTAgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBleHRlbnNpb25zLmdldCggJ0tIUl9wYXJhbGxlbF9zaGFkZXJfY29tcGlsZScgKSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGNhbiBjaGVjayB0aGUgY29tcGlsYXRpb24gc3RhdHVzIG9mIHRoZSBtYXRlcmlhbHMgd2l0aG91dFxuXHRcdFx0XHRcdC8vIGJsb2NraW5nIHRoZW4gZG8gc28gcmlnaHQgYXdheS5cblxuXHRcdFx0XHRcdGNoZWNrTWF0ZXJpYWxzUmVhZHkoKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHN0YXJ0IGJ5IHdhaXRpbmcgYSBiaXQgdG8gZ2l2ZSB0aGUgbWF0ZXJpYWxzIHdlIGp1c3Rcblx0XHRcdFx0XHQvLyBpbml0aWFsaXplZCBhIGNoYW5jZSB0byBmaW5pc2guXG5cblx0XHRcdFx0XHRzZXRUaW1lb3V0KCBjaGVja01hdGVyaWFsc1JlYWR5LCAxMCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSApO1xuXG5cdFx0fTtcblxuXHRcdC8vIEFuaW1hdGlvbiBMb29wXG5cblx0XHRsZXQgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gbnVsbDtcblxuXHRcdGZ1bmN0aW9uIG9uQW5pbWF0aW9uRnJhbWUoIHRpbWUgKSB7XG5cblx0XHRcdGlmICggb25BbmltYXRpb25GcmFtZUNhbGxiYWNrICkgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrKCB0aW1lICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvblhSU2Vzc2lvblN0YXJ0KCkge1xuXG5cdFx0XHRhbmltYXRpb24uc3RvcCgpO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25YUlNlc3Npb25FbmQoKSB7XG5cblx0XHRcdGFuaW1hdGlvbi5zdGFydCgpO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYW5pbWF0aW9uID0gbmV3IFdlYkdMQW5pbWF0aW9uKCk7XG5cdFx0YW5pbWF0aW9uLnNldEFuaW1hdGlvbkxvb3AoIG9uQW5pbWF0aW9uRnJhbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICkgYW5pbWF0aW9uLnNldENvbnRleHQoIHNlbGYgKTtcblxuXHRcdHRoaXMuc2V0QW5pbWF0aW9uTG9vcCA9IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHRcdG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayA9IGNhbGxiYWNrO1xuXHRcdFx0eHIuc2V0QW5pbWF0aW9uTG9vcCggY2FsbGJhY2sgKTtcblxuXHRcdFx0KCBjYWxsYmFjayA9PT0gbnVsbCApID8gYW5pbWF0aW9uLnN0b3AoKSA6IGFuaW1hdGlvbi5zdGFydCgpO1xuXG5cdFx0fTtcblxuXHRcdHhyLmFkZEV2ZW50TGlzdGVuZXIoICdzZXNzaW9uc3RhcnQnLCBvblhSU2Vzc2lvblN0YXJ0ICk7XG5cdFx0eHIuYWRkRXZlbnRMaXN0ZW5lciggJ3Nlc3Npb25lbmQnLCBvblhSU2Vzc2lvbkVuZCApO1xuXG5cdFx0Ly8gUmVuZGVyaW5nXG5cblx0XHQvKipcblx0XHQgKiBSZW5kZXJzIHRoZSBnaXZlbiBzY2VuZSAob3Igb3RoZXIgdHlwZSBvZiAzRCBvYmplY3QpIHVzaW5nIHRoZSBnaXZlbiBjYW1lcmEuXG5cdFx0ICpcblx0XHQgKiBUaGUgcmVuZGVyIGlzIGRvbmUgdG8gYSBwcmV2aW91c2x5IHNwZWNpZmllZCByZW5kZXIgdGFyZ2V0IHNldCBieSBjYWxsaW5nIHtAbGluayBXZWJHTFJlbmRlcmVyI3NldFJlbmRlclRhcmdldH1cblx0XHQgKiBvciB0byB0aGUgY2FudmFzIGFzIHVzdWFsLlxuXHRcdCAqXG5cdFx0ICogQnkgZGVmYXVsdCByZW5kZXIgYnVmZmVycyBhcmUgY2xlYXJlZCBiZWZvcmUgcmVuZGVyaW5nIGJ1dCB5b3UgY2FuIHByZXZlbnRcblx0XHQgKiB0aGlzIGJ5IHNldHRpbmcgdGhlIHByb3BlcnR5IGBhdXRvQ2xlYXJgIHRvIGBmYWxzZWAuIElmIHlvdSB3YW50IHRvIHByZXZlbnRcblx0XHQgKiBvbmx5IGNlcnRhaW4gYnVmZmVycyBiZWluZyBjbGVhcmVkIHlvdSBjYW4gYGF1dG9DbGVhckNvbG9yYCwgYGF1dG9DbGVhckRlcHRoYFxuXHRcdCAqIG9yIGBhdXRvQ2xlYXJTdGVuY2lsYCB0byBgZmFsc2VgLiBUbyBmb3JjZSBhIGNsZWFyLCB1c2Uge0BsaW5rIFdlYkdMUmVuZGVyZXIjY2xlYXJ9LlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtPYmplY3QzRH0gc2NlbmUgLSBUaGUgc2NlbmUgdG8gcmVuZGVyLlxuXHRcdCAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgLSBUaGUgY2FtZXJhLlxuXHRcdCAqL1xuXHRcdHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKCBzY2VuZSwgY2FtZXJhICkge1xuXG5cdFx0XHRpZiAoIGNhbWVyYSAhPT0gdW5kZWZpbmVkICYmIGNhbWVyYS5pc0NhbWVyYSAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZW5kZXI6IGNhbWVyYSBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuQ2FtZXJhLicgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggX2lzQ29udGV4dExvc3QgPT09IHRydWUgKSByZXR1cm47XG5cblx0XHRcdC8vIHVwZGF0ZSBzY2VuZSBncmFwaFxuXG5cdFx0XHRpZiAoIHNjZW5lLm1hdHJpeFdvcmxkQXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHNjZW5lLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHRcdC8vIHVwZGF0ZSBjYW1lcmEgbWF0cmljZXMgYW5kIGZydXN0dW1cblxuXHRcdFx0aWYgKCBjYW1lcmEucGFyZW50ID09PSBudWxsICYmIGNhbWVyYS5tYXRyaXhXb3JsZEF1dG9VcGRhdGUgPT09IHRydWUgKSBjYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdFx0aWYgKCB4ci5lbmFibGVkID09PSB0cnVlICYmIHhyLmlzUHJlc2VudGluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRpZiAoIHhyLmNhbWVyYUF1dG9VcGRhdGUgPT09IHRydWUgKSB4ci51cGRhdGVDYW1lcmEoIGNhbWVyYSApO1xuXG5cdFx0XHRcdGNhbWVyYSA9IHhyLmdldENhbWVyYSgpOyAvLyB1c2UgWFIgY2FtZXJhIGZvciByZW5kZXJpbmdcblxuXHRcdFx0fVxuXG5cdFx0XHQvL1xuXHRcdFx0aWYgKCBzY2VuZS5pc1NjZW5lID09PSB0cnVlICkgc2NlbmUub25CZWZvcmVSZW5kZXIoIF90aGlzLCBzY2VuZSwgY2FtZXJhLCBfY3VycmVudFJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUgPSByZW5kZXJTdGF0ZXMuZ2V0KCBzY2VuZSwgcmVuZGVyU3RhdGVTdGFjay5sZW5ndGggKTtcblx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5pbml0KCBjYW1lcmEgKTtcblxuXHRcdFx0cmVuZGVyU3RhdGVTdGFjay5wdXNoKCBjdXJyZW50UmVuZGVyU3RhdGUgKTtcblxuXHRcdFx0X3Byb2pTY3JlZW5NYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggY2FtZXJhLnByb2plY3Rpb25NYXRyaXgsIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKTtcblx0XHRcdF9mcnVzdHVtLnNldEZyb21Qcm9qZWN0aW9uTWF0cml4KCBfcHJvalNjcmVlbk1hdHJpeCwgV2ViR0xDb29yZGluYXRlU3lzdGVtLCBjYW1lcmEucmV2ZXJzZWREZXB0aCApO1xuXG5cdFx0XHRfbG9jYWxDbGlwcGluZ0VuYWJsZWQgPSB0aGlzLmxvY2FsQ2xpcHBpbmdFbmFibGVkO1xuXHRcdFx0X2NsaXBwaW5nRW5hYmxlZCA9IGNsaXBwaW5nLmluaXQoIHRoaXMuY2xpcHBpbmdQbGFuZXMsIF9sb2NhbENsaXBwaW5nRW5hYmxlZCApO1xuXG5cdFx0XHRjdXJyZW50UmVuZGVyTGlzdCA9IHJlbmRlckxpc3RzLmdldCggc2NlbmUsIHJlbmRlckxpc3RTdGFjay5sZW5ndGggKTtcblx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0LmluaXQoKTtcblxuXHRcdFx0cmVuZGVyTGlzdFN0YWNrLnB1c2goIGN1cnJlbnRSZW5kZXJMaXN0ICk7XG5cblx0XHRcdGlmICggeHIuZW5hYmxlZCA9PT0gdHJ1ZSAmJiB4ci5pc1ByZXNlbnRpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0Y29uc3QgZGVwdGhTZW5zaW5nTWVzaCA9IF90aGlzLnhyLmdldERlcHRoU2Vuc2luZ01lc2goKTtcblxuXHRcdFx0XHRpZiAoIGRlcHRoU2Vuc2luZ01lc2ggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRwcm9qZWN0T2JqZWN0KCBkZXB0aFNlbnNpbmdNZXNoLCBjYW1lcmEsIC0gSW5maW5pdHksIF90aGlzLnNvcnRPYmplY3RzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHByb2plY3RPYmplY3QoIHNjZW5lLCBjYW1lcmEsIDAsIF90aGlzLnNvcnRPYmplY3RzICk7XG5cblx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0LmZpbmlzaCgpO1xuXG5cdFx0XHRpZiAoIF90aGlzLnNvcnRPYmplY3RzID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0LnNvcnQoIF9vcGFxdWVTb3J0LCBfdHJhbnNwYXJlbnRTb3J0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0X3JlbmRlckJhY2tncm91bmQgPSB4ci5lbmFibGVkID09PSBmYWxzZSB8fCB4ci5pc1ByZXNlbnRpbmcgPT09IGZhbHNlIHx8IHhyLmhhc0RlcHRoU2Vuc2luZygpID09PSBmYWxzZTtcblx0XHRcdGlmICggX3JlbmRlckJhY2tncm91bmQgKSB7XG5cblx0XHRcdFx0YmFja2dyb3VuZC5hZGRUb1JlbmRlckxpc3QoIGN1cnJlbnRSZW5kZXJMaXN0LCBzY2VuZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vXG5cblx0XHRcdHRoaXMuaW5mby5yZW5kZXIuZnJhbWUgKys7XG5cblx0XHRcdGlmICggX2NsaXBwaW5nRW5hYmxlZCA9PT0gdHJ1ZSApIGNsaXBwaW5nLmJlZ2luU2hhZG93cygpO1xuXG5cdFx0XHRjb25zdCBzaGFkb3dzQXJyYXkgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUuc2hhZG93c0FycmF5O1xuXG5cdFx0XHRzaGFkb3dNYXAucmVuZGVyKCBzaGFkb3dzQXJyYXksIHNjZW5lLCBjYW1lcmEgKTtcblxuXHRcdFx0aWYgKCBfY2xpcHBpbmdFbmFibGVkID09PSB0cnVlICkgY2xpcHBpbmcuZW5kU2hhZG93cygpO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHRpZiAoIHRoaXMuaW5mby5hdXRvUmVzZXQgPT09IHRydWUgKSB0aGlzLmluZm8ucmVzZXQoKTtcblxuXHRcdFx0Ly8gcmVuZGVyIHNjZW5lXG5cblx0XHRcdGNvbnN0IG9wYXF1ZU9iamVjdHMgPSBjdXJyZW50UmVuZGVyTGlzdC5vcGFxdWU7XG5cdFx0XHRjb25zdCB0cmFuc21pc3NpdmVPYmplY3RzID0gY3VycmVudFJlbmRlckxpc3QudHJhbnNtaXNzaXZlO1xuXG5cdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUuc2V0dXBMaWdodHMoKTtcblxuXHRcdFx0aWYgKCBjYW1lcmEuaXNBcnJheUNhbWVyYSApIHtcblxuXHRcdFx0XHRjb25zdCBjYW1lcmFzID0gY2FtZXJhLmNhbWVyYXM7XG5cblx0XHRcdFx0aWYgKCB0cmFuc21pc3NpdmVPYmplY3RzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjYW1lcmFzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGNhbWVyYTIgPSBjYW1lcmFzWyBpIF07XG5cblx0XHRcdFx0XHRcdHJlbmRlclRyYW5zbWlzc2lvblBhc3MoIG9wYXF1ZU9iamVjdHMsIHRyYW5zbWlzc2l2ZU9iamVjdHMsIHNjZW5lLCBjYW1lcmEyICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggX3JlbmRlckJhY2tncm91bmQgKSBiYWNrZ3JvdW5kLnJlbmRlciggc2NlbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjYW1lcmFzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBjYW1lcmEyID0gY2FtZXJhc1sgaSBdO1xuXG5cdFx0XHRcdFx0cmVuZGVyU2NlbmUoIGN1cnJlbnRSZW5kZXJMaXN0LCBzY2VuZSwgY2FtZXJhMiwgY2FtZXJhMi52aWV3cG9ydCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoIHRyYW5zbWlzc2l2ZU9iamVjdHMubGVuZ3RoID4gMCApIHJlbmRlclRyYW5zbWlzc2lvblBhc3MoIG9wYXF1ZU9iamVjdHMsIHRyYW5zbWlzc2l2ZU9iamVjdHMsIHNjZW5lLCBjYW1lcmEgKTtcblxuXHRcdFx0XHRpZiAoIF9yZW5kZXJCYWNrZ3JvdW5kICkgYmFja2dyb3VuZC5yZW5kZXIoIHNjZW5lICk7XG5cblx0XHRcdFx0cmVuZGVyU2NlbmUoIGN1cnJlbnRSZW5kZXJMaXN0LCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly9cblxuXHRcdFx0aWYgKCBfY3VycmVudFJlbmRlclRhcmdldCAhPT0gbnVsbCAmJiBfY3VycmVudEFjdGl2ZU1pcG1hcExldmVsID09PSAwICkge1xuXG5cdFx0XHRcdC8vIHJlc29sdmUgbXVsdGlzYW1wbGUgcmVuZGVyYnVmZmVycyB0byBhIHNpbmdsZS1zYW1wbGUgdGV4dHVyZSBpZiBuZWNlc3NhcnlcblxuXHRcdFx0XHR0ZXh0dXJlcy51cGRhdGVNdWx0aXNhbXBsZVJlbmRlclRhcmdldCggX2N1cnJlbnRSZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHQvLyBHZW5lcmF0ZSBtaXBtYXAgaWYgd2UncmUgdXNpbmcgYW55IGtpbmQgb2YgbWlwbWFwIGZpbHRlcmluZ1xuXG5cdFx0XHRcdHRleHR1cmVzLnVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcCggX2N1cnJlbnRSZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvL1xuXG5cdFx0XHRpZiAoIHNjZW5lLmlzU2NlbmUgPT09IHRydWUgKSBzY2VuZS5vbkFmdGVyUmVuZGVyKCBfdGhpcywgc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0XHQvLyBfZ2wuZmluaXNoKCk7XG5cblx0XHRcdGJpbmRpbmdTdGF0ZXMucmVzZXREZWZhdWx0U3RhdGUoKTtcblx0XHRcdF9jdXJyZW50TWF0ZXJpYWxJZCA9IC0xO1xuXHRcdFx0X2N1cnJlbnRDYW1lcmEgPSBudWxsO1xuXG5cdFx0XHRyZW5kZXJTdGF0ZVN0YWNrLnBvcCgpO1xuXG5cdFx0XHRpZiAoIHJlbmRlclN0YXRlU3RhY2subGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUgPSByZW5kZXJTdGF0ZVN0YWNrWyByZW5kZXJTdGF0ZVN0YWNrLmxlbmd0aCAtIDEgXTtcblxuXHRcdFx0XHRpZiAoIF9jbGlwcGluZ0VuYWJsZWQgPT09IHRydWUgKSBjbGlwcGluZy5zZXRHbG9iYWxTdGF0ZSggX3RoaXMuY2xpcHBpbmdQbGFuZXMsIGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS5jYW1lcmEgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUgPSBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJlbmRlckxpc3RTdGFjay5wb3AoKTtcblxuXHRcdFx0aWYgKCByZW5kZXJMaXN0U3RhY2subGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdCA9IHJlbmRlckxpc3RTdGFja1sgcmVuZGVyTGlzdFN0YWNrLmxlbmd0aCAtIDEgXTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdCA9IG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBwcm9qZWN0T2JqZWN0KCBvYmplY3QsIGNhbWVyYSwgZ3JvdXBPcmRlciwgc29ydE9iamVjdHMgKSB7XG5cblx0XHRcdGlmICggb2JqZWN0LnZpc2libGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRjb25zdCB2aXNpYmxlID0gb2JqZWN0LmxheWVycy50ZXN0KCBjYW1lcmEubGF5ZXJzICk7XG5cblx0XHRcdGlmICggdmlzaWJsZSApIHtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5pc0dyb3VwICkge1xuXG5cdFx0XHRcdFx0Z3JvdXBPcmRlciA9IG9iamVjdC5yZW5kZXJPcmRlcjtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNMT0QgKSB7XG5cblx0XHRcdFx0XHRpZiAoIG9iamVjdC5hdXRvVXBkYXRlID09PSB0cnVlICkgb2JqZWN0LnVwZGF0ZSggY2FtZXJhICk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzTGlnaHQgKSB7XG5cblx0XHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaExpZ2h0KCBvYmplY3QgKTtcblxuXHRcdFx0XHRcdGlmICggb2JqZWN0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5wdXNoU2hhZG93KCBvYmplY3QgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNTcHJpdGUgKSB7XG5cblx0XHRcdFx0XHRpZiAoICEgb2JqZWN0LmZydXN0dW1DdWxsZWQgfHwgX2ZydXN0dW0uaW50ZXJzZWN0c1Nwcml0ZSggb2JqZWN0ICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggc29ydE9iamVjdHMgKSB7XG5cblx0XHRcdFx0XHRcdFx0X3ZlY3RvcjQuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBvYmplY3QubWF0cml4V29ybGQgKVxuXHRcdFx0XHRcdFx0XHRcdC5hcHBseU1hdHJpeDQoIF9wcm9qU2NyZWVuTWF0cml4ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Y29uc3QgZ2VvbWV0cnkgPSBvYmplY3RzLnVwZGF0ZSggb2JqZWN0ICk7XG5cdFx0XHRcdFx0XHRjb25zdCBtYXRlcmlhbCA9IG9iamVjdC5tYXRlcmlhbDtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0LnB1c2goIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCBfdmVjdG9yNC56LCBudWxsICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNNZXNoIHx8IG9iamVjdC5pc0xpbmUgfHwgb2JqZWN0LmlzUG9pbnRzICkge1xuXG5cdFx0XHRcdFx0aWYgKCAhIG9iamVjdC5mcnVzdHVtQ3VsbGVkIHx8IF9mcnVzdHVtLmludGVyc2VjdHNPYmplY3QoIG9iamVjdCApICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBnZW9tZXRyeSA9IG9iamVjdHMudXBkYXRlKCBvYmplY3QgKTtcblx0XHRcdFx0XHRcdGNvbnN0IG1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNvcnRPYmplY3RzICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggb2JqZWN0LmJvdW5kaW5nU3BoZXJlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIG9iamVjdC5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIG9iamVjdC5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblx0XHRcdFx0XHRcdFx0XHRfdmVjdG9yNC5jb3B5KCBvYmplY3QuYm91bmRpbmdTcGhlcmUuY2VudGVyICk7XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSBnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblx0XHRcdFx0XHRcdFx0XHRfdmVjdG9yNC5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZS5jZW50ZXIgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0X3ZlY3RvcjRcblx0XHRcdFx0XHRcdFx0XHQuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKVxuXHRcdFx0XHRcdFx0XHRcdC5hcHBseU1hdHJpeDQoIF9wcm9qU2NyZWVuTWF0cml4ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBtYXRlcmlhbCApICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnN0IGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdFx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBncm91cHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgZ3JvdXBNYXRlcmlhbCA9IG1hdGVyaWFsWyBncm91cC5tYXRlcmlhbEluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIGdyb3VwTWF0ZXJpYWwgJiYgZ3JvdXBNYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdC5wdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBncm91cE1hdGVyaWFsLCBncm91cE9yZGVyLCBfdmVjdG9yNC56LCBncm91cCApO1xuXG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwudmlzaWJsZSApIHtcblxuXHRcdFx0XHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdC5wdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgX3ZlY3RvcjQueiwgbnVsbCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHByb2plY3RPYmplY3QoIGNoaWxkcmVuWyBpIF0sIGNhbWVyYSwgZ3JvdXBPcmRlciwgc29ydE9iamVjdHMgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcmVuZGVyU2NlbmUoIGN1cnJlbnRSZW5kZXJMaXN0LCBzY2VuZSwgY2FtZXJhLCB2aWV3cG9ydCApIHtcblxuXHRcdFx0Y29uc3Qgb3BhcXVlT2JqZWN0cyA9IGN1cnJlbnRSZW5kZXJMaXN0Lm9wYXF1ZTtcblx0XHRcdGNvbnN0IHRyYW5zbWlzc2l2ZU9iamVjdHMgPSBjdXJyZW50UmVuZGVyTGlzdC50cmFuc21pc3NpdmU7XG5cdFx0XHRjb25zdCB0cmFuc3BhcmVudE9iamVjdHMgPSBjdXJyZW50UmVuZGVyTGlzdC50cmFuc3BhcmVudDtcblxuXHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzVmlldyggY2FtZXJhICk7XG5cblx0XHRcdGlmICggX2NsaXBwaW5nRW5hYmxlZCA9PT0gdHJ1ZSApIGNsaXBwaW5nLnNldEdsb2JhbFN0YXRlKCBfdGhpcy5jbGlwcGluZ1BsYW5lcywgY2FtZXJhICk7XG5cblx0XHRcdGlmICggdmlld3BvcnQgKSBzdGF0ZS52aWV3cG9ydCggX2N1cnJlbnRWaWV3cG9ydC5jb3B5KCB2aWV3cG9ydCApICk7XG5cblx0XHRcdGlmICggb3BhcXVlT2JqZWN0cy5sZW5ndGggPiAwICkgcmVuZGVyT2JqZWN0cyggb3BhcXVlT2JqZWN0cywgc2NlbmUsIGNhbWVyYSApO1xuXHRcdFx0aWYgKCB0cmFuc21pc3NpdmVPYmplY3RzLmxlbmd0aCA+IDAgKSByZW5kZXJPYmplY3RzKCB0cmFuc21pc3NpdmVPYmplY3RzLCBzY2VuZSwgY2FtZXJhICk7XG5cdFx0XHRpZiAoIHRyYW5zcGFyZW50T2JqZWN0cy5sZW5ndGggPiAwICkgcmVuZGVyT2JqZWN0cyggdHJhbnNwYXJlbnRPYmplY3RzLCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHRcdC8vIEVuc3VyZSBkZXB0aCBidWZmZXIgd3JpdGluZyBpcyBlbmFibGVkIHNvIGl0IGNhbiBiZSBjbGVhcmVkIG9uIG5leHQgcmVuZGVyXG5cblx0XHRcdHN0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0VGVzdCggdHJ1ZSApO1xuXHRcdFx0c3RhdGUuYnVmZmVycy5kZXB0aC5zZXRNYXNrKCB0cnVlICk7XG5cdFx0XHRzdGF0ZS5idWZmZXJzLmNvbG9yLnNldE1hc2soIHRydWUgKTtcblxuXHRcdFx0c3RhdGUuc2V0UG9seWdvbk9mZnNldCggZmFsc2UgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHJlbmRlclRyYW5zbWlzc2lvblBhc3MoIG9wYXF1ZU9iamVjdHMsIHRyYW5zbWlzc2l2ZU9iamVjdHMsIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRcdGNvbnN0IG92ZXJyaWRlTWF0ZXJpYWwgPSBzY2VuZS5pc1NjZW5lID09PSB0cnVlID8gc2NlbmUub3ZlcnJpZGVNYXRlcmlhbCA6IG51bGw7XG5cblx0XHRcdGlmICggb3ZlcnJpZGVNYXRlcmlhbCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUudHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0WyBjYW1lcmEuaWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS50cmFuc21pc3Npb25SZW5kZXJUYXJnZXRbIGNhbWVyYS5pZCBdID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KCAxLCAxLCB7XG5cdFx0XHRcdFx0Z2VuZXJhdGVNaXBtYXBzOiB0cnVlLFxuXHRcdFx0XHRcdHR5cGU6ICggZXh0ZW5zaW9ucy5oYXMoICdFWFRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXQnICkgfHwgZXh0ZW5zaW9ucy5oYXMoICdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0JyApICkgPyBIYWxmRmxvYXRUeXBlIDogVW5zaWduZWRCeXRlVHlwZSxcblx0XHRcdFx0XHRtaW5GaWx0ZXI6IExpbmVhck1pcG1hcExpbmVhckZpbHRlcixcblx0XHRcdFx0XHRzYW1wbGVzOiA0LFxuXHRcdFx0XHRcdHN0ZW5jaWxCdWZmZXI6IHN0ZW5jaWwsXG5cdFx0XHRcdFx0cmVzb2x2ZURlcHRoQnVmZmVyOiBmYWxzZSxcblx0XHRcdFx0XHRyZXNvbHZlU3RlbmNpbEJ1ZmZlcjogZmFsc2UsXG5cdFx0XHRcdFx0Y29sb3JTcGFjZTogQ29sb3JNYW5hZ2VtZW50LndvcmtpbmdDb2xvclNwYWNlLFxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gZGVidWdcblxuXHRcdFx0XHQvKlxuXHRcdFx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBQbGFuZUdlb21ldHJ5KCk7XG5cdFx0XHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKCB7IG1hcDogX3RyYW5zbWlzc2lvblJlbmRlclRhcmdldC50ZXh0dXJlIH0gKTtcblxuXHRcdFx0XHRjb25zdCBtZXNoID0gbmV3IE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXHRcdFx0XHRzY2VuZS5hZGQoIG1lc2ggKTtcblx0XHRcdFx0Ki9cblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUudHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0WyBjYW1lcmEuaWQgXTtcblxuXHRcdFx0Y29uc3QgYWN0aXZlVmlld3BvcnQgPSBjYW1lcmEudmlld3BvcnQgfHwgX2N1cnJlbnRWaWV3cG9ydDtcblx0XHRcdHRyYW5zbWlzc2lvblJlbmRlclRhcmdldC5zZXRTaXplKCBhY3RpdmVWaWV3cG9ydC56ICogX3RoaXMudHJhbnNtaXNzaW9uUmVzb2x1dGlvblNjYWxlLCBhY3RpdmVWaWV3cG9ydC53ICogX3RoaXMudHJhbnNtaXNzaW9uUmVzb2x1dGlvblNjYWxlICk7XG5cblx0XHRcdC8vXG5cblx0XHRcdGNvbnN0IGN1cnJlbnRSZW5kZXJUYXJnZXQgPSBfdGhpcy5nZXRSZW5kZXJUYXJnZXQoKTtcblx0XHRcdGNvbnN0IGN1cnJlbnRBY3RpdmVDdWJlRmFjZSA9IF90aGlzLmdldEFjdGl2ZUN1YmVGYWNlKCk7XG5cdFx0XHRjb25zdCBjdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWwgPSBfdGhpcy5nZXRBY3RpdmVNaXBtYXBMZXZlbCgpO1xuXG5cdFx0XHRfdGhpcy5zZXRSZW5kZXJUYXJnZXQoIHRyYW5zbWlzc2lvblJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRfdGhpcy5nZXRDbGVhckNvbG9yKCBfY3VycmVudENsZWFyQ29sb3IgKTtcblx0XHRcdF9jdXJyZW50Q2xlYXJBbHBoYSA9IF90aGlzLmdldENsZWFyQWxwaGEoKTtcblx0XHRcdGlmICggX2N1cnJlbnRDbGVhckFscGhhIDwgMSApIF90aGlzLnNldENsZWFyQ29sb3IoIDB4ZmZmZmZmLCAwLjUgKTtcblxuXHRcdFx0X3RoaXMuY2xlYXIoKTtcblxuXHRcdFx0aWYgKCBfcmVuZGVyQmFja2dyb3VuZCApIGJhY2tncm91bmQucmVuZGVyKCBzY2VuZSApO1xuXG5cdFx0XHQvLyBUdXJuIG9mZiB0aGUgZmVhdHVyZXMgd2hpY2ggY2FuIGFmZmVjdCB0aGUgZnJhZyBjb2xvciBmb3Igb3BhcXVlIG9iamVjdHMgcGFzcy5cblx0XHRcdC8vIE90aGVyd2lzZSB0aGV5IGFyZSBhcHBsaWVkIHR3aWNlIGluIG9wYXF1ZSBvYmplY3RzIHBhc3MgYW5kIHRyYW5zbWlzc2lvbiBvYmplY3RzIHBhc3MuXG5cdFx0XHRjb25zdCBjdXJyZW50VG9uZU1hcHBpbmcgPSBfdGhpcy50b25lTWFwcGluZztcblx0XHRcdF90aGlzLnRvbmVNYXBwaW5nID0gTm9Ub25lTWFwcGluZztcblxuXHRcdFx0Ly8gUmVtb3ZlIHZpZXdwb3J0IGZyb20gY2FtZXJhIHRvIGF2b2lkIG5lc3RlZCByZW5kZXIgY2FsbHMgcmVzZXR0aW5nIHZpZXdwb3J0IHRvIGl0IChlLmcgUmVmbGVjdG9yKS5cblx0XHRcdC8vIFRyYW5zbWlzc2lvbiByZW5kZXIgcGFzcyByZXF1aXJlcyB2aWV3cG9ydCB0byBtYXRjaCB0aGUgdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0LlxuXHRcdFx0Y29uc3QgY3VycmVudENhbWVyYVZpZXdwb3J0ID0gY2FtZXJhLnZpZXdwb3J0O1xuXHRcdFx0aWYgKCBjYW1lcmEudmlld3BvcnQgIT09IHVuZGVmaW5lZCApIGNhbWVyYS52aWV3cG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzVmlldyggY2FtZXJhICk7XG5cblx0XHRcdGlmICggX2NsaXBwaW5nRW5hYmxlZCA9PT0gdHJ1ZSApIGNsaXBwaW5nLnNldEdsb2JhbFN0YXRlKCBfdGhpcy5jbGlwcGluZ1BsYW5lcywgY2FtZXJhICk7XG5cblx0XHRcdHJlbmRlck9iamVjdHMoIG9wYXF1ZU9iamVjdHMsIHNjZW5lLCBjYW1lcmEgKTtcblxuXHRcdFx0dGV4dHVyZXMudXBkYXRlTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQoIHRyYW5zbWlzc2lvblJlbmRlclRhcmdldCApO1xuXHRcdFx0dGV4dHVyZXMudXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwKCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb25zLmhhcyggJ1dFQkdMX211bHRpc2FtcGxlZF9yZW5kZXJfdG9fdGV4dHVyZScgKSA9PT0gZmFsc2UgKSB7IC8vIHNlZSAjMjgxMzFcblxuXHRcdFx0XHRsZXQgcmVuZGVyVGFyZ2V0TmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0cmFuc21pc3NpdmVPYmplY3RzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCByZW5kZXJJdGVtID0gdHJhbnNtaXNzaXZlT2JqZWN0c1sgaSBdO1xuXG5cdFx0XHRcdFx0Y29uc3Qgb2JqZWN0ID0gcmVuZGVySXRlbS5vYmplY3Q7XG5cdFx0XHRcdFx0Y29uc3QgZ2VvbWV0cnkgPSByZW5kZXJJdGVtLmdlb21ldHJ5O1xuXHRcdFx0XHRcdGNvbnN0IG1hdGVyaWFsID0gcmVuZGVySXRlbS5tYXRlcmlhbDtcblx0XHRcdFx0XHRjb25zdCBncm91cCA9IHJlbmRlckl0ZW0uZ3JvdXA7XG5cblx0XHRcdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IERvdWJsZVNpZGUgJiYgb2JqZWN0LmxheWVycy50ZXN0KCBjYW1lcmEubGF5ZXJzICkgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGN1cnJlbnRTaWRlID0gbWF0ZXJpYWwuc2lkZTtcblxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwuc2lkZSA9IEJhY2tTaWRlO1xuXHRcdFx0XHRcdFx0bWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHRyZW5kZXJPYmplY3QoIG9iamVjdCwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCApO1xuXG5cdFx0XHRcdFx0XHRtYXRlcmlhbC5zaWRlID0gY3VycmVudFNpZGU7XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0XHRcdHJlbmRlclRhcmdldE5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCByZW5kZXJUYXJnZXROZWVkc1VwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdHRleHR1cmVzLnVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0KCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQgKTtcblx0XHRcdFx0XHR0ZXh0dXJlcy51cGRhdGVSZW5kZXJUYXJnZXRNaXBtYXAoIHRyYW5zbWlzc2lvblJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRfdGhpcy5zZXRSZW5kZXJUYXJnZXQoIGN1cnJlbnRSZW5kZXJUYXJnZXQsIGN1cnJlbnRBY3RpdmVDdWJlRmFjZSwgY3VycmVudEFjdGl2ZU1pcG1hcExldmVsICk7XG5cblx0XHRcdF90aGlzLnNldENsZWFyQ29sb3IoIF9jdXJyZW50Q2xlYXJDb2xvciwgX2N1cnJlbnRDbGVhckFscGhhICk7XG5cblx0XHRcdGlmICggY3VycmVudENhbWVyYVZpZXdwb3J0ICE9PSB1bmRlZmluZWQgKSBjYW1lcmEudmlld3BvcnQgPSBjdXJyZW50Q2FtZXJhVmlld3BvcnQ7XG5cblx0XHRcdF90aGlzLnRvbmVNYXBwaW5nID0gY3VycmVudFRvbmVNYXBwaW5nO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcmVuZGVyT2JqZWN0cyggcmVuZGVyTGlzdCwgc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdFx0Y29uc3Qgb3ZlcnJpZGVNYXRlcmlhbCA9IHNjZW5lLmlzU2NlbmUgPT09IHRydWUgPyBzY2VuZS5vdmVycmlkZU1hdGVyaWFsIDogbnVsbDtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gcmVuZGVyTGlzdC5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHJlbmRlckl0ZW0gPSByZW5kZXJMaXN0WyBpIF07XG5cblx0XHRcdFx0Y29uc3Qgb2JqZWN0ID0gcmVuZGVySXRlbS5vYmplY3Q7XG5cdFx0XHRcdGNvbnN0IGdlb21ldHJ5ID0gcmVuZGVySXRlbS5nZW9tZXRyeTtcblx0XHRcdFx0Y29uc3QgZ3JvdXAgPSByZW5kZXJJdGVtLmdyb3VwO1xuXHRcdFx0XHRsZXQgbWF0ZXJpYWwgPSByZW5kZXJJdGVtLm1hdGVyaWFsO1xuXG5cdFx0XHRcdGlmICggbWF0ZXJpYWwuYWxsb3dPdmVycmlkZSA9PT0gdHJ1ZSAmJiBvdmVycmlkZU1hdGVyaWFsICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0bWF0ZXJpYWwgPSBvdmVycmlkZU1hdGVyaWFsO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG9iamVjdC5sYXllcnMudGVzdCggY2FtZXJhLmxheWVycyApICkge1xuXG5cdFx0XHRcdFx0cmVuZGVyT2JqZWN0KCBvYmplY3QsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHJlbmRlck9iamVjdCggb2JqZWN0LCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICkge1xuXG5cdFx0XHRvYmplY3Qub25CZWZvcmVSZW5kZXIoIF90aGlzLCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICk7XG5cblx0XHRcdG9iamVjdC5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSwgb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRvYmplY3Qubm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggb2JqZWN0Lm1vZGVsVmlld01hdHJpeCApO1xuXG5cdFx0XHRtYXRlcmlhbC5vbkJlZm9yZVJlbmRlciggX3RoaXMsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBvYmplY3QsIGdyb3VwICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwudHJhbnNwYXJlbnQgPT09IHRydWUgJiYgbWF0ZXJpYWwuc2lkZSA9PT0gRG91YmxlU2lkZSAmJiBtYXRlcmlhbC5mb3JjZVNpbmdsZVBhc3MgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsLnNpZGUgPSBCYWNrU2lkZTtcblx0XHRcdFx0bWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0XHRfdGhpcy5yZW5kZXJCdWZmZXJEaXJlY3QoIGNhbWVyYSwgc2NlbmUsIGdlb21ldHJ5LCBtYXRlcmlhbCwgb2JqZWN0LCBncm91cCApO1xuXG5cdFx0XHRcdG1hdGVyaWFsLnNpZGUgPSBGcm9udFNpZGU7XG5cdFx0XHRcdG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdFx0X3RoaXMucmVuZGVyQnVmZmVyRGlyZWN0KCBjYW1lcmEsIHNjZW5lLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIG9iamVjdCwgZ3JvdXAgKTtcblxuXHRcdFx0XHRtYXRlcmlhbC5zaWRlID0gRG91YmxlU2lkZTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfdGhpcy5yZW5kZXJCdWZmZXJEaXJlY3QoIGNhbWVyYSwgc2NlbmUsIGdlb21ldHJ5LCBtYXRlcmlhbCwgb2JqZWN0LCBncm91cCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdG9iamVjdC5vbkFmdGVyUmVuZGVyKCBfdGhpcywgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0UHJvZ3JhbSggbWF0ZXJpYWwsIHNjZW5lLCBvYmplY3QgKSB7XG5cblx0XHRcdGlmICggc2NlbmUuaXNTY2VuZSAhPT0gdHJ1ZSApIHNjZW5lID0gX2VtcHR5U2NlbmU7IC8vIHNjZW5lIGNvdWxkIGJlIGEgTWVzaCwgTGluZSwgUG9pbnRzLCAuLi5cblxuXHRcdFx0Y29uc3QgbWF0ZXJpYWxQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICk7XG5cblx0XHRcdGNvbnN0IGxpZ2h0cyA9IGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS5saWdodHM7XG5cdFx0XHRjb25zdCBzaGFkb3dzQXJyYXkgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUuc2hhZG93c0FycmF5O1xuXG5cdFx0XHRjb25zdCBsaWdodHNTdGF0ZVZlcnNpb24gPSBsaWdodHMuc3RhdGUudmVyc2lvbjtcblxuXHRcdFx0Y29uc3QgcGFyYW1ldGVycyA9IHByb2dyYW1DYWNoZS5nZXRQYXJhbWV0ZXJzKCBtYXRlcmlhbCwgbGlnaHRzLnN0YXRlLCBzaGFkb3dzQXJyYXksIHNjZW5lLCBvYmplY3QgKTtcblx0XHRcdGNvbnN0IHByb2dyYW1DYWNoZUtleSA9IHByb2dyYW1DYWNoZS5nZXRQcm9ncmFtQ2FjaGVLZXkoIHBhcmFtZXRlcnMgKTtcblxuXHRcdFx0bGV0IHByb2dyYW1zID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnByb2dyYW1zO1xuXG5cdFx0XHQvLyBhbHdheXMgdXBkYXRlIGVudmlyb25tZW50IGFuZCBmb2cgLSBjaGFuZ2luZyB0aGVzZSB0cmlnZ2VyIGFuIGdldFByb2dyYW0gY2FsbCwgYnV0IGl0J3MgcG9zc2libGUgdGhhdCB0aGUgcHJvZ3JhbSBkb2Vzbid0IGNoYW5nZVxuXG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMuZW52aXJvbm1lbnQgPSBtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsID8gc2NlbmUuZW52aXJvbm1lbnQgOiBudWxsO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmZvZyA9IHNjZW5lLmZvZztcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5lbnZNYXAgPSAoIG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPyBjdWJldXZtYXBzIDogY3ViZW1hcHMgKS5nZXQoIG1hdGVyaWFsLmVudk1hcCB8fCBtYXRlcmlhbFByb3BlcnRpZXMuZW52aXJvbm1lbnQgKTtcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5lbnZNYXBSb3RhdGlvbiA9ICggbWF0ZXJpYWxQcm9wZXJ0aWVzLmVudmlyb25tZW50ICE9PSBudWxsICYmIG1hdGVyaWFsLmVudk1hcCA9PT0gbnVsbCApID8gc2NlbmUuZW52aXJvbm1lbnRSb3RhdGlvbiA6IG1hdGVyaWFsLmVudk1hcFJvdGF0aW9uO1xuXG5cdFx0XHRpZiAoIHByb2dyYW1zID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gbmV3IG1hdGVyaWFsXG5cblx0XHRcdFx0bWF0ZXJpYWwuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbk1hdGVyaWFsRGlzcG9zZSApO1xuXG5cdFx0XHRcdHByb2dyYW1zID0gbmV3IE1hcCgpO1xuXHRcdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMucHJvZ3JhbXMgPSBwcm9ncmFtcztcblxuXHRcdFx0fVxuXG5cdFx0XHRsZXQgcHJvZ3JhbSA9IHByb2dyYW1zLmdldCggcHJvZ3JhbUNhY2hlS2V5ICk7XG5cblx0XHRcdGlmICggcHJvZ3JhbSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIGVhcmx5IG91dCBpZiBwcm9ncmFtIGFuZCBsaWdodCBzdGF0ZSBpcyBpZGVudGljYWxcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5jdXJyZW50UHJvZ3JhbSA9PT0gcHJvZ3JhbSAmJiBtYXRlcmlhbFByb3BlcnRpZXMubGlnaHRzU3RhdGVWZXJzaW9uID09PSBsaWdodHNTdGF0ZVZlcnNpb24gKSB7XG5cblx0XHRcdFx0XHR1cGRhdGVDb21tb25NYXRlcmlhbFByb3BlcnRpZXMoIG1hdGVyaWFsLCBwYXJhbWV0ZXJzICk7XG5cblx0XHRcdFx0XHRyZXR1cm4gcHJvZ3JhbTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cGFyYW1ldGVycy51bmlmb3JtcyA9IHByb2dyYW1DYWNoZS5nZXRVbmlmb3JtcyggbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRtYXRlcmlhbC5vbkJlZm9yZUNvbXBpbGUoIHBhcmFtZXRlcnMsIF90aGlzICk7XG5cblx0XHRcdFx0cHJvZ3JhbSA9IHByb2dyYW1DYWNoZS5hY3F1aXJlUHJvZ3JhbSggcGFyYW1ldGVycywgcHJvZ3JhbUNhY2hlS2V5ICk7XG5cdFx0XHRcdHByb2dyYW1zLnNldCggcHJvZ3JhbUNhY2hlS2V5LCBwcm9ncmFtICk7XG5cblx0XHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnVuaWZvcm1zID0gcGFyYW1ldGVycy51bmlmb3JtcztcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCB1bmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3JtcztcblxuXHRcdFx0aWYgKCAoICEgbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCAmJiAhIG1hdGVyaWFsLmlzUmF3U2hhZGVyTWF0ZXJpYWwgKSB8fCBtYXRlcmlhbC5jbGlwcGluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jbGlwcGluZ1BsYW5lcyA9IGNsaXBwaW5nLnVuaWZvcm07XG5cblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlQ29tbW9uTWF0ZXJpYWxQcm9wZXJ0aWVzKCBtYXRlcmlhbCwgcGFyYW1ldGVycyApO1xuXG5cdFx0XHQvLyBzdG9yZSB0aGUgbGlnaHQgc2V0dXAgaXQgd2FzIGNyZWF0ZWQgZm9yXG5cblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5uZWVkc0xpZ2h0cyA9IG1hdGVyaWFsTmVlZHNMaWdodHMoIG1hdGVyaWFsICk7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMubGlnaHRzU3RhdGVWZXJzaW9uID0gbGlnaHRzU3RhdGVWZXJzaW9uO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5uZWVkc0xpZ2h0cyApIHtcblxuXHRcdFx0XHQvLyB3aXJlIHVwIHRoZSBtYXRlcmlhbCB0byB0aGlzIHJlbmRlcmVyJ3MgbGlnaHRpbmcgc3RhdGVcblxuXHRcdFx0XHR1bmlmb3Jtcy5hbWJpZW50TGlnaHRDb2xvci52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5hbWJpZW50O1xuXHRcdFx0XHR1bmlmb3Jtcy5saWdodFByb2JlLnZhbHVlID0gbGlnaHRzLnN0YXRlLnByb2JlO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbExpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5kaXJlY3Rpb25hbDtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uYWxMaWdodFNoYWRvd3MudmFsdWUgPSBsaWdodHMuc3RhdGUuZGlyZWN0aW9uYWxTaGFkb3c7XG5cdFx0XHRcdHVuaWZvcm1zLnNwb3RMaWdodHMudmFsdWUgPSBsaWdodHMuc3RhdGUuc3BvdDtcblx0XHRcdFx0dW5pZm9ybXMuc3BvdExpZ2h0U2hhZG93cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5zcG90U2hhZG93O1xuXHRcdFx0XHR1bmlmb3Jtcy5yZWN0QXJlYUxpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5yZWN0QXJlYTtcblx0XHRcdFx0dW5pZm9ybXMubHRjXzEudmFsdWUgPSBsaWdodHMuc3RhdGUucmVjdEFyZWFMVEMxO1xuXHRcdFx0XHR1bmlmb3Jtcy5sdGNfMi52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5yZWN0QXJlYUxUQzI7XG5cdFx0XHRcdHVuaWZvcm1zLnBvaW50TGlnaHRzLnZhbHVlID0gbGlnaHRzLnN0YXRlLnBvaW50O1xuXHRcdFx0XHR1bmlmb3Jtcy5wb2ludExpZ2h0U2hhZG93cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wb2ludFNoYWRvdztcblx0XHRcdFx0dW5pZm9ybXMuaGVtaXNwaGVyZUxpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5oZW1pO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbmFsU2hhZG93TWFwLnZhbHVlID0gbGlnaHRzLnN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWFwO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbFNoYWRvd01hdHJpeC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hdHJpeDtcblx0XHRcdFx0dW5pZm9ybXMuc3BvdFNoYWRvd01hcC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5zcG90U2hhZG93TWFwO1xuXHRcdFx0XHR1bmlmb3Jtcy5zcG90TGlnaHRNYXRyaXgudmFsdWUgPSBsaWdodHMuc3RhdGUuc3BvdExpZ2h0TWF0cml4O1xuXHRcdFx0XHR1bmlmb3Jtcy5zcG90TGlnaHRNYXAudmFsdWUgPSBsaWdodHMuc3RhdGUuc3BvdExpZ2h0TWFwO1xuXHRcdFx0XHR1bmlmb3Jtcy5wb2ludFNoYWRvd01hcC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wb2ludFNoYWRvd01hcDtcblx0XHRcdFx0dW5pZm9ybXMucG9pbnRTaGFkb3dNYXRyaXgudmFsdWUgPSBsaWdodHMuc3RhdGUucG9pbnRTaGFkb3dNYXRyaXg7XG5cdFx0XHRcdC8vIFRPRE8gKGFiZWxuYXRpb24pOiBhZGQgYXJlYSBsaWdodHMgc2hhZG93IGluZm8gdG8gdW5pZm9ybXNcblxuXHRcdFx0fVxuXG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMuY3VycmVudFByb2dyYW0gPSBwcm9ncmFtO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnVuaWZvcm1zTGlzdCA9IG51bGw7XG5cblx0XHRcdHJldHVybiBwcm9ncmFtO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0VW5pZm9ybUxpc3QoIG1hdGVyaWFsUHJvcGVydGllcyApIHtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbFByb3BlcnRpZXMudW5pZm9ybXNMaXN0ID09PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnN0IHByb2dVbmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy5jdXJyZW50UHJvZ3JhbS5nZXRVbmlmb3JtcygpO1xuXHRcdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMudW5pZm9ybXNMaXN0ID0gV2ViR0xVbmlmb3Jtcy5zZXFXaXRoVmFsdWUoIHByb2dVbmlmb3Jtcy5zZXEsIG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3JtcyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRlcmlhbFByb3BlcnRpZXMudW5pZm9ybXNMaXN0O1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gdXBkYXRlQ29tbW9uTWF0ZXJpYWxQcm9wZXJ0aWVzKCBtYXRlcmlhbCwgcGFyYW1ldGVycyApIHtcblxuXHRcdFx0Y29uc3QgbWF0ZXJpYWxQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICk7XG5cblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5vdXRwdXRDb2xvclNwYWNlID0gcGFyYW1ldGVycy5vdXRwdXRDb2xvclNwYWNlO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmJhdGNoaW5nID0gcGFyYW1ldGVycy5iYXRjaGluZztcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5iYXRjaGluZ0NvbG9yID0gcGFyYW1ldGVycy5iYXRjaGluZ0NvbG9yO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmluc3RhbmNpbmcgPSBwYXJhbWV0ZXJzLmluc3RhbmNpbmc7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMuaW5zdGFuY2luZ0NvbG9yID0gcGFyYW1ldGVycy5pbnN0YW5jaW5nQ29sb3I7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMuaW5zdGFuY2luZ01vcnBoID0gcGFyYW1ldGVycy5pbnN0YW5jaW5nTW9ycGg7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMuc2tpbm5pbmcgPSBwYXJhbWV0ZXJzLnNraW5uaW5nO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLm1vcnBoVGFyZ2V0cyA9IHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLm1vcnBoTm9ybWFscyA9IHBhcmFtZXRlcnMubW9ycGhOb3JtYWxzO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLm1vcnBoQ29sb3JzID0gcGFyYW1ldGVycy5tb3JwaENvbG9ycztcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5tb3JwaFRhcmdldHNDb3VudCA9IHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzQ291bnQ7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMubnVtQ2xpcHBpbmdQbGFuZXMgPSBwYXJhbWV0ZXJzLm51bUNsaXBwaW5nUGxhbmVzO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLm51bUludGVyc2VjdGlvbiA9IHBhcmFtZXRlcnMubnVtQ2xpcEludGVyc2VjdGlvbjtcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy52ZXJ0ZXhBbHBoYXMgPSBwYXJhbWV0ZXJzLnZlcnRleEFscGhhcztcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy52ZXJ0ZXhUYW5nZW50cyA9IHBhcmFtZXRlcnMudmVydGV4VGFuZ2VudHM7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMudG9uZU1hcHBpbmcgPSBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gc2V0UHJvZ3JhbSggY2FtZXJhLCBzY2VuZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QgKSB7XG5cblx0XHRcdGlmICggc2NlbmUuaXNTY2VuZSAhPT0gdHJ1ZSApIHNjZW5lID0gX2VtcHR5U2NlbmU7IC8vIHNjZW5lIGNvdWxkIGJlIGEgTWVzaCwgTGluZSwgUG9pbnRzLCAuLi5cblxuXHRcdFx0dGV4dHVyZXMucmVzZXRUZXh0dXJlVW5pdHMoKTtcblxuXHRcdFx0Y29uc3QgZm9nID0gc2NlbmUuZm9nO1xuXHRcdFx0Y29uc3QgZW52aXJvbm1lbnQgPSBtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsID8gc2NlbmUuZW52aXJvbm1lbnQgOiBudWxsO1xuXHRcdFx0Y29uc3QgY29sb3JTcGFjZSA9ICggX2N1cnJlbnRSZW5kZXJUYXJnZXQgPT09IG51bGwgKSA/IF90aGlzLm91dHB1dENvbG9yU3BhY2UgOiAoIF9jdXJyZW50UmVuZGVyVGFyZ2V0LmlzWFJSZW5kZXJUYXJnZXQgPT09IHRydWUgPyBfY3VycmVudFJlbmRlclRhcmdldC50ZXh0dXJlLmNvbG9yU3BhY2UgOiBMaW5lYXJTUkdCQ29sb3JTcGFjZSApO1xuXHRcdFx0Y29uc3QgZW52TWFwID0gKCBtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsID8gY3ViZXV2bWFwcyA6IGN1YmVtYXBzICkuZ2V0KCBtYXRlcmlhbC5lbnZNYXAgfHwgZW52aXJvbm1lbnQgKTtcblx0XHRcdGNvbnN0IHZlcnRleEFscGhhcyA9IG1hdGVyaWFsLnZlcnRleENvbG9ycyA9PT0gdHJ1ZSAmJiAhISBnZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yICYmIGdlb21ldHJ5LmF0dHJpYnV0ZXMuY29sb3IuaXRlbVNpemUgPT09IDQ7XG5cdFx0XHRjb25zdCB2ZXJ0ZXhUYW5nZW50cyA9ICEhIGdlb21ldHJ5LmF0dHJpYnV0ZXMudGFuZ2VudCAmJiAoICEhIG1hdGVyaWFsLm5vcm1hbE1hcCB8fCBtYXRlcmlhbC5hbmlzb3Ryb3B5ID4gMCApO1xuXHRcdFx0Y29uc3QgbW9ycGhUYXJnZXRzID0gISEgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdFx0Y29uc3QgbW9ycGhOb3JtYWxzID0gISEgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbDtcblx0XHRcdGNvbnN0IG1vcnBoQ29sb3JzID0gISEgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLmNvbG9yO1xuXG5cdFx0XHRsZXQgdG9uZU1hcHBpbmcgPSBOb1RvbmVNYXBwaW5nO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnRvbmVNYXBwZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBfY3VycmVudFJlbmRlclRhcmdldCA9PT0gbnVsbCB8fCBfY3VycmVudFJlbmRlclRhcmdldC5pc1hSUmVuZGVyVGFyZ2V0ID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0dG9uZU1hcHBpbmcgPSBfdGhpcy50b25lTWFwcGluZztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gfHwgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCB8fCBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3I7XG5cdFx0XHRjb25zdCBtb3JwaFRhcmdldHNDb3VudCA9ICggbW9ycGhBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApID8gbW9ycGhBdHRyaWJ1dGUubGVuZ3RoIDogMDtcblxuXHRcdFx0Y29uc3QgbWF0ZXJpYWxQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICk7XG5cdFx0XHRjb25zdCBsaWdodHMgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUubGlnaHRzO1xuXG5cdFx0XHRpZiAoIF9jbGlwcGluZ0VuYWJsZWQgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0aWYgKCBfbG9jYWxDbGlwcGluZ0VuYWJsZWQgPT09IHRydWUgfHwgY2FtZXJhICE9PSBfY3VycmVudENhbWVyYSApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHVzZUNhY2hlID1cblx0XHRcdFx0XHRcdGNhbWVyYSA9PT0gX2N1cnJlbnRDYW1lcmEgJiZcblx0XHRcdFx0XHRcdG1hdGVyaWFsLmlkID09PSBfY3VycmVudE1hdGVyaWFsSWQ7XG5cblx0XHRcdFx0XHQvLyB3ZSBtaWdodCB3YW50IHRvIGNhbGwgdGhpcyBmdW5jdGlvbiB3aXRoIHNvbWUgQ2xpcHBpbmdHcm91cFxuXHRcdFx0XHRcdC8vIG9iamVjdCBpbnN0ZWFkIG9mIHRoZSBtYXRlcmlhbCwgb25jZSBpdCBiZWNvbWVzIGZlYXNpYmxlXG5cdFx0XHRcdFx0Ly8gKCM4NDY1LCAjODM3OSlcblx0XHRcdFx0XHRjbGlwcGluZy5zZXRTdGF0ZSggbWF0ZXJpYWwsIGNhbWVyYSwgdXNlQ2FjaGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly9cblxuXHRcdFx0bGV0IG5lZWRzUHJvZ3JhbUNoYW5nZSA9IGZhbHNlO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnZlcnNpb24gPT09IG1hdGVyaWFsUHJvcGVydGllcy5fX3ZlcnNpb24gKSB7XG5cblx0XHRcdFx0aWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubmVlZHNMaWdodHMgJiYgKCBtYXRlcmlhbFByb3BlcnRpZXMubGlnaHRzU3RhdGVWZXJzaW9uICE9PSBsaWdodHMuc3RhdGUudmVyc2lvbiApICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMub3V0cHV0Q29sb3JTcGFjZSAhPT0gY29sb3JTcGFjZSApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzQmF0Y2hlZE1lc2ggJiYgbWF0ZXJpYWxQcm9wZXJ0aWVzLmJhdGNoaW5nID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggISBvYmplY3QuaXNCYXRjaGVkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuYmF0Y2hpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0JhdGNoZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5iYXRjaGluZ0NvbG9yID09PSB0cnVlICYmIG9iamVjdC5jb2xvclRleHR1cmUgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0JhdGNoZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5iYXRjaGluZ0NvbG9yID09PSBmYWxzZSAmJiBvYmplY3QuY29sb3JUZXh0dXJlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNJbnN0YW5jZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5pbnN0YW5jaW5nID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggISBvYmplY3QuaXNJbnN0YW5jZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5pbnN0YW5jaW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNTa2lubmVkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuc2tpbm5pbmcgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCAhIG9iamVjdC5pc1NraW5uZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5za2lubmluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuaW5zdGFuY2luZ0NvbG9yID09PSB0cnVlICYmIG9iamVjdC5pbnN0YW5jZUNvbG9yID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNJbnN0YW5jZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5pbnN0YW5jaW5nQ29sb3IgPT09IGZhbHNlICYmIG9iamVjdC5pbnN0YW5jZUNvbG9yICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNJbnN0YW5jZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5pbnN0YW5jaW5nTW9ycGggPT09IHRydWUgJiYgb2JqZWN0Lm1vcnBoVGV4dHVyZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuaW5zdGFuY2luZ01vcnBoID09PSBmYWxzZSAmJiBvYmplY3QubW9ycGhUZXh0dXJlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMuZW52TWFwICE9PSBlbnZNYXAgKSB7XG5cblx0XHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmZvZyA9PT0gdHJ1ZSAmJiBtYXRlcmlhbFByb3BlcnRpZXMuZm9nICE9PSBmb2cgKSB7XG5cblx0XHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5udW1DbGlwcGluZ1BsYW5lcyAhPT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdFx0KCBtYXRlcmlhbFByb3BlcnRpZXMubnVtQ2xpcHBpbmdQbGFuZXMgIT09IGNsaXBwaW5nLm51bVBsYW5lcyB8fFxuXHRcdFx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5udW1JbnRlcnNlY3Rpb24gIT09IGNsaXBwaW5nLm51bUludGVyc2VjdGlvbiApICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMudmVydGV4QWxwaGFzICE9PSB2ZXJ0ZXhBbHBoYXMgKSB7XG5cblx0XHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy52ZXJ0ZXhUYW5nZW50cyAhPT0gdmVydGV4VGFuZ2VudHMgKSB7XG5cblx0XHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5tb3JwaFRhcmdldHMgIT09IG1vcnBoVGFyZ2V0cyApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLm1vcnBoTm9ybWFscyAhPT0gbW9ycGhOb3JtYWxzICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubW9ycGhDb2xvcnMgIT09IG1vcnBoQ29sb3JzICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMudG9uZU1hcHBpbmcgIT09IHRvbmVNYXBwaW5nICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubW9ycGhUYXJnZXRzQ291bnQgIT09IG1vcnBoVGFyZ2V0c0NvdW50ICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblx0XHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLl9fdmVyc2lvbiA9IG1hdGVyaWFsLnZlcnNpb247XG5cblx0XHRcdH1cblxuXHRcdFx0Ly9cblxuXHRcdFx0bGV0IHByb2dyYW0gPSBtYXRlcmlhbFByb3BlcnRpZXMuY3VycmVudFByb2dyYW07XG5cblx0XHRcdGlmICggbmVlZHNQcm9ncmFtQ2hhbmdlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHByb2dyYW0gPSBnZXRQcm9ncmFtKCBtYXRlcmlhbCwgc2NlbmUsIG9iamVjdCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGxldCByZWZyZXNoUHJvZ3JhbSA9IGZhbHNlO1xuXHRcdFx0bGV0IHJlZnJlc2hNYXRlcmlhbCA9IGZhbHNlO1xuXHRcdFx0bGV0IHJlZnJlc2hMaWdodHMgPSBmYWxzZTtcblxuXHRcdFx0Y29uc3QgcF91bmlmb3JtcyA9IHByb2dyYW0uZ2V0VW5pZm9ybXMoKSxcblx0XHRcdFx0bV91bmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3JtcztcblxuXHRcdFx0aWYgKCBzdGF0ZS51c2VQcm9ncmFtKCBwcm9ncmFtLnByb2dyYW0gKSApIHtcblxuXHRcdFx0XHRyZWZyZXNoUHJvZ3JhbSA9IHRydWU7XG5cdFx0XHRcdHJlZnJlc2hNYXRlcmlhbCA9IHRydWU7XG5cdFx0XHRcdHJlZnJlc2hMaWdodHMgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaWQgIT09IF9jdXJyZW50TWF0ZXJpYWxJZCApIHtcblxuXHRcdFx0XHRfY3VycmVudE1hdGVyaWFsSWQgPSBtYXRlcmlhbC5pZDtcblxuXHRcdFx0XHRyZWZyZXNoTWF0ZXJpYWwgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcmVmcmVzaFByb2dyYW0gfHwgX2N1cnJlbnRDYW1lcmEgIT09IGNhbWVyYSApIHtcblxuXHRcdFx0XHQvLyBjb21tb24gY2FtZXJhIHVuaWZvcm1zXG5cblx0XHRcdFx0Y29uc3QgcmV2ZXJzZWREZXB0aEJ1ZmZlciA9IHN0YXRlLmJ1ZmZlcnMuZGVwdGguZ2V0UmV2ZXJzZWQoKTtcblxuXHRcdFx0XHRpZiAoIHJldmVyc2VkRGVwdGhCdWZmZXIgJiYgY2FtZXJhLnJldmVyc2VkRGVwdGggIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRjYW1lcmEuX3JldmVyc2VkRGVwdGggPSB0cnVlO1xuXHRcdFx0XHRcdGNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ3Byb2plY3Rpb25NYXRyaXgnLCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ3ZpZXdNYXRyaXgnLCBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7XG5cblx0XHRcdFx0Y29uc3QgdUNhbVBvcyA9IHBfdW5pZm9ybXMubWFwLmNhbWVyYVBvc2l0aW9uO1xuXG5cdFx0XHRcdGlmICggdUNhbVBvcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dUNhbVBvcy5zZXRWYWx1ZSggX2dsLCBfdmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggY2FwYWJpbGl0aWVzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgKSB7XG5cblx0XHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdsb2dEZXB0aEJ1ZkZDJyxcblx0XHRcdFx0XHRcdDIuMCAvICggTWF0aC5sb2coIGNhbWVyYS5mYXIgKyAxLjAgKSAvIE1hdGguTE4yICkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gY29uc2lkZXIgbW92aW5nIGlzT3J0aG9ncmFwaGljIHRvIFVuaWZvcm1MaWIgYW5kIFdlYkdMTWF0ZXJpYWxzLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy9wdWxsLzI2NDY3I2lzc3VlY29tbWVudC0xNjQ1MTg1MDY3XG5cblx0XHRcdFx0aWYgKCBtYXRlcmlhbC5pc01lc2hQaG9uZ01hdGVyaWFsIHx8XG5cdFx0XHRcdFx0bWF0ZXJpYWwuaXNNZXNoVG9vbk1hdGVyaWFsIHx8XG5cdFx0XHRcdFx0bWF0ZXJpYWwuaXNNZXNoTGFtYmVydE1hdGVyaWFsIHx8XG5cdFx0XHRcdFx0bWF0ZXJpYWwuaXNNZXNoQmFzaWNNYXRlcmlhbCB8fFxuXHRcdFx0XHRcdG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgfHxcblx0XHRcdFx0XHRtYXRlcmlhbC5pc1NoYWRlck1hdGVyaWFsICkge1xuXG5cdFx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnaXNPcnRob2dyYXBoaWMnLCBjYW1lcmEuaXNPcnRob2dyYXBoaWNDYW1lcmEgPT09IHRydWUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBfY3VycmVudENhbWVyYSAhPT0gY2FtZXJhICkge1xuXG5cdFx0XHRcdFx0X2N1cnJlbnRDYW1lcmEgPSBjYW1lcmE7XG5cblx0XHRcdFx0XHQvLyBsaWdodGluZyB1bmlmb3JtcyBkZXBlbmQgb24gdGhlIGNhbWVyYSBzbyBlbmZvcmNlIGFuIHVwZGF0ZVxuXHRcdFx0XHRcdC8vIG5vdywgaW4gY2FzZSB0aGlzIG1hdGVyaWFsIHN1cHBvcnRzIGxpZ2h0cyAtIG9yIGxhdGVyLCB3aGVuXG5cdFx0XHRcdFx0Ly8gdGhlIG5leHQgbWF0ZXJpYWwgdGhhdCBkb2VzIGdldHMgYWN0aXZhdGVkOlxuXG5cdFx0XHRcdFx0cmVmcmVzaE1hdGVyaWFsID0gdHJ1ZTtcdFx0Ly8gc2V0IHRvIHRydWUgb24gbWF0ZXJpYWwgY2hhbmdlXG5cdFx0XHRcdFx0cmVmcmVzaExpZ2h0cyA9IHRydWU7XHRcdC8vIHJlbWFpbnMgc2V0IHVudGlsIHVwZGF0ZSBkb25lXG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHNraW5uaW5nIGFuZCBtb3JwaCB0YXJnZXQgdW5pZm9ybXMgbXVzdCBiZSBzZXQgZXZlbiBpZiBtYXRlcmlhbCBkaWRuJ3QgY2hhbmdlXG5cdFx0XHQvLyBhdXRvLXNldHRpbmcgb2YgdGV4dHVyZSB1bml0IGZvciBib25lIGFuZCBtb3JwaCB0ZXh0dXJlIG11c3QgZ28gYmVmb3JlIG90aGVyIHRleHR1cmVzXG5cdFx0XHQvLyBvdGhlcndpc2UgdGV4dHVyZXMgdXNlZCBmb3Igc2tpbm5pbmcgYW5kIG1vcnBoaW5nIGNhbiB0YWtlIG92ZXIgdGV4dHVyZSB1bml0cyByZXNlcnZlZCBmb3Igb3RoZXIgbWF0ZXJpYWwgdGV4dHVyZXNcblxuXHRcdFx0aWYgKCBvYmplY3QuaXNTa2lubmVkTWVzaCApIHtcblxuXHRcdFx0XHRwX3VuaWZvcm1zLnNldE9wdGlvbmFsKCBfZ2wsIG9iamVjdCwgJ2JpbmRNYXRyaXgnICk7XG5cdFx0XHRcdHBfdW5pZm9ybXMuc2V0T3B0aW9uYWwoIF9nbCwgb2JqZWN0LCAnYmluZE1hdHJpeEludmVyc2UnICk7XG5cblx0XHRcdFx0Y29uc3Qgc2tlbGV0b24gPSBvYmplY3Quc2tlbGV0b247XG5cblx0XHRcdFx0aWYgKCBza2VsZXRvbiApIHtcblxuXHRcdFx0XHRcdGlmICggc2tlbGV0b24uYm9uZVRleHR1cmUgPT09IG51bGwgKSBza2VsZXRvbi5jb21wdXRlQm9uZVRleHR1cmUoKTtcblxuXHRcdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ2JvbmVUZXh0dXJlJywgc2tlbGV0b24uYm9uZVRleHR1cmUsIHRleHR1cmVzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggb2JqZWN0LmlzQmF0Y2hlZE1lc2ggKSB7XG5cblx0XHRcdFx0cF91bmlmb3Jtcy5zZXRPcHRpb25hbCggX2dsLCBvYmplY3QsICdiYXRjaGluZ1RleHR1cmUnICk7XG5cdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ2JhdGNoaW5nVGV4dHVyZScsIG9iamVjdC5fbWF0cmljZXNUZXh0dXJlLCB0ZXh0dXJlcyApO1xuXG5cdFx0XHRcdHBfdW5pZm9ybXMuc2V0T3B0aW9uYWwoIF9nbCwgb2JqZWN0LCAnYmF0Y2hpbmdJZFRleHR1cmUnICk7XG5cdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ2JhdGNoaW5nSWRUZXh0dXJlJywgb2JqZWN0Ll9pbmRpcmVjdFRleHR1cmUsIHRleHR1cmVzICk7XG5cblx0XHRcdFx0cF91bmlmb3Jtcy5zZXRPcHRpb25hbCggX2dsLCBvYmplY3QsICdiYXRjaGluZ0NvbG9yVGV4dHVyZScgKTtcblx0XHRcdFx0aWYgKCBvYmplY3QuX2NvbG9yc1RleHR1cmUgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdiYXRjaGluZ0NvbG9yVGV4dHVyZScsIG9iamVjdC5fY29sb3JzVGV4dHVyZSwgdGV4dHVyZXMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGVzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzO1xuXG5cdFx0XHRpZiAoIG1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbiAhPT0gdW5kZWZpbmVkIHx8IG1vcnBoQXR0cmlidXRlcy5ub3JtYWwgIT09IHVuZGVmaW5lZCB8fCAoIG1vcnBoQXR0cmlidXRlcy5jb2xvciAhPT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdFx0bW9ycGh0YXJnZXRzLnVwZGF0ZSggb2JqZWN0LCBnZW9tZXRyeSwgcHJvZ3JhbSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcmVmcmVzaE1hdGVyaWFsIHx8IG1hdGVyaWFsUHJvcGVydGllcy5yZWNlaXZlU2hhZG93ICE9PSBvYmplY3QucmVjZWl2ZVNoYWRvdyApIHtcblxuXHRcdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMucmVjZWl2ZVNoYWRvdyA9IG9iamVjdC5yZWNlaXZlU2hhZG93O1xuXHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdyZWNlaXZlU2hhZG93Jywgb2JqZWN0LnJlY2VpdmVTaGFkb3cgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL3B1bGwvMjQ0NjcjaXNzdWVjb21tZW50LTEyMDkwMzE1MTJcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5pc01lc2hHb3VyYXVkTWF0ZXJpYWwgJiYgbWF0ZXJpYWwuZW52TWFwICE9PSBudWxsICkge1xuXG5cdFx0XHRcdG1fdW5pZm9ybXMuZW52TWFwLnZhbHVlID0gZW52TWFwO1xuXG5cdFx0XHRcdG1fdW5pZm9ybXMuZmxpcEVudk1hcC52YWx1ZSA9ICggZW52TWFwLmlzQ3ViZVRleHR1cmUgJiYgZW52TWFwLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9PT0gZmFsc2UgKSA/IC0xIDogMTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgJiYgbWF0ZXJpYWwuZW52TWFwID09PSBudWxsICYmIHNjZW5lLmVudmlyb25tZW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdG1fdW5pZm9ybXMuZW52TWFwSW50ZW5zaXR5LnZhbHVlID0gc2NlbmUuZW52aXJvbm1lbnRJbnRlbnNpdHk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCByZWZyZXNoTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAndG9uZU1hcHBpbmdFeHBvc3VyZScsIF90aGlzLnRvbmVNYXBwaW5nRXhwb3N1cmUgKTtcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5uZWVkc0xpZ2h0cyApIHtcblxuXHRcdFx0XHRcdC8vIHRoZSBjdXJyZW50IG1hdGVyaWFsIHJlcXVpcmVzIGxpZ2h0aW5nIGluZm9cblxuXHRcdFx0XHRcdC8vIG5vdGU6IGFsbCBsaWdodGluZyB1bmlmb3JtcyBhcmUgYWx3YXlzIHNldCBjb3JyZWN0bHlcblx0XHRcdFx0XHQvLyB0aGV5IHNpbXBseSByZWZlcmVuY2UgdGhlIHJlbmRlcmVyJ3Mgc3RhdGUgZm9yIHRoZWlyXG5cdFx0XHRcdFx0Ly8gdmFsdWVzXG5cdFx0XHRcdFx0Ly9cblx0XHRcdFx0XHQvLyB1c2UgdGhlIGN1cnJlbnQgbWF0ZXJpYWwncyAubmVlZHNVcGRhdGUgZmxhZ3MgdG8gc2V0XG5cdFx0XHRcdFx0Ly8gdGhlIEdMIHN0YXRlIHdoZW4gcmVxdWlyZWRcblxuXHRcdFx0XHRcdG1hcmtVbmlmb3Jtc0xpZ2h0c05lZWRzVXBkYXRlKCBtX3VuaWZvcm1zLCByZWZyZXNoTGlnaHRzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIHJlZnJlc2ggdW5pZm9ybXMgY29tbW9uIHRvIHNldmVyYWwgbWF0ZXJpYWxzXG5cblx0XHRcdFx0aWYgKCBmb2cgJiYgbWF0ZXJpYWwuZm9nID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0bWF0ZXJpYWxzLnJlZnJlc2hGb2dVbmlmb3JtcyggbV91bmlmb3JtcywgZm9nICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG1hdGVyaWFscy5yZWZyZXNoTWF0ZXJpYWxVbmlmb3JtcyggbV91bmlmb3JtcywgbWF0ZXJpYWwsIF9waXhlbFJhdGlvLCBfaGVpZ2h0LCBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUudHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0WyBjYW1lcmEuaWQgXSApO1xuXG5cdFx0XHRcdFdlYkdMVW5pZm9ybXMudXBsb2FkKCBfZ2wsIGdldFVuaWZvcm1MaXN0KCBtYXRlcmlhbFByb3BlcnRpZXMgKSwgbV91bmlmb3JtcywgdGV4dHVyZXMgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgJiYgbWF0ZXJpYWwudW5pZm9ybXNOZWVkVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFdlYkdMVW5pZm9ybXMudXBsb2FkKCBfZ2wsIGdldFVuaWZvcm1MaXN0KCBtYXRlcmlhbFByb3BlcnRpZXMgKSwgbV91bmlmb3JtcywgdGV4dHVyZXMgKTtcblx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNOZWVkVXBkYXRlID0gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5pc1Nwcml0ZU1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ2NlbnRlcicsIG9iamVjdC5jZW50ZXIgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBjb21tb24gbWF0cmljZXNcblxuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnbW9kZWxWaWV3TWF0cml4Jywgb2JqZWN0Lm1vZGVsVmlld01hdHJpeCApO1xuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnbm9ybWFsTWF0cml4Jywgb2JqZWN0Lm5vcm1hbE1hdHJpeCApO1xuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnbW9kZWxNYXRyaXgnLCBvYmplY3QubWF0cml4V29ybGQgKTtcblxuXHRcdFx0Ly8gVUJPc1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgfHwgbWF0ZXJpYWwuaXNSYXdTaGFkZXJNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRjb25zdCBncm91cHMgPSBtYXRlcmlhbC51bmlmb3Jtc0dyb3VwcztcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBncm91cHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cblx0XHRcdFx0XHR1bmlmb3Jtc0dyb3Vwcy51cGRhdGUoIGdyb3VwLCBwcm9ncmFtICk7XG5cdFx0XHRcdFx0dW5pZm9ybXNHcm91cHMuYmluZCggZ3JvdXAsIHByb2dyYW0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHByb2dyYW07XG5cblx0XHR9XG5cblx0XHQvLyBJZiB1bmlmb3JtcyBhcmUgbWFya2VkIGFzIGNsZWFuLCB0aGV5IGRvbid0IG5lZWQgdG8gYmUgbG9hZGVkIHRvIHRoZSBHUFUuXG5cblx0XHRmdW5jdGlvbiBtYXJrVW5pZm9ybXNMaWdodHNOZWVkc1VwZGF0ZSggdW5pZm9ybXMsIHZhbHVlICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5hbWJpZW50TGlnaHRDb2xvci5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXHRcdFx0dW5pZm9ybXMubGlnaHRQcm9iZS5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbExpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uYWxMaWdodFNoYWRvd3MubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHRcdHVuaWZvcm1zLnBvaW50TGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0XHR1bmlmb3Jtcy5wb2ludExpZ2h0U2hhZG93cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXHRcdFx0dW5pZm9ybXMuc3BvdExpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXHRcdFx0dW5pZm9ybXMuc3BvdExpZ2h0U2hhZG93cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXHRcdFx0dW5pZm9ybXMucmVjdEFyZWFMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHRcdHVuaWZvcm1zLmhlbWlzcGhlcmVMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG1hdGVyaWFsTmVlZHNMaWdodHMoIG1hdGVyaWFsICkge1xuXG5cdFx0XHRyZXR1cm4gbWF0ZXJpYWwuaXNNZXNoTGFtYmVydE1hdGVyaWFsIHx8IG1hdGVyaWFsLmlzTWVzaFRvb25NYXRlcmlhbCB8fCBtYXRlcmlhbC5pc01lc2hQaG9uZ01hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgfHwgbWF0ZXJpYWwuaXNTaGFkb3dNYXRlcmlhbCB8fFxuXHRcdFx0XHQoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgJiYgbWF0ZXJpYWwubGlnaHRzID09PSB0cnVlICk7XG5cblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSBhY3RpdmUgY3ViZSBmYWNlLlxuXHRcdCAqXG5cdFx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgYWN0aXZlIGN1YmUgZmFjZS5cblx0XHQgKi9cblx0XHR0aGlzLmdldEFjdGl2ZUN1YmVGYWNlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gX2N1cnJlbnRBY3RpdmVDdWJlRmFjZTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSBhY3RpdmUgbWlwbWFwIGxldmVsLlxuXHRcdCAqXG5cdFx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgYWN0aXZlIG1pcG1hcCBsZXZlbC5cblx0XHQgKi9cblx0XHR0aGlzLmdldEFjdGl2ZU1pcG1hcExldmVsID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gX2N1cnJlbnRBY3RpdmVNaXBtYXBMZXZlbDtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSBhY3RpdmUgcmVuZGVyIHRhcmdldC5cblx0XHQgKlxuXHRcdCAqIEByZXR1cm4gez9XZWJHTFJlbmRlclRhcmdldH0gVGhlIGFjdGl2ZSByZW5kZXIgdGFyZ2V0LiBSZXR1cm5zIGBudWxsYCBpZiBubyByZW5kZXIgdGFyZ2V0XG5cdFx0ICogaXMgY3VycmVudGx5IHNldC5cblx0XHQgKi9cblx0XHR0aGlzLmdldFJlbmRlclRhcmdldCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIF9jdXJyZW50UmVuZGVyVGFyZ2V0O1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuc2V0UmVuZGVyVGFyZ2V0VGV4dHVyZXMgPSBmdW5jdGlvbiAoIHJlbmRlclRhcmdldCwgY29sb3JUZXh0dXJlLCBkZXB0aFRleHR1cmUgKSB7XG5cblx0XHRcdGNvbnN0IHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX19hdXRvQWxsb2NhdGVEZXB0aEJ1ZmZlciA9IHJlbmRlclRhcmdldC5yZXNvbHZlRGVwdGhCdWZmZXIgPT09IGZhbHNlO1xuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fYXV0b0FsbG9jYXRlRGVwdGhCdWZmZXIgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIFRoZSBtdWx0aXNhbXBsZV9yZW5kZXJfdG9fdGV4dHVyZSBleHRlbnNpb24gZG9lc24ndCB3b3JrIHByb3Blcmx5IGlmIHRoZXJlXG5cdFx0XHRcdC8vIGFyZSBtaWRmcmFtZSBmbHVzaGVzIGFuZCBhbiBleHRlcm5hbCBkZXB0aCBidWZmZXIuIERpc2FibGUgdXNlIG9mIHRoZSBleHRlbnNpb24uXG5cdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX191c2VSZW5kZXJUb1RleHR1cmUgPSBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LnRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSA9IGNvbG9yVGV4dHVyZTtcblx0XHRcdHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICkuX193ZWJnbFRleHR1cmUgPSByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fYXV0b0FsbG9jYXRlRGVwdGhCdWZmZXIgPyB1bmRlZmluZWQgOiBkZXB0aFRleHR1cmU7XG5cblx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX19oYXNFeHRlcm5hbFRleHR1cmVzID0gdHJ1ZTtcblxuXHRcdH07XG5cblx0XHR0aGlzLnNldFJlbmRlclRhcmdldEZyYW1lYnVmZmVyID0gZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQsIGRlZmF1bHRGcmFtZWJ1ZmZlciApIHtcblxuXHRcdFx0Y29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyID0gZGVmYXVsdEZyYW1lYnVmZmVyO1xuXHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3VzZURlZmF1bHRGcmFtZWJ1ZmZlciA9IGRlZmF1bHRGcmFtZWJ1ZmZlciA9PT0gdW5kZWZpbmVkO1xuXG5cdFx0fTtcblxuXHRcdGNvbnN0IF9zY3JhdGNoRnJhbWVCdWZmZXIgPSBfZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFNldHMgdGhlIGFjdGl2ZSByZW5kZXJ0YXJnZXQuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0gez9XZWJHTFJlbmRlclRhcmdldH0gcmVuZGVyVGFyZ2V0IC0gVGhlIHJlbmRlciB0YXJnZXQgdG8gc2V0LiBXaGVuIGBudWxsYCBpcyBnaXZlbixcblx0XHQgKiB0aGUgY2FudmFzIGlzIHNldCBhcyB0aGUgYWN0aXZlIHJlbmRlciB0YXJnZXQgaW5zdGVhZC5cblx0XHQgKiBAcGFyYW0ge251bWJlcn0gW2FjdGl2ZUN1YmVGYWNlPTBdIC0gVGhlIGFjdGl2ZSBjdWJlIGZhY2Ugd2hlbiB1c2luZyBhIGN1YmUgcmVuZGVyIHRhcmdldC5cblx0XHQgKiBJbmRpY2F0ZXMgdGhlIHogbGF5ZXIgdG8gcmVuZGVyIGluIHRvIHdoZW4gdXNpbmcgM0Qgb3IgYXJyYXkgcmVuZGVyIHRhcmdldHMuXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IFthY3RpdmVNaXBtYXBMZXZlbD0wXSAtIFRoZSBhY3RpdmUgbWlwbWFwIGxldmVsLlxuXHRcdCAqL1xuXHRcdHRoaXMuc2V0UmVuZGVyVGFyZ2V0ID0gZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQsIGFjdGl2ZUN1YmVGYWNlID0gMCwgYWN0aXZlTWlwbWFwTGV2ZWwgPSAwICkge1xuXG5cdFx0XHRfY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldDtcblx0XHRcdF9jdXJyZW50QWN0aXZlQ3ViZUZhY2UgPSBhY3RpdmVDdWJlRmFjZTtcblx0XHRcdF9jdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWwgPSBhY3RpdmVNaXBtYXBMZXZlbDtcblxuXHRcdFx0bGV0IHVzZURlZmF1bHRGcmFtZWJ1ZmZlciA9IHRydWU7XG5cdFx0XHRsZXQgZnJhbWVidWZmZXIgPSBudWxsO1xuXHRcdFx0bGV0IGlzQ3ViZSA9IGZhbHNlO1xuXHRcdFx0bGV0IGlzUmVuZGVyVGFyZ2V0M0QgPSBmYWxzZTtcblxuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdFx0Y29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX191c2VEZWZhdWx0RnJhbWVidWZmZXIgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIG5lZWQgdG8gbWFrZSBzdXJlIHRvIHJlYmluZCB0aGUgZnJhbWVidWZmZXIuXG5cdFx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIG51bGwgKTtcblx0XHRcdFx0XHR1c2VEZWZhdWx0RnJhbWVidWZmZXIgPSBmYWxzZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZXMuc2V0dXBSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX19oYXNFeHRlcm5hbFRleHR1cmVzICkge1xuXG5cdFx0XHRcdFx0Ly8gQ29sb3IgYW5kIGRlcHRoIHRleHR1cmUgbXVzdCBiZSByZWJvdW5kIGluIG9yZGVyIGZvciB0aGUgc3dhcGNoYWluIHRvIHVwZGF0ZS5cblx0XHRcdFx0XHR0ZXh0dXJlcy5yZWJpbmRUZXh0dXJlcyggcmVuZGVyVGFyZ2V0LCBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LnRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSwgcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciApIHtcblxuXHRcdFx0XHRcdC8vIGNoZWNrIGlmIHRoZSBkZXB0aCB0ZXh0dXJlIGlzIGFscmVhZHkgYm91bmQgdG8gdGhlIGZyYW1lIGJ1ZmZlciBhbmQgdGhhdCBpdCdzIGJlZW4gaW5pdGlhbGl6ZWRcblx0XHRcdFx0XHRjb25zdCBkZXB0aFRleHR1cmUgPSByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlO1xuXHRcdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2JvdW5kRGVwdGhUZXh0dXJlICE9PSBkZXB0aFRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGNoZWNrIGlmIHRoZSBkZXB0aCB0ZXh0dXJlIGlzIGNvbXBhdGlibGVcblx0XHRcdFx0XHRcdGlmIChcblx0XHRcdFx0XHRcdFx0ZGVwdGhUZXh0dXJlICE9PSBudWxsICYmXG5cdFx0XHRcdFx0XHRcdHByb3BlcnRpZXMuaGFzKCBkZXB0aFRleHR1cmUgKSAmJlxuXHRcdFx0XHRcdFx0XHQoIHJlbmRlclRhcmdldC53aWR0aCAhPT0gZGVwdGhUZXh0dXJlLmltYWdlLndpZHRoIHx8IHJlbmRlclRhcmdldC5oZWlnaHQgIT09IGRlcHRoVGV4dHVyZS5pbWFnZS5oZWlnaHQgKVxuXHRcdFx0XHRcdFx0KSB7XG5cblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnV2ViR0xSZW5kZXJUYXJnZXQ6IEF0dGFjaGVkIERlcHRoVGV4dHVyZSBpcyBpbml0aWFsaXplZCB0byB0aGUgaW5jb3JyZWN0IHNpemUuJyApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIFN3YXAgdGhlIGRlcHRoIGJ1ZmZlciB0byB0aGUgY3VycmVudGx5IGF0dGFjaGVkIG9uZVxuXHRcdFx0XHRcdFx0dGV4dHVyZXMuc2V0dXBEZXB0aFJlbmRlcmJ1ZmZlciggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IHRleHR1cmUgPSByZW5kZXJUYXJnZXQudGV4dHVyZTtcblxuXHRcdFx0XHRpZiAoIHRleHR1cmUuaXNEYXRhM0RUZXh0dXJlIHx8IHRleHR1cmUuaXNEYXRhQXJyYXlUZXh0dXJlIHx8IHRleHR1cmUuaXNDb21wcmVzc2VkQXJyYXlUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0aXNSZW5kZXJUYXJnZXQzRCA9IHRydWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IF9fd2ViZ2xGcmFtZWJ1ZmZlciA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKS5fX3dlYmdsRnJhbWVidWZmZXI7XG5cblx0XHRcdFx0aWYgKCByZW5kZXJUYXJnZXQuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIF9fd2ViZ2xGcmFtZWJ1ZmZlclsgYWN0aXZlQ3ViZUZhY2UgXSApICkge1xuXG5cdFx0XHRcdFx0XHRmcmFtZWJ1ZmZlciA9IF9fd2ViZ2xGcmFtZWJ1ZmZlclsgYWN0aXZlQ3ViZUZhY2UgXVsgYWN0aXZlTWlwbWFwTGV2ZWwgXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGZyYW1lYnVmZmVyID0gX193ZWJnbEZyYW1lYnVmZmVyWyBhY3RpdmVDdWJlRmFjZSBdO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aXNDdWJlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIHJlbmRlclRhcmdldC5zYW1wbGVzID4gMCApICYmIHRleHR1cmVzLnVzZU11bHRpc2FtcGxlZFJUVCggcmVuZGVyVGFyZ2V0ICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0ZnJhbWVidWZmZXIgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICkuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIF9fd2ViZ2xGcmFtZWJ1ZmZlciApICkge1xuXG5cdFx0XHRcdFx0XHRmcmFtZWJ1ZmZlciA9IF9fd2ViZ2xGcmFtZWJ1ZmZlclsgYWN0aXZlTWlwbWFwTGV2ZWwgXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGZyYW1lYnVmZmVyID0gX193ZWJnbEZyYW1lYnVmZmVyO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRfY3VycmVudFZpZXdwb3J0LmNvcHkoIHJlbmRlclRhcmdldC52aWV3cG9ydCApO1xuXHRcdFx0XHRfY3VycmVudFNjaXNzb3IuY29weSggcmVuZGVyVGFyZ2V0LnNjaXNzb3IgKTtcblx0XHRcdFx0X2N1cnJlbnRTY2lzc29yVGVzdCA9IHJlbmRlclRhcmdldC5zY2lzc29yVGVzdDtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfY3VycmVudFZpZXdwb3J0LmNvcHkoIF92aWV3cG9ydCApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApLmZsb29yKCk7XG5cdFx0XHRcdF9jdXJyZW50U2Npc3Nvci5jb3B5KCBfc2Npc3NvciApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApLmZsb29yKCk7XG5cdFx0XHRcdF9jdXJyZW50U2Npc3NvclRlc3QgPSBfc2Npc3NvclRlc3Q7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gVXNlIGEgc2NyYXRjaCBmcmFtZSBidWZmZXIgaWYgcmVuZGVyaW5nIHRvIGEgbWlwIGxldmVsIHRvIGF2b2lkIGRlcHRoIGJ1ZmZlcnNcblx0XHRcdC8vIGJlaW5nIGJvdW5kIHRoYXQgYXJlIGRpZmZlcmVudCBzaXplcy5cblx0XHRcdGlmICggYWN0aXZlTWlwbWFwTGV2ZWwgIT09IDAgKSB7XG5cblx0XHRcdFx0ZnJhbWVidWZmZXIgPSBfc2NyYXRjaEZyYW1lQnVmZmVyO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGZyYW1lYnVmZmVyQm91bmQgPSBzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgZnJhbWVidWZmZXIgKTtcblxuXHRcdFx0aWYgKCBmcmFtZWJ1ZmZlckJvdW5kICYmIHVzZURlZmF1bHRGcmFtZWJ1ZmZlciApIHtcblxuXHRcdFx0XHRzdGF0ZS5kcmF3QnVmZmVycyggcmVuZGVyVGFyZ2V0LCBmcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHN0YXRlLnZpZXdwb3J0KCBfY3VycmVudFZpZXdwb3J0ICk7XG5cdFx0XHRzdGF0ZS5zY2lzc29yKCBfY3VycmVudFNjaXNzb3IgKTtcblx0XHRcdHN0YXRlLnNldFNjaXNzb3JUZXN0KCBfY3VycmVudFNjaXNzb3JUZXN0ICk7XG5cblx0XHRcdGlmICggaXNDdWJlICkge1xuXG5cdFx0XHRcdGNvbnN0IHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC50ZXh0dXJlICk7XG5cdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggX2dsLkZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAsIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBhY3RpdmVDdWJlRmFjZSwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUsIGFjdGl2ZU1pcG1hcExldmVsICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGlzUmVuZGVyVGFyZ2V0M0QgKSB7XG5cblx0XHRcdFx0Y29uc3QgbGF5ZXIgPSBhY3RpdmVDdWJlRmFjZTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCByZW5kZXJUYXJnZXQudGV4dHVyZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LnRleHR1cmVzWyBpIF0gKTtcblxuXHRcdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmVMYXllciggX2dsLkZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBpLCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSwgYWN0aXZlTWlwbWFwTGV2ZWwsIGxheWVyICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCByZW5kZXJUYXJnZXQgIT09IG51bGwgJiYgYWN0aXZlTWlwbWFwTGV2ZWwgIT09IDAgKSB7XG5cblx0XHRcdFx0Ly8gT25seSBiaW5kIHRoZSBmcmFtZSBidWZmZXIgaWYgd2UgYXJlIHVzaW5nIGEgc2NyYXRjaCBmcmFtZSBidWZmZXIgdG8gcmVuZGVyIHRvIGEgbWlwbWFwLlxuXHRcdFx0XHQvLyBJZiB3ZSByZWJpbmQgdGhlIHRleHR1cmUgd2hlbiB1c2luZyBhIG11bHRpIHNhbXBsZSBidWZmZXIgdGhlbiBhbiBlcnJvciBhYm91dCBpbmNvbnNpc3RlbnQgc2FtcGxlcyB3aWxsIGJlIHRocm93bi5cblx0XHRcdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LnRleHR1cmUgKTtcblx0XHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCBfZ2wuRlJBTUVCVUZGRVIsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgX2dsLlRFWFRVUkVfMkQsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBhY3RpdmVNaXBtYXBMZXZlbCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9jdXJyZW50TWF0ZXJpYWxJZCA9IC0xOyAvLyByZXNldCBjdXJyZW50IG1hdGVyaWFsIHRvIGVuc3VyZSBjb3JyZWN0IHVuaWZvcm0gYmluZGluZ3NcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZWFkcyB0aGUgcGl4ZWwgZGF0YSBmcm9tIHRoZSBnaXZlbiByZW5kZXIgdGFyZ2V0IGludG8gdGhlIGdpdmVuIGJ1ZmZlci5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7V2ViR0xSZW5kZXJUYXJnZXR9IHJlbmRlclRhcmdldCAtIFRoZSByZW5kZXIgdGFyZ2V0IHRvIHJlYWQgZnJvbS5cblx0XHQgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSBgeGAgY29vcmRpbmF0ZSBvZiB0aGUgY29weSByZWdpb24ncyBvcmlnaW4uXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgYHlgIGNvb3JkaW5hdGUgb2YgdGhlIGNvcHkgcmVnaW9uJ3Mgb3JpZ2luLlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCBvZiB0aGUgY29weSByZWdpb24uXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIFRoZSBoZWlnaHQgb2YgdGhlIGNvcHkgcmVnaW9uLlxuXHRcdCAqIEBwYXJhbSB7VHlwZWRBcnJheX0gYnVmZmVyIC0gVGhlIHJlc3VsdCBidWZmZXIuXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IFthY3RpdmVDdWJlRmFjZUluZGV4XSAtIFRoZSBhY3RpdmUgY3ViZSBmYWNlIGluZGV4LlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBbdGV4dHVyZUluZGV4PTBdIC0gVGhlIHRleHR1cmUgaW5kZXggb2YgYW4gTVJUIHJlbmRlciB0YXJnZXQuXG5cdFx0ICovXG5cdFx0dGhpcy5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzID0gZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQsIHgsIHksIHdpZHRoLCBoZWlnaHQsIGJ1ZmZlciwgYWN0aXZlQ3ViZUZhY2VJbmRleCwgdGV4dHVyZUluZGV4ID0gMCApIHtcblxuXHRcdFx0aWYgKCAhICggcmVuZGVyVGFyZ2V0ICYmIHJlbmRlclRhcmdldC5pc1dlYkdMUmVuZGVyVGFyZ2V0ICkgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBUSFJFRS5XZWJHTFJlbmRlclRhcmdldC4nICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHRsZXQgZnJhbWVidWZmZXIgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICkuX193ZWJnbEZyYW1lYnVmZmVyO1xuXG5cdFx0XHRpZiAoIHJlbmRlclRhcmdldC5pc1dlYkdMQ3ViZVJlbmRlclRhcmdldCAmJiBhY3RpdmVDdWJlRmFjZUluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0ZnJhbWVidWZmZXIgPSBmcmFtZWJ1ZmZlclsgYWN0aXZlQ3ViZUZhY2VJbmRleCBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZnJhbWVidWZmZXIgKSB7XG5cblx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIGZyYW1lYnVmZmVyICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdGNvbnN0IHRleHR1cmUgPSByZW5kZXJUYXJnZXQudGV4dHVyZXNbIHRleHR1cmVJbmRleCBdO1xuXHRcdFx0XHRcdGNvbnN0IHRleHR1cmVGb3JtYXQgPSB0ZXh0dXJlLmZvcm1hdDtcblx0XHRcdFx0XHRjb25zdCB0ZXh0dXJlVHlwZSA9IHRleHR1cmUudHlwZTtcblxuXHRcdFx0XHRcdGlmICggISBjYXBhYmlsaXRpZXMudGV4dHVyZUZvcm1hdFJlYWRhYmxlKCB0ZXh0dXJlRm9ybWF0ICkgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlbmRlclRhcmdldCBpcyBub3QgaW4gUkdCQSBvciBpbXBsZW1lbnRhdGlvbiBkZWZpbmVkIGZvcm1hdC4nICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoICEgY2FwYWJpbGl0aWVzLnRleHR1cmVUeXBlUmVhZGFibGUoIHRleHR1cmVUeXBlICkgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlbmRlclRhcmdldCBpcyBub3QgaW4gVW5zaWduZWRCeXRlVHlwZSBvciBpbXBsZW1lbnRhdGlvbiBkZWZpbmVkIHR5cGUuJyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gdGhlIGZvbGxvd2luZyBpZiBzdGF0ZW1lbnQgZW5zdXJlcyB2YWxpZCByZWFkIHJlcXVlc3RzIChubyBvdXQtb2YtYm91bmRzIHBpeGVscywgc2VlICM4NjA0KVxuXG5cdFx0XHRcdFx0aWYgKCAoIHggPj0gMCAmJiB4IDw9ICggcmVuZGVyVGFyZ2V0LndpZHRoIC0gd2lkdGggKSApICYmICggeSA+PSAwICYmIHkgPD0gKCByZW5kZXJUYXJnZXQuaGVpZ2h0IC0gaGVpZ2h0ICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gd2hlbiB1c2luZyBNUlQsIHNlbGVjdCB0aGUgY29ycmVjdCBjb2xvciBidWZmZXIgZm9yIHRoZSBzdWJzZXF1ZW50IHJlYWQgY29tbWFuZFxuXG5cdFx0XHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldC50ZXh0dXJlcy5sZW5ndGggPiAxICkgX2dsLnJlYWRCdWZmZXIoIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCArIHRleHR1cmVJbmRleCApO1xuXG5cdFx0XHRcdFx0XHRfZ2wucmVhZFBpeGVscyggeCwgeSwgd2lkdGgsIGhlaWdodCwgdXRpbHMuY29udmVydCggdGV4dHVyZUZvcm1hdCApLCB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlVHlwZSApLCBidWZmZXIgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGZpbmFsbHkge1xuXG5cdFx0XHRcdFx0Ly8gcmVzdG9yZSBmcmFtZWJ1ZmZlciBvZiBjdXJyZW50IHJlbmRlciB0YXJnZXQgaWYgbmVjZXNzYXJ5XG5cblx0XHRcdFx0XHRjb25zdCBmcmFtZWJ1ZmZlciA9ICggX2N1cnJlbnRSZW5kZXJUYXJnZXQgIT09IG51bGwgKSA/IHByb3BlcnRpZXMuZ2V0KCBfY3VycmVudFJlbmRlclRhcmdldCApLl9fd2ViZ2xGcmFtZWJ1ZmZlciA6IG51bGw7XG5cdFx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIGZyYW1lYnVmZmVyICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQXN5bmNocm9ub3VzLCBub24tYmxvY2tpbmcgdmVyc2lvbiBvZiB7QGxpbmsgV2ViR0xSZW5kZXJlciNyZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzfS5cblx0XHQgKlxuXHRcdCAqIEl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIHZlcnNpb24gb2YgYHJlYWRSZW5kZXJUYXJnZXRQaXhlbHMoKWAgd2hlbmV2ZXIgcG9zc2libGUuXG5cdFx0ICpcblx0XHQgKiBAYXN5bmNcblx0XHQgKiBAcGFyYW0ge1dlYkdMUmVuZGVyVGFyZ2V0fSByZW5kZXJUYXJnZXQgLSBUaGUgcmVuZGVyIHRhcmdldCB0byByZWFkIGZyb20uXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgYHhgIGNvb3JkaW5hdGUgb2YgdGhlIGNvcHkgcmVnaW9uJ3Mgb3JpZ2luLlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIGB5YCBjb29yZGluYXRlIG9mIHRoZSBjb3B5IHJlZ2lvbidzIG9yaWdpbi5cblx0XHQgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgd2lkdGggb2YgdGhlIGNvcHkgcmVnaW9uLlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IG9mIHRoZSBjb3B5IHJlZ2lvbi5cblx0XHQgKiBAcGFyYW0ge1R5cGVkQXJyYXl9IGJ1ZmZlciAtIFRoZSByZXN1bHQgYnVmZmVyLlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBbYWN0aXZlQ3ViZUZhY2VJbmRleF0gLSBUaGUgYWN0aXZlIGN1YmUgZmFjZSBpbmRleC5cblx0XHQgKiBAcGFyYW0ge251bWJlcn0gW3RleHR1cmVJbmRleD0wXSAtIFRoZSB0ZXh0dXJlIGluZGV4IG9mIGFuIE1SVCByZW5kZXIgdGFyZ2V0LlxuXHRcdCAqIEByZXR1cm4ge1Byb21pc2U8VHlwZWRBcnJheT59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHJlYWQgaGFzIGJlZW4gZmluaXNoZWQuIFRoZSByZXNvbHZlIHByb3ZpZGVzIHRoZSByZWFkIGRhdGEgYXMgYSB0eXBlZCBhcnJheS5cblx0XHQgKi9cblx0XHR0aGlzLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHNBc3luYyA9IGFzeW5jIGZ1bmN0aW9uICggcmVuZGVyVGFyZ2V0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBidWZmZXIsIGFjdGl2ZUN1YmVGYWNlSW5kZXgsIHRleHR1cmVJbmRleCA9IDAgKSB7XG5cblx0XHRcdGlmICggISAoIHJlbmRlclRhcmdldCAmJiByZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldCApICkge1xuXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBUSFJFRS5XZWJHTFJlbmRlclRhcmdldC4nICk7XG5cblx0XHRcdH1cblxuXHRcdFx0bGV0IGZyYW1lYnVmZmVyID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApLl9fd2ViZ2xGcmFtZWJ1ZmZlcjtcblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ICYmIGFjdGl2ZUN1YmVGYWNlSW5kZXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRmcmFtZWJ1ZmZlciA9IGZyYW1lYnVmZmVyWyBhY3RpdmVDdWJlRmFjZUluZGV4IF07XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBmcmFtZWJ1ZmZlciApIHtcblxuXHRcdFx0XHQvLyB0aGUgZm9sbG93aW5nIGlmIHN0YXRlbWVudCBlbnN1cmVzIHZhbGlkIHJlYWQgcmVxdWVzdHMgKG5vIG91dC1vZi1ib3VuZHMgcGl4ZWxzLCBzZWUgIzg2MDQpXG5cdFx0XHRcdGlmICggKCB4ID49IDAgJiYgeCA8PSAoIHJlbmRlclRhcmdldC53aWR0aCAtIHdpZHRoICkgKSAmJiAoIHkgPj0gMCAmJiB5IDw9ICggcmVuZGVyVGFyZ2V0LmhlaWdodCAtIGhlaWdodCApICkgKSB7XG5cblx0XHRcdFx0XHQvLyBzZXQgdGhlIGFjdGl2ZSBmcmFtZSBidWZmZXIgdG8gdGhlIG9uZSB3ZSB3YW50IHRvIHJlYWRcblx0XHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgZnJhbWVidWZmZXIgKTtcblxuXHRcdFx0XHRcdGNvbnN0IHRleHR1cmUgPSByZW5kZXJUYXJnZXQudGV4dHVyZXNbIHRleHR1cmVJbmRleCBdO1xuXHRcdFx0XHRcdGNvbnN0IHRleHR1cmVGb3JtYXQgPSB0ZXh0dXJlLmZvcm1hdDtcblx0XHRcdFx0XHRjb25zdCB0ZXh0dXJlVHlwZSA9IHRleHR1cmUudHlwZTtcblxuXHRcdFx0XHRcdGlmICggISBjYXBhYmlsaXRpZXMudGV4dHVyZUZvcm1hdFJlYWRhYmxlKCB0ZXh0dXJlRm9ybWF0ICkgKSB7XG5cblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsc0FzeW5jOiByZW5kZXJUYXJnZXQgaXMgbm90IGluIFJHQkEgb3IgaW1wbGVtZW50YXRpb24gZGVmaW5lZCBmb3JtYXQuJyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCAhIGNhcGFiaWxpdGllcy50ZXh0dXJlVHlwZVJlYWRhYmxlKCB0ZXh0dXJlVHlwZSApICkge1xuXG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHNBc3luYzogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBVbnNpZ25lZEJ5dGVUeXBlIG9yIGltcGxlbWVudGF0aW9uIGRlZmluZWQgdHlwZS4nICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb25zdCBnbEJ1ZmZlciA9IF9nbC5jcmVhdGVCdWZmZXIoKTtcblx0XHRcdFx0XHRfZ2wuYmluZEJ1ZmZlciggX2dsLlBJWEVMX1BBQ0tfQlVGRkVSLCBnbEJ1ZmZlciApO1xuXHRcdFx0XHRcdF9nbC5idWZmZXJEYXRhKCBfZ2wuUElYRUxfUEFDS19CVUZGRVIsIGJ1ZmZlci5ieXRlTGVuZ3RoLCBfZ2wuU1RSRUFNX1JFQUQgKTtcblxuXHRcdFx0XHRcdC8vIHdoZW4gdXNpbmcgTVJULCBzZWxlY3QgdGhlIGNvcnJlY3QgY29sb3IgYnVmZmVyIGZvciB0aGUgc3Vic2VxdWVudCByZWFkIGNvbW1hbmRcblxuXHRcdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LnRleHR1cmVzLmxlbmd0aCA+IDEgKSBfZ2wucmVhZEJ1ZmZlciggX2dsLkNPTE9SX0FUVEFDSE1FTlQwICsgdGV4dHVyZUluZGV4ICk7XG5cblx0XHRcdFx0XHRfZ2wucmVhZFBpeGVscyggeCwgeSwgd2lkdGgsIGhlaWdodCwgdXRpbHMuY29udmVydCggdGV4dHVyZUZvcm1hdCApLCB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlVHlwZSApLCAwICk7XG5cblx0XHRcdFx0XHQvLyByZXNldCB0aGUgZnJhbWUgYnVmZmVyIHRvIHRoZSBjdXJyZW50bHkgc2V0IGJ1ZmZlciBiZWZvcmUgd2FpdGluZ1xuXHRcdFx0XHRcdGNvbnN0IGN1cnJGcmFtZWJ1ZmZlciA9IF9jdXJyZW50UmVuZGVyVGFyZ2V0ICE9PSBudWxsID8gcHJvcGVydGllcy5nZXQoIF9jdXJyZW50UmVuZGVyVGFyZ2V0ICkuX193ZWJnbEZyYW1lYnVmZmVyIDogbnVsbDtcblx0XHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgY3VyckZyYW1lYnVmZmVyICk7XG5cblx0XHRcdFx0XHQvLyBjaGVjayBpZiB0aGUgY29tbWFuZHMgaGF2ZSBmaW5pc2hlZCBldmVyeSA4IG1zXG5cdFx0XHRcdFx0Y29uc3Qgc3luYyA9IF9nbC5mZW5jZVN5bmMoIF9nbC5TWU5DX0dQVV9DT01NQU5EU19DT01QTEVURSwgMCApO1xuXG5cdFx0XHRcdFx0X2dsLmZsdXNoKCk7XG5cblx0XHRcdFx0XHRhd2FpdCBwcm9iZUFzeW5jKCBfZ2wsIHN5bmMsIDQgKTtcblxuXHRcdFx0XHRcdC8vIHJlYWQgdGhlIGRhdGEgYW5kIGRlbGV0ZSB0aGUgYnVmZmVyXG5cdFx0XHRcdFx0X2dsLmJpbmRCdWZmZXIoIF9nbC5QSVhFTF9QQUNLX0JVRkZFUiwgZ2xCdWZmZXIgKTtcblx0XHRcdFx0XHRfZ2wuZ2V0QnVmZmVyU3ViRGF0YSggX2dsLlBJWEVMX1BBQ0tfQlVGRkVSLCAwLCBidWZmZXIgKTtcblx0XHRcdFx0XHRfZ2wuZGVsZXRlQnVmZmVyKCBnbEJ1ZmZlciApO1xuXHRcdFx0XHRcdF9nbC5kZWxldGVTeW5jKCBzeW5jICk7XG5cblx0XHRcdFx0XHRyZXR1cm4gYnVmZmVyO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHNBc3luYzogcmVxdWVzdGVkIHJlYWQgYm91bmRzIGFyZSBvdXQgb2YgcmFuZ2UuJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIENvcGllcyBwaXhlbHMgZnJvbSB0aGUgY3VycmVudCBib3VuZCBmcmFtZWJ1ZmZlciBpbnRvIHRoZSBnaXZlbiB0ZXh0dXJlLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtGcmFtZWJ1ZmZlclRleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZS5cblx0XHQgKiBAcGFyYW0gez9WZWN0b3IyfSBbcG9zaXRpb249bnVsbF0gLSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIGNvcHkgb3BlcmF0aW9uLlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBbbGV2ZWw9MF0gLSBUaGUgbWlwIGxldmVsLiBUaGUgZGVmYXVsdCByZXByZXNlbnRzIHRoZSBiYXNlIG1pcC5cblx0XHQgKi9cblx0XHR0aGlzLmNvcHlGcmFtZWJ1ZmZlclRvVGV4dHVyZSA9IGZ1bmN0aW9uICggdGV4dHVyZSwgcG9zaXRpb24gPSBudWxsLCBsZXZlbCA9IDAgKSB7XG5cblx0XHRcdGNvbnN0IGxldmVsU2NhbGUgPSBNYXRoLnBvdyggMiwgLSBsZXZlbCApO1xuXHRcdFx0Y29uc3Qgd2lkdGggPSBNYXRoLmZsb29yKCB0ZXh0dXJlLmltYWdlLndpZHRoICogbGV2ZWxTY2FsZSApO1xuXHRcdFx0Y29uc3QgaGVpZ2h0ID0gTWF0aC5mbG9vciggdGV4dHVyZS5pbWFnZS5oZWlnaHQgKiBsZXZlbFNjYWxlICk7XG5cblx0XHRcdGNvbnN0IHggPSBwb3NpdGlvbiAhPT0gbnVsbCA/IHBvc2l0aW9uLnggOiAwO1xuXHRcdFx0Y29uc3QgeSA9IHBvc2l0aW9uICE9PSBudWxsID8gcG9zaXRpb24ueSA6IDA7XG5cblx0XHRcdHRleHR1cmVzLnNldFRleHR1cmUyRCggdGV4dHVyZSwgMCApO1xuXG5cdFx0XHRfZ2wuY29weVRleFN1YkltYWdlMkQoIF9nbC5URVhUVVJFXzJELCBsZXZlbCwgMCwgMCwgeCwgeSwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0XHRzdGF0ZS51bmJpbmRUZXh0dXJlKCk7XG5cblx0XHR9O1xuXG5cdFx0Y29uc3QgX3NyY0ZyYW1lYnVmZmVyID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cdFx0Y29uc3QgX2RzdEZyYW1lYnVmZmVyID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBDb3BpZXMgZGF0YSBvZiB0aGUgZ2l2ZW4gc291cmNlIHRleHR1cmUgaW50byBhIGRlc3RpbmF0aW9uIHRleHR1cmUuXG5cdFx0ICpcblx0XHQgKiBXaGVuIHVzaW5nIHJlbmRlciB0YXJnZXQgdGV4dHVyZXMgYXMgYHNyY1RleHR1cmVgIGFuZCBgZHN0VGV4dHVyZWAsIHlvdSBtdXN0IG1ha2Ugc3VyZSBib3RoIHJlbmRlciB0YXJnZXRzIGFyZSBpbml0aWFsaXplZFxuXHRcdCAqIHtAbGluayBXZWJHTFJlbmRlcmVyI2luaXRSZW5kZXJUYXJnZXR9LlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtUZXh0dXJlfSBzcmNUZXh0dXJlIC0gVGhlIHNvdXJjZSB0ZXh0dXJlLlxuXHRcdCAqIEBwYXJhbSB7VGV4dHVyZX0gZHN0VGV4dHVyZSAtIFRoZSBkZXN0aW5hdGlvbiB0ZXh0dXJlLlxuXHRcdCAqIEBwYXJhbSB7PyhCb3gyfEJveDMpfSBbc3JjUmVnaW9uPW51bGxdIC0gQSBib3VuZGluZyBib3ggd2hpY2ggZGVzY3JpYmVzIHRoZSBzb3VyY2UgcmVnaW9uLiBDYW4gYmUgdHdvIG9yIHRocmVlLWRpbWVuc2lvbmFsLlxuXHRcdCAqIEBwYXJhbSB7PyhWZWN0b3IyfFZlY3RvcjMpfSBbZHN0UG9zaXRpb249bnVsbF0gLSBBIHZlY3RvciB0aGF0IHJlcHJlc2VudHMgdGhlIG9yaWdpbiBvZiB0aGUgZGVzdGluYXRpb24gcmVnaW9uLiBDYW4gYmUgdHdvIG9yIHRocmVlLWRpbWVuc2lvbmFsLlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBbc3JjTGV2ZWw9MF0gLSBUaGUgc291cmNlIG1pcG1hcCBsZXZlbCB0byBjb3B5LlxuXHRcdCAqIEBwYXJhbSB7P251bWJlcn0gW2RzdExldmVsPW51bGxdIC0gVGhlIGRlc3RpbmF0aW9uIG1pcG1hcCBsZXZlbC5cblx0XHQgKi9cblx0XHR0aGlzLmNvcHlUZXh0dXJlVG9UZXh0dXJlID0gZnVuY3Rpb24gKCBzcmNUZXh0dXJlLCBkc3RUZXh0dXJlLCBzcmNSZWdpb24gPSBudWxsLCBkc3RQb3NpdGlvbiA9IG51bGwsIHNyY0xldmVsID0gMCwgZHN0TGV2ZWwgPSBudWxsICkge1xuXG5cdFx0XHQvLyBzdXBwb3J0IHRoZSBwcmV2aW91cyBzaWduYXR1cmUgd2l0aCBqdXN0IGEgc2luZ2xlIGRzdCBtaXBtYXAgbGV2ZWxcblx0XHRcdGlmICggZHN0TGV2ZWwgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0aWYgKCBzcmNMZXZlbCAhPT0gMCApIHtcblxuXHRcdFx0XHRcdC8vIEBkZXByZWNhdGVkLCByMTcxXG5cdFx0XHRcdFx0d2Fybk9uY2UoICdXZWJHTFJlbmRlcmVyOiBjb3B5VGV4dHVyZVRvVGV4dHVyZSBmdW5jdGlvbiBzaWduYXR1cmUgaGFzIGNoYW5nZWQgdG8gc3VwcG9ydCBzcmMgYW5kIGRzdCBtaXBtYXAgbGV2ZWxzLicgKTtcblx0XHRcdFx0XHRkc3RMZXZlbCA9IHNyY0xldmVsO1xuXHRcdFx0XHRcdHNyY0xldmVsID0gMDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0ZHN0TGV2ZWwgPSAwO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBnYXRoZXIgdGhlIG5lY2Vzc2FyeSBkaW1lbnNpb25zIHRvIGNvcHlcblx0XHRcdGxldCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgbWluWCwgbWluWSwgbWluWjtcblx0XHRcdGxldCBkc3RYLCBkc3RZLCBkc3RaO1xuXHRcdFx0Y29uc3QgaW1hZ2UgPSBzcmNUZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgPyBzcmNUZXh0dXJlLm1pcG1hcHNbIGRzdExldmVsIF0gOiBzcmNUZXh0dXJlLmltYWdlO1xuXHRcdFx0aWYgKCBzcmNSZWdpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0d2lkdGggPSBzcmNSZWdpb24ubWF4LnggLSBzcmNSZWdpb24ubWluLng7XG5cdFx0XHRcdGhlaWdodCA9IHNyY1JlZ2lvbi5tYXgueSAtIHNyY1JlZ2lvbi5taW4ueTtcblx0XHRcdFx0ZGVwdGggPSBzcmNSZWdpb24uaXNCb3gzID8gc3JjUmVnaW9uLm1heC56IC0gc3JjUmVnaW9uLm1pbi56IDogMTtcblx0XHRcdFx0bWluWCA9IHNyY1JlZ2lvbi5taW4ueDtcblx0XHRcdFx0bWluWSA9IHNyY1JlZ2lvbi5taW4ueTtcblx0XHRcdFx0bWluWiA9IHNyY1JlZ2lvbi5pc0JveDMgPyBzcmNSZWdpb24ubWluLnogOiAwO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnN0IGxldmVsU2NhbGUgPSBNYXRoLnBvdyggMiwgLSBzcmNMZXZlbCApO1xuXHRcdFx0XHR3aWR0aCA9IE1hdGguZmxvb3IoIGltYWdlLndpZHRoICogbGV2ZWxTY2FsZSApO1xuXHRcdFx0XHRoZWlnaHQgPSBNYXRoLmZsb29yKCBpbWFnZS5oZWlnaHQgKiBsZXZlbFNjYWxlICk7XG5cdFx0XHRcdGlmICggc3JjVGV4dHVyZS5pc0RhdGFBcnJheVRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRkZXB0aCA9IGltYWdlLmRlcHRoO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHNyY1RleHR1cmUuaXNEYXRhM0RUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0ZGVwdGggPSBNYXRoLmZsb29yKCBpbWFnZS5kZXB0aCAqIGxldmVsU2NhbGUgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0ZGVwdGggPSAxO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtaW5YID0gMDtcblx0XHRcdFx0bWluWSA9IDA7XG5cdFx0XHRcdG1pblogPSAwO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZHN0UG9zaXRpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0ZHN0WCA9IGRzdFBvc2l0aW9uLng7XG5cdFx0XHRcdGRzdFkgPSBkc3RQb3NpdGlvbi55O1xuXHRcdFx0XHRkc3RaID0gZHN0UG9zaXRpb24uejtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRkc3RYID0gMDtcblx0XHRcdFx0ZHN0WSA9IDA7XG5cdFx0XHRcdGRzdFogPSAwO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB1cCB0aGUgZGVzdGluYXRpb24gdGFyZ2V0XG5cdFx0XHRjb25zdCBnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIGRzdFRleHR1cmUuZm9ybWF0ICk7XG5cdFx0XHRjb25zdCBnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCBkc3RUZXh0dXJlLnR5cGUgKTtcblx0XHRcdGxldCBnbFRhcmdldDtcblxuXHRcdFx0aWYgKCBkc3RUZXh0dXJlLmlzRGF0YTNEVGV4dHVyZSApIHtcblxuXHRcdFx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlM0QoIGRzdFRleHR1cmUsIDAgKTtcblx0XHRcdFx0Z2xUYXJnZXQgPSBfZ2wuVEVYVFVSRV8zRDtcblxuXHRcdFx0fSBlbHNlIGlmICggZHN0VGV4dHVyZS5pc0RhdGFBcnJheVRleHR1cmUgfHwgZHN0VGV4dHVyZS5pc0NvbXByZXNzZWRBcnJheVRleHR1cmUgKSB7XG5cblx0XHRcdFx0dGV4dHVyZXMuc2V0VGV4dHVyZTJEQXJyYXkoIGRzdFRleHR1cmUsIDAgKTtcblx0XHRcdFx0Z2xUYXJnZXQgPSBfZ2wuVEVYVFVSRV8yRF9BUlJBWTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkQoIGRzdFRleHR1cmUsIDAgKTtcblx0XHRcdFx0Z2xUYXJnZXQgPSBfZ2wuVEVYVFVSRV8yRDtcblxuXHRcdFx0fVxuXG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCBkc3RUZXh0dXJlLmZsaXBZICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIGRzdFRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX0FMSUdOTUVOVCwgZHN0VGV4dHVyZS51bnBhY2tBbGlnbm1lbnQgKTtcblxuXHRcdFx0Ly8gdXNlZCBmb3IgY29weWluZyBkYXRhIGZyb20gY3B1XG5cdFx0XHRjb25zdCBjdXJyZW50VW5wYWNrUm93TGVuID0gX2dsLmdldFBhcmFtZXRlciggX2dsLlVOUEFDS19ST1dfTEVOR1RIICk7XG5cdFx0XHRjb25zdCBjdXJyZW50VW5wYWNrSW1hZ2VIZWlnaHQgPSBfZ2wuZ2V0UGFyYW1ldGVyKCBfZ2wuVU5QQUNLX0lNQUdFX0hFSUdIVCApO1xuXHRcdFx0Y29uc3QgY3VycmVudFVucGFja1NraXBQaXhlbHMgPSBfZ2wuZ2V0UGFyYW1ldGVyKCBfZ2wuVU5QQUNLX1NLSVBfUElYRUxTICk7XG5cdFx0XHRjb25zdCBjdXJyZW50VW5wYWNrU2tpcFJvd3MgPSBfZ2wuZ2V0UGFyYW1ldGVyKCBfZ2wuVU5QQUNLX1NLSVBfUk9XUyApO1xuXHRcdFx0Y29uc3QgY3VycmVudFVucGFja1NraXBJbWFnZXMgPSBfZ2wuZ2V0UGFyYW1ldGVyKCBfZ2wuVU5QQUNLX1NLSVBfSU1BR0VTICk7XG5cblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19ST1dfTEVOR1RILCBpbWFnZS53aWR0aCApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX0lNQUdFX0hFSUdIVCwgaW1hZ2UuaGVpZ2h0ICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfU0tJUF9QSVhFTFMsIG1pblggKTtcblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19TS0lQX1JPV1MsIG1pblkgKTtcblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19TS0lQX0lNQUdFUywgbWluWiApO1xuXG5cdFx0XHQvLyBzZXQgdXAgdGhlIHNyYyB0ZXh0dXJlXG5cdFx0XHRjb25zdCBpc1NyYzNEID0gc3JjVGV4dHVyZS5pc0RhdGFBcnJheVRleHR1cmUgfHwgc3JjVGV4dHVyZS5pc0RhdGEzRFRleHR1cmU7XG5cdFx0XHRjb25zdCBpc0RzdDNEID0gZHN0VGV4dHVyZS5pc0RhdGFBcnJheVRleHR1cmUgfHwgZHN0VGV4dHVyZS5pc0RhdGEzRFRleHR1cmU7XG5cdFx0XHRpZiAoIHNyY1RleHR1cmUuaXNEZXB0aFRleHR1cmUgKSB7XG5cblx0XHRcdFx0Y29uc3Qgc3JjVGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggc3JjVGV4dHVyZSApO1xuXHRcdFx0XHRjb25zdCBkc3RUZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBkc3RUZXh0dXJlICk7XG5cdFx0XHRcdGNvbnN0IHNyY1JlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggc3JjVGV4dHVyZVByb3BlcnRpZXMuX19yZW5kZXJUYXJnZXQgKTtcblx0XHRcdFx0Y29uc3QgZHN0UmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBkc3RUZXh0dXJlUHJvcGVydGllcy5fX3JlbmRlclRhcmdldCApO1xuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5SRUFEX0ZSQU1FQlVGRkVSLCBzcmNSZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciApO1xuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5EUkFXX0ZSQU1FQlVGRkVSLCBkc3RSZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGRlcHRoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Ly8gaWYgdGhlIHNvdXJjZSBvciBkZXN0aW5hdGlvbiBhcmUgYSAzZCB0YXJnZXQgdGhlbiBhIGxheWVyIG5lZWRzIHRvIGJlIGJvdW5kXG5cdFx0XHRcdFx0aWYgKCBpc1NyYzNEICkge1xuXG5cdFx0XHRcdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlTGF5ZXIoIF9nbC5SRUFEX0ZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAsIHByb3BlcnRpZXMuZ2V0KCBzcmNUZXh0dXJlICkuX193ZWJnbFRleHR1cmUsIHNyY0xldmVsLCBtaW5aICsgaSApO1xuXHRcdFx0XHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZUxheWVyKCBfZ2wuRFJBV19GUkFNRUJVRkZFUiwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwLCBwcm9wZXJ0aWVzLmdldCggZHN0VGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlLCBkc3RMZXZlbCwgZHN0WiArIGkgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdF9nbC5ibGl0RnJhbWVidWZmZXIoIG1pblgsIG1pblksIHdpZHRoLCBoZWlnaHQsIGRzdFgsIGRzdFksIHdpZHRoLCBoZWlnaHQsIF9nbC5ERVBUSF9CVUZGRVJfQklULCBfZ2wuTkVBUkVTVCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5SRUFEX0ZSQU1FQlVGRkVSLCBudWxsICk7XG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkRSQVdfRlJBTUVCVUZGRVIsIG51bGwgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggc3JjTGV2ZWwgIT09IDAgfHwgc3JjVGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgfHwgcHJvcGVydGllcy5oYXMoIHNyY1RleHR1cmUgKSApIHtcblxuXHRcdFx0XHQvLyBnZXQgdGhlIGFwcHJvcHJpYXRlIGZyYW1lIGJ1ZmZlcnNcblx0XHRcdFx0Y29uc3Qgc3JjVGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggc3JjVGV4dHVyZSApO1xuXHRcdFx0XHRjb25zdCBkc3RUZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBkc3RUZXh0dXJlICk7XG5cblx0XHRcdFx0Ly8gYmluZCB0aGUgZnJhbWUgYnVmZmVyIHRhcmdldHNcblx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuUkVBRF9GUkFNRUJVRkZFUiwgX3NyY0ZyYW1lYnVmZmVyICk7XG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkRSQVdfRlJBTUVCVUZGRVIsIF9kc3RGcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGRlcHRoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Ly8gYXNzaWduIHRoZSBjb3JyZWN0IGxheWVycyBhbmQgbWlwIG1hcHMgdG8gdGhlIGZyYW1lIGJ1ZmZlcnNcblx0XHRcdFx0XHRpZiAoIGlzU3JjM0QgKSB7XG5cblx0XHRcdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmVMYXllciggX2dsLlJFQURfRlJBTUVCVUZGRVIsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgc3JjVGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUsIHNyY0xldmVsLCBtaW5aICsgaSApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCBfZ2wuUkVBRF9GUkFNRUJVRkZFUiwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwLCBfZ2wuVEVYVFVSRV8yRCwgc3JjVGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUsIHNyY0xldmVsICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGlzRHN0M0QgKSB7XG5cblx0XHRcdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmVMYXllciggX2dsLkRSQVdfRlJBTUVCVUZGRVIsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgZHN0VGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUsIGRzdExldmVsLCBkc3RaICsgaSApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCBfZ2wuRFJBV19GUkFNRUJVRkZFUiwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwLCBfZ2wuVEVYVFVSRV8yRCwgZHN0VGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUsIGRzdExldmVsICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBjb3B5IHRoZSBkYXRhIHVzaW5nIHRoZSBmYXN0ZXN0IGZ1bmN0aW9uIHRoYXQgY2FuIGFjaGlldmUgdGhlIGNvcHlcblx0XHRcdFx0XHRpZiAoIHNyY0xldmVsICE9PSAwICkge1xuXG5cdFx0XHRcdFx0XHRfZ2wuYmxpdEZyYW1lYnVmZmVyKCBtaW5YLCBtaW5ZLCB3aWR0aCwgaGVpZ2h0LCBkc3RYLCBkc3RZLCB3aWR0aCwgaGVpZ2h0LCBfZ2wuQ09MT1JfQlVGRkVSX0JJVCwgX2dsLk5FQVJFU1QgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGlzRHN0M0QgKSB7XG5cblx0XHRcdFx0XHRcdF9nbC5jb3B5VGV4U3ViSW1hZ2UzRCggZ2xUYXJnZXQsIGRzdExldmVsLCBkc3RYLCBkc3RZLCBkc3RaICsgaSwgbWluWCwgbWluWSwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0X2dsLmNvcHlUZXhTdWJJbWFnZTJEKCBnbFRhcmdldCwgZHN0TGV2ZWwsIGRzdFgsIGRzdFksIG1pblgsIG1pblksIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gdW5iaW5kIHJlYWQsIGRyYXcgYnVmZmVyc1xuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5SRUFEX0ZSQU1FQlVGRkVSLCBudWxsICk7XG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkRSQVdfRlJBTUVCVUZGRVIsIG51bGwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoIGlzRHN0M0QgKSB7XG5cblx0XHRcdFx0XHQvLyBjb3B5IGRhdGEgaW50byB0aGUgM2QgdGV4dHVyZVxuXHRcdFx0XHRcdGlmICggc3JjVGV4dHVyZS5pc0RhdGFUZXh0dXJlIHx8IHNyY1RleHR1cmUuaXNEYXRhM0RUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0XHRfZ2wudGV4U3ViSW1hZ2UzRCggZ2xUYXJnZXQsIGRzdExldmVsLCBkc3RYLCBkc3RZLCBkc3RaLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggZHN0VGV4dHVyZS5pc0NvbXByZXNzZWRBcnJheVRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRcdF9nbC5jb21wcmVzc2VkVGV4U3ViSW1hZ2UzRCggZ2xUYXJnZXQsIGRzdExldmVsLCBkc3RYLCBkc3RZLCBkc3RaLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgZ2xGb3JtYXQsIGltYWdlLmRhdGEgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdF9nbC50ZXhTdWJJbWFnZTNEKCBnbFRhcmdldCwgZHN0TGV2ZWwsIGRzdFgsIGRzdFksIGRzdFosIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBjb3B5IGRhdGEgaW50byB0aGUgMmQgdGV4dHVyZVxuXHRcdFx0XHRcdGlmICggc3JjVGV4dHVyZS5pc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0XHRfZ2wudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGRzdExldmVsLCBkc3RYLCBkc3RZLCB3aWR0aCwgaGVpZ2h0LCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBzcmNUZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRcdF9nbC5jb21wcmVzc2VkVGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGRzdExldmVsLCBkc3RYLCBkc3RZLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBnbEZvcm1hdCwgaW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0X2dsLnRleFN1YkltYWdlMkQoIF9nbC5URVhUVVJFXzJELCBkc3RMZXZlbCwgZHN0WCwgZHN0WSwgd2lkdGgsIGhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gcmVzZXQgdmFsdWVzXG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfUk9XX0xFTkdUSCwgY3VycmVudFVucGFja1Jvd0xlbiApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX0lNQUdFX0hFSUdIVCwgY3VycmVudFVucGFja0ltYWdlSGVpZ2h0ICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfU0tJUF9QSVhFTFMsIGN1cnJlbnRVbnBhY2tTa2lwUGl4ZWxzICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfU0tJUF9ST1dTLCBjdXJyZW50VW5wYWNrU2tpcFJvd3MgKTtcblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19TS0lQX0lNQUdFUywgY3VycmVudFVucGFja1NraXBJbWFnZXMgKTtcblxuXHRcdFx0Ly8gR2VuZXJhdGUgbWlwbWFwcyBvbmx5IHdoZW4gY29weWluZyBsZXZlbCAwXG5cdFx0XHRpZiAoIGRzdExldmVsID09PSAwICYmIGRzdFRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzICkge1xuXG5cdFx0XHRcdF9nbC5nZW5lcmF0ZU1pcG1hcCggZ2xUYXJnZXQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZS51bmJpbmRUZXh0dXJlKCk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogSW5pdGlhbGl6ZXMgdGhlIGdpdmVuIFdlYkdMUmVuZGVyVGFyZ2V0IG1lbW9yeS4gVXNlZnVsIGZvciBpbml0aWFsaXppbmcgYSByZW5kZXIgdGFyZ2V0IHNvIGRhdGFcblx0XHQgKiBjYW4gYmUgY29waWVkIGludG8gaXQgdXNpbmcge0BsaW5rIFdlYkdMUmVuZGVyZXIjY29weVRleHR1cmVUb1RleHR1cmV9IGJlZm9yZSBpdCBoYXMgYmVlblxuXHRcdCAqIHJlbmRlcmVkIHRvLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtXZWJHTFJlbmRlclRhcmdldH0gdGFyZ2V0IC0gVGhlIHJlbmRlciB0YXJnZXQuXG5cdFx0ICovXG5cdFx0dGhpcy5pbml0UmVuZGVyVGFyZ2V0ID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRcdGlmICggcHJvcGVydGllcy5nZXQoIHRhcmdldCApLl9fd2ViZ2xGcmFtZWJ1ZmZlciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRleHR1cmVzLnNldHVwUmVuZGVyVGFyZ2V0KCB0YXJnZXQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEluaXRpYWxpemVzIHRoZSBnaXZlbiB0ZXh0dXJlLiBVc2VmdWwgZm9yIHByZWxvYWRpbmcgYSB0ZXh0dXJlIHJhdGhlciB0aGFuIHdhaXRpbmcgdW50aWwgZmlyc3Rcblx0XHQgKiByZW5kZXIgKHdoaWNoIGNhbiBjYXVzZSBub3RpY2VhYmxlIGxhZ3MgZHVlIHRvIGRlY29kZSBhbmQgR1BVIHVwbG9hZCBvdmVyaGVhZCkuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZS5cblx0XHQgKi9cblx0XHR0aGlzLmluaXRUZXh0dXJlID0gZnVuY3Rpb24gKCB0ZXh0dXJlICkge1xuXG5cdFx0XHRpZiAoIHRleHR1cmUuaXNDdWJlVGV4dHVyZSApIHtcblxuXHRcdFx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlQ3ViZSggdGV4dHVyZSwgMCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzRGF0YTNEVGV4dHVyZSApIHtcblxuXHRcdFx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlM0QoIHRleHR1cmUsIDAgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0RhdGFBcnJheVRleHR1cmUgfHwgdGV4dHVyZS5pc0NvbXByZXNzZWRBcnJheVRleHR1cmUgKSB7XG5cblx0XHRcdFx0dGV4dHVyZXMuc2V0VGV4dHVyZTJEQXJyYXkoIHRleHR1cmUsIDAgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkQoIHRleHR1cmUsIDAgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZS51bmJpbmRUZXh0dXJlKCk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQ2FuIGJlIHVzZWQgdG8gcmVzZXQgdGhlIGludGVybmFsIFdlYkdMIHN0YXRlLiBUaGlzIG1ldGhvZCBpcyBtb3N0bHlcblx0XHQgKiByZWxldmFudCBmb3IgYXBwbGljYXRpb25zIHdoaWNoIHNoYXJlIGEgc2luZ2xlIFdlYkdMIGNvbnRleHQgYWNyb3NzXG5cdFx0ICogbXVsdGlwbGUgV2ViR0wgbGlicmFyaWVzLlxuXHRcdCAqL1xuXHRcdHRoaXMucmVzZXRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0X2N1cnJlbnRBY3RpdmVDdWJlRmFjZSA9IDA7XG5cdFx0XHRfY3VycmVudEFjdGl2ZU1pcG1hcExldmVsID0gMDtcblx0XHRcdF9jdXJyZW50UmVuZGVyVGFyZ2V0ID0gbnVsbDtcblxuXHRcdFx0c3RhdGUucmVzZXQoKTtcblx0XHRcdGJpbmRpbmdTdGF0ZXMucmVzZXQoKTtcblxuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiBfX1RIUkVFX0RFVlRPT0xTX18gIT09ICd1bmRlZmluZWQnICkge1xuXG5cdFx0XHRfX1RIUkVFX0RFVlRPT0xTX18uZGlzcGF0Y2hFdmVudCggbmV3IEN1c3RvbUV2ZW50KCAnb2JzZXJ2ZScsIHsgZGV0YWlsOiB0aGlzIH0gKSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogRGVmaW5lcyB0aGUgY29vcmRpbmF0ZSBzeXN0ZW0gb2YgdGhlIHJlbmRlcmVyLlxuXHQgKlxuXHQgKiBJbiBgV2ViR0xSZW5kZXJlcmAsIHRoZSB2YWx1ZSBpcyBhbHdheXMgYFdlYkdMQ29vcmRpbmF0ZVN5c3RlbWAuXG5cdCAqXG5cdCAqIEB0eXBlIHtXZWJHTENvb3JkaW5hdGVTeXN0ZW18V2ViR1BVQ29vcmRpbmF0ZVN5c3RlbX1cblx0ICogQGRlZmF1bHQgV2ViR0xDb29yZGluYXRlU3lzdGVtXG5cdCAqIEByZWFkb25seVxuXHQgKi9cblx0Z2V0IGNvb3JkaW5hdGVTeXN0ZW0oKSB7XG5cblx0XHRyZXR1cm4gV2ViR0xDb29yZGluYXRlU3lzdGVtO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVmaW5lcyB0aGUgb3V0cHV0IGNvbG9yIHNwYWNlIG9mIHRoZSByZW5kZXJlci5cblx0ICpcblx0ICogQHR5cGUge1NSR0JDb2xvclNwYWNlfExpbmVhclNSR0JDb2xvclNwYWNlfVxuXHQgKiBAZGVmYXVsdCBTUkdCQ29sb3JTcGFjZVxuXHQgKi9cblx0Z2V0IG91dHB1dENvbG9yU3BhY2UoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fb3V0cHV0Q29sb3JTcGFjZTtcblxuXHR9XG5cblx0c2V0IG91dHB1dENvbG9yU3BhY2UoIGNvbG9yU3BhY2UgKSB7XG5cblx0XHR0aGlzLl9vdXRwdXRDb2xvclNwYWNlID0gY29sb3JTcGFjZTtcblxuXHRcdGNvbnN0IGdsID0gdGhpcy5nZXRDb250ZXh0KCk7XG5cdFx0Z2wuZHJhd2luZ0J1ZmZlckNvbG9yU3BhY2UgPSBDb2xvck1hbmFnZW1lbnQuX2dldERyYXdpbmdCdWZmZXJDb2xvclNwYWNlKCBjb2xvclNwYWNlICk7XG5cdFx0Z2wudW5wYWNrQ29sb3JTcGFjZSA9IENvbG9yTWFuYWdlbWVudC5fZ2V0VW5wYWNrQ29sb3JTcGFjZSgpO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBBQ0VTRmlsbWljVG9uZU1hcHBpbmcsIEFkZEVxdWF0aW9uLCBBZGRPcGVyYXRpb24sIEFkZGl0aXZlQmxlbmRpbmcsIEFnWFRvbmVNYXBwaW5nLCBBbHBoYUZvcm1hdCwgQWx3YXlzQ29tcGFyZSwgQWx3YXlzRGVwdGgsIEFycmF5Q2FtZXJhLCBCYWNrU2lkZSwgQm94R2VvbWV0cnksIEJ1ZmZlckF0dHJpYnV0ZSwgQnVmZmVyR2VvbWV0cnksIEJ5dGVUeXBlLCBDaW5lb25Ub25lTWFwcGluZywgQ2xhbXBUb0VkZ2VXcmFwcGluZywgQ29sb3IsIENvbG9yTWFuYWdlbWVudCwgQ29uc3RhbnRBbHBoYUZhY3RvciwgQ29uc3RhbnRDb2xvckZhY3RvciwgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nLCBDdWJlUmVmcmFjdGlvbk1hcHBpbmcsIEN1YmVUZXh0dXJlLCBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZywgQ3VsbEZhY2VCYWNrLCBDdWxsRmFjZUZyb250LCBDdWxsRmFjZU5vbmUsIEN1c3RvbUJsZW5kaW5nLCBDdXN0b21Ub25lTWFwcGluZywgRGF0YTNEVGV4dHVyZSwgRGF0YUFycmF5VGV4dHVyZSwgRGVwdGhGb3JtYXQsIERlcHRoU3RlbmNpbEZvcm1hdCwgRGVwdGhUZXh0dXJlLCBEb3VibGVTaWRlLCBEc3RBbHBoYUZhY3RvciwgRHN0Q29sb3JGYWN0b3IsIEVxdWFsQ29tcGFyZSwgRXF1YWxEZXB0aCwgRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcsIEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nLCBFdWxlciwgRXZlbnREaXNwYXRjaGVyLCBFeHRlcm5hbFRleHR1cmUsIEZsb2F0VHlwZSwgRnJvbnRTaWRlLCBGcnVzdHVtLCBHTFNMMywgR3JlYXRlckNvbXBhcmUsIEdyZWF0ZXJEZXB0aCwgR3JlYXRlckVxdWFsQ29tcGFyZSwgR3JlYXRlckVxdWFsRGVwdGgsIEhhbGZGbG9hdFR5cGUsIEludFR5cGUsIExheWVycywgTGVzc0NvbXBhcmUsIExlc3NEZXB0aCwgTGVzc0VxdWFsQ29tcGFyZSwgTGVzc0VxdWFsRGVwdGgsIExpbmVhckZpbHRlciwgTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyLCBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyLCBMaW5lYXJTUkdCQ29sb3JTcGFjZSwgTGluZWFyVG9uZU1hcHBpbmcsIExpbmVhclRyYW5zZmVyLCBNYXRyaXgzLCBNYXRyaXg0LCBNYXhFcXVhdGlvbiwgTWVzaCwgTWVzaEJhc2ljTWF0ZXJpYWwsIE1lc2hEZXB0aE1hdGVyaWFsLCBNZXNoRGlzdGFuY2VNYXRlcmlhbCwgTWluRXF1YXRpb24sIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcsIE1peE9wZXJhdGlvbiwgTXVsdGlwbHlCbGVuZGluZywgTXVsdGlwbHlPcGVyYXRpb24sIE5lYXJlc3RGaWx0ZXIsIE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIsIE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyLCBOZXV0cmFsVG9uZU1hcHBpbmcsIE5ldmVyQ29tcGFyZSwgTmV2ZXJEZXB0aCwgTm9CbGVuZGluZywgTm9Db2xvclNwYWNlLCBOb1RvbmVNYXBwaW5nLCBOb3JtYWxCbGVuZGluZywgTm90RXF1YWxDb21wYXJlLCBOb3RFcXVhbERlcHRoLCBPYmplY3RTcGFjZU5vcm1hbE1hcCwgT25lRmFjdG9yLCBPbmVNaW51c0NvbnN0YW50QWxwaGFGYWN0b3IsIE9uZU1pbnVzQ29uc3RhbnRDb2xvckZhY3RvciwgT25lTWludXNEc3RBbHBoYUZhY3RvciwgT25lTWludXNEc3RDb2xvckZhY3RvciwgT25lTWludXNTcmNBbHBoYUZhY3RvciwgT25lTWludXNTcmNDb2xvckZhY3RvciwgT3J0aG9ncmFwaGljQ2FtZXJhLCBQQ0ZTaGFkb3dNYXAsIFBDRlNvZnRTaGFkb3dNYXAsIFBNUkVNR2VuZXJhdG9yLCBQZXJzcGVjdGl2ZUNhbWVyYSwgUGxhbmUsIFBsYW5lR2VvbWV0cnksIFJFRF9HUkVFTl9SR1RDMl9Gb3JtYXQsIFJFRF9SR1RDMV9Gb3JtYXQsIFJFVklTSU9OLCBSR0JBRGVwdGhQYWNraW5nLCBSR0JBRm9ybWF0LCBSR0JBSW50ZWdlckZvcm1hdCwgUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCwgUkdCQV9BU1RDXzEweDVfRm9ybWF0LCBSR0JBX0FTVENfMTB4Nl9Gb3JtYXQsIFJHQkFfQVNUQ18xMHg4X0Zvcm1hdCwgUkdCQV9BU1RDXzEyeDEwX0Zvcm1hdCwgUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCwgUkdCQV9BU1RDXzR4NF9Gb3JtYXQsIFJHQkFfQVNUQ181eDRfRm9ybWF0LCBSR0JBX0FTVENfNXg1X0Zvcm1hdCwgUkdCQV9BU1RDXzZ4NV9Gb3JtYXQsIFJHQkFfQVNUQ182eDZfRm9ybWF0LCBSR0JBX0FTVENfOHg1X0Zvcm1hdCwgUkdCQV9BU1RDXzh4Nl9Gb3JtYXQsIFJHQkFfQVNUQ184eDhfRm9ybWF0LCBSR0JBX0JQVENfRm9ybWF0LCBSR0JBX0VUQzJfRUFDX0Zvcm1hdCwgUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0LCBSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQsIFJHQkFfUzNUQ19EWFQxX0Zvcm1hdCwgUkdCQV9TM1RDX0RYVDNfRm9ybWF0LCBSR0JBX1MzVENfRFhUNV9Gb3JtYXQsIFJHQkZvcm1hdCwgUkdCX0JQVENfU0lHTkVEX0Zvcm1hdCwgUkdCX0JQVENfVU5TSUdORURfRm9ybWF0LCBSR0JfRVRDMV9Gb3JtYXQsIFJHQl9FVEMyX0Zvcm1hdCwgUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQsIFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0LCBSR0JfUzNUQ19EWFQxX0Zvcm1hdCwgUkdGb3JtYXQsIFJHSW50ZWdlckZvcm1hdCwgUmVkRm9ybWF0LCBSZWRJbnRlZ2VyRm9ybWF0LCBSZWluaGFyZFRvbmVNYXBwaW5nLCBSZXBlYXRXcmFwcGluZywgUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24sIFNJR05FRF9SRURfR1JFRU5fUkdUQzJfRm9ybWF0LCBTSUdORURfUkVEX1JHVEMxX0Zvcm1hdCwgU1JHQkNvbG9yU3BhY2UsIFNSR0JUcmFuc2ZlciwgU2hhZGVyQ2h1bmssIFNoYWRlckxpYiwgU2hhZGVyTWF0ZXJpYWwsIFNob3J0VHlwZSwgU3JjQWxwaGFGYWN0b3IsIFNyY0FscGhhU2F0dXJhdGVGYWN0b3IsIFNyY0NvbG9yRmFjdG9yLCBTdWJ0cmFjdEVxdWF0aW9uLCBTdWJ0cmFjdGl2ZUJsZW5kaW5nLCBUYW5nZW50U3BhY2VOb3JtYWxNYXAsIFRleHR1cmUsIFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSwgVWludDMyQnVmZmVyQXR0cmlidXRlLCBVbmlmb3Jtc0xpYiwgVW5pZm9ybXNVdGlscywgVW5zaWduZWRCeXRlVHlwZSwgVW5zaWduZWRJbnQxMDExMTFUeXBlLCBVbnNpZ25lZEludDI0OFR5cGUsIFVuc2lnbmVkSW50NTk5OVR5cGUsIFVuc2lnbmVkSW50VHlwZSwgVW5zaWduZWRTaG9ydDQ0NDRUeXBlLCBVbnNpZ25lZFNob3J0NTU1MVR5cGUsIFVuc2lnbmVkU2hvcnRUeXBlLCBWU01TaGFkb3dNYXAsIFZlY3RvcjIsIFZlY3RvcjMsIFZlY3RvcjQsIFdlYkdMQ29vcmRpbmF0ZVN5c3RlbSwgV2ViR0xDdWJlUmVuZGVyVGFyZ2V0LCBXZWJHTFJlbmRlclRhcmdldCwgV2ViR0xSZW5kZXJlciwgV2ViR0xVdGlscywgV2ViWFJDb250cm9sbGVyLCBaZXJvRmFjdG9yLCBjcmVhdGVDYW52YXNFbGVtZW50IH07XG4iXSwibmFtZXMiOlsiV2ViR0xBbmltYXRpb24iLCJjb250ZXh0IiwiaXNBbmltYXRpbmciLCJhbmltYXRpb25Mb29wIiwicmVxdWVzdElkIiwib25BbmltYXRpb25GcmFtZSIsInRpbWUiLCJmcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInN0YXJ0Iiwic3RvcCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwic2V0QW5pbWF0aW9uTG9vcCIsImNhbGxiYWNrIiwic2V0Q29udGV4dCIsInZhbHVlIiwiV2ViR0xBdHRyaWJ1dGVzIiwiZ2wiLCJidWZmZXJzIiwiV2Vha01hcCIsImdldCIsImF0dHJpYnV0ZSIsImlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUiLCJkYXRhIiwicmVtb3ZlIiwiZGVsZXRlQnVmZmVyIiwiYnVmZmVyIiwiZGVsZXRlIiwidXBkYXRlIiwiYnVmZmVyVHlwZSIsImlzR0xCdWZmZXJBdHRyaWJ1dGUiLCJjYWNoZWQiLCJ2ZXJzaW9uIiwic2V0IiwidHlwZSIsImJ5dGVzUGVyRWxlbWVudCIsImVsZW1lbnRTaXplIiwidW5kZWZpbmVkIiwiYXJyYXkiLCJ1c2FnZSIsInNpemUiLCJieXRlTGVuZ3RoIiwiY3JlYXRlQnVmZmVyIiwiYmluZEJ1ZmZlciIsImJ1ZmZlckRhdGEiLCJvblVwbG9hZENhbGxiYWNrIiwiRmxvYXQzMkFycmF5IiwiRkxPQVQiLCJGbG9hdDE2QXJyYXkiLCJIQUxGX0ZMT0FUIiwiVWludDE2QXJyYXkiLCJpc0Zsb2F0MTZCdWZmZXJBdHRyaWJ1dGUiLCJVTlNJR05FRF9TSE9SVCIsIkludDE2QXJyYXkiLCJTSE9SVCIsIlVpbnQzMkFycmF5IiwiVU5TSUdORURfSU5UIiwiSW50MzJBcnJheSIsIklOVCIsIkludDhBcnJheSIsIkJZVEUiLCJVaW50OEFycmF5IiwiVU5TSUdORURfQllURSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiRXJyb3IiLCJCWVRFU19QRVJfRUxFTUVOVCIsInVwZGF0ZVJhbmdlcyIsImxlbmd0aCIsImJ1ZmZlclN1YkRhdGEiLCJzb3J0IiwiYSIsImIiLCJtZXJnZUluZGV4IiwiaSIsInByZXZpb3VzUmFuZ2UiLCJyYW5nZSIsImNvdW50IiwiTWF0aCIsIm1heCIsImwiLCJjbGVhclVwZGF0ZVJhbmdlcyIsInVwZGF0ZUJ1ZmZlciIsIlNoYWRlckNodW5rIiwiYWxwaGFoYXNoX2ZyYWdtZW50IiwiYWxwaGFoYXNoX3BhcnNfZnJhZ21lbnQiLCJhbHBoYW1hcF9mcmFnbWVudCIsImFscGhhbWFwX3BhcnNfZnJhZ21lbnQiLCJhbHBoYXRlc3RfZnJhZ21lbnQiLCJhbHBoYXRlc3RfcGFyc19mcmFnbWVudCIsImFvbWFwX2ZyYWdtZW50IiwiYW9tYXBfcGFyc19mcmFnbWVudCIsImJhdGNoaW5nX3BhcnNfdmVydGV4IiwiYmF0Y2hpbmdfdmVydGV4IiwiYmVnaW5fdmVydGV4IiwiYmVnaW5ub3JtYWxfdmVydGV4IiwiYnNkZnMiLCJpcmlkZXNjZW5jZV9mcmFnbWVudCIsImJ1bXBtYXBfcGFyc19mcmFnbWVudCIsImNsaXBwaW5nX3BsYW5lc19mcmFnbWVudCIsImNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50IiwiY2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4IiwiY2xpcHBpbmdfcGxhbmVzX3ZlcnRleCIsImNvbG9yX2ZyYWdtZW50IiwiY29sb3JfcGFyc19mcmFnbWVudCIsImNvbG9yX3BhcnNfdmVydGV4IiwiY29sb3JfdmVydGV4IiwiY29tbW9uIiwiY3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50IiwiZGVmYXVsdG5vcm1hbF92ZXJ0ZXgiLCJkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXgiLCJkaXNwbGFjZW1lbnRtYXBfdmVydGV4IiwiZW1pc3NpdmVtYXBfZnJhZ21lbnQiLCJlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50IiwiY29sb3JzcGFjZV9mcmFnbWVudCIsImNvbG9yc3BhY2VfcGFyc19mcmFnbWVudCIsImVudm1hcF9mcmFnbWVudCIsImVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudCIsImVudm1hcF9wYXJzX2ZyYWdtZW50IiwiZW52bWFwX3BhcnNfdmVydGV4IiwiZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQiLCJlbnZtYXBfdmVydGV4IiwiZm9nX3ZlcnRleCIsImZvZ19wYXJzX3ZlcnRleCIsImZvZ19mcmFnbWVudCIsImZvZ19wYXJzX2ZyYWdtZW50IiwiZ3JhZGllbnRtYXBfcGFyc19mcmFnbWVudCIsImxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQiLCJsaWdodHNfbGFtYmVydF9mcmFnbWVudCIsImxpZ2h0c19sYW1iZXJ0X3BhcnNfZnJhZ21lbnQiLCJsaWdodHNfcGFyc19iZWdpbiIsImxpZ2h0c190b29uX2ZyYWdtZW50IiwibGlnaHRzX3Rvb25fcGFyc19mcmFnbWVudCIsImxpZ2h0c19waG9uZ19mcmFnbWVudCIsImxpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50IiwibGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50IiwibGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQiLCJsaWdodHNfZnJhZ21lbnRfYmVnaW4iLCJsaWdodHNfZnJhZ21lbnRfbWFwcyIsImxpZ2h0c19mcmFnbWVudF9lbmQiLCJsb2dkZXB0aGJ1Zl9mcmFnbWVudCIsImxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQiLCJsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCIsImxvZ2RlcHRoYnVmX3ZlcnRleCIsIm1hcF9mcmFnbWVudCIsIm1hcF9wYXJzX2ZyYWdtZW50IiwibWFwX3BhcnRpY2xlX2ZyYWdtZW50IiwibWFwX3BhcnRpY2xlX3BhcnNfZnJhZ21lbnQiLCJtZXRhbG5lc3NtYXBfZnJhZ21lbnQiLCJtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudCIsIm1vcnBoaW5zdGFuY2VfdmVydGV4IiwibW9ycGhjb2xvcl92ZXJ0ZXgiLCJtb3JwaG5vcm1hbF92ZXJ0ZXgiLCJtb3JwaHRhcmdldF9wYXJzX3ZlcnRleCIsIm1vcnBodGFyZ2V0X3ZlcnRleCIsIm5vcm1hbF9mcmFnbWVudF9iZWdpbiIsIm5vcm1hbF9mcmFnbWVudF9tYXBzIiwibm9ybWFsX3BhcnNfZnJhZ21lbnQiLCJub3JtYWxfcGFyc192ZXJ0ZXgiLCJub3JtYWxfdmVydGV4Iiwibm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQiLCJjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X2JlZ2luIiwiY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9tYXBzIiwiY2xlYXJjb2F0X3BhcnNfZnJhZ21lbnQiLCJpcmlkZXNjZW5jZV9wYXJzX2ZyYWdtZW50Iiwib3BhcXVlX2ZyYWdtZW50IiwicGFja2luZyIsInByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQiLCJwcm9qZWN0X3ZlcnRleCIsImRpdGhlcmluZ19mcmFnbWVudCIsImRpdGhlcmluZ19wYXJzX2ZyYWdtZW50Iiwicm91Z2huZXNzbWFwX2ZyYWdtZW50Iiwicm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQiLCJzaGFkb3dtYXBfcGFyc19mcmFnbWVudCIsInNoYWRvd21hcF9wYXJzX3ZlcnRleCIsInNoYWRvd21hcF92ZXJ0ZXgiLCJzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQiLCJza2luYmFzZV92ZXJ0ZXgiLCJza2lubmluZ19wYXJzX3ZlcnRleCIsInNraW5uaW5nX3ZlcnRleCIsInNraW5ub3JtYWxfdmVydGV4Iiwic3BlY3VsYXJtYXBfZnJhZ21lbnQiLCJzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50IiwidG9uZW1hcHBpbmdfZnJhZ21lbnQiLCJ0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50IiwidHJhbnNtaXNzaW9uX2ZyYWdtZW50IiwidHJhbnNtaXNzaW9uX3BhcnNfZnJhZ21lbnQiLCJ1dl9wYXJzX2ZyYWdtZW50IiwidXZfcGFyc192ZXJ0ZXgiLCJ1dl92ZXJ0ZXgiLCJ3b3JsZHBvc192ZXJ0ZXgiLCJiYWNrZ3JvdW5kX3ZlcnQiLCJiYWNrZ3JvdW5kX2ZyYWciLCJiYWNrZ3JvdW5kQ3ViZV92ZXJ0IiwiYmFja2dyb3VuZEN1YmVfZnJhZyIsImN1YmVfdmVydCIsImN1YmVfZnJhZyIsImRlcHRoX3ZlcnQiLCJkZXB0aF9mcmFnIiwiZGlzdGFuY2VSR0JBX3ZlcnQiLCJkaXN0YW5jZVJHQkFfZnJhZyIsImVxdWlyZWN0X3ZlcnQiLCJlcXVpcmVjdF9mcmFnIiwibGluZWRhc2hlZF92ZXJ0IiwibGluZWRhc2hlZF9mcmFnIiwibWVzaGJhc2ljX3ZlcnQiLCJtZXNoYmFzaWNfZnJhZyIsIm1lc2hsYW1iZXJ0X3ZlcnQiLCJtZXNobGFtYmVydF9mcmFnIiwibWVzaG1hdGNhcF92ZXJ0IiwibWVzaG1hdGNhcF9mcmFnIiwibWVzaG5vcm1hbF92ZXJ0IiwibWVzaG5vcm1hbF9mcmFnIiwibWVzaHBob25nX3ZlcnQiLCJtZXNocGhvbmdfZnJhZyIsIm1lc2hwaHlzaWNhbF92ZXJ0IiwibWVzaHBoeXNpY2FsX2ZyYWciLCJtZXNodG9vbl92ZXJ0IiwibWVzaHRvb25fZnJhZyIsInBvaW50c192ZXJ0IiwicG9pbnRzX2ZyYWciLCJzaGFkb3dfdmVydCIsInNoYWRvd19mcmFnIiwic3ByaXRlX3ZlcnQiLCJzcHJpdGVfZnJhZyIsIlVuaWZvcm1zTGliIiwiZGlmZnVzZSIsIm9wYWNpdHkiLCJtYXAiLCJtYXBUcmFuc2Zvcm0iLCJhbHBoYU1hcCIsImFscGhhTWFwVHJhbnNmb3JtIiwiYWxwaGFUZXN0Iiwic3BlY3VsYXJtYXAiLCJzcGVjdWxhck1hcCIsInNwZWN1bGFyTWFwVHJhbnNmb3JtIiwiZW52bWFwIiwiZW52TWFwIiwiZW52TWFwUm90YXRpb24iLCJmbGlwRW52TWFwIiwicmVmbGVjdGl2aXR5IiwiaW9yIiwicmVmcmFjdGlvblJhdGlvIiwiYW9tYXAiLCJhb01hcCIsImFvTWFwSW50ZW5zaXR5IiwiYW9NYXBUcmFuc2Zvcm0iLCJsaWdodG1hcCIsImxpZ2h0TWFwIiwibGlnaHRNYXBJbnRlbnNpdHkiLCJsaWdodE1hcFRyYW5zZm9ybSIsImJ1bXBtYXAiLCJidW1wTWFwIiwiYnVtcE1hcFRyYW5zZm9ybSIsImJ1bXBTY2FsZSIsIm5vcm1hbG1hcCIsIm5vcm1hbE1hcCIsIm5vcm1hbE1hcFRyYW5zZm9ybSIsIm5vcm1hbFNjYWxlIiwiZGlzcGxhY2VtZW50bWFwIiwiZGlzcGxhY2VtZW50TWFwIiwiZGlzcGxhY2VtZW50TWFwVHJhbnNmb3JtIiwiZGlzcGxhY2VtZW50U2NhbGUiLCJkaXNwbGFjZW1lbnRCaWFzIiwiZW1pc3NpdmVtYXAiLCJlbWlzc2l2ZU1hcCIsImVtaXNzaXZlTWFwVHJhbnNmb3JtIiwibWV0YWxuZXNzbWFwIiwibWV0YWxuZXNzTWFwIiwibWV0YWxuZXNzTWFwVHJhbnNmb3JtIiwicm91Z2huZXNzbWFwIiwicm91Z2huZXNzTWFwIiwicm91Z2huZXNzTWFwVHJhbnNmb3JtIiwiZ3JhZGllbnRtYXAiLCJncmFkaWVudE1hcCIsImZvZyIsImZvZ0RlbnNpdHkiLCJmb2dOZWFyIiwiZm9nRmFyIiwiZm9nQ29sb3IiLCJsaWdodHMiLCJhbWJpZW50TGlnaHRDb2xvciIsImxpZ2h0UHJvYmUiLCJkaXJlY3Rpb25hbExpZ2h0cyIsInByb3BlcnRpZXMiLCJkaXJlY3Rpb24iLCJjb2xvciIsImRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzIiwic2hhZG93SW50ZW5zaXR5Iiwic2hhZG93QmlhcyIsInNoYWRvd05vcm1hbEJpYXMiLCJzaGFkb3dSYWRpdXMiLCJzaGFkb3dNYXBTaXplIiwiZGlyZWN0aW9uYWxTaGFkb3dNYXAiLCJkaXJlY3Rpb25hbFNoYWRvd01hdHJpeCIsInNwb3RMaWdodHMiLCJwb3NpdGlvbiIsImRpc3RhbmNlIiwiY29uZUNvcyIsInBlbnVtYnJhQ29zIiwiZGVjYXkiLCJzcG90TGlnaHRTaGFkb3dzIiwic3BvdExpZ2h0TWFwIiwic3BvdFNoYWRvd01hcCIsInNwb3RMaWdodE1hdHJpeCIsInBvaW50TGlnaHRzIiwicG9pbnRMaWdodFNoYWRvd3MiLCJzaGFkb3dDYW1lcmFOZWFyIiwic2hhZG93Q2FtZXJhRmFyIiwicG9pbnRTaGFkb3dNYXAiLCJwb2ludFNoYWRvd01hdHJpeCIsImhlbWlzcGhlcmVMaWdodHMiLCJza3lDb2xvciIsImdyb3VuZENvbG9yIiwicmVjdEFyZWFMaWdodHMiLCJ3aWR0aCIsImhlaWdodCIsImx0Y18xIiwibHRjXzIiLCJwb2ludHMiLCJzY2FsZSIsInV2VHJhbnNmb3JtIiwic3ByaXRlIiwiY2VudGVyIiwicm90YXRpb24iLCJTaGFkZXJMaWIiLCJiYXNpYyIsInVuaWZvcm1zIiwidmVydGV4U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJsYW1iZXJ0IiwiZW1pc3NpdmUiLCJwaG9uZyIsInNwZWN1bGFyIiwic2hpbmluZXNzIiwic3RhbmRhcmQiLCJyb3VnaG5lc3MiLCJtZXRhbG5lc3MiLCJlbnZNYXBJbnRlbnNpdHkiLCJ0b29uIiwibWF0Y2FwIiwiZGFzaGVkIiwiZGFzaFNpemUiLCJ0b3RhbFNpemUiLCJkZXB0aCIsIm5vcm1hbCIsImJhY2tncm91bmQiLCJ0MkQiLCJiYWNrZ3JvdW5kSW50ZW5zaXR5IiwiYmFja2dyb3VuZEN1YmUiLCJiYWNrZ3JvdW5kQmx1cnJpbmVzcyIsImJhY2tncm91bmRSb3RhdGlvbiIsImN1YmUiLCJ0Q3ViZSIsInRGbGlwIiwiZXF1aXJlY3QiLCJ0RXF1aXJlY3QiLCJkaXN0YW5jZVJHQkEiLCJyZWZlcmVuY2VQb3NpdGlvbiIsIm5lYXJEaXN0YW5jZSIsImZhckRpc3RhbmNlIiwic2hhZG93IiwicGh5c2ljYWwiLCJjbGVhcmNvYXQiLCJjbGVhcmNvYXRNYXAiLCJjbGVhcmNvYXRNYXBUcmFuc2Zvcm0iLCJjbGVhcmNvYXROb3JtYWxNYXAiLCJjbGVhcmNvYXROb3JtYWxNYXBUcmFuc2Zvcm0iLCJjbGVhcmNvYXROb3JtYWxTY2FsZSIsImNsZWFyY29hdFJvdWdobmVzcyIsImNsZWFyY29hdFJvdWdobmVzc01hcCIsImNsZWFyY29hdFJvdWdobmVzc01hcFRyYW5zZm9ybSIsImRpc3BlcnNpb24iLCJpcmlkZXNjZW5jZSIsImlyaWRlc2NlbmNlTWFwIiwiaXJpZGVzY2VuY2VNYXBUcmFuc2Zvcm0iLCJpcmlkZXNjZW5jZUlPUiIsImlyaWRlc2NlbmNlVGhpY2tuZXNzTWluaW11bSIsImlyaWRlc2NlbmNlVGhpY2tuZXNzTWF4aW11bSIsImlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwIiwiaXJpZGVzY2VuY2VUaGlja25lc3NNYXBUcmFuc2Zvcm0iLCJzaGVlbiIsInNoZWVuQ29sb3IiLCJzaGVlbkNvbG9yTWFwIiwic2hlZW5Db2xvck1hcFRyYW5zZm9ybSIsInNoZWVuUm91Z2huZXNzIiwic2hlZW5Sb3VnaG5lc3NNYXAiLCJzaGVlblJvdWdobmVzc01hcFRyYW5zZm9ybSIsInRyYW5zbWlzc2lvbiIsInRyYW5zbWlzc2lvbk1hcCIsInRyYW5zbWlzc2lvbk1hcFRyYW5zZm9ybSIsInRyYW5zbWlzc2lvblNhbXBsZXJTaXplIiwidHJhbnNtaXNzaW9uU2FtcGxlck1hcCIsInRoaWNrbmVzcyIsInRoaWNrbmVzc01hcCIsInRoaWNrbmVzc01hcFRyYW5zZm9ybSIsImF0dGVudWF0aW9uRGlzdGFuY2UiLCJhdHRlbnVhdGlvbkNvbG9yIiwic3BlY3VsYXJDb2xvciIsInNwZWN1bGFyQ29sb3JNYXAiLCJzcGVjdWxhckNvbG9yTWFwVHJhbnNmb3JtIiwic3BlY3VsYXJJbnRlbnNpdHkiLCJzcGVjdWxhckludGVuc2l0eU1hcCIsInNwZWN1bGFySW50ZW5zaXR5TWFwVHJhbnNmb3JtIiwiYW5pc290cm9weVZlY3RvciIsImFuaXNvdHJvcHlNYXAiLCJhbmlzb3Ryb3B5TWFwVHJhbnNmb3JtIiwiX3JnYiIsInIiLCJnIiwiX2UxJDEiLCJfbTEkMSIsIldlYkdMQmFja2dyb3VuZCIsInJlbmRlcmVyIiwiY3ViZW1hcHMiLCJjdWJldXZtYXBzIiwic3RhdGUiLCJvYmplY3RzIiwiYWxwaGEiLCJwcmVtdWx0aXBsaWVkQWxwaGEiLCJjbGVhckNvbG9yIiwicGxhbmVNZXNoIiwiYm94TWVzaCIsImNsZWFyQWxwaGEiLCJjdXJyZW50QmFja2dyb3VuZCIsImN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiIsImN1cnJlbnRUb25lbWFwcGluZyIsImdldEJhY2tncm91bmQiLCJzY2VuZSIsImlzU2NlbmUiLCJpc1RleHR1cmUiLCJzZXRDbGVhciIsImdldFJHQiIsImdldENsZWFyQ29sb3IiLCJzZXRDbGVhckNvbG9yIiwiZ2V0Q2xlYXJBbHBoYSIsInNldENsZWFyQWxwaGEiLCJyZW5kZXIiLCJmb3JjZUNsZWFyIiwiaXNDb2xvciIsImVudmlyb25tZW50QmxlbmRNb2RlIiwieHIiLCJnZXRFbnZpcm9ubWVudEJsZW5kTW9kZSIsImF1dG9DbGVhciIsInNldFRlc3QiLCJzZXRNYXNrIiwiY2xlYXIiLCJhdXRvQ2xlYXJDb2xvciIsImF1dG9DbGVhckRlcHRoIiwiYXV0b0NsZWFyU3RlbmNpbCIsImFkZFRvUmVuZGVyTGlzdCIsInJlbmRlckxpc3QiLCJpc0N1YmVUZXh0dXJlIiwibWFwcGluZyIsIm5hbWUiLCJzaWRlIiwiZGVwdGhUZXN0IiwiZGVwdGhXcml0ZSIsImFsbG93T3ZlcnJpZGUiLCJnZW9tZXRyeSIsImRlbGV0ZUF0dHJpYnV0ZSIsIm9uQmVmb3JlUmVuZGVyIiwiY2FtZXJhIiwidGhpcyIsIm1hdHJpeFdvcmxkIiwiY29weVBvc2l0aW9uIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJtYXRlcmlhbCIsImNvcHkiLCJ4IiwieSIsInoiLCJpc1JlbmRlclRhcmdldFRleHR1cmUiLCJzZXRGcm9tTWF0cml4NCIsIm1ha2VSb3RhdGlvbkZyb21FdWxlciIsInRvbmVNYXBwZWQiLCJnZXRUcmFuc2ZlciIsImNvbG9yU3BhY2UiLCJ0b25lTWFwcGluZyIsIm5lZWRzVXBkYXRlIiwibGF5ZXJzIiwiZW5hYmxlQWxsIiwidW5zaGlmdCIsIm1hdHJpeEF1dG9VcGRhdGUiLCJ1cGRhdGVNYXRyaXgiLCJtYXRyaXgiLCJkaXNwb3NlIiwiV2ViR0xCaW5kaW5nU3RhdGVzIiwiYXR0cmlidXRlcyIsIm1heFZlcnRleEF0dHJpYnV0ZXMiLCJnZXRQYXJhbWV0ZXIiLCJNQVhfVkVSVEVYX0FUVFJJQlMiLCJiaW5kaW5nU3RhdGVzIiwiZGVmYXVsdFN0YXRlIiwiY3JlYXRlQmluZGluZ1N0YXRlIiwiY3VycmVudFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJiaW5kVmVydGV4QXJyYXlPYmplY3QiLCJ2YW8iLCJiaW5kVmVydGV4QXJyYXkiLCJkZWxldGVWZXJ0ZXhBcnJheU9iamVjdCIsImRlbGV0ZVZlcnRleEFycmF5IiwibmV3QXR0cmlidXRlcyIsImVuYWJsZWRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlRGl2aXNvcnMiLCJwcm9ncmFtIiwid2lyZWZyYW1lIiwib2JqZWN0IiwiaW5kZXgiLCJpbml0QXR0cmlidXRlcyIsImlsIiwiZW5hYmxlQXR0cmlidXRlIiwiZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciIsIm1lc2hQZXJBdHRyaWJ1dGUiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInZlcnRleEF0dHJpYkRpdmlzb3IiLCJkaXNhYmxlVW51c2VkQXR0cmlidXRlcyIsImRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJub3JtYWxpemVkIiwic3RyaWRlIiwib2Zmc2V0IiwiaW50ZWdlciIsInZlcnRleEF0dHJpYklQb2ludGVyIiwicmVzZXQiLCJyZXNldERlZmF1bHRTdGF0ZSIsInNldHVwIiwidXBkYXRlQnVmZmVycyIsInByb2dyYW1NYXAiLCJpZCIsInN0YXRlTWFwIiwiY3JlYXRlVmVydGV4QXJyYXkiLCJnZXRCaW5kaW5nU3RhdGUiLCJjYWNoZWRBdHRyaWJ1dGVzIiwiZ2VvbWV0cnlBdHRyaWJ1dGVzIiwiYXR0cmlidXRlc051bSIsInByb2dyYW1BdHRyaWJ1dGVzIiwiZ2V0QXR0cmlidXRlcyIsImxvY2F0aW9uIiwiY2FjaGVkQXR0cmlidXRlIiwiZ2VvbWV0cnlBdHRyaWJ1dGUiLCJpbnN0YW5jZU1hdHJpeCIsImluc3RhbmNlQ29sb3IiLCJjYWNoZSIsInNhdmVDYWNoZSIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSIiwibWF0ZXJpYWxEZWZhdWx0QXR0cmlidXRlVmFsdWVzIiwiZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyIsInByb2dyYW1BdHRyaWJ1dGUiLCJpdGVtU2l6ZSIsImdwdVR5cGUiLCJpc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyIiwibG9jYXRpb25TaXplIiwiaXNJbnN0YW5jZWRNZXNoIiwiX21heEluc3RhbmNlQ291bnQiLCJBUlJBWV9CVUZGRVIiLCJpc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSIsInZlcnRleEF0dHJpYjJmdiIsInZlcnRleEF0dHJpYjNmdiIsInZlcnRleEF0dHJpYjRmdiIsInZlcnRleEF0dHJpYjFmdiIsInNldHVwVmVydGV4QXR0cmlidXRlcyIsImdlb21ldHJ5SWQiLCJwcm9ncmFtSWQiLCJyZWxlYXNlU3RhdGVzT2ZHZW9tZXRyeSIsInJlbGVhc2VTdGF0ZXNPZlByb2dyYW0iLCJXZWJHTEJ1ZmZlclJlbmRlcmVyIiwiZXh0ZW5zaW9ucyIsImluZm8iLCJtb2RlIiwicmVuZGVySW5zdGFuY2VzIiwicHJpbWNvdW50IiwiZHJhd0FycmF5c0luc3RhbmNlZCIsInNldE1vZGUiLCJkcmF3QXJyYXlzIiwicmVuZGVyTXVsdGlEcmF3Iiwic3RhcnRzIiwiY291bnRzIiwiZHJhd0NvdW50IiwibXVsdGlEcmF3QXJyYXlzV0VCR0wiLCJlbGVtZW50Q291bnQiLCJyZW5kZXJNdWx0aURyYXdJbnN0YW5jZXMiLCJleHRlbnNpb24iLCJtdWx0aURyYXdBcnJheXNJbnN0YW5jZWRXRUJHTCIsIldlYkdMQ2FwYWJpbGl0aWVzIiwicGFyYW1ldGVycyIsInV0aWxzIiwibWF4QW5pc290cm9weSIsImdldE1heFByZWNpc2lvbiIsInByZWNpc2lvbiIsImdldFNoYWRlclByZWNpc2lvbkZvcm1hdCIsIlZFUlRFWF9TSEFERVIiLCJISUdIX0ZMT0FUIiwiRlJBR01FTlRfU0hBREVSIiwiTUVESVVNX0ZMT0FUIiwibWF4UHJlY2lzaW9uIiwiY29uc29sZSIsIndhcm4iLCJsb2dhcml0aG1pY0RlcHRoQnVmZmVyIiwicmV2ZXJzZWREZXB0aEJ1ZmZlciIsImhhcyIsIm1heFRleHR1cmVzIiwiTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMiLCJtYXhWZXJ0ZXhUZXh0dXJlcyIsIk1BWF9WRVJURVhfVEVYVFVSRV9JTUFHRV9VTklUUyIsImlzV2ViR0wyIiwiZ2V0TWF4QW5pc290cm9weSIsIk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsInRleHR1cmVGb3JtYXRSZWFkYWJsZSIsInRleHR1cmVGb3JtYXQiLCJjb252ZXJ0IiwiSU1QTEVNRU5UQVRJT05fQ09MT1JfUkVBRF9GT1JNQVQiLCJ0ZXh0dXJlVHlwZVJlYWRhYmxlIiwidGV4dHVyZVR5cGUiLCJoYWxmRmxvYXRTdXBwb3J0ZWRCeUV4dCIsIklNUExFTUVOVEFUSU9OX0NPTE9SX1JFQURfVFlQRSIsIm1heFRleHR1cmVTaXplIiwiTUFYX1RFWFRVUkVfU0laRSIsIm1heEN1YmVtYXBTaXplIiwiTUFYX0NVQkVfTUFQX1RFWFRVUkVfU0laRSIsIm1heEF0dHJpYnV0ZXMiLCJtYXhWZXJ0ZXhVbmlmb3JtcyIsIk1BWF9WRVJURVhfVU5JRk9STV9WRUNUT1JTIiwibWF4VmFyeWluZ3MiLCJNQVhfVkFSWUlOR19WRUNUT1JTIiwibWF4RnJhZ21lbnRVbmlmb3JtcyIsIk1BWF9GUkFHTUVOVF9VTklGT1JNX1ZFQ1RPUlMiLCJ2ZXJ0ZXhUZXh0dXJlcyIsIm1heFNhbXBsZXMiLCJNQVhfU0FNUExFUyIsIldlYkdMQ2xpcHBpbmciLCJzY29wZSIsImdsb2JhbFN0YXRlIiwibnVtR2xvYmFsUGxhbmVzIiwibG9jYWxDbGlwcGluZ0VuYWJsZWQiLCJyZW5kZXJpbmdTaGFkb3dzIiwicGxhbmUiLCJ2aWV3Tm9ybWFsTWF0cml4IiwidW5pZm9ybSIsInByb2plY3RQbGFuZXMiLCJwbGFuZXMiLCJkc3RPZmZzZXQiLCJza2lwVHJhbnNmb3JtIiwiblBsYW5lcyIsImRzdEFycmF5IiwiZmxhdFNpemUiLCJ2aWV3TWF0cml4IiwibWF0cml4V29ybGRJbnZlcnNlIiwiZ2V0Tm9ybWFsTWF0cml4IiwiaTQiLCJhcHBseU1hdHJpeDQiLCJ0b0FycmF5IiwiY29uc3RhbnQiLCJudW1QbGFuZXMiLCJudW1JbnRlcnNlY3Rpb24iLCJpbml0IiwiZW5hYmxlTG9jYWxDbGlwcGluZyIsImVuYWJsZWQiLCJiZWdpblNoYWRvd3MiLCJlbmRTaGFkb3dzIiwic2V0R2xvYmFsU3RhdGUiLCJzZXRTdGF0ZSIsInVzZUNhY2hlIiwiY2xpcHBpbmdQbGFuZXMiLCJjbGlwSW50ZXJzZWN0aW9uIiwiY2xpcFNoYWRvd3MiLCJtYXRlcmlhbFByb3BlcnRpZXMiLCJuR2xvYmFsIiwibEdsb2JhbCIsImNsaXBwaW5nU3RhdGUiLCJXZWJHTEN1YmVNYXBzIiwibWFwVGV4dHVyZU1hcHBpbmciLCJ0ZXh0dXJlIiwib25UZXh0dXJlRGlzcG9zZSIsImV2ZW50IiwidGFyZ2V0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImN1YmVtYXAiLCJpbWFnZSIsInJlbmRlclRhcmdldCIsImZyb21FcXVpcmVjdGFuZ3VsYXJUZXh0dXJlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIkVYVFJBX0xPRF9TSUdNQSIsIl9mbGF0Q2FtZXJhIiwiX2NsZWFyQ29sb3IiLCJfb2xkVGFyZ2V0IiwiX29sZEFjdGl2ZUN1YmVGYWNlIiwiX29sZEFjdGl2ZU1pcG1hcExldmVsIiwiX29sZFhyRW5hYmxlZCIsIlBISSIsInNxcnQiLCJJTlZfUEhJIiwiX2F4aXNEaXJlY3Rpb25zIiwiX29yaWdpbiIsIlBNUkVNR2VuZXJhdG9yIiwiY29uc3RydWN0b3IiLCJfcmVuZGVyZXIiLCJfcGluZ1BvbmdSZW5kZXJUYXJnZXQiLCJfbG9kTWF4IiwiX2N1YmVTaXplIiwiX2xvZFBsYW5lcyIsIl9zaXplTG9kcyIsIl9zaWdtYXMiLCJfYmx1ck1hdGVyaWFsIiwiX2N1YmVtYXBNYXRlcmlhbCIsIl9lcXVpcmVjdE1hdGVyaWFsIiwiX2NvbXBpbGVNYXRlcmlhbCIsImZyb21TY2VuZSIsInNpZ21hIiwibmVhciIsImZhciIsIm9wdGlvbnMiLCJnZXRSZW5kZXJUYXJnZXQiLCJnZXRBY3RpdmVDdWJlRmFjZSIsImdldEFjdGl2ZU1pcG1hcExldmVsIiwiX3NldFNpemUiLCJjdWJlVVZSZW5kZXJUYXJnZXQiLCJfYWxsb2NhdGVUYXJnZXRzIiwiZGVwdGhCdWZmZXIiLCJfc2NlbmVUb0N1YmVVViIsIl9ibHVyIiwiX2FwcGx5UE1SRU0iLCJfY2xlYW51cCIsImZyb21FcXVpcmVjdGFuZ3VsYXIiLCJlcXVpcmVjdGFuZ3VsYXIiLCJfZnJvbVRleHR1cmUiLCJmcm9tQ3ViZW1hcCIsImNvbXBpbGVDdWJlbWFwU2hhZGVyIiwiX2dldEN1YmVtYXBNYXRlcmlhbCIsImNvbXBpbGVFcXVpcmVjdGFuZ3VsYXJTaGFkZXIiLCJfZ2V0RXF1aXJlY3RNYXRlcmlhbCIsIl9kaXNwb3NlIiwiY3ViZVNpemUiLCJmbG9vciIsImxvZzIiLCJwb3ciLCJvdXRwdXRUYXJnZXQiLCJzZXRSZW5kZXJUYXJnZXQiLCJzY2lzc29yVGVzdCIsIl9zZXRWaWV3cG9ydCIsIl90ZXh0dXJlVG9DdWJlVVYiLCJwYXJhbXMiLCJtYWdGaWx0ZXIiLCJtaW5GaWx0ZXIiLCJnZW5lcmF0ZU1pcG1hcHMiLCJmb3JtYXQiLCJfY3JlYXRlUmVuZGVyVGFyZ2V0Iiwic2l6ZUxvZHMiLCJsb2RQbGFuZXMiLCJzaWdtYXMiLCJsb2RNYXgiLCJsb2QiLCJ0b3RhbExvZHMiLCJzaXplTG9kIiwicHVzaCIsInRleGVsU2l6ZSIsIm1pbiIsInV2MSIsImN1YmVGYWNlcyIsInZlcnRpY2VzIiwicG9zaXRpb25TaXplIiwidXZTaXplIiwiZmFjZUluZGV4U2l6ZSIsInV2IiwiZmFjZUluZGV4IiwiZmFjZSIsImNvb3JkaW5hdGVzIiwiZmlsbCIsInNldEF0dHJpYnV0ZSIsIl9jcmVhdGVQbGFuZXMiLCJ3ZWlnaHRzIiwicG9sZUF4aXMiLCJkZWZpbmVzIiwiYmxlbmRpbmciLCJfZ2V0Qmx1clNoYWRlciIsInRtcE1lc2giLCJjb21waWxlIiwiY3ViZUNhbWVyYSIsInVwU2lnbiIsImZvcndhcmRTaWduIiwib3JpZ2luYWxBdXRvQ2xlYXIiLCJnZXRSZXZlcnNlZCIsImNsZWFyRGVwdGgiLCJiYWNrZ3JvdW5kTWF0ZXJpYWwiLCJiYWNrZ3JvdW5kQm94IiwidXNlU29saWRDb2xvciIsImNvbCIsInVwIiwibG9va0F0IiwibWVzaCIsIm4iLCJsb2RJbiIsImxvZE91dCIsInBpbmdQb25nUmVuZGVyVGFyZ2V0IiwiX2hhbGZCbHVyIiwidGFyZ2V0SW4iLCJ0YXJnZXRPdXQiLCJzaWdtYVJhZGlhbnMiLCJibHVyTWF0ZXJpYWwiLCJlcnJvciIsImJsdXJNZXNoIiwiYmx1clVuaWZvcm1zIiwicGl4ZWxzIiwicmFkaWFuc1BlclBpeGVsIiwiaXNGaW5pdGUiLCJQSSIsInNpZ21hUGl4ZWxzIiwic2FtcGxlcyIsInN1bSIsIndlaWdodCIsImV4cCIsIm91dHB1dFNpemUiLCJ2aWV3cG9ydCIsInNjaXNzb3IiLCJXZWJHTEN1YmVVVk1hcHMiLCJjdWJlVVZtYXBzIiwicG1yZW1HZW5lcmF0b3IiLCJjdWJlbWFwVVYiLCJpc0VxdWlyZWN0TWFwIiwiaXNDdWJlTWFwIiwiY3VycmVudFBNUkVNVmVyc2lvbiIsInBtcmVtVmVyc2lvbiIsImlzQ3ViZVRleHR1cmVDb21wbGV0ZSIsIldlYkdMRXh0ZW5zaW9ucyIsImdldEV4dGVuc2lvbiIsIldlYkdMR2VvbWV0cmllcyIsImdlb21ldHJpZXMiLCJ3aXJlZnJhbWVBdHRyaWJ1dGVzIiwib25HZW9tZXRyeURpc3Bvc2UiLCJpc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IiwibWVtb3J5IiwidXBkYXRlV2lyZWZyYW1lQXR0cmlidXRlIiwiaW5kaWNlcyIsImdlb21ldHJ5SW5kZXgiLCJnZW9tZXRyeVBvc2l0aW9uIiwiYyIsInByZXZpb3VzQXR0cmlidXRlIiwiZ2V0V2lyZWZyYW1lQXR0cmlidXRlIiwiY3VycmVudEF0dHJpYnV0ZSIsIldlYkdMSW5kZXhlZEJ1ZmZlclJlbmRlcmVyIiwiZHJhd0VsZW1lbnRzSW5zdGFuY2VkIiwic2V0SW5kZXgiLCJkcmF3RWxlbWVudHMiLCJtdWx0aURyYXdFbGVtZW50c1dFQkdMIiwibXVsdGlEcmF3RWxlbWVudHNJbnN0YW5jZWRXRUJHTCIsIldlYkdMSW5mbyIsImNhbGxzIiwidHJpYW5nbGVzIiwibGluZXMiLCJ0ZXh0dXJlcyIsInByb2dyYW1zIiwiYXV0b1Jlc2V0IiwiaW5zdGFuY2VDb3VudCIsIlRSSUFOR0xFUyIsIkxJTkVTIiwiTElORV9TVFJJUCIsIkxJTkVfTE9PUCIsIlBPSU5UUyIsIldlYkdMTW9ycGh0YXJnZXRzIiwiY2FwYWJpbGl0aWVzIiwibW9ycGhUZXh0dXJlcyIsIm1vcnBoIiwib2JqZWN0SW5mbHVlbmNlcyIsIm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyIsIm1vcnBoQXR0cmlidXRlIiwibW9ycGhBdHRyaWJ1dGVzIiwibW9ycGhUYXJnZXRzQ291bnQiLCJlbnRyeSIsImhhc01vcnBoUG9zaXRpb24iLCJoYXNNb3JwaE5vcm1hbHMiLCJoYXNNb3JwaENvbG9ycyIsIm1vcnBoVGFyZ2V0cyIsIm1vcnBoTm9ybWFscyIsIm1vcnBoQ29sb3JzIiwidmVydGV4RGF0YUNvdW50IiwiY2VpbCIsInZlcnRleERhdGFTdHJpZGUiLCJtb3JwaFRhcmdldCIsIm1vcnBoTm9ybWFsIiwibW9ycGhDb2xvciIsImoiLCJmcm9tQnVmZmVyQXR0cmlidXRlIiwidyIsImRpc3Bvc2VUZXh0dXJlIiwibW9ycGhUZXh0dXJlIiwiZ2V0VW5pZm9ybXMiLCJzZXRWYWx1ZSIsIm1vcnBoSW5mbHVlbmNlc1N1bSIsIm1vcnBoQmFzZUluZmx1ZW5jZSIsIm1vcnBoVGFyZ2V0c1JlbGF0aXZlIiwiV2ViR0xPYmplY3RzIiwidXBkYXRlTWFwIiwib25JbnN0YW5jZWRNZXNoRGlzcG9zZSIsImluc3RhbmNlZE1lc2giLCJidWZmZXJnZW9tZXRyeSIsImhhc0V2ZW50TGlzdGVuZXIiLCJpc1NraW5uZWRNZXNoIiwic2tlbGV0b24iLCJlbXB0eVRleHR1cmUiLCJlbXB0eVNoYWRvd1RleHR1cmUiLCJlbXB0eUFycmF5VGV4dHVyZSIsImVtcHR5M2RUZXh0dXJlIiwiZW1wdHlDdWJlVGV4dHVyZSIsImFycmF5Q2FjaGVGMzIiLCJhcnJheUNhY2hlSTMyIiwibWF0NGFycmF5IiwibWF0M2FycmF5IiwibWF0MmFycmF5IiwiZmxhdHRlbiIsIm5CbG9ja3MiLCJibG9ja1NpemUiLCJmaXJzdEVsZW0iLCJhcnJheXNFcXVhbCIsImNvcHlBcnJheSIsImFsbG9jVGV4VW5pdHMiLCJhbGxvY2F0ZVRleHR1cmVVbml0Iiwic2V0VmFsdWVWMWYiLCJ2IiwidW5pZm9ybTFmIiwiYWRkciIsInNldFZhbHVlVjJmIiwidW5pZm9ybTJmIiwidW5pZm9ybTJmdiIsInNldFZhbHVlVjNmIiwidW5pZm9ybTNmIiwidW5pZm9ybTNmdiIsInNldFZhbHVlVjRmIiwidW5pZm9ybTRmIiwidW5pZm9ybTRmdiIsInNldFZhbHVlTTIiLCJlbGVtZW50cyIsInVuaWZvcm1NYXRyaXgyZnYiLCJzZXRWYWx1ZU0zIiwidW5pZm9ybU1hdHJpeDNmdiIsInNldFZhbHVlTTQiLCJ1bmlmb3JtTWF0cml4NGZ2Iiwic2V0VmFsdWVWMWkiLCJ1bmlmb3JtMWkiLCJzZXRWYWx1ZVYyaSIsInVuaWZvcm0yaSIsInVuaWZvcm0yaXYiLCJzZXRWYWx1ZVYzaSIsInVuaWZvcm0zaSIsInVuaWZvcm0zaXYiLCJzZXRWYWx1ZVY0aSIsInVuaWZvcm00aSIsInVuaWZvcm00aXYiLCJzZXRWYWx1ZVYxdWkiLCJ1bmlmb3JtMXVpIiwic2V0VmFsdWVWMnVpIiwidW5pZm9ybTJ1aSIsInVuaWZvcm0ydWl2Iiwic2V0VmFsdWVWM3VpIiwidW5pZm9ybTN1aSIsInVuaWZvcm0zdWl2Iiwic2V0VmFsdWVWNHVpIiwidW5pZm9ybTR1aSIsInVuaWZvcm00dWl2Iiwic2V0VmFsdWVUMSIsInVuaXQiLCJlbXB0eVRleHR1cmUyRCIsIlNBTVBMRVJfMkRfU0hBRE9XIiwiY29tcGFyZUZ1bmN0aW9uIiwic2V0VGV4dHVyZTJEIiwic2V0VmFsdWVUM0QxIiwic2V0VGV4dHVyZTNEIiwic2V0VmFsdWVUNiIsInNldFRleHR1cmVDdWJlIiwic2V0VmFsdWVUMkRBcnJheTEiLCJzZXRUZXh0dXJlMkRBcnJheSIsInNldFZhbHVlVjFmQXJyYXkiLCJ1bmlmb3JtMWZ2Iiwic2V0VmFsdWVWMmZBcnJheSIsInNldFZhbHVlVjNmQXJyYXkiLCJzZXRWYWx1ZVY0ZkFycmF5Iiwic2V0VmFsdWVNMkFycmF5Iiwic2V0VmFsdWVNM0FycmF5Iiwic2V0VmFsdWVNNEFycmF5Iiwic2V0VmFsdWVWMWlBcnJheSIsInVuaWZvcm0xaXYiLCJzZXRWYWx1ZVYyaUFycmF5Iiwic2V0VmFsdWVWM2lBcnJheSIsInNldFZhbHVlVjRpQXJyYXkiLCJzZXRWYWx1ZVYxdWlBcnJheSIsInVuaWZvcm0xdWl2Iiwic2V0VmFsdWVWMnVpQXJyYXkiLCJzZXRWYWx1ZVYzdWlBcnJheSIsInNldFZhbHVlVjR1aUFycmF5Iiwic2V0VmFsdWVUMUFycmF5IiwidW5pdHMiLCJzZXRWYWx1ZVQzREFycmF5Iiwic2V0VmFsdWVUNkFycmF5Iiwic2V0VmFsdWVUMkRBcnJheUFycmF5IiwiU2luZ2xlVW5pZm9ybSIsImFjdGl2ZUluZm8iLCJnZXRTaW5ndWxhclNldHRlciIsIlB1cmVBcnJheVVuaWZvcm0iLCJnZXRQdXJlQXJyYXlTZXR0ZXIiLCJTdHJ1Y3R1cmVkVW5pZm9ybSIsInNlcSIsInUiLCJSZVBhdGhQYXJ0IiwiYWRkVW5pZm9ybSIsImNvbnRhaW5lciIsInVuaWZvcm1PYmplY3QiLCJwYXJzZVVuaWZvcm0iLCJwYXRoIiwicGF0aExlbmd0aCIsImxhc3RJbmRleCIsIm1hdGNoIiwiZXhlYyIsIm1hdGNoRW5kIiwiaWRJc0luZGV4Iiwic3Vic2NyaXB0IiwibmV4dCIsIldlYkdMVW5pZm9ybXMiLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiQUNUSVZFX1VOSUZPUk1TIiwiZ2V0QWN0aXZlVW5pZm9ybSIsImdldFVuaWZvcm1Mb2NhdGlvbiIsInNldE9wdGlvbmFsIiwidXBsb2FkIiwidmFsdWVzIiwic2VxV2l0aFZhbHVlIiwiV2ViR0xTaGFkZXIiLCJzdHJpbmciLCJzaGFkZXIiLCJjcmVhdGVTaGFkZXIiLCJzaGFkZXJTb3VyY2UiLCJjb21waWxlU2hhZGVyIiwicHJvZ3JhbUlkQ291bnQiLCJfbTAiLCJnZXRTaGFkZXJFcnJvcnMiLCJzdGF0dXMiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJDT01QSUxFX1NUQVRVUyIsImVycm9ycyIsImdldFNoYWRlckluZm9Mb2ciLCJ0cmltIiwiZXJyb3JNYXRjaGVzIiwiZXJyb3JMaW5lIiwicGFyc2VJbnQiLCJ0b1VwcGVyQ2FzZSIsInNwbGl0IiwibGluZXMyIiwiZnJvbSIsInRvIiwibGluZSIsImpvaW4iLCJoYW5kbGVTb3VyY2UiLCJnZXRTaGFkZXJTb3VyY2UiLCJnZXRUZXhlbEVuY29kaW5nRnVuY3Rpb24iLCJmdW5jdGlvbk5hbWUiLCJjb21wb25lbnRzIiwiX2dldE1hdHJpeCIsIndvcmtpbmdDb2xvclNwYWNlIiwiZW5jb2RpbmdNYXRyaXgiLCJ0b0ZpeGVkIiwiZ2V0RW5jb2RpbmdDb21wb25lbnRzIiwiZ2V0VG9uZU1hcHBpbmdGdW5jdGlvbiIsInRvbmVNYXBwaW5nTmFtZSIsIl92MCIsImZpbHRlckVtcHR5TGluZSIsInJlcGxhY2VMaWdodE51bXMiLCJudW1TcG90TGlnaHRDb29yZHMiLCJudW1TcG90TGlnaHRTaGFkb3dzIiwibnVtU3BvdExpZ2h0TWFwcyIsIm51bVNwb3RMaWdodFNoYWRvd3NXaXRoTWFwcyIsInJlcGxhY2UiLCJudW1EaXJMaWdodHMiLCJudW1TcG90TGlnaHRzIiwibnVtUmVjdEFyZWFMaWdodHMiLCJudW1Qb2ludExpZ2h0cyIsIm51bUhlbWlMaWdodHMiLCJudW1EaXJMaWdodFNoYWRvd3MiLCJudW1Qb2ludExpZ2h0U2hhZG93cyIsInJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyIsIm51bUNsaXBwaW5nUGxhbmVzIiwibnVtQ2xpcEludGVyc2VjdGlvbiIsImluY2x1ZGVQYXR0ZXJuIiwicmVzb2x2ZUluY2x1ZGVzIiwiaW5jbHVkZVJlcGxhY2VyIiwic2hhZGVyQ2h1bmtNYXAiLCJNYXAiLCJpbmNsdWRlIiwibmV3SW5jbHVkZSIsInVucm9sbExvb3BQYXR0ZXJuIiwidW5yb2xsTG9vcHMiLCJsb29wUmVwbGFjZXIiLCJlbmQiLCJzbmlwcGV0IiwiZ2VuZXJhdGVQcmVjaXNpb24iLCJwcmVjaXNpb25zdHJpbmciLCJXZWJHTFByb2dyYW0iLCJjYWNoZUtleSIsImdldENvbnRleHQiLCJzaGFkb3dNYXBUeXBlRGVmaW5lIiwic2hhZG93TWFwVHlwZSIsImdlbmVyYXRlU2hhZG93TWFwVHlwZURlZmluZSIsImVudk1hcFR5cGVEZWZpbmUiLCJlbnZNYXBNb2RlIiwiZ2VuZXJhdGVFbnZNYXBUeXBlRGVmaW5lIiwiZW52TWFwTW9kZURlZmluZSIsImdlbmVyYXRlRW52TWFwTW9kZURlZmluZSIsImVudk1hcEJsZW5kaW5nRGVmaW5lIiwiY29tYmluZSIsImdlbmVyYXRlRW52TWFwQmxlbmRpbmdEZWZpbmUiLCJlbnZNYXBDdWJlVVZTaXplIiwiaW1hZ2VIZWlnaHQiLCJlbnZNYXBDdWJlVVZIZWlnaHQiLCJtYXhNaXAiLCJ0ZXhlbEhlaWdodCIsInRleGVsV2lkdGgiLCJnZW5lcmF0ZUN1YmVVVlNpemUiLCJjdXN0b21WZXJ0ZXhFeHRlbnNpb25zIiwiZXh0ZW5zaW9uQ2xpcEN1bGxEaXN0YW5jZSIsImV4dGVuc2lvbk11bHRpRHJhdyIsImZpbHRlciIsImdlbmVyYXRlVmVydGV4RXh0ZW5zaW9ucyIsImN1c3RvbURlZmluZXMiLCJjaHVua3MiLCJnZW5lcmF0ZURlZmluZXMiLCJjcmVhdGVQcm9ncmFtIiwicHJlZml4VmVydGV4IiwicHJlZml4RnJhZ21lbnQiLCJ2ZXJzaW9uU3RyaW5nIiwiZ2xzbFZlcnNpb24iLCJpc1Jhd1NoYWRlck1hdGVyaWFsIiwic2hhZGVyVHlwZSIsInNoYWRlck5hbWUiLCJiYXRjaGluZyIsImJhdGNoaW5nQ29sb3IiLCJpbnN0YW5jaW5nIiwiaW5zdGFuY2luZ0NvbG9yIiwiaW5zdGFuY2luZ01vcnBoIiwidXNlRm9nIiwiZm9nRXhwMiIsIm5vcm1hbE1hcE9iamVjdFNwYWNlIiwibm9ybWFsTWFwVGFuZ2VudFNwYWNlIiwiYW5pc290cm9weSIsImFscGhhSGFzaCIsIm1hcFV2IiwiYWxwaGFNYXBVdiIsImxpZ2h0TWFwVXYiLCJhb01hcFV2IiwiZW1pc3NpdmVNYXBVdiIsImJ1bXBNYXBVdiIsIm5vcm1hbE1hcFV2IiwiZGlzcGxhY2VtZW50TWFwVXYiLCJtZXRhbG5lc3NNYXBVdiIsInJvdWdobmVzc01hcFV2IiwiYW5pc290cm9weU1hcFV2IiwiY2xlYXJjb2F0TWFwVXYiLCJjbGVhcmNvYXROb3JtYWxNYXBVdiIsImNsZWFyY29hdFJvdWdobmVzc01hcFV2IiwiaXJpZGVzY2VuY2VNYXBVdiIsImlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwVXYiLCJzaGVlbkNvbG9yTWFwVXYiLCJzaGVlblJvdWdobmVzc01hcFV2Iiwic3BlY3VsYXJNYXBVdiIsInNwZWN1bGFyQ29sb3JNYXBVdiIsInNwZWN1bGFySW50ZW5zaXR5TWFwVXYiLCJ0cmFuc21pc3Npb25NYXBVdiIsInRoaWNrbmVzc01hcFV2IiwidmVydGV4VGFuZ2VudHMiLCJmbGF0U2hhZGluZyIsInZlcnRleENvbG9ycyIsInZlcnRleEFscGhhcyIsInZlcnRleFV2MXMiLCJ2ZXJ0ZXhVdjJzIiwidmVydGV4VXYzcyIsInBvaW50c1V2cyIsInNraW5uaW5nIiwibW9ycGhUZXh0dXJlU3RyaWRlIiwiZG91YmxlU2lkZWQiLCJmbGlwU2lkZWQiLCJzaGFkb3dNYXBFbmFibGVkIiwic2l6ZUF0dGVudWF0aW9uIiwibnVtTGlnaHRQcm9iZXMiLCJhbHBoYVRvQ292ZXJhZ2UiLCJkZWNvZGVWaWRlb1RleHR1cmUiLCJkZWNvZGVWaWRlb1RleHR1cmVFbWlzc2l2ZSIsImRpdGhlcmluZyIsIm9wYXF1ZSIsIm91dHB1dENvbG9yU3BhY2UiLCJnZXRMdW1pbmFuY2VDb2VmZmljaWVudHMiLCJ1c2VEZXB0aFBhY2tpbmciLCJkZXB0aFBhY2tpbmciLCJ2ZXJ0ZXhHbHNsIiwiZnJhZ21lbnRHbHNsIiwiZ2xWZXJ0ZXhTaGFkZXIiLCJnbEZyYWdtZW50U2hhZGVyIiwib25GaXJzdFVzZSIsInNlbGYiLCJkZWJ1ZyIsImNoZWNrU2hhZGVyRXJyb3JzIiwicHJvZ3JhbUluZm9Mb2ciLCJnZXRQcm9ncmFtSW5mb0xvZyIsInZlcnRleFNoYWRlckluZm9Mb2ciLCJmcmFnbWVudFNoYWRlckluZm9Mb2ciLCJwcm9ncmFtTG9nIiwidmVydGV4TG9nIiwiZnJhZ21lbnRMb2ciLCJydW5uYWJsZSIsImhhdmVEaWFnbm9zdGljcyIsIkxJTktfU1RBVFVTIiwib25TaGFkZXJFcnJvciIsInZlcnRleEVycm9ycyIsImZyYWdtZW50RXJyb3JzIiwiZ2V0RXJyb3IiLCJWQUxJREFURV9TVEFUVVMiLCJkaWFnbm9zdGljcyIsImxvZyIsInByZWZpeCIsImRlbGV0ZVNoYWRlciIsImNhY2hlZFVuaWZvcm1zIiwiQUNUSVZFX0FUVFJJQlVURVMiLCJnZXRBY3RpdmVBdHRyaWIiLCJGTE9BVF9NQVQyIiwiRkxPQVRfTUFUMyIsIkZMT0FUX01BVDQiLCJnZXRBdHRyaWJMb2NhdGlvbiIsImZldGNoQXR0cmlidXRlTG9jYXRpb25zIiwiYXR0YWNoU2hhZGVyIiwiaW5kZXgwQXR0cmlidXRlTmFtZSIsImJpbmRBdHRyaWJMb2NhdGlvbiIsImxpbmtQcm9ncmFtIiwicHJvZ3JhbVJlYWR5IiwicmVuZGVyZXJFeHRlbnNpb25QYXJhbGxlbFNoYWRlckNvbXBpbGUiLCJpc1JlYWR5IiwiZGVzdHJveSIsImRlbGV0ZVByb2dyYW0iLCJ1c2VkVGltZXMiLCJfaWQiLCJXZWJHTFNoYWRlckNhY2hlIiwic2hhZGVyQ2FjaGUiLCJtYXRlcmlhbENhY2hlIiwidmVydGV4U2hhZGVyU3RhZ2UiLCJfZ2V0U2hhZGVyU3RhZ2UiLCJmcmFnbWVudFNoYWRlclN0YWdlIiwibWF0ZXJpYWxTaGFkZXJzIiwiX2dldFNoYWRlckNhY2hlRm9yTWF0ZXJpYWwiLCJhZGQiLCJzaGFkZXJTdGFnZSIsImNvZGUiLCJnZXRWZXJ0ZXhTaGFkZXJJRCIsImdldEZyYWdtZW50U2hhZGVySUQiLCJTZXQiLCJzdGFnZSIsIldlYkdMU2hhZGVyU3RhZ2UiLCJXZWJHTFByb2dyYW1zIiwiY2xpcHBpbmciLCJfcHJvZ3JhbUxheWVycyIsIl9jdXN0b21TaGFkZXJzIiwiX2FjdGl2ZUNoYW5uZWxzIiwiU1VQUE9SVFNfVkVSVEVYX1RFWFRVUkVTIiwic2hhZGVySURzIiwiTWVzaERlcHRoTWF0ZXJpYWwiLCJNZXNoRGlzdGFuY2VNYXRlcmlhbCIsIk1lc2hOb3JtYWxNYXRlcmlhbCIsIk1lc2hCYXNpY01hdGVyaWFsIiwiTWVzaExhbWJlcnRNYXRlcmlhbCIsIk1lc2hQaG9uZ01hdGVyaWFsIiwiTWVzaFRvb25NYXRlcmlhbCIsIk1lc2hTdGFuZGFyZE1hdGVyaWFsIiwiTWVzaFBoeXNpY2FsTWF0ZXJpYWwiLCJNZXNoTWF0Y2FwTWF0ZXJpYWwiLCJMaW5lQmFzaWNNYXRlcmlhbCIsIkxpbmVEYXNoZWRNYXRlcmlhbCIsIlBvaW50c01hdGVyaWFsIiwiU2hhZG93TWF0ZXJpYWwiLCJTcHJpdGVNYXRlcmlhbCIsImdldENoYW5uZWwiLCJnZXRQYXJhbWV0ZXJzIiwic2hhZG93cyIsImVudmlyb25tZW50IiwiaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCIsInNoYWRlcklEIiwiY3VzdG9tVmVydGV4U2hhZGVySUQiLCJjdXN0b21GcmFnbWVudFNoYWRlcklEIiwiY3VycmVudFJlbmRlclRhcmdldCIsIklTX0lOU1RBTkNFRE1FU0giLCJJU19CQVRDSEVETUVTSCIsImlzQmF0Y2hlZE1lc2giLCJIQVNfTUFQIiwiSEFTX01BVENBUCIsIkhBU19FTlZNQVAiLCJIQVNfQU9NQVAiLCJIQVNfTElHSFRNQVAiLCJIQVNfQlVNUE1BUCIsIkhBU19OT1JNQUxNQVAiLCJIQVNfRElTUExBQ0VNRU5UTUFQIiwiSEFTX0VNSVNTSVZFTUFQIiwiSEFTX01FVEFMTkVTU01BUCIsIkhBU19ST1VHSE5FU1NNQVAiLCJIQVNfQU5JU09UUk9QWSIsIkhBU19DTEVBUkNPQVQiLCJIQVNfRElTUEVSU0lPTiIsIkhBU19JUklERVNDRU5DRSIsIkhBU19TSEVFTiIsIkhBU19UUkFOU01JU1NJT04iLCJIQVNfQU5JU09UUk9QWU1BUCIsIkhBU19DTEVBUkNPQVRNQVAiLCJIQVNfQ0xFQVJDT0FUX05PUk1BTE1BUCIsIkhBU19DTEVBUkNPQVRfUk9VR0hORVNTTUFQIiwiSEFTX0lSSURFU0NFTkNFTUFQIiwiSEFTX0lSSURFU0NFTkNFX1RISUNLTkVTU01BUCIsIkhBU19TSEVFTl9DT0xPUk1BUCIsIkhBU19TSEVFTl9ST1VHSE5FU1NNQVAiLCJIQVNfU1BFQ1VMQVJNQVAiLCJIQVNfU1BFQ1VMQVJfQ09MT1JNQVAiLCJIQVNfU1BFQ1VMQVJfSU5URU5TSVRZTUFQIiwiSEFTX1RSQU5TTUlTU0lPTk1BUCIsIkhBU19USElDS05FU1NNQVAiLCJIQVNfR1JBRElFTlRNQVAiLCJIQVNfQUxQSEFNQVAiLCJIQVNfQUxQSEFURVNUIiwiSEFTX0FMUEhBSEFTSCIsIkhBU19FWFRFTlNJT05TIiwiaXNYUlJlbmRlclRhcmdldCIsIl9jb2xvcnNUZXh0dXJlIiwic3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcyIsIm5vcm1hbE1hcFR5cGUiLCJ0cmFuc3BhcmVudCIsImNoYW5uZWwiLCJ0YW5nZW50IiwiaXNQb2ludHMiLCJpc0ZvZ0V4cDIiLCJkaXJlY3Rpb25hbCIsInBvaW50Iiwic3BvdCIsInJlY3RBcmVhIiwiaGVtaSIsInNoYWRvd01hcCIsImlzVmlkZW9UZXh0dXJlIiwiY2xpcEN1bGxEaXN0YW5jZSIsIm11bHRpRHJhdyIsImN1c3RvbVByb2dyYW1DYWNoZUtleSIsImdldFByb2dyYW1DYWNoZUtleSIsIm1vcnBoQXR0cmlidXRlQ291bnQiLCJnZXRQcm9ncmFtQ2FjaGVLZXlQYXJhbWV0ZXJzIiwiZGlzYWJsZUFsbCIsImVuYWJsZSIsIm1hc2siLCJnZXRQcm9ncmFtQ2FjaGVLZXlCb29sZWFucyIsImNsb25lIiwiYWNxdWlyZVByb2dyYW0iLCJwIiwicGwiLCJwcmVleGlzdGluZ1Byb2dyYW0iLCJyZWxlYXNlUHJvZ3JhbSIsImluZGV4T2YiLCJwb3AiLCJyZWxlYXNlU2hhZGVyQ2FjaGUiLCJXZWJHTFByb3BlcnRpZXMiLCJrZXkiLCJwYWludGVyU29ydFN0YWJsZSIsImdyb3VwT3JkZXIiLCJyZW5kZXJPcmRlciIsInJldmVyc2VQYWludGVyU29ydFN0YWJsZSIsIldlYkdMUmVuZGVyTGlzdCIsInJlbmRlckl0ZW1zIiwicmVuZGVySXRlbXNJbmRleCIsInRyYW5zbWlzc2l2ZSIsImdldE5leHRSZW5kZXJJdGVtIiwiZ3JvdXAiLCJyZW5kZXJJdGVtIiwiZmluaXNoIiwiY3VzdG9tT3BhcXVlU29ydCIsImN1c3RvbVRyYW5zcGFyZW50U29ydCIsIldlYkdMUmVuZGVyTGlzdHMiLCJsaXN0cyIsInJlbmRlckNhbGxEZXB0aCIsImxpc3RBcnJheSIsImxpc3QiLCJVbmlmb3Jtc0NhY2hlIiwibGlnaHQiLCJoYWxmV2lkdGgiLCJoYWxmSGVpZ2h0IiwibmV4dFZlcnNpb24iLCJzaGFkb3dDYXN0aW5nQW5kVGV4dHVyaW5nTGlnaHRzRmlyc3QiLCJsaWdodEEiLCJsaWdodEIiLCJjYXN0U2hhZG93IiwiV2ViR0xMaWdodHMiLCJzaGFkb3dDYWNoZSIsIlNoYWRvd1VuaWZvcm1zQ2FjaGUiLCJoYXNoIiwiZGlyZWN0aW9uYWxMZW5ndGgiLCJwb2ludExlbmd0aCIsInNwb3RMZW5ndGgiLCJyZWN0QXJlYUxlbmd0aCIsImhlbWlMZW5ndGgiLCJudW1EaXJlY3Rpb25hbFNoYWRvd3MiLCJudW1Qb2ludFNoYWRvd3MiLCJudW1TcG90U2hhZG93cyIsIm51bVNwb3RNYXBzIiwiYW1iaWVudCIsInByb2JlIiwiZGlyZWN0aW9uYWxTaGFkb3ciLCJzcG90U2hhZG93IiwicmVjdEFyZWFMVEMxIiwicmVjdEFyZWFMVEMyIiwicG9pbnRTaGFkb3ciLCJ2ZWN0b3IzIiwibWF0cml4NCIsIm1hdHJpeDQyIiwibnVtU3BvdFNoYWRvd3NXaXRoTWFwcyIsImludGVuc2l0eSIsImlzQW1iaWVudExpZ2h0IiwiaXNMaWdodFByb2JlIiwiYWRkU2NhbGVkVmVjdG9yIiwic2giLCJjb2VmZmljaWVudHMiLCJpc0RpcmVjdGlvbmFsTGlnaHQiLCJtdWx0aXBseVNjYWxhciIsInNoYWRvd1VuaWZvcm1zIiwiYmlhcyIsIm5vcm1hbEJpYXMiLCJyYWRpdXMiLCJtYXBTaXplIiwiaXNTcG90TGlnaHQiLCJzZXRGcm9tTWF0cml4UG9zaXRpb24iLCJjb3MiLCJhbmdsZSIsInBlbnVtYnJhIiwidXBkYXRlTWF0cmljZXMiLCJpc1JlY3RBcmVhTGlnaHQiLCJpc1BvaW50TGlnaHQiLCJpc0hlbWlzcGhlcmVMaWdodCIsIkxUQ19GTE9BVF8xIiwiTFRDX0ZMT0FUXzIiLCJMVENfSEFMRl8xIiwiTFRDX0hBTEZfMiIsInNldHVwVmlldyIsInN1YiIsInRyYW5zZm9ybURpcmVjdGlvbiIsImlkZW50aXR5IiwicHJlbXVsdGlwbHkiLCJleHRyYWN0Um90YXRpb24iLCJXZWJHTFJlbmRlclN0YXRlIiwibGlnaHRzQXJyYXkiLCJzaGFkb3dzQXJyYXkiLCJ0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQiLCJzZXR1cExpZ2h0cyIsInNldHVwTGlnaHRzVmlldyIsInB1c2hMaWdodCIsInB1c2hTaGFkb3ciLCJzaGFkb3dMaWdodCIsIldlYkdMUmVuZGVyU3RhdGVzIiwicmVuZGVyU3RhdGVzIiwicmVuZGVyU3RhdGVBcnJheSIsInJlbmRlclN0YXRlIiwiV2ViR0xTaGFkb3dNYXAiLCJfZnJ1c3R1bSIsIl9zaGFkb3dNYXBTaXplIiwiX3ZpZXdwb3J0U2l6ZSIsIl92aWV3cG9ydCIsIl9kZXB0aE1hdGVyaWFsIiwiX2Rpc3RhbmNlTWF0ZXJpYWwiLCJfbWF0ZXJpYWxDYWNoZSIsIl9tYXhUZXh0dXJlU2l6ZSIsInNoYWRvd1NpZGUiLCJzaGFkb3dNYXRlcmlhbFZlcnRpY2FsIiwiVlNNX1NBTVBMRVMiLCJzaGFkb3dfcGFzcyIsInJlc29sdXRpb24iLCJzaGFkb3dNYXRlcmlhbEhvcml6b250YWwiLCJIT1JJWk9OVEFMX1BBU1MiLCJmdWxsU2NyZWVuVHJpIiwiZnVsbFNjcmVlbk1lc2giLCJhdXRvVXBkYXRlIiwiX3ByZXZpb3VzVHlwZSIsIlZTTVBhc3MiLCJibHVyU2FtcGxlcyIsIm1hcFBhc3MiLCJyZW5kZXJCdWZmZXJEaXJlY3QiLCJnZXREZXB0aE1hdGVyaWFsIiwicmVzdWx0IiwiY3VzdG9tTWF0ZXJpYWwiLCJjdXN0b21EaXN0YW5jZU1hdGVyaWFsIiwiY3VzdG9tRGVwdGhNYXRlcmlhbCIsIkFycmF5IiwiaXNBcnJheSIsImtleUEiLCJ1dWlkIiwia2V5QiIsIm1hdGVyaWFsc0ZvclZhcmlhbnQiLCJjYWNoZWRNYXRlcmlhbCIsIm9uTWF0ZXJpYWxEaXNwb3NlIiwidmlzaWJsZSIsIndpcmVmcmFtZUxpbmV3aWR0aCIsImxpbmV3aWR0aCIsImlzTWVzaERpc3RhbmNlTWF0ZXJpYWwiLCJyZW5kZXJPYmplY3QiLCJzaGFkb3dDYW1lcmEiLCJ0ZXN0IiwiaXNNZXNoIiwiaXNMaW5lIiwicmVjZWl2ZVNoYWRvdyIsImZydXN0dW1DdWxsZWQiLCJpbnRlcnNlY3RzT2JqZWN0IiwibW9kZWxWaWV3TWF0cml4IiwibXVsdGlwbHlNYXRyaWNlcyIsImdyb3VwcyIsImsiLCJrbCIsImdyb3VwTWF0ZXJpYWwiLCJtYXRlcmlhbEluZGV4IiwiZGVwdGhNYXRlcmlhbCIsIm9uQmVmb3JlU2hhZG93Iiwib25BZnRlclNoYWRvdyIsImNoaWxkcmVuIiwiYWN0aXZlQ3ViZUZhY2UiLCJhY3RpdmVNaXBtYXBMZXZlbCIsIl9zdGF0ZSIsInNldEJsZW5kaW5nIiwic2V0U2Npc3NvclRlc3QiLCJ0b1ZTTSIsImZyb21WU00iLCJzaGFkb3dGcmFtZUV4dGVudHMiLCJnZXRGcmFtZUV4dGVudHMiLCJtdWx0aXBseSIsInBhcnMiLCJ1cGRhdGVQcm9qZWN0aW9uTWF0cml4Iiwidmlld3BvcnRDb3VudCIsImdldFZpZXdwb3J0Q291bnQiLCJ2cCIsImdldFZpZXdwb3J0IiwiZ2V0RnJ1c3R1bSIsImlzUG9pbnRMaWdodFNoYWRvdyIsInJldmVyc2VkRnVuY3MiLCJXZWJHTFN0YXRlIiwiY29sb3JCdWZmZXIiLCJsb2NrZWQiLCJjdXJyZW50Q29sb3JNYXNrIiwiY3VycmVudENvbG9yQ2xlYXIiLCJjb2xvck1hc2siLCJzZXRMb2NrZWQiLCJsb2NrIiwiZXF1YWxzIiwiY3VycmVudFJldmVyc2VkIiwiY3VycmVudERlcHRoTWFzayIsImN1cnJlbnREZXB0aEZ1bmMiLCJjdXJyZW50RGVwdGhDbGVhciIsInNldFJldmVyc2VkIiwicmV2ZXJzZWQiLCJleHQiLCJjbGlwQ29udHJvbEVYVCIsIkxPV0VSX0xFRlRfRVhUIiwiWkVST19UT19PTkVfRVhUIiwiTkVHQVRJVkVfT05FX1RPX09ORV9FWFQiLCJvbGREZXB0aCIsIkRFUFRIX1RFU1QiLCJkaXNhYmxlIiwiZGVwdGhNYXNrIiwic2V0RnVuYyIsImRlcHRoRnVuYyIsIk5FVkVSIiwiQUxXQVlTIiwiTEVTUyIsIkxFUVVBTCIsIkVRVUFMIiwiR0VRVUFMIiwiR1JFQVRFUiIsIk5PVEVRVUFMIiwic3RlbmNpbEJ1ZmZlciIsImN1cnJlbnRTdGVuY2lsTWFzayIsImN1cnJlbnRTdGVuY2lsRnVuYyIsImN1cnJlbnRTdGVuY2lsUmVmIiwiY3VycmVudFN0ZW5jaWxGdW5jTWFzayIsImN1cnJlbnRTdGVuY2lsRmFpbCIsImN1cnJlbnRTdGVuY2lsWkZhaWwiLCJjdXJyZW50U3RlbmNpbFpQYXNzIiwiY3VycmVudFN0ZW5jaWxDbGVhciIsInN0ZW5jaWxUZXN0IiwiU1RFTkNJTF9URVNUIiwic3RlbmNpbE1hc2siLCJzdGVuY2lsRnVuYyIsInN0ZW5jaWxSZWYiLCJzZXRPcCIsInN0ZW5jaWxGYWlsIiwic3RlbmNpbFpGYWlsIiwic3RlbmNpbFpQYXNzIiwic3RlbmNpbE9wIiwic3RlbmNpbCIsImNsZWFyU3RlbmNpbCIsInVib0JpbmRpbmdzIiwidWJvUHJvZ3JhbU1hcCIsImVuYWJsZWRDYXBhYmlsaXRpZXMiLCJjdXJyZW50Qm91bmRGcmFtZWJ1ZmZlcnMiLCJjdXJyZW50RHJhd2J1ZmZlcnMiLCJkZWZhdWx0RHJhd2J1ZmZlcnMiLCJjdXJyZW50UHJvZ3JhbSIsImN1cnJlbnRCbGVuZGluZ0VuYWJsZWQiLCJjdXJyZW50QmxlbmRpbmciLCJjdXJyZW50QmxlbmRFcXVhdGlvbiIsImN1cnJlbnRCbGVuZFNyYyIsImN1cnJlbnRCbGVuZERzdCIsImN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEiLCJjdXJyZW50QmxlbmRTcmNBbHBoYSIsImN1cnJlbnRCbGVuZERzdEFscGhhIiwiY3VycmVudEJsZW5kQ29sb3IiLCJjdXJyZW50QmxlbmRBbHBoYSIsImN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSIsImN1cnJlbnRGbGlwU2lkZWQiLCJjdXJyZW50Q3VsbEZhY2UiLCJjdXJyZW50TGluZVdpZHRoIiwiY3VycmVudFBvbHlnb25PZmZzZXRGYWN0b3IiLCJjdXJyZW50UG9seWdvbk9mZnNldFVuaXRzIiwiTUFYX0NPTUJJTkVEX1RFWFRVUkVfSU1BR0VfVU5JVFMiLCJsaW5lV2lkdGhBdmFpbGFibGUiLCJnbFZlcnNpb24iLCJWRVJTSU9OIiwicGFyc2VGbG9hdCIsImN1cnJlbnRUZXh0dXJlU2xvdCIsImN1cnJlbnRCb3VuZFRleHR1cmVzIiwic2Npc3NvclBhcmFtIiwiU0NJU1NPUl9CT1giLCJ2aWV3cG9ydFBhcmFtIiwiVklFV1BPUlQiLCJjdXJyZW50U2Npc3NvciIsImZyb21BcnJheSIsImN1cnJlbnRWaWV3cG9ydCIsImNyZWF0ZVRleHR1cmUiLCJkaW1lbnNpb25zIiwiYmluZFRleHR1cmUiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiTkVBUkVTVCIsIlRFWFRVUkVfTUFHX0ZJTFRFUiIsIlRFWFRVUkVfM0QiLCJURVhUVVJFXzJEX0FSUkFZIiwidGV4SW1hZ2UzRCIsIlJHQkEiLCJ0ZXhJbWFnZTJEIiwiZW1wdHlUZXh0dXJlcyIsIlRFWFRVUkVfMkQiLCJURVhUVVJFX0NVQkVfTUFQIiwiVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YIiwic2V0RmxpcFNpZGVkIiwic2V0Q3VsbEZhY2UiLCJDVUxMX0ZBQ0UiLCJlcXVhdGlvblRvR0wiLCJGVU5DX0FERCIsIkZVTkNfU1VCVFJBQ1QiLCJGVU5DX1JFVkVSU0VfU1VCVFJBQ1QiLCJNSU4iLCJNQVgiLCJmYWN0b3JUb0dMIiwiWkVSTyIsIk9ORSIsIlNSQ19DT0xPUiIsIlNSQ19BTFBIQSIsIlNSQ19BTFBIQV9TQVRVUkFURSIsIkRTVF9DT0xPUiIsIkRTVF9BTFBIQSIsIk9ORV9NSU5VU19TUkNfQ09MT1IiLCJPTkVfTUlOVVNfU1JDX0FMUEhBIiwiT05FX01JTlVTX0RTVF9DT0xPUiIsIk9ORV9NSU5VU19EU1RfQUxQSEEiLCJDT05TVEFOVF9DT0xPUiIsIk9ORV9NSU5VU19DT05TVEFOVF9DT0xPUiIsIkNPTlNUQU5UX0FMUEhBIiwiT05FX01JTlVTX0NPTlNUQU5UX0FMUEhBIiwiYmxlbmRFcXVhdGlvbiIsImJsZW5kU3JjIiwiYmxlbmREc3QiLCJibGVuZEVxdWF0aW9uQWxwaGEiLCJibGVuZFNyY0FscGhhIiwiYmxlbmREc3RBbHBoYSIsImJsZW5kQ29sb3IiLCJibGVuZEFscGhhIiwiQkxFTkQiLCJibGVuZEVxdWF0aW9uU2VwYXJhdGUiLCJibGVuZEZ1bmNTZXBhcmF0ZSIsImJsZW5kRnVuYyIsImZyb250RmFjZSIsIkNXIiwiQ0NXIiwiY3VsbEZhY2UiLCJCQUNLIiwiRlJPTlQiLCJGUk9OVF9BTkRfQkFDSyIsInNldFBvbHlnb25PZmZzZXQiLCJwb2x5Z29uT2Zmc2V0IiwiZmFjdG9yIiwiUE9MWUdPTl9PRkZTRVRfRklMTCIsImJpbmRGcmFtZWJ1ZmZlciIsImZyYW1lYnVmZmVyIiwiRFJBV19GUkFNRUJVRkZFUiIsIkZSQU1FQlVGRkVSIiwiZHJhd0J1ZmZlcnMiLCJDT0xPUl9BVFRBQ0hNRU5UMCIsInVzZVByb2dyYW0iLCJzZXRNYXRlcmlhbCIsImZyb250RmFjZUNXIiwiY29sb3JXcml0ZSIsInN0ZW5jaWxXcml0ZSIsInN0ZW5jaWxXcml0ZU1hc2siLCJzdGVuY2lsRnVuY01hc2siLCJwb2x5Z29uT2Zmc2V0RmFjdG9yIiwicG9seWdvbk9mZnNldFVuaXRzIiwiU0FNUExFX0FMUEhBX1RPX0NPVkVSQUdFIiwic2V0TGluZVdpZHRoIiwibGluZVdpZHRoIiwiU0NJU1NPUl9URVNUIiwiYWN0aXZlVGV4dHVyZSIsIndlYmdsU2xvdCIsIlRFWFRVUkUwIiwid2ViZ2xUeXBlIiwid2ViZ2xUZXh0dXJlIiwiYm91bmRUZXh0dXJlIiwidW5iaW5kVGV4dHVyZSIsImNvbXByZXNzZWRUZXhJbWFnZTJEIiwiYXJndW1lbnRzIiwiY29tcHJlc3NlZFRleEltYWdlM0QiLCJ1cGRhdGVVQk9NYXBwaW5nIiwidW5pZm9ybXNHcm91cCIsImJsb2NrSW5kZXgiLCJnZXRVbmlmb3JtQmxvY2tJbmRleCIsInVuaWZvcm1CbG9ja0JpbmRpbmciLCJfX2JpbmRpbmdQb2ludEluZGV4IiwidGV4U3RvcmFnZTJEIiwidGV4U3RvcmFnZTNEIiwidGV4U3ViSW1hZ2UyRCIsInRleFN1YkltYWdlM0QiLCJjb21wcmVzc2VkVGV4U3ViSW1hZ2UyRCIsImNvbXByZXNzZWRUZXhTdWJJbWFnZTNEIiwiS0VFUCIsIlJFQURfRlJBTUVCVUZGRVIiLCJjYW52YXMiLCJXZWJHTFRleHR1cmVzIiwiX2dsIiwibXVsdGlzYW1wbGVkUlRURXh0Iiwic3VwcG9ydHNJbnZhbGlkYXRlRnJhbWVidWZmZXIiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJfaW1hZ2VEaW1lbnNpb25zIiwiX3ZpZGVvVGV4dHVyZXMiLCJfY2FudmFzIiwiX3NvdXJjZXMiLCJ1c2VPZmZzY3JlZW5DYW52YXMiLCJPZmZzY3JlZW5DYW52YXMiLCJlcnIiLCJjcmVhdGVDYW52YXMiLCJyZXNpemVJbWFnZSIsIm5lZWRzTmV3Q2FudmFzIiwibWF4U2l6ZSIsImdldERpbWVuc2lvbnMiLCJIVE1MSW1hZ2VFbGVtZW50IiwiSFRNTENhbnZhc0VsZW1lbnQiLCJJbWFnZUJpdG1hcCIsIlZpZGVvRnJhbWUiLCJkcmF3SW1hZ2UiLCJ0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMiLCJnZW5lcmF0ZU1pcG1hcCIsImdldFRhcmdldFR5cGUiLCJpc1dlYkdMQ3ViZVJlbmRlclRhcmdldCIsImlzV2ViR0wzRFJlbmRlclRhcmdldCIsImlzV2ViR0xBcnJheVJlbmRlclRhcmdldCIsImlzQ29tcHJlc3NlZEFycmF5VGV4dHVyZSIsImdldEludGVybmFsRm9ybWF0IiwiaW50ZXJuYWxGb3JtYXROYW1lIiwiZ2xGb3JtYXQiLCJnbFR5cGUiLCJmb3JjZUxpbmVhclRyYW5zZmVyIiwiaW50ZXJuYWxGb3JtYXQiLCJSRUQiLCJSMzJGIiwiUjE2RiIsIlI4IiwiUkVEX0lOVEVHRVIiLCJSOFVJIiwiUjE2VUkiLCJSMzJVSSIsIlI4SSIsIlIxNkkiLCJSMzJJIiwiUkciLCJSRzMyRiIsIlJHMTZGIiwiUkc4IiwiUkdfSU5URUdFUiIsIlJHOFVJIiwiUkcxNlVJIiwiUkczMlVJIiwiUkc4SSIsIlJHMTZJIiwiUkczMkkiLCJSR0JfSU5URUdFUiIsIlJHQjhVSSIsIlJHQjE2VUkiLCJSR0IzMlVJIiwiUkdCOEkiLCJSR0IxNkkiLCJSR0IzMkkiLCJSR0JBX0lOVEVHRVIiLCJSR0JBOFVJIiwiUkdCQTE2VUkiLCJSR0JBMzJVSSIsIlJHQkE4SSIsIlJHQkExNkkiLCJSR0JBMzJJIiwiUkdCIiwiVU5TSUdORURfSU5UXzVfOV85XzlfUkVWIiwiUkdCOV9FNSIsIlVOU0lHTkVEX0lOVF8xMEZfMTFGXzExRl9SRVYiLCJSMTFGX0cxMUZfQjEwRiIsInRyYW5zZmVyIiwiUkdCQTMyRiIsIlJHQkExNkYiLCJTUkdCOF9BTFBIQTgiLCJSR0JBOCIsIlVOU0lHTkVEX1NIT1JUXzRfNF80XzQiLCJSR0JBNCIsIlVOU0lHTkVEX1NIT1JUXzVfNV81XzEiLCJSR0I1X0ExIiwiZ2V0SW50ZXJuYWxEZXB0aEZvcm1hdCIsInVzZVN0ZW5jaWwiLCJkZXB0aFR5cGUiLCJnbEludGVybmFsRm9ybWF0IiwiREVQVEgyNF9TVEVOQ0lMOCIsIkRFUFRIMzJGX1NURU5DSUw4IiwiREVQVEhfQ09NUE9ORU5UMjQiLCJERVBUSF9DT01QT05FTlQzMkYiLCJERVBUSF9DT01QT05FTlQxNiIsImdldE1pcExldmVscyIsImlzRnJhbWVidWZmZXJUZXh0dXJlIiwibWlwbWFwcyIsImlzQ29tcHJlc3NlZFRleHR1cmUiLCJ0ZXh0dXJlUHJvcGVydGllcyIsIl9fd2ViZ2xJbml0Iiwic291cmNlIiwid2ViZ2xUZXh0dXJlcyIsIl9fY2FjaGVLZXkiLCJkZWxldGVUZXh0dXJlIiwia2V5cyIsImRlYWxsb2NhdGVUZXh0dXJlIiwib25SZW5kZXJUYXJnZXREaXNwb3NlIiwicmVuZGVyVGFyZ2V0UHJvcGVydGllcyIsImRlcHRoVGV4dHVyZSIsIl9fd2ViZ2xGcmFtZWJ1ZmZlciIsImxldmVsIiwiZGVsZXRlRnJhbWVidWZmZXIiLCJfX3dlYmdsRGVwdGhidWZmZXIiLCJkZWxldGVSZW5kZXJidWZmZXIiLCJfX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIiLCJfX3dlYmdsQ29sb3JSZW5kZXJidWZmZXIiLCJfX3dlYmdsRGVwdGhSZW5kZXJidWZmZXIiLCJhdHRhY2htZW50UHJvcGVydGllcyIsIl9fd2ViZ2xUZXh0dXJlIiwiZGVhbGxvY2F0ZVJlbmRlclRhcmdldCIsInRleHR1cmVVbml0cyIsInNsb3QiLCJ1cGRhdGVWaWRlb1RleHR1cmUiLCJpc0V4dGVybmFsVGV4dHVyZSIsIl9fdmVyc2lvbiIsImNvbXBsZXRlIiwidXBsb2FkVGV4dHVyZSIsInNvdXJjZVRleHR1cmUiLCJ3cmFwcGluZ1RvR0wiLCJSRVBFQVQiLCJDTEFNUF9UT19FREdFIiwiTUlSUk9SRURfUkVQRUFUIiwiZmlsdGVyVG9HTCIsIk5FQVJFU1RfTUlQTUFQX05FQVJFU1QiLCJORUFSRVNUX01JUE1BUF9MSU5FQVIiLCJMSU5FQVIiLCJMSU5FQVJfTUlQTUFQX05FQVJFU1QiLCJMSU5FQVJfTUlQTUFQX0xJTkVBUiIsImNvbXBhcmVUb0dMIiwic2V0VGV4dHVyZVBhcmFtZXRlcnMiLCJURVhUVVJFX1dSQVBfUyIsIndyYXBTIiwiVEVYVFVSRV9XUkFQX1QiLCJ3cmFwVCIsIlRFWFRVUkVfV1JBUF9SIiwid3JhcFIiLCJURVhUVVJFX0NPTVBBUkVfTU9ERSIsIkNPTVBBUkVfUkVGX1RPX1RFWFRVUkUiLCJURVhUVVJFX0NPTVBBUkVfRlVOQyIsIl9fY3VycmVudEFuaXNvdHJvcHkiLCJ0ZXhQYXJhbWV0ZXJmIiwiVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJpbml0VGV4dHVyZSIsImZvcmNlVXBsb2FkIiwidGV4dHVyZUNhY2hlS2V5IiwicHJlbXVsdGlwbHlBbHBoYSIsImZsaXBZIiwidW5wYWNrQWxpZ25tZW50IiwiZ2V0VGV4dHVyZUNhY2hlS2V5IiwiZ2V0Um93Iiwicm93TGVuZ3RoIiwiY29tcG9uZW50U3RyaWRlIiwiaXNEYXRhQXJyYXlUZXh0dXJlIiwiaXNEYXRhM0RUZXh0dXJlIiwic291cmNlUHJvcGVydGllcyIsIndvcmtpbmdQcmltYXJpZXMiLCJnZXRQcmltYXJpZXMiLCJ0ZXh0dXJlUHJpbWFyaWVzIiwidW5wYWNrQ29udmVyc2lvbiIsIk5PTkUiLCJCUk9XU0VSX0RFRkFVTFRfV0VCR0wiLCJwaXhlbFN0b3JlaSIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJVTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wiLCJVTlBBQ0tfQUxJR05NRU5UIiwiVU5QQUNLX0NPTE9SU1BBQ0VfQ09OVkVSU0lPTl9XRUJHTCIsInZlcmlmeUNvbG9yU3BhY2UiLCJtaXBtYXAiLCJ1c2VUZXhTdG9yYWdlIiwiYWxsb2NhdGVNZW1vcnkiLCJkYXRhUmVhZHkiLCJsZXZlbHMiLCJpc0RlcHRoVGV4dHVyZSIsImlzRGF0YVRleHR1cmUiLCJwcmV2aW91c0VuZCIsImN1cnJlbnRSb3ciLCJwcmV2aW91c1JvdyIsImN1cnJlbnRVbnBhY2tSb3dMZW4iLCJVTlBBQ0tfUk9XX0xFTkdUSCIsImN1cnJlbnRVbnBhY2tTa2lwUGl4ZWxzIiwiVU5QQUNLX1NLSVBfUElYRUxTIiwiY3VycmVudFVucGFja1NraXBSb3dzIiwiVU5QQUNLX1NLSVBfUk9XUyIsInBpeGVsU3RhcnQiLCJwaXhlbENvdW50IiwidXBkYXRlVGV4dHVyZSIsImxheWVyVXBkYXRlcyIsImxheWVyQnl0ZUxlbmd0aCIsImxheWVySW5kZXgiLCJsYXllckRhdGEiLCJzdWJhcnJheSIsImNsZWFyTGF5ZXJVcGRhdGVzIiwib25VcGRhdGUiLCJzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSIsImF0dGFjaG1lbnQiLCJ0ZXh0dXJlVGFyZ2V0IiwiX19yZW5kZXJUYXJnZXQiLCJfX2hhc0V4dGVybmFsVGV4dHVyZXMiLCJ1c2VNdWx0aXNhbXBsZWRSVFQiLCJmcmFtZWJ1ZmZlclRleHR1cmUyRE11bHRpc2FtcGxlRVhUIiwiZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyIsIlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWiIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwic2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlIiwicmVuZGVyYnVmZmVyIiwiaXNNdWx0aXNhbXBsZSIsImJpbmRSZW5kZXJidWZmZXIiLCJSRU5ERVJCVUZGRVIiLCJnbEF0dGFjaG1lbnRUeXBlIiwiREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5UIiwiREVQVEhfQVRUQUNITUVOVCIsInJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZUVYVCIsInJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZSIsInJlbmRlcmJ1ZmZlclN0b3JhZ2UiLCJmcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciIsInNldHVwRGVwdGhUZXh0dXJlIiwid2ViZ2xEZXB0aFRleHR1cmUiLCJzZXR1cERlcHRoUmVuZGVyYnVmZmVyIiwiaXNDdWJlIiwiX19ib3VuZERlcHRoVGV4dHVyZSIsIl9fZGVwdGhEaXNwb3NlQ2FsbGJhY2siLCJkaXNwb3NlRXZlbnQiLCJfX2F1dG9BbGxvY2F0ZURlcHRoQnVmZmVyIiwiY3JlYXRlUmVuZGVyYnVmZmVyIiwiaW52YWxpZGF0aW9uQXJyYXlSZWFkIiwiaW52YWxpZGF0aW9uQXJyYXlEcmF3IiwiX191c2VSZW5kZXJUb1RleHR1cmUiLCJuYXR1cmFsV2lkdGgiLCJuYXR1cmFsSGVpZ2h0IiwiZGlzcGxheVdpZHRoIiwiZGlzcGxheUhlaWdodCIsInRleHR1cmVVbml0IiwicmVzZXRUZXh0dXJlVW5pdHMiLCJpc0NvbXByZXNzZWQiLCJjdWJlSW1hZ2UiLCJtaXBtYXBJbWFnZSIsInVwbG9hZEN1YmVUZXh0dXJlIiwicmViaW5kVGV4dHVyZXMiLCJjb2xvclRleHR1cmUiLCJzZXR1cFJlbmRlclRhcmdldCIsImlzTXVsdGlwbGVSZW5kZXJUYXJnZXRzIiwiY3JlYXRlRnJhbWVidWZmZXIiLCJnbFRleHR1cmVUeXBlIiwidXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwIiwidGFyZ2V0VHlwZSIsInVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0IiwiQ09MT1JfQlVGRkVSX0JJVCIsImRlcHRoU3R5bGUiLCJyZXNvbHZlRGVwdGhCdWZmZXIiLCJERVBUSF9CVUZGRVJfQklUIiwicmVzb2x2ZVN0ZW5jaWxCdWZmZXIiLCJTVEVOQ0lMX0JVRkZFUl9CSVQiLCJibGl0RnJhbWVidWZmZXIiLCJpbnZhbGlkYXRlRnJhbWVidWZmZXIiLCJXZWJHTFV0aWxzIiwiQUxQSEEiLCJERVBUSF9DT01QT05FTlQiLCJERVBUSF9TVEVOQ0lMIiwiQ09NUFJFU1NFRF9TUkdCX1MzVENfRFhUMV9FWFQiLCJDT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQxX0VYVCIsIkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDNfRVhUIiwiQ09NUFJFU1NFRF9TUkdCX0FMUEhBX1MzVENfRFhUNV9FWFQiLCJDT01QUkVTU0VEX1JHQl9TM1RDX0RYVDFfRVhUIiwiQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUMV9FWFQiLCJDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQzX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDVfRVhUIiwiQ09NUFJFU1NFRF9SR0JfUFZSVENfNEJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCX1BWUlRDXzJCUFBWMV9JTUciLCJDT01QUkVTU0VEX1JHQkFfUFZSVENfNEJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCQV9QVlJUQ18yQlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9TUkdCOF9FVEMyIiwiQ09NUFJFU1NFRF9SR0I4X0VUQzIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9FVEMyX0VBQyIsIkNPTVBSRVNTRURfUkdCQThfRVRDMl9FQUMiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzR4NF9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ180eDRfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ181eDRfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfNXg0X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNXg1X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzV4NV9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzZ4NV9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ182eDVfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ182eDZfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfNng2X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfOHg1X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzh4NV9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4Nl9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ184eDZfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ184eDhfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg4X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4NV9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg1X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4Nl9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg2X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4OF9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg4X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4MTBfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfMTB4MTBfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMngxMF9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ18xMngxMF9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEyeDEyX0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzEyeDEyX0tIUiIsIkNPTVBSRVNTRURfU1JHQl9BTFBIQV9CUFRDX1VOT1JNX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9CUFRDX1VOT1JNX0VYVCIsIkNPTVBSRVNTRURfUkdCX0JQVENfU0lHTkVEX0ZMT0FUX0VYVCIsIkNPTVBSRVNTRURfUkdCX0JQVENfVU5TSUdORURfRkxPQVRfRVhUIiwiQ09NUFJFU1NFRF9SRURfUkdUQzFfRVhUIiwiQ09NUFJFU1NFRF9TSUdORURfUkVEX1JHVEMxX0VYVCIsIkNPTVBSRVNTRURfUkVEX0dSRUVOX1JHVEMyX0VYVCIsIkNPTVBSRVNTRURfU0lHTkVEX1JFRF9HUkVFTl9SR1RDMl9FWFQiLCJVTlNJR05FRF9JTlRfMjRfOCIsIldlYlhSRGVwdGhTZW5zaW5nIiwiZGVwdGhOZWFyIiwiZGVwdGhGYXIiLCJkZXB0aERhdGEiLCJnZXRNZXNoIiwiY2FtZXJhWFIiLCJjYW1lcmFzIiwiZGVwdGhDb2xvciIsImRlcHRoV2lkdGgiLCJkZXB0aEhlaWdodCIsImdldERlcHRoVGV4dHVyZSIsIldlYlhSTWFuYWdlciIsInN1cGVyIiwic2Vzc2lvbiIsImZyYW1lYnVmZmVyU2NhbGVGYWN0b3IiLCJyZWZlcmVuY2VTcGFjZSIsInJlZmVyZW5jZVNwYWNlVHlwZSIsImZvdmVhdGlvbiIsImN1c3RvbVJlZmVyZW5jZVNwYWNlIiwicG9zZSIsImdsQmluZGluZyIsImdsUHJvakxheWVyIiwiZ2xCYXNlTGF5ZXIiLCJ4ckZyYW1lIiwic3VwcG9ydHNHbEJpbmRpbmciLCJYUldlYkdMQmluZGluZyIsImRlcHRoU2Vuc2luZyIsImNhbWVyYUFjY2Vzc1RleHR1cmVzIiwiZ2V0Q29udGV4dEF0dHJpYnV0ZXMiLCJpbml0aWFsUmVuZGVyVGFyZ2V0IiwibmV3UmVuZGVyVGFyZ2V0IiwiY29udHJvbGxlcnMiLCJjb250cm9sbGVySW5wdXRTb3VyY2VzIiwiY3VycmVudFNpemUiLCJjdXJyZW50UGl4ZWxSYXRpbyIsImNhbWVyYUwiLCJjYW1lcmFSIiwiX2N1cnJlbnREZXB0aE5lYXIiLCJfY3VycmVudERlcHRoRmFyIiwib25TZXNzaW9uRXZlbnQiLCJjb250cm9sbGVySW5kZXgiLCJpbnB1dFNvdXJjZSIsImNvbnRyb2xsZXIiLCJkaXNwYXRjaEV2ZW50Iiwib25TZXNzaW9uRW5kIiwib25JbnB1dFNvdXJjZXNDaGFuZ2UiLCJkaXNjb25uZWN0IiwiYW5pbWF0aW9uIiwiaXNQcmVzZW50aW5nIiwic2V0UGl4ZWxSYXRpbyIsInNldFNpemUiLCJyZW1vdmVkIiwiYWRkZWQiLCJjb25uZWN0IiwiY2FtZXJhQXV0b1VwZGF0ZSIsImdldENvbnRyb2xsZXIiLCJnZXRUYXJnZXRSYXlTcGFjZSIsImdldENvbnRyb2xsZXJHcmlwIiwiZ2V0R3JpcFNwYWNlIiwiZ2V0SGFuZCIsImdldEhhbmRTcGFjZSIsInNldEZyYW1lYnVmZmVyU2NhbGVGYWN0b3IiLCJzZXRSZWZlcmVuY2VTcGFjZVR5cGUiLCJnZXRSZWZlcmVuY2VTcGFjZSIsInNldFJlZmVyZW5jZVNwYWNlIiwic3BhY2UiLCJnZXRCYXNlTGF5ZXIiLCJnZXRCaW5kaW5nIiwiZ2V0RnJhbWUiLCJnZXRTZXNzaW9uIiwic2V0U2Vzc2lvbiIsImFzeW5jIiwieHJDb21wYXRpYmxlIiwibWFrZVhSQ29tcGF0aWJsZSIsImdldFBpeGVsUmF0aW8iLCJnZXRTaXplIiwicHJvdG90eXBlIiwiZGVwdGhGb3JtYXQiLCJnbERlcHRoRm9ybWF0IiwicHJvamVjdGlvbmxheWVySW5pdCIsImNvbG9yRm9ybWF0Iiwic2NhbGVGYWN0b3IiLCJjcmVhdGVQcm9qZWN0aW9uTGF5ZXIiLCJ1cGRhdGVSZW5kZXJTdGF0ZSIsInRleHR1cmVXaWR0aCIsInRleHR1cmVIZWlnaHQiLCJhbnRpYWxpYXMiLCJpZ25vcmVEZXB0aFZhbHVlcyIsImxheWVySW5pdCIsIlhSV2ViR0xMYXllciIsImJhc2VMYXllciIsImZyYW1lYnVmZmVyV2lkdGgiLCJmcmFtZWJ1ZmZlckhlaWdodCIsInNldEZvdmVhdGlvbiIsInJlcXVlc3RSZWZlcmVuY2VTcGFjZSIsImNhbWVyYUxQb3MiLCJjYW1lcmFSUG9zIiwidXBkYXRlQ2FtZXJhIiwicGFyZW50IiwiaW52ZXJ0IiwiaXBkIiwiZGlzdGFuY2VUbyIsInByb2pMIiwicHJvamVjdGlvbk1hdHJpeCIsInByb2pSIiwidG9wRm92IiwiYm90dG9tRm92IiwibGVmdEZvdiIsInJpZ2h0Rm92IiwibGVmdCIsInJpZ2h0Iiwiek9mZnNldCIsInhPZmZzZXQiLCJkZWNvbXBvc2UiLCJxdWF0ZXJuaW9uIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVoiLCJjb21wb3NlIiwicHJvamVjdGlvbk1hdHJpeEludmVyc2UiLCJuZWFyMiIsImZhcjIiLCJsZWZ0MiIsInJpZ2h0MiIsInRvcDIiLCJib3R0b20yIiwibWFrZVBlcnNwZWN0aXZlIiwic2V0UHJvamVjdGlvbkZyb21VbmlvbiIsInVwZGF0ZU1hdHJpeFdvcmxkIiwiaXNQZXJzcGVjdGl2ZUNhbWVyYSIsImZvdiIsImF0YW4iLCJ6b29tIiwidXBkYXRlVXNlckNhbWVyYSIsImdldENhbWVyYSIsImdldEZvdmVhdGlvbiIsImZpeGVkRm92ZWF0aW9uIiwiaGFzRGVwdGhTZW5zaW5nIiwiZ2V0RGVwdGhTZW5zaW5nTWVzaCIsImdldENhbWVyYVRleHR1cmUiLCJ4ckNhbWVyYSIsIm9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayIsImdldFZpZXdlclBvc2UiLCJ2aWV3cyIsInNldFJlbmRlclRhcmdldEZyYW1lYnVmZmVyIiwiY2FtZXJhWFJOZWVkc1VwZGF0ZSIsInZpZXciLCJnbFN1YkltYWdlIiwiZ2V0Vmlld1N1YkltYWdlIiwic2V0UmVuZGVyVGFyZ2V0VGV4dHVyZXMiLCJkZXB0aFN0ZW5jaWxUZXh0dXJlIiwidHJhbnNmb3JtIiwiZW5hYmxlZEZlYXR1cmVzIiwiaW5jbHVkZXMiLCJkZXB0aFVzYWdlIiwiZ2V0RGVwdGhJbmZvcm1hdGlvbiIsImlzVmFsaWQiLCJjYW1lcmFUZXgiLCJnbFRleHR1cmUiLCJnZXRDYW1lcmFJbWFnZSIsImRldGVjdGVkUGxhbmVzIiwiX2UxIiwiX20xIiwiV2ViR0xNYXRlcmlhbHMiLCJyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSIsInJlZnJlc2hVbmlmb3Jtc0NvbW1vbiIsImVtaXNzaXZlSW50ZW5zaXR5IiwibmVnYXRlIiwicmVmcmVzaEZvZ1VuaWZvcm1zIiwiaXNGb2ciLCJkZW5zaXR5IiwicmVmcmVzaE1hdGVyaWFsVW5pZm9ybXMiLCJwaXhlbFJhdGlvIiwiaXNNZXNoQmFzaWNNYXRlcmlhbCIsImlzTWVzaExhbWJlcnRNYXRlcmlhbCIsImlzTWVzaFRvb25NYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc1Rvb24iLCJpc01lc2hQaG9uZ01hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zUGhvbmciLCJyZWZyZXNoVW5pZm9ybXNTdGFuZGFyZCIsImlzTWVzaFBoeXNpY2FsTWF0ZXJpYWwiLCJpcmlkZXNjZW5jZVRoaWNrbmVzc1JhbmdlIiwiYW5pc290cm9weVJvdGF0aW9uIiwic2luIiwicmVmcmVzaFVuaWZvcm1zUGh5c2ljYWwiLCJpc01lc2hNYXRjYXBNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc01hdGNhcCIsImlzTWVzaERlcHRoTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNEaXN0YW5jZSIsImlzTWVzaE5vcm1hbE1hdGVyaWFsIiwiaXNMaW5lQmFzaWNNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc0xpbmUiLCJpc0xpbmVEYXNoZWRNYXRlcmlhbCIsImdhcFNpemUiLCJyZWZyZXNoVW5pZm9ybXNEYXNoIiwiaXNQb2ludHNNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc1BvaW50cyIsImlzU3ByaXRlTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNTcHJpdGVzIiwiaXNTaGFkb3dNYXRlcmlhbCIsImlzU2hhZGVyTWF0ZXJpYWwiLCJ1bmlmb3Jtc05lZWRVcGRhdGUiLCJXZWJHTFVuaWZvcm1zR3JvdXBzIiwidXBkYXRlTGlzdCIsImFsbG9jYXRlZEJpbmRpbmdQb2ludHMiLCJtYXhCaW5kaW5nUG9pbnRzIiwiTUFYX1VOSUZPUk1fQlVGRkVSX0JJTkRJTkdTIiwiaGFzVW5pZm9ybUNoYW5nZWQiLCJpbmRleEFycmF5IiwiaW5kZXhTdHJpbmciLCJjYWNoZWRPYmplY3QiLCJnZXRVbmlmb3JtU2l6ZSIsImJvdW5kYXJ5Iiwic3RvcmFnZSIsImlzVmVjdG9yMiIsImlzVmVjdG9yMyIsImlzVmVjdG9yNCIsImlzTWF0cml4MyIsImlzTWF0cml4NCIsIm9uVW5pZm9ybXNHcm91cHNEaXNwb3NlIiwic3BsaWNlIiwiYmluZCIsIndlYmdsUHJvZ3JhbSIsInVuaWZvcm1BcnJheSIsImpsIiwiY2h1bmtPZmZzZXQiLCJjaHVua1BhZGRpbmciLCJjaHVua1N0YXJ0IiwiX19kYXRhIiwiX19vZmZzZXQiLCJfX3NpemUiLCJfX2NhY2hlIiwicHJlcGFyZVVuaWZvcm1zR3JvdXAiLCJiaW5kaW5nUG9pbnRJbmRleCIsImFsbG9jYXRlQmluZGluZ1BvaW50SW5kZXgiLCJVTklGT1JNX0JVRkZFUiIsImJpbmRCdWZmZXJCYXNlIiwiYXJyYXlPZmZzZXQiLCJ1cGRhdGVCdWZmZXJEYXRhIiwiV2ViR0xSZW5kZXJlciIsInByZXNlcnZlRHJhd2luZ0J1ZmZlciIsInBvd2VyUHJlZmVyZW5jZSIsImZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQiLCJfYWxwaGEiLCJpc1dlYkdMUmVuZGVyZXIiLCJXZWJHTFJlbmRlcmluZ0NvbnRleHQiLCJ1aW50Q2xlYXJDb2xvciIsImludENsZWFyQ29sb3IiLCJjdXJyZW50UmVuZGVyTGlzdCIsImN1cnJlbnRSZW5kZXJTdGF0ZSIsInJlbmRlckxpc3RTdGFjayIsInJlbmRlclN0YXRlU3RhY2siLCJkb21FbGVtZW50Iiwic29ydE9iamVjdHMiLCJ0b25lTWFwcGluZ0V4cG9zdXJlIiwidHJhbnNtaXNzaW9uUmVzb2x1dGlvblNjYWxlIiwiX3RoaXMiLCJfaXNDb250ZXh0TG9zdCIsIl9vdXRwdXRDb2xvclNwYWNlIiwiX2N1cnJlbnRBY3RpdmVDdWJlRmFjZSIsIl9jdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWwiLCJfY3VycmVudFJlbmRlclRhcmdldCIsIl9jdXJyZW50TWF0ZXJpYWxJZCIsIl9jdXJyZW50Q2FtZXJhIiwiX2N1cnJlbnRWaWV3cG9ydCIsIl9jdXJyZW50U2Npc3NvciIsIl9jdXJyZW50U2Npc3NvclRlc3QiLCJfY3VycmVudENsZWFyQ29sb3IiLCJfY3VycmVudENsZWFyQWxwaGEiLCJfd2lkdGgiLCJfaGVpZ2h0IiwiX3BpeGVsUmF0aW8iLCJfb3BhcXVlU29ydCIsIl90cmFuc3BhcmVudFNvcnQiLCJfc2Npc3NvciIsIl9zY2lzc29yVGVzdCIsIl9jbGlwcGluZ0VuYWJsZWQiLCJfbG9jYWxDbGlwcGluZ0VuYWJsZWQiLCJfcHJvalNjcmVlbk1hdHJpeCIsIl92ZWN0b3IzIiwiX3ZlY3RvcjQiLCJfZW1wdHlTY2VuZSIsIm92ZXJyaWRlTWF0ZXJpYWwiLCJfcmVuZGVyQmFja2dyb3VuZCIsImdldFRhcmdldFBpeGVsUmF0aW8iLCJwcm9ncmFtQ2FjaGUiLCJtYXRlcmlhbHMiLCJyZW5kZXJMaXN0cyIsIm1vcnBodGFyZ2V0cyIsImJ1ZmZlclJlbmRlcmVyIiwiaW5kZXhlZEJ1ZmZlclJlbmRlcmVyIiwidW5pZm9ybXNHcm91cHMiLCJjb250ZXh0TmFtZSIsImNvbnRleHRBdHRyaWJ1dGVzIiwib25Db250ZXh0TG9zdCIsIm9uQ29udGV4dFJlc3RvcmUiLCJvbkNvbnRleHRDcmVhdGlvbkVycm9yIiwibWVzc2FnZSIsImluaXRHTENvbnRleHQiLCJwcmV2ZW50RGVmYXVsdCIsImluZm9BdXRvUmVzZXQiLCJzaGFkb3dNYXBBdXRvVXBkYXRlIiwic2hhZG93TWFwTmVlZHNVcGRhdGUiLCJzdGF0dXNNZXNzYWdlIiwiZm9yRWFjaCIsInJlbGVhc2VNYXRlcmlhbFByb2dyYW1SZWZlcmVuY2VzIiwiZGVhbGxvY2F0ZU1hdGVyaWFsIiwicHJlcGFyZU1hdGVyaWFsIiwiZm9yY2VTaW5nbGVQYXNzIiwiZ2V0UHJvZ3JhbSIsImZvcmNlQ29udGV4dExvc3MiLCJsb3NlQ29udGV4dCIsImZvcmNlQ29udGV4dFJlc3RvcmUiLCJyZXN0b3JlQ29udGV4dCIsInVwZGF0ZVN0eWxlIiwic3R5bGUiLCJzZXRWaWV3cG9ydCIsImdldERyYXdpbmdCdWZmZXJTaXplIiwic2V0RHJhd2luZ0J1ZmZlclNpemUiLCJnZXRDdXJyZW50Vmlld3BvcnQiLCJyb3VuZCIsImdldFNjaXNzb3IiLCJzZXRTY2lzc29yIiwiZ2V0U2Npc3NvclRlc3QiLCJib29sZWFuIiwic2V0T3BhcXVlU29ydCIsIm1ldGhvZCIsInNldFRyYW5zcGFyZW50U29ydCIsImJpdHMiLCJpc0ludGVnZXJGb3JtYXQiLCJ0YXJnZXRGb3JtYXQiLCJpc1Vuc2lnbmVkVHlwZSIsImNsZWFyQnVmZmVydWl2IiwiQ09MT1IiLCJjbGVhckJ1ZmZlcml2Iiwib25YUlNlc3Npb25TdGFydCIsIm9uWFJTZXNzaW9uRW5kIiwiZGV0ZXJtaW5hbnQiLCJuZWVkc1Byb2dyYW1DaGFuZ2UiLCJuZWVkc0xpZ2h0cyIsImxpZ2h0c1N0YXRlVmVyc2lvbiIsInJlZnJlc2hQcm9ncmFtIiwicmVmcmVzaE1hdGVyaWFsIiwicmVmcmVzaExpZ2h0cyIsInBfdW5pZm9ybXMiLCJtX3VuaWZvcm1zIiwicmV2ZXJzZWREZXB0aCIsIl9yZXZlcnNlZERlcHRoIiwidUNhbVBvcyIsImNhbWVyYVBvc2l0aW9uIiwiTE4yIiwiaXNPcnRob2dyYXBoaWNDYW1lcmEiLCJib25lVGV4dHVyZSIsImNvbXB1dGVCb25lVGV4dHVyZSIsIl9tYXRyaWNlc1RleHR1cmUiLCJfaW5kaXJlY3RUZXh0dXJlIiwiaXNNZXNoR291cmF1ZE1hdGVyaWFsIiwiZW52aXJvbm1lbnRJbnRlbnNpdHkiLCJnZXRVbmlmb3JtTGlzdCIsIm5vcm1hbE1hdHJpeCIsInNldFByb2dyYW0iLCJyYW5nZUZhY3RvciIsImRyYXdSYW5nZSIsImRyYXdTdGFydCIsImRyYXdFbmQiLCJJbmZpbml0eSIsImlzTGluZVNlZ21lbnRzIiwiaXNMaW5lTG9vcCIsImlzU3ByaXRlIiwiX211bHRpRHJhd0luc3RhbmNlcyIsIl9tdWx0aURyYXdTdGFydHMiLCJfbXVsdGlEcmF3Q291bnRzIiwiX211bHRpRHJhd0NvdW50IiwibWF4SW5zdGFuY2VDb3VudCIsInRhcmdldFNjZW5lIiwidHJhdmVyc2VWaXNpYmxlIiwiaXNMaWdodCIsInRyYXZlcnNlIiwibWF0ZXJpYWwyIiwiY29tcGlsZUFzeW5jIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjaGVja01hdGVyaWFsc1JlYWR5Iiwic2V0VGltZW91dCIsInByb2plY3RPYmplY3QiLCJpc0dyb3VwIiwiaXNMT0QiLCJpbnRlcnNlY3RzU3ByaXRlIiwiYm91bmRpbmdTcGhlcmUiLCJjb21wdXRlQm91bmRpbmdTcGhlcmUiLCJyZW5kZXJTY2VuZSIsIm9wYXF1ZU9iamVjdHMiLCJ0cmFuc21pc3NpdmVPYmplY3RzIiwidHJhbnNwYXJlbnRPYmplY3RzIiwicmVuZGVyT2JqZWN0cyIsInJlbmRlclRyYW5zbWlzc2lvblBhc3MiLCJhY3RpdmVWaWV3cG9ydCIsImN1cnJlbnRBY3RpdmVDdWJlRmFjZSIsImN1cnJlbnRBY3RpdmVNaXBtYXBMZXZlbCIsImN1cnJlbnRUb25lTWFwcGluZyIsImN1cnJlbnRDYW1lcmFWaWV3cG9ydCIsInJlbmRlclRhcmdldE5lZWRzVXBkYXRlIiwiY3VycmVudFNpZGUiLCJvbkFmdGVyUmVuZGVyIiwicHJvZ3JhbUNhY2hlS2V5IiwiZW52aXJvbm1lbnRSb3RhdGlvbiIsInVwZGF0ZUNvbW1vbk1hdGVyaWFsUHJvcGVydGllcyIsIm9uQmVmb3JlQ29tcGlsZSIsIm1hdGVyaWFsTmVlZHNMaWdodHMiLCJ1bmlmb3Jtc0xpc3QiLCJwcm9nVW5pZm9ybXMiLCJpc0NhbWVyYSIsIm1hdHJpeFdvcmxkQXV0b1VwZGF0ZSIsInNldEZyb21Qcm9qZWN0aW9uTWF0cml4IiwiZGVwdGhTZW5zaW5nTWVzaCIsImlzQXJyYXlDYW1lcmEiLCJjYW1lcmEyIiwiZGVmYXVsdEZyYW1lYnVmZmVyIiwiX191c2VEZWZhdWx0RnJhbWVidWZmZXIiLCJfc2NyYXRjaEZyYW1lQnVmZmVyIiwidXNlRGVmYXVsdEZyYW1lYnVmZmVyIiwiaXNSZW5kZXJUYXJnZXQzRCIsImxheWVyIiwiZnJhbWVidWZmZXJUZXh0dXJlTGF5ZXIiLCJyZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzIiwiYWN0aXZlQ3ViZUZhY2VJbmRleCIsInRleHR1cmVJbmRleCIsImlzV2ViR0xSZW5kZXJUYXJnZXQiLCJyZWFkQnVmZmVyIiwicmVhZFBpeGVscyIsInJlYWRSZW5kZXJUYXJnZXRQaXhlbHNBc3luYyIsImdsQnVmZmVyIiwiUElYRUxfUEFDS19CVUZGRVIiLCJTVFJFQU1fUkVBRCIsImN1cnJGcmFtZWJ1ZmZlciIsInN5bmMiLCJmZW5jZVN5bmMiLCJTWU5DX0dQVV9DT01NQU5EU19DT01QTEVURSIsImZsdXNoIiwiZ2V0QnVmZmVyU3ViRGF0YSIsImRlbGV0ZVN5bmMiLCJjb3B5RnJhbWVidWZmZXJUb1RleHR1cmUiLCJsZXZlbFNjYWxlIiwiY29weVRleFN1YkltYWdlMkQiLCJfc3JjRnJhbWVidWZmZXIiLCJfZHN0RnJhbWVidWZmZXIiLCJjb3B5VGV4dHVyZVRvVGV4dHVyZSIsInNyY1RleHR1cmUiLCJkc3RUZXh0dXJlIiwic3JjUmVnaW9uIiwiZHN0UG9zaXRpb24iLCJzcmNMZXZlbCIsImRzdExldmVsIiwibWluWCIsIm1pblkiLCJtaW5aIiwiZHN0WCIsImRzdFkiLCJkc3RaIiwiaXNCb3gzIiwiZ2xUYXJnZXQiLCJjdXJyZW50VW5wYWNrSW1hZ2VIZWlnaHQiLCJVTlBBQ0tfSU1BR0VfSEVJR0hUIiwiY3VycmVudFVucGFja1NraXBJbWFnZXMiLCJVTlBBQ0tfU0tJUF9JTUFHRVMiLCJpc1NyYzNEIiwiaXNEc3QzRCIsInNyY1RleHR1cmVQcm9wZXJ0aWVzIiwiZHN0VGV4dHVyZVByb3BlcnRpZXMiLCJzcmNSZW5kZXJUYXJnZXRQcm9wZXJ0aWVzIiwiZHN0UmVuZGVyVGFyZ2V0UHJvcGVydGllcyIsImNvcHlUZXhTdWJJbWFnZTNEIiwiaW5pdFJlbmRlclRhcmdldCIsInJlc2V0U3RhdGUiLCJfX1RIUkVFX0RFVlRPT0xTX18iLCJDdXN0b21FdmVudCIsImRldGFpbCIsImNvb3JkaW5hdGVTeXN0ZW0iLCJkcmF3aW5nQnVmZmVyQ29sb3JTcGFjZSIsIl9nZXREcmF3aW5nQnVmZmVyQ29sb3JTcGFjZSIsInVucGFja0NvbG9yU3BhY2UiLCJfZ2V0VW5wYWNrQ29sb3JTcGFjZSJdLCJzb3VyY2VSb290IjoiIn0=
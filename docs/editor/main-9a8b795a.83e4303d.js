"use strict";(self.webpackChunk_reneos_slider_editor=self.webpackChunk_reneos_slider_editor||[]).push([[415],{1291:(e,t,n)=>{e.exports=n.p+"assets/76bf5ab841899c419d06.svg"},2958:(e,t,n)=>{n.d(t,{A:()=>g});var a=n(2015);const s={class:"app-container canvas-container"},o={class:"workspace"},i={id:"editorcanvas",ref:"editorcanvas"},l={id:"playcanvas",ref:"playcanvas"},c={id:"playui",ref:"playui"},r={key:0,class:"splash"};var d=n(6166),p=n(3822),u=n(4875),m=n(9216);const h={data:()=>({selectedElement:null,loadComponent:"div",modulesLoaded:!1,progress:0}),computed:{ui(){return this.$app.ui},hierarhyAllow(){return this.$app.engine.instances.length>0},options(){return this.$app.options},app(){return this.$app.app},tools:()=>toolse,models(){return this.$app.models},ready(){return this.$app.app.ready},toasts(){return this.$app.toasts},modal(){return this.$app.modal},translations(){return this.$app.translations}},methods:{async start(){this.$app.app.ready=!0},waitCanvasSize(e){const t=window.devicePixelRatio||1;e.forEach(e=>{e.width=e.clientWidth*t,e.height=e.clientHeight*t})}},async mounted(){document.documentElement.setAttribute("data-theme","dark"),window.THREE=u,await this.$app.app.init(),await this.$app.modules.init();const e=this.$refs.editorcanvas,t=this.$refs.playcanvas;this.waitCanvasSize([e,t]);const n=["actions","assets","models","modules","project","slides"],a=new URLSearchParams(window.location.search),s=a.get("src");let o;switch(await this.$app.app.init(),await this.$app.templates.init(),s){case"db":default:this.$app.project.uid=a.get("db")||"empty",await m.A.Init(this.$app.project.uid,n,"uid");const e=[];for(let t=0;t<n.length;t++){const a=await m.A.getAllItems(n[t]);e.push(a)}const[t=[],s=[],i=[],l=[],c={uid:this.$app.project.uid},r=[]]=e;o={actions:t,assets:s,models:i,modules:l,project:c,slides:r};break;case"url":const d=await fetch(a.get("url"));o=await d.json(),this.$app.project.uid=o.project.uid,await m.A.Init(this.$app.project.uid,n,"uid")}this.$app.project.init(o.project),this.$app.projects.init(this.$app.project.uid),await new Promise(e=>{this.$nextTick(e)}),this.loadComponent="LoaderScreen",console.log("---LOAD ENGINE---"),await this.$app.engine.load(),console.log("---LOAD MODULES---"),await this.$app.modules.loadUserModules(o.modules),console.log("---LOAD ASSETS AND ACTIONS---"),await Promise.all([this.$app.assets.init(o.assets,e=>{this.progress=e}),this.$app.actions.init(o.actions)]),console.log("---LOAD END---"),this.$app.engine.Project.Init(t),this.$app.engine.Project.Start(),console.log("---BUILD SCENES---"),await p.A.Init(e),await this.$app.engine.start();const i=this.$app.engine.CssManager;await i.Init(this.$refs.playui,t),this.$app.project.on("create",e=>{i.OnCreate(e,this.$app.ui,this.$app.slides)}),this.$app.project.on("remove",(e,t)=>{i.OnRemove(t,this.$app.ui)});try{console.log("---INSTANCED MODELS---"),await this.$app.project.load(o.models)}catch(e){s&&"db"!==s||(console.warn(e),this.$app.toasts.add({message:"Error loading project",type:"alerticon",timehide:!0}))}if(console.log("---BUILD SLIDES---"),0===o.slides.length){const e=await this.$app.slides.add({name:"Main",props:{},actions:[]});o.slides.push(e)}await this.$app.slides.load(o.slides),this.progress=100,o.slides.length>0&&(console.log("---ACTIVATE FIRST SLIDE---"),this.$app.slides.goto(0)),console.log("---READY---"),this.app.ready=!0},components:{UI:d.A}},g=(0,n(6262).A)(h,[["render",function(e,t,n,d,p,u){const m=(0,a.resolveComponent)("UI"),h=(0,a.resolveComponent)("Modal"),g=(0,a.resolveComponent)("Toasts");return(0,a.openBlock)(),(0,a.createElementBlock)("div",s,[(0,a.createElementVNode)("div",o,[(0,a.createElementVNode)("canvas",i,null,512),(0,a.createElementVNode)("canvas",l,null,512),(0,a.createElementVNode)("div",c,[((0,a.openBlock)(!0),(0,a.createElementBlock)(a.Fragment,null,(0,a.renderList)(u.ui.elements,(e,t)=>((0,a.openBlock)(),(0,a.createBlock)((0,a.resolveDynamicComponent)(e.component),(0,a.mergeProps)({onMounted:u.ui.onElementMount,key:t},(0,a.toHandlers)(e.events||{}),{ref_for:!0},e.data),null,16,["onMounted"]))),128))],512),(0,a.createVNode)(m,{element:p.selectedElement},null,8,["element"])]),u.ready?(0,a.createCommentVNode)("v-if",!0):((0,a.openBlock)(),(0,a.createElementBlock)("div",r,[((0,a.openBlock)(),(0,a.createBlock)((0,a.resolveDynamicComponent)(p.loadComponent),{loadingProgress:p.progress,onClick:u.start},null,8,["loadingProgress","onClick"]))])),u.modal.isVisible?((0,a.openBlock)(),(0,a.createBlock)(h,{key:1})):(0,a.createCommentVNode)("v-if",!0),(0,a.createVNode)(g)])}]])},4594:(e,t,n)=>{n.r(t),n.d(t,{actions:()=>le,app:()=>Me,assets:()=>Ee,engine:()=>K,inspector:()=>Le,menu:()=>Be,modal:()=>g,modules:()=>k,project:()=>H,projects:()=>Ye,selection:()=>Qe,slides:()=>z,storage:()=>tt,templates:()=>lt,toasts:()=>u,ui:()=>pt});var a=n(2015),s=n(9216),o=n(2320),i=n(4196),l=n(2859),c=n(6311);const r=o.default||o;let d=0;const p=(0,a.reactive)({list:[],add({message:e,icon:t,onclick:n,timehide:s=!0,type:o,...i},c=(0,a.markRaw)(l.A)){const r=(0,a.reactive)({id:d++,data:{message:e,icon:t,type:o,...i},component:c});return s&&(r.timeout=setTimeout(()=>{p.remove(r.id)},3e3)),r.onclick=n||p.remove.bind(this,r.id),p.list.push(r),r},remove(e){for(let t=p.list.length-1;t>=0;t--)p.list[t].id===e&&p.list.splice(t,1)}});r.On("init",()=>{window.vue.component("QueryToast",c.A)});const u=p,m=(0,a.ref)(!1),h=(0,a.reactive)({isVisible:!1,header:null,content:null,footer:null,values:null,open({header:e,content:t,footer:n,...a}){h.header=e||{},h.content=t||{},h.footer=n||{},h.values={closable:!1,...a},m.value=!0},close(e){e||(m.value=!1)},get isVisible(){return m.value},queryText(e,t,n){h.open({header:{value:e.title,handler:h.close},content:{component:"queryform",props:e,events:{"update:text":n}},footer:{buttons:[...t.map(t=>(t.handler=()=>{t.callback(e.answer),h.close()},t)),{label:"Закрыть",class:"additional",handler:h.close}]}})},confirmReq(e,t){h.open({header:{value:e.title,handler:h.close},content:{component:"confirmform",props:e},footer:{buttons:[...t.map(t=>(t.handler=()=>{t.callback(e.answer),h.close()},t))]}})}}),g=h,w=o.default||o;class f extends Error{constructor(){super("Not all required parameters are specified."),this.isReqError=!0}}class y extends Error{constructor(){super("This module has already been added."),this.isExistError=!0}}const v=[{name:"engine",entry:"/editor/engine/mf.js",index:"engine",system:!0},{name:"tools",entry:"/mods/tools/mf.js",index:"tools",system:!0}],b=[],A=[{uid:"gsap:/mods/gsap/mf.js",title:"GSAP Animation",description:'<p>The module provides element transformations: movement, rotation, and scale.</p>\n        <p>Use GSAP:</p>\n        <p><a href="https://github.com/greensock/GSAP" target="blank">https://github.com/greensock/GSAP</a></p>',name:"gsapmod",entry:"/mods/gsap/mf.js",index:"gsap",global:!0},{uid:"troika:/mods/troika/mf.js",title:"Troika Text",description:'<p>Module  provides high quality text rendering in Three.js scenes, using signed distance fields (SDF) and antialiasing using standard derivatives.</p>\n        <p>Use Troika Text for Three.js:</p>\n        <p><a href="https://github.com/protectwise/troika/tree/main/packages/troika-three-text" target="blank">https://github.com/protectwise/troika/tree/main/packages/troika-three-text</a></p>',name:"troika",entry:"/mods/troika/mf.js",index:"troika",global:!0},{uid:"textmesh:/mods/textmesh/mf.js",title:"Text Mesh",description:'<p>Module use small library for building VR user interfaces. The objects it creates are three.object3Ds, usable directly in a three.js scene like any other Object3D.</p>\n        <p>Use three-mesh-ui:</p>\n        <p><a href="https://github.com/felixmariotto/three-mesh-ui" target="blank">https://github.com/felixmariotto/three-mesh-ui</a></p>',name:"textmesh",entry:"/mods/textmesh/mf.js",index:"textmesh",global:!0},{uid:"particle:/mods/particle/mf.js",title:"Particles",description:"<p>Particle system </p>",name:"particle",entry:"/mods/particle/mf.js",index:"particle",global:!0}],j={};async function x(e){if(e.uid=`${e.index}:${e.entry}`,!e.name?.length||!e.index?.length||!e.entry?.length)throw new f;if(b.find(t=>t.uid===e.uid))throw new y;try{(0,i.registerRemotes)([{...e}]),await(0,i.loadRemote)(`${e.name}/${e.index}`)}catch(e){throw e}const t=await async function(e){const t={id:e.entry,...e};return await s.A.upsertItemProperties("modules",t.uid,t),t}(e);return b.push(t),t}function E(){const e=(0,a.reactive)({selected:null,list:b,processed:!1,styles:{item:{width:"128px",height:"128px"}},title:"Project modules"}),t={label:"Add",class:"secondary",hidden:(0,a.computed)(()=>!e.selected||e.selected.uid||e.processed),handler:async()=>{e.processed=!0;try{e.selected=await x(e.selected)}catch(t){return t.isReqError?u.add({message:"Not all required fields are filled in"}):u.add({message:"Error adding module"}),void(e.processed=!1)}u.add({message:"The module has been loaded successfully."})}},n={label:"Registration",class:"secondary",hidden:(0,a.computed)(()=>e.selected&&!e.selected.uid),handler:()=>{e.selected=(0,a.reactive)({name:"",entry:"",index:""})}},o={label:"Cancel",class:"primary",hidden:(0,a.computed)(()=>!e.selected),handler:()=>{e.selected=null}},i={label:"Remove",class:"additional",hidden:(0,a.computed)(()=>!e.selected?.id),handler:()=>{console.log(e.selected);const t=`${e.selected.index}:${e.selected.entry}`,n=b.findIndex(e=>`${e.index}:${e.entry}`===t);if(n>=0){const t=b.splice(n,1);w.toasts.add({message:"The module has been removed and will not be loaded the next time you use it.\nPlease refresh the page to take effect."}),e.selected=null,s.A.deleteItem("modules",t[0].index)}}},l={label:"Close",class:"primary",handler:async()=>{g.close()}},c=(0,a.reactive)([n,i,t,o,l]);g.open({header:{value:"Managing modules",handler:()=>{g.close()}},content:{component:"ItemsLib",props:e,events:{selected:t=>{e.selected=t,console.log(e.selected)}},slots:{item:{component:"ModuleItem"},edit:{component:"ModuleEdit",props:e,events:{edit:(t,n)=>{e.selected[t]=n}}}}},footer:{buttons:c}})}const I=(0,a.reactive)({init:async function(){(0,i.createInstance)({name:"slider.editor",remotes:[]}),b.length=0,await(0,i.registerRemotes)([...v]),await Promise.all(v.map(e=>new Promise(t=>{(0,i.loadRemote)(`${e.name}/${e.index}`).then(n=>{j[e.name]=n,t()})})))},showLib:E,getMod:function(e){return j[e]},loadUserModules:async function(e){await(0,i.registerRemotes)(e);const t=e.map(e=>new Promise(t=>{(0,i.loadRemote)(`${e.name}/${e.index}`).then(n=>{b.push({name:e.name,index:e.index,entry:e.entry,title:e.title||e.name,id:e.id,uid:e.uid,global:e.global,description:e.description}),t()})}));await Promise.all(t),console.log(`UserModules loaded ${t.length}`)},AddModules:async function(e){for(let t=0;t<e.length;t++){const n=e[t];try{await x(n)}catch(e){continue}}}});w.On("init",()=>{w.menu.hierarhy.list.push({icon:"books",tooltip:"Modules",handler:E}),window.vue.component("ModuleEdit",(0,a.defineAsyncComponent)(async()=>{const e=await n.e(232).then(n.bind(n,4232));return e.default||e})),window.vue.component("ModuleItem",(0,a.defineAsyncComponent)(async()=>{const e=await n.e(920).then(n.bind(n,6920));return e.default||e})),window.vue.component("ModuleView",(0,a.defineAsyncComponent)(async()=>{const e=await n.e(833).then(n.bind(n,8833));return e.default||e})),w.menu.addMenu("app",{path:"app.list.libraries",icon:"",text:"Libraries",link:"#",children:[{path:"app.list.libraries.modules",icon:"books",text:"Modules",handler:async()=>{!function(){const e=(0,a.reactive)({selected:null,list:A,processed:!1,canadd:!1,styles:{item:{width:"128px",height:"128px"}},head:{title:""}}),t={label:"Add to project",class:"secondary",hidden:(0,a.computed)(()=>e.processed||!e.selected||!e.canadd),handler:async()=>{e.processed=!0,e.canadd=-1===b.findIndex(t=>t.uid===e.selected.uid);try{await x({...e.selected})}catch(t){return t.isExistError?u.add({message:t.message}):u.add({message:"Error adding module"}),void(e.processed=!1)}u.add({message:"The module has been added to project."})}},n={label:"Close",class:"primary",handler:async()=>{g.close()}},s=(0,a.reactive)([t,n]);g.open({header:{value:"Global modules",handler:()=>{g.close()}},content:{component:"ItemsLib",props:e,events:{selected:t=>{e.selected=t,e.canadd=-1===b.findIndex(t=>t.uid===e.selected.uid),console.log(e.selected,e.canadd)}},slots:{head:{component:"SearchFilter"},item:{component:"ModuleItem"},edit:{component:"ModuleView",props:e}}},footer:{buttons:s}})}()}}]})});const k=I;var S=n(351),M=n(9338),C=n(3216),$=n(6667);const P=o.default||o,T=new S.A;let O;async function D(e,t,n){if(!t)return;if(n[t.uid])return n[t.uid];const a=t.parent;let s=n[a];s||(s=await D(e,e.find(e=>e.uid===a),n));try{const e=await L(t,s);return n[e.uid]=e,e}catch(e){console.warn(e)}}async function L(e,t){const n=await O.BuildElement(e,t||P.engine.getManager().Root);if(!n)return;n.name=e.name||e.uid,n.states=e.states||{},n.properties=e.properties||{},n.actions=e.actions||[],n.paths=e.paths??n.paths,n.path=n.paths.join(".");const s=(0,a.reactive)(n);return(t||N).add(s),T.emit("create",s),s}async function F(e){try{await s.A.upsertItemProperties("models",e.uid,JSON.parse((0,M.As)({name:e.name,paths:e.paths,path:e.paths.join("."),parent:e.parent?.uid||null,actions:e.actions||[],props:e.props||{},properties:e.properties||{},states:e.states,type:e.type,uid:e.uid,assets:e.assets||[]})))}catch(e){console.warn(e)}}function R(e,t,n=[]){for(let a=0;a<e.length;a++){const s=e[a];s.isElement&&s.states[t]&&n.push(s),s.children||console.warn("No child"),s.children.length&&R(s.children,t,n)}}const N=(0,a.reactive)({add(e){N.children.push(e)},uid:null,init:function(e){for(let t=0;t<e.length;t++){const n=e[t];N.data[n.uid]=n}N.info=N.data.info||{name:"Editor"}},info:{name:"Editor"},data:{},load:async function(e){O=P.engine.getFactory();const t={};for(let n=e.length-1;n>=0;n--){const a=e[n],s=await D(e,a,t),o=e.findIndex(e=>e.uid===s.uid);o>=0&&e.splice(o,1)}},findStates:function(e){const t=[];return R(N.children,e,t),t},getState:function(e,t){return e.states[t]||(e.states[t]={actions:[]},T.emit("stateadd",t,e.paths)),e.states[t]},remove:async function e(t){let n=N,a=N;for(let e=0;e<t.length;e++)n=a,a=n.children.find(n=>n.uid===t[e]);P.selection.selected===a&&P.selection.select(null);const o=n.children.findIndex(e=>e===a);if(o>=0){for(let t=0;t<a.children.length;t++){const n=a.children[t];n.isElement&&e(n.paths)}n.children.splice(o,1),a.parent&&a.parent.remove(a),s.A.deleteItem("models",a.uid),O.RemoveModel(a.uid),T.emit("remove",t,a)}},handleAsset:async function(e){if(P.slides.actived){if("model"===e.source.type){const t=`${e.source.name||e.source.uid}${Date.now()}`.replace(".","");console.log(e.source.resource);const n=await P.project.createElement({type:"Object3D",uid:t,parent:e.target?.uid,assets:[{uid:e.source.uid}],paths:[...e.target?.paths||[],t]},e.target);await P.project.save(n),P.selection.select(n)}}else P.toasts.add({message:"Необходимо создать слайд"})},addElement:async function(e){const t={name:"New Element",type:"Group"};let n;t.uid=`Element${Date.now()}`,t.paths=[],e&&e.isElement&&(n=e,t.paths.push(...e.paths)),t.paths.push(t.uid),t.path=t.paths.join("."),P.modal.open({header:{value:`Add ${n?" child element to "+n.name||0:" new element to scene"}`,handler:()=>{P.modal.close()}},content:{component:"ElementAdd",props:{parent:e,modelValue:t},events:{"update:modelValue":e=>{Object.keys(e).forEach(n=>{t[n]=e[n]})}}},footer:{buttons:[{label:"Add",class:"secondary",handler:async()=>{const e=await L(t,n);e&&await F(e),P.modal.close()}},{label:"Cancel",class:"primary",handler:async()=>{P.modal.close()}}]}})},createElement:L,save:F,find:function(e){let t=N;for(let n=0;n<e.length;n++)t=t.children.find(t=>t.uid===e[n]);return t},findObjectsByType:function(e){const t=[];return function n(a){a instanceof e&&t.push(a.data),a.children&&Array.isArray(a.children)&&a.children.forEach(e=>n(e))}(N),t},exportToJson:async function(){const e=await s.A.exportToJson(N.uid),t=new Blob([JSON.stringify(e)],{type:"application/json"}),n=`project${N.uid}.json`;if(window.navigator.msSaveOrOpenBlob)window.navigator.msSaveBlob(t,n);else{const e=window.document.createElement("a");e.href=window.URL.createObjectURL(t),e.download=n,e.style="display: none",e.click()}},importProject:async function(){try{const e=await function(e=".json"){return new Promise(t=>{const n=document.createElement("input");n.type="file",n.accept=e,n.style.display="none",n.addEventListener("change",()=>{n.files&&n.files[0]&&t(n.files[0]),document.body.removeChild(n)}),document.body.appendChild(n),n.click()})}(),t=await function(e){return new Promise((t,n)=>{if(!e.name.endsWith(".json"))return void n(new Error("Выберите файл с расширением .json"));const a=new FileReader;a.onload=e=>{try{const n=JSON.parse(e.target.result);t(n)}catch(e){n(new Error("Ошибка парсинга JSON: "+e.message))}},a.onerror=()=>{n(new Error("Ошибка чтения файла"))},a.readAsText(e)})}(e);(0,a.reactive)({actions:{},assets:{},elements:{},slides:{},modules:{}}),await s.A.addItems("actions",t.actions),await s.A.addItems("assets",t.assets),await s.A.addItems("models",t.models),await s.A.addItems("slides",t.slides),await s.A.addItems("modules",t.modules),await s.A.addItems("project",t.project);const n=new URL(window.location.href);return window.location.href=n.toString(),t}catch(e){throw console.error("Ошибка:",e.message),e}},play:async function(e="data"){const t=await s.A.exportToJson(N.uid);console.log(t),t.project={ui:{slides:!0,fullscreen:!0}};let n=`../player?src=${e}`;"db"===e&&(n+=`&db=${N.uid}`);const a=window.open(n,"Player");if(a){if("data"===e){const e=async(n=0)=>{try{if(a.closed)return void console.error("Окно плеера было закрыто");a.postMessage({type:"INIT_DATA",payload:t},window.location.origin)}catch(t){console.error("Ошибка при отправке данных:",t),n<5&&setTimeout(()=>e(n+1),500*(n+1))}};setTimeout(e,3e3)}}else console.error("Не удалось открыть окно. Возможно, браузер заблокировал pop-up.")},children:[],on:T.on.bind(T),off:T.off.bind(T),options:{camera:{}}});P.On("init",()=>{window.vue.component("Importer",$.A),window.vue.component("ElementAdd",C.A),P.slides.on("change",e=>{R(N.children,e,[])}),P.slides.on("remove",e=>{const t=[];R(N.children,e,t);for(let n=0;n<t.length;n++)delete t[n].states[e]}),P.menu.addMenu("app",{path:"app.list.project",icon:"",text:"Project",link:"#",children:[{path:"app.list.project.create",icon:"file-empty",text:"Create",handler:async()=>{P.projects.create()}},{path:"app.list.project.open",icon:"menu",text:"Open",tooltip:"Open project",handler:()=>{P.projects.open()}},{path:"app.list.project.export",icon:"download",text:"Export",tooltip:"Export project",handler:()=>{P.project.exportToJson()}},{path:"app.list.project.import",icon:"upload",text:"Import",link:"#",tooltip:"Import project",handler:()=>{P.project.importProject()}},{path:"app.list.project.remove",icon:"bin",text:"Delete",handler:()=>{P.projects.remove()}}]})});const H=N,U=o.default||o,B=new S.A;async function V(e){const t=e||G.actived,n={actions:t.actions,name:t.name,index:t.index,camera:t.camera,uid:t.uid,props:t.props,background:t.background,environment:t.environment},a=JSON.parse((0,M.As)(n));try{await s.A.upsertItemProperties("slides",n.uid,a)}catch(e){console.warn(e)}}function J(e){const t=G.actived;G.actived="number"==typeof e?G.children[e]:G.children.find(t=>t.uid===e),G.actived&&(B.emit("change",G.actived.uid),async function(e,t){let n=[],a=H.findStates(e.uid);t&&(n=H.findStates(t.uid),await async function(e,t,n){const a=[],s=[];for(let e=0;e<t.length;e++){const o=t[e];n.findIndex(e=>e.uid===o.uid)>=0?a.push(o):s.push(o)}const o=[...s,...a];await Promise.all([U.engine.ActionsManager.Execute(o,"slide.out"),U.engine.ActionsManager.Run(e.actions,e,"slide.out")]),await U.engine.ActionsManager.Execute(s,"disable.on");for(let e=0;e<s.length;e++)_(s[e])}(t,n,a)),await async function(e,t,n){const a=[],s=[];for(let e=0;e<t.length;e++){const o=t[e];n.findIndex(e=>e.uid===o.uid)>=0?s.push(o):a.push(o)}console.log("Slide In");try{if(e.camera?.path&&e.camera?.path!==U.engine.getManager().Camera?.path){const t=e.camera.path.split("."),n=H.find(t);U.engine.getManager().SetCamera(n),n.updateProjectionMatrix()}console.log(e.background),e.background&&(e.background.isAsset?U.engine.getManager().Scene.background=e.background.resource:U.engine.getManager().Scene.background=e.background)}catch(e){console.warn(e.message)}const o=[...a,...s];await Promise.all([U.engine.ActionsManager.Execute(o.map(t=>({...t.states[e.uid],model:t})),"slide.in.before"),U.engine.ActionsManager.Run(e.actions,e,"slide.in.before")]),await U.engine.ActionsManager.Execute(a,"enable.on"),await Promise.all([U.engine.ActionsManager.Execute(o,"slide.in"),U.engine.ActionsManager.Run(e.actions,e,"slide.in")]);const i=[];for(let t=0;t<o.length;t++)i.push(q(o[t],e.uid));await Promise.all(i),await Promise.all([U.engine.ActionsManager.Execute(o,"slide.in.after"),U.engine.ActionsManager.Run(e.actions,e,"slide.in.after")])}(e,a,n)}(G.actived,t))}async function q(e,t){const{position:n,rotation:a,scale:s,actions:o=[],properties:i={},visible:l=!1,...c}=e.states[t];n&&e.position.copy(n),a&&e.rotation.setFromVector3(a,"XYZ"),s&&e.scale.copy(s);const r=Object.keys(c).map(async t=>{const n=t.split("."),a=c[t];let s=n[0],o=e;try{for(let e=0;e<n.length-1;e++)o=o[n[e]],s=n[e+1];return o[s]=await U.engine.getFactory().CreateElement(a),{success:!0,key:t}}catch(e){return console.warn(e),{success:!1,key:t,error:e}}});await Promise.all(r),e.visible=l,e.state=e.states[t]||{model:e};const d=U.engine.Factory.TreeTypes.find(t=>t.type===e.type);d?.onchange&&d.onchange(e)}function _(e,t){e.visible=!1}const G=(0,a.reactive)({load:async function(e){G.children.length=0;const t=e.sort((e,t)=>e.index-t.index);for(let e=0;e<t.length;e++){const n={name:"",camera:{path:null},actions:[],index:e,props:{},background:null,environment:{},...t[e]};G.children.push(n)}H.on("remove",e=>{const t=e.join(".");U.engine.Project.Camera?.path===t&&U.engine.Project.ResetCamera();for(let e=0;e<G.children.length;e++){const n=G.children[e];n.camera?.path===t&&(n.camera.path=null,V(n))}})},add:async function(e){const t=`sl${Date.now()}`,n={index:G.children.length,name:t,uid:t,background:null,environment:{},camera:{path:null},props:{},actions:[],...e};return G.children.push(n),await V(n),B.emit("add",n.uid),n},remove:async function(e){console.log("remove");let t=e||G.actived.uid;const n=G.children.findIndex(e=>e.uid===t);if(n>=0){G.actived.uid===t&&(0===n?await J(1):await J(n-1)),G.children.splice(n,1),await s.A.deleteItem("slides",t);const e=G.children.find(e=>e.next===t);e&&G.children.length>=n&&(e.next=G.children[n].uid),B.emit("remove",t)}},save:V,actived:null,children:[],goto:J,next(){const e=G.children.findIndex(e=>e.uid===G.actived.uid);e>=G.children.length-1||G.goto(e+1)},back(){const e=G.children.findIndex(e=>e.uid===G.actived.uid);0!==e&&G.goto(e-1)},on:B.on.bind(B),off:B.off.bind(B)}),z=G;let W;const Y={},Z=[],Q=[],X=(0,a.reactive)({ready:!1,getAssetsManager:()=>Y.AssetsManager,getSlidesManager:()=>Y.SlidesManager,getFactory:()=>Y.Factory,getManager:e=>Y[e]||W,async load(){console.log("Engine load");const{AssetsManager:e,CssManager:t,MouseManager:n,ActionsManager:a,Project:s,Factory:o}=k.getMod("engine");Y.AssetsManager=e,Y.SlidesManager=z,Y.Factory=o,Y.MouseManager=n,Y.ActionsManager=a,Y.CssManager=t,Y.Project=W=s,console.log("Engine load complete"),console.log(Q);const i=[];for(let e=0;e<Q.length;e++)i.push(Q[e](W));Q.length=0,await Promise.all(i)},async start(){X.ready=!0;const e=[];for(let t=0;t<Z.length;t++)e.push(Z[t](W));return Z.length=0,await Promise.all(e),console.log(W),W},onload(e){Z.push(e)},onInit(e){Q.push(e)}}),K=new Proxy(X,{get:(e,t)=>t in e?e[t]:Y[t]});var ee=n(540);const te=o.default||o,ne=[];let ae;function se(e){const t=(0,a.reactive)({selected:null,list:ie.list}),n={label:"Close",class:"secondary",handler:async()=>{t.selected=null,g.close(),e&&e()}},o=(0,a.reactive)({label:"Create",class:"primary",handler:async()=>{const e=ie.library[0];t.selected={type:e.component,group:e.type,targets:["*"],description:e.description,...e.template}}}),i=(0,a.reactive)({label:"Cancel",class:"additional",hidden:(0,a.computed)(()=>!t.selected||t.selected.uid),handler:async()=>{t.selected=null}}),l={label:"Save",class:"primary",hidden:(0,a.computed)(()=>!t.selected||t.selected.uid),handler:async()=>{const e=ie.library.find(e=>e.component===t.selected.type);if(e.check){if(!await e.check(t.selected))return void u.add({message:"Неверные параметры"})}else Object.keys(e.template).forEach(n=>{n in t.selected||(t.selected[n]=JSON.parse(JSON.stringify(e.template[n])))});t.selected.uid=`${t.selected.type}${Date.now()}`,ie.list.push(t.selected),await oe(t.selected),await ae.Add(t.selected)}},c={label:"Delete",class:"additional",hidden:(0,a.computed)(()=>!t.selected||!t.selected.uid),handler:async()=>{const e=ie.list.findIndex(e=>e===t.selected);e>=0&&ie.list.splice(e,1),async function(e){await s.A.deleteItem("actions",e)}(t.selected.uid),t.selected=null}},r={label:"Select",class:"additional",hidden:(0,a.computed)(()=>!t.selected||!t.selected.uid||!e),handler:async()=>{e(t.selected),g.close()}},d=(0,a.reactive)([o,l,r,c,i,n]);g.open({header:{value:e?"Select an action":"Action Library",handler:()=>{g.close()}},content:{component:"ItemsLib",props:t,events:{selected:e=>{e.uid&&(t.selected=e)}},slots:{item:{component:"ActionItem"},edit:{component:"ActionEdit",props:{selected:t.selected},events:{"change:type":e=>{const n=ie.library.find(t=>t.component===e);t.selected={...n.template,type:n.component,group:n.type,description:n.description}},edit:(e,n)=>{const a=e.split(".");let s=t.selected;for(let e=0;e<a.length-1;e++){const t=a[e];s[t]||(s[t]={}),s=s[t]}s[a[a.length-1]]=n,oe(t.selected)}}}}},footer:{buttons:d}})}async function oe(e){e.uid&&await s.A.upsertItemProperties("actions",e.uid,JSON.parse(JSON.stringify({id:e.uid,...e})))}const ie=(0,a.reactive)({init:async function(e){0===e.length&&e.push(...ne),ae=K.ActionsManager;const t=(0,a.reactive)(e);await ae.Init(t),ie.list.push(...ae.Library)},register:function(e){ie.library.push(e)},save:oe,showLib:se,exportData:async function(){return await s.A.getAllItems("actions")},removeFrom:async function(e,{hook:t,uid:n}){},hooks:["enable.on","slide.in.before","slide.in","slide.in.after","slide.out.before","slide.out","slide.out.after","disable.on","mouse.in","mouse.click","mouse.out"],list:[],library:[],get groups(){return ie.library.reduce((e,t)=>(e.includes(t.type)||e.push(t.type),e),[])},get values(){return Object.values(ie.list)}});te.On("init",()=>{te.menu.hierarhy.list.push({icon:"history",tooltip:"Action Library",handler:se}),window.vue.component("ActionsList",ee.A),te.inspector.addToModels(["Object3D"],[{label:"Models actions",readonly:!0,content:{prop:"actions",component:"ActionsList",state:!1}},{label:"States actions",readonly:!0,content:{prop:"actions",component:"ActionsList",state:!0}}])});const le=ie;var ce=n(1187),re=n(3334),de=n(1351),pe=n(1715),ue=n(5385);const me=o.default||o,he={asset:[{label:"URL",content:{prop:"url",component:"LabelEdit",onupdate(e,t,n,a){console.log(e),fe.Update(e,t,n)}}},{label:"Clone",head:{component:"BoolEdit",prop:"clone",async onupdate(e,t,n,a){await fe.Update(e,t,n)}}}],model:[{label:"Shadow",content:{component:"ShadowEdit",prop:"shadow",onupdate:async(e,t,n,a)=>{await fe.Update(e,t,n)}}},{label:"Environment map",inspectorOnly:!0,content:{component:"AssetSelector",prop:"envMap",type:"hdr",onupdate:async(e,t,n,a)=>{await fe.Update(e,t,n)}}}],image:[{label:"Image",content:{inspectorOnly:!0,prop:"img",component:"ImageView",props:{acceptedTypes:"image/*",selectable:!1},async onupdate(e,t,n){console.log(t),e.img=t}}}],hdr:[]},ge={model:()=>!0},we={model:"codepen",image:"image",hdr:"loop2"};let fe;function ye(e=[]){return console.log(e),xe.list.filter(t=>0===e.length||e.includes(t.type)).map(e=>({...e.data}))}async function ve(e){e.uid=`asset_${Date.now()}`;const t=fe.Add(e);await t.load(),xe.list.push(t),console.log(xe.list),await s.A.addItem("assets",JSON.parse(JSON.stringify({id:t.uid,...t.data}))),console.log(t)}async function be(e){console.log("Save asset");try{if(!e.uid)return;await s.A.updateItem("assets",JSON.parse(JSON.stringify({id:e.uid,...e.data})))}catch(e){console.error("Error saving asset:",e),me.toasts.add({message:"Error saving asset"})}}async function Ae(e){switch(e.type){case"model":const t=K.getFactory().CheckUseAsset(e.uid);if(t)return me.toasts.add({message:`Cannot delete, asset is used in ${t} models`}),!1;break;case"hdr":if(xe.list.find(t=>t.data.envMap===e.uid))return me.toasts.add({message:"Cannot delete, asset in use"}),!1}const t=xe.list.findIndex(t=>t.uid===e.uid);return t>=0&&(xe.list.splice(t,1),fe.Remove(e.uid),await s.A.deleteItem("assets",e.uid)),!0}function je(e,t=!0){return new Promise(n=>{const s=(0,a.reactive)({selected:null,list:ye(e),icons:we}),o=(0,a.reactive)([{label:"Select",class:"primary",hidden:(0,a.computed)(()=>!t||!s.selected),handler:async()=>{g.close(),n(s.selected)}},{label:"Remove",class:"additional",hidden:(0,a.computed)(()=>!s.selected?.uid),handler:async()=>{Ae(s.selected)&&(s.selected=null,s.list=ye(e))}},{label:"Save",class:"primary",hidden:(0,a.computed)(()=>!s.selected||s.selected.uid||s.busy),handler:async()=>{if(!ge[s.selected.type]||await ge[s.selected.type](s.selected)){me.toasts.add({message:"Start load asset"});try{s.selected=await ve(s.selected)}catch(e){return me.toasts.add({message:e.message}),void(s.selected.uid=null)}s.list=ye(e),me.toasts.add({message:"Asset saved"})}}},{label:"Create",class:"secondary",handler:async()=>{s.selected={name:"",type:xe.types[0],url:""}}},{label:"Close",class:"additional",handler:async()=>{g.close(),n()}}]);g.open({header:{value:t?"Select asset":"Project assets",handler:()=>{g.close()}},content:{component:"ItemsLib",props:s,events:{selected:e=>{s.selected=e}},slots:{edit:{component:"AssetEdit",props:{selected:s.selected},events:{edit:(e,t)=>{s.selected[e]=t,s.selected.uid&&be({data:s.selected})}}}}},footer:{buttons:o}})})}const xe=(0,a.reactive)({init:async function(e,t){console.log("Init assets"),fe=K.getManager("AssetsManager"),await fe.Init(e,t);const n=Array.from(fe.Assets.values());n.forEach(e=>{e.on("update",()=>{be(e)})}),xe.list.push(...n),console.log(xe.list)},create:ve,update:async function(e,t,n){await fe.Update(e,t,n)},save:be,selectAsset:je,editAsset:function(e){const t=(0,a.reactive)({current:e}),n=(0,a.reactive)([{label:"Save",class:"secondary",handler:async()=>{e.uid?await be({data:e}):await ve(e),g.close()}},{label:"Cancel",class:"primary",handler:async()=>{g.close()}}]);g.open({header:{value:"Select asset",handler:()=>{g.close()}},content:{component:"AssetEdit",props:t,events:{edit:(t,n)=>{e[t]=n}}},footer:{buttons:n}})},remove:Ae,setAsset:function(e,t){e.assets||(e.assets=[]),e.assets.push({uid:t.uid}),me.engine.getFactory().AddAsset(e.uid,t)},types:["model","hdr","image"],list:[],exportData:async()=>await s.A.getAllItems("assets"),get inspector(){return he},getInspector:e=>he[e]||[],async getDefault(){const e=await fetch("https://s3.eu-west-1.amazonaws.com/3dbuilder.reneos.com/base/assets.json"),t=await e.json();return await s.A.upsertMany("assets",t,"uid"),t}});me.On("init",()=>{me.menu.hierarhy.list.push({icon:"cube",tooltip:"Assets library",handler:()=>{je([],!1)}}),window.vue.component("AssetView",ue.A),window.vue.component("AssetItem",pe.A),window.vue.component("AssetSelector",ce.A),window.vue.component("AssetEdit",de.A),window.vue.component("AssetImage",re.A),Object.keys(he).forEach(e=>{me.inspector.addToModels([e],he[e])})});const Ee=xe;n(1109);const Ie=o.default||o;let ke;const Se=(0,a.reactive)({init:async function(){console.log("app init"),ke=new s.A("slider",["data","templates"]),await ke.openDatabase("slider")},save:async function(){const e={uid:"currproject",id:"currproject",actions:le.exportData(),assets:Ee.exportData(),elements:Elements.exportData()};return await s.A.updateItem("projects",e),e.uid},saveData:function(e,t,n){return ke.upsertItemProperties(e,t,n)},readData:function(e,t){return ke.getItem(e,t)},GetDB:function(){return ke},draggedNode:null,ready:!1,cameras:[],get types(){return Ie.engine.getFactory().GetTypes()},user:{registered:!1,name:"Guest",options:{manual:"false"!==localStorage.getItem("options.manual")}},setPassword:async function(e){try{const{error:t,me:n}=await gqlc.Set({me:[{password:[{$args:{value:e}}]}]})}catch(e){Ie.toasts.add({message:"Error on change password"})}},async logout(){const e=await fetch("/auth/logout"),t=await e.json();console.log(t),window.location.reload()}});Ie.On("init",()=>{Ie.menu.addMenu("app",{path:"app.list.help",icon:"question",text:"Help",link:"#",children:[{path:"app.list.help.channel",icon:"bullhorn",text:"Channel",handler:async()=>{window.open("https://t.me/webslider","_blank")}},{path:"app.list.help.chat",icon:"bubbles",text:"Chat",tooltip:"Discuss",handler:()=>{window.open("https://t.me/chatslider","_blank")}}]})});const Me=Se;var Ce=n(3822);const $e=[],Pe=[],Te={},Oe={Object3D:[{label:"Transform",readonly:!0,content:{component:"TransformEdit",state:!0}},{label:"Visibility",data:{},head:{prop:"visible",component:"BoolEdit",state:!0}}],Mesh:[{label:"Shadow",content:{component:"ShadowEdit",prop:"shadow",state:!1,onupdate:async(e,t,n,a)=>{e.castShadow=n.cast||!1,e.receiveShadow=n.receive||!1}}}],DirectionalLight:[{label:"Color",head:{component:"EditColor",prop:"color",state:!0,onupdate(e,t,n,a){}}},{label:"Intensity",head:{component:"Float",prop:"intensity",step:.1,min:0}},{label:"Shadow",data:{},head:{prop:"castShadow",component:"BoolEdit"}}],AmbientLight:[{label:"Color",head:{component:"EditColor",prop:"color",state:!0,onupdate(e,t,n,a){e[t].copy(n);const s=e.states[z.actived.uid];s.properties||(s.properties={}),s.properties[t]={type:"Color",args:["#"+n.getHexString()]},H.save(e)}}},{label:"Intensity",head:{component:"Float",prop:"intensity",step:.1,min:0,state:!0}}],Mesh:[{label:"Shadow",content:{component:"ShadowEdit",prop:"shadow",state:!1,onupdate:async(e,t,n,a)=>{e.castShadow=n.cast||!1,e.receiveShadow=n.receive||!1}}}],label2d:[{label:"Размеры",content:{component:"DimensionsEdit",onupdate(e,t,n,a){e[t]=n,H.save(e)},state:!0}},{label:"Text",content:{prop:"text",component:"TextEdit",state:!0}},{label:"Цвет",head:{component:"TextColorEdit",prop:"color",state:!0}},{label:"Размер шрифта",head:{component:"FontSize",prop:"size",state:!0}}],videoplane:[{label:"URL",content:{component:"LabelEdit",prop:"url",state:!1,onupdate(e,t,n,a){e.properties||(e.properties={}),e.properties.url=n}},head:{component:"Label",prop:"url"}}],Camera:[{label:"Far",head:{prop:"far",component:"Float",onupdate(e,t,n,a){e[t]=e.states[z.actived.uid][t]=n,e.updateProjectionMatrix(),Ce.A.CameraHelper.update(),H.save(e)}}},{label:"Near",head:{prop:"near",component:"Float",state:!0,onupdate(e,t,n,a,s){e[t]=e.states[z.actived.uid][t]=n,e.updateProjectionMatrix(),Ce.A.CameraHelper.update(),H.save(e)}}}],PerspectiveCamera:[{label:"FOV",head:{prop:"fov",component:"Float",onupdate(e,t,n){e[t]=e.states[z.actived.uid][t]=n,e.updateProjectionMatrix(),Ce.A.CameraHelper.update(),H.save(e)}}}],OrthographicCamera:[{label:"Left",head:{prop:"left",component:"Float",onupdate(e,t,n){e[t]=e.states[z.actived.uid][t]=n,e.updateProjectionMatrix(),Ce.A.CameraHelper.update(),H.save(e)}}},{label:"Top",head:{prop:"top",component:"Float",onupdate(e,t,n){e[t]=e.states[z.actived.uid][t]=n,e.updateProjectionMatrix(),Ce.A.CameraHelper.update(),H.save(e)}}},{label:"Right",head:{prop:"right",component:"Float",onupdate(e,t,n){e[t]=e.states[z.actived.uid][t]=n,e.updateProjectionMatrix(),Ce.A.CameraHelper.update(),H.save(e)}}},{label:"Bottom",head:{prop:"bottom",component:"Float",onupdate(e,t,n){e[t]=e.states[z.actived.uid][t]=n,e.updateProjectionMatrix(),Ce.A.CameraHelper.update(),H.save(e)}}}]},De={},Le=(0,a.reactive)({ready:!1,cameras:[],blocksFor:(e=["Object3D"])=>e.flatMap(e=>Oe[e]||[]),handlers:De,setHandler(e,t){De[e]=t},getHandlers:()=>De,addBlocks(e,t){Object.keys(_blocks).forEach(n=>{t(n)&&_blocks[n].push(...e)})},addToAssets(e,t){for(let n=0;n<e.length;n++){const a=e[n];"*"!==a?(Te[a]||(Te[a]=[]),Te[a].push(...t)):Pe.push(...t)}},addToModels(e,t){for(let n=0;n<e.length;n++){const a=e[n];"*"!==a?(Oe[a]||(Oe[a]=[]),Oe[a].push(...t)):$e.push(...t)}}});var Fe=n(5216);const Re=o.default||o;function Ne(e){Fe.A.Transformer.setMode(e)}function He(e,t){e.children??=[],(t.children||[]).forEach(t=>{let n=e.children.find(e=>e.path===t.path);n?He(n,t):e.children.push(t)})}const Ue=(0,a.reactive)({addMenu:function(e,t){const n=Ue[e].list.find(e=>e.path===t.path);n?He(n,t):Ue[e].list.push(t)},app:{list:[{path:"app.list.project",icon:"",text:"Project",link:"#"},{path:"app.list.libraries",icon:"",text:"Libraries",link:"#"},{path:"app.list.help",icon:"question",text:"Help",link:"#"}]},top:{list:[{icon:"sphere",hint:"Local/global space",handler:function(){Fe.A.Transformer.setSpace("local"===Fe.A.Transformer.space?"world":"local")}},{icon:"move",hint:"Moving",handler:Ne.bind(null,"translate")},{icon:"loop2",hint:"Rotation",handler:Ne.bind(null,"rotate")},{icon:"enlarge2",hint:"Scale",handler:Ne.bind(null,"scale")},{icon:"target",hint:"Zoom in on selected",handler:Fe.A.FocusToSelect},{icon:"cross",hint:"Deselect",handler:()=>{Re.selection.select(null)}}],options:{size:"1.5em"}},hierarhy:{list:[{icon:"play3",tooltip:"Run",handler:()=>{Re.project.play()}}],options:{}},tools:{list:[]}}),Be=Ue,Ve=o.default||o,Je=[];let qe="";function _e(e={}){return new Promise(t=>{const n=(0,a.reactive)({title:"Creating a project",text:"Please enter the project name *",answer:"",template:""}),o=(0,a.reactive)({label:"Create",class:"primary",disabled:n.answer.length<1,callback:async n=>{const a=`project${Date.now()}`;await s.A.Create(a,{project:[{uid:"info",id:a,name:n,created:Date.now(),last:Date.now()}],assets:e.assets||[],actions:e.actions||[],models:e.models||[],slides:e.slides||[],modules:e.modules||[]}),t(a)}});g.queryText(n,[o],e=>{n.answer=e,o.disabled=n.answer.length<1})})}async function Ge(e){const t=new URL(window.location.href);t.searchParams.set("src","db"),t.searchParams.set("db",e),window.location.href=t.toString()}async function ze(){const e=await s.A.GetFromAll("project","info");return We.list.length=0,We.list.push(...e.filter(e=>void 0!==e).map(e=>(e.uid=e.id,e))),We.list}const We=(0,a.reactive)({init:async function(e){console.log(e),qe=e},create:async function(){const e=await _e();e&&Ge(e)},createProject:_e,open:async function(){const e=await ze(),t=(0,a.reactive)({list:e.filter(e=>e.uid!==Ve.project.uid)});g.open({header:{value:"Open project",handler:g.close},content:{component:"ItemsLib",props:t,events:{selected:e=>{Ge(e.id),g.close()}},slots:{item:{component:"ProjectItem"}}},footer:{buttons:[{label:"Close",class:"primary",handler:g.close}]}})},goto:Ge,remove:async function(e){console.log(e);const t=e||qe;console.log(t),await s.A.DeleteDatabase(t),console.log("Removed");const n=We.list.findIndex(e=>e.uid===t);n>=0&&We.list.splice(n,1),window.location.href=new URL(`${window.location.origin}${window.location.pathname}`).toString()},getList:ze,loadExample:async function(e){const t=(await Je[e]()).default,n=`project${e}`;await s.A.Init(n,["project","assets","models","slides","actions","modules"],"uid"),await s.A.addItems("actions",t.actions),await s.A.addItems("assets",t.assets),await s.A.addItems("models",t.models),await s.A.addItems("modules",t.modules),await s.A.addItems("project",t.project),await s.A.addItems("slides",t.slides);const a=new URL(window.location.href);a.searchParams.set("project",n),window.location.href=a.toString()},play:async function(e="data"){const t=await s.A.exportToJson(qe);console.log(t),t.project={ui:{slides:!0,fullscreen:!0}};let n=`../player?target=${e}`;"src"===e&&(n+=`&src=${qe}`);const a=window.open(n,"Player");if(a){if("data"===e){const e=async(n=0)=>{try{if(a.closed)return void console.error("Окно плеера было закрыто");a.postMessage({type:"INIT_DATA",payload:t},window.location.origin),console.log("Данные отправлены")}catch(t){console.error("Ошибка при отправке данных:",t),n<5&&setTimeout(()=>e(n+1),500*(n+1))}};setTimeout(e,1e3)}}else console.error("Не удалось открыть окно. Возможно, браузер заблокировал pop-up.")},importProject:async function(){try{const e=await function(e=".json"){return new Promise(t=>{const n=document.createElement("input");n.type="file",n.accept=e,n.style.display="none",n.addEventListener("change",()=>{n.files&&n.files[0]&&t(n.files[0]),document.body.removeChild(n)}),document.body.appendChild(n),n.click()})}(),t=await function(e){return new Promise((t,n)=>{if(!e.name.endsWith(".json"))return void n(new Error("Выберите файл с расширением .json"));const a=new FileReader;a.onload=e=>{try{const n=JSON.parse(e.target.result);t(n)}catch(e){n(new Error("Ошибка парсинга JSON: "+e.message))}},a.onerror=()=>{n(new Error("Ошибка чтения файла"))},a.readAsText(e)})}(e);let n=!1;const o=(0,a.reactive)({actions:{},assets:{},elements:{},slides:{},modules:{}});return g.open({header:{value:"Импорт",handler:()=>{g.close()}},content:{component:"Importer",props:{project:t},events:{options:e=>{n=e.merge},changelist:e=>{Object.keys(e).forEach(t=>{o[t]=e[t]})}}},footer:{buttons:[{label:"Импорт",class:"secondary",handler:async()=>{const e=`project${Date.now()}`;await s.A.Init(e,["project","assets","elements","slides","actions","modules"],"uid"),await s.A.addItems("actions",t.actions),await s.A.addItems("assets",t.assets),await s.A.addItems("elements",t.elements),await s.A.addItems("slides",t.slides),await s.A.addItems("modules",t.modules),await s.A.addItems("project",t.project);const n=new URL(window.location.href);n.searchParams.set("project",e),window.location.href=n.toString(),g.close()}},{label:"Отмена",class:"primary",handler:async()=>{g.close()}}]}}),t}catch(e){throw console.error("Ошибка:",e.message),e}},load:async function(){},player:null,list:[]}),Ye=We,Ze=(0,a.reactive)({uid:"",selected:null,slide:{},select(e){if(e?.getTypes&&(console.log(e),console.log(e.getTypes())),Ze.selected=e,!Ze.selected)return Fe.A.Select(null),void(Ze.uid=null);Ze.uid=Ze.selected.uid,e.isObject3D&&Fe.A.Select(Ze.selected)}}),Qe=Ze,Xe=o.default||o,Ke=new class{#e=null;get handle(){return this.#e}async requestAccess(){this.#e=await window.showDirectoryPicker({mode:"readwrite"}),await s.A.upsertItemProperties("project","storage",{handle:this.#e})}updateHandle(e){this.#e=e}async writeFile(e,t){this.#t();const n=await this.#e.getFileHandle(e,{create:!0}),a=await n.createWritable();await a.write(t),await a.close()}async readFile(e){this.#t();const t=await this.#e.getFileHandle(e),n=await t.getFile();return await n.text()}async listFiles(){this.#t();const e=[];for await(const[t,n]of this.#e.entries())"file"===n.kind&&e.push(t);return e}#t(){if(!this.#e)throw new Error("Folder access not granted")}};let et;const tt=(0,a.reactive)({getHandle:()=>Ke.handle,init:async function(){const e=await s.A.getItem("project","storage");if(e)Ke.updateHandle(e.handle);else{const e=(0,a.reactive)({title:"Укажите папку для хранения моделей",text:"",answer:"",template:""}),t=(0,a.reactive)({label:"ОК",class:"primary",callback:async e=>{await Ke.requestAccess(),et&&et()}});Xe.modal.confirmReq(e,[t])}},requestAccess:Ke.requestAccess.bind(Ke),writeFile:Ke.writeFile.bind(Ke),readFile:Ke.readFile.bind(Ke),listFiles:Ke.listFiles.bind(Ke),access:()=>new Promise(e=>{et=e})});var nt=n(6347),at=n(3042);const st=o.default||o,ot=[];const it=(0,a.reactive)({init:async function(){},preview:async function(e,t,n=0,a=100){},load:async function(e){}});st.On("init",()=>{window.vue.component("TemplateItem",nt.A),window.vue.component("TemplateView",at.A),st.menu.addMenu("app",{path:"app.list.libraries",icon:"",text:"Libraries",link:"#",children:[{path:"app.list.libraries.templates",icon:"codepen",text:"Templates",handler:async()=>{!async function(){await async function(){const[e,t]=await Promise.all([fetch("https://s3.eu-west-1.amazonaws.com/3dbuilder.reneos.com/templates/index.json",{headers:{"Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache",Expires:"0"},cache:"no-store"}).then(e=>e.json()),st.app.GetDB().getAllItems("templates")]);ot.length=0,ot.push(...e,...t)}();const e=(0,a.reactive)({selected:null,list:ot}),t={label:"Close",class:"secondary",handler:async()=>{e.selected=null,st.modal.close()}},n={label:"Create",class:"additional",handler:async()=>{const t=await fetch(e.selected.url,{headers:{"Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache",Expires:"0"},cache:"no-store"}),n=await t.json(),a=await st.projects.createProject(n);st.projects.goto(a)}},s=(0,a.reactive)([n,t]);st.modal.open({header:{value:"",handler:()=>{st.modal.close()}},content:{component:"ItemsLib",props:e,events:{selected:async t=>{e.selected=t},open:async()=>{}},slots:{item:{component:"TemplateItem"},edit:{component:"TemplateView",props:{data:e.selected},events:{"change:type":t=>{const n=it.library.find(e=>e.component===t);e.selected={...n.template,type:n.component,group:n.type,description:n.description}},edit:(t,n)=>{const a=t.split(".");let s=e.selected;for(let e=0;e<a.length-1;e++){const t=a[e];s[t]||(s[t]={}),s=s[t]}s[a[a.length-1]]=n,async function(){}(e.selected)}}}}},footer:{buttons:s}})}()}}]})});const lt=it,ct=o.default||o,rt={},dt=(0,a.reactive)({elements:[],onElementMount(e){rt[e.path]&&(rt[e.path](e.element),delete rt[e.path])},addElement(e,t){return console.log(e),new Promise((n,s)=>{if(!window.vue._context.components[e])return ct.toasts.add({message:`Component "${e}" is not registered`}),void s(new Error(`Component "${e}" is not registered`));const o=(0,a.reactive)(t.data),i={component:e,data:o,events:t.events};this.elements.push(i),rt[t.data.path]=e=>{i.element=e,n({data:o,element:e})}})},removeElement(e){const t=this.elements.findIndex(t=>t.element===e);t>=0&&this.elements.splice(t,1)}});ct.On("init",()=>{dt.elements.length=0});const pt=dt},6938:(e,t,n)=>{e.exports=n.p+"assets/3d592ccd944e1f3ef7b0.png"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
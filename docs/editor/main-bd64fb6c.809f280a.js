"use strict";(self.webpackChunk_reneos_slider_editor=self.webpackChunk_reneos_slider_editor||[]).push([[624],{320:(e,t,o)=>{o.d(t,{A:()=>c});var l=o(2015);const a={class:"block_container"},n={key:0,class:"editrow"},s={class:"label"},i={name:"LabelEditor",props:{modelValue:{type:String,default:""},label:{type:String,default:""},tooltip:{type:String,default:""}},data:()=>({editMode:!1,val:""}),watch:{modelValue(){this.editMode=!1}},methods:{startEdit(){this.val=this.modelValue,this.editMode=!0,this.$nextTick(()=>{this.$refs.editInput.focus()})},complete(e){e&&e.preventDefault(),this.$emit("update:modelValue",this.val),this.editMode=!1},endEdit(){return this.editMode?(this.editMode=!1,this.val):this.modelValue}},mounted(){}},c=(0,o(6262).A)(i,[["render",function(e,t,o,i,c,r){const d=(0,l.resolveComponent)("icon"),p=(0,l.resolveDirective)("tooltip");return(0,l.openBlock)(),(0,l.createElementBlock)("div",null,[(0,l.createElementVNode)("div",a,[e.editMode?((0,l.openBlock)(),(0,l.createElementBlock)("div",n,[(0,l.withDirectives)((0,l.createElementVNode)("input",{ref:"editInput",class:"editinput","onUpdate:modelValue":t[0]||(t[0]=t=>e.val=t),onKeyup:t[1]||(t[1]=(0,l.withKeys)((...e)=>r.complete&&r.complete(...e),["enter"]))},null,544),[[l.vModelText,e.val]]),(0,l.createVNode)(d,{class:"okicon",value:"checkmark",size:"1em",onClick:r.complete},null,8,["onClick"])])):(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("div",{class:"editrow",onClick:t[2]||(t[2]=(...e)=>r.startEdit&&r.startEdit(...e)),key:"tooltip-"+o.modelValue},[(0,l.createElementVNode)("span",s,(0,l.toDisplayString)(o.modelValue),1),(0,l.createVNode)(d,{value:"pencil",size:"1em"})])),[[p,o.tooltip||o.modelValue]])])])}],["__scopeId","data-v-7c4f752c"]])},382:(e,t,o)=>{o.d(t,{A:()=>g});var l=o(2015);const a={class:"scenetools"};var n=o(7624);const s={class:"camera-selector"};var i=o(4875);const c={name:"SceneTools",data:()=>({}),computed:{selectedCamera:{get(){return this.$app.slides.actived?.camera?.path||null},set(e){this.$app.slides.actived.camera.path=e,this.$app.slides.save()}},slide(){return this.$app.slides.actived},cameras(){return this.$app.project.findObjectsByType(i.Camera)||[]}},mounted(){},methods:{saveSlide(){this.$app.slides.save(this.slide)},onCameraChange(){console.log("change");try{if(this.slide.camera?.path&&this.slide.camera?.path!==this.$app.engine.Project.Camera?.path){const e=this.slide.camera.path.split("."),t=this.$app.project.find(e);this.$app.engine.Project.SetCamera(t),t.updateProjectionMatrix()}}catch(e){console.warn(e.message)}}}};var r=o(6262);const d=(0,r.A)(c,[["render",function(e,t,o,a,n,i){const c=(0,l.resolveComponent)("EditColor");return(0,l.openBlock)(),(0,l.createElementBlock)("div",s,[(0,l.createElementVNode)("div",null,[t[0]||(t[0]=(0,l.createElementVNode)("div",null," Background ",-1)),(0,l.createElementVNode)("div",null,[(0,l.createVNode)(c)])])])}],["__scopeId","data-v-167ce3c1"]]),p={class:"camera-selector"},m={key:0},u={key:0},v=["value"],h={key:1};var k=o(4001);const y={name:"CameraSelector",props:{slide:{type:Object}},data:()=>({}),computed:{bgColor:{get(){return this.slide.background.color},set(e){this.slide.background.value=e.getStyle(),this.slide.background.setValue("color",this.slide.background.value),this.$app.slides.save(),this.$app.engine.getManager().Scene.background=e}},bgHdr:{get(){return this.slide.background.hdr}},selectedCamera:{get(){return this.slide.camera?.path||null},set(e){this.slide.camera.path=e,this.$app.slides.save()}},cameras(){return this.$app.project.findObjectsByType(i.Camera)||[]}},mounted(){},methods:{save(){this.$app.slides.save(this.slide)},onBgChange(e){this.slide.background.setValue(e,this.slide.background[e]),this.$app.slides.save()},async onAssetChange(e){console.log(e.resource),this.slide.background.setValue("hdr",e.resource),this.slide.background.value=e.uid;const t=await this.$app.engine.getAssetsManager().FindAsset(e.uid);this.$app.engine.getManager().Scene.background=t.resource},saveSlide(){this.$app.slides.save(this.slide)},onCameraChange(){console.log("change");try{if(this.slide.camera?.path&&this.slide.camera?.path!==this.$app.engine.Project.Camera?.path){const e=this.slide.camera.path.split("."),t=this.$app.project.find(e);this.$app.engine.Project.SetCamera(t),t.updateProjectionMatrix()}}catch(e){console.warn(e.message)}}},components:{assethdr:k.A}},V=(0,r.A)(y,[["render",function(e,t,o,a,n,s){const i=(0,l.resolveComponent)("LabelEdit"),c=(0,l.resolveComponent)("ActionsList");return(0,l.openBlock)(),(0,l.createElementBlock)("div",p,[o.slide?((0,l.openBlock)(),(0,l.createElementBlock)("div",m,[(0,l.createElementVNode)("div",null,[t[3]||(t[3]=(0,l.createElementVNode)("div",null,"Name:",-1)),(0,l.createVNode)(i,{modelValue:o.slide.name,"onUpdate:modelValue":[t[0]||(t[0]=e=>o.slide.name=e),s.save]},null,8,["modelValue","onUpdate:modelValue"])]),s.cameras.length>0?((0,l.openBlock)(),(0,l.createElementBlock)("div",u,[t[5]||(t[5]=(0,l.createElementVNode)("label",null,"Camera:",-1)),(0,l.withDirectives)((0,l.createElementVNode)("select",{"onUpdate:modelValue":t[1]||(t[1]=e=>s.selectedCamera=e),onChange:t[2]||(t[2]=(...e)=>s.onCameraChange&&s.onCameraChange(...e))},[t[4]||(t[4]=(0,l.createElementVNode)("option",{value:null},"No",-1)),((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(s.cameras,e=>((0,l.openBlock)(),(0,l.createElementBlock)("option",{key:e.path,value:e.path}," ("+(0,l.toDisplayString)(e.type)+") "+(0,l.toDisplayString)(e.name||`Camera ${e.uid}`),9,v))),128))],544),[[l.vModelSelect,s.selectedCamera]])])):((0,l.openBlock)(),(0,l.createElementBlock)("div",h," There are no cameras available in the project. ")),(0,l.createElementVNode)("div",null,[t[6]||(t[6]=(0,l.createElementVNode)("div",null,"Slide Events:",-1)),(0,l.createVNode)(c,{"onUpdate:target":s.saveSlide,onSave:s.saveSlide,target:o.slide},null,8,["onUpdate:target","onSave","target"])]),(0,l.createCommentVNode)(' <div>\r\n                <div>Background</div>\r\n                <div>{{ slide.background.type }}\r\n                    <RadioButton v-model="slide.background.type" @change="onBgChange"\r\n                        :options="[{ value: \'color\', label: \'Color\' }, { value: \'hdr\', label: \'HDR\' }, { value: \'none\', label: \'No\' }]"\r\n                        name="array-group" />\r\n                </div>\r\n                <EditColor v-if="slide.background?.type === \'color\'" v-model="bgColor"></EditColor>\r\n                <assethdr v-if="slide.background?.type === \'hdr\'" v-model="bgHdr" @setasset="onAssetChange">\r\n                </assethdr>\r\n            </div> ')])):(0,l.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-2623b5e9"]]),f={data:()=>({asset:{uid:"hdrscene"},view:!0}),name:"SceneTools",computed:{slides(){return this.$app.slides.children},slide(){return this.$app.slides.actived}},components:{slideTools:V,InspectorPanel:n.A,scenetools:d},methods:{removeSlide(){this.$app.slides.remove()}}},g=(0,r.A)(f,[["render",function(e,t,o,n,s,i){const c=(0,l.resolveComponent)("slideTools"),r=(0,l.resolveComponent)("InspectorPanel");return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createVNode)(r,{label:"Slide Options"},(0,l.createSlots)({_:2},[i.slide?{name:"content",fn:(0,l.withCtx)(()=>[(0,l.createVNode)(c,{slide:i.slide},null,8,["slide"])]),key:"0"}:void 0]),1024)])}]])},540:(e,t,o)=>{o.d(t,{A:()=>C});var l=o(2015);const a={class:"blocks-container"},n={class:"blockslabel"},s={key:0,class:"blocks"},i={class:"blocklabel"},c={class:"blocktitle"},r={style:{display:"flex","justify-content":"center",gap:"5px"}},d=["onClick"],p=["onClick"],m=["onClick"],u={class:"actionview"},v={key:0,class:"actionrow"},h={key:1,class:"actionform"},k={key:2,class:"actionline"},y={props:{value:{type:Object,default:{uid:"",hook:""}},isState:{type:Boolean,default:!1},target:{type:Object},state:{type:Object}},data:()=>({expanded:!1,played:!1}),computed:{action(){return this.$app.actions.list.find(e=>e.uid===this.value.uid)}},methods:{onUpdate(e,t){console.log("onUpdate");const o=e.split(".");let l=this.action;for(let e=0;e<o.length-1;e++){const t=o[e];l[t]||(l[t]={}),l=l[t]}l[o[o.length-1]]=t,this.$emit("update:action",{[e]:t})},remove(){this.$emit("remove")},play(){this.$app.engine.getManager("ActionsManager").GetAction(this.action.type)(this.action,this.target,!1)},reset(){}}};var V=o(6262);const f=(0,V.A)(y,[["render",function(e,t,o,a,n,s){const i=(0,l.resolveComponent)("icon");return(0,l.openBlock)(),(0,l.createElementBlock)("div",u,[s.action?((0,l.openBlock)(),(0,l.createElementBlock)("div",v,[(0,l.createElementVNode)("div",{class:"label",onClick:t[0]||(t[0]=e=>n.expanded=!n.expanded)},[(0,l.createTextVNode)((0,l.toDisplayString)(n.expanded?"▼":"▶")+" ",1),(0,l.createElementVNode)("span",null,(0,l.toDisplayString)("model"===o.value.src?"M":""),1),(0,l.createTextVNode)(" ("+(0,l.toDisplayString)(s.action.type)+") "+(0,l.toDisplayString)(s.action.name||s.action.uid),1)])])):(0,l.createCommentVNode)("v-if",!0),s.action?(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("div",h,[((0,l.openBlock)(),(0,l.createBlock)((0,l.resolveDynamicComponent)(s.action.type),(0,l.mergeProps)(s.action,{onUpdate:s.onUpdate,options:{inspector:!0,expanded:n.expanded}}),{default:(0,l.withCtx)(()=>[(0,l.createElementVNode)("button",{class:"square",onClick:t[1]||(t[1]=(...e)=>s.play&&s.play(...e))},[(0,l.createVNode)(i,{value:n.played?"stop2":"play3",size:"1.2em"},null,8,["value"])]),(0,l.createElementVNode)("button",{onClick:t[2]||(t[2]=(...e)=>s.reset&&s.reset(...e))},[(0,l.createVNode)(i,{value:"undo",size:"1em"})]),(0,l.createElementVNode)("button",{onClick:t[3]||(t[3]=(...e)=>s.remove&&s.remove(...e))},[(0,l.createVNode)(i,{value:"bin",size:"1em"})])]),_:1},16,["onUpdate","options"]))],512)),[[l.vShow,n.expanded]]):(0,l.createCommentVNode)("v-if",!0),n.expanded?(0,l.createCommentVNode)("v-if",!0):((0,l.openBlock)(),(0,l.createElementBlock)("div",k,[(0,l.createElementVNode)("button",{class:"square",onClick:t[4]||(t[4]=(...e)=>s.play&&s.play(...e))},[(0,l.createVNode)(i,{value:n.played?"stop2":"play3",size:"1em"},null,8,["value"])]),(0,l.createElementVNode)("button",{class:"square",onClick:t[5]||(t[5]=(...e)=>s.reset&&s.reset(...e))},[(0,l.createVNode)(i,{value:"undo",size:"1em"})]),(0,l.createElementVNode)("button",{class:"square",onClick:t[6]||(t[6]=(...e)=>s.remove&&s.remove(...e))},[(0,l.createVNode)(i,{value:"bin",size:"1em"})])]))])}]]),g=["onMouseover","onClick"],E={props:["items","x","y"],data:()=>({isActive:!1,highlightedIndex:null}),methods:{highlight(e){this.highlightedIndex=e},deactivate(){this.highlightedIndex=null,this.$emit("select",null)},selectItem(e){this.$emit("select",e)}}},B=(0,V.A)(E,[["render",function(e,t,o,a,n,s){return(0,l.openBlock)(),(0,l.createElementBlock)("div",{class:"menu",onMouseleave:t[0]||(t[0]=(...e)=>s.deactivate&&s.deactivate(...e)),style:(0,l.normalizeStyle)({top:o.y-3+"px",left:o.x+"px"})},[(0,l.createElementVNode)("ul",null,[((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(o.items,(e,t)=>((0,l.openBlock)(),(0,l.createElementBlock)("li",{key:t,onMouseover:e=>s.highlight(t),onClick:t=>s.selectItem(e),class:(0,l.normalizeClass)({highlighted:n.highlightedIndex===t})},(0,l.toDisplayString)(e),43,g))),128))])],36)}],["__scopeId","data-v-baa172ec"]]),N={name:"EventsList",props:{modelValue:{type:Object,default:{}},value:{type:Object,default:{data:{}}},target:{type:Object,default:null},property:{type:Object}},computed:{eventTypes(){return this.$app.events.types},actions(){return this.$app.actions},hooks(){return this.$app.actions.hooks.filter(e=>!this.getActionsHooks().includes(e))}},mounted(){},methods:{async addEvent(e){this.events.length=0,this.events.push(...["create.on","enable.on","disable.on","mouse.over","mouse.out"].filter(e=>!this.getActionsHooks().includes(e))),this.menuX=e.clientX,this.menuY=e.clientY,this.listshow=!0,await this.$nextTick();const t=this.$refs.hooksList.$el.offsetHeight,o=window.innerHeight;this.menuY+t>o&&(this.menuY=o-t-10)},onSelectEvent(e){this.listshow=!1,e&&this.openActionsList(e)},openActionsList(e){this.$app.actions.showLib(async t=>{t&&(this.target.actions.push({uid:t.uid,hook:e}),this.$emit("save"))})},onRemove(e,t){const o=this.target.actions.findIndex(o=>o.uid===e.uid&&o.hook===t);o>=0&&(this.target.actions.splice(o,1),this.$emit("update:target",null,null))},getActionsHooks(){return[...new Set(this.target.actions.map(e=>e.hook))]},async reset(e){},async play(e){},onEdit(e,t){this.$app.actions.save({uid:e.uid,...t})}},data:()=>({actLibShow:!1,actListShow:!1,actsButtons:[],regActType:null,selectedActionType:null,regbusy:!1,selectdAction:null,eventType:"",listshow:!1,show:!0,events:[],menuX:0,menuY:0,played:!1}),components:{Action:f,HooksList:B}},b=(0,V.A)(N,[["render",function(e,t,o,u,v,h){const k=(0,l.resolveComponent)("icon"),y=(0,l.resolveComponent)("Action"),V=(0,l.resolveComponent)("HooksList");return(0,l.openBlock)(),(0,l.createElementBlock)(l.Fragment,null,[(0,l.createCommentVNode)("Actions View"),(0,l.createElementVNode)("div",a,[(0,l.createElementVNode)("div",n,[(0,l.createElementVNode)("div",{onClick:t[0]||(t[0]=e=>v.show=!v.show)},"Add : "),(0,l.createElementVNode)("button",{onClick:t[1]||(t[1]=(...e)=>h.addEvent&&h.addEvent(...e))},[(0,l.createVNode)(k,{value:"plus",size:"0.9em"})])]),v.show?((0,l.openBlock)(),(0,l.createElementBlock)("div",s,[((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(h.getActionsHooks(),(e,t)=>((0,l.openBlock)(),(0,l.createElementBlock)("div",{key:t,class:"block"},[(0,l.createElementVNode)("div",i,[(0,l.createElementVNode)("div",c,(0,l.toDisplayString)(e),1),(0,l.createElementVNode)("div",r,[(0,l.createElementVNode)("button",{class:"square",onClick:t=>h.play(e)},[(0,l.createVNode)(k,{value:v.played?"stop2":"play3",size:"1em"},null,8,["value"])],8,d),(0,l.createElementVNode)("button",{class:"square",onClick:t=>h.reset(e)},[(0,l.createVNode)(k,{value:"undo",size:"1em"})],8,p)]),(0,l.createElementVNode)("button",{onClick:t=>h.openActionsList(e)},[(0,l.createVNode)(k,{value:"plus",size:"0.9em"})],8,m)]),(0,l.createCommentVNode)("Models actions"),(0,l.createCommentVNode)(' <Action :value="action" :target="value"\r\n                    v-for="(action, index) in value.model.data.actions.filter(a => a.hook === eventType)"\r\n                    :ref="`action${action.uid}`" :key="index"\r\n                    @update:action="onEdit(action,$event)">\r\n                </Action> '),(0,l.createCommentVNode)("States actions"),((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(o.target.actions.filter(t=>t.hook===e),(t,a)=>((0,l.openBlock)(),(0,l.createBlock)(y,{value:t,target:o.value,state:o.target,ref_for:!0,ref:`action${t.uid}`,key:a,"onUpdate:action":e=>h.onEdit(t,e),onRemove:o=>h.onRemove(t,e)},null,8,["value","target","state","onUpdate:action","onRemove"]))),128))]))),128))])):(0,l.createCommentVNode)("v-if",!0),v.listshow?((0,l.openBlock)(),(0,l.createBlock)(l.Teleport,{key:1,to:"body"},[(0,l.createVNode)(V,{ref:"hooksList",x:v.menuX,y:v.menuY,items:h.hooks,onSelect:h.onSelectEvent},null,8,["x","y","items","onSelect"])])):(0,l.createCommentVNode)("v-if",!0)]),(0,l.createCommentVNode)(" // Actions View")],2112)}]]),C=b},823:(e,t,o)=>{o.d(t,{A:()=>c});var l=o(2015);const a={class:"overbutton"},n={class:"menulabel"},s={class:"btnicon"},i={name:"ExpandedButton",props:{label:"",icon:"",color:"rgb(0,0,0)"}},c=(0,o(6262).A)(i,[["render",function(e,t,o,i,c,r){const d=(0,l.resolveComponent)("icon");return(0,l.openBlock)(),(0,l.createElementBlock)("button",a,[(0,l.createElementVNode)("div",n,(0,l.toDisplayString)(o.label),1),(0,l.createElementVNode)("div",s,[(0,l.createVNode)(d,{size:"100%",color:o.color,value:o.icon},null,8,["color","value"])])])}]])},1109:(e,t,o)=>{o(2015),Boolean,o(6262)},1187:(e,t,o)=>{o.d(t,{A:()=>i});var l=o(2015);const a={class:"assetblock"};var n=o(4001);const s={name:"AssetView",data:()=>({cmps:{hdr:"assethdr"}}),props:{value:{type:Object},modelValue:{type:String},property:{type:Object}},methods:{onAssetChange(e){e&&this.$emit("update:value",e.uid)},cleanProp(){delete this.value[this.property.prop],this.$emit("update:value",null)}},computed:{val(){return this.value[this.property.prop]},asset(){return this.val?this.$app.assets.list.find(e=>e.uid===this.val):null}},components:{assethdr:n.A}},i=(0,o(6262).A)(s,[["render",function(e,t,o,n,s,i){const c=(0,l.resolveComponent)("icon"),r=(0,l.resolveDirective)("tooltip");return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[((0,l.openBlock)(),(0,l.createBlock)((0,l.resolveDynamicComponent)(s.cmps[o.property.type]),{onSetasset:i.onAssetChange,asset:i.asset},null,40,["onSetasset","asset"])),i.asset?(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createBlock)(c,{key:0,onClick:i.cleanProp,class:"icon",value:"bin",size:"1em"},null,8,["onClick"])),[[r,"Удалить"]]):(0,l.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-5867b901"]])},1255:(e,t,o)=>{o.d(t,{A:()=>i});var l=o(2015);const a={class:"menu-container"},n={key:0,class:"menublock"},s={name:"ExtMenu",props:{list:{type:Array,default:[]},actived:{type:String}},computed:{menu(){return this.$app.menu}},methods:{onClick(e){const t=this.list.find(e=>e.id===this.actived);t&&(t.handlers?.disable?.(),t===e)?this.$emit("activate",null):(e.handler?.(e)||e.handlers?.enable?.(e)||this.$emit("click",e),this.$emit("activate",e))}}},i=(0,o(6262).A)(s,[["render",function(e,t,o,s,i,c){const r=(0,l.resolveComponent)("ExpandedButton");return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(o.list,(e,t)=>((0,l.openBlock)(),(0,l.createElementBlock)("div",{key:t,class:(0,l.normalizeClass)([e.class,"menu-item"])},[e.hidden?(0,l.createCommentVNode)("v-if",!0):((0,l.openBlock)(),(0,l.createElementBlock)("div",n,[(0,l.createVNode)(r,{onClick:(0,l.withModifiers)(t=>c.onClick(e),["stop"]),label:e.label,color:e.id&&o.actived===e.id?"#ffff00":null,icon:e.icon},null,8,["onClick","label","color","icon"])]))],2))),128))])}]])},1302:(e,t,o)=>{o.d(t,{A:()=>c});var l=o(2015);const a={class:"pitem"},n={class:"textwrap w100 tcenter"},s={style:{display:"flex","justify-content":"center"},class:"tcenter"},i={props:{item:{type:Object}},computed:{date(){return new Date(this.item.created).toLocaleString()}}},c=(0,o(6262).A)(i,[["render",function(e,t,o,i,c,r){const d=(0,l.resolveDirective)("tooltip");return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("div",n,[(0,l.createTextVNode)((0,l.toDisplayString)(o.item.name),1)])),[[d,o.item.name]]),(0,l.createElementVNode)("div",s,(0,l.toDisplayString)(r.date),1)])}],["__scopeId","data-v-a84bc2fe"]])},1351:(e,t,o)=>{o.d(t,{A:()=>k});var l=o(2015);const a={class:"form-container"},n={class:"info"},s={class:"row"},i={class:"rowvalue"},c={class:"row"},r={class:"rowvalue"},d=["value"],p=["value"],m={key:1},u={class:"rowlabel"},v={key:0},h={name:"AssetEdit",props:{selected:{type:Object,default:{name:"-"}},progress:{type:Number}},computed:{types(){return this.$app.assets.types},inspector(){return this.$app.inspector.blocksFor(["asset",this.selected.type]).filter(e=>!e.inspectorOnly)}},methods:{updateInspector(e){this.inspector=this.$app.inspector.blocksFor(this.selected.getTypes())},onChange(e,t){console.log(e,t),this.$emit("edit",e,t)},end(){this.$emit("edit","name",this.$refs.nameeditor.endEdit()),this.$emit("edit","url",this.$refs.urleditor.endEdit())},async onComponentUpdate(e,t){if(t.onupdate)await t.onupdate(this.selected,e,t,()=>{this.$emit("edit",t.prop,e)});else{const o=t.prop.split(".");let l=o[0],a=this.selected;for(let e=0;e<o.length-1;e++)a=a[o[e]],l=o[e+1];a[l]=e,this.$emit("edit",t.prop,e)}},onComponentChange(){_saveHandler(this.selected)}}},k=(0,o(6262).A)(h,[["render",function(e,t,o,h,k,y){const V=(0,l.resolveComponent)("LabelEdit");return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createElementVNode)("div",n,[(0,l.createElementVNode)("div",s,[t[3]||(t[3]=(0,l.createElementVNode)("div",{class:"rowlabel"},"Name",-1)),(0,l.createElementVNode)("div",i,[(0,l.createVNode)(V,{style:{width:"100%"},ref:"nameeditor","onUpdate:modelValue":[t[0]||(t[0]=e=>y.onChange("name",e)),t[1]||(t[1]=e=>o.selected.name=e)],modelValue:o.selected.name},null,8,["modelValue"])])]),(0,l.createElementVNode)("div",c,[t[4]||(t[4]=(0,l.createElementVNode)("div",{class:"rowlabel"},"Type",-1)),(0,l.createElementVNode)("div",r,[o.selected.uid?((0,l.openBlock)(),(0,l.createElementBlock)("div",m,(0,l.toDisplayString)(o.selected.type),1)):((0,l.openBlock)(),(0,l.createElementBlock)("select",{key:0,class:"typeslist",value:o.selected.type,onChange:t[2]||(t[2]=e=>y.onChange("type",e.target.value))},[((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(y.types,e=>((0,l.openBlock)(),(0,l.createElementBlock)("option",{value:e},(0,l.toDisplayString)(e),9,p))),256))],40,d))])]),(0,l.createCommentVNode)(' <div class="row">\r\n                <div class="rowlabel">URL</div>\r\n                <div class="rowvalue">\r\n                    <LabelEdit style="width: 100%;" ref="urleditor" @update:value="onChange(\'url\', $event)"\r\n                        :value="selected.url">\r\n                    </LabelEdit>\r\n                </div>\r\n            </div> '),((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(y.inspector,(e,t)=>((0,l.openBlock)(),(0,l.createElementBlock)("div",{key:t,class:"row"},[(0,l.createElementVNode)("div",u,(0,l.toDisplayString)(e.label),1),e.content?((0,l.openBlock)(),(0,l.createBlock)((0,l.resolveDynamicComponent)(e.content.component),(0,l.mergeProps)({key:0,class:"rowvalue",value:o.selected,modelValue:o.selected[e.content.prop],"onUpdate:modelValue":[t=>o.selected[e.content.prop]=t,t=>y.onComponentUpdate(t,e.content)],property:e.content},{ref_for:!0},e.content.props,{onModify:t=>y.onComponentChange(t,e.content)}),null,16,["value","modelValue","onUpdate:modelValue","property","onModify"])):(0,l.createCommentVNode)("v-if",!0),e.head?((0,l.openBlock)(),(0,l.createBlock)((0,l.resolveDynamicComponent)(e.head.component),(0,l.mergeProps)({key:1,class:"rowvalue",value:o.selected,modelValue:o.selected[e.head.prop],"onUpdate:modelValue":[t=>o.selected[e.head.prop]=t,t=>y.onComponentUpdate(t,e.head)],property:e.head},{ref_for:!0},e.head.props,{onModify:t=>y.onComponentChange(t,e.head)}),null,16,["value","modelValue","onUpdate:modelValue","property","onModify"])):(0,l.createCommentVNode)("v-if",!0)]))),128)),t[5]||(t[5]=(0,l.createElementVNode)("div",null,null,-1))]),(0,l.createElementVNode)("div",null,[o.progress>0?((0,l.openBlock)(),(0,l.createElementBlock)("div",v,(0,l.toDisplayString)(o.progress),1)):(0,l.createCommentVNode)("v-if",!0)])])}],["__scopeId","data-v-3d9f51e7"]])},1684:(e,t,o)=>{o.d(t,{A:()=>d});var l=o(2015);const a={class:"horizontal-menu"},n={class:"menu-text"},s={key:0,class:"submenu"},i={name:"MenuItem",props:{item:{type:Object,required:!0}},methods:{onClick(e){!e.children&&e.handler&&e.handler()}}};var c=o(6262);const r={components:{MenuItem:(0,c.A)(i,[["render",function(e,t,o,a,i,c){const r=(0,l.resolveComponent)("icon"),d=(0,l.resolveComponent)("MenuItem",!0),p=(0,l.resolveDirective)("tooltip");return(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("li",{class:(0,l.normalizeClass)({"has-children":o.item.children})},[(0,l.createElementVNode)("div",{class:"item",onClick:t[0]||(t[0]=e=>c.onClick(o.item))},[(0,l.createVNode)(r,{value:o.item.children?"folder":o.item.icon,size:"1em"},null,8,["value"]),(0,l.createElementVNode)("span",n,(0,l.toDisplayString)(o.item.text),1)]),o.item.children?((0,l.openBlock)(),(0,l.createElementBlock)("ul",s,[((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(o.item.children,(e,t)=>((0,l.openBlock)(),(0,l.createBlock)(d,{key:t,item:e},null,8,["item"]))),128))])):(0,l.createCommentVNode)("v-if",!0)],2)),[[p,o.item.tooltip]])}],["__scopeId","data-v-6b17b06f"]])},props:{menu:{type:Object}},data:()=>({menuData:[{icon:"fas fa-home",text:"Главная",link:"#"},{icon:"folder",text:"Товары",link:"#",children:[{icon:"bell",text:"Электроника",link:"#",children:[{icon:"cog",text:"Смартфоны",link:"#"},{icon:"fas fa-tablet-alt",text:"Планшеты",link:"#"}]},{icon:"fas fa-tshirt",text:"Одежда",link:"#"}]},{icon:"fas fa-info-circle",text:"О нас",link:"#",children:[{icon:"fas fa-history",text:"История",link:"#"},{icon:"fas fa-users",text:"Команда",link:"#"}]},{icon:"fas fa-envelope",text:"Контакты",link:"#"}]})},d=(0,c.A)(r,[["render",function(e,t,o,n,s,i){const c=(0,l.resolveComponent)("MenuItem");return(0,l.openBlock)(),(0,l.createElementBlock)("ul",a,[((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(o.menu,(e,t)=>((0,l.openBlock)(),(0,l.createBlock)(c,{key:t,item:e},null,8,["item"]))),128))])}],["__scopeId","data-v-30250442"]])},1715:(e,t,o)=>{o.d(t,{A:()=>r});var l=o(2015);const a={class:"moditem"},n={class:"title"},s={class:"image"},i=["src"],c={name:"AssetItem",props:["item"]},r=(0,o(6262).A)(c,[["render",function(e,t,o,c,r,d){return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createElementVNode)("div",n,(0,l.toDisplayString)(o.item.name),1),(0,l.createElementVNode)("div",s,[(0,l.createElementVNode)("img",{src:o.item.images[0].url},null,8,i)])])}],["__scopeId","data-v-ef969d8c"]])},1720:(e,t,o)=>{o.d(t,{A:()=>s});var l=o(2015);const a={class:"labelField"},n={name:"Label",props:{modelValue:{type:String},value:{type:Object}}},s=(0,o(6262).A)(n,[["render",function(e,t,o,n,s,i){const c=(0,l.resolveDirective)("tooltip");return(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createTextVNode)((0,l.toDisplayString)(o.modelValue||""),1)])),[[c,o.modelValue]])}],["__scopeId","data-v-45c328bf"]])},1849:(e,t,o)=>{o.d(t,{A:()=>E});var l=o(2015);const a={class:"form-container"},n={class:"form-column"},s={class:"row"},i={class:"rowvalue"},c={key:0},r=["value"],d={key:0,class:"row"},p={class:"rowvalue"},m=["value"],u={key:1},v={class:"row"},h={class:"rowvalue"},k={key:1,class:"row"},y={class:"rowvalue"},V={key:3},f={key:0},g={name:"ActionEdit",data:()=>({selectedGroup:null}),props:{selected:{type:Object},progress:{type:Number}},computed:{types(){return this.$app.actions.library.filter(e=>e.type===this.selectedGroup)},groups(){return this.$app.actions.groups},selectedType(){return this.$app.actions.library.find(e=>e.component===this.selected.type)},selectType:{get(){return this.selected.type},set(e){this.$emit("change:type",e)}}},methods:{onUpdate(e,t){this.$emit("edit",e,t)},end(){this.$emit("edit","name",this.$refs.nameeditor.endEdit()),this.$emit("edit","url",this.$refs.urleditor.endEdit())}},mounted(){this.selectedGroup=this.selected.group}},E=(0,o(6262).A)(g,[["render",function(e,t,o,g,E,B){const N=(0,l.resolveComponent)("LabelEdit");return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createElementVNode)("div",n,[(0,l.createElementVNode)("div",s,[t[3]||(t[3]=(0,l.createElementVNode)("div",{class:"rowlabel"},"Group:",-1)),(0,l.createElementVNode)("div",i,[o.selected.uid?((0,l.openBlock)(),(0,l.createElementBlock)("div",c,(0,l.toDisplayString)(o.selected.group),1)):(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("select",{key:1,"onUpdate:modelValue":t[0]||(t[0]=e=>E.selectedGroup=e)},[((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(B.groups,(e,t)=>((0,l.openBlock)(),(0,l.createElementBlock)("option",{key:t,value:e},(0,l.toDisplayString)(e),9,r))),128))],512)),[[l.vModelSelect,E.selectedGroup]])])]),E.selectedGroup?((0,l.openBlock)(),(0,l.createElementBlock)("div",d,[t[4]||(t[4]=(0,l.createElementVNode)("div",{class:"rowlabel"},"Type:",-1)),(0,l.createElementVNode)("div",p,[o.selected.uid?((0,l.openBlock)(),(0,l.createElementBlock)("div",u,(0,l.toDisplayString)(B.selectedType.name),1)):(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("select",{key:0,"onUpdate:modelValue":t[1]||(t[1]=e=>B.selectType=e)},[((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(B.types,(e,t)=>((0,l.openBlock)(),(0,l.createElementBlock)("option",{key:t,value:e.component},(0,l.toDisplayString)(e.name),9,m))),128))],512)),[[l.vModelSelect,B.selectType]])])])):(0,l.createCommentVNode)("v-if",!0),(0,l.createElementVNode)("div",v,[t[5]||(t[5]=(0,l.createElementVNode)("div",{class:"rowlabel"},"Name:",-1)),(0,l.createElementVNode)("div",h,[(0,l.createVNode)(N,{style:{width:"100%"},ref:"nameeditor","onUpdate:modelValue":t[2]||(t[2]=t=>e.$emit("edit","name",t)),modelValue:o.selected.name},null,8,["modelValue"])])]),o.selected.description?((0,l.openBlock)(),(0,l.createElementBlock)("div",k,[t[6]||(t[6]=(0,l.createElementVNode)("div",{class:"rowlabel"},"Description:",-1)),(0,l.createElementVNode)("div",y,(0,l.toDisplayString)(o.selected.description),1)])):(0,l.createCommentVNode)("v-if",!0),o.selected.type?((0,l.openBlock)(),(0,l.createBlock)((0,l.resolveDynamicComponent)(o.selected.type),(0,l.mergeProps)({key:2},o.selected,{onUpdate:B.onUpdate}),null,16,["onUpdate"])):((0,l.openBlock)(),(0,l.createElementBlock)("div",V," You need to save before editing "))]),o.progress>0?((0,l.openBlock)(),(0,l.createElementBlock)("div",f,(0,l.toDisplayString)(o.progress),1)):(0,l.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-25cdeb34"]])},2300:(e,t,o)=>{o.d(t,{A:()=>n});var l=o(2015);const a={name:"SliderBlock",props:{value:{type:Boolean,default:()=>!1},property:{type:String,default:"top"},shift:{type:Number,default:100},zero:{type:Number,default:0}},computed:{style(){return{[this.property]:this.value?`${this.shift}px`:`${this.zero}px`}}},mounted(){"right"===this.property||"left"===this.property?this.$el.style.width=this.shift-this.zero+"px":this.$el.style.height=this.shift-this.zero+"px"}},n=(0,o(6262).A)(a,[["render",function(e,t,o,a,n,s){return(0,l.openBlock)(),(0,l.createElementBlock)("div",{class:"slider",style:(0,l.normalizeStyle)(s.style)},[(0,l.renderSlot)(e.$slots,"default",{},void 0,!0),(0,l.createElementVNode)("div",{onClick:t[0]||(t[0]=t=>e.$emit("revert"))},[(0,l.renderSlot)(e.$slots,"button",{},void 0,!0)])],4)}],["__scopeId","data-v-b3fc2cec"]])},2489:(e,t,o)=>{o.d(t,{A:()=>r});var l=o(2015);const a={class:"font-size-editor"},n={class:"controls"},s={class:"size-control"},i=["value"],c={name:"FontSizeEditor",data:()=>({fontSizeValue:16,fontSizeUnit:"px",defaultSize:"16px",availableUnits:["px","em","rem","pt","pc","in","cm","mm","ex","ch","vw","vh","vmin","vmax","%"],sizePresets:[{label:"Маленький (12px)",value:"12px"},{label:"Средний (16px)",value:"16px"},{label:"Большой (24px)",value:"24px"},{label:"Заголовок (32px)",value:"32px"}]}),computed:{currentFontSize(){return`${this.fontSizeValue}${this.fontSizeUnit}`}},methods:{updateFontSize(){this.$emit("update:modelValue",this.currentFontSize)},resetSize(){const e=this.defaultSize.match(/(\d+\.?\d*)(\D+)/);e?(this.fontSizeValue=parseFloat(e[1]),this.fontSizeUnit=e[2]):(this.fontSizeValue=16,this.fontSizeUnit="px"),this.updateFontSize()},applyPreset(e){const t=e.match(/(\d+\.?\d*)(\D+)/);t&&(this.fontSizeValue=parseFloat(t[1]),this.fontSizeUnit=t[2],this.updateFontSize())},parseSize(e){const t=e.match(/(\d+\.?\d*)(\D+)/);return t?{value:parseFloat(t[1]),unit:t[2]}:null},init(){const e=this.parseSize(this.modelValue);e&&(this.fontSizeValue=e.value,this.fontSizeUnit=e.unit,this.defaultSize=this.modelValue)}},emits:["update:modelValue"],props:{modelValue:{type:String,default:"16px",validator:e=>/^\d*\.?\d+(px|em|rem|pt|pc|in|cm|mm|ex|ch|vw|vh|vmin|vmax|%)$/.test(e)}},watch:{modelValue(){this.init()}},created(){this.init()}},r=(0,o(6262).A)(c,[["render",function(e,t,o,c,r,d){return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createElementVNode)("div",n,[(0,l.createElementVNode)("div",s,[(0,l.withDirectives)((0,l.createElementVNode)("input",{type:"number",id:"fontSizeValue","onUpdate:modelValue":t[0]||(t[0]=e=>r.fontSizeValue=e),min:"0",step:"0.1",onInput:t[1]||(t[1]=(...e)=>d.updateFontSize&&d.updateFontSize(...e))},null,544),[[l.vModelText,r.fontSizeValue,void 0,{number:!0}]]),(0,l.withDirectives)((0,l.createElementVNode)("select",{"onUpdate:modelValue":t[2]||(t[2]=e=>r.fontSizeUnit=e),onChange:t[3]||(t[3]=(...e)=>d.updateFontSize&&d.updateFontSize(...e))},[((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(r.availableUnits,e=>((0,l.openBlock)(),(0,l.createElementBlock)("option",{value:e,key:e},(0,l.toDisplayString)(e),9,i))),128))],544),[[l.vModelSelect,r.fontSizeUnit]])])])])}],["__scopeId","data-v-f859e98c"]])},2578:(e,t,o)=>{o.d(t,{A:()=>i});var l=o(2015);const a={style:{display:"flex","align-items":"center",gap:"1px","flex-direction":"column"}};var n=o(4875);const s={name:"QuaternionEditor",props:{modelValue:{type:n.Quaternion,required:!0},decimals:{type:Number,default:2},step:{type:Number,default:1}},data:()=>({expanded:!0,x:0,y:0,z:0}),watch:{modelValue:{handler(e){this.updateEulerFromQuaternion(e)},immediate:!0,deep:!0}},methods:{updateEulerFromQuaternion(e){const t=(new n.Euler).setFromQuaternion(e,"XYZ");this.x=this.roundValue(t.x),this.y=this.roundValue(t.y),this.z=this.roundValue(t.z)},updateQuaternion(){const e=new n.Euler(this.x,this.y,this.z,"XYZ"),t=(new n.Quaternion).setFromEuler(e,"XYZ");this.$emit("update:modelValue",t)},roundValue:e=>Math.round(100*e)/100}},i=(0,o(6262).A)(s,[["render",function(e,t,o,n,s,i){const c=(0,l.resolveComponent)("V3");return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createCommentVNode)(' <div class="title" :class="expanded ? \'\' : \'min\'">\r\n            <div class="label" @click="expanded = !expanded">{{expanded?\'▼\':\'▶\' }} {{ label }}</div>\r\n            <div v-if="expanded"class="tools"><slot name="tools"></slot></div>\r\n            <div v-else class="titleinfo">x:{{ modelValue.x.toFixed(decimals) }},y:{{ modelValue.y.toFixed(decimals) }},z:{{ modelValue.z.toFixed(decimals) }}</div>\r\n        </div> '),s.expanded?((0,l.openBlock)(),(0,l.createBlock)(c,{key:0,modelValue:{x:s.x,y:s.y,z:s.z},decimals:o.decimals,step:o.step,"onUpdate:modelValue":i.updateQuaternion},null,8,["modelValue","decimals","step","onUpdate:modelValue"])):(0,l.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-96995396"]])},2664:(e,t,o)=>{o.d(t,{A:()=>r});var l=o(2015);const a={class:"hierarhy-view"},n=["onUpdate:modelValue","onChange"],s={class:"treeicon"};var i=o(4546);const c={name:"TreeElement",props:{title:""},data:()=>({filtersView:!1,filterRect:{},requestRemove:!1,removeData:{text:""}}),computed:{project(){return this.$app.project},selected(){return this.$app.selection.selected},selection(){return this.$app.selection},tree(){return this.$app.project.children}},methods:{async updateVisible(e){this.$app.project.getState(e,this.$app.slides.actived.uid).visible=e.visible,await this.$app.project.save(e)},async handleNodeDrop(e){this.$app.project.handleAsset(e)},filterElements:e=>e.filter(e=>e.isElement),async insertToSlide(e){e.state?this.$app.toasts.add({message:"The element has already been added to this slide"}):await this.$app.slides.addState(e)},deleteElement(e){this.removeData.text=`Delete ${e.name} (${e.uid}) ?`,this.$app.modal.open({header:{value:"Delete item",handler:()=>{this.$app.modal.close(),this.requestRemove=!1}},content:{},footer:{buttons:[{label:"Delete",class:"secondary",handler:async()=>{this.$app.modal.close(),this.requestRemove=!1,this.$app.project.remove(e.paths),this.$app.toasts.add({message:`The element ${e.name} is deleted`})}},{label:"Cancel",class:"primary",handler:async()=>{this.$app.modal.close(),this.requestRemove=!1}}]}})},onUpdateExpanded(e){},onNodeClick(e){this.$app.selection.select(e)},onChangeSelection(){}},components:{TreeView:i.A}},r=(0,o(6262).A)(c,[["render",function(e,t,o,i,c,r){const d=(0,l.resolveComponent)("icon"),p=(0,l.resolveComponent)("TreeView"),m=(0,l.resolveDirective)("tooltip");return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createElementVNode)("div",null,[(0,l.createTextVNode)((0,l.toDisplayString)(o.title)+": ",1),(0,l.createElementVNode)("button",{onClick:t[0]||(t[0]=e=>r.project.addElement(r.selected))},[(0,l.createVNode)(d,{value:"plus",size:"0.75em"})])]),(0,l.createVNode)(p,{filter:r.filterElements,tree:r.tree,onClickNode:r.onNodeClick,onChangeSelect:r.onChangeSelection,childsFiled:"children",onUpdateExpanded:r.onUpdateExpanded,selector:!1,droppable:!0,onNodeDrop:r.handleNodeDrop},{prepend:(0,l.withCtx)(({node:e,index:t})=>[(0,l.createElementVNode)("div",null,[(0,l.withDirectives)((0,l.createElementVNode)("input",{type:"checkbox","onUpdate:modelValue":t=>e.visible=t,onChange:t=>r.updateVisible(e)},null,40,n),[[l.vModelCheckbox,e.visible]])])]),append:(0,l.withCtx)(({node:e,index:t})=>[(0,l.createElementVNode)("div",s,[(0,l.createCommentVNode)(' <icon value="target" v-tooltip="\'Фокус\'" size="1em" @click="$emit(\'target\', node)"></icon>'),(0,l.createCommentVNode)(" <icon v-tooltip=\"'Видимость'\" :value=\"node.show ? 'eye' : 'eye-blocked'\" size=\"1em\"\r\n            @click=\"node.visible = !node.visible\" :color=\"node.visible ? '#8ec58e' : '#8ec58e80'\">\r\n          </icon> "),e.parent?(0,l.createCommentVNode)("v-if",!0):(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createBlock)(d,{key:0,value:"dice",size:"1em",onClick:t=>r.insertToSlide(e),color:e.state?"#8ec58e":"#8ec58e80"},null,8,["onClick","color"])),[[m,"Add to slide"]]),(0,l.withDirectives)((0,l.createVNode)(d,{onClick:t=>r.deleteElement(e),value:"bin",size:"1em"},null,8,["onClick"]),[[m,"Remove"]]),(0,l.createCommentVNode)(' <icon v-if="index === 0" size="100%" value="bin"></icon> ')])]),label:(0,l.withCtx)(({node:e})=>[(0,l.createElementVNode)("div",{class:(0,l.normalizeClass)([{focusedtree:r.selected===e},"label"])},(0,l.toDisplayString)(e.name||e.uid),3)]),_:1},8,["filter","tree","onClickNode","onChangeSelect","onUpdateExpanded","onNodeDrop"])])}],["__scopeId","data-v-e70173d4"]])},3042:(e,t,o)=>{o.d(t,{A:()=>E});var l=o(2015);const a={class:"product-card"},n={class:"product-title"},s={key:0,class:"card-section"},i={class:"card-value"},c={class:"card-section"},r={class:"card-image"},d=["src","alt"],p={class:"card-section"},m={key:0,class:"carousel"},u={class:"carousel-container"},v=["src","onClick","alt"],h={class:"card-section"},k={class:"card-value"},y=["href"],V={key:1,class:"card-section"},f={class:"card-value"},g=(0,l.defineComponent)({name:"ProductCard",props:{selected:{type:Object,required:!0,validator:e=>!0}},computed:{data(){return this.selected}},data:()=>({img:0}),setup:e=>({formattedPrice:(0,l.computed)(()=>void 0===e.selected.price||null===e.selected.price?"Цена не указана":new Intl.NumberFormat("ru-RU",{style:"currency",currency:"RUB"}).format(e.selected.price))}),methods:{onImageClick(e){this.img=e}}}),E=(0,o(6262).A)(g,[["render",function(e,t,o,g,E,B){return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createCommentVNode)(" Заголовок "),(0,l.createElementVNode)("h2",n,(0,l.toDisplayString)(e.data.title),1),e.data.description?((0,l.openBlock)(),(0,l.createElementBlock)("div",s,[(0,l.createElementVNode)("span",i,(0,l.toDisplayString)(e.data.description),1)])):(0,l.createCommentVNode)("v-if",!0),(0,l.createCommentVNode)(" Основное изображение "),(0,l.createElementVNode)("div",c,[(0,l.createElementVNode)("div",r,[e.data.images&&e.data.images.length?((0,l.openBlock)(),(0,l.createElementBlock)("img",{key:0,src:e.data.images[e.img],alt:e.data.title,class:"image-preview"},null,8,d)):(0,l.createCommentVNode)("v-if",!0)])]),(0,l.createCommentVNode)(" Карусель изображений "),(0,l.createElementVNode)("div",p,[e.data.images&&e.data.images.length?((0,l.openBlock)(),(0,l.createElementBlock)("div",m,[(0,l.createElementVNode)("div",u,[((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(e.data.images,(t,o)=>((0,l.openBlock)(),(0,l.createElementBlock)("div",{key:o,class:"carousel-item"},[(0,l.createElementVNode)("img",{src:t,onClick:t=>e.onImageClick(o),alt:`${e.data.title} - изображение ${o+1}`,class:"carousel-image"},null,8,v)]))),128))])])):(0,l.createCommentVNode)("v-if",!0)]),(0,l.createElementVNode)("div",h,[t[0]||(t[0]=(0,l.createElementVNode)("span",{class:"card-label"},null,-1)),(0,l.createElementVNode)("span",k,[(0,l.createElementVNode)("a",{href:"../player?src=url&url="+e.data.url,target:"_blank"},"Preview",8,y)])]),(0,l.createCommentVNode)(" Цена "),(0,l.createCommentVNode)(' <div class="card-section">\r\n            <span class="card-label">Price:</span>\r\n            <span class="card-value">{{ formattedPrice }}</span>\r\n        </div> '),(0,l.createCommentVNode)(" Автор "),e.data.autor?((0,l.openBlock)(),(0,l.createElementBlock)("div",V,[t[1]||(t[1]=(0,l.createElementVNode)("span",{class:"card-label"},"Autor:",-1)),(0,l.createElementVNode)("span",f,(0,l.toDisplayString)(e.data.autor.name),1)])):(0,l.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-73ea6e84"]])},3216:(e,t,o)=>{o.d(t,{A:()=>m});var l=o(2015);const a={class:"container"},n={class:"block"},s={class:"content"},i={class:"sub-content"},c={class:"subtitle"},r={class:"subtitle"},d=["value"],p={props:{callback:{type:Function},modelValue:{type:Object,default:()=>({label:"",type:"model"})},parent:{type:Object}},computed:{name:{get(){return this.modelValue.name},set(e){this.$emit("update:modelValue",{name:e,type:this.modelValue.type})}},type:{get(){return this.modelValue.type},set(e){this.$emit("update:modelValue",{name:this.modelValue.name,type:e})}},types(){return this.$app.app.types.sort((e,t)=>e.label.localeCompare(t.label))}}},m=(0,o(6262).A)(p,[["render",function(e,t,o,p,m,u){return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createElementVNode)("div",n,[(0,l.createElementVNode)("div",s,[(0,l.createElementVNode)("div",i,[(0,l.createElementVNode)("div",c,[(0,l.withDirectives)((0,l.createElementVNode)("input",{type:"text",placeholder:"Name","onUpdate:modelValue":t[0]||(t[0]=e=>u.name=e)},null,512),[[l.vModelText,u.name]])]),(0,l.createElementVNode)("div",r,[(0,l.withDirectives)((0,l.createElementVNode)("select",{class:"typeslist","onUpdate:modelValue":t[1]||(t[1]=e=>u.type=e)},[((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(u.types,e=>((0,l.openBlock)(),(0,l.createElementBlock)("option",{value:e.type},(0,l.toDisplayString)(e.label),9,d))),256))],512),[[l.vModelSelect,u.type]])])])])])])}],["__scopeId","data-v-7daecc34"]])},3334:(e,t,o)=>{o.d(t,{A:()=>c});var l=o(2015);const a={class:"image-container"},n={ref:"canva"},s={class:"selector"},i={props:{modelValue:{type:Object,default:null},value:{type:Object},label:{type:String,default:""},tooltip:{type:String,default:""},selectable:{type:Boolean}},data:()=>({txtr:null}),watch:{value(e){this.redraw()},modelValue(e){this.redraw()}},methods:{onUpdate({result:e,file:t}){console.log(e);const o=new Blob([e],{type:t.type}),l=URL.createObjectURL(o);this.txtr=l;const a=(new THREE.TextureLoader).load(l,()=>{URL.revokeObjectURL(l)});this.$emit("update:modelValue",a.image),this.$app.storage.writeFile("texture.png",e)}},methods:{redraw(){const e=this.$refs.canva,t=e.getContext("2d");if(t.clearRect(0,0,e.width,e.height),this.modelValue)try{const o=this.modelValue.image;e.width=o.width,e.height=o.height,t.drawImage(o,0,0)}catch(e){}}},mounted(){console.log(this.modelValue,this.value),this.redraw()}},c=(0,o(6262).A)(i,[["render",function(e,t,o,i,c,r){return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createElementVNode)("canvas",n,null,512),(0,l.createElementVNode)("div",s,[(0,l.createElementVNode)("button",{class:"btn",onClick:t[0]||(t[0]=t=>e.$emit("select",o.value))},"SELECT")])])}]])},3373:(e,t,o)=>{o.d(t,{A:()=>s});var l=o(2015);const a=["onClick"],n={props:{values:{type:Array},rect:{type:Object},size:{type:Object,default:{width:200,height:100}}},data:()=>({popupStyle:{}}),methods:{togglePopup(e){const t=window.innerWidth;let o=this.rect.top+window.scrollY,l=this.rect.left+window.scrollX;l+this.size.width>t&&(l=this.rect.right-this.size.width+window.scrollX),this.popupStyle={position:"absolute",top:`${o}px`,left:`${l}px`,width:`${this.size.width}px`},this.isPopupVisible=!0},hidePopup(){this.$emit("callback")}}},s=(0,o(6262).A)(n,[["render",function(e,t,o,n,s,i){const c=(0,l.resolveDirective)("tooltip");return(0,l.openBlock)(),(0,l.createElementBlock)("div",{class:"popup",style:(0,l.normalizeStyle)(s.popupStyle)},[((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(o.values,(t,o)=>(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("p",{class:"element",key:o,onClick:o=>t.handler?t.handler(t):e.$emit("click",t)},[((0,l.openBlock)(),(0,l.createBlock)((0,l.resolveDynamicComponent)(t.component||"div"),(0,l.mergeProps)({ref_for:!0},t.props),{default:(0,l.withCtx)(()=>[(0,l.createTextVNode)((0,l.toDisplayString)(t.props),1)]),_:2},1040))],8,a)),[[c,t.tooltip]])),128)),(0,l.createElementVNode)("button",{onClick:t[0]||(t[0]=(...e)=>i.hidePopup&&i.hidePopup(...e))},"ОК")],4)}],["__scopeId","data-v-1591e2fe"]])},3733:(e,t,o)=>{o.d(t,{A:()=>s});var l=o(2015);const a={class:"text-color-editor"},n={name:"TextColorEditor",props:{modelValue:{type:String}},data:()=>({defaultColor:"#000000"}),computed:{textColor:{get(){return this.modelValue||"#000000"},set(e){this.$emit("update:modelValue",e)}}},emits:["update:modelValue"]},s=(0,o(6262).A)(n,[["render",function(e,t,o,n,s,i){return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.withDirectives)((0,l.createElementVNode)("input",{type:"color",id:"colorPicker","onUpdate:modelValue":t[0]||(t[0]=e=>i.textColor=e)},null,512),[[l.vModelText,i.textColor]])])}],["__scopeId","data-v-73332108"]])},4001:(e,t,o)=>{o.d(t,{A:()=>c});var l=o(2015);const a={style:{display:"block",width:"100%"}},n={class:"overleyicon"},s={key:1,style:{display:"flex","justify-content":"center"}},i={name:"AssetView",props:{asset:{type:Object}},methods:{async showLib(){const e=await this.$app.assets.selectAsset(["hdr"]);this.$emit("setasset",e)}}},c=(0,o(6262).A)(i,[["render",function(e,t,o,i,c,r){const d=(0,l.resolveDirective)("tooltip");return(0,l.openBlock)(),(0,l.createElementBlock)(l.Fragment,null,[(0,l.createCommentVNode)("assethdr"),(0,l.createElementVNode)("div",a,[(0,l.createElementVNode)("div",n,[o.asset?(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("div",{key:0,onClick:t[0]||(t[0]=(...e)=>r.showLib&&r.showLib(...e)),class:"text"},[(0,l.createTextVNode)((0,l.toDisplayString)(o.asset.name||o.asset.uid),1)])),[[d,o.asset.url]]):((0,l.openBlock)(),(0,l.createElementBlock)("div",s,[(0,l.createElementVNode)("button",{onClick:t[1]||(t[1]=(...e)=>r.showLib&&r.showLib(...e))},"Select")]))])]),(0,l.createCommentVNode)("//assethdr")],2112)}]])},4831:(e,t,o)=>{o.d(t,{A:()=>c});var l=o(2015);const a={class:"block_container"},n={key:0,class:"editrow"},s={class:"label"},i={name:"LabelEditor",props:{modelValue:{type:String,default:""},label:{type:String,default:""},tooltip:{type:String,default:""}},data:()=>({editMode:!1,val:""}),watch:{modelValue(){this.editMode=!1}},methods:{startEdit(){this.val=this.modelValue,this.editMode=!0,this.$nextTick(()=>{this.$refs.editInput.focus()})},complete(e){console.log(e),e.ctrlKey||e.shiftKey||(e&&e.preventDefault(),this.$emit("update:modelValue",this.val),this.editMode=!1)},endEdit(){return this.editMode?(this.editMode=!1,this.val):this.modelValue}},mounted(){}},c=(0,o(6262).A)(i,[["render",function(e,t,o,i,c,r){const d=(0,l.resolveComponent)("icon"),p=(0,l.resolveDirective)("tooltip");return(0,l.openBlock)(),(0,l.createElementBlock)("div",null,[(0,l.createElementVNode)("div",a,[e.editMode?((0,l.openBlock)(),(0,l.createElementBlock)("div",n,[(0,l.withDirectives)((0,l.createElementVNode)("textarea",{rows:"10",cols:"33",ref:"editInput",class:"editinput","onUpdate:modelValue":t[0]||(t[0]=t=>e.val=t),onKeyup:t[1]||(t[1]=(0,l.withKeys)((...e)=>r.complete&&r.complete(...e),["enter"]))},null,544),[[l.vModelText,e.val]]),(0,l.createVNode)(d,{class:"okicon",value:"checkmark",size:"1em",onClick:r.complete},null,8,["onClick"])])):(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("div",{class:"editrow",onClick:t[2]||(t[2]=(...e)=>r.startEdit&&r.startEdit(...e)),key:"tooltip-"+o.modelValue},[(0,l.createElementVNode)("span",s,(0,l.toDisplayString)(o.modelValue),1),(0,l.createVNode)(d,{value:"pencil",size:"1em"})])),[[p,o.tooltip||o.modelValue]])])])}],["__scopeId","data-v-44f8aea6"]])},4910:(e,t,o)=>{o.d(t,{A:()=>d});var l=o(2015);const a={style:{display:"flex",gap:"7px"}},n={style:{display:"flex",gap:"3px"}},s={style:{display:"flex",gap:"3px"}},i={style:{display:"flex",gap:"3px"}};var c=o(4875);const r={props:{modelValue:{type:Object,default:new c.Vector3},decimals:{type:Number,default:4},step:{type:Number,default:1}},computed:{value:{get(){return this.modelValue}}},methods:{updateValue(e,t){"number"==typeof t&&this.$emit("update:modelValue",{...this.value,[e]:t})}}},d=(0,o(6262).A)(r,[["render",function(e,t,o,c,r,d){const p=(0,l.resolveComponent)("Float");return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createElementVNode)("div",n,[t[6]||(t[6]=(0,l.createElementVNode)("label",{style:{"font-size":"1.2em"}},"x",-1)),(0,l.createVNode)(p,{modelValue:d.value.x,"onUpdate:modelValue":[t[0]||(t[0]=e=>d.value.x=e),t[1]||(t[1]=e=>d.updateValue("x",e))],decimals:o.decimals,step:o.step},null,8,["modelValue","decimals","step"])]),(0,l.createElementVNode)("div",s,[t[7]||(t[7]=(0,l.createElementVNode)("label",{style:{"font-size":"1.2em"}},"y",-1)),(0,l.createVNode)(p,{modelValue:d.value.y,"onUpdate:modelValue":[t[2]||(t[2]=e=>d.value.y=e),t[3]||(t[3]=e=>d.updateValue("y",e))],decimals:o.decimals,step:o.step},null,8,["modelValue","decimals","step"])]),(0,l.createElementVNode)("div",i,[t[8]||(t[8]=(0,l.createElementVNode)("label",{style:{"font-size":"1.2em"}},"z",-1)),(0,l.createVNode)(p,{modelValue:d.value.z,"onUpdate:modelValue":[t[4]||(t[4]=e=>d.value.z=e),t[5]||(t[5]=e=>d.updateValue("z",e))],decimals:o.decimals,step:o.step},null,8,["modelValue","decimals","step"])])])}]])},5385:(e,t,o)=>{o.d(t,{A:()=>m});var l=o(2015);const a={class:"form-container"},n={class:"info"},s={class:"row"},i={class:"rowvalue"},c={class:"line"},r=["src"],d={key:0},p={name:"AssetView",props:{selected:{type:Object,default:{name:"-"}},progress:{type:Number}},computed:{types(){return this.$app.assets.types},inspector(){return this.$app.inspector.blocksFor(["asset",this.selected.type]).filter(e=>!e.inspectorOnly)}},methods:{updateInspector(e){this.inspector=this.$app.inspector.blocksFor(this.selected.getTypes())},onChange(e,t){this.$emit("edit",e,t)},end(){this.$emit("edit","name",this.$refs.nameeditor.endEdit()),this.$emit("edit","url",this.$refs.urleditor.endEdit())},async onComponentUpdate(e,t){if(t.onupdate)await t.onupdate(this.selected,e,t,()=>{this.$emit("edit",t.prop,e)});else{const o=t.prop.split(".");let l=o[0],a=this.selected;for(let e=0;e<o.length-1;e++)a=a[o[e]],l=o[e+1];a[l]=e,this.$emit("edit",t.prop,e)}},onComponentChange(){_saveHandler(this.selected)}}},m=(0,o(6262).A)(p,[["render",function(e,t,o,p,m,u){return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createElementVNode)("div",n,[(0,l.createElementVNode)("div",s,[t[0]||(t[0]=(0,l.createElementVNode)("div",{class:"rowlabel"},"Name",-1)),(0,l.createElementVNode)("div",i,(0,l.toDisplayString)(o.selected.name),1)]),(0,l.createElementVNode)("div",c,[(0,l.createElementVNode)("img",{src:o.selected.images[0].url},null,8,r)])]),(0,l.createElementVNode)("div",null,[o.progress>0?((0,l.openBlock)(),(0,l.createElementBlock)("div",d,(0,l.toDisplayString)(o.progress),1)):(0,l.createCommentVNode)("v-if",!0)])])}],["__scopeId","data-v-321414c5"]])},5499:(e,t,o)=>{o.d(t,{A:()=>i});var l=o(2015);const a={key:0,class:"menulabel"},n={key:1,class:"btnicon"},s={name:"SimpleButton",props:{label:{type:String},icon:{type:Object},tooltip:{type:String},handlers:{type:Object,required:!0}},methods:{onClick(){this.handlers?.click?this.handlers.click(this):this.$emit("click",this)}}},i=(0,o(6262).A)(s,[["render",function(e,t,o,s,i,c){const r=(0,l.resolveComponent)("icon"),d=(0,l.resolveDirective)("tooltip");return(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("button",{class:"small-btn simple",onClick:t[0]||(t[0]=(...e)=>c.onClick&&c.onClick(...e))},[o.label?((0,l.openBlock)(),(0,l.createElementBlock)("div",a,(0,l.toDisplayString)(o.label),1)):(0,l.createCommentVNode)("v-if",!0),o.icon?((0,l.openBlock)(),(0,l.createElementBlock)("div",n,[(0,l.createVNode)(r,{size:o.icon.size||"100%",value:o.icon.value},null,8,["size","value"])])):(0,l.createCommentVNode)("v-if",!0)])),[[d,o.tooltip]])}],["__scopeId","data-v-7f0518be"]])},5805:(e,t,o)=>{o.d(t,{A:()=>r});var l=o(2015);const a={key:0},n={key:1},s={key:2,class:"child-list"},i={key:0},c={name:"TreeLi",props:["value"],data:()=>({childshow:!1})},r=(0,o(6262).A)(c,[["render",function(e,t,o,c,r,d){const p=(0,l.resolveComponent)("TreeLi",!0);return(0,l.openBlock)(),(0,l.createElementBlock)("li",null,[o.value.children?(0,l.createCommentVNode)("v-if",!0):((0,l.openBlock)(),(0,l.createElementBlock)("div",a,[...t[1]||(t[1]=[(0,l.createElementVNode)("svg",{class:"edicon ics-spinner10"},[(0,l.createElementVNode)("use",{"xlink:href":"#ics-spinner10"})],-1)])])),o.value.children?((0,l.openBlock)(),(0,l.createElementBlock)("div",s,[(0,l.createElementVNode)("span",{onClick:t[0]||(t[0]=t=>e.childshow=!e.childshow)},[t[3]||(t[3]=(0,l.createElementVNode)("input",{type:"checkbox"},null,-1)),(0,l.createTextVNode)((0,l.toDisplayString)(o.value.name),1)]),e.childshow?((0,l.openBlock)(),(0,l.createElementBlock)("ul",i,[((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(o.value.children,(e,t)=>((0,l.openBlock)(),(0,l.createBlock)(p,{key:t,value:e},null,8,["value"]))),128))])):(0,l.createCommentVNode)("v-if",!0)])):((0,l.openBlock)(),(0,l.createElementBlock)("span",n,[t[2]||(t[2]=(0,l.createElementVNode)("input",{type:"checkbox"},null,-1)),(0,l.createTextVNode)((0,l.toDisplayString)(o.value.name),1)]))])}],["__scopeId","data-v-562df7a6"]])},5982:(e,t,o)=>{o.d(t,{A:()=>c});var l=o(2015);const a={style:{display:"grid","grid-template-columns":"96px 1fr"}},n=["value"],s={key:1},i={name:"ModelTypes",data:()=>({types:["model","camera","chart3d"]}),props:{selected:{type:Object}}},c=(0,o(6262).A)(i,[["render",function(e,t,o,i,c,r){return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[t[1]||(t[1]=(0,l.createElementVNode)("div",null,"Тип:",-1)),c.types.includes(o.selected.type)?(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("select",{key:0,class:"typeslist","onUpdate:modelValue":t[0]||(t[0]=e=>o.selected.type=e)},[((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(c.types,e=>((0,l.openBlock)(),(0,l.createElementBlock)("option",{value:e},(0,l.toDisplayString)(e),9,n))),256))],512)),[[l.vModelSelect,o.selected.type]]):((0,l.openBlock)(),(0,l.createElementBlock)("div",s,(0,l.toDisplayString)(o.selected.type),1))])}]])},6222:(e,t,o)=>{o.d(t,{A:()=>i});var l=o(2015);const a=["fill","x","href"];var n=o(1291);const s={name:"Icon",props:{value:{type:String,default:()=>"icon-checkmark"},size:{type:String,default:()=>null},color:{type:String,default:()=>null},offset:{type:Number}},computed:{style(){return this.size?{width:`${this.size}`,height:`${this.size}`}:{width:"1em",height:"1em"}},val(){return`${n}#s-${this.value.replace("p-","")}`}}},i=(0,o(6262).A)(s,[["render",function(e,t,o,n,s,i){return(0,l.openBlock)(),(0,l.createElementBlock)("svg",{preserveAspectRatio:"xMidYMid meet",class:"svgicon",style:(0,l.normalizeStyle)(i.style)},[(0,l.createElementVNode)("use",{class:"svguse",width:"100%",height:"100%",viewBox:"0 0 32 32",fill:o.color,x:o.offset,href:i.val},[(0,l.createElementVNode)("title",null,[(0,l.renderSlot)(e.$slots,"default",{},void 0,!0)])],8,a)],4)}],["__scopeId","data-v-a13b2ade"]])},6347:(e,t,o)=>{o.d(t,{A:()=>r});var l=o(2015);const a={class:"itemElement"},n={class:"itemrow"},s={class:"itemrow"},i={class:"itemrow"},c={props:{item:{type:Object}}},r=(0,o(6262).A)(c,[["render",function(e,t,o,c,r,d){return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createElementVNode)("div",n,(0,l.toDisplayString)(o.item.title),1),(0,l.createElementVNode)("div",s,(0,l.toDisplayString)(o.item.price),1),(0,l.createElementVNode)("div",i,(0,l.toDisplayString)(o.item.autor?.name),1)])}]])},6416:(e,t,o)=>{o.d(t,{A:()=>r});var l=o(2015);const a={class:"container"},n={class:"block"},s={class:"label"},i={class:"value"},c={data:()=>({result:""}),props:{text:{type:String}},emits:["update:text"]},r=(0,o(6262).A)(c,[["render",function(e,t,o,c,r,d){return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createElementVNode)("div",n,[(0,l.createElementVNode)("div",s,(0,l.toDisplayString)(o.text),1),(0,l.createElementVNode)("div",i,[(0,l.withDirectives)((0,l.createElementVNode)("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>r.result=e),onInput:t[1]||(t[1]=t=>e.$emit("update:text",r.result))},null,544),[[l.vModelText,r.result]])])])])}],["__scopeId","data-v-7a7463f6"]])},6471:(e,t,o)=>{o.d(t,{A:()=>k});var l=o(2015);const a={style:{display:"flex","flex-direction":"column"}},n={style:{display:"flex","justify-content":"center","margin-top":"10px"}},s={class:"assetblock"},i={key:0,class:"short"},c={class:"short-text"},r={key:0,class:"assetcontent"},d={class:"assetrow"},p={class:"assetrow"},m={name:"AssetView",props:{asset:{type:Object},label:{type:String}},mounted(){},data:()=>({view:!0}),computed:{src(){return this.$app.assets.list.find(e=>e.uid===this.asset.uid)},types(){return this.$app.assets.types}}};var u=o(6262);const v=(0,u.A)(m,[["render",function(e,t,o,a,n,m){const u=(0,l.resolveComponent)("icon"),v=(0,l.resolveDirective)("tooltip");return(0,l.openBlock)(),(0,l.createElementBlock)("div",s,[(0,l.createElementVNode)("div",{onClick:t[0]||(t[0]=e=>n.view=!n.view),class:"title"},[(0,l.createCommentVNode)(' <div class="label">{{ label }}</div> '),n.view?(0,l.createCommentVNode)("v-if",!0):((0,l.openBlock)(),(0,l.createElementBlock)("div",i,[(0,l.createTextVNode)((0,l.toDisplayString)(m.src.uid)+" : "+(0,l.toDisplayString)(m.src.type)+" : ",1),(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("div",c,[(0,l.createTextVNode)((0,l.toDisplayString)(m.src.url),1)])),[[v,m.src.url]])]))]),n.view?((0,l.openBlock)(),(0,l.createElementBlock)("div",r,[(0,l.createElementVNode)("div",d,[(0,l.createElementVNode)("div",null,(0,l.toDisplayString)(m.src.type)+" : "+(0,l.toDisplayString)(m.src.name||m.src.uid),1),(0,l.createElementVNode)("div",null,[(0,l.createElementVNode)("button",{onClick:t[1]||(t[1]=t=>e.$emit("remove",o.asset))},[(0,l.createVNode)(u,{value:"bin",size:"1em"})])])]),(0,l.createCommentVNode)(' <div class="assetrow">\r\n                <div>URL:</div>\r\n                <div class="rowcontent">\r\n                    <LabelEdit :value="src.url"></LabelEdit>\r\n                </div>\r\n            </div> '),(0,l.createCommentVNode)(' <div class="assetrow" v-for="(param, key) in src.parameters">\r\n            <div>{{ key }}</div><div>{{ param }}</div>\r\n        </div> '),((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(o.asset.parameters,(e,o)=>((0,l.openBlock)(),(0,l.createElementBlock)("div",p,[(0,l.createElementVNode)("div",null,(0,l.toDisplayString)(o),1),t[2]||(t[2]=(0,l.createElementVNode)("div",{class:"cell"},[(0,l.createCommentVNode)(' <LabelEdit @update:value="asset.parameters[key] = $event; $emit(\'changed\')" :value="param">\r\n                    </LabelEdit> ')],-1))]))),256))])):(0,l.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-eca41270"]]),h={name:"AssetsView",data:()=>({selectedAsset:null,assetsData:{offtypes:["hdr"]}}),props:{modelValue:{type:Object},value:{type:Object}},methods:{async removeAsset(e){await this.$app.elements.removeAsset(this.value,e),this.$app.toasts.add({message:"Ресурс удален из модели"})},saveProp(){this.$app.toasts.add({message:"Параметр ресурса в элементе изменен"}),this.$app.engine.getManager().UpdateElement(this.value.path,{assets:this.value.assets})},async selectAsset(){const e=await this.$app.assets.selectAsset(["hdr","texture"]);if(e){const t=this.$app.engine.getManager("AssetsManager").GetAsset(e.uid);console.log(this.value),console.log(t),this.$app.assets.setAsset(this.value,t),this.$app.toasts.add({message:"Ресурс добавлен в модель"})}}},computed:{list(){return this.value?.data?.assets||this.value?.assets||[]}},components:{AssetView:v}},k=(0,u.A)(h,[["render",function(e,t,o,s,i,c){const r=(0,l.resolveComponent)("AssetView"),d=(0,l.resolveComponent)("icon"),p=(0,l.resolveDirective)("tooltip");return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[t[1]||(t[1]=(0,l.createElementVNode)("div",null,"Ресурсы",-1)),((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(c.list,(e,t)=>((0,l.openBlock)(),(0,l.createBlock)(r,{asset:e,key:t,onRemove:c.removeAsset,onChanged:c.saveProp},null,8,["asset","onRemove","onChanged"]))),128)),(0,l.createElementVNode)("div",n,[(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("button",{class:"button normal",onClick:t[0]||(t[0]=(...e)=>c.selectAsset&&c.selectAsset(...e))},[(0,l.createVNode)(d,{value:"stack",size:"0.75em"})])),[[p,"Ресурсы"]])])])}]])},6667:(e,t,o)=>{o.d(t,{A:()=>k});var l=o(2015);const a={class:"importer"},n={class:"row"},s={class:"row"},i={class:"label"},c={class:"row"},r={class:"label"},d={class:"row"},p={class:"label"},m={class:"row"},u={class:"label"};var v=o(4546);const h={name:"Importer",data:()=>({merge:!1,assets:new Set,models:new Set,slides:new Set,modules:new Set}),methods:{onChangeElements(e){e.isSelected?this.models.add(e.path):this.models.delete(e.path),this.$emit("changelist",{assets:this.assets,models:this.models,slides:this.slides,modules:this.modules})},onChangeModules(e){e.isSelected?this.modules.add(e.name):this.modules.delete(e.name),this.$emit("changelist",{assets:this.assets,models:this.models,slides:this.slides,modules:this.modules})},onChangeSlides(e){e.isSelected?this.slides.add(e.uid):this.slides.delete(e.uid),this.$emit("changelist",{assets:this.assets,models:this.models,slides:this.slides,modules:this.modules})},onChangeAssets(e){e.isgroup?e.isSelected?e.children.map(e=>this.assets.add(e.uid)):this.assets.clear():e.isSelected?this.assets.add(e.uid):this.assets.delete(e.uid),this.$emit("changelist",{assets:this.assets,models:this.models,slides:this.slides,modules:this.modules})}},props:{project:{type:Object}},components:{TreeView:v.A},computed:{assetsTree(){return this.project.assets.reduce((e,t)=>{let o=e.find(e=>e.type===t.type);return o||(o={isgroup:!0,type:t.type,children:[],uid:t.type},e.push(o)),o.children.push(t),e},[])}}},k=(0,o(6262).A)(h,[["render",function(e,t,o,v,h,k){const y=(0,l.resolveComponent)("TreeView");return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createElementVNode)("div",n,[(0,l.createElementVNode)("div",null,[t[2]||(t[2]=(0,l.createTextVNode)("Импортировать в текущий проект ",-1)),(0,l.withDirectives)((0,l.createElementVNode)("input",{type:"checkbox",onChange:t[0]||(t[0]=t=>e.$emit("options",{merge:h.merge})),"onUpdate:modelValue":t[1]||(t[1]=e=>h.merge=e)},null,544),[[l.vModelCheckbox,h.merge]])])]),(0,l.createElementVNode)("div",s,[t[3]||(t[3]=(0,l.createElementVNode)("div",{class:"title"},"Assets",-1)),(0,l.createElementVNode)("div",null,[(0,l.createVNode)(y,{childsFiled:"children",tree:k.assetsTree,onChangeSelect:k.onChangeAssets},{label:(0,l.withCtx)(({node:e})=>[(0,l.createElementVNode)("div",i,(0,l.toDisplayString)(e.name||e.uid),1)]),_:1},8,["tree","onChangeSelect"])])]),(0,l.createElementVNode)("div",c,[t[4]||(t[4]=(0,l.createElementVNode)("div",{class:"title"},"Модули",-1)),(0,l.createElementVNode)("div",null,[(0,l.createVNode)(y,{childsFiled:"childrenz",tree:o.project.modules,onChangeSelect:k.onChangeModules},{label:(0,l.withCtx)(({node:e})=>[(0,l.createElementVNode)("div",r,(0,l.toDisplayString)(e.name||e.uid),1)]),_:1},8,["tree","onChangeSelect"])])]),(0,l.createElementVNode)("div",d,[t[5]||(t[5]=(0,l.createElementVNode)("div",{class:"title"},"Элементы",-1)),(0,l.createElementVNode)("div",null,[(0,l.createVNode)(y,{childsFiled:"childrenz",tree:o.project.models,onChangeSelect:k.onChangeElements},{label:(0,l.withCtx)(({node:e})=>[(0,l.createElementVNode)("div",p,(0,l.toDisplayString)(e.name||e.uid),1)]),_:1},8,["tree","onChangeSelect"])])]),(0,l.createElementVNode)("div",m,[t[6]||(t[6]=(0,l.createElementVNode)("div",{class:"title"},"Слайды",-1)),(0,l.createElementVNode)("div",null,[(0,l.createVNode)(y,{childsFiled:"childrenz",tree:o.project.slides,onChangeSelect:k.onChangeSlides},{label:(0,l.withCtx)(({node:e})=>[(0,l.createElementVNode)("div",u,(0,l.toDisplayString)(e.name||e.uid),1)]),_:1},8,["tree","onChangeSelect"])])])])}]])},7187:(e,t,o)=>{o.d(t,{A:()=>k});var l=o(2015);const a={class:"container"},n={class:"list-container"},s={class:"list-head"},i={class:"list-slider"},c={class:"grid"},r=["onClick"],d={class:"grid-item"},p={class:"textwrap tcenter w100"},m={class:"textwrap w100"},u={style:{display:"flex","justify-content":"center"}},v={key:0,class:"extension"},h={name:"ItemsLib",props:{selected:{type:Object},list:{type:Array},head:{type:Object,default:{}},styles:{type:Object,default:{item:{width:"72px",height:"72px"}}},icons:{type:Object,default:{}},options:{type:Object,default:{id:"uid",name:"name",icon:"icon",icontip:"tooltip"}}},mounted(){this.$emit("open")}},k=(0,o(6262).A)(h,[["render",function(e,t,o,h,k,y){const V=(0,l.resolveComponent)("icon"),f=(0,l.resolveDirective)("tooltip");return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createElementVNode)("div",n,[(0,l.createElementVNode)("div",s,[(0,l.renderSlot)(e.$slots,"head",(0,l.normalizeProps)((0,l.guardReactiveProps)(o.head)),()=>[(0,l.createElementVNode)("div",null,(0,l.toDisplayString)(o.head.title),1)],!0)]),(0,l.createElementVNode)("div",i,[(0,l.createElementVNode)("div",c,[((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(o.list,(t,a)=>((0,l.openBlock)(),(0,l.createElementBlock)("div",{onClick:o=>e.$emit("selected",t),class:(0,l.normalizeClass)([{selected:o.selected===t},"grid-element"])},[(0,l.renderSlot)(e.$slots,"item",{item:t},()=>[(0,l.createElementVNode)("div",d,[(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("div",p,[(0,l.createTextVNode)((0,l.toDisplayString)(t[o.options.name]||t[o.options.id]),1)])),[[f,t[o.options.name]||t[o.options.id]]]),(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("div",m,[(0,l.createTextVNode)((0,l.toDisplayString)(t.url),1)])),[[f,t.url]]),(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("div",u,[(0,l.createVNode)(V,{value:o.icons[t.type],size:"2em"},null,8,["value"])])),[[f,t[o.options.icontip]]])])],!0)],10,r))),256))])])]),o.selected?((0,l.openBlock)(),(0,l.createElementBlock)("div",v,[(0,l.renderSlot)(e.$slots,"edit",{selected:o.selected},()=>[(0,l.createTextVNode)((0,l.toDisplayString)(e.$slots),1)],!0)])):(0,l.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-045cf3e6"]])},7520:(e,t,o)=>{o.d(t,{A:()=>m});var l=o(2015);const a={class:"transform-container"},n={class:"label"},s={class:"transforms"},i={key:1},c={key:3},r={key:5};var d=o(5216);const p={props:{modelValue:{type:Object,default:{}},value:{type:Object,default:{}},target:{type:Object}},beforeUnmount(){this.value&&d.A.Transformer.removeEventListener("objectChange",this.onTransformerEvent)},mounted(){d.A.Transformer.addEventListener("objectChange",this.onTransformerEvent)},methods:{assignFromModel(e){this.target[e]={x:this.value[e].x,y:this.value[e].y,z:this.value[e].z}},removeTransform(e){this.target[e]&&(delete this.target[e],"rotation"===e&&this.value.rotation.set(0,0,0,"XYZ"),"position"===e&&this.value.position.set(0,0,0),"scale"===e&&this.value.scale.set(1,1,1),this.$emit("save"))},onTransformerEvent(e){switch(d.A.Transformer.mode){case"translate":this.target.position={...this.value.position};break;case"rotate":this.target.rotation={x:this.value.rotation.x,y:this.value.rotation.y,z:this.value.rotation.z};break;case"scale":this.target.scale={...this.value.scale}}this.$emit("save")},async onChangeTransform(e,t){switch(e){case"position":this.value.position.copy(t),this.target.position={x:t.x,y:t.y,z:t.z};break;case"rotation":this.value.rotation.set(t.x,t.y,t.z,"XYZ"),this.target.rotation={x:t.x,y:t.y,z:t.z};break;case"scale":this.value.scale.copy(t),this.target.scale={x:t.x,y:t.y,z:t.z}}this.$emit("save")}}},m=(0,o(6262).A)(p,[["render",function(e,t,o,d,p,m){const u=(0,l.resolveComponent)("icon"),v=(0,l.resolveComponent)("V3block"),h=(0,l.resolveComponent)("EulerBlock"),k=(0,l.resolveDirective)("tooltip");return(0,l.openBlock)(),(0,l.createElementBlock)("div",null,[(0,l.createElementVNode)("div",a,[(0,l.createElementVNode)("div",n,[(0,l.createCommentVNode)("v-if",!0)]),(0,l.createElementVNode)("div",s,[o.target.position?((0,l.openBlock)(),(0,l.createBlock)(v,{key:0,"onUpdate:modelValue":t[3]||(t[3]=e=>m.onChangeTransform("position",e)),label:"Position",step:.1,modelValue:o.target.position,decimals:4},{tools:(0,l.withCtx)(()=>[(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("button",{class:"square",onClick:t[2]||(t[2]=e=>m.removeTransform("position"))},[(0,l.createVNode)(u,{value:"bin",size:"1em"})])),[[k,"Delete position"]])]),_:1},8,["modelValue"])):((0,l.openBlock)(),(0,l.createElementBlock)("div",i,[(0,l.createElementVNode)("button",{class:"copybutton",onClick:t[4]||(t[4]=e=>m.assignFromModel("position"))},"Copy model position")])),o.target.rotation?((0,l.openBlock)(),(0,l.createBlock)(h,{key:2,"onUpdate:rotation":t[6]||(t[6]=e=>m.onChangeTransform("rotation",e)),label:"Rotation",step:1,decimals:0,rotation:o.target.rotation},{tools:(0,l.withCtx)(()=>[(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("button",{class:"square",onClick:t[5]||(t[5]=e=>m.removeTransform("rotation"))},[(0,l.createVNode)(u,{value:"bin",size:"1em"})])),[[k,"Remove rotation"]])]),_:1},8,["rotation"])):((0,l.openBlock)(),(0,l.createElementBlock)("div",c,[(0,l.createElementVNode)("button",{class:"copybutton",onClick:t[7]||(t[7]=e=>m.assignFromModel("rotation"))},"Copy model rotation")])),o.target.scale?((0,l.openBlock)(),(0,l.createBlock)(v,{key:4,"onUpdate:modelValue":t[9]||(t[9]=e=>m.onChangeTransform("scale",e)),label:"Scale",step:.01,modelValue:o.target.scale},{tools:(0,l.withCtx)(()=>[(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("button",{class:"square",onClick:t[8]||(t[8]=e=>m.removeTransform("scale"))},[(0,l.createVNode)(u,{value:"bin",size:"1em"})])),[[k,"Remove size"]])]),_:1},8,["modelValue"])):((0,l.openBlock)(),(0,l.createElementBlock)("div",r,[(0,l.createElementVNode)("button",{class:"copybutton",onClick:t[10]||(t[10]=e=>m.assignFromModel("scale"))},"Copy model scale")]))])])])}]])},7624:(e,t,o)=>{o.d(t,{A:()=>d});var l=o(2015);const a={class:"collapsible-panel"},n={class:"panel-header"},s={key:1,class:"toggle-icon"},i={class:"header-content"},c={class:"panel-content"},r={__name:"inspectorpanel",props:{label:{type:String,required:!0},tooltip:{type:String,default:""},stat:{type:Boolean,default:!1}},setup(e){const t=(0,l.useSlots)(),o=(0,l.ref)(!1),r=(0,l.ref)(null),d=()=>{t.content&&(o.value=!o.value)};return(p,m)=>{const u=(0,l.resolveDirective)("tooltip");return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createElementVNode)("div",n,[(0,l.unref)(t).content?((0,l.openBlock)(),(0,l.createElementBlock)("span",{key:0,onClick:d,class:(0,l.normalizeClass)(["toggle-icon",{open:o.value}])},"▼",2)):((0,l.openBlock)(),(0,l.createElementBlock)("span",s)),(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("div",i,[(0,l.createElementVNode)("span",{onClick:d,class:"label"},(0,l.toDisplayString)(e.label),1),(0,l.createVNode)(l.Transition,{name:"fade"},{default:(0,l.withCtx)(()=>[(0,l.renderSlot)(p.$slots,"head",{label:e.label},()=>[(0,l.withDirectives)((0,l.createElementVNode)("div",{ref_key:"panelHeader",ref:r},null,512),[[l.vShow,!o.value]])])]),_:3})])),[[u,e.tooltip]]),(0,l.renderSlot)(p.$slots,"icons",{stat:e.stat})]),(0,l.createVNode)(l.Transition,{name:"slide",persisted:""},{default:(0,l.withCtx)(()=>[(0,l.withDirectives)((0,l.createElementVNode)("div",c,[(0,l.renderSlot)(p.$slots,"content")],512),[[l.vShow,o.value]])]),_:3})])}}},d=(0,o(6262).A)(r,[["__scopeId","data-v-11caa10e"]])},7872:(e,t,o)=>{o.d(t,{A:()=>p});var l=o(2015);const a={class:"dimension-control"},n={class:"controls"},s={class:"control-group"},i={class:"control-row"},c={class:"control-group"},r={class:"control-row"},d={name:"DimensionControl",props:{value:{type:Object,default:{}},target:{type:Object}},emits:["update:target"],setup(e,{emit:t}){const o=e=>{if("number"==typeof e)return{value:e,unit:"px"};if("auto"===e||"fit-content"===e||"min-content"===e||"max-content"===e)return{value:0,unit:e};const t=e.match(/^([\d.]+)(\D+)$/);return t?{value:parseFloat(t[1]),unit:t[2]}:{value:0,unit:"px"}},a=o(e.target.width||"100px"),n=(0,l.ref)(a.value),s=(0,l.ref)(a.unit),i=o(e.target.height||"100px"),c=(0,l.ref)(i.value),r=(0,l.ref)(i.unit),d=(e,t)=>["auto","fit-content","min-content","max-content","none"].includes(t)?t:`${e}${t}`;return(0,l.watch)([n,s],()=>{t("update:target","width",d(n.value,s.value))}),(0,l.watch)([c,r],()=>{t("update:target","height",d(c.value,r.value))}),(0,l.watch)(()=>e.target.width,e=>{const t=o(e||"100px");n.value=t.value,s.value=t.unit}),(0,l.watch)(()=>e.target.height,e=>{const t=o(e||"100px");c.value=t.value,r.value=t.unit}),{widthValue:n,widthUnit:s,heightValue:c,heightUnit:r}}},p=(0,o(6262).A)(d,[["render",function(e,t,o,d,p,m){return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createElementVNode)("div",n,[(0,l.createElementVNode)("div",s,[t[5]||(t[5]=(0,l.createElementVNode)("span",null,"Width",-1)),(0,l.createElementVNode)("div",i,[(0,l.withDirectives)((0,l.createElementVNode)("select",{"onUpdate:modelValue":t[0]||(t[0]=e=>d.widthUnit=e)},[...t[4]||(t[4]=[(0,l.createStaticVNode)('<option value="px" data-v-f12dc314>px</option><option value="%" data-v-f12dc314>%</option><option value="em" data-v-f12dc314>em</option><option value="rem" data-v-f12dc314>rem</option><option value="vh" data-v-f12dc314>vh</option><option value="vw" data-v-f12dc314>vw</option><option value="auto" data-v-f12dc314>auto</option><option value="fit-content" data-v-f12dc314>fit-content</option><option value="min-content" data-v-f12dc314>min-content</option><option value="max-content" data-v-f12dc314>max-content</option>',10)])],512),[[l.vModelSelect,d.widthUnit]]),["auto","fit-content","min-content","max-content"].includes(d.widthUnit)?(0,l.createCommentVNode)("v-if",!0):(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("input",{key:0,"onUpdate:modelValue":t[1]||(t[1]=e=>d.widthValue=e),type:"number",min:"0"},null,512)),[[l.vModelText,d.widthValue,void 0,{number:!0}]])])]),(0,l.createElementVNode)("div",c,[t[7]||(t[7]=(0,l.createElementVNode)("span",null,"Height",-1)),(0,l.createElementVNode)("div",r,[(0,l.withDirectives)((0,l.createElementVNode)("select",{"onUpdate:modelValue":t[2]||(t[2]=e=>d.heightUnit=e)},[...t[6]||(t[6]=[(0,l.createStaticVNode)('<option value="px" data-v-f12dc314>px</option><option value="%" data-v-f12dc314>%</option><option value="em" data-v-f12dc314>em</option><option value="rem" data-v-f12dc314>rem</option><option value="vh" data-v-f12dc314>vh</option><option value="vw" data-v-f12dc314>vw</option><option value="auto" data-v-f12dc314>auto</option><option value="fit-content" data-v-f12dc314>fit-content</option><option value="min-content" data-v-f12dc314>min-content</option><option value="max-content" data-v-f12dc314>max-content</option>',10)])],512),[[l.vModelSelect,d.heightUnit]]),["auto","fit-content","min-content","max-content"].includes(d.heightUnit)?(0,l.createCommentVNode)("v-if",!0):(0,l.withDirectives)(((0,l.openBlock)(),(0,l.createElementBlock)("input",{key:0,"onUpdate:modelValue":t[3]||(t[3]=e=>d.heightValue=e),type:"number",min:"0"},null,512)),[[l.vModelText,d.heightValue,void 0,{number:!0}]])])])])])}],["__scopeId","data-v-f12dc314"]])},8179:(e,t,o)=>{o.d(t,{A:()=>c});var l=o(2015);const a={class:"container"},n={class:"block"},s={class:"label"},i={data:()=>({result:""}),props:{text:{type:String}}},c=(0,o(6262).A)(i,[["render",function(e,t,o,i,c,r){return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createElementVNode)("div",n,[(0,l.createElementVNode)("div",s,(0,l.toDisplayString)(o.text),1)])])}],["__scopeId","data-v-11e695e2"]])},8193:(e,t,o)=>{o.d(t,{A:()=>r});var l=o(2015);const a={style:{display:"flex","align-items":"center",gap:"1px","flex-direction":"column"}},n={key:0,class:"tools"},s={key:1,class:"titleinfo"};var i=o(4875);const c={data:()=>({expanded:!0}),props:{label:String,modelValue:{type:Object,default:new i.Vector3},decimals:{type:Number,default:2},step:{type:Number,default:1}},computed:{value:{get(){return this.modelValue}}},watch:{values(e,t){}},methods:{onUpdate(e){const t=new CustomEvent("update:modelValue",{detail:e,bubbles:!1});this.$emit("update:modelValue",t.detail)}}},r=(0,o(6262).A)(c,[["render",function(e,t,o,i,c,r){const d=(0,l.resolveComponent)("V3");return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createElementVNode)("div",{class:(0,l.normalizeClass)(["title",c.expanded?"":"min"])},[(0,l.createElementVNode)("div",{class:"label",onClick:t[0]||(t[0]=e=>c.expanded=!c.expanded)},(0,l.toDisplayString)(c.expanded?"▼":"▶")+" "+(0,l.toDisplayString)(o.label),1),c.expanded?((0,l.openBlock)(),(0,l.createElementBlock)("div",n,[(0,l.renderSlot)(e.$slots,"tools",{},void 0,!0)])):((0,l.openBlock)(),(0,l.createElementBlock)("div",s,"x:"+(0,l.toDisplayString)(o.modelValue.x.toFixed(o.decimals))+",y:"+(0,l.toDisplayString)(o.modelValue.y.toFixed(o.decimals))+",z:"+(0,l.toDisplayString)(o.modelValue.z.toFixed(o.decimals)),1))],2),c.expanded?((0,l.openBlock)(),(0,l.createBlock)(d,{key:0,modelValue:r.value,decimals:o.decimals,step:o.step,"onUpdate:modelValue":r.onUpdate},null,8,["modelValue","decimals","step","onUpdate:modelValue"])):(0,l.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-6e23d76e"]])},8287:(e,t,o)=>{o.d(t,{A:()=>d});var l=o(2015);const a={class:"modal-header"},n={class:"modal-content"},s=["innerHTML"],i={class:"modal-footer"},c=["disabled","onClick"],r={computed:{modal(){return this.$app.modal},header(){return this.modal.header},content(){return this.modal.content},footer(){return this.modal.footer}},methods:{onSelf(){this.modal.values.closable&&this.modal.close()},onClick(e){"function"==typeof e&&e()},closeModal(e){"function"!=typeof e?this.modal.close():e()}}},d=(0,o(6262).A)(r,[["render",function(e,t,o,r,d,p){return(0,l.openBlock)(),(0,l.createElementBlock)("div",{class:"modal-overlay",onClick:t[3]||(t[3]=(0,l.withModifiers)((...e)=>p.onSelf&&p.onSelf(...e),["self"]))},[(0,l.createElementVNode)("div",{class:"modal",onClick:t[2]||(t[2]=(0,l.withModifiers)(()=>{},["stop"]))},[(0,l.createElementVNode)("header",a,[((0,l.openBlock)(),(0,l.createBlock)((0,l.resolveDynamicComponent)(p.header.component||"div"),(0,l.mergeProps)({class:"header"},p.header.component?p.header:null),{default:(0,l.withCtx)(()=>[(0,l.createElementVNode)("h3",null,(0,l.toDisplayString)(p.header.value),1),(0,l.createElementVNode)("button",{class:"close-btn",onClick:t[0]||(t[0]=e=>p.closeModal(p.header.handler))},"×")]),_:1},16))]),(0,l.createElementVNode)("main",n,[((0,l.openBlock)(),(0,l.createBlock)((0,l.resolveDynamicComponent)(p.content.component||"div"),(0,l.mergeProps)({class:"content"},p.content.component?p.content.props:null,(0,l.toHandlers)(p.content.events||{})),(0,l.createSlots)({default:(0,l.withCtx)(()=>[(0,l.createElementVNode)("div",{class:"content-value",innerHTML:p.content.value||""},null,8,s)]),_:2},[(0,l.renderList)(p.content.slots,(e,t)=>({name:t,fn:(0,l.withCtx)(t=>[((0,l.openBlock)(),(0,l.createBlock)((0,l.resolveDynamicComponent)(e.component),(0,l.mergeProps)(t,(0,l.toHandlers)(e.events||{})),null,16))])}))]),1040))]),(0,l.createElementVNode)("footer",i,[((0,l.openBlock)(),(0,l.createBlock)((0,l.resolveDynamicComponent)(p.footer.component||"div"),(0,l.mergeProps)({class:"footer"},p.footer.component?p.footer.props:null,{onClose:p.closeModal}),{default:(0,l.withCtx)(()=>[p.footer.buttons?((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,{key:0},(0,l.renderList)(p.footer.buttons,e=>((0,l.openBlock)(),(0,l.createElementBlock)("div",null,[e.hidden?(0,l.createCommentVNode)("v-if",!0):((0,l.openBlock)(),(0,l.createElementBlock)("button",{key:0,class:(0,l.normalizeClass)(e.class),disabled:e.disabled,onClick:t=>p.onClick(e.handler)},(0,l.toDisplayString)(e.label||"Close"),11,c))]))),256)):((0,l.openBlock)(),(0,l.createElementBlock)("button",{key:1,class:(0,l.normalizeClass)(p.footer.class),onClick:t[1]||(t[1]=e=>p.closeModal(p.footer.handler))},(0,l.toDisplayString)(p.footer.label||"Close"),3))]),_:1},16,["onClose"]))])])])}],["__scopeId","data-v-38e7d2b0"]])},8493:(e,t,o)=>{o.d(t,{A:()=>p});var l=o(2015);const a={style:{display:"flex","align-items":"center",gap:"3px","flex-direction":"column"}},n={class:"label"},s={key:0,class:"tools"},i={key:1,class:"titleinfo"};var c=o(9338),r=o(4875);const d={data:()=>({expanded:!0}),props:{rotation:{type:Object,default:{x:0,y:0,z:0}},quaternion:Object,label:String,modelValue:Object,decimals:{type:Number,default:2},step:{type:Number,default:1}},methods:{onChangeVal(e){e.x>359&&(e.x=0),e.x<-359&&(e.x=0),e.y>359&&(e.y=0),e.y<-359&&(e.y=0),e.z>359&&(e.z=0),e.z<-359&&(e.z=0);const t=new CustomEvent("update:modelValue",{detail:new r.Euler((0,c.eh)(Math.round(e.x)),(0,c.eh)(Math.round(e.y)),(0,c.eh)(Math.round(e.z)),"XYZ"),bubbles:!1});this.$emit("update:rotation",t.detail)}},computed:{formattedValue:{get(){return{x:Math.round((0,c.xW)(this.rotation.x)),y:Math.round((0,c.xW)(this.rotation.y)),z:Math.round((0,c.xW)(this.rotation.z))}}}}},p=(0,o(6262).A)(d,[["render",function(e,t,o,c,r,d){const p=(0,l.resolveComponent)("V3");return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createElementVNode)("div",{class:(0,l.normalizeClass)(["title",r.expanded?"":"min"]),onClick:t[0]||(t[0]=e=>r.expanded=!r.expanded)},[(0,l.createElementVNode)("div",n,(0,l.toDisplayString)(r.expanded?"▼":"▶")+" "+(0,l.toDisplayString)(o.label),1),r.expanded?((0,l.openBlock)(),(0,l.createElementBlock)("div",s,[(0,l.renderSlot)(e.$slots,"tools",{},void 0,!0)])):((0,l.openBlock)(),(0,l.createElementBlock)("div",i,"x:"+(0,l.toDisplayString)(d.formattedValue.x)+",y:"+(0,l.toDisplayString)(d.formattedValue.y)+",z:"+(0,l.toDisplayString)(d.formattedValue.z),1))],2),r.expanded?((0,l.openBlock)(),(0,l.createBlock)(p,{key:0,modelValue:d.formattedValue,decimals:o.decimals,step:o.step,"onUpdate:modelValue":d.onChangeVal},null,8,["modelValue","decimals","step","onUpdate:modelValue"])):(0,l.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-4454ef46"]])},8549:(e,t,o)=>{o.d(t,{A:()=>i});var l=o(2015);const a=["onUpdate:modelValue"],n=["onUpdate:modelValue"],s={name:"NameEditor",data:()=>({properties:[{property:"envMap",value:null}]}),methods:{updateAsset(){for(let e=0;e<this.properties.length;e++){const t=this.properties[e];this.selected[t.property],this.$app.assets.updateAsset(this.selected,t.property,()=>{})}}},props:{selected:{type:Object}}},i=(0,o(6262).A)(s,[["render",function(e,t,o,s,i,c){return(0,l.openBlock)(),(0,l.createElementBlock)("div",null,[((0,l.openBlock)(!0),(0,l.createElementBlock)(l.Fragment,null,(0,l.renderList)(i.properties,e=>((0,l.openBlock)(),(0,l.createElementBlock)("div",null,[(0,l.withDirectives)((0,l.createElementVNode)("input",{"onUpdate:modelValue":t=>e.property=t},null,8,a),[[l.vModelText,e.property]]),(0,l.withDirectives)((0,l.createElementVNode)("input",{"onUpdate:modelValue":t=>o.selected[e.property]=t},null,8,n),[[l.vModelText,o.selected[e.property]]])]))),256)),(0,l.createElementVNode)("div",null,[(0,l.createElementVNode)("button",{class:"btn",onClick:t[0]||(t[0]=(...e)=>c.updateAsset&&c.updateAsset(...e))},"Update")])])}]])},8663:(e,t,o)=>{o.d(t,{A:()=>s});var l=o(2015);const a={class:"spinner"},n={name:"Spinner"},s=(0,o(6262).A)(n,[["render",function(e,t,o,n,s,i){return(0,l.openBlock)(),(0,l.createElementBlock)("div",a)}],["__scopeId","data-v-4736cf19"]])},8992:(e,t,o)=>{o.d(t,{A:()=>i});var l=o(2015);const a={style:{display:"grid","grid-template-columns":"96px 1fr"}},n={style:{"text-align":"center"}},s={props:{selected:{type:Object},label:{type:String},value:{type:Number},property:{type:Object}},computed:{val:{get(){return this.value},set(e){this.$emit("update:value",e)}}}},i=(0,o(6262).A)(s,[["render",function(e,t,o,s,i,c){const r=(0,l.resolveComponent)("FloatInput");return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createElementVNode)("div",null,(0,l.toDisplayString)(o.label),1),(0,l.createElementVNode)("div",n,[(0,l.createVNode)(r,{min:o.property.min||0,step:o.property.step||.01,value:c.val,onChanged:t[0]||(t[0]=e=>c.val=e)},null,8,["min","step","value"])])])}]])},9404:(e,t,o)=>{o.d(t,{A:()=>B});var l=o(2015),a=o(2320),n=o.n(a);const s={class:"form-group"},i=["disabled"],c={key:0,class:"form-group"},r=["disabled"],d={key:1,class:"form-group"},p=["disabled"],m={key:2,class:"form-group"},u=["disabled"],v=["disabled"],h={class:"form-actions"},k=["disabled"],y=["disabled"],V={key:3,class:"helper-actions"},f={key:4,class:"info-message"},g={key:5,class:"error-message"},E={__name:"auth",emits:["success"],setup(e,{emit:t}){const o=n().default||n(),a=t,E=(0,l.ref)("login"),B=(0,l.ref)(!1),N=(0,l.ref)(""),b=(0,l.ref)(""),C=(0,l.reactive)({email:"",password:"",code:"",newPassword:"",confirmPassword:""}),w=(0,l.computed)(()=>{switch(E.value){case"login":return"Login";case"recover":return"Отправить код";case"verify":return"Подтвердить код";case"reset":return"Установить пароль"}}),x=(0,l.computed)(()=>"login"===E.value?"Cancel":"Назад"),S=(0,l.computed)(()=>{switch(E.value){case"login":return"Вход...";case"recover":return"Отправка...";case"verify":return"Проверка...";case"reset":return"Сохранение..."}});function $(){A(),E.value="recover",C.password="",C.code="",C.newPassword="",C.confirmPassword=""}function D(){A(),"login"===E.value?(C.email="",C.password=""):(E.value="login",C.code="",C.newPassword="",C.confirmPassword="")}function A(){N.value="",b.value=""}async function z(){if(A(),C.email)try{if(B.value=!0,"login"===E.value){const e=await fetch("/auth/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:C.email,password:C.password})});if(!e.ok)throw await _(e);const t=await e.json();a("success",t)}else if("recover"===E.value){const e=await fetch("/auth/recovery",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:C.email})});if(!e.ok)throw await _(e);b.value="Код отправлен на указанный email",E.value="verify"}else if("verify"===E.value){if(!C.code)return void(N.value="Код обязателен");const e=await fetch("/auth/check",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:C.email,code:C.code})});if(!e.ok)throw await _(e);b.value="Код подтверждён. Введите новый пароль.",E.value="reset"}else if("reset"===E.value){if(!C.newPassword||!C.confirmPassword)return void(N.value="Заполните оба поля пароля");if(C.newPassword!==C.confirmPassword)return void(N.value="Пароли не совпадают");console.log(C.newPassword),await o.app.setPassword(C.newPassword),b.value="Пароль изменён.",E.value="login",C.password="",C.newPassword="",C.confirmPassword="",C.code=""}}catch(e){N.value="string"==typeof e?e:e?.message||"Ошибка сервера"}finally{B.value=!1}else N.value="Email обязателен"}async function _(e){try{const t=await e.json();return t?.message||t?.error||`HTTP ${e.status}`}catch{return`HTTP ${e.status}`}}return(e,t)=>((0,l.openBlock)(),(0,l.createElementBlock)("form",{onSubmit:(0,l.withModifiers)(z,["prevent"]),class:"login-form"},[(0,l.createElementVNode)("div",s,[t[5]||(t[5]=(0,l.createElementVNode)("label",{for:"email"},"Email:",-1)),(0,l.withDirectives)((0,l.createElementVNode)("input",{id:"email",type:"email","onUpdate:modelValue":t[0]||(t[0]=e=>C.email=e),required:"",placeholder:"Введите email",disabled:B.value},null,8,i),[[l.vModelText,C.email]])]),(0,l.createCommentVNode)(" LOGIN: email + password "),"login"===E.value?((0,l.openBlock)(),(0,l.createElementBlock)("div",c,[t[6]||(t[6]=(0,l.createElementVNode)("label",{for:"password"},"Пароль:",-1)),(0,l.withDirectives)((0,l.createElementVNode)("input",{id:"password",type:"password","onUpdate:modelValue":t[1]||(t[1]=e=>C.password=e),required:"",placeholder:"Введите пароль",disabled:B.value},null,8,r),[[l.vModelText,C.password]])])):(0,l.createCommentVNode)("v-if",!0),(0,l.createCommentVNode)(" VERIFY CODE "),"verify"===E.value?((0,l.openBlock)(),(0,l.createElementBlock)("div",d,[t[7]||(t[7]=(0,l.createElementVNode)("label",{for:"code"},"Код из письма:",-1)),(0,l.withDirectives)((0,l.createElementVNode)("input",{id:"code",type:"text","onUpdate:modelValue":t[2]||(t[2]=e=>C.code=e),required:"",placeholder:"Введите код",disabled:B.value},null,8,p),[[l.vModelText,C.code]])])):(0,l.createCommentVNode)("v-if",!0),(0,l.createCommentVNode)(" RESET PASSWORD "),"reset"===E.value?((0,l.openBlock)(),(0,l.createElementBlock)("div",m,[t[8]||(t[8]=(0,l.createElementVNode)("label",{for:"newPassword"},"Новый пароль:",-1)),(0,l.withDirectives)((0,l.createElementVNode)("input",{id:"newPassword",type:"password","onUpdate:modelValue":t[3]||(t[3]=e=>C.newPassword=e),required:"",placeholder:"Введите новый пароль",disabled:B.value},null,8,u),[[l.vModelText,C.newPassword]]),t[9]||(t[9]=(0,l.createElementVNode)("label",{for:"confirmPassword",style:{"margin-top":"8px"}},"Повтор пароля:",-1)),(0,l.withDirectives)((0,l.createElementVNode)("input",{id:"confirmPassword",type:"password","onUpdate:modelValue":t[4]||(t[4]=e=>C.confirmPassword=e),required:"",placeholder:"Повторите пароль",disabled:B.value},null,8,v),[[l.vModelText,C.confirmPassword]])])):(0,l.createCommentVNode)("v-if",!0),(0,l.createElementVNode)("div",h,[(0,l.createElementVNode)("button",{type:"submit",disabled:B.value},(0,l.toDisplayString)(B.value?S.value:w.value),9,k),(0,l.createCommentVNode)(" Cancel / Back "),(0,l.createElementVNode)("button",{type:"button",onClick:D,disabled:B.value},(0,l.toDisplayString)(x.value),9,y)]),"login"===E.value?((0,l.openBlock)(),(0,l.createElementBlock)("div",V,[(0,l.createElementVNode)("a",{href:"#",onClick:(0,l.withModifiers)($,["prevent"])},"Забыли пароль?")])):(0,l.createCommentVNode)("v-if",!0),b.value?((0,l.openBlock)(),(0,l.createElementBlock)("div",f,(0,l.toDisplayString)(b.value),1)):(0,l.createCommentVNode)("v-if",!0),N.value?((0,l.openBlock)(),(0,l.createElementBlock)("div",g,(0,l.toDisplayString)(N.value),1)):(0,l.createCommentVNode)("v-if",!0)],32))}},B=(0,o(6262).A)(E,[["__scopeId","data-v-867ec93e"]])},9482:(e,t,o)=>{o.d(t,{A:()=>s});var l=o(2015);const a={style:{"text-align":"right"}},n={name:"BoolEdit",props:{modelValue:{type:Boolean}},computed:{val:{get(){return this.modelValue},set(e){this.$emit("update:modelValue",e)}}}},s=(0,o(6262).A)(n,[["render",function(e,t,o,n,s,i){return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.withDirectives)((0,l.createElementVNode)("input",{type:"checkbox","onUpdate:modelValue":t[0]||(t[0]=e=>i.val=e)},null,512),[[l.vModelCheckbox,i.val]])])}]])},9912:(e,t,o)=>{o.d(t,{A:()=>c});var l=o(2015);const a={style:{display:"flex","flex-direction":"column"}},n={style:{display:"flex","flex-direction":"row","justify-content":"space-between"}},s={style:{display:"flex","flex-direction":"row","justify-content":"space-between"}},i={props:{modelValue:{type:Object,default:{cast:!1,receive:!1}}},computed:{cast:{get(){return!!this.modelValue&&this.modelValue.cast},set(e){this.$emit("update:modelValue",{...this.modelValue?this.modelValue:{},cast:e})}},receive:{get(){return!!this.modelValue&&this.modelValue.receive},set(e){this.$emit("update:modelValue",{...this.modelValue?this.modelValue:{},receive:e})}}}},c=(0,o(6262).A)(i,[["render",function(e,t,o,i,c,r){const d=(0,l.resolveComponent)("BoolEdit");return(0,l.openBlock)(),(0,l.createElementBlock)("div",a,[(0,l.createElementVNode)("div",n,[t[2]||(t[2]=(0,l.createElementVNode)("div",null,"Cast",-1)),(0,l.createVNode)(d,{modelValue:r.cast,"onUpdate:modelValue":t[0]||(t[0]=e=>r.cast=e),"update:modelValue":"cast=$event"},null,8,["modelValue"])]),(0,l.createElementVNode)("div",s,[t[3]||(t[3]=(0,l.createElementVNode)("div",null,"Receive",-1)),(0,l.createVNode)(d,{modelValue:r.receive,"onUpdate:modelValue":t[1]||(t[1]=e=>r.receive=e),"update:modelValue":"receive=$event"},null,8,["modelValue"])])])}]])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
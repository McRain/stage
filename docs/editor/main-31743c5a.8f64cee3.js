(()=>{"use strict";var __webpack_modules__={351:(e,t,o)=>{o.d(t,{A:()=>n});const n=class{constructor(){this._events={"*":[]}}subs(e,t,o){null==this._events[e]&&(this._events[e]=[]),this._events[e].push({handler:o,once:t})}on(e,t){this.subs(e,!1,t)}once(e,t){this.subs(e,!0,t)}off(e,t){const o=this._events[e];if(o){for(let e=o.length-1;e>=0;e--)o[e].handler===t&&o.splice(e,1);0===o.length&&delete this._events[e]}}clear(e){this._events[e]=[]}clearAll(){this._events={"*":[]}}emit(e,...t){const o=[];this._events[e]&&o.push(...this._events[e]),this._events["*"].length&&o.push(...this._events["*"].map(t=>({handler:t.handler.bind(this,e),once:t.once})));for(let e=o.length-1;e>=0;e--){const n=o[e];n.handler.apply(null,t),n.once&&o.splice(e,1)}}addEventListener(e,t){this.on(e,t)}removeEventListener(e,t){this.off(e,t)}}},1431:(e,t,o)=>{o.d(t,{A:()=>s});var n=o(2015);const r={props:{text:{type:Object,default:{value:"TEXT",size:"1em"}},path:{type:String},visible:{type:Boolean},styles:{type:Object}},mounted(){this.$emit("mounted",{path:this.path,element:this.$refs.container})}},s=(0,o(6262).A)(r,[["render",function(e,t,o,r,s,a){return(0,n.withDirectives)(((0,n.openBlock)(),(0,n.createElementBlock)("div",{ref:"container",class:"cardroot",style:(0,n.normalizeStyle)({fontSize:o.text.size,...o.styles})},(0,n.toDisplayString)(o.text.value),5)),[[n.vShow,o.visible]])}],["__scopeId","data-v-a3d9ff12"]])},2262:(e,t,o)=>{o.d(t,{A:()=>i});var n=o(2015);const r={key:0,class:"menulabel"},s={key:1,class:"btnicon"},a={name:"ToggleButton",props:{id:{type:String,required:!0},label:{type:String},icon:{type:Object},group:{type:Object},handlers:{type:Object,required:!0},tooltip:{type:String}},computed:{isActive(){return this.group.activeId===this.id}},mounted(){this.handlers.activate&&this.handlers.activate(this)},beforeUnmount(){this.handlers.deactivate&&this.handlers.deactivate(this)},methods:{onClick(){this.handlers.click?this.handlers.click(this):this.$emit("click",this)}}},i=(0,o(6262).A)(a,[["render",function(e,t,o,a,i,l){const c=(0,n.resolveComponent)("icon"),d=(0,n.resolveDirective)("tooltip");return(0,n.withDirectives)(((0,n.openBlock)(),(0,n.createElementBlock)("button",{class:(0,n.normalizeClass)(["small-btn simple",{active:l.isActive}]),onClick:t[0]||(t[0]=(...e)=>l.onClick&&l.onClick(...e))},[o.label?((0,n.openBlock)(),(0,n.createElementBlock)("div",r,(0,n.toDisplayString)(o.label),1)):(0,n.createCommentVNode)("v-if",!0),o.icon?((0,n.openBlock)(),(0,n.createElementBlock)("div",s,[(0,n.createVNode)(c,{size:o.icon.size||"100%",value:o.icon.value},null,8,["size","value"])])):(0,n.createCommentVNode)("v-if",!0)],2)),[[d,o.tooltip]])}],["__scopeId","data-v-673fd16a"]])},2859:(e,t,o)=>{o.d(t,{A:()=>i});var n=o(2015);const r={class:"alert"},s={class:"text"},a={name:"Label",props:{icon:{type:String,default:"notification"},message:{type:String,default:""},type:{type:String,default:"info"}}},i=(0,o(6262).A)(a,[["render",function(e,t,o,a,i,l){const c=(0,n.resolveComponent)("icon");return(0,n.openBlock)(),(0,n.createElementBlock)("div",null,[(0,n.createElementVNode)("div",r,[(0,n.createVNode)(c,{class:(0,n.normalizeClass)(`${o.type}icon`),size:"3em",value:o.icon},null,8,["class","value"]),(0,n.createElementVNode)("span",s,(0,n.toDisplayString)(o.message),1)])])}]])},2985:(e,t,o)=>{var n=o(4196);const r=["script"];var s=o(9615);function a(e){e.S&&!e.federation.hasAttachShareScopeMap&&e.federation.instance&&e.federation.instance.shareScopeMap&&(e.S=e.federation.instance.shareScopeMap,e.federation.hasAttachShareScopeMap=!0)}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},i.apply(this,arguments)}const l={runtime:n,instance:void 0,initOptions:void 0,bundlerRuntime:{remotes:function(e){const{chunkId:t,promises:o,chunkMapping:n,idToExternalAndNameMapping:i,webpackRequire:l,idToRemoteMap:c}=e;a(l),l.o(n,t)&&n[t].forEach(e=>{let t=l.R;t||(t=[]);const n=i[e],a=c[e];if(t.indexOf(n)>=0)return;if(t.push(n),n.p)return o.push(n.p);const d=t=>{t||(t=new Error("Container missing")),"string"==typeof t.message&&(t.message+=`\nwhile loading "${n[1]}" from ${n[2]}`),l.m[e]=()=>{throw t},n.p=0},p=(e,t,r,s,a,i)=>{try{const l=e(t,r);if(!l||!l.then)return a(l,s,i);{const e=l.then(e=>a(e,s),d);if(!i)return e;o.push(n.p=e)}}catch(e){d(e)}};var u=(e,o,r)=>p(o.get,n[1],t,0,m,r),m=t=>{n.p=1,l.m[e]=e=>{e.exports=t()}};1===a.length&&r.includes(a[0].externalType)&&a[0].name?p(()=>{try{const e=(0,s.e4)(a[0].name,s.yq)+n[1].slice(1),t=l.federation.instance,o=()=>l.federation.instance.loadRemote(e,{loadFactory:!1,from:"build"});return"version-first"===t.options.shareStrategy?Promise.all(t.sharedHandler.initializeSharing(n[0])).then(()=>o()):o()}catch(e){d(e)}},n[2],0,0,m,1):p(l,n[2],0,0,(e,t,o)=>e?p(l.I,n[0],0,e,u,o):d(),1)})},consumes:function(e){const{chunkId:t,promises:o,chunkMapping:n,installedModules:r,moduleToHandlerMapping:s,webpackRequire:i}=e;a(i),i.o(n,t)&&n[t].forEach(e=>{if(i.o(r,e))return o.push(r[e]);const t=t=>{r[e]=0,i.m[e]=o=>{var n;delete i.c[e];const r=t(),{shareInfo:a}=s[e];if((null==a||null==(n=a.shareConfig)?void 0:n.layer)&&r&&"object"==typeof r)try{r.hasOwnProperty("layer")&&void 0!==r.layer||(r.layer=a.shareConfig.layer)}catch(e){}o.exports=r}},n=t=>{delete r[e],i.m[e]=o=>{throw delete i.c[e],t}};try{const a=i.federation.instance;if(!a)throw new Error("Federation instance not found!");const{shareKey:l,getter:c,shareInfo:d}=s[e],p=a.loadShare(l,{customShareInfo:d}).then(e=>!1===e?c():e);p.then?o.push(r[e]=p.then(t).catch(n)):t(p)}catch(e){n(e)}})},I:function({shareScopeName:e,webpackRequire:t,initPromises:o,initTokens:n,initScope:s}){const i=Array.isArray(e)?e:[e];var l=[];return i.forEach(i=>{l.push(function(i){s||(s=[]);const l=t.federation.instance;var c=n[i];if(c||(c=n[i]={from:l.name}),s.indexOf(c)>=0)return;s.push(c);const d=o[i];if(d)return d;var p=o=>{var n=e=>{return t="Initialization of sharing external failed: "+e,"undefined"!=typeof console&&console.warn&&console.warn(t);var t};try{var r=t(o);if(!r)return;var a=o=>o&&o.init&&o.init(t.S[i],s,{shareScopeMap:t.S||{},shareScopeKeys:e});if(r.then)return u.push(r.then(a,n));var l=a(r);if(l&&"boolean"!=typeof l&&l.then)return u.push(l.catch(n))}catch(e){n(e)}};const u=l.initializeSharing(i,{strategy:l.options.shareStrategy,initScope:s,from:"build"});a(t);const m=t.federation.bundlerRuntimeOptions.remotes;return m&&Object.keys(m.idToRemoteMap).forEach(e=>{const t=m.idToRemoteMap[e],o=m.idToExternalAndNameMapping[e][2];if(t.length>1)p(o);else if(1===t.length){const e=t[0];r.includes(e.externalType)||p(o)}}),u.length?o[i]=Promise.all(u).then(()=>o[i]=!0):o[i]=!0}(i))}),Promise.all(l).then(()=>!0)},S:{},installInitialConsumes:function(e){const{moduleToHandlerMapping:t,webpackRequire:o,installedModules:n,initialConsumes:r}=e;r.forEach(e=>{o.m[e]=r=>{var s;n[e]=0,delete o.c[e];const a=function(e){const{moduleId:t,moduleToHandlerMapping:o,webpackRequire:n}=e,r=n.federation.instance;if(!r)throw new Error("Federation instance not found!");const{shareKey:s,shareInfo:a}=o[t];try{return r.loadShareSync(s,{customShareInfo:a})}catch(e){throw console.error('loadShareSync failed! The function should not be called unless you set "eager:true". If you do not set it, and encounter this issue, you can check whether an async boundary is implemented.'),console.error("The original error message is as follows: "),e}}({moduleId:e,moduleToHandlerMapping:t,webpackRequire:o});if("function"!=typeof a)throw new Error(`Shared module is not available for eager consumption: ${e}`);const i=a(),{shareInfo:l}=t[e];if((null==l||null==(s=l.shareConfig)?void 0:s.layer)&&i&&"object"==typeof i)try{i.hasOwnProperty("layer")&&void 0!==i.layer||(i.layer=l.shareConfig.layer)}catch(e){}r.exports=i}})},initContainerEntry:function(e){const{webpackRequire:t,shareScope:o,initScope:n,shareScopeKey:r,remoteEntryInitOptions:s}=e;if(!t.S)return;if(!t.federation||!t.federation.instance||!t.federation.initOptions)return;const a=t.federation.instance;a.initOptions(i({name:t.federation.initOptions.name,remotes:[]},s));const l=null==s?void 0:s.shareScopeKeys,c=null==s?void 0:s.shareScopeMap;if(r&&"string"!=typeof r)r.forEach(e=>{if(!l||!c)return void a.initShareScopeMap(e,o,{hostShareScopeMap:(null==s?void 0:s.shareScopeMap)||{}});c[e]||(c[e]={});const t=c[e];a.initShareScopeMap(e,t,{hostShareScopeMap:(null==s?void 0:s.shareScopeMap)||{}})});else{const e=r||"default";Array.isArray(l)?l.forEach(e=>{c[e]||(c[e]={});const t=c[e];a.initShareScopeMap(e,t,{hostShareScopeMap:(null==s?void 0:s.shareScopeMap)||{}})}):a.initShareScopeMap(e,o,{hostShareScopeMap:(null==s?void 0:s.shareScopeMap)||{}})}return t.federation.attachShareScopeMap&&t.federation.attachShareScopeMap(t),"function"==typeof t.federation.prefetch&&t.federation.prefetch(),Array.isArray(r)?Boolean(t.federation.initOptions.shared)?t.I(r,n):Promise.all(r.map(e=>t.I(e,n))).then(()=>!0):t.I(r||"default",n)}},attachShareScopeMap:a,bundlerRuntimeOptions:{}};if(!o.federation.runtime){var c=o.federation;for(var d in o.federation={},l)o.federation[d]=l[d];for(var d in c)o.federation[d]=c[d]}o.federation.instance||(o.federation.instance=o.federation.runtime.init(o.federation.initOptions),o.federation.attachShareScopeMap&&o.federation.attachShareScopeMap(o),o.federation.installInitialConsumes&&o.federation.installInitialConsumes(),!o.federation.isMFRemote&&o.federation.prefetch&&o.federation.prefetch())},3419:(e,t,o)=>{function n(){return n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},n.apply(this,arguments)}o.d(t,{_:()=>n})},3822:(e,t,o)=>{o.d(t,{A:()=>x});var n=o(2320),r=o(5216),s=o(4875);const a=new s.Raycaster,i=new class{constructor(){this._events={"*":[]}}subs(e,t,o){null==this._events[e]&&(this._events[e]=[]),this._events[e].push({handler:o,once:t})}on(e,t){this.subs(e,!1,t)}once(e,t){this.subs(e,!0,t)}off(e,t){const o=this._events[e];if(o){for(let e=o.length-1;e>=0;e--)o[e].handler===t&&o.splice(e,1);0===o.length&&delete this._events[e]}}clear(e){this._events[e]=[]}clearAll(){this._events={"*":[]}}emit(e,...t){const o=[];this._events[e]&&o.push(...this._events[e]),this._events["*"].length&&o.push(...this._events["*"].map(t=>({handler:t.handler.bind(this,e),once:t.once})));for(let e=o.length-1;e>=0;e--){const n=o[e];n.handler.apply(null,t),n.once&&o.splice(e,1)}}addEventListener(e,t){this.on(e,t)}removeEventListener(e,t){this.off(e,t)}};let l,c,d,p;const u={x:0,y:0};let m,h=.03,f=.03,_=.01,g=.01,y=window.innerWidth/2,v=window.innerHeight/2;function b(e){for(;e;){if(e.isElement)return e;e=e.parent}return null}function E(e){}function w(e){u.x=e.clientX,u.y=e.clientY,m=Date.now()}function S(e){if(Math.abs(u.x-e.clientX)>10||Math.abs(u.y-e.clientY)>10||Date.now()-m>500)return;const t=new s.Vector2,o=p.getBoundingClientRect(),n=e.clientX-o.left,r=e.clientY-o.top;t.x=n/p.clientWidth*2-1,t.y=-r/p.clientHeight*2+1,a.setFromCamera(t,c);const d=a.intersectObjects(l.children,!0);if(0!==d.length)for(let e=0;e<d.length;e++){const t=d[e].object,o=b(t)||{};if(console.log(t),o.visible)return void i.emit("click",o)}else i.emit("click",null)}const k=new Proxy(class{static get Control(){return Control}static Init(e,t,o,n,r){const s={camera:{range:{x:.01,y:.01},movespeed:{x:.03,y:.03}},...r};l=n,d=o,c=t,p=e,h=s.camera.movespeed.x,f=s.camera.movespeed.y,_=s.camera.range.x,g=s.camera.range.y,y=window.innerWidth/2,v=window.innerHeight/2,e.addEventListener("click",S.bind(null)),e.addEventListener("mousemove",E,!1),e.addEventListener("mousedown",w,!1)}static Update(e){}static SetCamera(e){c=e}},{get:(e,t)=>t in e?e[t]:i[t]}),N=n.default||n;let I,$,C,T,A;function R(e){$.render(I,C)}class O{static get CameraHelper(){return A}static async Init(e){T=e;const{THREE:t,Project:o,Factory:n}=N.modules.getMod("engine");I=o.Scene,$=new t.WebGLRenderer({canvas:e,alpha:!0,powerPreference:"high-performance",antialias:!0,stencil:!1});const s=T.clientWidth,a=T.clientHeight;$.setSize(s,a,!1),$.setPixelRatio(window.devicePixelRatio),$.shadowMap.enabled=!0,$.shadowMap.type=t.PCFSoftShadowMap,o.on("setcamera",()=>{A&&(I.remove(A),A.dispose()),A=new t.CameraHelper(o.Camera),A.layers.set(1),I.add(A)}),A=new t.CameraHelper(o.Camera),A.layers.set(1),I.add(A),C=new t.PerspectiveCamera(60,window.innerWidth/window.innerHeight,.01,5e3),C.layers.enable(1),C.uid="EditorCamera",I.add(C),C.position.set(5,3,20),$.setAnimationLoop(R),n.on("create",(e,t)=>{e.type}),r.A.Init({canvas:T},C,o.Scene),r.A.FocusTo(o.Root),k.Init(T,C,I,o.Root),k.on("click",e=>{"videoplane"===e?.type&&e.play(),N.selection.select(e)})}}window.Editor=O;const x=O},4196:(e,t,o)=>{function n(){return n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},n.apply(this,arguments)}function r(e,t){if(null==e)return{};var o,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)o=s[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}o.r(t),o.d(t,{Module:()=>tt,ModuleFederation:()=>gt,createInstance:()=>yt,getInstance:()=>$t,getRemoteEntry:()=>Je,getRemoteInfo:()=>Ze,init:()=>bt,loadRemote:()=>Et,loadScript:()=>s.k0,loadScriptNode:()=>s.oe,loadShare:()=>wt,loadShareSync:()=>St,preloadRemote:()=>kt,registerGlobalPlugins:()=>G,registerPlugins:()=>It,registerRemotes:()=>Nt,registerShared:()=>Ct});var s=o(9615);const a="RUNTIME-001",i="RUNTIME-002",l="RUNTIME-003",c="RUNTIME-004",d="RUNTIME-005",p="RUNTIME-006",u="RUNTIME-007",m="RUNTIME-008",h="RUNTIME-009",f="TYPE-001",_="BUILD-001",g="BUILD-002",y=(e,t,o,n)=>{const r=[`${[t[e]]} #${e}`];return o&&r.push(`args: ${JSON.stringify(o)}`),r.push((e=>`View the docs to see how to solve: https://module-federation.io/guide/troubleshooting/${e.split("-")[0].toLowerCase()}/${e}`)(e)),n&&r.push(`Original Error Message:\n ${n}`),r.join("\n")};function v(){return v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},v.apply(this,arguments)}const b={[a]:"Failed to get remoteEntry exports.",[i]:'The remote entry interface does not contain "init"',[l]:"Failed to get manifest.",[c]:"Failed to locate remote.",[d]:"Invalid loadShareSync function call from bundler runtime",[p]:"Invalid loadShareSync function call from runtime",[u]:"Failed to get remote snapshot.",[m]:"Failed to load script resources.",[h]:"Please call createInstance first."},E=(v({},b,{[f]:"Failed to generate type declaration. Execute the below cmd to reproduce and fix the error."},{[_]:"Failed to find expose module.",[g]:"PublicPath is required in prod mode."}),"[ Federation Runtime ]"),w=(0,s.h)(E);function S(e,t){e||k(t)}function k(e){if(e instanceof Error)throw e.message.startsWith(E)||(e.message=`${E}: ${e.message}`),e;throw new Error(`${E}: ${e}`)}function N(e){e instanceof Error?(e.message.startsWith(E)||(e.message=`${E}: ${e.message}`),w.warn(e)):w.warn(e)}function I(e,t){return-1===e.findIndex(e=>e===t)&&e.push(t),e}function $(e){return"version"in e&&e.version?`${e.name}:${e.version}`:"entry"in e&&e.entry?`${e.name}:${e.entry}`:`${e.name}`}function C(e){return void 0!==e.entry}function T(e){return!e.entry.includes(".json")}function A(e){return e&&"object"==typeof e}const R=Object.prototype.toString;function O(e){return Array.isArray(e)?e:[e]}function x(e){const t={url:"",type:"global",globalName:""};return(0,s.OL)()||(0,s.tf)()?"remoteEntry"in e?{url:e.remoteEntry,type:e.remoteEntryType,globalName:e.globalName}:t:"ssrRemoteEntry"in e?{url:e.ssrRemoteEntry||t.url,type:e.ssrRemoteEntryType||t.type,globalName:e.globalName}:t}const M="object"==typeof globalThis?globalThis:window,D=(()=>{try{return document.defaultView}catch(e){return M}})(),P=D;function V(e,t,o){Object.defineProperty(e,t,{value:o,configurable:!1,writable:!0})}function B(e,t){return Object.hasOwnProperty.call(e,t)}B(M,"__GLOBAL_LOADING_REMOTE_ENTRY__")||V(M,"__GLOBAL_LOADING_REMOTE_ENTRY__",{});const L=M.__GLOBAL_LOADING_REMOTE_ENTRY__;function j(e){var t,o,n,r,s,a;B(e,"__VMOK__")&&!B(e,"__FEDERATION__")&&V(e,"__FEDERATION__",e.__VMOK__),B(e,"__FEDERATION__")||(V(e,"__FEDERATION__",{__GLOBAL_PLUGIN__:[],__INSTANCES__:[],moduleInfo:{},__SHARE__:{},__MANIFEST_LOADING__:{},__PRELOADED_MAP__:new Map}),V(e,"__VMOK__",e.__FEDERATION__)),null!=(t=e.__FEDERATION__).__GLOBAL_PLUGIN__||(t.__GLOBAL_PLUGIN__=[]),null!=(o=e.__FEDERATION__).__INSTANCES__||(o.__INSTANCES__=[]),null!=(n=e.__FEDERATION__).moduleInfo||(n.moduleInfo={}),null!=(r=e.__FEDERATION__).__SHARE__||(r.__SHARE__={}),null!=(s=e.__FEDERATION__).__MANIFEST_LOADING__||(s.__MANIFEST_LOADING__={}),null!=(a=e.__FEDERATION__).__PRELOADED_MAP__||(a.__PRELOADED_MAP__=new Map)}function H(e,t){if("string"==typeof t){if(e[t])return{value:e[t],key:t};{const o=Object.keys(e);for(const n of o){const[o,r]=n.split(":"),s=`${o}:${t}`,a=e[s];if(a)return{value:a,key:s}}return{value:void 0,key:t}}}throw new Error("key must be string")}j(M),j(D);const F=()=>D.__FEDERATION__.moduleInfo,q=e=>((e,t)=>{const o=H(t,$(e)).value;if(o&&!o.version&&"version"in e&&e.version&&(o.version=e.version),o)return o;if("version"in e&&e.version){const{version:t}=e,o=$(r(e,["version"])),n=H(D.__FEDERATION__.moduleInfo,o).value;if((null==n?void 0:n.version)===t)return n}})(e,D.__FEDERATION__.moduleInfo),U=(e,t)=>{const o=$(e);return D.__FEDERATION__.moduleInfo[o]=t,D.__FEDERATION__.moduleInfo},z=(e,t)=>{const o=t||`__FEDERATION_${e}:custom__`;return{remoteEntryKey:o,entryExports:M[o]}},G=e=>{const{__GLOBAL_PLUGIN__:t}=D.__FEDERATION__;e.forEach(e=>{-1===t.findIndex(t=>t.name===e.name)?t.push(e):N(`The plugin ${e.name} has been registered.`)})},W=e=>M.__FEDERATION__.__PRELOADED_MAP__.get(e),K=e=>M.__FEDERATION__.__PRELOADED_MAP__.set(e,!0),X="default",Y="global",J="[0-9A-Za-z-]+",Z=`(?:\\+(${J}(?:\\.${J})*))`,Q="0|[1-9]\\d*",ee="[0-9]+",te="\\d*[a-zA-Z-][a-zA-Z0-9-]*",oe=`(?:${ee}|${te})`,ne=`(?:${Q}|${te})`,re=`(?:-(${ne}(?:\\.${ne})*))`,se=`${Q}|x|X|\\*`,ae=`[v=\\s]*(${se})(?:\\.(${se})(?:\\.(${se})(?:${re})?${Z}?)?)?`,ie=`^\\s*(${ae})\\s+-\\s+(${ae})\\s*$`,le="((?:<|>)?=?)",ce=`(\\s*)${le}\\s*([v=\\s]*(${ee})\\.(${ee})\\.(${ee})(?:-?(${oe}(?:\\.${oe})*))?${Z}?|${ae})`,de="(?:~>?)",pe=`(\\s*)${de}\\s+`,ue="(?:\\^)",me=`(\\s*)${ue}\\s+`,he=`^${ue}${ae}$`,fe=`^${de}${ae}$`,_e=`^${le}\\s*${ae}$`,ge=`^${le}\\s*(v?(${Q})\\.(${Q})\\.(${Q})${re}?${Z}?)$|^$`;function ye(e){return new RegExp(e)}function ve(e){return!e||"x"===e.toLowerCase()||"*"===e}function be(...e){return t=>e.reduce((e,t)=>t(e),t)}function Ee(e){return e.match(ye(ge))}function we(e,t,o,n){const r=`${e}.${t}.${o}`;return n?`${r}-${n}`:r}function Se(e){return e.replace(ye(ie),(e,t,o,n,r,s,a,i,l,c,d,p)=>`${t=ve(o)?"":ve(n)?`>=${o}.0.0`:ve(r)?`>=${o}.${n}.0`:`>=${t}`} ${i=ve(l)?"":ve(c)?`<${Number(l)+1}.0.0-0`:ve(d)?`<${l}.${Number(c)+1}.0-0`:p?`<=${l}.${c}.${d}-${p}`:`<=${i}`}`.trim())}function ke(e){return e.replace(ye(ce),"$1$2$3")}function Ne(e){return e.replace(ye(pe),"$1~")}function Ie(e){return e.replace(ye(me),"$1^")}function $e(e){return e.trim().split(/\s+/).map(e=>e.replace(ye(he),(e,t,o,n,r)=>ve(t)?"":ve(o)?`>=${t}.0.0 <${Number(t)+1}.0.0-0`:ve(n)?"0"===t?`>=${t}.${o}.0 <${t}.${Number(o)+1}.0-0`:`>=${t}.${o}.0 <${Number(t)+1}.0.0-0`:r?"0"===t?"0"===o?`>=${t}.${o}.${n}-${r} <${t}.${o}.${Number(n)+1}-0`:`>=${t}.${o}.${n}-${r} <${t}.${Number(o)+1}.0-0`:`>=${t}.${o}.${n}-${r} <${Number(t)+1}.0.0-0`:"0"===t?"0"===o?`>=${t}.${o}.${n} <${t}.${o}.${Number(n)+1}-0`:`>=${t}.${o}.${n} <${t}.${Number(o)+1}.0-0`:`>=${t}.${o}.${n} <${Number(t)+1}.0.0-0`)).join(" ")}function Ce(e){return e.trim().split(/\s+/).map(e=>e.replace(ye(fe),(e,t,o,n,r)=>ve(t)?"":ve(o)?`>=${t}.0.0 <${Number(t)+1}.0.0-0`:ve(n)?`>=${t}.${o}.0 <${t}.${Number(o)+1}.0-0`:r?`>=${t}.${o}.${n}-${r} <${t}.${Number(o)+1}.0-0`:`>=${t}.${o}.${n} <${t}.${Number(o)+1}.0-0`)).join(" ")}function Te(e){return e.split(/\s+/).map(e=>e.trim().replace(ye(_e),(e,t,o,n,r,s)=>{const a=ve(o),i=a||ve(n),l=i||ve(r);return"="===t&&l&&(t=""),s="",a?">"===t||"<"===t?"<0.0.0-0":"*":t&&l?(i&&(n=0),r=0,">"===t?(t=">=",i?(o=Number(o)+1,n=0,r=0):(n=Number(n)+1,r=0)):"<="===t&&(t="<",i?o=Number(o)+1:n=Number(n)+1),"<"===t&&(s="-0"),`${t+o}.${n}.${r}${s}`):i?`>=${o}.0.0${s} <${Number(o)+1}.0.0-0`:l?`>=${o}.${n}.0${s} <${o}.${Number(n)+1}.0-0`:e})).join(" ")}function Ae(e){return e.trim().replace(ye("(<|>)?=?\\s*\\*"),"")}function Re(e,t){return(e=Number(e)||e)>(t=Number(t)||t)?1:e===t?0:-1}function Oe(e,t){return Re(e.major,t.major)||Re(e.minor,t.minor)||Re(e.patch,t.patch)||function(e,t){const{preRelease:o}=e,{preRelease:n}=t;if(void 0===o&&Boolean(n))return 1;if(Boolean(o)&&void 0===n)return-1;if(void 0===o&&void 0===n)return 0;for(let e=0,t=o.length;e<=t;e++){const t=o[e],r=n[e];if(t!==r)return void 0===t&&void 0===r?0:t?r?Re(t,r):-1:1}return 0}(e,t)}function xe(e,t){return e.version===t.version}function Me(e,t){switch(e.operator){case"":case"=":return xe(e,t);case">":return Oe(e,t)<0;case">=":return xe(e,t)||Oe(e,t)<0;case"<":return Oe(e,t)>0;case"<=":return xe(e,t)||Oe(e,t)>0;case void 0:return!0;default:return!1}}function De(e){return be($e,Ce,Te,Ae)(e)}function Pe(e){return be(Se,ke,Ne,Ie)(e.trim()).split(/\s+/).join(" ")}function Ve(e,t){if(!e)return!1;const o=Ee(e);if(!o)return!1;const[,n,,r,s,a,i]=o,l={operator:n,version:we(r,s,a,i),major:r,minor:s,patch:a,preRelease:null==i?void 0:i.split(".")},c=t.split("||");for(const e of c){const t=e.trim();if(!t)return!0;if("*"===t||"x"===t)return!0;try{const e=Pe(t);if(!e.trim())return!0;const o=e.split(" ").map(e=>De(e)).join(" ");if(!o.trim())return!0;const n=o.split(/\s+/).map(e=>e.trim().replace(ye("^\\s*>=\\s*0.0.0\\s*$"),"")).filter(Boolean);if(0===n.length)continue;let r=!0;for(const e of n){const t=Ee(e);if(!t){r=!1;break}const[,o,,n,s,a,i]=t;if(!Me({operator:o,version:we(n,s,a,i),major:n,minor:s,patch:a,preRelease:null==i?void 0:i.split(".")},l)){r=!1;break}}if(r)return!0}catch(e){console.error(`[semver] Error processing range part "${t}":`,e);continue}}return!1}function Be(e,t){const o=t.shared||{},r=t.name,s=Object.keys(o).reduce((e,s)=>{const a=O(o[s]);return e[s]=e[s]||[],a.forEach(o=>{e[s].push(function(e,t,o,r){let s;var a,i,l;return s="get"in e?e.get:"lib"in e?()=>Promise.resolve(e.lib):()=>Promise.resolve(()=>{throw new Error(`Can not get shared '${o}'!`)}),n({deps:[],useIn:[],from:t,loading:null},e,{shareConfig:n({requiredVersion:`^${e.version}`,singleton:!1,eager:!1,strictVersion:!1},e.shareConfig),get:s,loaded:!(!(null==e?void 0:e.loaded)&&!("lib"in e))||void 0,version:null!=(a=e.version)?a:"0",scope:Array.isArray(e.scope)?e.scope:[null!=(i=e.scope)?i:"default"],strategy:(null!=(l=e.strategy)?l:r)||"version-first"})}(o,r,s,t.shareStrategy))}),e},{}),a=n({},e.shared);return Object.keys(s).forEach(e=>{a[e]?s[e].forEach(t=>{a[e].find(e=>e.version===t.version)||a[e].push(t)}):a[e]=s[e]}),{shared:a,shareInfos:s}}function Le(e,t){const o=e=>{if(!Number.isNaN(Number(e))){const t=e.split(".");let o=e;for(let e=0;e<3-t.length;e++)o+=".0";return o}return e};return!!Ve(o(e),`<=${o(t)}`)}const je=(e,t)=>{const o=t||function(e,t){return Le(e,t)};return Object.keys(e).reduce((e,t)=>e?o(e,t)||"0"===e?t:e:t,0)},He=e=>Boolean(e.loaded)||"function"==typeof e.lib;function Fe(e,t,o){const n=e[t][o];return je(e[t][o],function(e,t){return!He(n[e])&&Le(e,t)})}function qe(e,t,o){const n=e[t][o];return je(e[t][o],function(e,t){const o=e=>He(e)||(e=>Boolean(e.loading))(e);return o(n[t])?!o(n[e])||Boolean(Le(e,t)):!o(n[e])&&Le(e,t)})}function Ue(e){return"loaded-first"===e?qe:Fe}function ze(e,t,o,n){if(!e)return;const{shareConfig:r,scope:s=X,strategy:a}=o,i=Array.isArray(s)?s:[s];for(const s of i)if(r&&e[s]&&e[s][t]){const{requiredVersion:i}=r,l=Ue(a)(e,s,t),c=()=>{if(r.singleton){if("string"==typeof i&&!Ve(l,i)){const n=`Version ${l} from ${l&&e[s][t][l].from} of shared singleton module ${t} does not satisfy the requirement of ${o.from} which needs ${i})`;r.strictVersion?k(n):N(n)}return e[s][t][l]}if(!1===i||"*"===i)return e[s][t][l];if(Ve(l,i))return e[s][t][l];for(const[o,n]of Object.entries(e[s][t]))if(Ve(o,i))return n},d={shareScopeMap:e,scope:s,pkgName:t,version:l,GlobalFederation:P.__FEDERATION__,resolver:c};return(n.emit(d)||d).resolver()}}function Ge(){return P.__FEDERATION__.__SHARE__}function We(e){const{pkgName:t,extraOptions:o,shareInfos:n}=e;var r;const s=null!=(r=null==o?void 0:o.resolver)?r:e=>{if(!e)return;const t={};e.forEach(e=>{t[e.version]=e});const o=je(t,function(e,o){return!He(t[e])&&Le(e,o)});return t[o]};return Object.assign({},s(n[t]),null==o?void 0:o.customShareInfo)}const Ke=".then(callbacks[0]).catch(callbacks[1])";function Xe(e,t,o){const{remoteEntryKey:n,entryExports:r}=z(e,t);return S(r,y(a,b,{remoteName:e,remoteEntryUrl:o,remoteEntryKey:n})),r}function Ye(e){const{entry:t,name:o}=e;return(0,s.lG)(o,t)}async function Je(e){const{origin:t,remoteEntryExports:o,remoteInfo:n,getEntryUrl:r}=e,a=Ye(n);if(o)return o;if(!L[a]){const e=t.remoteHandler.hooks.lifecycle.loadEntry,i=t.loaderHook;L[a]=e.emit({loaderHook:i,remoteInfo:n,remoteEntryExports:o}).then(e=>e||(("undefined"!=typeof ENV_TARGET?"web"===ENV_TARGET:(0,s.OL)())?async function({remoteInfo:e,remoteEntryExports:t,loaderHook:o,getEntryUrl:n}){const{entry:r,entryGlobalName:a,name:i,type:l}=e;switch(l){case"esm":case"module":return async function({entry:e,remoteEntryExports:t}){return new Promise((o,n)=>{try{t?o(t):"undefined"!=typeof FEDERATION_ALLOW_NEW_FUNCTION?new Function("callbacks",`import("${e}")${Ke}`)([o,n]):import(e).then(o).catch(n)}catch(e){n(e)}})}({entry:r,remoteEntryExports:t});case"system":return async function({entry:e,remoteEntryExports:t}){return new Promise((o,n)=>{try{t?o(t):new Function("callbacks",`System.import("${e}")${Ke}`)([o,n])}catch(e){n(e)}})}({entry:r,remoteEntryExports:t});default:return async function({name:e,globalName:t,entry:o,loaderHook:n,getEntryUrl:r}){const{entryExports:a}=z(e,t);if(a)return a;const i=r?r(o):o;return(0,s.k0)(i,{attrs:{},createScriptHook:(e,t)=>{const o=n.lifecycle.createScript.emit({url:e,attrs:t});if(o)return o instanceof HTMLScriptElement||"script"in o||"timeout"in o?o:void 0}}).then(()=>Xe(e,t,o)).catch(t=>{throw S(void 0,y(m,b,{remoteName:e,resourceUrl:o})),t})}({entry:r,globalName:a,name:i,loaderHook:o,getEntryUrl:n})}}({remoteInfo:n,remoteEntryExports:o,loaderHook:i,getEntryUrl:r}):async function({remoteInfo:e,loaderHook:t}){const{entry:o,entryGlobalName:n,name:r,type:a}=e,{entryExports:i}=z(r,n);return i||(0,s.oe)(o,{attrs:{name:r,globalName:n,type:a},loaderHook:{createScriptHook:(e,o={})=>{const n=t.lifecycle.createScript.emit({url:e,attrs:o});if(n)return"url"in n?n:void 0}}}).then(()=>Xe(r,n,o)).catch(e=>{throw e})}({remoteInfo:n,loaderHook:i})))}return L[a]}function Ze(e){return n({},e,{entry:"entry"in e?e.entry:"",type:e.type||Y,entryGlobalName:e.entryGlobalName||e.name,shareScope:e.shareScope||X})}function Qe(e){return n({resourceCategory:"sync",share:!0,depsRemote:!0,prefetchInterface:!1},e)}function et(e,t,o,n=!0){const{cssAssets:r,jsAssetsWithoutEntry:a,entryAssets:i}=o;if(t.options.inBrowser){if(i.forEach(o=>{const{moduleInfo:n}=o,r=t.moduleCache.get(e.name);Je(r?{origin:t,remoteInfo:n,remoteEntryExports:r.remoteEntryExports}:{origin:t,remoteInfo:n,remoteEntryExports:void 0})}),n){const e={rel:"preload",as:"style"};r.forEach(o=>{const{link:n,needAttach:r}=(0,s.d)({url:o,cb:()=>{},attrs:e,createLinkHook:(e,o)=>{const n=t.loaderHook.lifecycle.createLink.emit({url:e,attrs:o});if(n instanceof HTMLLinkElement)return n}});r&&document.head.appendChild(n)})}else{const e={rel:"stylesheet",type:"text/css"};r.forEach(o=>{const{link:n,needAttach:r}=(0,s.d)({url:o,cb:()=>{},attrs:e,createLinkHook:(e,o)=>{const n=t.loaderHook.lifecycle.createLink.emit({url:e,attrs:o});if(n instanceof HTMLLinkElement)return n},needDeleteLink:!1});r&&document.head.appendChild(n)})}if(n){const e={rel:"preload",as:"script"};a.forEach(o=>{const{link:n,needAttach:r}=(0,s.d)({url:o,cb:()=>{},attrs:e,createLinkHook:(e,o)=>{const n=t.loaderHook.lifecycle.createLink.emit({url:e,attrs:o});if(n instanceof HTMLLinkElement)return n}});r&&document.head.appendChild(n)})}else{const o={fetchpriority:"high",type:"module"===(null==e?void 0:e.type)?"module":"text/javascript"};a.forEach(e=>{const{script:n,needAttach:r}=(0,s.so)({url:e,cb:()=>{},attrs:o,createScriptHook:(e,o)=>{const n=t.loaderHook.lifecycle.createScript.emit({url:e,attrs:o});if(n instanceof HTMLScriptElement)return n},needDeleteScript:!0});r&&document.head.appendChild(n)})}}}let tt=class{async getEntry(){if(this.remoteEntryExports)return this.remoteEntryExports;let e;try{e=await Je({origin:this.host,remoteInfo:this.remoteInfo,remoteEntryExports:this.remoteEntryExports})}catch(t){const o=Ye(this.remoteInfo);t instanceof Error&&t.message.includes(m)&&(e=await this.host.loaderHook.lifecycle.loadEntryError.emit({getRemoteEntry:Je,origin:this.host,remoteInfo:this.remoteInfo,remoteEntryExports:this.remoteEntryExports,globalLoading:L,uniqueKey:o}))}return S(e,`remoteEntryExports is undefined \n ${(0,s.ML)(this.remoteInfo)}`),this.remoteEntryExports=e,this.remoteEntryExports}async get(e,t,o,r){const{loadFactory:s=!0}=o||{loadFactory:!0},a=await this.getEntry();if(!this.inited){const t=this.host.shareScopeMap,o=Array.isArray(this.remoteInfo.shareScope)?this.remoteInfo.shareScope:[this.remoteInfo.shareScope];o.length||o.push("default"),o.forEach(e=>{t[e]||(t[e]={})});const s=t[o[0]],l=[],c={version:this.remoteInfo.version||"",shareScopeKeys:Array.isArray(this.remoteInfo.shareScope)?o:this.remoteInfo.shareScope||"default"};Object.defineProperty(c,"shareScopeMap",{value:t,enumerable:!1});const d=await this.host.hooks.lifecycle.beforeInitContainer.emit({shareScope:s,remoteEntryInitOptions:c,initScope:l,remoteInfo:this.remoteInfo,origin:this.host});void 0===(null==a?void 0:a.init)&&k(y(i,b,{hostName:this.host.name,remoteName:this.remoteInfo.name,remoteEntryUrl:this.remoteInfo.entry,remoteEntryKey:this.remoteInfo.entryGlobalName})),await a.init(d.shareScope,d.initScope,d.remoteEntryInitOptions),await this.host.hooks.lifecycle.initContainer.emit(n({},d,{id:e,remoteSnapshot:r,remoteEntryExports:a}))}let l;this.lib=a,this.inited=!0,l=await this.host.loaderHook.lifecycle.getModuleFactory.emit({remoteEntryExports:a,expose:t,moduleInfo:this.remoteInfo}),l||(l=await a.get(t)),S(l,`${$(this.remoteInfo)} remote don't export ${t}.`);const c=((e,t)=>{let o;return o=e.endsWith("/")?e.slice(0,-1):e,t.startsWith(".")&&(t=t.slice(1)),o+=t,o})(this.remoteInfo.name,t),d=this.wraperFactory(l,c);return s?await d():d}wraperFactory(e,t){function o(e,t){e&&"object"==typeof e&&Object.isExtensible(e)&&!Object.getOwnPropertyDescriptor(e,Symbol.for("mf_module_id"))&&Object.defineProperty(e,Symbol.for("mf_module_id"),{value:t,enumerable:!1})}return e instanceof Promise?async()=>{const n=await e();return o(n,t),n}:()=>{const n=e();return o(n,t),n}}constructor({remoteInfo:e,host:t}){this.inited=!1,this.lib=void 0,this.remoteInfo=e,this.host=t}};class ot{on(e){"function"==typeof e&&this.listeners.add(e)}once(e){const t=this;this.on(function o(...n){return t.remove(o),e.apply(null,n)})}emit(...e){let t;return this.listeners.size>0&&this.listeners.forEach(o=>{t=o(...e)}),t}remove(e){this.listeners.delete(e)}removeAll(){this.listeners.clear()}constructor(e){this.type="",this.listeners=new Set,e&&(this.type=e)}}class nt extends ot{emit(...e){let t;const o=Array.from(this.listeners);if(o.length>0){let n=0;const r=t=>!1!==t&&(n<o.length?Promise.resolve(o[n++].apply(null,e)).then(r):t);t=r()}return Promise.resolve(t)}}function rt(e,t){if(!A(t))return!1;if(e!==t)for(const o in e)if(!(o in t))return!1;return!0}class st extends ot{emit(e){A(e)||k(`The data for the "${this.type}" hook should be an object.`);for(const t of this.listeners)try{const o=t(e);if(!rt(e,o)){this.onerror(`A plugin returned an unacceptable value for the "${this.type}" type.`);break}e=o}catch(e){N(e),this.onerror(e)}return e}constructor(e){super(),this.onerror=k,this.type=e}}class at extends ot{emit(e){A(e)||k(`The response data for the "${this.type}" hook must be an object.`);const t=Array.from(this.listeners);if(t.length>0){let o=0;const n=t=>(N(t),this.onerror(t),e),r=s=>{if(rt(e,s)){if(e=s,o<t.length)try{return Promise.resolve(t[o++](e)).then(r,n)}catch(e){return n(e)}}else this.onerror(`A plugin returned an incorrect value for the "${this.type}" type.`);return e};return Promise.resolve(r(e))}return Promise.resolve(e)}constructor(e){super(),this.onerror=k,this.type=e}}class it{applyPlugin(e,t){var o;S((o=e,"[object Object]"===R.call(o)),"Plugin configuration is invalid.");const n=e.name;S(n,"A name must be provided by the plugin."),this.registerPlugins[n]||(this.registerPlugins[n]=e,null==e.apply||e.apply.call(e,t),Object.keys(this.lifecycle).forEach(t=>{const o=e[t];o&&this.lifecycle[t].on(o)}))}removePlugin(e){S(e,"A name is required.");const t=this.registerPlugins[e];S(t,`The plugin "${e}" is not registered.`),Object.keys(t).forEach(e=>{"name"!==e&&this.lifecycle[e].remove(t[e])})}constructor(e){this.registerPlugins={},this.lifecycle=e,this.lifecycleKeys=Object.keys(e)}}function lt(e,t){const o=x(t);o.url||k(`The attribute remoteEntry of ${e.name} must not be undefined.`);let n=(0,s.Al)(t,o.url);(0,s.OL)()||n.startsWith("http")||(n=`https:${n}`),e.type=o.type,e.entryGlobalName=o.globalName,e.entry=n,e.version=t.version,e.buildVersion=t.buildVersion}function ct(e){const t=e.split(":");return 1===t.length?{name:t[0],version:void 0}:2===t.length?{name:t[0],version:t[1]}:{name:t[1],version:t[2]}}function dt(e,t,o,n,r={},a){const i=$(t),{value:l}=H(e,i),c=a||l;if(c&&!(0,s.Tr)(c)&&(o(c,t,n),c.remotesInfo)){const t=Object.keys(c.remotesInfo);for(const n of t){if(r[n])continue;r[n]=!0;const t=ct(n),s=c.remotesInfo[n];dt(e,{name:t.name,version:s.matchedVersion},o,!1,r,void 0)}}}const pt=(e,t)=>document.querySelector(`${e}[${"link"===e?"href":"src"}="${t}"]`);function ut(e,t,o,n,r){const a=[],i=[],l=[],c=new Set,d=new Set,{options:p}=e,{preloadConfig:u}=t,{depsRemote:m}=u;if(dt(n,o,(t,o,n)=>{let r;if(n)r=u;else if(Array.isArray(m)){const e=m.find(e=>e.nameOrAlias===o.name||e.nameOrAlias===o.alias);if(!e)return;r=Qe(e)}else{if(!0!==m)return;r=u}const c=(0,s.Al)(t,x(t).url);c&&l.push({name:o.name,moduleInfo:{name:o.name,entry:c,type:"remoteEntryType"in t?t.remoteEntryType:"global",entryGlobalName:"globalName"in t?t.globalName:o.name,shareScope:"",version:"version"in t?t.version:void 0},url:c});let d="modules"in t?t.modules:[];const p=(h=r.exposes)?h.map(e=>"."===e?e:e.startsWith("./")?e.replace("./",""):e):[];var h,f;function _(e){const o=e.map(e=>(0,s.Al)(t,e));return r.filter?o.filter(r.filter):o}if(p.length&&"modules"in t&&(d=null==t||null==(f=t.modules)?void 0:f.reduce((e,t)=>(-1!==(null==p?void 0:p.indexOf(t.moduleName))&&e.push(t),e),[])),d){const n=d.length;for(let s=0;s<n;s++){const n=d[s],l=`${o.name}/${n.moduleName}`;e.remoteHandler.hooks.lifecycle.handlePreloadModule.emit({id:"."===n.moduleName?o.name:l,name:o.name,remoteSnapshot:t,preloadConfig:r,remote:o,origin:e}),W(l)||("all"===r.resourceCategory?(a.push(..._(n.assets.css.async)),a.push(..._(n.assets.css.sync)),i.push(..._(n.assets.js.async)),i.push(..._(n.assets.js.sync))):(r.resourceCategory="sync")&&(a.push(..._(n.assets.css.sync)),i.push(..._(n.assets.js.sync))),K(l))}}},!0,{},r),r.shared&&r.shared.length>0){const t=(t,o)=>{const n=ze(e.shareScopeMap,o.sharedName,t,e.sharedHandler.hooks.lifecycle.resolveShare);n&&"function"==typeof n.lib&&(o.assets.js.sync.forEach(e=>{c.add(e)}),o.assets.css.sync.forEach(e=>{d.add(e)}))};r.shared.forEach(e=>{var o;const n=null==(o=p.shared)?void 0:o[e.sharedName];if(!n)return;const r=e.version?n.find(t=>t.version===e.version):n;r&&O(r).forEach(o=>{t(o,e)})})}const h=i.filter(e=>!c.has(e)&&!pt("script",e));return{cssAssets:a.filter(e=>!d.has(e)&&!pt("link",e)),jsAssetsWithoutEntry:h,entryAssets:l.filter(e=>!pt("script",e.url))}}function mt(e,t){const o=q({name:t.name,version:t.options.version}),n=o&&"remotesInfo"in o&&o.remotesInfo&&H(o.remotesInfo,e.name).value;return n&&n.matchedVersion?{hostGlobalSnapshot:o,globalSnapshot:F(),remoteSnapshot:q({name:e.name,version:n.matchedVersion})}:{hostGlobalSnapshot:void 0,globalSnapshot:F(),remoteSnapshot:q({name:e.name,version:"version"in e?e.version:void 0})}}class ht{async loadRemoteSnapshotInfo({moduleInfo:e,id:t,expose:o}){const{options:r}=this.HostInstance;await this.hooks.lifecycle.beforeLoadRemoteSnapshot.emit({options:r,moduleInfo:e});let a=q({name:this.HostInstance.options.name,version:this.HostInstance.options.version});var i;a||(a={version:this.HostInstance.options.version||"",remoteEntry:"",remotesInfo:{}},i={[this.HostInstance.options.name]:a},D.__FEDERATION__.moduleInfo=n({},D.__FEDERATION__.moduleInfo,i)),a&&"remotesInfo"in a&&!H(a.remotesInfo,e.name).value&&("version"in e||"entry"in e)&&(a.remotesInfo=n({},null==a?void 0:a.remotesInfo,{[e.name]:{matchedVersion:"version"in e?e.version:e.entry}}));const{hostGlobalSnapshot:l,remoteSnapshot:c,globalSnapshot:d}=this.getGlobalRemoteInfo(e),{remoteSnapshot:p,globalSnapshot:m}=await this.hooks.lifecycle.loadSnapshot.emit({options:r,moduleInfo:e,hostGlobalSnapshot:l,remoteSnapshot:c,globalSnapshot:d});let h,f;if(p)if((0,s.Tr)(p)){const t=(0,s.OL)()?p.remoteEntry:p.ssrRemoteEntry||p.remoteEntry||"",o=await this.getManifestJson(t,e,{});h=o,f=U(n({},e,{entry:t}),o)}else{const{remoteSnapshot:t}=await this.hooks.lifecycle.loadRemoteSnapshot.emit({options:this.HostInstance.options,moduleInfo:e,remoteSnapshot:p,from:"global"});h=t,f=m}else if(C(e)){const t=await this.getManifestJson(e.entry,e,{}),o=U(e,t),{remoteSnapshot:n}=await this.hooks.lifecycle.loadRemoteSnapshot.emit({options:this.HostInstance.options,moduleInfo:e,remoteSnapshot:t,from:"global"});h=n,f=o}else k(y(u,b,{hostName:e.name,hostVersion:e.version,globalSnapshot:JSON.stringify(m)}));return await this.hooks.lifecycle.afterLoadSnapshot.emit({id:t,host:this.HostInstance,options:r,moduleInfo:e,remoteSnapshot:h}),{remoteSnapshot:h,globalSnapshot:f}}getGlobalRemoteInfo(e){return mt(e,this.HostInstance)}async getManifestJson(e,t,o){const n=async()=>{let o=this.manifestCache.get(e);if(o)return o;try{let t=await this.loaderHook.lifecycle.fetch.emit(e,{});t&&t instanceof Response||(t=await fetch(e,{})),o=await t.json()}catch(n){o=await this.HostInstance.remoteHandler.hooks.lifecycle.errorLoadRemote.emit({id:e,error:n,from:"runtime",lifecycle:"afterResolve",origin:this.HostInstance}),o||(delete this.manifestLoading[e],k(y(l,b,{manifestUrl:e,moduleName:t.name,hostName:this.HostInstance.options.name},`${n}`)))}return S(o.metaData&&o.exposes&&o.shared,`${e} is not a federation manifest`),this.manifestCache.set(e,o),o};return this.manifestLoading[e]||(this.manifestLoading[e]=(async()=>{const o=await n(),r=(0,s.Jn)(o,{version:e}),{remoteSnapshot:a}=await this.hooks.lifecycle.loadRemoteSnapshot.emit({options:this.HostInstance.options,moduleInfo:t,manifestJson:o,remoteSnapshot:r,manifestUrl:e,from:"manifest"});return a})().then(e=>e)),this.manifestLoading[e]}constructor(e){this.loadingHostSnapshot=null,this.manifestCache=new Map,this.hooks=new it({beforeLoadRemoteSnapshot:new nt("beforeLoadRemoteSnapshot"),loadSnapshot:new at("loadGlobalSnapshot"),loadRemoteSnapshot:new at("loadRemoteSnapshot"),afterLoadSnapshot:new at("afterLoadSnapshot")}),this.manifestLoading=P.__FEDERATION__.__MANIFEST_LOADING__,this.HostInstance=e,this.loaderHook=e.loaderHook}}class ft{registerShared(e,t){const{shareInfos:o,shared:n}=Be(e,t);return Object.keys(o).forEach(e=>{o[e].forEach(o=>{!ze(this.shareScopeMap,e,o,this.hooks.lifecycle.resolveShare)&&o&&o.lib&&this.setShared({pkgName:e,lib:o.lib,get:o.get,loaded:!0,shared:o,from:t.name})})}),{shareInfos:o,shared:n}}async loadShare(e,t){const{host:o}=this,n=We({pkgName:e,extraOptions:t,shareInfos:o.options.shared});(null==n?void 0:n.scope)&&await Promise.all(n.scope.map(async e=>{await Promise.all(this.initializeSharing(e,{strategy:n.strategy}))}));const r=await this.hooks.lifecycle.beforeLoadShare.emit({pkgName:e,shareInfo:n,shared:o.options.shared,origin:o}),{shareInfo:s}=r;S(s,`Cannot find ${e} Share in the ${o.options.name}. Please ensure that the ${e} Share parameters have been injected`);const a=ze(this.shareScopeMap,e,s,this.hooks.lifecycle.resolveShare),i=e=>{e.useIn||(e.useIn=[]),I(e.useIn,o.options.name)};if(a&&a.lib)return i(a),a.lib;if(a&&a.loading&&!a.loaded){const e=await a.loading;return a.loaded=!0,a.lib||(a.lib=e),i(a),e}if(a){const t=(async()=>{const e=await a.get();return i(a),a.loaded=!0,a.lib=e,e})();return this.setShared({pkgName:e,loaded:!1,shared:a,from:o.options.name,lib:null,loading:t}),t}{if(null==t?void 0:t.customShareInfo)return!1;const n=(async()=>{const t=await s.get();s.lib=t,s.loaded=!0,i(s);const o=ze(this.shareScopeMap,e,s,this.hooks.lifecycle.resolveShare);return o&&(o.lib=t,o.loaded=!0,o.from=s.from),t})();return this.setShared({pkgName:e,loaded:!1,shared:s,from:o.options.name,lib:null,loading:n}),n}}initializeSharing(e=X,t){const{host:o}=this,n=null==t?void 0:t.from,r=null==t?void 0:t.strategy;let s=null==t?void 0:t.initScope;const a=[];if("build"!==n){const{initTokens:t}=this;s||(s=[]);let o=t[e];if(o||(o=t[e]={from:this.host.name}),s.indexOf(o)>=0)return a;s.push(o)}const i=this.shareScopeMap,l=o.options.name;i[e]||(i[e]={});const c=i[e];return Object.keys(o.options.shared).forEach(t=>{o.options.shared[t].forEach(o=>{o.scope.includes(e)&&((e,t)=>{var o;const{version:n,eager:r}=t;c[e]=c[e]||{};const s=c[e],a=s[n],i=Boolean(a&&(a.eager||(null==(o=a.shareConfig)?void 0:o.eager)));(!a||"loaded-first"!==a.strategy&&!a.loaded&&(Boolean(!r)!==!i?r:l>a.from))&&(s[n]=t)})(t,o)})}),"version-first"!==o.options.shareStrategy&&"version-first"!==r||o.options.remotes.forEach(t=>{t.shareScope===e&&a.push((async t=>{const{module:n}=await o.remoteHandler.getRemoteModuleAndOptions({id:t});if(n.getEntry){let a;try{a=await n.getEntry()}catch(e){a=await o.remoteHandler.hooks.lifecycle.errorLoadRemote.emit({id:t,error:e,from:"runtime",lifecycle:"beforeLoadShare",origin:o})}n.inited||(await(r=a,r&&r.init&&r.init(i[e],s)),n.inited=!0)}var r})(t.name))}),a}loadShareSync(e,t){const{host:o}=this,n=We({pkgName:e,extraOptions:t,shareInfos:o.options.shared});(null==n?void 0:n.scope)&&n.scope.forEach(e=>{this.initializeSharing(e,{strategy:n.strategy})});const r=ze(this.shareScopeMap,e,n,this.hooks.lifecycle.resolveShare),s=e=>{e.useIn||(e.useIn=[]),I(e.useIn,o.options.name)};if(r){if("function"==typeof r.lib)return s(r),r.loaded||(r.loaded=!0,r.from===o.options.name&&(n.loaded=!0)),r.lib;if("function"==typeof r.get){const t=r.get();if(!(t instanceof Promise))return s(r),this.setShared({pkgName:e,loaded:!0,from:o.options.name,lib:t,shared:r}),t}}if(n.lib)return n.loaded||(n.loaded=!0),n.lib;if(n.get){const r=n.get();if(r instanceof Promise){const n="build"===(null==t?void 0:t.from)?d:p;throw new Error(y(n,b,{hostName:o.options.name,sharedPkgName:e}))}return n.lib=r,this.setShared({pkgName:e,loaded:!0,from:o.options.name,lib:n.lib,shared:n}),n.lib}throw new Error(y(p,b,{hostName:o.options.name,sharedPkgName:e}))}initShareScopeMap(e,t,o={}){const{host:n}=this;this.shareScopeMap[e]=t,this.hooks.lifecycle.initContainerShareScopeMap.emit({shareScope:t,options:n.options,origin:n,scopeName:e,hostShareScopeMap:o.hostShareScopeMap})}setShared({pkgName:e,shared:t,from:o,lib:s,loading:a,loaded:i,get:l}){const{version:c,scope:d="default"}=t,p=r(t,["version","scope"]);(Array.isArray(d)?d:[d]).forEach(t=>{if(this.shareScopeMap[t]||(this.shareScopeMap[t]={}),this.shareScopeMap[t][e]||(this.shareScopeMap[t][e]={}),!this.shareScopeMap[t][e][c])return this.shareScopeMap[t][e][c]=n({version:c,scope:["default"]},p,{lib:s,loaded:i,loading:a}),void(l&&(this.shareScopeMap[t][e][c].get=l));const r=this.shareScopeMap[t][e][c];a&&!r.loading&&(r.loading=a),i&&!r.loaded&&(r.loaded=i),o&&r.from!==o&&(r.from=o)})}_setGlobalShareScopeMap(e){const t=Ge(),o=e.id||e.name;o&&!t[o]&&(t[o]=this.shareScopeMap)}constructor(e){this.hooks=new it({afterResolve:new at("afterResolve"),beforeLoadShare:new at("beforeLoadShare"),loadShare:new nt,resolveShare:new st("resolveShare"),initContainerShareScopeMap:new st("initContainerShareScopeMap")}),this.host=e,this.shareScopeMap={},this.initTokens={},this._setGlobalShareScopeMap(e.options)}}class _t{formatAndRegisterRemote(e,t){return(t.remotes||[]).reduce((e,t)=>(this.registerRemote(t,e,{force:!1}),e),e.remotes)}setIdToRemoteMap(e,t){const{remote:o,expose:n}=t,{name:r,alias:s}=o;if(this.idToRemoteMap[e]={name:o.name,expose:n},s&&e.startsWith(r)){const t=e.replace(r,s);return void(this.idToRemoteMap[t]={name:o.name,expose:n})}if(s&&e.startsWith(s)){const t=e.replace(s,r);this.idToRemoteMap[t]={name:o.name,expose:n}}}async loadRemote(e,t){const{host:o}=this;try{const{loadFactory:n=!0}=t||{loadFactory:!0},{module:r,moduleOptions:s,remoteMatchInfo:a}=await this.getRemoteModuleAndOptions({id:e}),{pkgNameOrAlias:i,remote:l,expose:c,id:d,remoteSnapshot:p}=a,u=await r.get(d,c,t,p),m=await this.hooks.lifecycle.onLoad.emit({id:d,pkgNameOrAlias:i,expose:c,exposeModule:n?u:void 0,exposeModuleFactory:n?void 0:u,remote:l,options:s,moduleInstance:r,origin:o});return this.setIdToRemoteMap(e,a),"function"==typeof m?m:u}catch(n){const{from:r="runtime"}=t||{from:"runtime"},s=await this.hooks.lifecycle.errorLoadRemote.emit({id:e,error:n,from:r,lifecycle:"onLoad",origin:o});if(!s)throw n;return s}}async preloadRemote(e){const{host:t}=this;await this.hooks.lifecycle.beforePreloadRemote.emit({preloadOps:e,options:t.options,origin:t});const o=(n=t.options.remotes,e.map(e=>{const t=function(e,t){for(const o of e){if(t===o.name)return o;if(o.alias&&t===o.alias)return o}}(n,e.nameOrAlias);return S(t,`Unable to preload ${e.nameOrAlias} as it is not included in ${!t&&(0,s.ML)({remoteInfo:t,remotes:n})}`),{remote:t,preloadConfig:Qe(e)}}));var n;await Promise.all(o.map(async e=>{const{remote:o}=e,n=Ze(o),{globalSnapshot:r,remoteSnapshot:s}=await t.snapshotHandler.loadRemoteSnapshotInfo({moduleInfo:o}),a=await this.hooks.lifecycle.generatePreloadAssets.emit({origin:t,preloadOptions:e,remote:o,remoteInfo:n,globalSnapshot:r,remoteSnapshot:s});a&&et(n,t,a)}))}registerRemotes(e,t){const{host:o}=this;e.forEach(e=>{this.registerRemote(e,o.options.remotes,{force:null==t?void 0:t.force})})}async getRemoteModuleAndOptions(e){const{host:t}=this,{id:o}=e;let r;try{r=await this.hooks.lifecycle.beforeRequest.emit({id:o,options:t.options,origin:t})}catch(e){if(r=await this.hooks.lifecycle.errorLoadRemote.emit({id:o,options:t.options,origin:t,from:"runtime",error:e,lifecycle:"beforeRequest"}),!r)throw e}const{id:s}=r,a=function(e,t){for(const o of e){const e=t.startsWith(o.name);let n=t.replace(o.name,"");if(e){if(n.startsWith("/"))return n=`.${n}`,{pkgNameOrAlias:o.name,expose:n,remote:o};if(""===n)return{pkgNameOrAlias:o.name,expose:".",remote:o}}const r=o.alias&&t.startsWith(o.alias);let s=o.alias&&t.replace(o.alias,"");if(o.alias&&r){if(s&&s.startsWith("/"))return s=`.${s}`,{pkgNameOrAlias:o.alias,expose:s,remote:o};if(""===s)return{pkgNameOrAlias:o.alias,expose:".",remote:o}}}}(t.options.remotes,s);S(a,y(c,b,{hostName:t.options.name,requestId:s}));const{remote:i}=a,l=Ze(i),d=await t.sharedHandler.hooks.lifecycle.afterResolve.emit(n({id:s},a,{options:t.options,origin:t,remoteInfo:l})),{remote:p,expose:u}=d;S(p&&u,`The 'beforeRequest' hook was executed, but it failed to return the correct 'remote' and 'expose' values while loading ${s}.`);let m=t.moduleCache.get(p.name);const h={host:t,remoteInfo:l};return m||(m=new tt(h),t.moduleCache.set(p.name,m)),{module:m,moduleOptions:h,remoteMatchInfo:d}}registerRemote(e,t,o){const{host:n}=this,r=()=>{if(e.alias){const o=t.find(t=>{var o;return e.alias&&(t.name.startsWith(e.alias)||(null==(o=t.alias)?void 0:o.startsWith(e.alias)))});S(!o,`The alias ${e.alias} of remote ${e.name} is not allowed to be the prefix of ${o&&o.name} name or alias`)}"entry"in e&&(0,s.OL)()&&!e.entry.startsWith("http")&&(e.entry=new URL(e.entry,window.location.origin).href),e.shareScope||(e.shareScope=X),e.type||(e.type=Y)};this.hooks.lifecycle.beforeRegisterRemote.emit({remote:e,origin:n});const a=t.find(t=>t.name===e.name);if(a){const i=[`The remote "${e.name}" is already registered.`,"Please note that overriding it may cause unexpected errors."];(null==o?void 0:o.force)&&(this.removeRemote(a),r(),t.push(e),this.hooks.lifecycle.registerRemote.emit({remote:e,origin:n}),(0,s.R8)(i.join(" ")))}else r(),t.push(e),this.hooks.lifecycle.registerRemote.emit({remote:e,origin:n})}removeRemote(e){try{const{host:o}=this,{name:n}=e,r=o.options.remotes.findIndex(e=>e.name===n);-1!==r&&o.options.remotes.splice(r,1);const a=o.moduleCache.get(e.name);if(a){const n=a.remoteInfo,r=n.entryGlobalName;var t;M[r]&&((null==(t=Object.getOwnPropertyDescriptor(M,r))?void 0:t.configurable)?delete M[r]:M[r]=void 0);const i=Ye(a.remoteInfo);L[i]&&delete L[i],o.snapshotHandler.manifestCache.delete(n.entry);let l=n.buildVersion?(0,s.lG)(n.name,n.buildVersion):n.name;const c=M.__FEDERATION__.__INSTANCES__.findIndex(e=>n.buildVersion?e.options.id===l:e.name===l);if(-1!==c){const e=M.__FEDERATION__.__INSTANCES__[c];l=e.options.id||l;const t=Ge();let o=!0;const r=[];Object.keys(t).forEach(e=>{const s=t[e];s&&Object.keys(s).forEach(t=>{const a=s[t];a&&Object.keys(a).forEach(s=>{const i=a[s];i&&Object.keys(i).forEach(a=>{const l=i[a];l&&"object"==typeof l&&l.from===n.name&&(l.loaded||l.loading?(l.useIn=l.useIn.filter(e=>e!==n.name),l.useIn.length?o=!1:r.push([e,t,s,a])):r.push([e,t,s,a]))})})})}),o&&(e.shareScopeMap={},delete t[l]),r.forEach(([e,o,n,r])=>{var s,a,i;null==(i=t[e])||null==(a=i[o])||null==(s=a[n])||delete s[r]}),M.__FEDERATION__.__INSTANCES__.splice(c,1)}const{hostGlobalSnapshot:d}=mt(e,o);if(d){const t=d&&"remotesInfo"in d&&d.remotesInfo&&H(d.remotesInfo,e.name).key;t&&(delete d.remotesInfo[t],Boolean(P.__FEDERATION__.__MANIFEST_LOADING__[t])&&delete P.__FEDERATION__.__MANIFEST_LOADING__[t])}o.moduleCache.delete(e.name)}}catch(e){w.log("removeRemote fail: ",e)}}constructor(e){this.hooks=new it({beforeRegisterRemote:new st("beforeRegisterRemote"),registerRemote:new st("registerRemote"),beforeRequest:new at("beforeRequest"),onLoad:new nt("onLoad"),handlePreloadModule:new ot("handlePreloadModule"),errorLoadRemote:new nt("errorLoadRemote"),beforePreloadRemote:new nt("beforePreloadRemote"),generatePreloadAssets:new nt("generatePreloadAssets"),afterPreloadRemote:new nt,loadEntry:new nt}),this.host=e,this.idToRemoteMap={}}}class gt{initOptions(e){this.registerPlugins(e.plugins);const t=this.formatOptions(this.options,e);return this.options=t,t}async loadShare(e,t){return this.sharedHandler.loadShare(e,t)}loadShareSync(e,t){return this.sharedHandler.loadShareSync(e,t)}initializeSharing(e=X,t){return this.sharedHandler.initializeSharing(e,t)}initRawContainer(e,t,o){const n=Ze({name:e,entry:t}),r=new tt({host:this,remoteInfo:n});return r.remoteEntryExports=o,this.moduleCache.set(e,r),r}async loadRemote(e,t){return this.remoteHandler.loadRemote(e,t)}async preloadRemote(e){return this.remoteHandler.preloadRemote(e)}initShareScopeMap(e,t,o={}){this.sharedHandler.initShareScopeMap(e,t,o)}formatOptions(e,t){const{shared:o}=Be(e,t),{userOptions:r,options:s}=this.hooks.lifecycle.beforeInit.emit({origin:this,userOptions:t,options:e,shareInfo:o}),a=this.remoteHandler.formatAndRegisterRemote(s,r),{shared:i}=this.sharedHandler.registerShared(s,r),l=[...s.plugins];r.plugins&&r.plugins.forEach(e=>{l.includes(e)||l.push(e)});const c=n({},e,t,{plugins:l,remotes:a,shared:i});return this.hooks.lifecycle.init.emit({origin:this,options:c}),c}registerPlugins(e){const t=function(e,t){const o=D.__FEDERATION__.__GLOBAL_PLUGIN__,n=[t.hooks,t.remoteHandler.hooks,t.sharedHandler.hooks,t.snapshotHandler.hooks,t.loaderHook,t.bridgeHook];return o.length>0&&o.forEach(t=>{(null==e?void 0:e.find(e=>e.name!==t.name))&&e.push(t)}),e&&e.length>0&&e.forEach(e=>{n.forEach(o=>{o.applyPlugin(e,t)})}),e}(e,this);this.options.plugins=this.options.plugins.reduce((e,t)=>t?(e&&!e.find(e=>e.name===t.name)&&e.push(t),e):e,t||[])}registerRemotes(e,t){return this.remoteHandler.registerRemotes(e,t)}registerShared(e){this.sharedHandler.registerShared(this.options,n({},this.options,{shared:e}))}constructor(e){this.hooks=new it({beforeInit:new st("beforeInit"),init:new ot,beforeInitContainer:new at("beforeInitContainer"),initContainer:new at("initContainer")}),this.version="0.19.1",this.moduleCache=new Map,this.loaderHook=new it({getModuleInfo:new ot,createScript:new ot,createLink:new ot,fetch:new nt,loadEntryError:new nt,getModuleFactory:new nt}),this.bridgeHook=new it({beforeBridgeRender:new ot,afterBridgeRender:new ot,beforeBridgeDestroy:new ot,afterBridgeDestroy:new ot});const t=[{name:"snapshot-plugin",async afterResolve(e){const{remote:t,pkgNameOrAlias:o,expose:r,origin:s,remoteInfo:a,id:i}=e;if(!C(t)||!T(t)){const{remoteSnapshot:l,globalSnapshot:c}=await s.snapshotHandler.loadRemoteSnapshotInfo({moduleInfo:t,id:i});lt(a,l);const d={remote:t,preloadConfig:{nameOrAlias:o,exposes:[r],resourceCategory:"sync",share:!1,depsRemote:!1}},p=await s.remoteHandler.hooks.lifecycle.generatePreloadAssets.emit({origin:s,preloadOptions:d,remoteInfo:a,remote:t,remoteSnapshot:l,globalSnapshot:c});return p&&et(a,s,p,!1),n({},e,{remoteSnapshot:l})}return e}},{name:"generate-preload-assets-plugin",async generatePreloadAssets(e){const{origin:t,preloadOptions:o,remoteInfo:n,remote:r,globalSnapshot:a,remoteSnapshot:i}=e;return(0,s.OL)()?C(r)&&T(r)?{cssAssets:[],jsAssetsWithoutEntry:[],entryAssets:[{name:r.name,url:r.entry,moduleInfo:{name:n.name,entry:r.entry,type:n.type||"global",entryGlobalName:"",shareScope:""}}]}:(lt(n,i),ut(t,o,n,a,i)):{cssAssets:[],jsAssetsWithoutEntry:[],entryAssets:[]}}}],o={id:"slider.editor:0.0.8",name:e.name,plugins:t,remotes:[],shared:{},inBrowser:(0,s.OL)()};this.name=e.name,this.options=o,this.snapshotHandler=new ht(this),this.sharedHandler=new ft(this),this.remoteHandler=new _t(this),this.shareScopeMap=this.sharedHandler.shareScopeMap,this.registerPlugins([...o.plugins,...e.plugins||[]]),this.options=this.formatOptions(o,e)}}function yt(e){const t=new(M.__FEDERATION__.__DEBUG_CONSTRUCTOR__||gt)(e);return function(e){M.__FEDERATION__.__INSTANCES__.push(e)}(t),t}let vt=null;function bt(e){const t=(o=e.name,n=e.version,M.__FEDERATION__.__INSTANCES__.find(e=>!("slider.editor:0.0.8"!==e.options.id&&(e.options.name!==o||e.options.version||n)&&(e.options.name!==o||!n||e.options.version!==n))));var o,n;return t?(t.initOptions(e),vt||(vt=t),t):(vt=yt(e),vt)}function Et(...e){return S(vt,y(h,b)),vt.loadRemote.apply(vt,e)}function wt(...e){return S(vt,y(h,b)),vt.loadShare.apply(vt,e)}function St(...e){return S(vt,y(h,b)),vt.loadShareSync.apply(vt,e)}function kt(...e){return S(vt,y(h,b)),vt.preloadRemote.apply(vt,e)}function Nt(...e){return S(vt,y(h,b)),vt.registerRemotes.apply(vt,e)}function It(...e){return S(vt,y(h,b)),vt.registerPlugins.apply(vt,e)}function $t(){return vt}function Ct(...e){return S(vt,y(h,b)),vt.registerShared.apply(vt,e)}!function(e,t=(0,s.Bb)()){t&&(M.__FEDERATION__.__DEBUG_CONSTRUCTOR__=e,M.__FEDERATION__.__DEBUG_CONSTRUCTOR_VERSION__="0.19.1")}(gt)},5216:(e,t,o)=>{o.d(t,{A:()=>u});var n=o(7024),r=o(4875),s=o(5e3),a=o(9338);let i,l,c;function d(){console.log("focus");const e=l.object;i.update();let t=!1;if(e.traverse(e=>{e.isMesh&&(t=!0)}),t){const t=new r.Box3;e.traverse(e=>{t.expandByObject(e)});const o=new r.Sphere;t.getBoundingSphere(o),p.FitTo(o)}else p.FitTo({center:e.position,radius:.25})}class p{static FocusToSelect(){l.object&&d()}static FocusTo(e){i.target.copy(e.isObject3D?e.position:e)}static MoveTo(e,t){const o={position:new r.Vector3,time:1e3,...e,control:!1},n={position:new r.Vector3,time:1e3,...t,control:!1};i.enabled=!1;const s=Workspace.Camera.position.clone(),a=i.target.clone();o.control=o.time>n.time,n.control=n.time>=o.time;const l=new Tween(s).to(o.position,o.time).easing(Easing.Quadratic.InOut).onUpdate(()=>{Workspace.Camera.position.copy(s),Workspace.Camera.updateProjectionMatrix(),i.update()}).onComplete(()=>{o.control&&(i.enabled=!0),tweengroup.remove(l)}).start(),c=new Tween(a).to(n.position,n.time).easing(Easing.Quadratic.InOut).onUpdate(()=>{i.target.copy(a),i.getPolarAngle()>i.maxPolarAngle&&i.target.setY(center.y+Math.cos(i.maxPolarAngle)*distance)}).onComplete(()=>{n.control&&(i.enabled=!0),tweengroup.remove(c)}).start();tweengroup.add(l,c)}static SetState(e){i.enabled=e}static Init({canvas:e},t,o){c=t,i=new n.N(t,e),i.enabled=!0,i.enableDamping=!0,i.dampingFactor=.25,i.screenSpacePanning=!1,i.minDistance=.01,i.maxDistance=1e3,l=new s.ZU(t,e),l.addEventListener("dragging-changed",e=>{i.enabled=!e.value});const a=l.getHelper();o.add(a),l.getRaycaster().layers.set(1),a.traverse(e=>{e.layers.set(1)}),window.addEventListener("keydown",e=>{switch(i.enabled=!e.ctrlKey,e.code){case"KeyQ":l.setSpace("local"===l.space?"world":"local");break;case"Shift":l.setTranslationSnap(1),l.setRotationSnap(r.MathUtils.degToRad(15)),l.setScaleSnap(.25);break;case"KeyW":l.setMode("translate");break;case"KeyE":l.setMode("rotate");break;case"KeyR":l.setMode("scale");break;case"KeyF":l.object&&d();break;case"KeyC":case"KeyV":case"KeyX":case"KeyY":case"KeyZ":case" ":case"Escape":break;case"+":case"=":l.setSize(l.size+.1);break;case"-":case"_":l.setSize(Math.max(l.size-.1,.1))}}),window.addEventListener("keyup",e=>{i.enabled=!e.ctrlKey,"Shift"===e.key&&(l.setTranslationSnap(null),l.setRotationSnap(null),l.setScaleSnap(null))})}static get Transformer(){return l}static Select(e){e?l.attach(e):l.detach()}static Update(e){i.update(e)}static FitTo({center:e,radius:t}){const o=(0,a.eh)(c.fov),n=Math.max(t,.25)/Math.sin(o/2),s=(new r.Vector3).subVectors(c.position,e).normalize();!function(e,t,o=1){i.enabled=!1;const n=o,r=c.position.clone(),s=i.target.clone(),a=Date.now();!function o(){const l=(Date.now()-a)/(1e3*n);if(l>=1)return c.position.copy(e),i.enabled=!0,i.target.copy(t),void i.update();c.position.lerpVectors(r,e,l),i.target.lerpVectors(s,t,l),i.update(),requestAnimationFrame(o)}()}(e.clone().add(s.multiplyScalar(n)),e,.5)}}const u=p},6166:(e,t,o)=>{o.d(t,{A:()=>Oe});var n=o(2015);const r={class:"container"},s={class:"topline"},a={class:"title"},i={class:"info"},l=["onClick"],c={key:0},d={class:"element"},p=["innerHTML"],u=["onClick"],m={key:0},h={class:"panel-container"},f={class:"panel"},_={class:"header"},g={class:"content"},y={class:"footer"},v={methods:{closeModal(){this.$app.project.assets[1].url="model|assets/hex.glb"}},props:{header:{type:Object,default:{label:""}},footer:{type:Object,default:{}}},data:()=>({visible:{heirarhy:!0}})};var b=o(6262);const E=(0,b.A)(v,[["render",function(e,t,o,r,s,a){return(0,n.openBlock)(),(0,n.createElementBlock)("div",h,[(0,n.createElementVNode)("div",f,[(0,n.createElementVNode)("div",_,[(0,n.renderSlot)(e.$slots,"header")]),(0,n.createElementVNode)("div",g,[(0,n.renderSlot)(e.$slots,"default")]),(0,n.createElementVNode)("div",y,[(0,n.renderSlot)(e.$slots,"footer")])])])}]]),w={class:"slide-scroller",ref:"scroller"},S=["onClick","onDragstart","onDrop"],k={class:"title"},N=["src"],I=["src"],$={class:"overflow"},C=["src"],T={class:"overflow"};var A=o(6938);const R={props:{slides:{type:Array,required:!0},slide:{type:Object}},data:()=>({slideData:{name:{label:"Имя",value:""}},translateX:0,draggedIndex:null,cardbg:A}),watch:{slide(){this.centerSelectedImage()},slides(){this.slides.sort((e,t)=>e.index-t.index),this.centerSelectedImage()}},mounted(){this.slides.sort((e,t)=>e.index-t.index),this.centerSelectedImage(),this.observer=new ResizeObserver(this.centerSelectedImage.bind(this)),this.observer.observe(this.$refs.scroller)},beforeUnmount(){this.observer.disconnect()},methods:{onDragStart(e){this.draggedIndex=e},async onDrop(e){if(null===this.draggedIndex||this.draggedIndex===e)return;const t=this.slides.splice(this.draggedIndex,1)[0];this.slides.splice(e,0,t);const o=Math.min(this.draggedIndex,e),n=Math.max(this.draggedIndex,e);for(let e=o;e<=n;e++){const t=this.slides[e];t.index=e,await this.$app.slides.save(t)}this.draggedIndex=null,this.$nextTick(this.centerSelectedImage)},onScroll(e){e.deltaY>0?this.$app.slides.next():e.deltaY<0&&this.$app.slides.back()},addSlide(){const e=(0,n.reactive)({title:"Adding a slide",text:"Specify the slide title ",answer:""}),t=(0,n.reactive)({label:"Create",class:"primary",disabled:e.answer.length<1,callback:async t=>{const o=await this.$app.slides.add({name:e.answer});this.$app.toasts.add({message:`Slide ${o.name} added`}),this.selectSlide(o),this.centerSelectedImage()}});this.$app.modal.queryText(e,[t],o=>{e.answer=o,t.disabled=e.answer.length<1})},removeSlide(){this.$app.modal.open({header:{value:"Delete slide",handler:()=>{this.$app.modal.close()}},content:{},footer:{buttons:[{label:"Delete",class:"secondary",handler:async()=>{this.$app.modal.close(),this.$app.slides.remove()}},{label:"Cancel",class:"primary",handler:async()=>{this.$app.modal.close()}}]}})},selectSlide(e){this.$app.slides.goto(e.uid)},centerSelectedImage(){this.$nextTick(()=>{const e=this.$refs.scroller.offsetWidth,t=this.$refs.scroller.querySelector(".slide-item.selected");if(t){const o=t.offsetWidth,n=t.offsetLeft;this.translateX=-(n-e/2+o/2)}else this.translateX=.5*e})}}},O=(0,b.A)(R,[["render",function(e,t,o,r,s,a){const i=(0,n.resolveComponent)("icon"),l=(0,n.resolveDirective)("tooltip");return(0,n.openBlock)(),(0,n.createElementBlock)("div",w,[(0,n.createElementVNode)("div",{class:"slide-container",onWheelPassive:t[3]||(t[3]=(...e)=>a.onScroll&&a.onScroll(...e)),style:(0,n.normalizeStyle)({transform:`translateX(${s.translateX}px)`})},[((0,n.openBlock)(!0),(0,n.createElementBlock)(n.Fragment,null,(0,n.renderList)(o.slides,(e,r)=>((0,n.openBlock)(),(0,n.createElementBlock)("div",{key:r,class:(0,n.normalizeClass)(["slide-item",{selected:e===o.slide}]),onClick:t=>a.selectSlide(e),draggable:"true",onDragstart:e=>a.onDragStart(r),onDragover:t[0]||(t[0]=(0,n.withModifiers)(()=>{},["prevent"])),onDrop:e=>a.onDrop(r)},[(0,n.createElementVNode)("div",k,(0,n.toDisplayString)(e.name),1),(0,n.createElementVNode)("img",{src:s.cardbg,alt:"Image"},null,8,N)],42,S))),128)),(0,n.withDirectives)(((0,n.openBlock)(),(0,n.createElementBlock)("div",{class:"slide-item",onClick:t[1]||(t[1]=e=>a.addSlide())},[(0,n.createElementVNode)("img",{src:s.cardbg,alt:"Image"},null,8,I),(0,n.createElementVNode)("div",$,[(0,n.createVNode)(i,{value:"plus",size:"1em"})])])),[[l,"Add slide"]]),(0,n.withDirectives)(((0,n.openBlock)(),(0,n.createElementBlock)("div",{class:"slide-item",onClick:t[2]||(t[2]=e=>a.removeSlide())},[(0,n.createElementVNode)("img",{src:s.cardbg,alt:"Image"},null,8,C),(0,n.createElementVNode)("div",T,[(0,n.createVNode)(i,{value:"bin",size:"1em"})])])),[[l,"Remove slide"]])],36)],512)}],["__scopeId","data-v-c5bb29ca"]]),x={class:"panel-container"},M={class:"panel"},D={key:0,class:"content"},P={class:"elements"},V={data:()=>({visible:!1})},B=(0,b.A)(V,[["render",function(e,t,o,r,s,a){return(0,n.openBlock)(),(0,n.createElementBlock)("div",x,[(0,n.createElementVNode)("div",M,[(0,n.createElementVNode)("div",{onClick:t[0]||(t[0]=e=>s.visible=!s.visible),class:"header"},"Hierarhy"),s.visible?((0,n.openBlock)(),(0,n.createElementBlock)("div",D,[(0,n.createElementVNode)("div",P,[(0,n.renderSlot)(e.$slots,"default",{},void 0,!0)])])):(0,n.createCommentVNode)("v-if",!0)])])}],["__scopeId","data-v-e71891a0"]]),L={key:0,class:"element"},j=["onClick"],H={key:1,class:"label"};var F=o(7624),q=o(5982),U=o(6471),z=o(382);const G={methods:{getState(){return this.$app.project.getState(this.selected,this.slide)},getProp(e){const t=e.prop.split(".");let o=t[0],n=this.selected;for(let e=0;e<t.length-1;e++)n=n[t[e]],o=t[e+1];return n[o]},async saveElement(e){e.onupdate&&await e.onupdate(this.selected,null,null,this.slide),await this.$app.project.save(this.selected)},async setTargetProperty(e,t,o){e.onupdate&&(await e.onupdate(this.selected,t,o,this.slide),!this.selected.isElement)||("state"in e&&!0!==e.state?this.selected[t]=o?.encode?o.encode():o:this.getState()[t]=o?.encode?o.encode():o,this.selected.isElement?await this.$app.project.save(this.selected):this.selected.isAsset&&await this.$app.assets.save(this.selected))},async onComponentChanged(e,t,o,n){this.selected[t]=o,this.selected.isElement?this.setTargetProperty(e,t,o,n):e.onupdate&&await e.onupdate(this.selected,t,o,this.slide)},async onCleanStateValue(e,t){e.onclean?await e.onclean(this.selected,t,e,this.slide):t in this.getState()&&(delete this.getState()[t],await this.$app.project.save(this.selected))}},computed:{selected(){return this.$app.selection.selected},selectedUID(){return this.$app.selection.uid},blocks(){return console.log(this.selected.getTypes()),[{label:"Name",content:{component:"LabelEdit",prop:"name",state:!1},head:{component:"Label",prop:"name"}},{label:"Type",readonly:!0,head:{component:"Label",prop:"type"}},...this.$app.inspector.blocksFor(this.selected.getTypes())]},slide(){return this.$app.slides.actived?.uid}},watch:{selected(e){e&&e.restore&&e.restore()}},components:{InspectorPanel:F.A,modeltypes:q.A,assetsview:U.A,ViewPanel:E,SceneTools:z.A}},W=(0,b.A)(G,[["render",function(e,t,o,r,s,a){const i=(0,n.resolveComponent)("icon"),l=(0,n.resolveComponent)("InspectorPanel"),c=(0,n.resolveComponent)("SceneTools"),d=(0,n.resolveComponent)("ViewPanel"),p=(0,n.resolveDirective)("tooltip");return(0,n.openBlock)(),(0,n.createElementBlock)(n.Fragment,null,[(0,n.createVNode)(d,{class:"inspector",header:{label:"Инспектор"}},{footer:(0,n.withCtx)(()=>[(0,n.createVNode)(c)]),default:(0,n.withCtx)(()=>[a.selectedUID?((0,n.openBlock)(),(0,n.createElementBlock)("div",L,[(0,n.createCommentVNode)(" <div>{{ selected.paths.join('->') }}</div> "),(0,n.renderSlot)(e.$slots,"default",{},()=>[((0,n.openBlock)(!0),(0,n.createElementBlock)(n.Fragment,null,(0,n.renderList)(a.blocks,(e,t)=>((0,n.openBlock)(),(0,n.createBlock)(l,{label:e.label,tooltip:e.tooltip,stat:e.state,key:e.label},(0,n.createSlots)({_:2},[e.readonly?void 0:{name:"icons",fn:(0,n.withCtx)(({stat:t})=>[e.nonstate?(0,n.createCommentVNode)("v-if",!0):(0,n.withDirectives)(((0,n.openBlock)(),(0,n.createElementBlock)("span",{key:0,onClick:t=>a.onCleanStateValue(e.head||e.content,e.head?e.head.prop:e.content.prop),class:"remove-icon"},[(0,n.createVNode)(i,{value:"bin"})],8,j)),[[p,"Очистить значение в слайде"]])]),key:"0"},e.head?{name:"head",fn:(0,n.withCtx)(()=>[((0,n.openBlock)(),(0,n.createBlock)((0,n.resolveDynamicComponent)(e.head.component),(0,n.mergeProps)({ref_for:!0},e.head.props,{modelValue:a.selected[e.head.prop],"onUpdate:modelValue":[t=>a.selected[e.head.prop]=t,(...t)=>a.setTargetProperty(e.head,e.head.prop,...t)],value:a.selected,property:e.head,target:e.head.state?a.getState():a.selected,onClean:(...t)=>a.onCleanStateValue(e.head,...t),onSave:t=>a.saveElement(e.head),"onUpdate:target":(...t)=>a.setTargetProperty(e.head,...t),"onUpdate:value":(...t)=>a.onComponentChanged(e.head,e.head.prop,...t)},(0,n.toHandlers)(e.head.events||{})),null,16,["modelValue","onUpdate:modelValue","value","property","target","onClean","onSave","onUpdate:target","onUpdate:value"]))]),key:"1"}:void 0,e.content?{name:"content",fn:(0,n.withCtx)(()=>[((0,n.openBlock)(),(0,n.createBlock)((0,n.resolveDynamicComponent)(e.content.component),(0,n.mergeProps)({class:"blockcomponent"},{ref_for:!0},e.content.props,{value:a.selected,modelValue:a.selected[e.content.prop],"onUpdate:modelValue":[t=>a.selected[e.content.prop]=t,(...t)=>a.setTargetProperty(e.content,e.content.prop,...t)],property:e.content,target:e.content.state?a.getState():a.selected,onClean:(...t)=>a.onCleanStateValue(e.content,...t),onSave:t=>a.saveElement(e.content),"onUpdate:target":(...t)=>a.setTargetProperty(e.content,...t),"onUpdate:value":(...t)=>a.onComponentChanged(e.content,e.content.prop,...t)},(0,n.toHandlers)(e.content.events||{})),null,16,["value","modelValue","onUpdate:modelValue","property","target","onClean","onSave","onUpdate:target","onUpdate:value"]))]),key:"2"}:void 0]),1032,["label","tooltip","stat"]))),128))])])):((0,n.openBlock)(),(0,n.createElementBlock)("div",H," Select an item or state "))]),_:3}),(0,n.createCommentVNode)(' <div class="panel-container">\r\n        <div class="panel">\r\n            <div class="header">Inspector</div>\r\n            <div class="content">\r\n                \r\n            </div>\r\n            <div class="footer">\r\n\r\n            </div>\r\n        </div>\r\n    </div> ')],2112)}]]),K={class:"hierarhy-view"},X={class:"title"},Y={class:"treeicon"};var J=o(4546);const Z={name:"TreeAssets",props:{title:""},data:()=>({filtersView:!1,filterRect:{},focused:[],editform:!1,editedAsset:{},newAsset:!1,viewlib:!1,libButtons:{add:!0,save:!1}}),watch:{"assets.list"(e){console.log(e)}},computed:{tree(){return this.$app.assets.list.reduce((e,t)=>{let o=e.find(e=>e.type===t.type);return o||(o={isgroup:!0,type:t.type,children:[],uid:t.type},e.push(o)),o.children.push(t),e},[])},assets(){return this.$app.assets},selected(){return this.$app.selection.selected}},methods:{onAddClick(){this.$refs.assetsLib.addNew(),this.libButtons.save=!0,this.libButtons.add=!1},onAssetChange(e){},onSaveClick(){this.assets.updateAsset(this.current)},openLib(){(0,n.reactive)({save:!1}),this.$app.modal.open({header:{value:"Assets",handler:()=>{this.$app.modal.close(),this.viewlib=!1}},content:{},footer:{buttons:[]}}),this.viewlib=!0},onEdit(e,t){this.editedAsset[e]=t},editAsset(e){this.editedAsset=e?{...e,progress:0}:{uid:null,type:"model",name:"New asset",url:"https://",parameters:{},progress:0},this.$app.assets.editAsset(this.editedAsset)},insertAsset(e){this.$app.project.handleAsset({source:e})},onUpdateExpanded(e){},onNodeClick(e){this.$app.selection.select(e.isgroup?null:e)},onChangeSelection(){},remove(e){this.$app.modal.confirmReq((0,n.reactive)({title:"Confirm asset remove",text:`Remove asset ${e.name||e.uid} ?`}),[{label:"YES",class:"primary",callback:async()=>{this.assets.remove(e)}},{label:"NO",class:"secondary",callback:async e=>{this.$app.modal.close()}}])}},components:{TreeView:J.A}},Q=(0,b.A)(Z,[["render",function(e,t,o,r,s,a){const i=(0,n.resolveComponent)("icon"),l=(0,n.resolveComponent)("TreeView"),c=(0,n.resolveDirective)("tooltip");return(0,n.openBlock)(),(0,n.createElementBlock)("div",K,[(0,n.createElementVNode)("div",X,[(0,n.createTextVNode)((0,n.toDisplayString)(o.title)+": ",1),(0,n.createCommentVNode)(' <button class="square" @click="editAsset()">\r\n        <icon value="plus" size="0.9em"></icon>\r\n      </button> '),(0,n.createCommentVNode)(' <button class="square" @click="openLib()">\r\n        <icon value="books" size="0.9em"></icon>\r\n      </button> ')]),(0,n.createVNode)(l,{childsFiled:"children",tree:a.tree,onClickNode:a.onNodeClick,onChangeSelect:a.onChangeSelection,onUpdateExpanded:a.onUpdateExpanded,draggable:!0},{append:(0,n.withCtx)(({node:e,index:t})=>[(0,n.createElementVNode)("div",Y,[(0,n.createCommentVNode)(' <icon v-if="!node.isgroup" value="target" v-tooltip="\'Find\'" size="1em" @click="$emit(\'target\', node)"></icon> '),(0,n.createCommentVNode)(' <icon v-if="!node.isgroup" value="pencil" v-tooltip="\'Редактировать\'" size="1em" @click="editAsset(node)">\r\n          </icon> '),e.isgroup?(0,n.createCommentVNode)("v-if",!0):(0,n.withDirectives)(((0,n.openBlock)(),(0,n.createBlock)(i,{key:0,value:"dice",size:"1em",onClick:t=>a.insertAsset(e)},null,8,["onClick"])),[[c,"Insert to scene"]]),e.isgroup?(0,n.createCommentVNode)("v-if",!0):(0,n.withDirectives)(((0,n.openBlock)(),(0,n.createBlock)(i,{key:1,value:"bin",size:"1em",onClick:t=>a.remove(e)},null,8,["onClick"])),[[c,"Delete"]])])]),label:(0,n.withCtx)(({node:o})=>[(0,n.createCommentVNode)(' <div @click="onSelectedNode" :class="{ \'focusedtree\': selected === node }"  class="label"\r\n          v-tooltip="`${node.url || node.type}`"> {{ node.name || node.uid }}</div> '),(0,n.createElementVNode)("div",{onClick:t[0]||(t[0]=(...t)=>e.onSelectedNode&&e.onSelectedNode(...t)),class:(0,n.normalizeClass)([{focusedtree:a.selected===o},"label"])},(0,n.toDisplayString)(o.name||o.uid),3)]),_:1},8,["tree","onClickNode","onChangeSelect","onUpdateExpanded"])])}],["__scopeId","data-v-a8cc45f6"]]),ee={class:"hierarhy-view"},te={class:"treeicon"};var oe=o(3216);const ne={name:"TreeElement",props:{title:""},mounted(){},data:()=>({filtersView:!1,filterRect:{},requestRemove:!1,removeData:{text:""},newElementData:{},addElementView:!1}),computed:{selected(){return this.$app.selection.selected},selection(){return this.$app.selection},tree(){return this.$app.elements.children}},methods:{filterElements:e=>e,async insertToSlide(e){e.state?this.$app.toasts.add({message:"Элемент уже добавлен в этот слайд"}):await this.$app.slides.addState(e)},deleteElement(e){this.removeData.text=`Delete ${e.name} (${e.uid}) ?`,this.$app.modal.open({header:{value:"Delete item",handler:()=>{this.$app.modal.close(),this.requestRemove=!1}},content:{},footer:{buttons:[{label:"Delete",class:"secondary",handler:async()=>{this.$app.modal.close(),this.requestRemove=!1,this.$app.elements.remove(e),this.$app.toasts.add({message:`Элемент ${e.name} удален`})}},{label:"Cancel",class:"primary",handler:async()=>{this.$app.modal.close(),this.requestRemove=!1}}]}})},onUpdateExpanded(e){},onNodeClick(e){this.$app.selection.select(e)},onChangeSelection(){},addElement(){if(this.selected){const e=this.$app.elements.findElement(this.selected.paths);this.$app.selection.select(e)}let e;this.newElementData.name="New Element",this.newElementData.uid=`Element${Date.now()}`,this.newElementData.type="Group",this.newElementData.paths=[],this.selected&&this.selected.isElement&&(e=this.selected,this.newElementData.paths.push(...this.selected.paths)),this.newElementData.paths.push(this.newElementData.uid),this.newElementData.path=this.newElementData.paths.join("."),this.newElementData.props={visible:!0},this.$app.modal.open({header:{value:`Add element ${e?" to "+e.name||0:" scene"}`,handler:()=>{this.$app.modal.close(),this.addElementView=!1}},content:{},footer:{buttons:[{label:"Add",class:"secondary",handler:async()=>{await this.$app.elements.create(this.newElementData,e),this.$app.modal.close(),this.addElementView=!1}},{label:"Cancel",class:"primary",handler:async()=>{this.$app.modal.close(),this.addElementView=!1}}]}}),this.addElementView=!0}},components:{TreeView:J.A,ElementAdd:oe.A}},re=(0,b.A)(ne,[["render",function(e,t,o,r,s,a){const i=(0,n.resolveComponent)("icon"),l=(0,n.resolveComponent)("TreeView"),c=(0,n.resolveComponent)("ElementAdd"),d=(0,n.resolveDirective)("tooltip");return(0,n.openBlock)(),(0,n.createElementBlock)("div",ee,[(0,n.createElementVNode)("div",null,[(0,n.createTextVNode)((0,n.toDisplayString)(o.title)+": ",1),(0,n.createElementVNode)("button",{onClick:t[0]||(t[0]=(...e)=>a.addElement&&a.addElement(...e))},[(0,n.createVNode)(i,{value:"plus",size:"0.75em"})])]),(0,n.createVNode)(l,{filter:a.filterElements,tree:a.tree,onClickNode:a.onNodeClick,onChangeSelect:a.onChangeSelection,childsFiled:"children",onUpdateExpanded:a.onUpdateExpanded,selector:!1},{append:(0,n.withCtx)(({node:e,index:t})=>[(0,n.createElementVNode)("div",te,[(0,n.createCommentVNode)(' <icon value="target" v-tooltip="\'Фокус\'" size="1em" @click="$emit(\'target\', node)"></icon>'),(0,n.createCommentVNode)(" <icon v-tooltip=\"'Видимость'\" :value=\"node.show ? 'eye' : 'eye-blocked'\" size=\"1em\"\r\n            @click=\"node.visible = !node.visible\" :color=\"node.visible ? '#8ec58e' : '#8ec58e80'\">\r\n          </icon> "),e.parent?(0,n.createCommentVNode)("v-if",!0):(0,n.withDirectives)(((0,n.openBlock)(),(0,n.createBlock)(i,{key:0,value:"dice",size:"1em",onClick:t=>a.insertToSlide(e),color:e.state?"#8ec58e":"#8ec58e80"},null,8,["onClick","color"])),[[d,"Add to slide"]]),(0,n.withDirectives)((0,n.createVNode)(i,{onClick:t=>a.deleteElement(e),value:"bin",size:"1em"},null,8,["onClick"]),[[d,"Remove"]]),(0,n.createCommentVNode)(' <icon v-if="index === 0" size="100%" value="bin"></icon> ')])]),label:(0,n.withCtx)(({node:e})=>[(0,n.createElementVNode)("div",{class:(0,n.normalizeClass)([{focusedtree:a.selected===e},"label"])},(0,n.toDisplayString)(e.name||e.uid),3)]),_:1},8,["filter","tree","onClickNode","onChangeSelect","onUpdateExpanded"]),s.addElementView?((0,n.openBlock)(),(0,n.createBlock)(n.Teleport,{key:0,to:".modal-content"},[(0,n.createVNode)(c,{value:s.newElementData,"onUpdate:value":t[1]||(t[1]=e=>s.newElementData=e),parent:a.selected},null,8,["value","parent"])])):(0,n.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-3eac9d53"]]);var se=o(2664);const ae={class:"hierarhy-view"},ie={class:"treeicon"},le={name:"Hierarhy",props:{title:""},data:()=>({filtersView:!1,filterRect:{}}),computed:{selected(){return this.$app.selection.selected},slide(){return this.$app.slides.actived||{children:[]}}},methods:{getElement(){},removeSlide(){this.$app.slides.remove(this.$app.slides.actived.uid)},removeState(e){this.$app.slides.removeState(e.paths),this.$app.toasts.add({message:`${e.data.name||e.uid} удален`})},onNodeClick(e){this.$app.selection.select(e)},onChangeSelection(){},onUpdateExpanded(){},assState(){"block"===this.$app.selection.element?.type||this.$app.toasts.add({message:"Только типы block можно добавлять в состояния"})}},components:{TreeView:J.A}},ce=(0,b.A)(le,[["render",function(e,t,o,r,s,a){const i=(0,n.resolveComponent)("icon"),l=(0,n.resolveComponent)("TreeView"),c=(0,n.resolveDirective)("tooltip");return(0,n.openBlock)(),(0,n.createElementBlock)("div",ae,[(0,n.createElementVNode)("div",null,[(0,n.createTextVNode)((0,n.toDisplayString)(o.title)+" : "+(0,n.toDisplayString)(a.slide.name)+" ",1),(0,n.withDirectives)((0,n.createVNode)(i,{onClick:t[0]||(t[0]=e=>a.removeSlide()),value:"bin",size:"1em"},null,512),[[c,"Delete slide"]])]),(0,n.createVNode)(l,{tree:a.slide.children,onClickNode:a.onNodeClick,onChangeSelect:a.onChangeSelection,onUpdateExpanded:a.onUpdateExpanded,selector:!1},{checkbox:(0,n.withCtx)(()=>[...t[1]||(t[1]=[(0,n.createElementVNode)("span",null,[(0,n.createElementVNode)("input",{type:"checkbox"})],-1)])]),append:(0,n.withCtx)(({node:e,index:t})=>[(0,n.createCommentVNode)(' <div class="filters" v-if="index === 0">\n                    <button v-tooltip="\'Change filters\'"  @click="viewFilters" class="filterbutton">\n                        <icon v-for="v in target.filters" :value="v.props.value" :color="v.props.color" size="1em"></icon>\n                    </button>\n                    <PopupList v-if="filtersView" :rect="filterRect" :values="target.filters" @callback="filtersView = false"></PopupList>\n                </div> '),(0,n.createElementVNode)("div",ie,[(0,n.createCommentVNode)(' <icon value="target" v-tooltip="\'Fit\'" size="1em" @click="$emit(\'target\', node)"></icon>\n          <icon v-tooltip="\'Visible\'" :value="node.isVisible ? \'eye\' : \'eye-blocked\'" size="1em"\n            @click="$emit(\'visible\', node)">\n          </icon> '),e.isBlock?(0,n.withDirectives)(((0,n.openBlock)(),(0,n.createBlock)(i,{key:0,onClick:t=>a.removeState(e),value:"bin",size:"1em"},null,8,["onClick"])),[[c,"Remove element from slide"]]):(0,n.createCommentVNode)("v-if",!0)])]),label:(0,n.withCtx)(({node:e})=>[(0,n.createElementVNode)("div",{class:(0,n.normalizeClass)([{focusedtree:a.selected===e},"label"])},(0,n.toDisplayString)(e.name||e.element.uid),3)]),_:1},8,["tree","onClickNode","onChangeSelect","onUpdateExpanded"])])}],["__scopeId","data-v-6bf93691"]]),de={class:"transformer"},pe={class:"icons"};var ue=o(5216);const me={props:{list:{type:Array},options:{size:"1.5em"}},methods:{setSpace(){ue.A.Transformer.setSpace("local"===ue.A.Transformer.space?"world":"local")},setMode(e){ue.A.Transformer.setMode(e)}}},he=(0,b.A)(me,[["render",function(e,t,o,r,s,a){const i=(0,n.resolveComponent)("icon"),l=(0,n.resolveDirective)("tooltip");return(0,n.openBlock)(),(0,n.createElementBlock)("div",de,[(0,n.createElementVNode)("div",pe,[((0,n.openBlock)(!0),(0,n.createElementBlock)(n.Fragment,null,(0,n.renderList)(o.list,(e,t)=>(0,n.withDirectives)(((0,n.openBlock)(),(0,n.createBlock)(i,{key:t,size:o.options.size,value:e.icon,onClick:e.handler},null,8,["size","value","onClick"])),[[l,e.hint]])),128)),(0,n.createCommentVNode)(' <icon size="1.5em" value="move" @click="setMode(\'translate\')"></icon>\r\n        <icon size="1.5em" value="loop2" @click="setMode(\'rotate\')"></icon>\r\n        <icon size="1.5em" value="enlarge2" @click="setMode(\'scale\')"></icon>\r\n        <icon size="1.5em" value="enlarge2" @click="setMode(\'scale\')"></icon> ')])])}]]),fe={class:"horizontal-menu"},_e={href:"#"},ge={class:"submenu"},ye={href:"#"},ve={class:"submenu"},be={href:"#"},Ee={mounted(){}},we=(0,b.A)(Ee,[["render",function(e,t,o,r,s,a){const i=(0,n.resolveComponent)("icon");return(0,n.openBlock)(),(0,n.createElementBlock)("ul",fe,[t[7]||(t[7]=(0,n.createElementVNode)("li",null,[(0,n.createElementVNode)("a",{href:"#"},[(0,n.createElementVNode)("i",{class:"fas fa-home menu-icon"}),(0,n.createElementVNode)("span",{class:"menu-text"},"Главная")])],-1)),(0,n.createElementVNode)("li",null,[(0,n.createElementVNode)("a",_e,[(0,n.createVNode)(i,{value:"folder",size:"1em"}),t[0]||(t[0]=(0,n.createElementVNode)("span",{class:"menu-text"},"Товары",-1)),t[1]||(t[1]=(0,n.createElementVNode)("i",{class:"fas fa-chevron-down menu-arrow"},null,-1))]),(0,n.createElementVNode)("ul",ge,[(0,n.createElementVNode)("li",null,[(0,n.createElementVNode)("a",ye,[(0,n.createVNode)(i,{value:"bell",size:"1em"}),t[2]||(t[2]=(0,n.createElementVNode)("span",{class:"menu-text"},"Электроника",-1)),t[3]||(t[3]=(0,n.createElementVNode)("i",{class:"fas fa-chevron-right menu-arrow"},null,-1))]),(0,n.createElementVNode)("ul",ve,[(0,n.createElementVNode)("li",null,[(0,n.createElementVNode)("a",be,[(0,n.createVNode)(i,{value:"cog",size:"1em"}),t[4]||(t[4]=(0,n.createElementVNode)("span",{class:"menu-text"},"Смартфоны",-1))])]),t[5]||(t[5]=(0,n.createElementVNode)("li",null,[(0,n.createElementVNode)("a",{href:"#"},[(0,n.createElementVNode)("i",{class:"fas fa-tablet-alt menu-icon"}),(0,n.createElementVNode)("span",{class:"menu-text"},"Планшеты")])],-1))])]),t[6]||(t[6]=(0,n.createElementVNode)("li",null,[(0,n.createElementVNode)("a",{href:"#"},[(0,n.createElementVNode)("i",{class:"fas fa-tshirt menu-icon"}),(0,n.createElementVNode)("span",{class:"menu-text"},"Одежда")])],-1))])]),t[8]||(t[8]=(0,n.createStaticVNode)('<li data-v-202d206c><a href="#" data-v-202d206c><i class="fas fa-info-circle menu-icon" data-v-202d206c></i><span class="menu-text" data-v-202d206c>О нас</span><i class="fas fa-chevron-down menu-arrow" data-v-202d206c></i></a><ul class="submenu" data-v-202d206c><li data-v-202d206c><a href="#" data-v-202d206c><i class="fas fa-history menu-icon" data-v-202d206c></i><span class="menu-text" data-v-202d206c>История</span></a></li><li data-v-202d206c><a href="#" data-v-202d206c><i class="fas fa-users menu-icon" data-v-202d206c></i><span class="menu-text" data-v-202d206c>Команда</span></a></li></ul></li><li data-v-202d206c><a href="#" data-v-202d206c><i class="fas fa-envelope menu-icon" data-v-202d206c></i><span class="menu-text" data-v-202d206c>Контакты</span></a></li>',2))])}],["__scopeId","data-v-202d206c"]]);var Se=o(1684),ke=o(2320),Ne=o.n(ke);const Ie={class:"dropdown"},$e={key:0,class:"dropdown-menu"},Ce=["onClick"],Te={__name:"userpanel",setup(e){const t=Ne().default||Ne(),o=(0,n.ref)(!1),r=(0,n.computed)(()=>t.app.user.registered?[{label:"Options",handler:()=>{}},{label:"Logout",handler:t.app.logout}]:[{label:"Login",handler:l}]),s=()=>{o.value=!o.value},a=(0,n.useTemplateRef)("dropdown"),i=e=>{a.value?.contains(e.target)||(o.value=!1)};(0,n.watch)(o,e=>{e?window.addEventListener("click",i):window.removeEventListener("click",i)});const l=()=>{t.modal.open({header:{value:"Login",handler:()=>{t.modal.close()}},content:{component:"LoginForm",props:{},events:{success:()=>{t.modal.close(),t.app.init()}}},footer:{buttons:[]}})};return(e,i)=>((0,n.openBlock)(),(0,n.createElementBlock)("div",Ie,[(0,n.createCommentVNode)(" Триггер для открытия меню "),(0,n.createElementVNode)("div",{ref_key:"dropdown",ref:a,class:"dropdown-trigger",onClick:s},(0,n.toDisplayString)((0,n.unref)(t).app.user.name),513),(0,n.createCommentVNode)(" Выпадающее меню "),(0,n.createVNode)(n.Transition,{name:"fade"},{default:(0,n.withCtx)(()=>[o.value?((0,n.openBlock)(),(0,n.createElementBlock)("div",$e,[((0,n.openBlock)(!0),(0,n.createElementBlock)(n.Fragment,null,(0,n.renderList)(r.value,(e,t)=>((0,n.openBlock)(),(0,n.createElementBlock)("a",{key:t,class:"dropdown-item",onClick:t=>(e=>{o.value=!1,e.handler()})(e)},(0,n.toDisplayString)(e.label),9,Ce))),128))])):(0,n.createCommentVNode)("v-if",!0)]),_:1})]))}},Ae=(0,b.A)(Te,[["__scopeId","data-v-4594b897"]]),Re={name:"UI",props:{element:null},data(){return{version:"0.0.8",project:{blocks:[{component:"AssetsTree",data:{title:"Assets"},onSelect:this.onSelectAsset},{component:"ModelsTree",data:{title:"Models"},onSelect:()=>{}}],header:{buttons:this.$app.menu.hierarhy.list}},name:"",selectedSlide:null,selectedNodes:[]}},methods:{onButtonClick(e){e.handler&&e.handler()},onSelectAsset(e){},onSelectedNodesUpdate(){},camChange(e){const t=e.target.value,o=this.cameras.find(e=>e.uid===t);o&&"function"==typeof o.handler?o.handler():console.warn(`No handler found for camera with UID: ${t}`)},handleSlideSelected(e){this.selectedSlide=e},activateInMenu(e,t){if(!t)return this.menu.actived[e]=null,void("main"===e&&(this.menu.ext.length=0));this.menu.actived[e]=t.id,"main"===e&&(this.menu.ext.length=0,this.menu.ext.push(...t.ext||[]))},handleNodeDrop({sourceNodeUid:e,targetNodeUid:t,sourceTree:o}){console.log(e);const n="TreeViewLeft"===o?this.leftTree:this.rightTree,r="TreeViewLeft"===o?this.rightTree:this.leftTree,s=this.findNodeInTree(n,e),a=this.findNodeInTree(r,t);s&&a&&(this.removeNodeFromTree(n,e),a.children||this.$set(a,"children",[]),a.children.push(s),"TreeViewLeft"===o?(this.leftTree=[...this.leftTree],this.rightTree=[...this.rightTree]):(this.rightTree=[...this.rightTree],this.leftTree=[...this.leftTree]))},findNodeInTree(e,t){console.log(e)},removeNodeFromTree(e,t){console.log(e)}},computed:{projectMenu(){return this.$app.menu.app.list},topMenu(){return this.$app.menu.top},headMenu(){return this.$app.menu.hierarhy.list},footerMenu(){return this.$app.menu.tools.list},viewTransform(){return this.$app.selection.selected?.isElement||this.$app.selection.selected?.isState},slide(){return this.$app.slides.actived},selected(){return this.$app.selection.element},slides(){return this.$app.slides.children},cameras(){return this.$app.app.cameras},leftpanel(){return this.$app.app.leftpanel},rightpanel(){return this.$app.app.rightpanel},options(){return this.$app.options},menu(){return this.$app.menu},app(){return this.$app.app},tools:()=>toolse,models(){return this.$app.models},ready(){return this.$app.engine.ready},toasts(){return this.$app.toasts},modal(){return this.$app.modal},translations(){return this.$app.translations},info(){return this.$app.project.info||{}}},components:{UserPanel:Ae,ModelsTree:se.A,horizontalmenu:Se.A,Topmenu:we,ViewPanel:E,Sliders:O,HierarhyUI:B,InspectorUI:W,AssetsTree:Q,ElementsTree:re,StatesTree:ce,Transformer:he}},Oe=(0,b.A)(Re,[["render",function(e,t,o,h,f,_){const g=(0,n.resolveComponent)("horizontalmenu"),y=(0,n.resolveComponent)("InspectorUI"),v=(0,n.resolveComponent)("icon"),b=(0,n.resolveComponent)("ViewPanel"),E=(0,n.resolveComponent)("Sliders"),w=(0,n.resolveComponent)("Transformer"),S=(0,n.resolveDirective)("tooltip");return(0,n.openBlock)(),(0,n.createElementBlock)("div",r,[(0,n.createElementVNode)("div",s,[(0,n.createVNode)(g,{menu:_.projectMenu},null,8,["menu"]),(0,n.createElementVNode)("div",a,(0,n.toDisplayString)(_.info.name),1),(0,n.createElementVNode)("div",i,[(0,n.createCommentVNode)(" <UserPanel /> "),(0,n.createCommentVNode)(' <div class="icon">\r\n                    <icon value="cog"></icon>\r\n                </div> '),(0,n.createTextVNode)(" v "+(0,n.toDisplayString)(f.version),1)])]),(0,n.createCommentVNode)(" <Topmenu></Topmenu> "),(0,n.createVNode)(y,{selected:_.selected,class:"inspector"},null,8,["selected"]),_.app.ready?((0,n.openBlock)(),(0,n.createBlock)(b,{key:0,class:"project",header:f.project.header,footer:f.project.footer},{header:(0,n.withCtx)(()=>[((0,n.openBlock)(!0),(0,n.createElementBlock)(n.Fragment,null,(0,n.renderList)(_.headMenu,e=>(0,n.withDirectives)(((0,n.openBlock)(),(0,n.createElementBlock)("button",{class:(0,n.normalizeClass)(e.class),onClick:t=>_.onButtonClick(e)},[e.label?((0,n.openBlock)(),(0,n.createElementBlock)("span",c,(0,n.toDisplayString)(e.label||"Close"),1)):(0,n.createCommentVNode)("v-if",!0),e.icon?((0,n.openBlock)(),(0,n.createBlock)(v,{key:1,value:e.icon,size:"1.5em"},null,8,["value"])):(0,n.createCommentVNode)("v-if",!0)],10,l)),[[S,e.tooltip]])),256))]),footer:(0,n.withCtx)(()=>[((0,n.openBlock)(!0),(0,n.createElementBlock)(n.Fragment,null,(0,n.renderList)(_.footerMenu,e=>(0,n.withDirectives)(((0,n.openBlock)(),(0,n.createElementBlock)("button",{class:(0,n.normalizeClass)(e.class),onClick:t=>_.onButtonClick(e)},[e.label?((0,n.openBlock)(),(0,n.createElementBlock)("span",m,(0,n.toDisplayString)(e.label||"Close"),1)):(0,n.createCommentVNode)("v-if",!0),e.icon?((0,n.openBlock)(),(0,n.createBlock)(v,{key:1,value:e.icon,size:"1.5em"},null,8,["value"])):(0,n.createCommentVNode)("v-if",!0)],10,u)),[[S,e.tooltip]])),256))]),default:(0,n.withCtx)(()=>[((0,n.openBlock)(!0),(0,n.createElementBlock)(n.Fragment,null,(0,n.renderList)(f.project.blocks,o=>((0,n.openBlock)(),(0,n.createElementBlock)("div",d,[((0,n.openBlock)(),(0,n.createBlock)((0,n.resolveDynamicComponent)(o.component||"div"),(0,n.mergeProps)({class:"elementContent"},{ref_for:!0},o.component?o.data:null,{onSelect:o.onSelect,onNodeDrop:_.handleNodeDrop,"onUpdate:tree":t[0]||(t[0]=t=>e.leftTree=t)}),{default:(0,n.withCtx)(()=>[(0,n.createElementVNode)("div",{class:"content-value",innerHTML:o.value||""},null,8,p)]),_:2},1040,["onSelect","onNodeDrop"]))]))),256))]),_:1},8,["header","footer"])):(0,n.createCommentVNode)("v-if",!0),(0,n.createVNode)(E,{slides:_.slides,slide:_.slide,onSlideselect:_.handleSlideSelected,class:"sliders"},null,8,["slides","slide","onSlideselect"]),_.viewTransform?((0,n.openBlock)(),(0,n.createBlock)(w,(0,n.normalizeProps)((0,n.mergeProps)({key:1},_.topMenu)),null,16)):(0,n.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-3c08750e"]])},6311:(e,t,o)=>{o.d(t,{A:()=>d});var n=o(2015);const r={class:"toastcontainer"},s={class:"alert"},a={class:"text"},i={class:"buttons"},l=["onClick"],c={name:"QueryToast",props:{icon:{type:String,default:"notification"},message:{type:String,default:""},type:{type:String,default:"info"},buttons:{type:Array}}},d=(0,o(6262).A)(c,[["render",function(e,t,o,c,d,p){const u=(0,n.resolveComponent)("icon");return(0,n.openBlock)(),(0,n.createElementBlock)("div",r,[(0,n.createElementVNode)("div",s,[(0,n.createVNode)(u,{class:(0,n.normalizeClass)(`${o.type}icon`),size:"3em",value:o.icon},null,8,["class","value"]),(0,n.createElementVNode)("span",a,(0,n.toDisplayString)(o.message),1)]),(0,n.createElementVNode)("div",i,[((0,n.openBlock)(!0),(0,n.createElementBlock)(n.Fragment,null,(0,n.renderList)(o.buttons,e=>((0,n.openBlock)(),(0,n.createElementBlock)("button",{onClick:e.handler,class:"btn"},(0,n.toDisplayString)(e.label),9,l))),256))])])}]])},7546:(e,t,o)=>{o.d(t,{A:()=>a});var n=o(2015);const r={class:"toast-container"},s={computed:{list(){return this.$app.toasts.list}},methods:{onClick(e){e.onclick&&e.onclick()}}},a=(0,o(6262).A)(s,[["render",function(e,t,o,s,a,i){return(0,n.openBlock)(),(0,n.createElementBlock)("div",r,[(0,n.createVNode)(n.TransitionGroup,{name:"toast",tag:"div"},{default:(0,n.withCtx)(()=>[((0,n.openBlock)(!0),(0,n.createElementBlock)(n.Fragment,null,(0,n.renderList)(i.list,t=>((0,n.openBlock)(),(0,n.createElementBlock)("div",{key:t.id,class:"toast"},[((0,n.openBlock)(),(0,n.createBlock)((0,n.resolveDynamicComponent)(t.component||"div"),(0,n.mergeProps)({class:"toastview"},{ref_for:!0},t.data,{onClick:e=>i.onClick(t)}),{default:(0,n.withCtx)(()=>[t.component?(0,n.createCommentVNode)("v-if",!0):(0,n.renderSlot)(e.$slots,"default",{key:0},()=>[(0,n.createTextVNode)((0,n.toDisplayString)(t.data.message),1)],!0)]),_:2},1040,["onClick"]))]))),128))]),_:3})])}],["__scopeId","data-v-3aed840a"]])},8372:(e,t,o)=>{var n=o(2015),r=o(2958),s=o(2320),a=o(5075),i=o(4594);const l=document.createElement("div");let c;l.className="tooltip",l.style.position="absolute",l.style.visibility="hidden",document.body.appendChild(l);const d={beforeMount(e,t){const o=()=>{if(c=e,l.textContent=t.value,!l.textContent||0===l.textContent.length)return;const o=e.getBoundingClientRect();let n=o.left+window.scrollX+o.width/2-l.offsetWidth/2,r=o.top+window.scrollY-l.offsetHeight-5;n+l.offsetWidth>window.innerWidth&&(n=window.innerWidth-l.offsetWidth-10),n<0&&(n=10),r+l.offsetHeight>window.innerHeight&&(r=o.top+window.scrollY+o.height+5),r<0&&(r=o.top+window.scrollY+o.height+5),l.style.left=`${n}px`,l.style.top=`${r}px`,l.style.visibility="visible"},n=()=>{c===e&&(l.style.visibility="hidden")};e.__tooltipHandlers__={mouseEnterHandler:o,mouseLeaveHandler:n},e.addEventListener("mouseenter",o),e.addEventListener("mouseleave",n)},unmounted(e){const{mouseEnterHandler:t,mouseLeaveHandler:o}=e.__tooltipHandlers__||{};t&&e.removeEventListener("mouseenter",t),o&&e.removeEventListener("mouseleave",o),c===e&&(l.style.visibility="hidden")}},p=s.default||s;console.log("production"),console.log=()=>{};const u=window.vue=(0,n.createApp)(r.A);u.use(e=>{e.config.globalProperties.$app=p.Init(i)}),Object.keys(a).forEach(e=>{u.component(e,a[e])}),u.provide("globalComponents",u._context.components),u.directive("tooltip",d),u.mount("#app"),window.isEditor=!0},9216:(e,t,o)=>{o.d(t,{A:()=>l});let n="defaultDB",r=null,s=[],a="uid";class i{constructor(e,t,o="id"){this.dbName=e,this._storages=t,this._key=o,this.db=null}async openDatabase(e){return new Promise((t,o)=>{const n=indexedDB.open(this.dbName);n.onupgradeneeded=e=>{const t=e.target.result;for(let e=0;e<this._storages.length;e++)t.objectStoreNames.contains(this._storages[e])||t.createObjectStore(this._storages[e],{keyPath:this._key,autoIncrement:!1})},n.onsuccess=n=>{if(this.db=n.target.result,this.db.objectStoreNames.contains(e))t(this.db);else{this.db.close();const n=this.db.version+1,r=indexedDB.open(this.dbName,n);r.onupgradeneeded=t=>{t.target.result.createObjectStore(e,{keyPath:"id",autoIncrement:!0})},r.onsuccess=e=>{this.db=e.target.result,t(this.db)},r.onerror=e=>{o(e.target.error)}}},n.onerror=e=>{o(e.target.error)}})}async addItem(e,t){const o=(await this.openDatabase(e)).transaction(e,"readwrite");return o.objectStore(e).add(t),new Promise(e=>{o.oncomplete=()=>e(),o.onerror=()=>e()})}async addItems(e,t){const o=[];for(let n=0;n<t.length;n++)o.push(this.addItem(e,t[n]));await Promise.all(o)}async getItem(e,t){const o=(await this.openDatabase(e)).transaction(e,"readonly").objectStore(e);return new Promise((e,n)=>{const r=o.get(t);r.onsuccess=()=>e(r.result),r.onerror=()=>e()})}async deleteItem(e,t){const o=(await this.openDatabase(e)).transaction(e,"readwrite").objectStore(e);return new Promise((e,n)=>{const r=o.delete(t);r.onsuccess=()=>e(),r.onerror=()=>n()})}async getAllItems(e){const t=(await this.openDatabase(e)).transaction(e,"readonly").objectStore(e);return new Promise((e,o)=>{const n=t.getAll();n.onsuccess=()=>e(n.result),n.onerror=()=>e()})}async updateItem(e,t){const o=(await this.openDatabase(e)).transaction(e,"readwrite").objectStore(e);return new Promise((e,n)=>{const r=o.put(t);r.onsuccess=()=>e(t),r.onerror=()=>n()})}async updateItemProperties(e,t,o){const n=(await this.openDatabase(e)).transaction(e,"readwrite").objectStore(e);return new Promise((e,r)=>{const s=n.get(t);s.onsuccess=()=>{const t=s.result;if(t){Object.assign(t,o);const s=n.put(t);s.onsuccess=()=>e(),s.onerror=()=>r()}else r("Item not found")},s.onerror=()=>r()})}async upsertItemProperties(e,t,o){const n=(await this.openDatabase(e)).transaction(e,"readwrite").objectStore(e);return new Promise((e,r)=>{const s=n.get(t);s.onsuccess=()=>{let a=s.result;if(a){Object.assign(a,o);const t=n.put(a);t.onsuccess=()=>e(),t.onerror=()=>r()}else{const s={...o,id:t},a=n.add(s);a.onsuccess=()=>e(),a.onerror=()=>r()}},s.onerror=()=>r()})}static async GetList(){try{return await indexedDB.databases()}catch(e){return[]}}static GetStoragesData(e){indexedDB.open(e).onsuccess=function(e){const t=e.target.result,o=t.transaction(t.objectStoreNames,"readonly");t.objectStoreNames.forEach(e=>{const t=o.objectStore(e);console.log("Хранилище:",e),console.log("КлюPath:",t.keyPath),console.log("Автоинкремент:",t.autoIncrement)}),t.close()}}static GetStorages(e){return new Promise((t,o)=>{const n=indexedDB.open(e);n.onsuccess=e=>{const o=e.target.result,n=[];for(let e=0;e<o.objectStoreNames.length;e++)n.push(o.objectStoreNames[e]);o.close(),t(n)},n.onerror=e=>{o(`Ошибка открытия БД: ${e.target.error}`)},n.onupgradeneeded=e=>{console.log("БД требует обновления")}})}static Create(e,t,o=!1){return new Promise((n,r)=>{const s=indexedDB.open(e,1);s.onupgradeneeded=function(e){const n=e.target.result,r=Object.keys(t);for(let e=0;e<r.length;e++){const t=r[e];if(!n.objectStoreNames.contains(t)){const e=n.createObjectStore(t,{keyPath:"uid"});o&&e.createIndex("uid","uid",{unique:!0})}}},s.onsuccess=function(e){const o=e.target.result,s=Object.keys(t),a=o.transaction(s,"readwrite");for(let e=0;e<s.length;e++){const o=s[e],n=a.objectStore(o);if(Array.isArray(t[o]))for(let e=0;e<t[o].length;e++)n.put(t[o][e]);else n.put(t[o])}a.oncomplete=function(){n()},a.onerror=function(){r()}},s.onerror=function(e){r(e.target.error)}})}static async GetFromAll(e,t){try{const e=await indexedDB.databases(),t=[],o=e.map(e=>new Promise((o,n)=>{const r=e.name,s=indexedDB.open(r);s.onsuccess=function(e){const n=e.target.result;if(n.objectStoreNames.contains("project")){const e=n.transaction("project","readonly").objectStore("project").get("info");e.onsuccess=()=>{t.push(e.result),o()},e.onerror=()=>{o()}}else o()},s.onerror=function(){console.error(`Ошибка при открытии базы данных: ${r}`),n()}}));return await Promise.all(o),t}catch(e){console.error("Ошибка при получении списка баз данных:",e)}}static DeleteDatabase(e){return new Promise((t,o)=>{r.close();const n=indexedDB.deleteDatabase(e);n.onsuccess=function(){t()},n.onerror=function(){console.warn(`Ошибка при удалении базы данных ${e}.`),o()},n.onblocked=async function(){console.warn(`Blocked ${e}.`),t()}})}static Init(e,t,o="uid"){n=e,s=t,a=o}static async openDatabase(e){return new Promise((t,o)=>{const i=indexedDB.open(n);i.onupgradeneeded=e=>{const t=e.target.result;for(let e=0;e<s.length;e++)t.objectStoreNames.contains(s[e])||t.createObjectStore(s[e],{keyPath:a,autoIncrement:!1})},i.onsuccess=s=>{if(r=s.target.result,r.objectStoreNames.contains(e))t(r);else{r.close();const s=r.version+1,a=indexedDB.open(n,s);a.onupgradeneeded=t=>{t.target.result.createObjectStore(e,{keyPath:"id",autoIncrement:!0})},a.onsuccess=e=>{r=e.target.result,t(r)},a.onerror=e=>{o(e.target.error)}}},i.onerror=e=>{o(e.target.error)}})}static async addItem(e,t){const o=(await i.openDatabase(e)).transaction(e,"readwrite");return o.objectStore(e).add(t),new Promise(e=>{o.oncomplete=()=>e(),o.onerror=()=>e()})}static async addItems(e,t){const o=[];for(let n=0;n<t.length;n++)o.push(i.addItem(e,t[n]));await Promise.all(o)}static async getItem(e,t){const o=(await i.openDatabase(e)).transaction(e,"readonly").objectStore(e);return new Promise((e,n)=>{const r=o.get(t);r.onsuccess=()=>e(r.result),r.onerror=()=>e()})}static async deleteItem(e,t){const o=(await this.openDatabase(e)).transaction(e,"readwrite").objectStore(e);return new Promise((e,n)=>{const r=o.delete(t);r.onsuccess=()=>e(),r.onerror=()=>n()})}static async getAllItems(e){const t=(await i.openDatabase(e)).transaction(e,"readonly").objectStore(e);return new Promise((e,o)=>{const n=t.getAll();n.onsuccess=()=>e(n.result),n.onerror=()=>o})}static async updateItem(e,t){const o=(await i.openDatabase(e)).transaction(e,"readwrite").objectStore(e);return new Promise((e,n)=>{const r=o.put(t);r.onsuccess=()=>e(t),r.onerror=()=>n()})}static async updateItemProperties(e,t,o){const n=(await i.openDatabase(e)).transaction(e,"readwrite").objectStore(e);return new Promise((e,r)=>{const s=n.get(t);s.onsuccess=()=>{const t=s.result;if(t){Object.assign(t,o);const s=n.put(t);s.onsuccess=()=>e(),s.onerror=()=>r()}else r("Item not found")},s.onerror=()=>r()})}static async upsertMany(e,t,o="id"){const n=[];for(let r=0;r<t.length;r++){const s=t[r];n.push(i.upsertItemProperties(e,s[o],s))}await Promise.all(n)}static async upsertItemProperties(e,t,o){const n=(await i.openDatabase(e)).transaction(e,"readwrite").objectStore(e);return new Promise((e,r)=>{const s=n.get(t);s.onsuccess=()=>{let a=s.result;if(a){Object.assign(a,o);const t=n.put(a);t.onsuccess=()=>e(),t.onerror=()=>r()}else{const s={...o,id:t,uid:t},a=n.add(s);a.onsuccess=()=>e(),a.onerror=()=>r()}},s.onerror=()=>r()})}static getVersion(e){return new Promise(t=>{const o=indexedDB.open(e);o.onsuccess=e=>{const o=e.target.result,n=o.version;o.close(),t(n)},o.onerror=e=>{console.error("Ошибка при открытии БД:",e.target.error),t(null)}})}static exportToJson(e){return new Promise(async(t,o)=>{const n=await i.getVersion(e),r=indexedDB.open(e,n);r.onerror=e=>{o(`Ошибка открытия базы данных: ${e.target.error}`)},r.onsuccess=e=>{const n=e.target.result,r={},s=n.objectStoreNames,a=n.transaction(s,"readonly"),i=[];for(let e=0;e<s.length;e++){const t=s[e],o=a.objectStore(t);i.push(new Promise(e=>{const n=[],r=o.openCursor();r.onerror=()=>{console.error(`Ошибка чтения хранилища ${t}`),e({[t]:[]})},r.onsuccess=o=>{const r=o.target.result;r?(n.push(r.value),r.continue()):e({[t]:n})}}))}Promise.all(i).then(e=>{e.forEach(e=>{const t=Object.keys(e)[0];r[t]=e[t]}),t(r)}).catch(o),a.oncomplete=()=>{n.close()}},r.onupgradeneeded=e=>{0===e.target.result.objectStoreNames.length&&t({})}})}}const l=i},9338:(e,t,o)=>{function n(e){return 180*e/Math.PI}function r(e){return e*Math.PI/180}function s(e){const t=new WeakSet;return JSON.stringify(e,(e,o)=>{if("object"==typeof o&&null!==o){if(t.has(o))return;t.add(o)}return o})}o.d(t,{As:()=>s,eh:()=>r,xW:()=>n}),o(4875)},9615:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Al:()=>getResourceUrl,Bb:()=>isDebugMode,Jn:()=>generateSnapshotFromManifest,ML:()=>safeToString,OL:()=>isBrowserEnv,R8:()=>warn,Tr:()=>isManifestProvider,d:()=>createLink,e4:()=>decodeName,h:()=>createLogger,k0:()=>loadScript,lG:()=>composeKeyWithSeparator,oe:()=>loadScriptNode,so:()=>createScript,tf:()=>isReactNativeEnv,yq:()=>ENCODE_NAME_PREFIX});var _polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(3419);const FederationModuleManifest="federation-manifest.json",MANIFEST_EXT=".json",BROWSER_LOG_KEY="FEDERATION_DEBUG",NameTransformSymbol={AT:"@",HYPHEN:"-",SLASH:"/"},NameTransformMap={[NameTransformSymbol.AT]:"scope_",[NameTransformSymbol.HYPHEN]:"_",[NameTransformSymbol.SLASH]:"__"},EncodedNameTransformMap={[NameTransformMap[NameTransformSymbol.AT]]:NameTransformSymbol.AT,[NameTransformMap[NameTransformSymbol.HYPHEN]]:NameTransformSymbol.HYPHEN,[NameTransformMap[NameTransformSymbol.SLASH]]:NameTransformSymbol.SLASH},SEPARATOR=":",ManifestFileName="mf-manifest.json",StatsFileName="mf-stats.json",MFModuleType={NPM:"npm",APP:"app"},MODULE_DEVTOOL_IDENTIFIER="__MF_DEVTOOLS_MODULE_INFO__",ENCODE_NAME_PREFIX="ENCODE_NAME_PREFIX",TEMP_DIR=".federation",MFPrefetchCommon={identifier:"MFDataPrefetch",globalKey:"__PREFETCH__",library:"mf-data-prefetch",exportsKey:"__PREFETCH_EXPORTS__",fileName:"bootstrap.js"};var ContainerPlugin=Object.freeze({__proto__:null}),ContainerReferencePlugin=Object.freeze({__proto__:null}),ModuleFederationPlugin=Object.freeze({__proto__:null}),SharePlugin=Object.freeze({__proto__:null});function isBrowserEnv(){return"undefined"!=typeof window&&void 0!==window.document}function isReactNativeEnv(){var e;return"undefined"!=typeof navigator&&"ReactNative"===(null==(e=navigator)?void 0:e.product)}function isBrowserDebug(){try{if(isBrowserEnv()&&window.localStorage)return Boolean(localStorage.getItem(BROWSER_LOG_KEY))}catch(e){return!1}return!1}function isDebugMode(){return"undefined"!=typeof process&&process.env&&process.env.FEDERATION_DEBUG?Boolean(process.env.FEDERATION_DEBUG):!("undefined"==typeof FEDERATION_DEBUG||!Boolean(FEDERATION_DEBUG))||isBrowserDebug()}const getProcessEnv=function(){return"undefined"!=typeof process&&process.env?process.env:{}},LOG_CATEGORY="[ Federation Runtime ]",parseEntry=(e,t,o=SEPARATOR)=>{const n=e.split(o),r="development"===getProcessEnv().NODE_ENV&&t,s=e=>e.startsWith("http")||e.includes(MANIFEST_EXT);if(n.length>=2){let[t,...a]=n;e.startsWith(o)&&(t=n.slice(0,2).join(o),a=[r||n.slice(2).join(o)]);let i=r||a.join(o);return s(i)?{name:t,entry:i}:{name:t,version:i||"*"}}if(1===n.length){const[e]=n;return r&&s(r)?{name:e,entry:r}:{name:e,version:r||"*"}}throw`Invalid entry value: ${e}`},composeKeyWithSeparator=function(...e){return e.length?e.reduce((e,t)=>t?e?`${e}${SEPARATOR}${t}`:t:e,""):""},encodeName=function(e,t="",o=!1){try{const n=o?".js":"";return`${t}${e.replace(new RegExp(`${NameTransformSymbol.AT}`,"g"),NameTransformMap[NameTransformSymbol.AT]).replace(new RegExp(`${NameTransformSymbol.HYPHEN}`,"g"),NameTransformMap[NameTransformSymbol.HYPHEN]).replace(new RegExp(`${NameTransformSymbol.SLASH}`,"g"),NameTransformMap[NameTransformSymbol.SLASH])}${n}`}catch(e){throw e}},decodeName=function(e,t,o){try{let n=e;if(t){if(!n.startsWith(t))return n;n=n.replace(new RegExp(t,"g"),"")}return n=n.replace(new RegExp(`${NameTransformMap[NameTransformSymbol.AT]}`,"g"),EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.AT]]).replace(new RegExp(`${NameTransformMap[NameTransformSymbol.SLASH]}`,"g"),EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.SLASH]]).replace(new RegExp(`${NameTransformMap[NameTransformSymbol.HYPHEN]}`,"g"),EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.HYPHEN]]),o&&(n=n.replace(".js","")),n}catch(e){throw e}},generateExposeFilename=(e,t)=>{if(!e)return"";let o=e;return"."===o&&(o="default_export"),o.startsWith("./")&&(o=o.replace("./","")),encodeName(o,"__federation_expose_",t)},generateShareFilename=(e,t)=>e?encodeName(e,"__federation_shared_",t):"",getResourceUrl=(e,t)=>{if("getPublicPath"in e){let o;return o=e.getPublicPath.startsWith("function")?new Function("return "+e.getPublicPath)()():new Function(e.getPublicPath)(),`${o}${t}`}return"publicPath"in e?isBrowserEnv()||isReactNativeEnv()||!("ssrPublicPath"in e)?`${e.publicPath}${t}`:`${e.ssrPublicPath}${t}`:(console.warn("Cannot get resource URL. If in debug mode, please ignore.",e,t),"")},assert=(e,t)=>{e||error(t)},error=e=>{throw new Error(`${LOG_CATEGORY}: ${e}`)},warn=e=>{console.warn(`${LOG_CATEGORY}: ${e}`)};function safeToString(e){try{return JSON.stringify(e,null,2)}catch(e){return""}}const VERSION_PATTERN_REGEXP=/^([\d^=v<>~]|[*xX]$)/;function isRequiredVersion(e){return VERSION_PATTERN_REGEXP.test(e)}const simpleJoinRemoteEntry=(e,t)=>{if(!e)return t;const o=(e=>{if("."===e)return"";if(e.startsWith("./"))return e.replace("./","");if(e.startsWith("/")){const t=e.slice(1);return t.endsWith("/")?t.slice(0,-1):t}return e})(e);return o?o.endsWith("/")?`${o}${t}`:`${o}/${t}`:t};function inferAutoPublicPath(e){return e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/")}function generateSnapshotFromManifest(e,t={}){var o,n;const{remotes:r={},overrides:s={},version:a}=t;let i;const l=()=>"publicPath"in e.metaData?"auto"===e.metaData.publicPath&&a?inferAutoPublicPath(a):e.metaData.publicPath:e.metaData.getPublicPath,c=Object.keys(s);let d={};var p;Object.keys(r).length||(d=(null==(p=e.remotes)?void 0:p.reduce((e,t)=>{let o;const n=t.federationContainerName;return o=c.includes(n)?s[n]:"version"in t?t.version:t.entry,e[n]={matchedVersion:o},e},{}))||{}),Object.keys(r).forEach(e=>d[e]={matchedVersion:c.includes(e)?s[e]:r[e]});const{remoteEntry:{path:u,name:m,type:h},types:f,buildInfo:{buildVersion:_},globalName:g,ssrRemoteEntry:y}=e.metaData,{exposes:v}=e;let b={version:a||"",buildVersion:_,globalName:g,remoteEntry:simpleJoinRemoteEntry(u,m),remoteEntryType:h,remoteTypes:simpleJoinRemoteEntry(f.path,f.name),remoteTypesZip:f.zip||"",remoteTypesAPI:f.api||"",remotesInfo:d,shared:null==e?void 0:e.shared.map(e=>({assets:e.assets,sharedName:e.name,version:e.version})),modules:null==v?void 0:v.map(e=>({moduleName:e.name,modulePath:e.path,assets:e.assets}))};if(null==(o=e.metaData)?void 0:o.prefetchInterface){const t=e.metaData.prefetchInterface;b=(0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({},b,{prefetchInterface:t})}if(null==(n=e.metaData)?void 0:n.prefetchEntry){const{path:t,name:o,type:n}=e.metaData.prefetchEntry;b=(0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({},b,{prefetchEntry:simpleJoinRemoteEntry(t,o),prefetchEntryType:n})}if(i="publicPath"in e.metaData?(0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({},b,{publicPath:l(),ssrPublicPath:e.metaData.ssrPublicPath}):(0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({},b,{getPublicPath:l()}),y){const e=simpleJoinRemoteEntry(y.path,y.name);i.ssrRemoteEntry=e,i.ssrRemoteEntryType=y.type||"commonjs-module"}return i}function isManifestProvider(e){return!(!("remoteEntry"in e)||!e.remoteEntry.includes(MANIFEST_EXT))}const PREFIX="[ Module Federation ]";let Logger=class{setPrefix(e){this.prefix=e}log(...e){console.log(this.prefix,...e)}warn(...e){console.log(this.prefix,...e)}error(...e){console.log(this.prefix,...e)}success(...e){console.log(this.prefix,...e)}info(...e){console.log(this.prefix,...e)}ready(...e){console.log(this.prefix,...e)}debug(...e){isDebugMode()&&console.log(this.prefix,...e)}constructor(e){this.prefix=e}};function createLogger(e){return new Logger(e)}const logger=createLogger(PREFIX);async function safeWrapper(e,t){try{return await e()}catch(e){return void(!t&&warn(e))}}function isStaticResourcesEqual(e,t){const o=/^(https?:)?\/\//i;return e.replace(o,"").replace(/\/$/,"")===t.replace(o,"").replace(/\/$/,"")}function createScript(e){let t,o=null,n=!0,r=2e4;const s=document.getElementsByTagName("script");for(let t=0;t<s.length;t++){const r=s[t],a=r.getAttribute("src");if(a&&isStaticResourcesEqual(a,e.url)){o=r,n=!1;break}}if(!o){const t=e.attrs;let n;o=document.createElement("script"),o.type="module"===(null==t?void 0:t.type)?"module":"text/javascript",e.createScriptHook&&(n=e.createScriptHook(e.url,e.attrs),n instanceof HTMLScriptElement?o=n:"object"==typeof n&&("script"in n&&n.script&&(o=n.script),"timeout"in n&&n.timeout&&(r=n.timeout))),o.src||(o.src=e.url),t&&!n&&Object.keys(t).forEach(e=>{o&&("async"===e||"defer"===e?o[e]=t[e]:o.getAttribute(e)||o.setAttribute(e,t[e]))})}const a=async(n,r)=>{clearTimeout(t);const s=()=>{"error"===(null==r?void 0:r.type)?(null==e?void 0:e.onErrorCallback)&&(null==e||e.onErrorCallback(r)):(null==e?void 0:e.cb)&&(null==e||e.cb())};if(o&&(o.onerror=null,o.onload=null,safeWrapper(()=>{const{needDeleteScript:t=!0}=e;t&&(null==o?void 0:o.parentNode)&&o.parentNode.removeChild(o)}),n&&"function"==typeof n)){const e=n(r);if(e instanceof Promise){const t=await e;return s(),t}return s(),e}s()};return o.onerror=a.bind(null,o.onerror),o.onload=a.bind(null,o.onload),t=setTimeout(()=>{a(null,new Error(`Remote script "${e.url}" time-outed.`))},r),{script:o,needAttach:n}}function createLink(e){let t=null,o=!0;const n=document.getElementsByTagName("link");for(let r=0;r<n.length;r++){const s=n[r],a=s.getAttribute("href"),i=s.getAttribute("rel");if(a&&isStaticResourcesEqual(a,e.url)&&i===e.attrs.rel){t=s,o=!1;break}}if(!t){let o;t=document.createElement("link"),t.setAttribute("href",e.url);const n=e.attrs;e.createLinkHook&&(o=e.createLinkHook(e.url,n),o instanceof HTMLLinkElement&&(t=o)),n&&!o&&Object.keys(n).forEach(e=>{t&&!t.getAttribute(e)&&t.setAttribute(e,n[e])})}const r=(o,n)=>{const r=()=>{"error"===(null==n?void 0:n.type)?(null==e?void 0:e.onErrorCallback)&&(null==e||e.onErrorCallback(n)):(null==e?void 0:e.cb)&&(null==e||e.cb())};if(t&&(t.onerror=null,t.onload=null,safeWrapper(()=>{const{needDeleteLink:o=!0}=e;o&&(null==t?void 0:t.parentNode)&&t.parentNode.removeChild(t)}),o)){const e=o(n);return r(),e}r()};return t.onerror=r.bind(null,t.onerror),t.onload=r.bind(null,t.onload),{link:t,needAttach:o}}function loadScript(e,t){const{attrs:o={},createScriptHook:n}=t;return new Promise((t,r)=>{const{script:s,needAttach:a}=createScript({url:e,cb:t,onErrorCallback:r,attrs:(0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({fetchpriority:"high"},o),createScriptHook:n,needDeleteScript:!0});a&&document.head.appendChild(s)})}const sdkImportCache=new Map;function importNodeModule(e){if(!e)throw new Error("import specifier is required");if(sdkImportCache.has(e))return sdkImportCache.get(e);const t=new Function("name","return import(name)")(e).then(e=>e).catch(t=>{throw console.error(`Error importing module ${e}:`,t),sdkImportCache.delete(e),t});return sdkImportCache.set(e,t),t}const loadNodeFetch=async()=>{const e=await importNodeModule("node-fetch");return e.default||e},lazyLoaderHookFetch=async(e,t,o)=>{const n=await((e,t)=>o.lifecycle.fetch.emit(e,t))(e,t||{});return n&&n instanceof Response?n:("undefined"==typeof fetch?await loadNodeFetch():fetch)(e,t||{})},createScriptNode="undefined"==typeof ENV_TARGET||"web"!==ENV_TARGET?(url,cb,attrs,loaderHook)=>{if(null==loaderHook?void 0:loaderHook.createScriptHook){const e=loaderHook.createScriptHook(url);e&&"object"==typeof e&&"url"in e&&(url=e.url)}let urlObj;try{urlObj=new URL(url)}catch(e){return console.error("Error constructing URL:",e),void cb(new Error(`Invalid URL: ${e}`))}const getFetch=async()=>(null==loaderHook?void 0:loaderHook.fetch)?(e,t)=>lazyLoaderHookFetch(e,t,loaderHook):"undefined"==typeof fetch?loadNodeFetch():fetch,handleScriptFetch=async(f,urlObj)=>{try{var _vm_constants;const res=await f(urlObj.href),data=await res.text(),[path,vm]=await Promise.all([importNodeModule("path"),importNodeModule("vm")]),scriptContext={exports:{},module:{exports:{}}},urlDirname=urlObj.pathname.split("/").slice(0,-1).join("/"),filename=path.basename(urlObj.pathname);var _vm_constants_USE_MAIN_CONTEXT_DEFAULT_LOADER;const script=new vm.Script(`(function(exports, module, require, __dirname, __filename) {${data}\n})`,{filename,importModuleDynamically:null!=(_vm_constants_USE_MAIN_CONTEXT_DEFAULT_LOADER=null==(_vm_constants=vm.constants)?void 0:_vm_constants.USE_MAIN_CONTEXT_DEFAULT_LOADER)?_vm_constants_USE_MAIN_CONTEXT_DEFAULT_LOADER:importNodeModule});script.runInThisContext()(scriptContext.exports,scriptContext.module,eval("require"),urlDirname,filename);const exportedInterface=scriptContext.module.exports||scriptContext.exports;if(attrs&&exportedInterface&&attrs.globalName){const e=exportedInterface[attrs.globalName]||exportedInterface;return void cb(void 0,e)}cb(void 0,exportedInterface)}catch(e){cb(e instanceof Error?e:new Error(`Script execution error: ${e}`))}};getFetch().then(async e=>{if("esm"===(null==attrs?void 0:attrs.type)||"module"===(null==attrs?void 0:attrs.type))return loadModule(urlObj.href,{fetch:e,vm:await importNodeModule("vm")}).then(async e=>{await e.evaluate(),cb(void 0,e.namespace)}).catch(e=>{cb(e instanceof Error?e:new Error(`Script execution error: ${e}`))});handleScriptFetch(e,urlObj)}).catch(e=>{cb(e)})}:(e,t,o,n)=>{t(new Error("createScriptNode is disabled in non-Node.js environment"))},loadScriptNode="undefined"==typeof ENV_TARGET||"web"!==ENV_TARGET?(e,t)=>new Promise((o,n)=>{createScriptNode(e,(e,r)=>{if(e)n(e);else{var s,a;const e=(null==t||null==(s=t.attrs)?void 0:s.globalName)||`__FEDERATION_${null==t||null==(a=t.attrs)?void 0:a.name}:custom__`,n=globalThis[e]=r;o(n)}},t.attrs,t.loaderHook)}):(e,t)=>{throw new Error("loadScriptNode is disabled in non-Node.js environment")},esmModuleCache=new Map;async function loadModule(e,t){if(esmModuleCache.has(e))return esmModuleCache.get(e);const{fetch:o,vm:n}=t,r=await o(e),s=await r.text(),a=new n.SourceTextModule(s,{importModuleDynamically:async(o,n)=>loadModule(new URL(o,e).href,t)});return esmModuleCache.set(e,a),await a.link(async o=>{const n=new URL(o,e).href;return await loadModule(n,t)}),a}function normalizeOptions(e,t,o){return function(n){if(!1===n)return!1;if(void 0===n)return!!e&&t;if(!0===n)return t;if(n&&"object"==typeof n)return(0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({},t,n);throw new Error(`Unexpected type for \`${o}\`, expect boolean/undefined/object, got: ${typeof n}`)}}const createModuleFederationConfig=e=>e}},__webpack_module_cache__={},deferred,inProgress,dataWebpackPrefix,prevStartup,hasRun;function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var o=__webpack_module_cache__[e]={exports:{}},n={id:e,module:o,factory:__webpack_modules__[e],require:__webpack_require__};return __webpack_require__.i.forEach(function(e){e(n)}),o=n.module,n.factory.call(o.exports,o,o.exports,n.require),o.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.c=__webpack_module_cache__,__webpack_require__.i=[],__webpack_require__.x=e=>{},__webpack_require__.federation||(__webpack_require__.federation={initOptions:{name:"slider.editor",remotes:[],shareStrategy:"version-first"},chunkMatcher:function(e){return!/^(300|375|597)$/.test(e)},rootOutputDir:"",initialConsumes:void 0,bundlerRuntimeOptions:{}}),deferred=[],__webpack_require__.O=(e,t,o,n)=>{if(!t){var r=1/0;for(l=0;l<deferred.length;l++){for(var[t,o,n]=deferred[l],s=!0,a=0;a<t.length;a++)(!1&n||r>=n)&&Object.keys(__webpack_require__.O).every(e=>__webpack_require__.O[e](t[a]))?t.splice(a--,1):(s=!1,n<r&&(r=n));if(s){deferred.splice(l--,1);var i=o();void 0!==i&&(e=i)}}return e}n=n||0;for(var l=deferred.length;l>0&&deferred[l-1][2]>n;l--)deferred[l]=deferred[l-1];deferred[l]=[t,o,n]},__webpack_require__.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(t,{a:t}),t},__webpack_require__.d=(e,t)=>{for(var o in t)__webpack_require__.o(t,o)&&!__webpack_require__.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},__webpack_require__.f={},__webpack_require__.e=e=>Promise.all(Object.keys(__webpack_require__.f).reduce((t,o)=>(__webpack_require__.f[o](e,t),t),[])),__webpack_require__.u=e=>e+"."+{232:"dabe7ca7",833:"7bde0d99",920:"d9512875"}[e]+".chunk.js",__webpack_require__.miniCssF=e=>e+".css",__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),inProgress={},dataWebpackPrefix="@reneos/slider.editor:",__webpack_require__.l=(e,t,o,n)=>{if(inProgress[e])inProgress[e].push(t);else{var r,s;if(void 0!==o)for(var a=document.getElementsByTagName("script"),i=0;i<a.length;i++){var l=a[i];if(l.getAttribute("src")==e||l.getAttribute("data-webpack")==dataWebpackPrefix+o){r=l;break}}r||(s=!0,(r=document.createElement("script")).charset="utf-8",r.timeout=120,__webpack_require__.nc&&r.setAttribute("nonce",__webpack_require__.nc),r.setAttribute("data-webpack",dataWebpackPrefix+o),r.src=e),inProgress[e]=[t];var c=(t,o)=>{r.onerror=r.onload=null,clearTimeout(d);var n=inProgress[e];if(delete inProgress[e],r.parentNode&&r.parentNode.removeChild(r),n&&n.forEach(e=>e(o)),t)return t(o)},d=setTimeout(c.bind(null,void 0,{type:"timeout",target:r}),12e4);r.onerror=c.bind(null,r.onerror),r.onload=c.bind(null,r.onload),s&&document.head.appendChild(r)}},__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{__webpack_require__.S={};var e={},t={};__webpack_require__.I=(o,n)=>{n||(n=[]);var r=t[o];if(r||(r=t[o]={}),!(n.indexOf(r)>=0)){if(n.push(r),e[o])return e[o];__webpack_require__.o(__webpack_require__.S,o)||(__webpack_require__.S[o]={});var s=__webpack_require__.S[o],a="@reneos/slider.editor",i=(e,t,o,n)=>{var r=s[e]=s[e]||{},i=r[t];(!i||!i.loaded&&(!n!=!i.eager?n:a>i.from))&&(r[t]={get:o,from:a,eager:!!n})},l=[];return"default"===o&&(i("@reneos/app","1.0.6",()=>()=>__webpack_require__(302),1),i("three","0.180.0",()=>()=>__webpack_require__(9437),1),i("vue","3.5.21",()=>()=>__webpack_require__(1987),1)),e[o]=l.length?Promise.all(l).then(()=>e[o]=1):1}}})(),(()=>{__webpack_require__.federation.initOptions.shared={"@reneos/app":[{version:"1.0.6",get:()=>()=>__webpack_require__(302),scope:["default"],shareConfig:{eager:!0,requiredVersion:"1.0.6",singleton:!0,layer:null}}],three:[{version:"0.180.0",get:()=>()=>__webpack_require__(9437),scope:["default"],shareConfig:{eager:!0,singleton:!0,layer:null}}],vue:[{version:"3.5.21",get:()=>()=>__webpack_require__(1987),scope:["default"],shareConfig:{eager:!0,singleton:!0,layer:null}}]},__webpack_require__.S={};var e={},t={};__webpack_require__.I=(o,n)=>__webpack_require__.federation.bundlerRuntime.I({shareScopeName:o,webpackRequire:__webpack_require__,initPromises:e,initTokens:t,initScope:n})})(),__webpack_require__.p="/editor/",(()=>{var e={},t={2320:{getter:()=>()=>__webpack_require__(302),shareInfo:{shareConfig:{fixedDependencies:!1,requiredVersion:"1.0.6",strictVersion:!1,singleton:!0,eager:!0},scope:["default"]},shareKey:"@reneos/app"},4875:{getter:()=>()=>__webpack_require__(9437),shareInfo:{shareConfig:{fixedDependencies:!1,requiredVersion:"",strictVersion:!1,singleton:!0,eager:!0},scope:["default"]},shareKey:"three"},5117:{getter:()=>()=>__webpack_require__(9437),shareInfo:{shareConfig:{fixedDependencies:!1,requiredVersion:!1,strictVersion:!1,singleton:!0,eager:!0},scope:["default"]},shareKey:"three"},2015:{getter:()=>()=>__webpack_require__(1987),shareInfo:{shareConfig:{fixedDependencies:!1,requiredVersion:"",strictVersion:!1,singleton:!0,eager:!0},scope:["default"]},shareKey:"vue"}},o=[2320,4875,5117,2015];__webpack_require__.federation.installInitialConsumes=()=>__webpack_require__.federation.bundlerRuntime.installInitialConsumes({initialConsumes:o,installedModules:e,moduleToHandlerMapping:t,webpackRequire:__webpack_require__});var n={597:[2320,4875,5117,2015]};__webpack_require__.f.consumes=(o,r)=>{__webpack_require__.federation.bundlerRuntime.consumes({chunkMapping:n,installedModules:e,chunkId:o,moduleToHandlerMapping:t,promises:r,webpackRequire:__webpack_require__})}})(),(()=>{if("undefined"!=typeof document){var e={428:0};__webpack_require__.f.miniCss=(t,o)=>{e[t]?o.push(e[t]):0!==e[t]&&{232:1,833:1,920:1}[t]&&o.push(e[t]=(e=>new Promise((t,o)=>{var n=__webpack_require__.miniCssF(e),r=__webpack_require__.p+n;if(((e,t)=>{for(var o=document.getElementsByTagName("link"),n=0;n<o.length;n++){var r=(a=o[n]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(r===e||r===t))return a}var s=document.getElementsByTagName("style");for(n=0;n<s.length;n++){var a;if((r=(a=s[n]).getAttribute("data-href"))===e||r===t)return a}})(n,r))return t();((e,t,o,n,r)=>{var s=document.createElement("link");s.rel="stylesheet",s.type="text/css",__webpack_require__.nc&&(s.nonce=__webpack_require__.nc),s.onerror=s.onload=o=>{if(s.onerror=s.onload=null,"load"===o.type)n();else{var a=o&&o.type,i=o&&o.target&&o.target.href||t,l=new Error("Loading CSS chunk "+e+" failed.\n("+a+": "+i+")");l.name="ChunkLoadError",l.code="CSS_CHUNK_LOAD_FAILED",l.type=a,l.request=i,s.parentNode&&s.parentNode.removeChild(s),r(l)}},s.href=t,document.head.appendChild(s)})(e,r,0,t,o)}))(t).then(()=>{e[t]=0},o=>{throw delete e[t],o}))}}})(),prevStartup=__webpack_require__.x,hasRun=!1,__webpack_require__.x=()=>{if(hasRun||(hasRun=!0,__webpack_require__(2985)),"function"==typeof prevStartup)return prevStartup();console.warn("[Module Federation] prevStartup is not a function, skipping startup execution")},(()=>{var e={428:0,375:0,597:0,300:0};__webpack_require__.f.j=(t,o)=>{var n=__webpack_require__.o(e,t)?e[t]:void 0;if(0!==n)if(n)o.push(n[2]);else if(/^(300|375|597)$/.test(t))e[t]=0;else{var r=new Promise((o,r)=>n=e[t]=[o,r]);o.push(n[2]=r);var s=__webpack_require__.p+__webpack_require__.u(t),a=new Error;__webpack_require__.l(s,o=>{if(__webpack_require__.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var r=o&&("load"===o.type?"missing":o.type),s=o&&o.target&&o.target.src;a.message="Loading chunk "+t+" failed.\n("+r+": "+s+")",a.name="ChunkLoadError",a.type=r,a.request=s,n[1](a)}},"chunk-"+t,t)}},__webpack_require__.O.j=t=>0===e[t];var t=(t,o)=>{var n,r,[s,a,i]=o,l=0;if(s.some(t=>0!==e[t])){for(n in a)__webpack_require__.o(a,n)&&(__webpack_require__.m[n]=a[n]);if(i)var c=i(__webpack_require__)}for(t&&t(o);l<s.length;l++)r=s[l],__webpack_require__.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return __webpack_require__.O(c)},o=self.webpackChunk_reneos_slider_editor=self.webpackChunk_reneos_slider_editor||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))})(),__webpack_require__.x();var __webpack_exports__=__webpack_require__.O(void 0,[375,489,810,642,466,597,415,300,140,624],()=>__webpack_require__(8372));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
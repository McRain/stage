(()=>{"use strict";var __webpack_modules__={196:(e,t,o)=>{function n(){return n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},n.apply(this,arguments)}function a(e,t){if(null==e)return{};var o,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)o=s[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}o.r(t),o.d(t,{Module:()=>tt,ModuleFederation:()=>gt,createInstance:()=>yt,getInstance:()=>Ct,getRemoteEntry:()=>Je,getRemoteInfo:()=>Qe,init:()=>kt,loadRemote:()=>Et,loadScript:()=>s.k0,loadScriptNode:()=>s.oe,loadShare:()=>wt,loadShareSync:()=>_t,preloadRemote:()=>Nt,registerGlobalPlugins:()=>G,registerPlugins:()=>Vt,registerRemotes:()=>St,registerShared:()=>xt});var s=o(615);const r="RUNTIME-001",l="RUNTIME-002",i="RUNTIME-003",c="RUNTIME-004",d="RUNTIME-005",p="RUNTIME-006",u="RUNTIME-007",m="RUNTIME-008",h="RUNTIME-009",f="TYPE-001",v="BUILD-001",g="BUILD-002",y=(e,t,o,n)=>{const a=[`${[t[e]]} #${e}`];return o&&a.push(`args: ${JSON.stringify(o)}`),a.push((e=>`View the docs to see how to solve: https://module-federation.io/guide/troubleshooting/${e.split("-")[0].toLowerCase()}/${e}`)(e)),n&&a.push(`Original Error Message:\n ${n}`),a.join("\n")};function b(){return b=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},b.apply(this,arguments)}const k={[r]:"Failed to get remoteEntry exports.",[l]:'The remote entry interface does not contain "init"',[i]:"Failed to get manifest.",[c]:"Failed to locate remote.",[d]:"Invalid loadShareSync function call from bundler runtime",[p]:"Invalid loadShareSync function call from runtime",[u]:"Failed to get remote snapshot.",[m]:"Failed to load script resources.",[h]:"Please call createInstance first."},E=(b({},k,{[f]:"Failed to generate type declaration. Execute the below cmd to reproduce and fix the error."},{[v]:"Failed to find expose module.",[g]:"PublicPath is required in prod mode."}),"[ Federation Runtime ]"),w=(0,s.h)(E);function _(e,t){e||N(t)}function N(e){if(e instanceof Error)throw e.message.startsWith(E)||(e.message=`${E}: ${e.message}`),e;throw new Error(`${E}: ${e}`)}function S(e){e instanceof Error?(e.message.startsWith(E)||(e.message=`${E}: ${e.message}`),w.warn(e)):w.warn(e)}function V(e,t){return-1===e.findIndex(e=>e===t)&&e.push(t),e}function C(e){return"version"in e&&e.version?`${e.name}:${e.version}`:"entry"in e&&e.entry?`${e.name}:${e.entry}`:`${e.name}`}function x(e){return void 0!==e.entry}function B(e){return!e.entry.includes(".json")}function $(e){return e&&"object"==typeof e}const I=Object.prototype.toString;function D(e){return Array.isArray(e)?e:[e]}function T(e){const t={url:"",type:"global",globalName:""};return(0,s.OL)()||(0,s.tf)()?"remoteEntry"in e?{url:e.remoteEntry,type:e.remoteEntryType,globalName:e.globalName}:t:"ssrRemoteEntry"in e?{url:e.ssrRemoteEntry||t.url,type:e.ssrRemoteEntryType||t.type,globalName:e.globalName}:t}const A="object"==typeof globalThis?globalThis:window,M=(()=>{try{return document.defaultView}catch(e){return A}})(),O=M;function j(e,t,o){Object.defineProperty(e,t,{value:o,configurable:!1,writable:!0})}function P(e,t){return Object.hasOwnProperty.call(e,t)}P(A,"__GLOBAL_LOADING_REMOTE_ENTRY__")||j(A,"__GLOBAL_LOADING_REMOTE_ENTRY__",{});const R=A.__GLOBAL_LOADING_REMOTE_ENTRY__;function L(e){var t,o,n,a,s,r;P(e,"__VMOK__")&&!P(e,"__FEDERATION__")&&j(e,"__FEDERATION__",e.__VMOK__),P(e,"__FEDERATION__")||(j(e,"__FEDERATION__",{__GLOBAL_PLUGIN__:[],__INSTANCES__:[],moduleInfo:{},__SHARE__:{},__MANIFEST_LOADING__:{},__PRELOADED_MAP__:new Map}),j(e,"__VMOK__",e.__FEDERATION__)),null!=(t=e.__FEDERATION__).__GLOBAL_PLUGIN__||(t.__GLOBAL_PLUGIN__=[]),null!=(o=e.__FEDERATION__).__INSTANCES__||(o.__INSTANCES__=[]),null!=(n=e.__FEDERATION__).moduleInfo||(n.moduleInfo={}),null!=(a=e.__FEDERATION__).__SHARE__||(a.__SHARE__={}),null!=(s=e.__FEDERATION__).__MANIFEST_LOADING__||(s.__MANIFEST_LOADING__={}),null!=(r=e.__FEDERATION__).__PRELOADED_MAP__||(r.__PRELOADED_MAP__=new Map)}function F(e,t){if("string"==typeof t){if(e[t])return{value:e[t],key:t};{const o=Object.keys(e);for(const n of o){const[o,a]=n.split(":"),s=`${o}:${t}`,r=e[s];if(r)return{value:r,key:s}}return{value:void 0,key:t}}}throw new Error("key must be string")}L(A),L(M);const U=()=>M.__FEDERATION__.moduleInfo,z=e=>((e,t)=>{const o=F(t,C(e)).value;if(o&&!o.version&&"version"in e&&e.version&&(o.version=e.version),o)return o;if("version"in e&&e.version){const{version:t}=e,o=C(a(e,["version"])),n=F(M.__FEDERATION__.moduleInfo,o).value;if((null==n?void 0:n.version)===t)return n}})(e,M.__FEDERATION__.moduleInfo),H=(e,t)=>{const o=C(e);return M.__FEDERATION__.moduleInfo[o]=t,M.__FEDERATION__.moduleInfo},q=(e,t)=>{const o=t||`__FEDERATION_${e}:custom__`;return{remoteEntryKey:o,entryExports:A[o]}},G=e=>{const{__GLOBAL_PLUGIN__:t}=M.__FEDERATION__;e.forEach(e=>{-1===t.findIndex(t=>t.name===e.name)?t.push(e):S(`The plugin ${e.name} has been registered.`)})},W=e=>A.__FEDERATION__.__PRELOADED_MAP__.get(e),K=e=>A.__FEDERATION__.__PRELOADED_MAP__.set(e,!0),Y="default",X="global",J="[0-9A-Za-z-]+",Q=`(?:\\+(${J}(?:\\.${J})*))`,Z="0|[1-9]\\d*",ee="[0-9]+",te="\\d*[a-zA-Z-][a-zA-Z0-9-]*",oe=`(?:${ee}|${te})`,ne=`(?:${Z}|${te})`,ae=`(?:-(${ne}(?:\\.${ne})*))`,se=`${Z}|x|X|\\*`,re=`[v=\\s]*(${se})(?:\\.(${se})(?:\\.(${se})(?:${ae})?${Q}?)?)?`,le=`^\\s*(${re})\\s+-\\s+(${re})\\s*$`,ie="((?:<|>)?=?)",ce=`(\\s*)${ie}\\s*([v=\\s]*(${ee})\\.(${ee})\\.(${ee})(?:-?(${oe}(?:\\.${oe})*))?${Q}?|${re})`,de="(?:~>?)",pe=`(\\s*)${de}\\s+`,ue="(?:\\^)",me=`(\\s*)${ue}\\s+`,he=`^${ue}${re}$`,fe=`^${de}${re}$`,ve=`^${ie}\\s*${re}$`,ge=`^${ie}\\s*(v?(${Z})\\.(${Z})\\.(${Z})${ae}?${Q}?)$|^$`;function ye(e){return new RegExp(e)}function be(e){return!e||"x"===e.toLowerCase()||"*"===e}function ke(...e){return t=>e.reduce((e,t)=>t(e),t)}function Ee(e){return e.match(ye(ge))}function we(e,t,o,n){const a=`${e}.${t}.${o}`;return n?`${a}-${n}`:a}function _e(e){return e.replace(ye(le),(e,t,o,n,a,s,r,l,i,c,d,p)=>`${t=be(o)?"":be(n)?`>=${o}.0.0`:be(a)?`>=${o}.${n}.0`:`>=${t}`} ${l=be(i)?"":be(c)?`<${Number(i)+1}.0.0-0`:be(d)?`<${i}.${Number(c)+1}.0-0`:p?`<=${i}.${c}.${d}-${p}`:`<=${l}`}`.trim())}function Ne(e){return e.replace(ye(ce),"$1$2$3")}function Se(e){return e.replace(ye(pe),"$1~")}function Ve(e){return e.replace(ye(me),"$1^")}function Ce(e){return e.trim().split(/\s+/).map(e=>e.replace(ye(he),(e,t,o,n,a)=>be(t)?"":be(o)?`>=${t}.0.0 <${Number(t)+1}.0.0-0`:be(n)?"0"===t?`>=${t}.${o}.0 <${t}.${Number(o)+1}.0-0`:`>=${t}.${o}.0 <${Number(t)+1}.0.0-0`:a?"0"===t?"0"===o?`>=${t}.${o}.${n}-${a} <${t}.${o}.${Number(n)+1}-0`:`>=${t}.${o}.${n}-${a} <${t}.${Number(o)+1}.0-0`:`>=${t}.${o}.${n}-${a} <${Number(t)+1}.0.0-0`:"0"===t?"0"===o?`>=${t}.${o}.${n} <${t}.${o}.${Number(n)+1}-0`:`>=${t}.${o}.${n} <${t}.${Number(o)+1}.0-0`:`>=${t}.${o}.${n} <${Number(t)+1}.0.0-0`)).join(" ")}function xe(e){return e.trim().split(/\s+/).map(e=>e.replace(ye(fe),(e,t,o,n,a)=>be(t)?"":be(o)?`>=${t}.0.0 <${Number(t)+1}.0.0-0`:be(n)?`>=${t}.${o}.0 <${t}.${Number(o)+1}.0-0`:a?`>=${t}.${o}.${n}-${a} <${t}.${Number(o)+1}.0-0`:`>=${t}.${o}.${n} <${t}.${Number(o)+1}.0-0`)).join(" ")}function Be(e){return e.split(/\s+/).map(e=>e.trim().replace(ye(ve),(e,t,o,n,a,s)=>{const r=be(o),l=r||be(n),i=l||be(a);return"="===t&&i&&(t=""),s="",r?">"===t||"<"===t?"<0.0.0-0":"*":t&&i?(l&&(n=0),a=0,">"===t?(t=">=",l?(o=Number(o)+1,n=0,a=0):(n=Number(n)+1,a=0)):"<="===t&&(t="<",l?o=Number(o)+1:n=Number(n)+1),"<"===t&&(s="-0"),`${t+o}.${n}.${a}${s}`):l?`>=${o}.0.0${s} <${Number(o)+1}.0.0-0`:i?`>=${o}.${n}.0${s} <${o}.${Number(n)+1}.0-0`:e})).join(" ")}function $e(e){return e.trim().replace(ye("(<|>)?=?\\s*\\*"),"")}function Ie(e,t){return(e=Number(e)||e)>(t=Number(t)||t)?1:e===t?0:-1}function De(e,t){return Ie(e.major,t.major)||Ie(e.minor,t.minor)||Ie(e.patch,t.patch)||function(e,t){const{preRelease:o}=e,{preRelease:n}=t;if(void 0===o&&Boolean(n))return 1;if(Boolean(o)&&void 0===n)return-1;if(void 0===o&&void 0===n)return 0;for(let e=0,t=o.length;e<=t;e++){const t=o[e],a=n[e];if(t!==a)return void 0===t&&void 0===a?0:t?a?Ie(t,a):-1:1}return 0}(e,t)}function Te(e,t){return e.version===t.version}function Ae(e,t){switch(e.operator){case"":case"=":return Te(e,t);case">":return De(e,t)<0;case">=":return Te(e,t)||De(e,t)<0;case"<":return De(e,t)>0;case"<=":return Te(e,t)||De(e,t)>0;case void 0:return!0;default:return!1}}function Me(e){return ke(Ce,xe,Be,$e)(e)}function Oe(e){return ke(_e,Ne,Se,Ve)(e.trim()).split(/\s+/).join(" ")}function je(e,t){if(!e)return!1;const o=Ee(e);if(!o)return!1;const[,n,,a,s,r,l]=o,i={operator:n,version:we(a,s,r,l),major:a,minor:s,patch:r,preRelease:null==l?void 0:l.split(".")},c=t.split("||");for(const e of c){const t=e.trim();if(!t)return!0;if("*"===t||"x"===t)return!0;try{const e=Oe(t);if(!e.trim())return!0;const o=e.split(" ").map(e=>Me(e)).join(" ");if(!o.trim())return!0;const n=o.split(/\s+/).map(e=>e.trim().replace(ye("^\\s*>=\\s*0.0.0\\s*$"),"")).filter(Boolean);if(0===n.length)continue;let a=!0;for(const e of n){const t=Ee(e);if(!t){a=!1;break}const[,o,,n,s,r,l]=t;if(!Ae({operator:o,version:we(n,s,r,l),major:n,minor:s,patch:r,preRelease:null==l?void 0:l.split(".")},i)){a=!1;break}}if(a)return!0}catch(e){console.error(`[semver] Error processing range part "${t}":`,e);continue}}return!1}function Pe(e,t){const o=t.shared||{},a=t.name,s=Object.keys(o).reduce((e,s)=>{const r=D(o[s]);return e[s]=e[s]||[],r.forEach(o=>{e[s].push(function(e,t,o,a){let s;var r,l,i;return s="get"in e?e.get:"lib"in e?()=>Promise.resolve(e.lib):()=>Promise.resolve(()=>{throw new Error(`Can not get shared '${o}'!`)}),n({deps:[],useIn:[],from:t,loading:null},e,{shareConfig:n({requiredVersion:`^${e.version}`,singleton:!1,eager:!1,strictVersion:!1},e.shareConfig),get:s,loaded:!(!(null==e?void 0:e.loaded)&&!("lib"in e))||void 0,version:null!=(r=e.version)?r:"0",scope:Array.isArray(e.scope)?e.scope:[null!=(l=e.scope)?l:"default"],strategy:(null!=(i=e.strategy)?i:a)||"version-first"})}(o,a,s,t.shareStrategy))}),e},{}),r=n({},e.shared);return Object.keys(s).forEach(e=>{r[e]?s[e].forEach(t=>{r[e].find(e=>e.version===t.version)||r[e].push(t)}):r[e]=s[e]}),{shared:r,shareInfos:s}}function Re(e,t){const o=e=>{if(!Number.isNaN(Number(e))){const t=e.split(".");let o=e;for(let e=0;e<3-t.length;e++)o+=".0";return o}return e};return!!je(o(e),`<=${o(t)}`)}const Le=(e,t)=>{const o=t||function(e,t){return Re(e,t)};return Object.keys(e).reduce((e,t)=>e?o(e,t)||"0"===e?t:e:t,0)},Fe=e=>Boolean(e.loaded)||"function"==typeof e.lib;function Ue(e,t,o){const n=e[t][o];return Le(e[t][o],function(e,t){return!Fe(n[e])&&Re(e,t)})}function ze(e,t,o){const n=e[t][o];return Le(e[t][o],function(e,t){const o=e=>Fe(e)||(e=>Boolean(e.loading))(e);return o(n[t])?!o(n[e])||Boolean(Re(e,t)):!o(n[e])&&Re(e,t)})}function He(e){return"loaded-first"===e?ze:Ue}function qe(e,t,o,n){if(!e)return;const{shareConfig:a,scope:s=Y,strategy:r}=o,l=Array.isArray(s)?s:[s];for(const s of l)if(a&&e[s]&&e[s][t]){const{requiredVersion:l}=a,i=He(r)(e,s,t),c=()=>{if(a.singleton){if("string"==typeof l&&!je(i,l)){const n=`Version ${i} from ${i&&e[s][t][i].from} of shared singleton module ${t} does not satisfy the requirement of ${o.from} which needs ${l})`;a.strictVersion?N(n):S(n)}return e[s][t][i]}if(!1===l||"*"===l)return e[s][t][i];if(je(i,l))return e[s][t][i];for(const[o,n]of Object.entries(e[s][t]))if(je(o,l))return n},d={shareScopeMap:e,scope:s,pkgName:t,version:i,GlobalFederation:O.__FEDERATION__,resolver:c};return(n.emit(d)||d).resolver()}}function Ge(){return O.__FEDERATION__.__SHARE__}function We(e){const{pkgName:t,extraOptions:o,shareInfos:n}=e;var a;const s=null!=(a=null==o?void 0:o.resolver)?a:e=>{if(!e)return;const t={};e.forEach(e=>{t[e.version]=e});const o=Le(t,function(e,o){return!Fe(t[e])&&Re(e,o)});return t[o]};return Object.assign({},s(n[t]),null==o?void 0:o.customShareInfo)}const Ke=".then(callbacks[0]).catch(callbacks[1])";function Ye(e,t,o){const{remoteEntryKey:n,entryExports:a}=q(e,t);return _(a,y(r,k,{remoteName:e,remoteEntryUrl:o,remoteEntryKey:n})),a}function Xe(e){const{entry:t,name:o}=e;return(0,s.lG)(o,t)}async function Je(e){const{origin:t,remoteEntryExports:o,remoteInfo:n,getEntryUrl:a}=e,r=Xe(n);if(o)return o;if(!R[r]){const e=t.remoteHandler.hooks.lifecycle.loadEntry,l=t.loaderHook;R[r]=e.emit({loaderHook:l,remoteInfo:n,remoteEntryExports:o}).then(e=>e||(("undefined"!=typeof ENV_TARGET?"web"===ENV_TARGET:(0,s.OL)())?async function({remoteInfo:e,remoteEntryExports:t,loaderHook:o,getEntryUrl:n}){const{entry:a,entryGlobalName:r,name:l,type:i}=e;switch(i){case"esm":case"module":return async function({entry:e,remoteEntryExports:t}){return new Promise((o,n)=>{try{t?o(t):"undefined"!=typeof FEDERATION_ALLOW_NEW_FUNCTION?new Function("callbacks",`import("${e}")${Ke}`)([o,n]):import(e).then(o).catch(n)}catch(e){n(e)}})}({entry:a,remoteEntryExports:t});case"system":return async function({entry:e,remoteEntryExports:t}){return new Promise((o,n)=>{try{t?o(t):new Function("callbacks",`System.import("${e}")${Ke}`)([o,n])}catch(e){n(e)}})}({entry:a,remoteEntryExports:t});default:return async function({name:e,globalName:t,entry:o,loaderHook:n,getEntryUrl:a}){const{entryExports:r}=q(e,t);if(r)return r;const l=a?a(o):o;return(0,s.k0)(l,{attrs:{},createScriptHook:(e,t)=>{const o=n.lifecycle.createScript.emit({url:e,attrs:t});if(o)return o instanceof HTMLScriptElement||"script"in o||"timeout"in o?o:void 0}}).then(()=>Ye(e,t,o)).catch(t=>{throw _(void 0,y(m,k,{remoteName:e,resourceUrl:o})),t})}({entry:a,globalName:r,name:l,loaderHook:o,getEntryUrl:n})}}({remoteInfo:n,remoteEntryExports:o,loaderHook:l,getEntryUrl:a}):async function({remoteInfo:e,loaderHook:t}){const{entry:o,entryGlobalName:n,name:a,type:r}=e,{entryExports:l}=q(a,n);return l||(0,s.oe)(o,{attrs:{name:a,globalName:n,type:r},loaderHook:{createScriptHook:(e,o={})=>{const n=t.lifecycle.createScript.emit({url:e,attrs:o});if(n)return"url"in n?n:void 0}}}).then(()=>Ye(a,n,o)).catch(e=>{throw e})}({remoteInfo:n,loaderHook:l})))}return R[r]}function Qe(e){return n({},e,{entry:"entry"in e?e.entry:"",type:e.type||X,entryGlobalName:e.entryGlobalName||e.name,shareScope:e.shareScope||Y})}function Ze(e){return n({resourceCategory:"sync",share:!0,depsRemote:!0,prefetchInterface:!1},e)}function et(e,t,o,n=!0){const{cssAssets:a,jsAssetsWithoutEntry:r,entryAssets:l}=o;if(t.options.inBrowser){if(l.forEach(o=>{const{moduleInfo:n}=o,a=t.moduleCache.get(e.name);Je(a?{origin:t,remoteInfo:n,remoteEntryExports:a.remoteEntryExports}:{origin:t,remoteInfo:n,remoteEntryExports:void 0})}),n){const e={rel:"preload",as:"style"};a.forEach(o=>{const{link:n,needAttach:a}=(0,s.d)({url:o,cb:()=>{},attrs:e,createLinkHook:(e,o)=>{const n=t.loaderHook.lifecycle.createLink.emit({url:e,attrs:o});if(n instanceof HTMLLinkElement)return n}});a&&document.head.appendChild(n)})}else{const e={rel:"stylesheet",type:"text/css"};a.forEach(o=>{const{link:n,needAttach:a}=(0,s.d)({url:o,cb:()=>{},attrs:e,createLinkHook:(e,o)=>{const n=t.loaderHook.lifecycle.createLink.emit({url:e,attrs:o});if(n instanceof HTMLLinkElement)return n},needDeleteLink:!1});a&&document.head.appendChild(n)})}if(n){const e={rel:"preload",as:"script"};r.forEach(o=>{const{link:n,needAttach:a}=(0,s.d)({url:o,cb:()=>{},attrs:e,createLinkHook:(e,o)=>{const n=t.loaderHook.lifecycle.createLink.emit({url:e,attrs:o});if(n instanceof HTMLLinkElement)return n}});a&&document.head.appendChild(n)})}else{const o={fetchpriority:"high",type:"module"===(null==e?void 0:e.type)?"module":"text/javascript"};r.forEach(e=>{const{script:n,needAttach:a}=(0,s.so)({url:e,cb:()=>{},attrs:o,createScriptHook:(e,o)=>{const n=t.loaderHook.lifecycle.createScript.emit({url:e,attrs:o});if(n instanceof HTMLScriptElement)return n},needDeleteScript:!0});a&&document.head.appendChild(n)})}}}let tt=class{async getEntry(){if(this.remoteEntryExports)return this.remoteEntryExports;let e;try{e=await Je({origin:this.host,remoteInfo:this.remoteInfo,remoteEntryExports:this.remoteEntryExports})}catch(t){const o=Xe(this.remoteInfo);t instanceof Error&&t.message.includes(m)&&(e=await this.host.loaderHook.lifecycle.loadEntryError.emit({getRemoteEntry:Je,origin:this.host,remoteInfo:this.remoteInfo,remoteEntryExports:this.remoteEntryExports,globalLoading:R,uniqueKey:o}))}return _(e,`remoteEntryExports is undefined \n ${(0,s.ML)(this.remoteInfo)}`),this.remoteEntryExports=e,this.remoteEntryExports}async get(e,t,o,a){const{loadFactory:s=!0}=o||{loadFactory:!0},r=await this.getEntry();if(!this.inited){const t=this.host.shareScopeMap,o=Array.isArray(this.remoteInfo.shareScope)?this.remoteInfo.shareScope:[this.remoteInfo.shareScope];o.length||o.push("default"),o.forEach(e=>{t[e]||(t[e]={})});const s=t[o[0]],i=[],c={version:this.remoteInfo.version||"",shareScopeKeys:Array.isArray(this.remoteInfo.shareScope)?o:this.remoteInfo.shareScope||"default"};Object.defineProperty(c,"shareScopeMap",{value:t,enumerable:!1});const d=await this.host.hooks.lifecycle.beforeInitContainer.emit({shareScope:s,remoteEntryInitOptions:c,initScope:i,remoteInfo:this.remoteInfo,origin:this.host});void 0===(null==r?void 0:r.init)&&N(y(l,k,{hostName:this.host.name,remoteName:this.remoteInfo.name,remoteEntryUrl:this.remoteInfo.entry,remoteEntryKey:this.remoteInfo.entryGlobalName})),await r.init(d.shareScope,d.initScope,d.remoteEntryInitOptions),await this.host.hooks.lifecycle.initContainer.emit(n({},d,{id:e,remoteSnapshot:a,remoteEntryExports:r}))}let i;this.lib=r,this.inited=!0,i=await this.host.loaderHook.lifecycle.getModuleFactory.emit({remoteEntryExports:r,expose:t,moduleInfo:this.remoteInfo}),i||(i=await r.get(t)),_(i,`${C(this.remoteInfo)} remote don't export ${t}.`);const c=((e,t)=>{let o;return o=e.endsWith("/")?e.slice(0,-1):e,t.startsWith(".")&&(t=t.slice(1)),o+=t,o})(this.remoteInfo.name,t),d=this.wraperFactory(i,c);return s?await d():d}wraperFactory(e,t){function o(e,t){e&&"object"==typeof e&&Object.isExtensible(e)&&!Object.getOwnPropertyDescriptor(e,Symbol.for("mf_module_id"))&&Object.defineProperty(e,Symbol.for("mf_module_id"),{value:t,enumerable:!1})}return e instanceof Promise?async()=>{const n=await e();return o(n,t),n}:()=>{const n=e();return o(n,t),n}}constructor({remoteInfo:e,host:t}){this.inited=!1,this.lib=void 0,this.remoteInfo=e,this.host=t}};class ot{on(e){"function"==typeof e&&this.listeners.add(e)}once(e){const t=this;this.on(function o(...n){return t.remove(o),e.apply(null,n)})}emit(...e){let t;return this.listeners.size>0&&this.listeners.forEach(o=>{t=o(...e)}),t}remove(e){this.listeners.delete(e)}removeAll(){this.listeners.clear()}constructor(e){this.type="",this.listeners=new Set,e&&(this.type=e)}}class nt extends ot{emit(...e){let t;const o=Array.from(this.listeners);if(o.length>0){let n=0;const a=t=>!1!==t&&(n<o.length?Promise.resolve(o[n++].apply(null,e)).then(a):t);t=a()}return Promise.resolve(t)}}function at(e,t){if(!$(t))return!1;if(e!==t)for(const o in e)if(!(o in t))return!1;return!0}class st extends ot{emit(e){$(e)||N(`The data for the "${this.type}" hook should be an object.`);for(const t of this.listeners)try{const o=t(e);if(!at(e,o)){this.onerror(`A plugin returned an unacceptable value for the "${this.type}" type.`);break}e=o}catch(e){S(e),this.onerror(e)}return e}constructor(e){super(),this.onerror=N,this.type=e}}class rt extends ot{emit(e){$(e)||N(`The response data for the "${this.type}" hook must be an object.`);const t=Array.from(this.listeners);if(t.length>0){let o=0;const n=t=>(S(t),this.onerror(t),e),a=s=>{if(at(e,s)){if(e=s,o<t.length)try{return Promise.resolve(t[o++](e)).then(a,n)}catch(e){return n(e)}}else this.onerror(`A plugin returned an incorrect value for the "${this.type}" type.`);return e};return Promise.resolve(a(e))}return Promise.resolve(e)}constructor(e){super(),this.onerror=N,this.type=e}}class lt{applyPlugin(e,t){var o;_((o=e,"[object Object]"===I.call(o)),"Plugin configuration is invalid.");const n=e.name;_(n,"A name must be provided by the plugin."),this.registerPlugins[n]||(this.registerPlugins[n]=e,null==e.apply||e.apply.call(e,t),Object.keys(this.lifecycle).forEach(t=>{const o=e[t];o&&this.lifecycle[t].on(o)}))}removePlugin(e){_(e,"A name is required.");const t=this.registerPlugins[e];_(t,`The plugin "${e}" is not registered.`),Object.keys(t).forEach(e=>{"name"!==e&&this.lifecycle[e].remove(t[e])})}constructor(e){this.registerPlugins={},this.lifecycle=e,this.lifecycleKeys=Object.keys(e)}}function it(e,t){const o=T(t);o.url||N(`The attribute remoteEntry of ${e.name} must not be undefined.`);let n=(0,s.Al)(t,o.url);(0,s.OL)()||n.startsWith("http")||(n=`https:${n}`),e.type=o.type,e.entryGlobalName=o.globalName,e.entry=n,e.version=t.version,e.buildVersion=t.buildVersion}function ct(e){const t=e.split(":");return 1===t.length?{name:t[0],version:void 0}:2===t.length?{name:t[0],version:t[1]}:{name:t[1],version:t[2]}}function dt(e,t,o,n,a={},r){const l=C(t),{value:i}=F(e,l),c=r||i;if(c&&!(0,s.Tr)(c)&&(o(c,t,n),c.remotesInfo)){const t=Object.keys(c.remotesInfo);for(const n of t){if(a[n])continue;a[n]=!0;const t=ct(n),s=c.remotesInfo[n];dt(e,{name:t.name,version:s.matchedVersion},o,!1,a,void 0)}}}const pt=(e,t)=>document.querySelector(`${e}[${"link"===e?"href":"src"}="${t}"]`);function ut(e,t,o,n,a){const r=[],l=[],i=[],c=new Set,d=new Set,{options:p}=e,{preloadConfig:u}=t,{depsRemote:m}=u;if(dt(n,o,(t,o,n)=>{let a;if(n)a=u;else if(Array.isArray(m)){const e=m.find(e=>e.nameOrAlias===o.name||e.nameOrAlias===o.alias);if(!e)return;a=Ze(e)}else{if(!0!==m)return;a=u}const c=(0,s.Al)(t,T(t).url);c&&i.push({name:o.name,moduleInfo:{name:o.name,entry:c,type:"remoteEntryType"in t?t.remoteEntryType:"global",entryGlobalName:"globalName"in t?t.globalName:o.name,shareScope:"",version:"version"in t?t.version:void 0},url:c});let d="modules"in t?t.modules:[];const p=(h=a.exposes)?h.map(e=>"."===e?e:e.startsWith("./")?e.replace("./",""):e):[];var h,f;function v(e){const o=e.map(e=>(0,s.Al)(t,e));return a.filter?o.filter(a.filter):o}if(p.length&&"modules"in t&&(d=null==t||null==(f=t.modules)?void 0:f.reduce((e,t)=>(-1!==(null==p?void 0:p.indexOf(t.moduleName))&&e.push(t),e),[])),d){const n=d.length;for(let s=0;s<n;s++){const n=d[s],i=`${o.name}/${n.moduleName}`;e.remoteHandler.hooks.lifecycle.handlePreloadModule.emit({id:"."===n.moduleName?o.name:i,name:o.name,remoteSnapshot:t,preloadConfig:a,remote:o,origin:e}),W(i)||("all"===a.resourceCategory?(r.push(...v(n.assets.css.async)),r.push(...v(n.assets.css.sync)),l.push(...v(n.assets.js.async)),l.push(...v(n.assets.js.sync))):(a.resourceCategory="sync")&&(r.push(...v(n.assets.css.sync)),l.push(...v(n.assets.js.sync))),K(i))}}},!0,{},a),a.shared&&a.shared.length>0){const t=(t,o)=>{const n=qe(e.shareScopeMap,o.sharedName,t,e.sharedHandler.hooks.lifecycle.resolveShare);n&&"function"==typeof n.lib&&(o.assets.js.sync.forEach(e=>{c.add(e)}),o.assets.css.sync.forEach(e=>{d.add(e)}))};a.shared.forEach(e=>{var o;const n=null==(o=p.shared)?void 0:o[e.sharedName];if(!n)return;const a=e.version?n.find(t=>t.version===e.version):n;a&&D(a).forEach(o=>{t(o,e)})})}const h=l.filter(e=>!c.has(e)&&!pt("script",e));return{cssAssets:r.filter(e=>!d.has(e)&&!pt("link",e)),jsAssetsWithoutEntry:h,entryAssets:i.filter(e=>!pt("script",e.url))}}function mt(e,t){const o=z({name:t.name,version:t.options.version}),n=o&&"remotesInfo"in o&&o.remotesInfo&&F(o.remotesInfo,e.name).value;return n&&n.matchedVersion?{hostGlobalSnapshot:o,globalSnapshot:U(),remoteSnapshot:z({name:e.name,version:n.matchedVersion})}:{hostGlobalSnapshot:void 0,globalSnapshot:U(),remoteSnapshot:z({name:e.name,version:"version"in e?e.version:void 0})}}class ht{async loadRemoteSnapshotInfo({moduleInfo:e,id:t,expose:o}){const{options:a}=this.HostInstance;await this.hooks.lifecycle.beforeLoadRemoteSnapshot.emit({options:a,moduleInfo:e});let r=z({name:this.HostInstance.options.name,version:this.HostInstance.options.version});var l;r||(r={version:this.HostInstance.options.version||"",remoteEntry:"",remotesInfo:{}},l={[this.HostInstance.options.name]:r},M.__FEDERATION__.moduleInfo=n({},M.__FEDERATION__.moduleInfo,l)),r&&"remotesInfo"in r&&!F(r.remotesInfo,e.name).value&&("version"in e||"entry"in e)&&(r.remotesInfo=n({},null==r?void 0:r.remotesInfo,{[e.name]:{matchedVersion:"version"in e?e.version:e.entry}}));const{hostGlobalSnapshot:i,remoteSnapshot:c,globalSnapshot:d}=this.getGlobalRemoteInfo(e),{remoteSnapshot:p,globalSnapshot:m}=await this.hooks.lifecycle.loadSnapshot.emit({options:a,moduleInfo:e,hostGlobalSnapshot:i,remoteSnapshot:c,globalSnapshot:d});let h,f;if(p)if((0,s.Tr)(p)){const t=(0,s.OL)()?p.remoteEntry:p.ssrRemoteEntry||p.remoteEntry||"",o=await this.getManifestJson(t,e,{});h=o,f=H(n({},e,{entry:t}),o)}else{const{remoteSnapshot:t}=await this.hooks.lifecycle.loadRemoteSnapshot.emit({options:this.HostInstance.options,moduleInfo:e,remoteSnapshot:p,from:"global"});h=t,f=m}else if(x(e)){const t=await this.getManifestJson(e.entry,e,{}),o=H(e,t),{remoteSnapshot:n}=await this.hooks.lifecycle.loadRemoteSnapshot.emit({options:this.HostInstance.options,moduleInfo:e,remoteSnapshot:t,from:"global"});h=n,f=o}else N(y(u,k,{hostName:e.name,hostVersion:e.version,globalSnapshot:JSON.stringify(m)}));return await this.hooks.lifecycle.afterLoadSnapshot.emit({id:t,host:this.HostInstance,options:a,moduleInfo:e,remoteSnapshot:h}),{remoteSnapshot:h,globalSnapshot:f}}getGlobalRemoteInfo(e){return mt(e,this.HostInstance)}async getManifestJson(e,t,o){const n=async()=>{let o=this.manifestCache.get(e);if(o)return o;try{let t=await this.loaderHook.lifecycle.fetch.emit(e,{});t&&t instanceof Response||(t=await fetch(e,{})),o=await t.json()}catch(n){o=await this.HostInstance.remoteHandler.hooks.lifecycle.errorLoadRemote.emit({id:e,error:n,from:"runtime",lifecycle:"afterResolve",origin:this.HostInstance}),o||(delete this.manifestLoading[e],N(y(i,k,{manifestUrl:e,moduleName:t.name,hostName:this.HostInstance.options.name},`${n}`)))}return _(o.metaData&&o.exposes&&o.shared,`${e} is not a federation manifest`),this.manifestCache.set(e,o),o};return this.manifestLoading[e]||(this.manifestLoading[e]=(async()=>{const o=await n(),a=(0,s.Jn)(o,{version:e}),{remoteSnapshot:r}=await this.hooks.lifecycle.loadRemoteSnapshot.emit({options:this.HostInstance.options,moduleInfo:t,manifestJson:o,remoteSnapshot:a,manifestUrl:e,from:"manifest"});return r})().then(e=>e)),this.manifestLoading[e]}constructor(e){this.loadingHostSnapshot=null,this.manifestCache=new Map,this.hooks=new lt({beforeLoadRemoteSnapshot:new nt("beforeLoadRemoteSnapshot"),loadSnapshot:new rt("loadGlobalSnapshot"),loadRemoteSnapshot:new rt("loadRemoteSnapshot"),afterLoadSnapshot:new rt("afterLoadSnapshot")}),this.manifestLoading=O.__FEDERATION__.__MANIFEST_LOADING__,this.HostInstance=e,this.loaderHook=e.loaderHook}}class ft{registerShared(e,t){const{shareInfos:o,shared:n}=Pe(e,t);return Object.keys(o).forEach(e=>{o[e].forEach(o=>{!qe(this.shareScopeMap,e,o,this.hooks.lifecycle.resolveShare)&&o&&o.lib&&this.setShared({pkgName:e,lib:o.lib,get:o.get,loaded:!0,shared:o,from:t.name})})}),{shareInfos:o,shared:n}}async loadShare(e,t){const{host:o}=this,n=We({pkgName:e,extraOptions:t,shareInfos:o.options.shared});(null==n?void 0:n.scope)&&await Promise.all(n.scope.map(async e=>{await Promise.all(this.initializeSharing(e,{strategy:n.strategy}))}));const a=await this.hooks.lifecycle.beforeLoadShare.emit({pkgName:e,shareInfo:n,shared:o.options.shared,origin:o}),{shareInfo:s}=a;_(s,`Cannot find ${e} Share in the ${o.options.name}. Please ensure that the ${e} Share parameters have been injected`);const r=qe(this.shareScopeMap,e,s,this.hooks.lifecycle.resolveShare),l=e=>{e.useIn||(e.useIn=[]),V(e.useIn,o.options.name)};if(r&&r.lib)return l(r),r.lib;if(r&&r.loading&&!r.loaded){const e=await r.loading;return r.loaded=!0,r.lib||(r.lib=e),l(r),e}if(r){const t=(async()=>{const e=await r.get();return l(r),r.loaded=!0,r.lib=e,e})();return this.setShared({pkgName:e,loaded:!1,shared:r,from:o.options.name,lib:null,loading:t}),t}{if(null==t?void 0:t.customShareInfo)return!1;const n=(async()=>{const t=await s.get();s.lib=t,s.loaded=!0,l(s);const o=qe(this.shareScopeMap,e,s,this.hooks.lifecycle.resolveShare);return o&&(o.lib=t,o.loaded=!0,o.from=s.from),t})();return this.setShared({pkgName:e,loaded:!1,shared:s,from:o.options.name,lib:null,loading:n}),n}}initializeSharing(e=Y,t){const{host:o}=this,n=null==t?void 0:t.from,a=null==t?void 0:t.strategy;let s=null==t?void 0:t.initScope;const r=[];if("build"!==n){const{initTokens:t}=this;s||(s=[]);let o=t[e];if(o||(o=t[e]={from:this.host.name}),s.indexOf(o)>=0)return r;s.push(o)}const l=this.shareScopeMap,i=o.options.name;l[e]||(l[e]={});const c=l[e];return Object.keys(o.options.shared).forEach(t=>{o.options.shared[t].forEach(o=>{o.scope.includes(e)&&((e,t)=>{var o;const{version:n,eager:a}=t;c[e]=c[e]||{};const s=c[e],r=s[n],l=Boolean(r&&(r.eager||(null==(o=r.shareConfig)?void 0:o.eager)));(!r||"loaded-first"!==r.strategy&&!r.loaded&&(Boolean(!a)!==!l?a:i>r.from))&&(s[n]=t)})(t,o)})}),"version-first"!==o.options.shareStrategy&&"version-first"!==a||o.options.remotes.forEach(t=>{t.shareScope===e&&r.push((async t=>{const{module:n}=await o.remoteHandler.getRemoteModuleAndOptions({id:t});if(n.getEntry){let r;try{r=await n.getEntry()}catch(e){r=await o.remoteHandler.hooks.lifecycle.errorLoadRemote.emit({id:t,error:e,from:"runtime",lifecycle:"beforeLoadShare",origin:o})}n.inited||(await(a=r,a&&a.init&&a.init(l[e],s)),n.inited=!0)}var a})(t.name))}),r}loadShareSync(e,t){const{host:o}=this,n=We({pkgName:e,extraOptions:t,shareInfos:o.options.shared});(null==n?void 0:n.scope)&&n.scope.forEach(e=>{this.initializeSharing(e,{strategy:n.strategy})});const a=qe(this.shareScopeMap,e,n,this.hooks.lifecycle.resolveShare),s=e=>{e.useIn||(e.useIn=[]),V(e.useIn,o.options.name)};if(a){if("function"==typeof a.lib)return s(a),a.loaded||(a.loaded=!0,a.from===o.options.name&&(n.loaded=!0)),a.lib;if("function"==typeof a.get){const t=a.get();if(!(t instanceof Promise))return s(a),this.setShared({pkgName:e,loaded:!0,from:o.options.name,lib:t,shared:a}),t}}if(n.lib)return n.loaded||(n.loaded=!0),n.lib;if(n.get){const a=n.get();if(a instanceof Promise){const n="build"===(null==t?void 0:t.from)?d:p;throw new Error(y(n,k,{hostName:o.options.name,sharedPkgName:e}))}return n.lib=a,this.setShared({pkgName:e,loaded:!0,from:o.options.name,lib:n.lib,shared:n}),n.lib}throw new Error(y(p,k,{hostName:o.options.name,sharedPkgName:e}))}initShareScopeMap(e,t,o={}){const{host:n}=this;this.shareScopeMap[e]=t,this.hooks.lifecycle.initContainerShareScopeMap.emit({shareScope:t,options:n.options,origin:n,scopeName:e,hostShareScopeMap:o.hostShareScopeMap})}setShared({pkgName:e,shared:t,from:o,lib:s,loading:r,loaded:l,get:i}){const{version:c,scope:d="default"}=t,p=a(t,["version","scope"]);(Array.isArray(d)?d:[d]).forEach(t=>{if(this.shareScopeMap[t]||(this.shareScopeMap[t]={}),this.shareScopeMap[t][e]||(this.shareScopeMap[t][e]={}),!this.shareScopeMap[t][e][c])return this.shareScopeMap[t][e][c]=n({version:c,scope:["default"]},p,{lib:s,loaded:l,loading:r}),void(i&&(this.shareScopeMap[t][e][c].get=i));const a=this.shareScopeMap[t][e][c];r&&!a.loading&&(a.loading=r),l&&!a.loaded&&(a.loaded=l),o&&a.from!==o&&(a.from=o)})}_setGlobalShareScopeMap(e){const t=Ge(),o=e.id||e.name;o&&!t[o]&&(t[o]=this.shareScopeMap)}constructor(e){this.hooks=new lt({afterResolve:new rt("afterResolve"),beforeLoadShare:new rt("beforeLoadShare"),loadShare:new nt,resolveShare:new st("resolveShare"),initContainerShareScopeMap:new st("initContainerShareScopeMap")}),this.host=e,this.shareScopeMap={},this.initTokens={},this._setGlobalShareScopeMap(e.options)}}class vt{formatAndRegisterRemote(e,t){return(t.remotes||[]).reduce((e,t)=>(this.registerRemote(t,e,{force:!1}),e),e.remotes)}setIdToRemoteMap(e,t){const{remote:o,expose:n}=t,{name:a,alias:s}=o;if(this.idToRemoteMap[e]={name:o.name,expose:n},s&&e.startsWith(a)){const t=e.replace(a,s);return void(this.idToRemoteMap[t]={name:o.name,expose:n})}if(s&&e.startsWith(s)){const t=e.replace(s,a);this.idToRemoteMap[t]={name:o.name,expose:n}}}async loadRemote(e,t){const{host:o}=this;try{const{loadFactory:n=!0}=t||{loadFactory:!0},{module:a,moduleOptions:s,remoteMatchInfo:r}=await this.getRemoteModuleAndOptions({id:e}),{pkgNameOrAlias:l,remote:i,expose:c,id:d,remoteSnapshot:p}=r,u=await a.get(d,c,t,p),m=await this.hooks.lifecycle.onLoad.emit({id:d,pkgNameOrAlias:l,expose:c,exposeModule:n?u:void 0,exposeModuleFactory:n?void 0:u,remote:i,options:s,moduleInstance:a,origin:o});return this.setIdToRemoteMap(e,r),"function"==typeof m?m:u}catch(n){const{from:a="runtime"}=t||{from:"runtime"},s=await this.hooks.lifecycle.errorLoadRemote.emit({id:e,error:n,from:a,lifecycle:"onLoad",origin:o});if(!s)throw n;return s}}async preloadRemote(e){const{host:t}=this;await this.hooks.lifecycle.beforePreloadRemote.emit({preloadOps:e,options:t.options,origin:t});const o=(n=t.options.remotes,e.map(e=>{const t=function(e,t){for(const o of e){if(t===o.name)return o;if(o.alias&&t===o.alias)return o}}(n,e.nameOrAlias);return _(t,`Unable to preload ${e.nameOrAlias} as it is not included in ${!t&&(0,s.ML)({remoteInfo:t,remotes:n})}`),{remote:t,preloadConfig:Ze(e)}}));var n;await Promise.all(o.map(async e=>{const{remote:o}=e,n=Qe(o),{globalSnapshot:a,remoteSnapshot:s}=await t.snapshotHandler.loadRemoteSnapshotInfo({moduleInfo:o}),r=await this.hooks.lifecycle.generatePreloadAssets.emit({origin:t,preloadOptions:e,remote:o,remoteInfo:n,globalSnapshot:a,remoteSnapshot:s});r&&et(n,t,r)}))}registerRemotes(e,t){const{host:o}=this;e.forEach(e=>{this.registerRemote(e,o.options.remotes,{force:null==t?void 0:t.force})})}async getRemoteModuleAndOptions(e){const{host:t}=this,{id:o}=e;let a;try{a=await this.hooks.lifecycle.beforeRequest.emit({id:o,options:t.options,origin:t})}catch(e){if(a=await this.hooks.lifecycle.errorLoadRemote.emit({id:o,options:t.options,origin:t,from:"runtime",error:e,lifecycle:"beforeRequest"}),!a)throw e}const{id:s}=a,r=function(e,t){for(const o of e){const e=t.startsWith(o.name);let n=t.replace(o.name,"");if(e){if(n.startsWith("/"))return n=`.${n}`,{pkgNameOrAlias:o.name,expose:n,remote:o};if(""===n)return{pkgNameOrAlias:o.name,expose:".",remote:o}}const a=o.alias&&t.startsWith(o.alias);let s=o.alias&&t.replace(o.alias,"");if(o.alias&&a){if(s&&s.startsWith("/"))return s=`.${s}`,{pkgNameOrAlias:o.alias,expose:s,remote:o};if(""===s)return{pkgNameOrAlias:o.alias,expose:".",remote:o}}}}(t.options.remotes,s);_(r,y(c,k,{hostName:t.options.name,requestId:s}));const{remote:l}=r,i=Qe(l),d=await t.sharedHandler.hooks.lifecycle.afterResolve.emit(n({id:s},r,{options:t.options,origin:t,remoteInfo:i})),{remote:p,expose:u}=d;_(p&&u,`The 'beforeRequest' hook was executed, but it failed to return the correct 'remote' and 'expose' values while loading ${s}.`);let m=t.moduleCache.get(p.name);const h={host:t,remoteInfo:i};return m||(m=new tt(h),t.moduleCache.set(p.name,m)),{module:m,moduleOptions:h,remoteMatchInfo:d}}registerRemote(e,t,o){const{host:n}=this,a=()=>{if(e.alias){const o=t.find(t=>{var o;return e.alias&&(t.name.startsWith(e.alias)||(null==(o=t.alias)?void 0:o.startsWith(e.alias)))});_(!o,`The alias ${e.alias} of remote ${e.name} is not allowed to be the prefix of ${o&&o.name} name or alias`)}"entry"in e&&(0,s.OL)()&&!e.entry.startsWith("http")&&(e.entry=new URL(e.entry,window.location.origin).href),e.shareScope||(e.shareScope=Y),e.type||(e.type=X)};this.hooks.lifecycle.beforeRegisterRemote.emit({remote:e,origin:n});const r=t.find(t=>t.name===e.name);if(r){const l=[`The remote "${e.name}" is already registered.`,"Please note that overriding it may cause unexpected errors."];(null==o?void 0:o.force)&&(this.removeRemote(r),a(),t.push(e),this.hooks.lifecycle.registerRemote.emit({remote:e,origin:n}),(0,s.R8)(l.join(" ")))}else a(),t.push(e),this.hooks.lifecycle.registerRemote.emit({remote:e,origin:n})}removeRemote(e){try{const{host:o}=this,{name:n}=e,a=o.options.remotes.findIndex(e=>e.name===n);-1!==a&&o.options.remotes.splice(a,1);const r=o.moduleCache.get(e.name);if(r){const n=r.remoteInfo,a=n.entryGlobalName;var t;A[a]&&((null==(t=Object.getOwnPropertyDescriptor(A,a))?void 0:t.configurable)?delete A[a]:A[a]=void 0);const l=Xe(r.remoteInfo);R[l]&&delete R[l],o.snapshotHandler.manifestCache.delete(n.entry);let i=n.buildVersion?(0,s.lG)(n.name,n.buildVersion):n.name;const c=A.__FEDERATION__.__INSTANCES__.findIndex(e=>n.buildVersion?e.options.id===i:e.name===i);if(-1!==c){const e=A.__FEDERATION__.__INSTANCES__[c];i=e.options.id||i;const t=Ge();let o=!0;const a=[];Object.keys(t).forEach(e=>{const s=t[e];s&&Object.keys(s).forEach(t=>{const r=s[t];r&&Object.keys(r).forEach(s=>{const l=r[s];l&&Object.keys(l).forEach(r=>{const i=l[r];i&&"object"==typeof i&&i.from===n.name&&(i.loaded||i.loading?(i.useIn=i.useIn.filter(e=>e!==n.name),i.useIn.length?o=!1:a.push([e,t,s,r])):a.push([e,t,s,r]))})})})}),o&&(e.shareScopeMap={},delete t[i]),a.forEach(([e,o,n,a])=>{var s,r,l;null==(l=t[e])||null==(r=l[o])||null==(s=r[n])||delete s[a]}),A.__FEDERATION__.__INSTANCES__.splice(c,1)}const{hostGlobalSnapshot:d}=mt(e,o);if(d){const t=d&&"remotesInfo"in d&&d.remotesInfo&&F(d.remotesInfo,e.name).key;t&&(delete d.remotesInfo[t],Boolean(O.__FEDERATION__.__MANIFEST_LOADING__[t])&&delete O.__FEDERATION__.__MANIFEST_LOADING__[t])}o.moduleCache.delete(e.name)}}catch(e){w.log("removeRemote fail: ",e)}}constructor(e){this.hooks=new lt({beforeRegisterRemote:new st("beforeRegisterRemote"),registerRemote:new st("registerRemote"),beforeRequest:new rt("beforeRequest"),onLoad:new nt("onLoad"),handlePreloadModule:new ot("handlePreloadModule"),errorLoadRemote:new nt("errorLoadRemote"),beforePreloadRemote:new nt("beforePreloadRemote"),generatePreloadAssets:new nt("generatePreloadAssets"),afterPreloadRemote:new nt,loadEntry:new nt}),this.host=e,this.idToRemoteMap={}}}class gt{initOptions(e){this.registerPlugins(e.plugins);const t=this.formatOptions(this.options,e);return this.options=t,t}async loadShare(e,t){return this.sharedHandler.loadShare(e,t)}loadShareSync(e,t){return this.sharedHandler.loadShareSync(e,t)}initializeSharing(e=Y,t){return this.sharedHandler.initializeSharing(e,t)}initRawContainer(e,t,o){const n=Qe({name:e,entry:t}),a=new tt({host:this,remoteInfo:n});return a.remoteEntryExports=o,this.moduleCache.set(e,a),a}async loadRemote(e,t){return this.remoteHandler.loadRemote(e,t)}async preloadRemote(e){return this.remoteHandler.preloadRemote(e)}initShareScopeMap(e,t,o={}){this.sharedHandler.initShareScopeMap(e,t,o)}formatOptions(e,t){const{shared:o}=Pe(e,t),{userOptions:a,options:s}=this.hooks.lifecycle.beforeInit.emit({origin:this,userOptions:t,options:e,shareInfo:o}),r=this.remoteHandler.formatAndRegisterRemote(s,a),{shared:l}=this.sharedHandler.registerShared(s,a),i=[...s.plugins];a.plugins&&a.plugins.forEach(e=>{i.includes(e)||i.push(e)});const c=n({},e,t,{plugins:i,remotes:r,shared:l});return this.hooks.lifecycle.init.emit({origin:this,options:c}),c}registerPlugins(e){const t=function(e,t){const o=M.__FEDERATION__.__GLOBAL_PLUGIN__,n=[t.hooks,t.remoteHandler.hooks,t.sharedHandler.hooks,t.snapshotHandler.hooks,t.loaderHook,t.bridgeHook];return o.length>0&&o.forEach(t=>{(null==e?void 0:e.find(e=>e.name!==t.name))&&e.push(t)}),e&&e.length>0&&e.forEach(e=>{n.forEach(o=>{o.applyPlugin(e,t)})}),e}(e,this);this.options.plugins=this.options.plugins.reduce((e,t)=>t?(e&&!e.find(e=>e.name===t.name)&&e.push(t),e):e,t||[])}registerRemotes(e,t){return this.remoteHandler.registerRemotes(e,t)}registerShared(e){this.sharedHandler.registerShared(this.options,n({},this.options,{shared:e}))}constructor(e){this.hooks=new lt({beforeInit:new st("beforeInit"),init:new ot,beforeInitContainer:new rt("beforeInitContainer"),initContainer:new rt("initContainer")}),this.version="0.19.1",this.moduleCache=new Map,this.loaderHook=new lt({getModuleInfo:new ot,createScript:new ot,createLink:new ot,fetch:new nt,loadEntryError:new nt,getModuleFactory:new nt}),this.bridgeHook=new lt({beforeBridgeRender:new ot,afterBridgeRender:new ot,beforeBridgeDestroy:new ot,afterBridgeDestroy:new ot});const t=[{name:"snapshot-plugin",async afterResolve(e){const{remote:t,pkgNameOrAlias:o,expose:a,origin:s,remoteInfo:r,id:l}=e;if(!x(t)||!B(t)){const{remoteSnapshot:i,globalSnapshot:c}=await s.snapshotHandler.loadRemoteSnapshotInfo({moduleInfo:t,id:l});it(r,i);const d={remote:t,preloadConfig:{nameOrAlias:o,exposes:[a],resourceCategory:"sync",share:!1,depsRemote:!1}},p=await s.remoteHandler.hooks.lifecycle.generatePreloadAssets.emit({origin:s,preloadOptions:d,remoteInfo:r,remote:t,remoteSnapshot:i,globalSnapshot:c});return p&&et(r,s,p,!1),n({},e,{remoteSnapshot:i})}return e}},{name:"generate-preload-assets-plugin",async generatePreloadAssets(e){const{origin:t,preloadOptions:o,remoteInfo:n,remote:a,globalSnapshot:r,remoteSnapshot:l}=e;return(0,s.OL)()?x(a)&&B(a)?{cssAssets:[],jsAssetsWithoutEntry:[],entryAssets:[{name:a.name,url:a.entry,moduleInfo:{name:n.name,entry:a.entry,type:n.type||"global",entryGlobalName:"",shareScope:""}}]}:(it(n,l),ut(t,o,n,r,l)):{cssAssets:[],jsAssetsWithoutEntry:[],entryAssets:[]}}}],o={id:"slider.editor:0.0.8",name:e.name,plugins:t,remotes:[],shared:{},inBrowser:(0,s.OL)()};this.name=e.name,this.options=o,this.snapshotHandler=new ht(this),this.sharedHandler=new ft(this),this.remoteHandler=new vt(this),this.shareScopeMap=this.sharedHandler.shareScopeMap,this.registerPlugins([...o.plugins,...e.plugins||[]]),this.options=this.formatOptions(o,e)}}function yt(e){const t=new(A.__FEDERATION__.__DEBUG_CONSTRUCTOR__||gt)(e);return function(e){A.__FEDERATION__.__INSTANCES__.push(e)}(t),t}let bt=null;function kt(e){const t=(o=e.name,n=e.version,A.__FEDERATION__.__INSTANCES__.find(e=>!("slider.editor:0.0.8"!==e.options.id&&(e.options.name!==o||e.options.version||n)&&(e.options.name!==o||!n||e.options.version!==n))));var o,n;return t?(t.initOptions(e),bt||(bt=t),t):(bt=yt(e),bt)}function Et(...e){return _(bt,y(h,k)),bt.loadRemote.apply(bt,e)}function wt(...e){return _(bt,y(h,k)),bt.loadShare.apply(bt,e)}function _t(...e){return _(bt,y(h,k)),bt.loadShareSync.apply(bt,e)}function Nt(...e){return _(bt,y(h,k)),bt.preloadRemote.apply(bt,e)}function St(...e){return _(bt,y(h,k)),bt.registerRemotes.apply(bt,e)}function Vt(...e){return _(bt,y(h,k)),bt.registerPlugins.apply(bt,e)}function Ct(){return bt}function xt(...e){return _(bt,y(h,k)),bt.registerShared.apply(bt,e)}!function(e,t=(0,s.Bb)()){t&&(A.__FEDERATION__.__DEBUG_CONSTRUCTOR__=e,A.__FEDERATION__.__DEBUG_CONSTRUCTOR_VERSION__="0.19.1")}(gt)},419:(e,t,o)=>{function n(){return n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},n.apply(this,arguments)}o.d(t,{_:()=>n})},615:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Al:()=>getResourceUrl,Bb:()=>isDebugMode,Jn:()=>generateSnapshotFromManifest,ML:()=>safeToString,OL:()=>isBrowserEnv,R8:()=>warn,Tr:()=>isManifestProvider,d:()=>createLink,e4:()=>decodeName,h:()=>createLogger,k0:()=>loadScript,lG:()=>composeKeyWithSeparator,oe:()=>loadScriptNode,so:()=>createScript,tf:()=>isReactNativeEnv,yq:()=>ENCODE_NAME_PREFIX});var _polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(419);const FederationModuleManifest="federation-manifest.json",MANIFEST_EXT=".json",BROWSER_LOG_KEY="FEDERATION_DEBUG",NameTransformSymbol={AT:"@",HYPHEN:"-",SLASH:"/"},NameTransformMap={[NameTransformSymbol.AT]:"scope_",[NameTransformSymbol.HYPHEN]:"_",[NameTransformSymbol.SLASH]:"__"},EncodedNameTransformMap={[NameTransformMap[NameTransformSymbol.AT]]:NameTransformSymbol.AT,[NameTransformMap[NameTransformSymbol.HYPHEN]]:NameTransformSymbol.HYPHEN,[NameTransformMap[NameTransformSymbol.SLASH]]:NameTransformSymbol.SLASH},SEPARATOR=":",ManifestFileName="mf-manifest.json",StatsFileName="mf-stats.json",MFModuleType={NPM:"npm",APP:"app"},MODULE_DEVTOOL_IDENTIFIER="__MF_DEVTOOLS_MODULE_INFO__",ENCODE_NAME_PREFIX="ENCODE_NAME_PREFIX",TEMP_DIR=".federation",MFPrefetchCommon={identifier:"MFDataPrefetch",globalKey:"__PREFETCH__",library:"mf-data-prefetch",exportsKey:"__PREFETCH_EXPORTS__",fileName:"bootstrap.js"};var ContainerPlugin=Object.freeze({__proto__:null}),ContainerReferencePlugin=Object.freeze({__proto__:null}),ModuleFederationPlugin=Object.freeze({__proto__:null}),SharePlugin=Object.freeze({__proto__:null});function isBrowserEnv(){return"undefined"!=typeof window&&void 0!==window.document}function isReactNativeEnv(){var e;return"undefined"!=typeof navigator&&"ReactNative"===(null==(e=navigator)?void 0:e.product)}function isBrowserDebug(){try{if(isBrowserEnv()&&window.localStorage)return Boolean(localStorage.getItem(BROWSER_LOG_KEY))}catch(e){return!1}return!1}function isDebugMode(){return"undefined"!=typeof process&&process.env&&process.env.FEDERATION_DEBUG?Boolean(process.env.FEDERATION_DEBUG):!("undefined"==typeof FEDERATION_DEBUG||!Boolean(FEDERATION_DEBUG))||isBrowserDebug()}const getProcessEnv=function(){return"undefined"!=typeof process&&process.env?process.env:{}},LOG_CATEGORY="[ Federation Runtime ]",parseEntry=(e,t,o=SEPARATOR)=>{const n=e.split(o),a="development"===getProcessEnv().NODE_ENV&&t,s=e=>e.startsWith("http")||e.includes(MANIFEST_EXT);if(n.length>=2){let[t,...r]=n;e.startsWith(o)&&(t=n.slice(0,2).join(o),r=[a||n.slice(2).join(o)]);let l=a||r.join(o);return s(l)?{name:t,entry:l}:{name:t,version:l||"*"}}if(1===n.length){const[e]=n;return a&&s(a)?{name:e,entry:a}:{name:e,version:a||"*"}}throw`Invalid entry value: ${e}`},composeKeyWithSeparator=function(...e){return e.length?e.reduce((e,t)=>t?e?`${e}${SEPARATOR}${t}`:t:e,""):""},encodeName=function(e,t="",o=!1){try{const n=o?".js":"";return`${t}${e.replace(new RegExp(`${NameTransformSymbol.AT}`,"g"),NameTransformMap[NameTransformSymbol.AT]).replace(new RegExp(`${NameTransformSymbol.HYPHEN}`,"g"),NameTransformMap[NameTransformSymbol.HYPHEN]).replace(new RegExp(`${NameTransformSymbol.SLASH}`,"g"),NameTransformMap[NameTransformSymbol.SLASH])}${n}`}catch(e){throw e}},decodeName=function(e,t,o){try{let n=e;if(t){if(!n.startsWith(t))return n;n=n.replace(new RegExp(t,"g"),"")}return n=n.replace(new RegExp(`${NameTransformMap[NameTransformSymbol.AT]}`,"g"),EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.AT]]).replace(new RegExp(`${NameTransformMap[NameTransformSymbol.SLASH]}`,"g"),EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.SLASH]]).replace(new RegExp(`${NameTransformMap[NameTransformSymbol.HYPHEN]}`,"g"),EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.HYPHEN]]),o&&(n=n.replace(".js","")),n}catch(e){throw e}},generateExposeFilename=(e,t)=>{if(!e)return"";let o=e;return"."===o&&(o="default_export"),o.startsWith("./")&&(o=o.replace("./","")),encodeName(o,"__federation_expose_",t)},generateShareFilename=(e,t)=>e?encodeName(e,"__federation_shared_",t):"",getResourceUrl=(e,t)=>{if("getPublicPath"in e){let o;return o=e.getPublicPath.startsWith("function")?new Function("return "+e.getPublicPath)()():new Function(e.getPublicPath)(),`${o}${t}`}return"publicPath"in e?isBrowserEnv()||isReactNativeEnv()||!("ssrPublicPath"in e)?`${e.publicPath}${t}`:`${e.ssrPublicPath}${t}`:(console.warn("Cannot get resource URL. If in debug mode, please ignore.",e,t),"")},assert=(e,t)=>{e||error(t)},error=e=>{throw new Error(`${LOG_CATEGORY}: ${e}`)},warn=e=>{console.warn(`${LOG_CATEGORY}: ${e}`)};function safeToString(e){try{return JSON.stringify(e,null,2)}catch(e){return""}}const VERSION_PATTERN_REGEXP=/^([\d^=v<>~]|[*xX]$)/;function isRequiredVersion(e){return VERSION_PATTERN_REGEXP.test(e)}const simpleJoinRemoteEntry=(e,t)=>{if(!e)return t;const o=(e=>{if("."===e)return"";if(e.startsWith("./"))return e.replace("./","");if(e.startsWith("/")){const t=e.slice(1);return t.endsWith("/")?t.slice(0,-1):t}return e})(e);return o?o.endsWith("/")?`${o}${t}`:`${o}/${t}`:t};function inferAutoPublicPath(e){return e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/")}function generateSnapshotFromManifest(e,t={}){var o,n;const{remotes:a={},overrides:s={},version:r}=t;let l;const i=()=>"publicPath"in e.metaData?"auto"===e.metaData.publicPath&&r?inferAutoPublicPath(r):e.metaData.publicPath:e.metaData.getPublicPath,c=Object.keys(s);let d={};var p;Object.keys(a).length||(d=(null==(p=e.remotes)?void 0:p.reduce((e,t)=>{let o;const n=t.federationContainerName;return o=c.includes(n)?s[n]:"version"in t?t.version:t.entry,e[n]={matchedVersion:o},e},{}))||{}),Object.keys(a).forEach(e=>d[e]={matchedVersion:c.includes(e)?s[e]:a[e]});const{remoteEntry:{path:u,name:m,type:h},types:f,buildInfo:{buildVersion:v},globalName:g,ssrRemoteEntry:y}=e.metaData,{exposes:b}=e;let k={version:r||"",buildVersion:v,globalName:g,remoteEntry:simpleJoinRemoteEntry(u,m),remoteEntryType:h,remoteTypes:simpleJoinRemoteEntry(f.path,f.name),remoteTypesZip:f.zip||"",remoteTypesAPI:f.api||"",remotesInfo:d,shared:null==e?void 0:e.shared.map(e=>({assets:e.assets,sharedName:e.name,version:e.version})),modules:null==b?void 0:b.map(e=>({moduleName:e.name,modulePath:e.path,assets:e.assets}))};if(null==(o=e.metaData)?void 0:o.prefetchInterface){const t=e.metaData.prefetchInterface;k=(0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({},k,{prefetchInterface:t})}if(null==(n=e.metaData)?void 0:n.prefetchEntry){const{path:t,name:o,type:n}=e.metaData.prefetchEntry;k=(0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({},k,{prefetchEntry:simpleJoinRemoteEntry(t,o),prefetchEntryType:n})}if(l="publicPath"in e.metaData?(0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({},k,{publicPath:i(),ssrPublicPath:e.metaData.ssrPublicPath}):(0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({},k,{getPublicPath:i()}),y){const e=simpleJoinRemoteEntry(y.path,y.name);l.ssrRemoteEntry=e,l.ssrRemoteEntryType=y.type||"commonjs-module"}return l}function isManifestProvider(e){return!(!("remoteEntry"in e)||!e.remoteEntry.includes(MANIFEST_EXT))}const PREFIX="[ Module Federation ]";let Logger=class{setPrefix(e){this.prefix=e}log(...e){console.log(this.prefix,...e)}warn(...e){console.log(this.prefix,...e)}error(...e){console.log(this.prefix,...e)}success(...e){console.log(this.prefix,...e)}info(...e){console.log(this.prefix,...e)}ready(...e){console.log(this.prefix,...e)}debug(...e){isDebugMode()&&console.log(this.prefix,...e)}constructor(e){this.prefix=e}};function createLogger(e){return new Logger(e)}const logger=createLogger(PREFIX);async function safeWrapper(e,t){try{return await e()}catch(e){return void(!t&&warn(e))}}function isStaticResourcesEqual(e,t){const o=/^(https?:)?\/\//i;return e.replace(o,"").replace(/\/$/,"")===t.replace(o,"").replace(/\/$/,"")}function createScript(e){let t,o=null,n=!0,a=2e4;const s=document.getElementsByTagName("script");for(let t=0;t<s.length;t++){const a=s[t],r=a.getAttribute("src");if(r&&isStaticResourcesEqual(r,e.url)){o=a,n=!1;break}}if(!o){const t=e.attrs;let n;o=document.createElement("script"),o.type="module"===(null==t?void 0:t.type)?"module":"text/javascript",e.createScriptHook&&(n=e.createScriptHook(e.url,e.attrs),n instanceof HTMLScriptElement?o=n:"object"==typeof n&&("script"in n&&n.script&&(o=n.script),"timeout"in n&&n.timeout&&(a=n.timeout))),o.src||(o.src=e.url),t&&!n&&Object.keys(t).forEach(e=>{o&&("async"===e||"defer"===e?o[e]=t[e]:o.getAttribute(e)||o.setAttribute(e,t[e]))})}const r=async(n,a)=>{clearTimeout(t);const s=()=>{"error"===(null==a?void 0:a.type)?(null==e?void 0:e.onErrorCallback)&&(null==e||e.onErrorCallback(a)):(null==e?void 0:e.cb)&&(null==e||e.cb())};if(o&&(o.onerror=null,o.onload=null,safeWrapper(()=>{const{needDeleteScript:t=!0}=e;t&&(null==o?void 0:o.parentNode)&&o.parentNode.removeChild(o)}),n&&"function"==typeof n)){const e=n(a);if(e instanceof Promise){const t=await e;return s(),t}return s(),e}s()};return o.onerror=r.bind(null,o.onerror),o.onload=r.bind(null,o.onload),t=setTimeout(()=>{r(null,new Error(`Remote script "${e.url}" time-outed.`))},a),{script:o,needAttach:n}}function createLink(e){let t=null,o=!0;const n=document.getElementsByTagName("link");for(let a=0;a<n.length;a++){const s=n[a],r=s.getAttribute("href"),l=s.getAttribute("rel");if(r&&isStaticResourcesEqual(r,e.url)&&l===e.attrs.rel){t=s,o=!1;break}}if(!t){let o;t=document.createElement("link"),t.setAttribute("href",e.url);const n=e.attrs;e.createLinkHook&&(o=e.createLinkHook(e.url,n),o instanceof HTMLLinkElement&&(t=o)),n&&!o&&Object.keys(n).forEach(e=>{t&&!t.getAttribute(e)&&t.setAttribute(e,n[e])})}const a=(o,n)=>{const a=()=>{"error"===(null==n?void 0:n.type)?(null==e?void 0:e.onErrorCallback)&&(null==e||e.onErrorCallback(n)):(null==e?void 0:e.cb)&&(null==e||e.cb())};if(t&&(t.onerror=null,t.onload=null,safeWrapper(()=>{const{needDeleteLink:o=!0}=e;o&&(null==t?void 0:t.parentNode)&&t.parentNode.removeChild(t)}),o)){const e=o(n);return a(),e}a()};return t.onerror=a.bind(null,t.onerror),t.onload=a.bind(null,t.onload),{link:t,needAttach:o}}function loadScript(e,t){const{attrs:o={},createScriptHook:n}=t;return new Promise((t,a)=>{const{script:s,needAttach:r}=createScript({url:e,cb:t,onErrorCallback:a,attrs:(0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({fetchpriority:"high"},o),createScriptHook:n,needDeleteScript:!0});r&&document.head.appendChild(s)})}const sdkImportCache=new Map;function importNodeModule(e){if(!e)throw new Error("import specifier is required");if(sdkImportCache.has(e))return sdkImportCache.get(e);const t=new Function("name","return import(name)")(e).then(e=>e).catch(t=>{throw console.error(`Error importing module ${e}:`,t),sdkImportCache.delete(e),t});return sdkImportCache.set(e,t),t}const loadNodeFetch=async()=>{const e=await importNodeModule("node-fetch");return e.default||e},lazyLoaderHookFetch=async(e,t,o)=>{const n=await((e,t)=>o.lifecycle.fetch.emit(e,t))(e,t||{});return n&&n instanceof Response?n:("undefined"==typeof fetch?await loadNodeFetch():fetch)(e,t||{})},createScriptNode="undefined"==typeof ENV_TARGET||"web"!==ENV_TARGET?(url,cb,attrs,loaderHook)=>{if(null==loaderHook?void 0:loaderHook.createScriptHook){const e=loaderHook.createScriptHook(url);e&&"object"==typeof e&&"url"in e&&(url=e.url)}let urlObj;try{urlObj=new URL(url)}catch(e){return console.error("Error constructing URL:",e),void cb(new Error(`Invalid URL: ${e}`))}const getFetch=async()=>(null==loaderHook?void 0:loaderHook.fetch)?(e,t)=>lazyLoaderHookFetch(e,t,loaderHook):"undefined"==typeof fetch?loadNodeFetch():fetch,handleScriptFetch=async(f,urlObj)=>{try{var _vm_constants;const res=await f(urlObj.href),data=await res.text(),[path,vm]=await Promise.all([importNodeModule("path"),importNodeModule("vm")]),scriptContext={exports:{},module:{exports:{}}},urlDirname=urlObj.pathname.split("/").slice(0,-1).join("/"),filename=path.basename(urlObj.pathname);var _vm_constants_USE_MAIN_CONTEXT_DEFAULT_LOADER;const script=new vm.Script(`(function(exports, module, require, __dirname, __filename) {${data}\n})`,{filename,importModuleDynamically:null!=(_vm_constants_USE_MAIN_CONTEXT_DEFAULT_LOADER=null==(_vm_constants=vm.constants)?void 0:_vm_constants.USE_MAIN_CONTEXT_DEFAULT_LOADER)?_vm_constants_USE_MAIN_CONTEXT_DEFAULT_LOADER:importNodeModule});script.runInThisContext()(scriptContext.exports,scriptContext.module,eval("require"),urlDirname,filename);const exportedInterface=scriptContext.module.exports||scriptContext.exports;if(attrs&&exportedInterface&&attrs.globalName){const e=exportedInterface[attrs.globalName]||exportedInterface;return void cb(void 0,e)}cb(void 0,exportedInterface)}catch(e){cb(e instanceof Error?e:new Error(`Script execution error: ${e}`))}};getFetch().then(async e=>{if("esm"===(null==attrs?void 0:attrs.type)||"module"===(null==attrs?void 0:attrs.type))return loadModule(urlObj.href,{fetch:e,vm:await importNodeModule("vm")}).then(async e=>{await e.evaluate(),cb(void 0,e.namespace)}).catch(e=>{cb(e instanceof Error?e:new Error(`Script execution error: ${e}`))});handleScriptFetch(e,urlObj)}).catch(e=>{cb(e)})}:(e,t,o,n)=>{t(new Error("createScriptNode is disabled in non-Node.js environment"))},loadScriptNode="undefined"==typeof ENV_TARGET||"web"!==ENV_TARGET?(e,t)=>new Promise((o,n)=>{createScriptNode(e,(e,a)=>{if(e)n(e);else{var s,r;const e=(null==t||null==(s=t.attrs)?void 0:s.globalName)||`__FEDERATION_${null==t||null==(r=t.attrs)?void 0:r.name}:custom__`,n=globalThis[e]=a;o(n)}},t.attrs,t.loaderHook)}):(e,t)=>{throw new Error("loadScriptNode is disabled in non-Node.js environment")},esmModuleCache=new Map;async function loadModule(e,t){if(esmModuleCache.has(e))return esmModuleCache.get(e);const{fetch:o,vm:n}=t,a=await o(e),s=await a.text(),r=new n.SourceTextModule(s,{importModuleDynamically:async(o,n)=>loadModule(new URL(o,e).href,t)});return esmModuleCache.set(e,r),await r.link(async o=>{const n=new URL(o,e).href;return await loadModule(n,t)}),r}function normalizeOptions(e,t,o){return function(n){if(!1===n)return!1;if(void 0===n)return!!e&&t;if(!0===n)return t;if(n&&"object"==typeof n)return(0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({},t,n);throw new Error(`Unexpected type for \`${o}\`, expect boolean/undefined/object, got: ${typeof n}`)}}const createModuleFederationConfig=e=>e},831:(e,t,o)=>{var n={};o.r(n),o.d(n,{ActionEdit:()=>vl,ActionItem:()=>Rr,ActionsLib:()=>Mr,AudioControl:()=>Qa,BoolEdit:()=>Ta,Buttons:()=>Yn,CustomInput:()=>Un,DimensionsEdit:()=>kr,EditColor:()=>zs,ElementView:()=>qn,EulerBlock:()=>bs,ExpandedButton:()=>en,ExtMenu:()=>Pn,FileSelect:()=>Qs,Float:()=>qa,FloatBlock:()=>os,FontSize:()=>Br,Icon:()=>an,ImageView:()=>Ks,Int:()=>ja,ItemsLib:()=>Qr,Label:()=>lr,LabelEdit:()=>Ds,LoginForm:()=>Yl,Modal:()=>un,PopupList:()=>fn,ProjectItem:()=>El,QuaternionBlock:()=>ws,RadioButton:()=>na,SearchFilter:()=>ca,SectionSelect:()=>ar,Selectable:()=>Na,ShadowEdit:()=>ur,SimpleButton:()=>bn,SlideBlock:()=>pa,Spinner:()=>Vn,TextColorEdit:()=>_r,TextEdit:()=>Cs,Toast:()=>Tn,Toasts:()=>Bn,ToggleButton:()=>_n,TransformEdit:()=>Ls,TreeLi:()=>ga,TwoSideBool:()=>er,UILabel:()=>Jl,V3:()=>is,V3block:()=>ms,confirmform:()=>Dl,params:()=>Fa,queryform:()=>Cl,vlist:()=>$a});var a={};o.r(a),o.d(a,{actions:()=>Tc,app:()=>Id,assets:()=>Cd,engine:()=>sc,inspector:()=>jd,menu:()=>Ud,modal:()=>ui,modules:()=>_i,project:()=>qi,projects:()=>Xd,selection:()=>Qd,slides:()=>Zi,storage:()=>op,templates:()=>$p,toasts:()=>ci,ui:()=>Ap});var s=o(15);const r={class:"app-container canvas-container"},l={class:"workspace"},i={id:"editorcanvas",ref:"editorcanvas"},c={id:"playcanvas",ref:"playcanvas"},d={id:"playui",ref:"playui"},p={key:0,class:"splash"},u={class:"container"},m={class:"topline"},h={class:"title"},f={class:"info"},v=["onClick"],g={key:0},y={class:"element"},b=["innerHTML"],k=["onClick"],E={key:0},w={class:"panel-container"},_={class:"panel"},N={class:"header"},S={class:"content"},V={class:"footer"},C={methods:{closeModal(){this.$app.project.assets[1].url="model|assets/hex.glb"}},props:{header:{type:Object,default:{label:""}},footer:{type:Object,default:{}}},data:()=>({visible:{heirarhy:!0}})};var x=o(262);const B=(0,x.A)(C,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",w,[(0,s.createElementVNode)("div",_,[(0,s.createElementVNode)("div",N,[(0,s.renderSlot)(e.$slots,"header")]),(0,s.createElementVNode)("div",S,[(0,s.renderSlot)(e.$slots,"default")]),(0,s.createElementVNode)("div",V,[(0,s.renderSlot)(e.$slots,"footer")])])])}]]),$={class:"slide-scroller",ref:"scroller"},I=["onClick","onDragstart","onDrop"],D={class:"title"},T=["src"],A=["src"],M={class:"overflow"},O=["src"],j={class:"overflow"},P=o.p+"assets/3d592ccd944e1f3ef7b0.png",R={props:{slides:{type:Array,required:!0},slide:{type:Object}},data:()=>({slideData:{name:{label:"Имя",value:""}},translateX:0,draggedIndex:null,cardbg:P}),watch:{slide(){this.centerSelectedImage()},slides(){this.slides.sort((e,t)=>e.index-t.index),this.centerSelectedImage()}},mounted(){this.slides.sort((e,t)=>e.index-t.index),this.centerSelectedImage(),this.observer=new ResizeObserver(this.centerSelectedImage.bind(this)),this.observer.observe(this.$refs.scroller)},beforeUnmount(){this.observer.disconnect()},methods:{onDragStart(e){this.draggedIndex=e},async onDrop(e){if(null===this.draggedIndex||this.draggedIndex===e)return;const t=this.slides.splice(this.draggedIndex,1)[0];this.slides.splice(e,0,t);const o=Math.min(this.draggedIndex,e),n=Math.max(this.draggedIndex,e);for(let e=o;e<=n;e++){const t=this.slides[e];t.index=e,await this.$app.slides.save(t)}this.draggedIndex=null,this.$nextTick(this.centerSelectedImage)},onScroll(e){e.deltaY>0?this.$app.slides.next():e.deltaY<0&&this.$app.slides.back()},addSlide(){const e=(0,s.reactive)({title:"Adding a slide",text:"Specify the slide title ",answer:""}),t=(0,s.reactive)({label:"Create",class:"primary",disabled:e.answer.length<1,callback:async t=>{const o=await this.$app.slides.add({name:e.answer});this.$app.toasts.add({message:`Slide ${o.name} added`}),this.selectSlide(o),this.centerSelectedImage()}});this.$app.modal.queryText(e,[t],o=>{e.answer=o,t.disabled=e.answer.length<1})},removeSlide(){this.$app.modal.open({header:{value:"Delete slide",handler:()=>{this.$app.modal.close()}},content:{},footer:{buttons:[{label:"Delete",class:"secondary",handler:async()=>{this.$app.modal.close(),this.$app.slides.remove()}},{label:"Cancel",class:"primary",handler:async()=>{this.$app.modal.close()}}]}})},selectSlide(e){this.$app.slides.goto(e.uid)},centerSelectedImage(){this.$nextTick(()=>{const e=this.$refs.scroller.offsetWidth,t=this.$refs.scroller.querySelector(".slide-item.selected");if(t){const o=t.offsetWidth,n=t.offsetLeft;this.translateX=-(n-e/2+o/2)}else this.translateX=.5*e})}}},L=(0,x.A)(R,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon"),i=(0,s.resolveDirective)("tooltip");return(0,s.openBlock)(),(0,s.createElementBlock)("div",$,[(0,s.createElementVNode)("div",{class:"slide-container",onWheelPassive:t[3]||(t[3]=(...e)=>r.onScroll&&r.onScroll(...e)),style:(0,s.normalizeStyle)({transform:`translateX(${a.translateX}px)`})},[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(o.slides,(e,n)=>((0,s.openBlock)(),(0,s.createElementBlock)("div",{key:n,class:(0,s.normalizeClass)(["slide-item",{selected:e===o.slide}]),onClick:t=>r.selectSlide(e),draggable:"true",onDragstart:e=>r.onDragStart(n),onDragover:t[0]||(t[0]=(0,s.withModifiers)(()=>{},["prevent"])),onDrop:e=>r.onDrop(n)},[(0,s.createElementVNode)("div",D,(0,s.toDisplayString)(e.name),1),(0,s.createElementVNode)("img",{src:a.cardbg,alt:"Image"},null,8,T)],42,I))),128)),(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("div",{class:"slide-item",onClick:t[1]||(t[1]=e=>r.addSlide())},[(0,s.createElementVNode)("img",{src:a.cardbg,alt:"Image"},null,8,A),(0,s.createElementVNode)("div",M,[(0,s.createVNode)(l,{value:"plus",size:"1em"})])])),[[i,"Add slide"]]),(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("div",{class:"slide-item",onClick:t[2]||(t[2]=e=>r.removeSlide())},[(0,s.createElementVNode)("img",{src:a.cardbg,alt:"Image"},null,8,O),(0,s.createElementVNode)("div",j,[(0,s.createVNode)(l,{value:"bin",size:"1em"})])])),[[i,"Remove slide"]])],36)],512)}],["__scopeId","data-v-c5bb29ca"]]),F={class:"panel-container"},U={class:"panel"},z={key:0,class:"content"},H={class:"elements"},q={data:()=>({visible:!1})},G=(0,x.A)(q,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",F,[(0,s.createElementVNode)("div",U,[(0,s.createElementVNode)("div",{onClick:t[0]||(t[0]=e=>a.visible=!a.visible),class:"header"},"Hierarhy"),a.visible?((0,s.openBlock)(),(0,s.createElementBlock)("div",z,[(0,s.createElementVNode)("div",H,[(0,s.renderSlot)(e.$slots,"default",{},void 0,!0)])])):(0,s.createCommentVNode)("v-if",!0)])])}],["__scopeId","data-v-e71891a0"]]),W={key:0,class:"element"},K=["onClick"],Y={key:1,class:"label"},X={class:"collapsible-panel"},J={class:"panel-header"},Q={key:1,class:"toggle-icon"},Z={class:"header-content"},ee={class:"panel-content"},te={__name:"inspectorpanel",props:{label:{type:String,required:!0},tooltip:{type:String,default:""},stat:{type:Boolean,default:!1}},setup(e){const t=(0,s.useSlots)(),o=(0,s.ref)(!1),n=(0,s.ref)(null),a=()=>{t.content&&(o.value=!o.value)};return(r,l)=>{const i=(0,s.resolveDirective)("tooltip");return(0,s.openBlock)(),(0,s.createElementBlock)("div",X,[(0,s.createElementVNode)("div",J,[(0,s.unref)(t).content?((0,s.openBlock)(),(0,s.createElementBlock)("span",{key:0,onClick:a,class:(0,s.normalizeClass)(["toggle-icon",{open:o.value}])},"▼",2)):((0,s.openBlock)(),(0,s.createElementBlock)("span",Q)),(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("div",Z,[(0,s.createElementVNode)("span",{onClick:a,class:"label"},(0,s.toDisplayString)(e.label),1),(0,s.createVNode)(s.Transition,{name:"fade"},{default:(0,s.withCtx)(()=>[(0,s.renderSlot)(r.$slots,"head",{label:e.label},()=>[(0,s.withDirectives)((0,s.createElementVNode)("div",{ref_key:"panelHeader",ref:n},null,512),[[s.vShow,!o.value]])])]),_:3})])),[[i,e.tooltip]]),(0,s.renderSlot)(r.$slots,"icons",{stat:e.stat})]),(0,s.createVNode)(s.Transition,{name:"slide",persisted:""},{default:(0,s.withCtx)(()=>[(0,s.withDirectives)((0,s.createElementVNode)("div",ee,[(0,s.renderSlot)(r.$slots,"content")],512),[[s.vShow,o.value]])]),_:3})])}}},oe=(0,x.A)(te,[["__scopeId","data-v-11caa10e"]]),ne={style:{display:"grid","grid-template-columns":"96px 1fr"}},ae=["value"],se={key:1},re={name:"ModelTypes",data:()=>({types:["model","camera","chart3d"]}),props:{selected:{type:Object}}},le=(0,x.A)(re,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",ne,[t[1]||(t[1]=(0,s.createElementVNode)("div",null,"Тип:",-1)),a.types.includes(o.selected.type)?(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("select",{key:0,class:"typeslist","onUpdate:modelValue":t[0]||(t[0]=e=>o.selected.type=e)},[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(a.types,e=>((0,s.openBlock)(),(0,s.createElementBlock)("option",{value:e},(0,s.toDisplayString)(e),9,ae))),256))],512)),[[s.vModelSelect,o.selected.type]]):((0,s.openBlock)(),(0,s.createElementBlock)("div",se,(0,s.toDisplayString)(o.selected.type),1))])}]]),ie={style:{display:"flex","flex-direction":"column"}},ce={style:{display:"flex","justify-content":"center","margin-top":"10px"}},de={class:"assetblock"},pe={key:0,class:"short"},ue={class:"short-text"},me={key:0,class:"assetcontent"},he={class:"assetrow"},fe={class:"assetrow"},ve={name:"AssetView",props:{asset:{type:Object},label:{type:String}},mounted(){},data:()=>({view:!0}),computed:{src(){return this.$app.assets.list.find(e=>e.uid===this.asset.uid)},types(){return this.$app.assets.types}}},ge=(0,x.A)(ve,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon"),i=(0,s.resolveDirective)("tooltip");return(0,s.openBlock)(),(0,s.createElementBlock)("div",de,[(0,s.createElementVNode)("div",{onClick:t[0]||(t[0]=e=>a.view=!a.view),class:"title"},[(0,s.createCommentVNode)(' <div class="label">{{ label }}</div> '),a.view?(0,s.createCommentVNode)("v-if",!0):((0,s.openBlock)(),(0,s.createElementBlock)("div",pe,[(0,s.createTextVNode)((0,s.toDisplayString)(r.src.uid)+" : "+(0,s.toDisplayString)(r.src.type)+" : ",1),(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("div",ue,[(0,s.createTextVNode)((0,s.toDisplayString)(r.src.url),1)])),[[i,r.src.url]])]))]),a.view?((0,s.openBlock)(),(0,s.createElementBlock)("div",me,[(0,s.createElementVNode)("div",he,[(0,s.createElementVNode)("div",null,(0,s.toDisplayString)(r.src.type)+" : "+(0,s.toDisplayString)(r.src.name||r.src.uid),1),(0,s.createElementVNode)("div",null,[(0,s.createElementVNode)("button",{onClick:t[1]||(t[1]=t=>e.$emit("remove",o.asset))},[(0,s.createVNode)(l,{value:"bin",size:"1em"})])])]),(0,s.createCommentVNode)(' <div class="assetrow">\r\n                <div>URL:</div>\r\n                <div class="rowcontent">\r\n                    <LabelEdit :value="src.url"></LabelEdit>\r\n                </div>\r\n            </div> '),(0,s.createCommentVNode)(' <div class="assetrow" v-for="(param, key) in src.parameters">\r\n            <div>{{ key }}</div><div>{{ param }}</div>\r\n        </div> '),((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(o.asset.parameters,(e,o)=>((0,s.openBlock)(),(0,s.createElementBlock)("div",fe,[(0,s.createElementVNode)("div",null,(0,s.toDisplayString)(o),1),t[2]||(t[2]=(0,s.createElementVNode)("div",{class:"cell"},[(0,s.createCommentVNode)(' <LabelEdit @update:value="asset.parameters[key] = $event; $emit(\'changed\')" :value="param">\r\n                    </LabelEdit> ')],-1))]))),256))])):(0,s.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-eca41270"]]),ye={name:"AssetsView",data:()=>({selectedAsset:null,assetsData:{offtypes:["hdr"]}}),props:{modelValue:{type:Object},value:{type:Object}},methods:{async removeAsset(e){await this.$app.elements.removeAsset(this.value,e),this.$app.toasts.add({message:"Ресурс удален из модели"})},saveProp(){this.$app.toasts.add({message:"Параметр ресурса в элементе изменен"}),this.$app.engine.getManager().UpdateElement(this.value.path,{assets:this.value.assets})},async selectAsset(){const e=await this.$app.assets.selectAsset(["hdr","texture"]);if(e){const t=this.$app.engine.getManager("AssetsManager").GetAsset(e.uid);console.log(this.value),console.log(t),this.$app.assets.setAsset(this.value,t),this.$app.toasts.add({message:"Ресурс добавлен в модель"})}}},computed:{list(){return this.value?.data?.assets||this.value?.assets||[]}},components:{AssetView:ge}},be=(0,x.A)(ye,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("AssetView"),i=(0,s.resolveComponent)("icon"),c=(0,s.resolveDirective)("tooltip");return(0,s.openBlock)(),(0,s.createElementBlock)("div",ie,[t[1]||(t[1]=(0,s.createElementVNode)("div",null,"Ресурсы",-1)),((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(r.list,(e,t)=>((0,s.openBlock)(),(0,s.createBlock)(l,{asset:e,key:t,onRemove:r.removeAsset,onChanged:r.saveProp},null,8,["asset","onRemove","onChanged"]))),128)),(0,s.createElementVNode)("div",ce,[(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("button",{class:"button normal",onClick:t[0]||(t[0]=(...e)=>r.selectAsset&&r.selectAsset(...e))},[(0,s.createVNode)(i,{value:"stack",size:"0.75em"})])),[[c,"Ресурсы"]])])])}]]),ke={class:"scenetools"},Ee={class:"camera-selector"};var we=o(875);const _e={name:"SceneTools",data:()=>({}),computed:{selectedCamera:{get(){return this.$app.slides.actived?.camera?.path||null},set(e){this.$app.slides.actived.camera.path=e,this.$app.slides.save()}},slide(){return this.$app.slides.actived},cameras(){return this.$app.project.findObjectsByType(we.Camera)||[]}},mounted(){},methods:{saveSlide(){this.$app.slides.save(this.slide)},onCameraChange(){console.log("change");try{if(this.slide.camera?.path&&this.slide.camera?.path!==this.$app.engine.Project.Camera?.path){const e=this.slide.camera.path.split("."),t=this.$app.project.find(e);this.$app.engine.Project.SetCamera(t),t.updateProjectionMatrix()}}catch(e){console.warn(e.message)}}}},Ne=(0,x.A)(_e,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("EditColor");return(0,s.openBlock)(),(0,s.createElementBlock)("div",Ee,[(0,s.createElementVNode)("div",null,[t[0]||(t[0]=(0,s.createElementVNode)("div",null," Background ",-1)),(0,s.createElementVNode)("div",null,[(0,s.createVNode)(l)])])])}],["__scopeId","data-v-167ce3c1"]]),Se={class:"camera-selector"},Ve={key:0},Ce={key:0},xe=["value"],Be={key:1},$e={style:{display:"block",width:"100%"}},Ie={class:"overleyicon"},De={key:1,style:{display:"flex","justify-content":"center"}},Te={name:"AssetView",props:{asset:{type:Object}},methods:{async showLib(){const e=await this.$app.assets.selectAsset(["hdr"]);this.$emit("setasset",e)}}},Ae=(0,x.A)(Te,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveDirective)("tooltip");return(0,s.openBlock)(),(0,s.createElementBlock)(s.Fragment,null,[(0,s.createCommentVNode)("assethdr"),(0,s.createElementVNode)("div",$e,[(0,s.createElementVNode)("div",Ie,[o.asset?(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("div",{key:0,onClick:t[0]||(t[0]=(...e)=>r.showLib&&r.showLib(...e)),class:"text"},[(0,s.createTextVNode)((0,s.toDisplayString)(o.asset.name||o.asset.uid),1)])),[[l,o.asset.url]]):((0,s.openBlock)(),(0,s.createElementBlock)("div",De,[(0,s.createElementVNode)("button",{onClick:t[1]||(t[1]=(...e)=>r.showLib&&r.showLib(...e))},"Select")]))])]),(0,s.createCommentVNode)("//assethdr")],2112)}]]),Me={name:"CameraSelector",props:{slide:{type:Object}},data:()=>({}),computed:{bgColor:{get(){return this.slide.background.color},set(e){this.slide.background.value=e.getStyle(),this.slide.background.setValue("color",this.slide.background.value),this.$app.slides.save(),this.$app.engine.getManager().Scene.background=e}},bgHdr:{get(){return this.slide.background.hdr}},selectedCamera:{get(){return this.slide.camera?.path||null},set(e){this.slide.camera.path=e,this.$app.slides.save()}},cameras(){return this.$app.project.findObjectsByType(we.Camera)||[]}},mounted(){},methods:{save(){this.$app.slides.save(this.slide)},onBgChange(e){this.slide.background.setValue(e,this.slide.background[e]),this.$app.slides.save()},async onAssetChange(e){console.log(e.resource),this.slide.background.setValue("hdr",e.resource),this.slide.background.value=e.uid;const t=await this.$app.engine.getAssetsManager().FindAsset(e.uid);this.$app.engine.getManager().Scene.background=t.resource},saveSlide(){this.$app.slides.save(this.slide)},onCameraChange(){console.log("change");try{if(this.slide.camera?.path&&this.slide.camera?.path!==this.$app.engine.Project.Camera?.path){const e=this.slide.camera.path.split("."),t=this.$app.project.find(e);this.$app.engine.Project.SetCamera(t),t.updateProjectionMatrix()}}catch(e){console.warn(e.message)}}},components:{assethdr:Ae}},Oe=(0,x.A)(Me,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("LabelEdit"),i=(0,s.resolveComponent)("ActionsList");return(0,s.openBlock)(),(0,s.createElementBlock)("div",Se,[o.slide?((0,s.openBlock)(),(0,s.createElementBlock)("div",Ve,[(0,s.createElementVNode)("div",null,[t[3]||(t[3]=(0,s.createElementVNode)("div",null,"Name:",-1)),(0,s.createVNode)(l,{modelValue:o.slide.name,"onUpdate:modelValue":[t[0]||(t[0]=e=>o.slide.name=e),r.save]},null,8,["modelValue","onUpdate:modelValue"])]),r.cameras.length>0?((0,s.openBlock)(),(0,s.createElementBlock)("div",Ce,[t[5]||(t[5]=(0,s.createElementVNode)("label",null,"Camera:",-1)),(0,s.withDirectives)((0,s.createElementVNode)("select",{"onUpdate:modelValue":t[1]||(t[1]=e=>r.selectedCamera=e),onChange:t[2]||(t[2]=(...e)=>r.onCameraChange&&r.onCameraChange(...e))},[t[4]||(t[4]=(0,s.createElementVNode)("option",{value:null},"No",-1)),((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(r.cameras,e=>((0,s.openBlock)(),(0,s.createElementBlock)("option",{key:e.path,value:e.path}," ("+(0,s.toDisplayString)(e.type)+") "+(0,s.toDisplayString)(e.name||`Camera ${e.uid}`),9,xe))),128))],544),[[s.vModelSelect,r.selectedCamera]])])):((0,s.openBlock)(),(0,s.createElementBlock)("div",Be," There are no cameras available in the project. ")),(0,s.createElementVNode)("div",null,[t[6]||(t[6]=(0,s.createElementVNode)("div",null,"Slide Events:",-1)),(0,s.createVNode)(i,{"onUpdate:target":r.saveSlide,onSave:r.saveSlide,target:o.slide},null,8,["onUpdate:target","onSave","target"])]),(0,s.createCommentVNode)(' <div>\r\n                <div>Background</div>\r\n                <div>{{ slide.background.type }}\r\n                    <RadioButton v-model="slide.background.type" @change="onBgChange"\r\n                        :options="[{ value: \'color\', label: \'Color\' }, { value: \'hdr\', label: \'HDR\' }, { value: \'none\', label: \'No\' }]"\r\n                        name="array-group" />\r\n                </div>\r\n                <EditColor v-if="slide.background?.type === \'color\'" v-model="bgColor"></EditColor>\r\n                <assethdr v-if="slide.background?.type === \'hdr\'" v-model="bgHdr" @setasset="onAssetChange">\r\n                </assethdr>\r\n            </div> ')])):(0,s.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-2623b5e9"]]),je={data:()=>({asset:{uid:"hdrscene"},view:!0}),name:"SceneTools",computed:{slides(){return this.$app.slides.children},slide(){return this.$app.slides.actived}},components:{slideTools:Oe,InspectorPanel:oe,scenetools:Ne},methods:{removeSlide(){this.$app.slides.remove()}}},Pe=(0,x.A)(je,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("slideTools"),i=(0,s.resolveComponent)("InspectorPanel");return(0,s.openBlock)(),(0,s.createElementBlock)("div",ke,[(0,s.createVNode)(i,{label:"Slide Options"},(0,s.createSlots)({_:2},[r.slide?{name:"content",fn:(0,s.withCtx)(()=>[(0,s.createVNode)(l,{slide:r.slide},null,8,["slide"])]),key:"0"}:void 0]),1024)])}]]),Re={methods:{getState(){return this.$app.project.getState(this.selected,this.slide)},getProp(e){const t=e.prop.split(".");let o=t[0],n=this.selected;for(let e=0;e<t.length-1;e++)n=n[t[e]],o=t[e+1];return n[o]},async saveElement(e){e.onupdate&&await e.onupdate(this.selected,null,null,this.slide),await this.$app.project.save(this.selected)},async setTargetProperty(e,t,o){e.onupdate&&(await e.onupdate(this.selected,t,o,this.slide),!this.selected.isElement)||("state"in e&&!0!==e.state?this.selected[t]=o?.encode?o.encode():o:this.getState()[t]=o?.encode?o.encode():o,this.selected.isElement?await this.$app.project.save(this.selected):this.selected.isAsset&&await this.$app.assets.save(this.selected))},async onComponentChanged(e,t,o,n){this.selected[t]=o,this.selected.isElement?this.setTargetProperty(e,t,o,n):e.onupdate&&await e.onupdate(this.selected,t,o,this.slide)},async onCleanStateValue(e,t){e.onclean?await e.onclean(this.selected,t,e,this.slide):t in this.getState()&&(delete this.getState()[t],await this.$app.project.save(this.selected))}},computed:{selected(){return this.$app.selection.selected},selectedUID(){return this.$app.selection.uid},blocks(){return console.log(this.selected.getTypes()),[{label:"Name",content:{component:"LabelEdit",prop:"name",state:!1},head:{component:"Label",prop:"name"}},{label:"Type",readonly:!0,head:{component:"Label",prop:"type"}},...this.$app.inspector.blocksFor(this.selected.getTypes())]},slide(){return this.$app.slides.actived?.uid}},watch:{selected(e){e&&e.restore&&e.restore()}},components:{InspectorPanel:oe,modeltypes:le,assetsview:be,ViewPanel:B,SceneTools:Pe}},Le=(0,x.A)(Re,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon"),i=(0,s.resolveComponent)("InspectorPanel"),c=(0,s.resolveComponent)("SceneTools"),d=(0,s.resolveComponent)("ViewPanel"),p=(0,s.resolveDirective)("tooltip");return(0,s.openBlock)(),(0,s.createElementBlock)(s.Fragment,null,[(0,s.createVNode)(d,{class:"inspector",header:{label:"Инспектор"}},{footer:(0,s.withCtx)(()=>[(0,s.createVNode)(c)]),default:(0,s.withCtx)(()=>[r.selectedUID?((0,s.openBlock)(),(0,s.createElementBlock)("div",W,[(0,s.createCommentVNode)(" <div>{{ selected.paths.join('->') }}</div> "),(0,s.renderSlot)(e.$slots,"default",{},()=>[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(r.blocks,(e,t)=>((0,s.openBlock)(),(0,s.createBlock)(i,{label:e.label,tooltip:e.tooltip,stat:e.state,key:e.label},(0,s.createSlots)({_:2},[e.readonly?void 0:{name:"icons",fn:(0,s.withCtx)(({stat:t})=>[e.nonstate?(0,s.createCommentVNode)("v-if",!0):(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("span",{key:0,onClick:t=>r.onCleanStateValue(e.head||e.content,e.head?e.head.prop:e.content.prop),class:"remove-icon"},[(0,s.createVNode)(l,{value:"bin"})],8,K)),[[p,"Очистить значение в слайде"]])]),key:"0"},e.head?{name:"head",fn:(0,s.withCtx)(()=>[((0,s.openBlock)(),(0,s.createBlock)((0,s.resolveDynamicComponent)(e.head.component),(0,s.mergeProps)({ref_for:!0},e.head.props,{modelValue:r.selected[e.head.prop],"onUpdate:modelValue":[t=>r.selected[e.head.prop]=t,(...t)=>r.setTargetProperty(e.head,e.head.prop,...t)],value:r.selected,property:e.head,target:e.head.state?r.getState():r.selected,onClean:(...t)=>r.onCleanStateValue(e.head,...t),onSave:t=>r.saveElement(e.head),"onUpdate:target":(...t)=>r.setTargetProperty(e.head,...t),"onUpdate:value":(...t)=>r.onComponentChanged(e.head,e.head.prop,...t)},(0,s.toHandlers)(e.head.events||{})),null,16,["modelValue","onUpdate:modelValue","value","property","target","onClean","onSave","onUpdate:target","onUpdate:value"]))]),key:"1"}:void 0,e.content?{name:"content",fn:(0,s.withCtx)(()=>[((0,s.openBlock)(),(0,s.createBlock)((0,s.resolveDynamicComponent)(e.content.component),(0,s.mergeProps)({class:"blockcomponent"},{ref_for:!0},e.content.props,{value:r.selected,modelValue:r.selected[e.content.prop],"onUpdate:modelValue":[t=>r.selected[e.content.prop]=t,(...t)=>r.setTargetProperty(e.content,e.content.prop,...t)],property:e.content,target:e.content.state?r.getState():r.selected,onClean:(...t)=>r.onCleanStateValue(e.content,...t),onSave:t=>r.saveElement(e.content),"onUpdate:target":(...t)=>r.setTargetProperty(e.content,...t),"onUpdate:value":(...t)=>r.onComponentChanged(e.content,e.content.prop,...t)},(0,s.toHandlers)(e.content.events||{})),null,16,["value","modelValue","onUpdate:modelValue","property","target","onClean","onSave","onUpdate:target","onUpdate:value"]))]),key:"2"}:void 0]),1032,["label","tooltip","stat"]))),128))])])):((0,s.openBlock)(),(0,s.createElementBlock)("div",Y," Select an item or state "))]),_:3}),(0,s.createCommentVNode)(' <div class="panel-container">\r\n        <div class="panel">\r\n            <div class="header">Inspector</div>\r\n            <div class="content">\r\n                \r\n            </div>\r\n            <div class="footer">\r\n\r\n            </div>\r\n        </div>\r\n    </div> ')],2112)}]]),Fe={class:"hierarhy-view"},Ue={class:"title"},ze={class:"treeicon"},He=["draggable","droppable"],qe={class:"roottree"},Ge=["draggable"],We={class:"tree-node-content"},Ke={class:"selector"},Ye=["checked"],Xe={key:0,class:"prepender"},Je=["title"],Qe={key:1,class:"appender"},Ze={key:0,class:"children"},et={key:1};function tt(e,t){for(let o=0;o<e.length;o++)e[o].isSelected=t,e[o].children&&tt(e[o].children,t)}const ot={name:"TreeNode",props:{node:{type:Object,required:!0},selector:{type:Boolean,default:!0},index:{type:Number},focused:{type:Boolean,default:!1},childsFiled:{type:String,default:"childrens"},filter:{type:Function},draggable:{type:Boolean,default:!0},droppable:{type:Boolean,default:!0}},computed:{list(){return this.filter?this.filter(this.node[this.childsFiled]):this.node[this.childsFiled]}},data:()=>({expanded:{},childloaded:{},isLoading:!1,selectChangeEvent:(0,s.inject)("selectChangeEvent",null),clickNodeEvent:(0,s.inject)("clickNodeEvent",null),dropNodeEvent:(0,s.inject)("nodeDropEvent",null),isDragOver:!1}),methods:{onDragStart(e){this.$app.app.draggedNode=this.node,e.dataTransfer.effectAllowed="copy"},onDragOver(e){e.dataTransfer.dropEffect="copy",this.isDragOver=!0},onDragEnter(e){this.isDragOver=!0,!this.expanded[this.node.uid]&&this.node[this.childsFiled]?.length&&this.toggleExpand()},onDragLeave(){this.isDragOver=!1},onDrop(e){this.isDragOver=!1,this.dropNodeEvent({target:this.node,source:this.$app.app.draggedNode})},async toggleExpand(){this.node[this.childsFiled]&&0!==this.node[this.childsFiled].length&&(this.expanded[this.node.uid]=!this.expanded[this.node.uid],this.expanded[this.node.uid]&&!this.childloaded[this.node.uid]&&await this.loadChildren(),this.$emit("updateExpanded",this.node))},async loadChildren(){this.childloaded[this.node.uid]=!0},onChildSelectChange(e){},onCheckboxChange(e){e.isSelected=!e.isSelected,e[this.childsFiled]?.length&&tt(e[this.childsFiled],e.isSelected),this.selectChangeEvent(this.node),this.$emit("changeSelection",this.node)},selectNode(e){this.clickNodeEvent(this.node)}}},nt={components:{TreeNode:(0,x.A)(ot,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("TreeNode",!0);return(0,s.openBlock)(),(0,s.createElementBlock)("li",{class:(0,s.normalizeClass)(["tree-node",{"drag-over":a.isDragOver}]),draggable:o.draggable,onDragstart:t[3]||(t[3]=(0,s.withModifiers)(e=>o.draggable&&r.onDragStart(e),["stop"])),onDragover:t[4]||(t[4]=(0,s.withModifiers)((...e)=>r.onDragOver&&r.onDragOver(...e),["prevent"])),onDragenter:t[5]||(t[5]=(0,s.withModifiers)((...e)=>r.onDragEnter&&r.onDragEnter(...e),["prevent"])),onDragleave:t[6]||(t[6]=(...e)=>r.onDragLeave&&r.onDragLeave(...e)),onDrop:t[7]||(t[7]=(0,s.withModifiers)((...e)=>r.onDrop&&r.onDrop(...e),["prevent","stop"]))},[(0,s.createElementVNode)("div",We,[(0,s.createElementVNode)("span",{class:"collapser",onClick:t[0]||(t[0]=(...e)=>r.toggleExpand&&r.toggleExpand(...e))},[r.list?.length?(0,s.renderSlot)(e.$slots,"icon",{key:0,node:o.node},()=>[(0,s.createTextVNode)((0,s.toDisplayString)(a.expanded[o.node.uid]?"▼":"▶"),1)],!0):(0,s.createCommentVNode)("v-if",!0)]),(0,s.createElementVNode)("span",Ke,[o.selector?(0,s.renderSlot)(e.$slots,"checkbox",{key:0},()=>[(0,s.createElementVNode)("input",{ref:"checkedInput",type:"checkbox",onChange:t[1]||(t[1]=e=>r.onCheckboxChange(o.node)),checked:o.node.isSelected},null,40,Ye)],!0):(0,s.createCommentVNode)("v-if",!0)]),e.$slots.prepend?((0,s.openBlock)(),(0,s.createElementBlock)("span",Xe,[(0,s.renderSlot)(e.$slots,"prepend",{node:o.node},void 0,!0)])):(0,s.createCommentVNode)("v-if",!0),(0,s.createElementVNode)("span",{class:"labeler",title:o.node.uid,onClick:t[2]||(t[2]=(...e)=>r.selectNode&&r.selectNode(...e))},[(0,s.renderSlot)(e.$slots,"label",{node:o.node},()=>[(0,s.createElementVNode)("span",null,(0,s.toDisplayString)(o.node.uid)+"|",1)],!0)],8,Je),e.$slots.append?((0,s.openBlock)(),(0,s.createElementBlock)("span",Qe,[(0,s.renderSlot)(e.$slots,"append",{node:o.node,index:o.index},void 0,!0)])):(0,s.createCommentVNode)("v-if",!0)]),a.expanded[o.node.uid]&&Array.isArray(r.list)&&r.list.length?((0,s.openBlock)(),(0,s.createElementBlock)("ul",Ze,[a.childloaded[o.node.uid]?((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,{key:0},(0,s.renderList)(r.list,t=>((0,s.openBlock)(),(0,s.createBlock)(l,{draggable:o.draggable,onChangeSelection:r.onChildSelectChange,filter:o.filter,selector:o.selector,focused:t.focused,key:t.uid,node:t,childsFiled:o.childsFiled},(0,s.createSlots)({_:2},[(0,s.renderList)(e.$slots,(t,o)=>({name:o,fn:(0,s.withCtx)(t=>[(0,s.renderSlot)(e.$slots,o,(0,s.mergeProps)({ref_for:!0},t),void 0,!0)])}))]),1032,["draggable","onChangeSelection","filter","selector","focused","node","childsFiled"]))),128)):((0,s.openBlock)(),(0,s.createElementBlock)("div",et," load... "))])):(0,s.createCommentVNode)("v-if",!0)],42,Ge)}],["__scopeId","data-v-ec22d48c"]])},computed:{list(){return this.filter?this.filter(this.tree):this.tree}},data:()=>({expandeds:{},isDragOver:!1}),props:{tree:{type:Array,required:!0},selector:{type:Boolean,default:!1},focused:{type:Boolean,default:!1},childsFiled:{type:String,default:"children"},filter:{type:Function},draggable:{type:Boolean,default:!1},droppable:{type:Boolean,default:!1}},setup(e,{slots:t,emit:o}){(0,s.provide)("clickNodeEvent",e=>{o("clickNode",e)}),(0,s.provide)("selectChangeEvent",e=>{o("changeSelect",e)}),(0,s.provide)("nodeDropEvent",e=>{o("node-drop",e)})},methods:{onDragOver(e){e.dataTransfer.dropEffect="copy",this.isDragOver=!0},onDragEnter(e){this.isDragOver=!0},onDragLeave(){this.isDragOver=!1},onDrop(e){this.isDragOver=!1,this.$app?.app?.draggedNode&&(console.log(this.$app?.app?.draggedNode),this.$emit("node-drop",{target:null,source:this.$app.app.draggedNode}))},onUpdateExpanded(e){},findNodeByUid(e,t){for(let o of e){if(o.uid===t)return o;if(o.children){let e=this.findNodeByUid(o.children,t);if(e)return e}}return null},removeNodeFromTree(e,t){for(let o=0;o<e.length;o++){if(e[o].uid===t)return e.splice(o,1),!0;if(e[o][this.childsFiled]&&this.removeNodeFromTree(e[o][this.childsFiled],t))return!0}return!1}}},at=(0,x.A)(nt,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("TreeNode");return(0,s.openBlock)(),(0,s.createElementBlock)("div",{class:(0,s.normalizeClass)(["treecontainer",{"drag-over":a.isDragOver}]),draggable:o.draggable,droppable:o.droppable,onDrop:t[0]||(t[0]=(0,s.withModifiers)((...e)=>r.onDrop&&r.onDrop(...e),["prevent","stop"])),onDragover:t[1]||(t[1]=(0,s.withModifiers)((...e)=>r.onDragOver&&r.onDragOver(...e),["prevent"])),onDragenter:t[2]||(t[2]=(0,s.withModifiers)((...e)=>r.onDragEnter&&r.onDragEnter(...e),["prevent"])),onDragleave:t[3]||(t[3]=(...e)=>r.onDragLeave&&r.onDragLeave(...e))},[(0,s.createElementVNode)("ul",qe,[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(r.list,(t,n)=>((0,s.openBlock)(),(0,s.createBlock)(l,{key:t.uid,filter:o.filter,selector:o.selector,node:t,index:n,focused:o.focused,childsFiled:o.childsFiled,onUpdateExpanded:r.onUpdateExpanded,draggable:o.draggable,droppable:o.droppable},(0,s.createSlots)({_:2},[(0,s.renderList)(e.$slots,(t,o)=>({name:o,fn:(0,s.withCtx)(t=>[(0,s.renderSlot)(e.$slots,o,(0,s.mergeProps)({ref_for:!0},t),void 0,!0)])}))]),1032,["filter","selector","node","index","focused","childsFiled","onUpdateExpanded","draggable","droppable"]))),128))])],42,He)}],["__scopeId","data-v-48ce72d0"]]),st={name:"TreeAssets",props:{title:""},data:()=>({filtersView:!1,filterRect:{},focused:[],editform:!1,editedAsset:{},newAsset:!1,viewlib:!1,libButtons:{add:!0,save:!1}}),watch:{"assets.list"(e){console.log(e)}},computed:{tree(){return this.$app.assets.list.reduce((e,t)=>{let o=e.find(e=>e.type===t.type);return o||(o={isgroup:!0,type:t.type,children:[],uid:t.type},e.push(o)),o.children.push(t),e},[])},assets(){return this.$app.assets},selected(){return this.$app.selection.selected}},methods:{onAddClick(){this.$refs.assetsLib.addNew(),this.libButtons.save=!0,this.libButtons.add=!1},onAssetChange(e){},onSaveClick(){this.assets.updateAsset(this.current)},openLib(){(0,s.reactive)({save:!1}),this.$app.modal.open({header:{value:"Assets",handler:()=>{this.$app.modal.close(),this.viewlib=!1}},content:{},footer:{buttons:[]}}),this.viewlib=!0},onEdit(e,t){this.editedAsset[e]=t},editAsset(e){this.editedAsset=e?{...e,progress:0}:{uid:null,type:"model",name:"New asset",url:"https://",parameters:{},progress:0},this.$app.assets.editAsset(this.editedAsset)},insertAsset(e){this.$app.project.handleAsset({source:e})},onUpdateExpanded(e){},onNodeClick(e){this.$app.selection.select(e.isgroup?null:e)},onChangeSelection(){},remove(e){this.$app.modal.confirmReq((0,s.reactive)({title:"Confirm asset remove",text:`Remove asset ${e.name||e.uid} ?`}),[{label:"YES",class:"primary",callback:async()=>{this.assets.remove(e)}},{label:"NO",class:"secondary",callback:async e=>{this.$app.modal.close()}}])}},components:{TreeView:at}},rt=(0,x.A)(st,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon"),i=(0,s.resolveComponent)("TreeView"),c=(0,s.resolveDirective)("tooltip");return(0,s.openBlock)(),(0,s.createElementBlock)("div",Fe,[(0,s.createElementVNode)("div",Ue,[(0,s.createTextVNode)((0,s.toDisplayString)(o.title)+": ",1),(0,s.createCommentVNode)(' <button class="square" @click="editAsset()">\r\n        <icon value="plus" size="0.9em"></icon>\r\n      </button> '),(0,s.createCommentVNode)(' <button class="square" @click="openLib()">\r\n        <icon value="books" size="0.9em"></icon>\r\n      </button> ')]),(0,s.createVNode)(i,{childsFiled:"children",tree:r.tree,onClickNode:r.onNodeClick,onChangeSelect:r.onChangeSelection,onUpdateExpanded:r.onUpdateExpanded,draggable:!0},{append:(0,s.withCtx)(({node:e,index:t})=>[(0,s.createElementVNode)("div",ze,[(0,s.createCommentVNode)(' <icon v-if="!node.isgroup" value="target" v-tooltip="\'Find\'" size="1em" @click="$emit(\'target\', node)"></icon> '),(0,s.createCommentVNode)(' <icon v-if="!node.isgroup" value="pencil" v-tooltip="\'Редактировать\'" size="1em" @click="editAsset(node)">\r\n          </icon> '),e.isgroup?(0,s.createCommentVNode)("v-if",!0):(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createBlock)(l,{key:0,value:"dice",size:"1em",onClick:t=>r.insertAsset(e)},null,8,["onClick"])),[[c,"Insert to scene"]]),e.isgroup?(0,s.createCommentVNode)("v-if",!0):(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createBlock)(l,{key:1,value:"bin",size:"1em",onClick:t=>r.remove(e)},null,8,["onClick"])),[[c,"Delete"]])])]),label:(0,s.withCtx)(({node:o})=>[(0,s.createCommentVNode)(' <div @click="onSelectedNode" :class="{ \'focusedtree\': selected === node }"  class="label"\r\n          v-tooltip="`${node.url || node.type}`"> {{ node.name || node.uid }}</div> '),(0,s.createElementVNode)("div",{onClick:t[0]||(t[0]=(...t)=>e.onSelectedNode&&e.onSelectedNode(...t)),class:(0,s.normalizeClass)([{focusedtree:r.selected===o},"label"])},(0,s.toDisplayString)(o.name||o.uid),3)]),_:1},8,["tree","onClickNode","onChangeSelect","onUpdateExpanded"])])}],["__scopeId","data-v-a8cc45f6"]]),lt={class:"hierarhy-view"},it={class:"treeicon"},ct={class:"container"},dt={class:"block"},pt={class:"content"},ut={class:"sub-content"},mt={class:"subtitle"},ht={class:"subtitle"},ft=["value"],vt={props:{callback:{type:Function},modelValue:{type:Object,default:()=>({label:"",type:"model"})},parent:{type:Object}},computed:{name:{get(){return this.modelValue.name},set(e){this.$emit("update:modelValue",{name:e,type:this.modelValue.type})}},type:{get(){return this.modelValue.type},set(e){this.$emit("update:modelValue",{name:this.modelValue.name,type:e})}},types(){return this.$app.app.types.sort((e,t)=>e.label.localeCompare(t.label))}}},gt=(0,x.A)(vt,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",ct,[(0,s.createElementVNode)("div",dt,[(0,s.createElementVNode)("div",pt,[(0,s.createElementVNode)("div",ut,[(0,s.createElementVNode)("div",mt,[(0,s.withDirectives)((0,s.createElementVNode)("input",{type:"text",placeholder:"Name","onUpdate:modelValue":t[0]||(t[0]=e=>r.name=e)},null,512),[[s.vModelText,r.name]])]),(0,s.createElementVNode)("div",ht,[(0,s.withDirectives)((0,s.createElementVNode)("select",{class:"typeslist","onUpdate:modelValue":t[1]||(t[1]=e=>r.type=e)},[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(r.types,e=>((0,s.openBlock)(),(0,s.createElementBlock)("option",{value:e.type},(0,s.toDisplayString)(e.label),9,ft))),256))],512),[[s.vModelSelect,r.type]])])])])])])}],["__scopeId","data-v-7daecc34"]]),yt={name:"TreeElement",props:{title:""},mounted(){},data:()=>({filtersView:!1,filterRect:{},requestRemove:!1,removeData:{text:""},newElementData:{},addElementView:!1}),computed:{selected(){return this.$app.selection.selected},selection(){return this.$app.selection},tree(){return this.$app.elements.children}},methods:{filterElements:e=>e,async insertToSlide(e){e.state?this.$app.toasts.add({message:"Элемент уже добавлен в этот слайд"}):await this.$app.slides.addState(e)},deleteElement(e){this.removeData.text=`Delete ${e.name} (${e.uid}) ?`,this.$app.modal.open({header:{value:"Delete item",handler:()=>{this.$app.modal.close(),this.requestRemove=!1}},content:{},footer:{buttons:[{label:"Delete",class:"secondary",handler:async()=>{this.$app.modal.close(),this.requestRemove=!1,this.$app.elements.remove(e),this.$app.toasts.add({message:`Элемент ${e.name} удален`})}},{label:"Cancel",class:"primary",handler:async()=>{this.$app.modal.close(),this.requestRemove=!1}}]}})},onUpdateExpanded(e){},onNodeClick(e){this.$app.selection.select(e)},onChangeSelection(){},addElement(){if(this.selected){const e=this.$app.elements.findElement(this.selected.paths);this.$app.selection.select(e)}let e;this.newElementData.name="New Element",this.newElementData.uid=`Element${Date.now()}`,this.newElementData.type="Group",this.newElementData.paths=[],this.selected&&this.selected.isElement&&(e=this.selected,this.newElementData.paths.push(...this.selected.paths)),this.newElementData.paths.push(this.newElementData.uid),this.newElementData.path=this.newElementData.paths.join("."),this.newElementData.props={visible:!0},this.$app.modal.open({header:{value:`Add element ${e?" to "+e.name||0:" scene"}`,handler:()=>{this.$app.modal.close(),this.addElementView=!1}},content:{},footer:{buttons:[{label:"Add",class:"secondary",handler:async()=>{await this.$app.elements.create(this.newElementData,e),this.$app.modal.close(),this.addElementView=!1}},{label:"Cancel",class:"primary",handler:async()=>{this.$app.modal.close(),this.addElementView=!1}}]}}),this.addElementView=!0}},components:{TreeView:at,ElementAdd:gt}},bt=(0,x.A)(yt,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon"),i=(0,s.resolveComponent)("TreeView"),c=(0,s.resolveComponent)("ElementAdd"),d=(0,s.resolveDirective)("tooltip");return(0,s.openBlock)(),(0,s.createElementBlock)("div",lt,[(0,s.createElementVNode)("div",null,[(0,s.createTextVNode)((0,s.toDisplayString)(o.title)+": ",1),(0,s.createElementVNode)("button",{onClick:t[0]||(t[0]=(...e)=>r.addElement&&r.addElement(...e))},[(0,s.createVNode)(l,{value:"plus",size:"0.75em"})])]),(0,s.createVNode)(i,{filter:r.filterElements,tree:r.tree,onClickNode:r.onNodeClick,onChangeSelect:r.onChangeSelection,childsFiled:"children",onUpdateExpanded:r.onUpdateExpanded,selector:!1},{append:(0,s.withCtx)(({node:e,index:t})=>[(0,s.createElementVNode)("div",it,[(0,s.createCommentVNode)(' <icon value="target" v-tooltip="\'Фокус\'" size="1em" @click="$emit(\'target\', node)"></icon>'),(0,s.createCommentVNode)(" <icon v-tooltip=\"'Видимость'\" :value=\"node.show ? 'eye' : 'eye-blocked'\" size=\"1em\"\r\n            @click=\"node.visible = !node.visible\" :color=\"node.visible ? '#8ec58e' : '#8ec58e80'\">\r\n          </icon> "),e.parent?(0,s.createCommentVNode)("v-if",!0):(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createBlock)(l,{key:0,value:"dice",size:"1em",onClick:t=>r.insertToSlide(e),color:e.state?"#8ec58e":"#8ec58e80"},null,8,["onClick","color"])),[[d,"Add to slide"]]),(0,s.withDirectives)((0,s.createVNode)(l,{onClick:t=>r.deleteElement(e),value:"bin",size:"1em"},null,8,["onClick"]),[[d,"Remove"]]),(0,s.createCommentVNode)(' <icon v-if="index === 0" size="100%" value="bin"></icon> ')])]),label:(0,s.withCtx)(({node:e})=>[(0,s.createElementVNode)("div",{class:(0,s.normalizeClass)([{focusedtree:r.selected===e},"label"])},(0,s.toDisplayString)(e.name||e.uid),3)]),_:1},8,["filter","tree","onClickNode","onChangeSelect","onUpdateExpanded"]),a.addElementView?((0,s.openBlock)(),(0,s.createBlock)(s.Teleport,{key:0,to:".modal-content"},[(0,s.createVNode)(c,{value:a.newElementData,"onUpdate:value":t[1]||(t[1]=e=>a.newElementData=e),parent:r.selected},null,8,["value","parent"])])):(0,s.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-3eac9d53"]]),kt={class:"hierarhy-view"},Et=["onUpdate:modelValue","onChange"],wt={class:"treeicon"},_t={name:"TreeElement",props:{title:""},data:()=>({filtersView:!1,filterRect:{},requestRemove:!1,removeData:{text:""}}),computed:{project(){return this.$app.project},selected(){return this.$app.selection.selected},selection(){return this.$app.selection},tree(){return this.$app.project.children}},methods:{async updateVisible(e){this.$app.project.getState(e,this.$app.slides.actived.uid).visible=e.visible,await this.$app.project.save(e)},async handleNodeDrop(e){this.$app.project.handleAsset(e)},filterElements:e=>e.filter(e=>e.isElement),async insertToSlide(e){e.state?this.$app.toasts.add({message:"The element has already been added to this slide"}):await this.$app.slides.addState(e)},deleteElement(e){this.removeData.text=`Delete ${e.name} (${e.uid}) ?`,this.$app.modal.open({header:{value:"Delete item",handler:()=>{this.$app.modal.close(),this.requestRemove=!1}},content:{},footer:{buttons:[{label:"Delete",class:"secondary",handler:async()=>{this.$app.modal.close(),this.requestRemove=!1,this.$app.project.remove(e.paths),this.$app.toasts.add({message:`The element ${e.name} is deleted`})}},{label:"Cancel",class:"primary",handler:async()=>{this.$app.modal.close(),this.requestRemove=!1}}]}})},onUpdateExpanded(e){},onNodeClick(e){this.$app.selection.select(e)},onChangeSelection(){}},components:{TreeView:at}},Nt=(0,x.A)(_t,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon"),i=(0,s.resolveComponent)("TreeView"),c=(0,s.resolveDirective)("tooltip");return(0,s.openBlock)(),(0,s.createElementBlock)("div",kt,[(0,s.createElementVNode)("div",null,[(0,s.createTextVNode)((0,s.toDisplayString)(o.title)+": ",1),(0,s.createElementVNode)("button",{onClick:t[0]||(t[0]=e=>r.project.addElement(r.selected))},[(0,s.createVNode)(l,{value:"plus",size:"0.75em"})])]),(0,s.createVNode)(i,{filter:r.filterElements,tree:r.tree,onClickNode:r.onNodeClick,onChangeSelect:r.onChangeSelection,childsFiled:"children",onUpdateExpanded:r.onUpdateExpanded,selector:!1,droppable:!0,onNodeDrop:r.handleNodeDrop},{prepend:(0,s.withCtx)(({node:e,index:t})=>[(0,s.createElementVNode)("div",null,[(0,s.withDirectives)((0,s.createElementVNode)("input",{type:"checkbox","onUpdate:modelValue":t=>e.visible=t,onChange:t=>r.updateVisible(e)},null,40,Et),[[s.vModelCheckbox,e.visible]])])]),append:(0,s.withCtx)(({node:e,index:t})=>[(0,s.createElementVNode)("div",wt,[(0,s.createCommentVNode)(' <icon value="target" v-tooltip="\'Фокус\'" size="1em" @click="$emit(\'target\', node)"></icon>'),(0,s.createCommentVNode)(" <icon v-tooltip=\"'Видимость'\" :value=\"node.show ? 'eye' : 'eye-blocked'\" size=\"1em\"\r\n            @click=\"node.visible = !node.visible\" :color=\"node.visible ? '#8ec58e' : '#8ec58e80'\">\r\n          </icon> "),e.parent?(0,s.createCommentVNode)("v-if",!0):(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createBlock)(l,{key:0,value:"dice",size:"1em",onClick:t=>r.insertToSlide(e),color:e.state?"#8ec58e":"#8ec58e80"},null,8,["onClick","color"])),[[c,"Add to slide"]]),(0,s.withDirectives)((0,s.createVNode)(l,{onClick:t=>r.deleteElement(e),value:"bin",size:"1em"},null,8,["onClick"]),[[c,"Remove"]]),(0,s.createCommentVNode)(' <icon v-if="index === 0" size="100%" value="bin"></icon> ')])]),label:(0,s.withCtx)(({node:e})=>[(0,s.createElementVNode)("div",{class:(0,s.normalizeClass)([{focusedtree:r.selected===e},"label"])},(0,s.toDisplayString)(e.name||e.uid),3)]),_:1},8,["filter","tree","onClickNode","onChangeSelect","onUpdateExpanded","onNodeDrop"])])}],["__scopeId","data-v-e70173d4"]]),St={class:"hierarhy-view"},Vt={class:"treeicon"},Ct={name:"Hierarhy",props:{title:""},data:()=>({filtersView:!1,filterRect:{}}),computed:{selected(){return this.$app.selection.selected},slide(){return this.$app.slides.actived||{children:[]}}},methods:{getElement(){},removeSlide(){this.$app.slides.remove(this.$app.slides.actived.uid)},removeState(e){this.$app.slides.removeState(e.paths),this.$app.toasts.add({message:`${e.data.name||e.uid} удален`})},onNodeClick(e){this.$app.selection.select(e)},onChangeSelection(){},onUpdateExpanded(){},assState(){"block"===this.$app.selection.element?.type||this.$app.toasts.add({message:"Только типы block можно добавлять в состояния"})}},components:{TreeView:at}},xt=(0,x.A)(Ct,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon"),i=(0,s.resolveComponent)("TreeView"),c=(0,s.resolveDirective)("tooltip");return(0,s.openBlock)(),(0,s.createElementBlock)("div",St,[(0,s.createElementVNode)("div",null,[(0,s.createTextVNode)((0,s.toDisplayString)(o.title)+" : "+(0,s.toDisplayString)(r.slide.name)+" ",1),(0,s.withDirectives)((0,s.createVNode)(l,{onClick:t[0]||(t[0]=e=>r.removeSlide()),value:"bin",size:"1em"},null,512),[[c,"Delete slide"]])]),(0,s.createVNode)(i,{tree:r.slide.children,onClickNode:r.onNodeClick,onChangeSelect:r.onChangeSelection,onUpdateExpanded:r.onUpdateExpanded,selector:!1},{checkbox:(0,s.withCtx)(()=>[...t[1]||(t[1]=[(0,s.createElementVNode)("span",null,[(0,s.createElementVNode)("input",{type:"checkbox"})],-1)])]),append:(0,s.withCtx)(({node:e,index:t})=>[(0,s.createCommentVNode)(' <div class="filters" v-if="index === 0">\n                    <button v-tooltip="\'Change filters\'"  @click="viewFilters" class="filterbutton">\n                        <icon v-for="v in target.filters" :value="v.props.value" :color="v.props.color" size="1em"></icon>\n                    </button>\n                    <PopupList v-if="filtersView" :rect="filterRect" :values="target.filters" @callback="filtersView = false"></PopupList>\n                </div> '),(0,s.createElementVNode)("div",Vt,[(0,s.createCommentVNode)(' <icon value="target" v-tooltip="\'Fit\'" size="1em" @click="$emit(\'target\', node)"></icon>\n          <icon v-tooltip="\'Visible\'" :value="node.isVisible ? \'eye\' : \'eye-blocked\'" size="1em"\n            @click="$emit(\'visible\', node)">\n          </icon> '),e.isBlock?(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createBlock)(l,{key:0,onClick:t=>r.removeState(e),value:"bin",size:"1em"},null,8,["onClick"])),[[c,"Remove element from slide"]]):(0,s.createCommentVNode)("v-if",!0)])]),label:(0,s.withCtx)(({node:e})=>[(0,s.createElementVNode)("div",{class:(0,s.normalizeClass)([{focusedtree:r.selected===e},"label"])},(0,s.toDisplayString)(e.name||e.element.uid),3)]),_:1},8,["tree","onClickNode","onChangeSelect","onUpdateExpanded"])])}],["__scopeId","data-v-6bf93691"]]),Bt={class:"transformer"},$t={class:"icons"};var It=o(24),Dt=o(0);function Tt(e){return 180*e/Math.PI}function At(e){return e*Math.PI/180}function Mt(e){const t=new WeakSet;return JSON.stringify(e,(e,o)=>{if("object"==typeof o&&null!==o){if(t.has(o))return;t.add(o)}return o})}let Ot,jt,Pt;function Rt(){console.log("focus");const e=jt.object;Ot.update();let t=!1;if(e.traverse(e=>{e.isMesh&&(t=!0)}),t){const t=new we.Box3;e.traverse(e=>{t.expandByObject(e)});const o=new we.Sphere;t.getBoundingSphere(o),Lt.FitTo(o)}else Lt.FitTo({center:e.position,radius:.25})}class Lt{static FocusToSelect(){jt.object&&Rt()}static FocusTo(e){Ot.target.copy(e.isObject3D?e.position:e)}static MoveTo(e,t){const o={position:new we.Vector3,time:1e3,...e,control:!1},n={position:new we.Vector3,time:1e3,...t,control:!1};Ot.enabled=!1;const a=Workspace.Camera.position.clone(),s=Ot.target.clone();o.control=o.time>n.time,n.control=n.time>=o.time;const r=new Tween(a).to(o.position,o.time).easing(Easing.Quadratic.InOut).onUpdate(()=>{Workspace.Camera.position.copy(a),Workspace.Camera.updateProjectionMatrix(),Ot.update()}).onComplete(()=>{o.control&&(Ot.enabled=!0),tweengroup.remove(r)}).start(),l=new Tween(s).to(n.position,n.time).easing(Easing.Quadratic.InOut).onUpdate(()=>{Ot.target.copy(s),Ot.getPolarAngle()>Ot.maxPolarAngle&&Ot.target.setY(center.y+Math.cos(Ot.maxPolarAngle)*distance)}).onComplete(()=>{n.control&&(Ot.enabled=!0),tweengroup.remove(l)}).start();tweengroup.add(r,l)}static SetState(e){Ot.enabled=e}static Init({canvas:e},t,o){Pt=t,Ot=new It.N(t,e),Ot.enabled=!0,Ot.enableDamping=!0,Ot.dampingFactor=.25,Ot.screenSpacePanning=!1,Ot.minDistance=.01,Ot.maxDistance=1e3,jt=new Dt.ZU(t,e),jt.addEventListener("dragging-changed",e=>{Ot.enabled=!e.value});const n=jt.getHelper();o.add(n),jt.getRaycaster().layers.set(1),n.traverse(e=>{e.layers.set(1)}),window.addEventListener("keydown",e=>{switch(Ot.enabled=!e.ctrlKey,e.code){case"KeyQ":jt.setSpace("local"===jt.space?"world":"local");break;case"Shift":jt.setTranslationSnap(1),jt.setRotationSnap(we.MathUtils.degToRad(15)),jt.setScaleSnap(.25);break;case"KeyW":jt.setMode("translate");break;case"KeyE":jt.setMode("rotate");break;case"KeyR":jt.setMode("scale");break;case"KeyF":jt.object&&Rt();break;case"KeyC":case"KeyV":case"KeyX":case"KeyY":case"KeyZ":case" ":case"Escape":break;case"+":case"=":jt.setSize(jt.size+.1);break;case"-":case"_":jt.setSize(Math.max(jt.size-.1,.1))}}),window.addEventListener("keyup",e=>{Ot.enabled=!e.ctrlKey,"Shift"===e.key&&(jt.setTranslationSnap(null),jt.setRotationSnap(null),jt.setScaleSnap(null))})}static get Transformer(){return jt}static Select(e){e?jt.attach(e):jt.detach()}static Update(e){Ot.update(e)}static FitTo({center:e,radius:t}){const o=At(Pt.fov),n=Math.max(t,.25)/Math.sin(o/2),a=(new we.Vector3).subVectors(Pt.position,e).normalize();!function(e,t,o=1){Ot.enabled=!1;const n=o,a=Pt.position.clone(),s=Ot.target.clone(),r=Date.now();!function o(){const l=(Date.now()-r)/(1e3*n);if(l>=1)return Pt.position.copy(e),Ot.enabled=!0,Ot.target.copy(t),void Ot.update();Pt.position.lerpVectors(a,e,l),Ot.target.lerpVectors(s,t,l),Ot.update(),requestAnimationFrame(o)}()}(e.clone().add(a.multiplyScalar(n)),e,.5)}}const Ft=Lt,Ut={props:{list:{type:Array},options:{size:"1.5em"}},methods:{setSpace(){Ft.Transformer.setSpace("local"===Ft.Transformer.space?"world":"local")},setMode(e){Ft.Transformer.setMode(e)}}},zt=(0,x.A)(Ut,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon"),i=(0,s.resolveDirective)("tooltip");return(0,s.openBlock)(),(0,s.createElementBlock)("div",Bt,[(0,s.createElementVNode)("div",$t,[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(o.list,(e,t)=>(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createBlock)(l,{key:t,size:o.options.size,value:e.icon,onClick:e.handler},null,8,["size","value","onClick"])),[[i,e.hint]])),128)),(0,s.createCommentVNode)(' <icon size="1.5em" value="move" @click="setMode(\'translate\')"></icon>\r\n        <icon size="1.5em" value="loop2" @click="setMode(\'rotate\')"></icon>\r\n        <icon size="1.5em" value="enlarge2" @click="setMode(\'scale\')"></icon>\r\n        <icon size="1.5em" value="enlarge2" @click="setMode(\'scale\')"></icon> ')])])}]]),Ht={class:"horizontal-menu"},qt={href:"#"},Gt={class:"submenu"},Wt={href:"#"},Kt={class:"submenu"},Yt={href:"#"},Xt={mounted(){}},Jt=(0,x.A)(Xt,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon");return(0,s.openBlock)(),(0,s.createElementBlock)("ul",Ht,[t[7]||(t[7]=(0,s.createElementVNode)("li",null,[(0,s.createElementVNode)("a",{href:"#"},[(0,s.createElementVNode)("i",{class:"fas fa-home menu-icon"}),(0,s.createElementVNode)("span",{class:"menu-text"},"Главная")])],-1)),(0,s.createElementVNode)("li",null,[(0,s.createElementVNode)("a",qt,[(0,s.createVNode)(l,{value:"folder",size:"1em"}),t[0]||(t[0]=(0,s.createElementVNode)("span",{class:"menu-text"},"Товары",-1)),t[1]||(t[1]=(0,s.createElementVNode)("i",{class:"fas fa-chevron-down menu-arrow"},null,-1))]),(0,s.createElementVNode)("ul",Gt,[(0,s.createElementVNode)("li",null,[(0,s.createElementVNode)("a",Wt,[(0,s.createVNode)(l,{value:"bell",size:"1em"}),t[2]||(t[2]=(0,s.createElementVNode)("span",{class:"menu-text"},"Электроника",-1)),t[3]||(t[3]=(0,s.createElementVNode)("i",{class:"fas fa-chevron-right menu-arrow"},null,-1))]),(0,s.createElementVNode)("ul",Kt,[(0,s.createElementVNode)("li",null,[(0,s.createElementVNode)("a",Yt,[(0,s.createVNode)(l,{value:"cog",size:"1em"}),t[4]||(t[4]=(0,s.createElementVNode)("span",{class:"menu-text"},"Смартфоны",-1))])]),t[5]||(t[5]=(0,s.createElementVNode)("li",null,[(0,s.createElementVNode)("a",{href:"#"},[(0,s.createElementVNode)("i",{class:"fas fa-tablet-alt menu-icon"}),(0,s.createElementVNode)("span",{class:"menu-text"},"Планшеты")])],-1))])]),t[6]||(t[6]=(0,s.createElementVNode)("li",null,[(0,s.createElementVNode)("a",{href:"#"},[(0,s.createElementVNode)("i",{class:"fas fa-tshirt menu-icon"}),(0,s.createElementVNode)("span",{class:"menu-text"},"Одежда")])],-1))])]),t[8]||(t[8]=(0,s.createStaticVNode)('<li data-v-202d206c><a href="#" data-v-202d206c><i class="fas fa-info-circle menu-icon" data-v-202d206c></i><span class="menu-text" data-v-202d206c>О нас</span><i class="fas fa-chevron-down menu-arrow" data-v-202d206c></i></a><ul class="submenu" data-v-202d206c><li data-v-202d206c><a href="#" data-v-202d206c><i class="fas fa-history menu-icon" data-v-202d206c></i><span class="menu-text" data-v-202d206c>История</span></a></li><li data-v-202d206c><a href="#" data-v-202d206c><i class="fas fa-users menu-icon" data-v-202d206c></i><span class="menu-text" data-v-202d206c>Команда</span></a></li></ul></li><li data-v-202d206c><a href="#" data-v-202d206c><i class="fas fa-envelope menu-icon" data-v-202d206c></i><span class="menu-text" data-v-202d206c>Контакты</span></a></li>',2))])}],["__scopeId","data-v-202d206c"]]),Qt={class:"horizontal-menu"},Zt={class:"menu-text"},eo={key:0,class:"submenu"},to={name:"MenuItem",props:{item:{type:Object,required:!0}},methods:{onClick(e){!e.children&&e.handler&&e.handler()}}},oo={components:{MenuItem:(0,x.A)(to,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon"),i=(0,s.resolveComponent)("MenuItem",!0),c=(0,s.resolveDirective)("tooltip");return(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("li",{class:(0,s.normalizeClass)({"has-children":o.item.children})},[(0,s.createElementVNode)("div",{class:"item",onClick:t[0]||(t[0]=e=>r.onClick(o.item))},[(0,s.createVNode)(l,{value:o.item.children?"folder":o.item.icon,size:"1em"},null,8,["value"]),(0,s.createElementVNode)("span",Zt,(0,s.toDisplayString)(o.item.text),1)]),o.item.children?((0,s.openBlock)(),(0,s.createElementBlock)("ul",eo,[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(o.item.children,(e,t)=>((0,s.openBlock)(),(0,s.createBlock)(i,{key:t,item:e},null,8,["item"]))),128))])):(0,s.createCommentVNode)("v-if",!0)],2)),[[c,o.item.tooltip]])}],["__scopeId","data-v-6b17b06f"]])},props:{menu:{type:Object}},data:()=>({menuData:[{icon:"fas fa-home",text:"Главная",link:"#"},{icon:"folder",text:"Товары",link:"#",children:[{icon:"bell",text:"Электроника",link:"#",children:[{icon:"cog",text:"Смартфоны",link:"#"},{icon:"fas fa-tablet-alt",text:"Планшеты",link:"#"}]},{icon:"fas fa-tshirt",text:"Одежда",link:"#"}]},{icon:"fas fa-info-circle",text:"О нас",link:"#",children:[{icon:"fas fa-history",text:"История",link:"#"},{icon:"fas fa-users",text:"Команда",link:"#"}]},{icon:"fas fa-envelope",text:"Контакты",link:"#"}]})},no=(0,x.A)(oo,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("MenuItem");return(0,s.openBlock)(),(0,s.createElementBlock)("ul",Qt,[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(o.menu,(e,t)=>((0,s.openBlock)(),(0,s.createBlock)(l,{key:t,item:e},null,8,["item"]))),128))])}],["__scopeId","data-v-30250442"]]);var ao=o(320),so=o.n(ao);const ro={class:"dropdown"},lo={key:0,class:"dropdown-menu"},io=["onClick"],co={__name:"userpanel",setup(e){const t=so().default||so(),o=(0,s.ref)(!1),n=(0,s.computed)(()=>t.app.user.registered?[{label:"Options",handler:()=>{}},{label:"Logout",handler:t.app.logout}]:[{label:"Login",handler:i}]),a=()=>{o.value=!o.value},r=(0,s.useTemplateRef)("dropdown"),l=e=>{r.value?.contains(e.target)||(o.value=!1)};(0,s.watch)(o,e=>{e?window.addEventListener("click",l):window.removeEventListener("click",l)});const i=()=>{t.modal.open({header:{value:"Login",handler:()=>{t.modal.close()}},content:{component:"LoginForm",props:{},events:{success:()=>{t.modal.close(),t.app.init()}}},footer:{buttons:[]}})};return(e,l)=>((0,s.openBlock)(),(0,s.createElementBlock)("div",ro,[(0,s.createCommentVNode)(" Триггер для открытия меню "),(0,s.createElementVNode)("div",{ref_key:"dropdown",ref:r,class:"dropdown-trigger",onClick:a},(0,s.toDisplayString)((0,s.unref)(t).app.user.name),513),(0,s.createCommentVNode)(" Выпадающее меню "),(0,s.createVNode)(s.Transition,{name:"fade"},{default:(0,s.withCtx)(()=>[o.value?((0,s.openBlock)(),(0,s.createElementBlock)("div",lo,[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(n.value,(e,t)=>((0,s.openBlock)(),(0,s.createElementBlock)("a",{key:t,class:"dropdown-item",onClick:t=>(e=>{o.value=!1,e.handler()})(e)},(0,s.toDisplayString)(e.label),9,io))),128))])):(0,s.createCommentVNode)("v-if",!0)]),_:1})]))}},po=(0,x.A)(co,[["__scopeId","data-v-4594b897"]]),uo={name:"UI",props:{element:null},data(){return{version:"0.0.8",project:{blocks:[{component:"AssetsTree",data:{title:"Assets"},onSelect:this.onSelectAsset},{component:"ModelsTree",data:{title:"Models"},onSelect:()=>{}}],header:{buttons:this.$app.menu.hierarhy.list}},name:"",selectedSlide:null,selectedNodes:[]}},methods:{onButtonClick(e){e.handler&&e.handler()},onSelectAsset(e){},onSelectedNodesUpdate(){},camChange(e){const t=e.target.value,o=this.cameras.find(e=>e.uid===t);o&&"function"==typeof o.handler?o.handler():console.warn(`No handler found for camera with UID: ${t}`)},handleSlideSelected(e){this.selectedSlide=e},activateInMenu(e,t){if(!t)return this.menu.actived[e]=null,void("main"===e&&(this.menu.ext.length=0));this.menu.actived[e]=t.id,"main"===e&&(this.menu.ext.length=0,this.menu.ext.push(...t.ext||[]))},handleNodeDrop({sourceNodeUid:e,targetNodeUid:t,sourceTree:o}){console.log(e);const n="TreeViewLeft"===o?this.leftTree:this.rightTree,a="TreeViewLeft"===o?this.rightTree:this.leftTree,s=this.findNodeInTree(n,e),r=this.findNodeInTree(a,t);s&&r&&(this.removeNodeFromTree(n,e),r.children||this.$set(r,"children",[]),r.children.push(s),"TreeViewLeft"===o?(this.leftTree=[...this.leftTree],this.rightTree=[...this.rightTree]):(this.rightTree=[...this.rightTree],this.leftTree=[...this.leftTree]))},findNodeInTree(e,t){console.log(e)},removeNodeFromTree(e,t){console.log(e)}},computed:{projectMenu(){return this.$app.menu.app.list},topMenu(){return this.$app.menu.top},headMenu(){return this.$app.menu.hierarhy.list},footerMenu(){return this.$app.menu.tools.list},viewTransform(){return this.$app.selection.selected?.isElement||this.$app.selection.selected?.isState},slide(){return this.$app.slides.actived},selected(){return this.$app.selection.element},slides(){return this.$app.slides.children},cameras(){return this.$app.app.cameras},leftpanel(){return this.$app.app.leftpanel},rightpanel(){return this.$app.app.rightpanel},options(){return this.$app.options},menu(){return this.$app.menu},app(){return this.$app.app},tools:()=>toolse,models(){return this.$app.models},ready(){return this.$app.engine.ready},toasts(){return this.$app.toasts},modal(){return this.$app.modal},translations(){return this.$app.translations},info(){return this.$app.project.info||{}}},components:{UserPanel:po,ModelsTree:Nt,horizontalmenu:no,Topmenu:Jt,ViewPanel:B,Sliders:L,HierarhyUI:G,InspectorUI:Le,AssetsTree:rt,ElementsTree:bt,StatesTree:xt,Transformer:zt}},mo=(0,x.A)(uo,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("horizontalmenu"),i=(0,s.resolveComponent)("InspectorUI"),c=(0,s.resolveComponent)("icon"),d=(0,s.resolveComponent)("ViewPanel"),p=(0,s.resolveComponent)("Sliders"),w=(0,s.resolveComponent)("Transformer"),_=(0,s.resolveDirective)("tooltip");return(0,s.openBlock)(),(0,s.createElementBlock)("div",u,[(0,s.createElementVNode)("div",m,[(0,s.createVNode)(l,{menu:r.projectMenu},null,8,["menu"]),(0,s.createElementVNode)("div",h,(0,s.toDisplayString)(r.info.name),1),(0,s.createElementVNode)("div",f,[(0,s.createCommentVNode)(" <UserPanel /> "),(0,s.createCommentVNode)(' <div class="icon">\r\n                    <icon value="cog"></icon>\r\n                </div> '),(0,s.createTextVNode)(" v "+(0,s.toDisplayString)(a.version),1)])]),(0,s.createCommentVNode)(" <Topmenu></Topmenu> "),(0,s.createVNode)(i,{selected:r.selected,class:"inspector"},null,8,["selected"]),r.app.ready?((0,s.openBlock)(),(0,s.createBlock)(d,{key:0,class:"project",header:a.project.header,footer:a.project.footer},{header:(0,s.withCtx)(()=>[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(r.headMenu,e=>(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("button",{class:(0,s.normalizeClass)(e.class),onClick:t=>r.onButtonClick(e)},[e.label?((0,s.openBlock)(),(0,s.createElementBlock)("span",g,(0,s.toDisplayString)(e.label||"Close"),1)):(0,s.createCommentVNode)("v-if",!0),e.icon?((0,s.openBlock)(),(0,s.createBlock)(c,{key:1,value:e.icon,size:"1.5em"},null,8,["value"])):(0,s.createCommentVNode)("v-if",!0)],10,v)),[[_,e.tooltip]])),256))]),footer:(0,s.withCtx)(()=>[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(r.footerMenu,e=>(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("button",{class:(0,s.normalizeClass)(e.class),onClick:t=>r.onButtonClick(e)},[e.label?((0,s.openBlock)(),(0,s.createElementBlock)("span",E,(0,s.toDisplayString)(e.label||"Close"),1)):(0,s.createCommentVNode)("v-if",!0),e.icon?((0,s.openBlock)(),(0,s.createBlock)(c,{key:1,value:e.icon,size:"1.5em"},null,8,["value"])):(0,s.createCommentVNode)("v-if",!0)],10,k)),[[_,e.tooltip]])),256))]),default:(0,s.withCtx)(()=>[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(a.project.blocks,o=>((0,s.openBlock)(),(0,s.createElementBlock)("div",y,[((0,s.openBlock)(),(0,s.createBlock)((0,s.resolveDynamicComponent)(o.component||"div"),(0,s.mergeProps)({class:"elementContent"},{ref_for:!0},o.component?o.data:null,{onSelect:o.onSelect,onNodeDrop:r.handleNodeDrop,"onUpdate:tree":t[0]||(t[0]=t=>e.leftTree=t)}),{default:(0,s.withCtx)(()=>[(0,s.createElementVNode)("div",{class:"content-value",innerHTML:o.value||""},null,8,b)]),_:2},1040,["onSelect","onNodeDrop"]))]))),256))]),_:1},8,["header","footer"])):(0,s.createCommentVNode)("v-if",!0),(0,s.createVNode)(p,{slides:r.slides,slide:r.slide,onSlideselect:r.handleSlideSelected,class:"sliders"},null,8,["slides","slide","onSlideselect"]),r.viewTransform?((0,s.openBlock)(),(0,s.createBlock)(w,(0,s.normalizeProps)((0,s.mergeProps)({key:1},r.topMenu)),null,16)):(0,s.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-3c08750e"]]),ho=new we.Raycaster,fo=new class{constructor(){this._events={"*":[]}}subs(e,t,o){null==this._events[e]&&(this._events[e]=[]),this._events[e].push({handler:o,once:t})}on(e,t){this.subs(e,!1,t)}once(e,t){this.subs(e,!0,t)}off(e,t){const o=this._events[e];if(o){for(let e=o.length-1;e>=0;e--)o[e].handler===t&&o.splice(e,1);0===o.length&&delete this._events[e]}}clear(e){this._events[e]=[]}clearAll(){this._events={"*":[]}}emit(e,...t){const o=[];this._events[e]&&o.push(...this._events[e]),this._events["*"].length&&o.push(...this._events["*"].map(t=>({handler:t.handler.bind(this,e),once:t.once})));for(let e=o.length-1;e>=0;e--){const n=o[e];n.handler.apply(null,t),n.once&&o.splice(e,1)}}addEventListener(e,t){this.on(e,t)}removeEventListener(e,t){this.off(e,t)}};let vo,go,yo,bo;const ko={x:0,y:0};let Eo,wo=.03,_o=.03,No=.01,So=.01,Vo=window.innerWidth/2,Co=window.innerHeight/2;function xo(e){for(;e;){if(e.isElement)return e;e=e.parent}return null}function Bo(e){}function $o(e){ko.x=e.clientX,ko.y=e.clientY,Eo=Date.now()}function Io(e){if(Math.abs(ko.x-e.clientX)>10||Math.abs(ko.y-e.clientY)>10||Date.now()-Eo>500)return;const t=new we.Vector2,o=bo.getBoundingClientRect(),n=e.clientX-o.left,a=e.clientY-o.top;t.x=n/bo.clientWidth*2-1,t.y=-a/bo.clientHeight*2+1,ho.setFromCamera(t,go);const s=ho.intersectObjects(vo.children,!0);if(0!==s.length)for(let e=0;e<s.length;e++){const t=s[e].object,o=xo(t)||{};if(console.log(t),o.visible)return void fo.emit("click",o)}else fo.emit("click",null)}const Do=new Proxy(class{static get Control(){return Control}static Init(e,t,o,n,a){const s={camera:{range:{x:.01,y:.01},movespeed:{x:.03,y:.03}},...a};vo=n,yo=o,go=t,bo=e,wo=s.camera.movespeed.x,_o=s.camera.movespeed.y,No=s.camera.range.x,So=s.camera.range.y,Vo=window.innerWidth/2,Co=window.innerHeight/2,e.addEventListener("click",Io.bind(null)),e.addEventListener("mousemove",Bo,!1),e.addEventListener("mousedown",$o,!1)}static Update(e){}static SetCamera(e){go=e}},{get:(e,t)=>t in e?e[t]:fo[t]}),To=ao.default||ao;let Ao,Mo,Oo,jo,Po;function Ro(e){Mo.render(Ao,Oo)}class Lo{static get CameraHelper(){return Po}static async Init(e){jo=e;const{THREE:t,Project:o,Factory:n}=To.modules.getMod("engine");Ao=o.Scene,Mo=new t.WebGLRenderer({canvas:e,alpha:!0,powerPreference:"high-performance",antialias:!0,stencil:!1});const a=jo.clientWidth,s=jo.clientHeight;Mo.setSize(a,s,!1),Mo.setPixelRatio(window.devicePixelRatio),Mo.shadowMap.enabled=!0,Mo.shadowMap.type=t.PCFSoftShadowMap,o.on("setcamera",()=>{Po&&(Ao.remove(Po),Po.dispose()),Po=new t.CameraHelper(o.Camera),Po.layers.set(1),Ao.add(Po)}),Po=new t.CameraHelper(o.Camera),Po.layers.set(1),Ao.add(Po),Oo=new t.PerspectiveCamera(60,window.innerWidth/window.innerHeight,.01,5e3),Oo.layers.enable(1),Oo.uid="EditorCamera",Ao.add(Oo),Oo.position.set(5,3,20),Mo.setAnimationLoop(Ro),n.on("create",(e,t)=>{e.type}),Ft.Init({canvas:jo},Oo,o.Scene),Ft.FocusTo(o.Root),Do.Init(jo,Oo,Ao,o.Root),Do.on("click",e=>{"videoplane"===e?.type&&e.play(),To.selection.select(e)})}}window.Editor=Lo;const Fo=Lo;let Uo="defaultDB",zo=null,Ho=[],qo="uid";class Go{constructor(e,t,o="id"){this.dbName=e,this._storages=t,this._key=o,this.db=null}async openDatabase(e){return new Promise((t,o)=>{const n=indexedDB.open(this.dbName);n.onupgradeneeded=e=>{const t=e.target.result;for(let e=0;e<this._storages.length;e++)t.objectStoreNames.contains(this._storages[e])||t.createObjectStore(this._storages[e],{keyPath:this._key,autoIncrement:!1})},n.onsuccess=n=>{if(this.db=n.target.result,this.db.objectStoreNames.contains(e))t(this.db);else{this.db.close();const n=this.db.version+1,a=indexedDB.open(this.dbName,n);a.onupgradeneeded=t=>{t.target.result.createObjectStore(e,{keyPath:"id",autoIncrement:!0})},a.onsuccess=e=>{this.db=e.target.result,t(this.db)},a.onerror=e=>{o(e.target.error)}}},n.onerror=e=>{o(e.target.error)}})}async addItem(e,t){const o=(await this.openDatabase(e)).transaction(e,"readwrite");return o.objectStore(e).add(t),new Promise(e=>{o.oncomplete=()=>e(),o.onerror=()=>e()})}async addItems(e,t){const o=[];for(let n=0;n<t.length;n++)o.push(this.addItem(e,t[n]));await Promise.all(o)}async getItem(e,t){const o=(await this.openDatabase(e)).transaction(e,"readonly").objectStore(e);return new Promise((e,n)=>{const a=o.get(t);a.onsuccess=()=>e(a.result),a.onerror=()=>e()})}async deleteItem(e,t){const o=(await this.openDatabase(e)).transaction(e,"readwrite").objectStore(e);return new Promise((e,n)=>{const a=o.delete(t);a.onsuccess=()=>e(),a.onerror=()=>n()})}async getAllItems(e){const t=(await this.openDatabase(e)).transaction(e,"readonly").objectStore(e);return new Promise((e,o)=>{const n=t.getAll();n.onsuccess=()=>e(n.result),n.onerror=()=>e()})}async updateItem(e,t){const o=(await this.openDatabase(e)).transaction(e,"readwrite").objectStore(e);return new Promise((e,n)=>{const a=o.put(t);a.onsuccess=()=>e(t),a.onerror=()=>n()})}async updateItemProperties(e,t,o){const n=(await this.openDatabase(e)).transaction(e,"readwrite").objectStore(e);return new Promise((e,a)=>{const s=n.get(t);s.onsuccess=()=>{const t=s.result;if(t){Object.assign(t,o);const s=n.put(t);s.onsuccess=()=>e(),s.onerror=()=>a()}else a("Item not found")},s.onerror=()=>a()})}async upsertItemProperties(e,t,o){const n=(await this.openDatabase(e)).transaction(e,"readwrite").objectStore(e);return new Promise((e,a)=>{const s=n.get(t);s.onsuccess=()=>{let r=s.result;if(r){Object.assign(r,o);const t=n.put(r);t.onsuccess=()=>e(),t.onerror=()=>a()}else{const s={...o,id:t},r=n.add(s);r.onsuccess=()=>e(),r.onerror=()=>a()}},s.onerror=()=>a()})}static async GetList(){try{return await indexedDB.databases()}catch(e){return[]}}static GetStoragesData(e){indexedDB.open(e).onsuccess=function(e){const t=e.target.result,o=t.transaction(t.objectStoreNames,"readonly");t.objectStoreNames.forEach(e=>{const t=o.objectStore(e);console.log("Хранилище:",e),console.log("КлюPath:",t.keyPath),console.log("Автоинкремент:",t.autoIncrement)}),t.close()}}static GetStorages(e){return new Promise((t,o)=>{const n=indexedDB.open(e);n.onsuccess=e=>{const o=e.target.result,n=[];for(let e=0;e<o.objectStoreNames.length;e++)n.push(o.objectStoreNames[e]);o.close(),t(n)},n.onerror=e=>{o(`Ошибка открытия БД: ${e.target.error}`)},n.onupgradeneeded=e=>{console.log("БД требует обновления")}})}static Create(e,t,o=!1){return new Promise((n,a)=>{const s=indexedDB.open(e,1);s.onupgradeneeded=function(e){const n=e.target.result,a=Object.keys(t);for(let e=0;e<a.length;e++){const t=a[e];if(!n.objectStoreNames.contains(t)){const e=n.createObjectStore(t,{keyPath:"uid"});o&&e.createIndex("uid","uid",{unique:!0})}}},s.onsuccess=function(e){const o=e.target.result,s=Object.keys(t),r=o.transaction(s,"readwrite");for(let e=0;e<s.length;e++){const o=s[e],n=r.objectStore(o);if(Array.isArray(t[o]))for(let e=0;e<t[o].length;e++)n.put(t[o][e]);else n.put(t[o])}r.oncomplete=function(){n()},r.onerror=function(){a()}},s.onerror=function(e){a(e.target.error)}})}static async GetFromAll(e,t){try{const e=await indexedDB.databases(),t=[],o=e.map(e=>new Promise((o,n)=>{const a=e.name,s=indexedDB.open(a);s.onsuccess=function(e){const n=e.target.result;if(n.objectStoreNames.contains("project")){const e=n.transaction("project","readonly").objectStore("project").get("info");e.onsuccess=()=>{t.push(e.result),o()},e.onerror=()=>{o()}}else o()},s.onerror=function(){console.error(`Ошибка при открытии базы данных: ${a}`),n()}}));return await Promise.all(o),t}catch(e){console.error("Ошибка при получении списка баз данных:",e)}}static DeleteDatabase(e){return new Promise((t,o)=>{zo.close();const n=indexedDB.deleteDatabase(e);n.onsuccess=function(){t()},n.onerror=function(){console.warn(`Ошибка при удалении базы данных ${e}.`),o()},n.onblocked=async function(){console.warn(`Blocked ${e}.`),t()}})}static Init(e,t,o="uid"){Uo=e,Ho=t,qo=o}static async openDatabase(e){return new Promise((t,o)=>{const n=indexedDB.open(Uo);n.onupgradeneeded=e=>{const t=e.target.result;for(let e=0;e<Ho.length;e++)t.objectStoreNames.contains(Ho[e])||t.createObjectStore(Ho[e],{keyPath:qo,autoIncrement:!1})},n.onsuccess=n=>{if(zo=n.target.result,zo.objectStoreNames.contains(e))t(zo);else{zo.close();const n=zo.version+1,a=indexedDB.open(Uo,n);a.onupgradeneeded=t=>{t.target.result.createObjectStore(e,{keyPath:"id",autoIncrement:!0})},a.onsuccess=e=>{zo=e.target.result,t(zo)},a.onerror=e=>{o(e.target.error)}}},n.onerror=e=>{o(e.target.error)}})}static async addItem(e,t){const o=(await Go.openDatabase(e)).transaction(e,"readwrite");return o.objectStore(e).add(t),new Promise(e=>{o.oncomplete=()=>e(),o.onerror=()=>e()})}static async addItems(e,t){const o=[];for(let n=0;n<t.length;n++)o.push(Go.addItem(e,t[n]));await Promise.all(o)}static async getItem(e,t){const o=(await Go.openDatabase(e)).transaction(e,"readonly").objectStore(e);return new Promise((e,n)=>{const a=o.get(t);a.onsuccess=()=>e(a.result),a.onerror=()=>e()})}static async deleteItem(e,t){const o=(await this.openDatabase(e)).transaction(e,"readwrite").objectStore(e);return new Promise((e,n)=>{const a=o.delete(t);a.onsuccess=()=>e(),a.onerror=()=>n()})}static async getAllItems(e){const t=(await Go.openDatabase(e)).transaction(e,"readonly").objectStore(e);return new Promise((e,o)=>{const n=t.getAll();n.onsuccess=()=>e(n.result),n.onerror=()=>o})}static async updateItem(e,t){const o=(await Go.openDatabase(e)).transaction(e,"readwrite").objectStore(e);return new Promise((e,n)=>{const a=o.put(t);a.onsuccess=()=>e(t),a.onerror=()=>n()})}static async updateItemProperties(e,t,o){const n=(await Go.openDatabase(e)).transaction(e,"readwrite").objectStore(e);return new Promise((e,a)=>{const s=n.get(t);s.onsuccess=()=>{const t=s.result;if(t){Object.assign(t,o);const s=n.put(t);s.onsuccess=()=>e(),s.onerror=()=>a()}else a("Item not found")},s.onerror=()=>a()})}static async upsertMany(e,t,o="id"){const n=[];for(let a=0;a<t.length;a++){const s=t[a];n.push(Go.upsertItemProperties(e,s[o],s))}await Promise.all(n)}static async upsertItemProperties(e,t,o){const n=(await Go.openDatabase(e)).transaction(e,"readwrite").objectStore(e);return new Promise((e,a)=>{const s=n.get(t);s.onsuccess=()=>{let r=s.result;if(r){Object.assign(r,o);const t=n.put(r);t.onsuccess=()=>e(),t.onerror=()=>a()}else{const s={...o,id:t,uid:t},r=n.add(s);r.onsuccess=()=>e(),r.onerror=()=>a()}},s.onerror=()=>a()})}static getVersion(e){return new Promise(t=>{const o=indexedDB.open(e);o.onsuccess=e=>{const o=e.target.result,n=o.version;o.close(),t(n)},o.onerror=e=>{console.error("Ошибка при открытии БД:",e.target.error),t(null)}})}static exportToJson(e){return new Promise(async(t,o)=>{const n=await Go.getVersion(e),a=indexedDB.open(e,n);a.onerror=e=>{o(`Ошибка открытия базы данных: ${e.target.error}`)},a.onsuccess=e=>{const n=e.target.result,a={},s=n.objectStoreNames,r=n.transaction(s,"readonly"),l=[];for(let e=0;e<s.length;e++){const t=s[e],o=r.objectStore(t);l.push(new Promise(e=>{const n=[],a=o.openCursor();a.onerror=()=>{console.error(`Ошибка чтения хранилища ${t}`),e({[t]:[]})},a.onsuccess=o=>{const a=o.target.result;a?(n.push(a.value),a.continue()):e({[t]:n})}}))}Promise.all(l).then(e=>{e.forEach(e=>{const t=Object.keys(e)[0];a[t]=e[t]}),t(a)}).catch(o),r.oncomplete=()=>{n.close()}},a.onupgradeneeded=e=>{0===e.target.result.objectStoreNames.length&&t({})}})}}const Wo=Go,Ko={data:()=>({selectedElement:null,loadComponent:"div",modulesLoaded:!1,progress:0}),computed:{ui(){return this.$app.ui},hierarhyAllow(){return this.$app.engine.instances.length>0},options(){return this.$app.options},app(){return this.$app.app},tools:()=>toolse,models(){return this.$app.models},ready(){return this.$app.app.ready},toasts(){return this.$app.toasts},modal(){return this.$app.modal},translations(){return this.$app.translations}},methods:{async start(){this.$app.app.ready=!0},waitCanvasSize(e){const t=window.devicePixelRatio||1;e.forEach(e=>{e.width=e.clientWidth*t,e.height=e.clientHeight*t})}},async mounted(){document.documentElement.setAttribute("data-theme","dark"),window.THREE=we,await this.$app.app.init(),await this.$app.modules.init();const e=this.$refs.editorcanvas,t=this.$refs.playcanvas;this.waitCanvasSize([e,t]);const o=["actions","assets","models","modules","project","slides"],n=new URLSearchParams(window.location.search),a=n.get("src");let s;switch(await this.$app.app.init(),await this.$app.templates.init(),a){case"db":default:this.$app.project.uid=n.get("db")||"empty",await Wo.Init(this.$app.project.uid,o,"uid");const e=[];for(let t=0;t<o.length;t++){const n=await Wo.getAllItems(o[t]);e.push(n)}const[t=[],a=[],r=[],l=[],i={uid:this.$app.project.uid},c=[]]=e;s={actions:t,assets:a,models:r,modules:l,project:i,slides:c};break;case"url":const d=await fetch(n.get("url"));s=await d.json(),this.$app.project.uid=s.project.uid,await Wo.Init(this.$app.project.uid,o,"uid")}this.$app.project.init(s.project),this.$app.projects.init(this.$app.project.uid),await new Promise(e=>{this.$nextTick(e)}),this.loadComponent="LoaderScreen",console.log("---LOAD ENGINE---"),await this.$app.engine.load(),console.log("---LOAD MODULES---"),await this.$app.modules.loadUserModules(s.modules),console.log("---LOAD ASSETS AND ACTIONS---"),await Promise.all([this.$app.assets.init(s.assets,e=>{this.progress=e}),this.$app.actions.init(s.actions)]),console.log("---LOAD END---"),this.$app.engine.Project.Init(t),this.$app.engine.Project.Start(),console.log("---BUILD SCENES---"),await Fo.Init(e),await this.$app.engine.start();const r=this.$app.engine.CssManager;await r.Init(this.$refs.playui,t),this.$app.project.on("create",e=>{r.OnCreate(e,this.$app.ui,this.$app.slides)}),this.$app.project.on("remove",(e,t)=>{r.OnRemove(t,this.$app.ui)});try{console.log("---INSTANCED MODELS---"),await this.$app.project.load(s.models)}catch(e){a&&"db"!==a||(console.warn(e),this.$app.toasts.add({message:"Error loading project",type:"alerticon",timehide:!0}))}if(console.log("---BUILD SLIDES---"),0===s.slides.length){const e=await this.$app.slides.add({name:"Main",props:{},actions:[]});s.slides.push(e)}await this.$app.slides.load(s.slides),this.progress=100,s.slides.length>0&&(console.log("---ACTIVATE FIRST SLIDE---"),this.$app.slides.goto(0)),console.log("---READY---"),this.app.ready=!0},components:{UI:mo}},Yo=(0,x.A)(Ko,[["render",function(e,t,o,n,a,u){const m=(0,s.resolveComponent)("UI"),h=(0,s.resolveComponent)("Modal"),f=(0,s.resolveComponent)("Toasts");return(0,s.openBlock)(),(0,s.createElementBlock)("div",r,[(0,s.createElementVNode)("div",l,[(0,s.createElementVNode)("canvas",i,null,512),(0,s.createElementVNode)("canvas",c,null,512),(0,s.createElementVNode)("div",d,[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(u.ui.elements,(e,t)=>((0,s.openBlock)(),(0,s.createBlock)((0,s.resolveDynamicComponent)(e.component),(0,s.mergeProps)({onMounted:u.ui.onElementMount,key:t},(0,s.toHandlers)(e.events||{}),{ref_for:!0},e.data),null,16,["onMounted"]))),128))],512),(0,s.createVNode)(m,{element:a.selectedElement},null,8,["element"])]),u.ready?(0,s.createCommentVNode)("v-if",!0):((0,s.openBlock)(),(0,s.createElementBlock)("div",p,[((0,s.openBlock)(),(0,s.createBlock)((0,s.resolveDynamicComponent)(a.loadComponent),{loadingProgress:a.progress,onClick:u.start},null,8,["loadingProgress","onClick"]))])),u.modal.isVisible?((0,s.openBlock)(),(0,s.createBlock)(h,{key:1})):(0,s.createCommentVNode)("v-if",!0),(0,s.createVNode)(f)])}]]),Xo={class:"overbutton"},Jo={class:"menulabel"},Qo={class:"btnicon"},Zo={name:"ExpandedButton",props:{label:"",icon:"",color:"rgb(0,0,0)"}},en=(0,x.A)(Zo,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon");return(0,s.openBlock)(),(0,s.createElementBlock)("button",Xo,[(0,s.createElementVNode)("div",Jo,(0,s.toDisplayString)(o.label),1),(0,s.createElementVNode)("div",Qo,[(0,s.createVNode)(l,{size:"100%",color:o.color,value:o.icon},null,8,["color","value"])])])}]]),tn=["fill","x","href"],on=o.p+"assets/76bf5ab841899c419d06.svg",nn={name:"Icon",props:{value:{type:String,default:()=>"icon-checkmark"},size:{type:String,default:()=>null},color:{type:String,default:()=>null},offset:{type:Number}},computed:{style(){return this.size?{width:`${this.size}`,height:`${this.size}`}:{width:"1em",height:"1em"}},val(){return`${on}#s-${this.value.replace("p-","")}`}}},an=(0,x.A)(nn,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("svg",{preserveAspectRatio:"xMidYMid meet",class:"svgicon",style:(0,s.normalizeStyle)(r.style)},[(0,s.createElementVNode)("use",{class:"svguse",width:"100%",height:"100%",viewBox:"0 0 32 32",fill:o.color,x:o.offset,href:r.val},[(0,s.createElementVNode)("title",null,[(0,s.renderSlot)(e.$slots,"default",{},void 0,!0)])],8,tn)],4)}],["__scopeId","data-v-a13b2ade"]]),sn={class:"modal-header"},rn={class:"modal-content"},ln=["innerHTML"],cn={class:"modal-footer"},dn=["disabled","onClick"],pn={computed:{modal(){return this.$app.modal},header(){return this.modal.header},content(){return this.modal.content},footer(){return this.modal.footer}},methods:{onSelf(){this.modal.values.closable&&this.modal.close()},onClick(e){"function"==typeof e&&e()},closeModal(e){"function"!=typeof e?this.modal.close():e()}}},un=(0,x.A)(pn,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",{class:"modal-overlay",onClick:t[3]||(t[3]=(0,s.withModifiers)((...e)=>r.onSelf&&r.onSelf(...e),["self"]))},[(0,s.createElementVNode)("div",{class:"modal",onClick:t[2]||(t[2]=(0,s.withModifiers)(()=>{},["stop"]))},[(0,s.createElementVNode)("header",sn,[((0,s.openBlock)(),(0,s.createBlock)((0,s.resolveDynamicComponent)(r.header.component||"div"),(0,s.mergeProps)({class:"header"},r.header.component?r.header:null),{default:(0,s.withCtx)(()=>[(0,s.createElementVNode)("h3",null,(0,s.toDisplayString)(r.header.value),1),(0,s.createElementVNode)("button",{class:"close-btn",onClick:t[0]||(t[0]=e=>r.closeModal(r.header.handler))},"×")]),_:1},16))]),(0,s.createElementVNode)("main",rn,[((0,s.openBlock)(),(0,s.createBlock)((0,s.resolveDynamicComponent)(r.content.component||"div"),(0,s.mergeProps)({class:"content"},r.content.component?r.content.props:null,(0,s.toHandlers)(r.content.events||{})),(0,s.createSlots)({default:(0,s.withCtx)(()=>[(0,s.createElementVNode)("div",{class:"content-value",innerHTML:r.content.value||""},null,8,ln)]),_:2},[(0,s.renderList)(r.content.slots,(e,t)=>({name:t,fn:(0,s.withCtx)(t=>[((0,s.openBlock)(),(0,s.createBlock)((0,s.resolveDynamicComponent)(e.component),(0,s.mergeProps)(t,(0,s.toHandlers)(e.events||{})),null,16))])}))]),1040))]),(0,s.createElementVNode)("footer",cn,[((0,s.openBlock)(),(0,s.createBlock)((0,s.resolveDynamicComponent)(r.footer.component||"div"),(0,s.mergeProps)({class:"footer"},r.footer.component?r.footer.props:null,{onClose:r.closeModal}),{default:(0,s.withCtx)(()=>[r.footer.buttons?((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,{key:0},(0,s.renderList)(r.footer.buttons,e=>((0,s.openBlock)(),(0,s.createElementBlock)("div",null,[e.hidden?(0,s.createCommentVNode)("v-if",!0):((0,s.openBlock)(),(0,s.createElementBlock)("button",{key:0,class:(0,s.normalizeClass)(e.class),disabled:e.disabled,onClick:t=>r.onClick(e.handler)},(0,s.toDisplayString)(e.label||"Close"),11,dn))]))),256)):((0,s.openBlock)(),(0,s.createElementBlock)("button",{key:1,class:(0,s.normalizeClass)(r.footer.class),onClick:t[1]||(t[1]=e=>r.closeModal(r.footer.handler))},(0,s.toDisplayString)(r.footer.label||"Close"),3))]),_:1},16,["onClose"]))])])])}],["__scopeId","data-v-38e7d2b0"]]),mn=["onClick"],hn={props:{values:{type:Array},rect:{type:Object},size:{type:Object,default:{width:200,height:100}}},data:()=>({popupStyle:{}}),methods:{togglePopup(e){const t=window.innerWidth;let o=this.rect.top+window.scrollY,n=this.rect.left+window.scrollX;n+this.size.width>t&&(n=this.rect.right-this.size.width+window.scrollX),this.popupStyle={position:"absolute",top:`${o}px`,left:`${n}px`,width:`${this.size.width}px`},this.isPopupVisible=!0},hidePopup(){this.$emit("callback")}}},fn=(0,x.A)(hn,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveDirective)("tooltip");return(0,s.openBlock)(),(0,s.createElementBlock)("div",{class:"popup",style:(0,s.normalizeStyle)(a.popupStyle)},[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(o.values,(t,o)=>(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("p",{class:"element",key:o,onClick:o=>t.handler?t.handler(t):e.$emit("click",t)},[((0,s.openBlock)(),(0,s.createBlock)((0,s.resolveDynamicComponent)(t.component||"div"),(0,s.mergeProps)({ref_for:!0},t.props),{default:(0,s.withCtx)(()=>[(0,s.createTextVNode)((0,s.toDisplayString)(t.props),1)]),_:2},1040))],8,mn)),[[l,t.tooltip]])),128)),(0,s.createElementVNode)("button",{onClick:t[0]||(t[0]=(...e)=>r.hidePopup&&r.hidePopup(...e))},"ОК")],4)}],["__scopeId","data-v-1591e2fe"]]),vn={key:0,class:"menulabel"},gn={key:1,class:"btnicon"},yn={name:"SimpleButton",props:{label:{type:String},icon:{type:Object},tooltip:{type:String},handlers:{type:Object,required:!0}},methods:{onClick(){this.handlers?.click?this.handlers.click(this):this.$emit("click",this)}}},bn=(0,x.A)(yn,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon"),i=(0,s.resolveDirective)("tooltip");return(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("button",{class:"small-btn simple",onClick:t[0]||(t[0]=(...e)=>r.onClick&&r.onClick(...e))},[o.label?((0,s.openBlock)(),(0,s.createElementBlock)("div",vn,(0,s.toDisplayString)(o.label),1)):(0,s.createCommentVNode)("v-if",!0),o.icon?((0,s.openBlock)(),(0,s.createElementBlock)("div",gn,[(0,s.createVNode)(l,{size:o.icon.size||"100%",value:o.icon.value},null,8,["size","value"])])):(0,s.createCommentVNode)("v-if",!0)])),[[i,o.tooltip]])}],["__scopeId","data-v-7f0518be"]]),kn={key:0,class:"menulabel"},En={key:1,class:"btnicon"},wn={name:"ToggleButton",props:{id:{type:String,required:!0},label:{type:String},icon:{type:Object},group:{type:Object},handlers:{type:Object,required:!0},tooltip:{type:String}},computed:{isActive(){return this.group.activeId===this.id}},mounted(){this.handlers.activate&&this.handlers.activate(this)},beforeUnmount(){this.handlers.deactivate&&this.handlers.deactivate(this)},methods:{onClick(){this.handlers.click?this.handlers.click(this):this.$emit("click",this)}}},_n=(0,x.A)(wn,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon"),i=(0,s.resolveDirective)("tooltip");return(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("button",{class:(0,s.normalizeClass)(["small-btn simple",{active:r.isActive}]),onClick:t[0]||(t[0]=(...e)=>r.onClick&&r.onClick(...e))},[o.label?((0,s.openBlock)(),(0,s.createElementBlock)("div",kn,(0,s.toDisplayString)(o.label),1)):(0,s.createCommentVNode)("v-if",!0),o.icon?((0,s.openBlock)(),(0,s.createElementBlock)("div",En,[(0,s.createVNode)(l,{size:o.icon.size||"100%",value:o.icon.value},null,8,["size","value"])])):(0,s.createCommentVNode)("v-if",!0)],2)),[[i,o.tooltip]])}],["__scopeId","data-v-673fd16a"]]),Nn={class:"spinner"},Sn={name:"Spinner"},Vn=(0,x.A)(Sn,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",Nn)}],["__scopeId","data-v-4736cf19"]]),Cn={class:"toast-container"},xn={computed:{list(){return this.$app.toasts.list}},methods:{onClick(e){e.onclick&&e.onclick()}}},Bn=(0,x.A)(xn,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",Cn,[(0,s.createVNode)(s.TransitionGroup,{name:"toast",tag:"div"},{default:(0,s.withCtx)(()=>[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(r.list,t=>((0,s.openBlock)(),(0,s.createElementBlock)("div",{key:t.id,class:"toast"},[((0,s.openBlock)(),(0,s.createBlock)((0,s.resolveDynamicComponent)(t.component||"div"),(0,s.mergeProps)({class:"toastview"},{ref_for:!0},t.data,{onClick:e=>r.onClick(t)}),{default:(0,s.withCtx)(()=>[t.component?(0,s.createCommentVNode)("v-if",!0):(0,s.renderSlot)(e.$slots,"default",{key:0},()=>[(0,s.createTextVNode)((0,s.toDisplayString)(t.data.message),1)],!0)]),_:2},1040,["onClick"]))]))),128))]),_:3})])}],["__scopeId","data-v-3aed840a"]]),$n={class:"alert"},In={class:"text"},Dn={name:"Label",props:{icon:{type:String,default:"notification"},message:{type:String,default:""},type:{type:String,default:"info"}}},Tn=(0,x.A)(Dn,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon");return(0,s.openBlock)(),(0,s.createElementBlock)("div",null,[(0,s.createElementVNode)("div",$n,[(0,s.createVNode)(l,{class:(0,s.normalizeClass)(`${o.type}icon`),size:"3em",value:o.icon},null,8,["class","value"]),(0,s.createElementVNode)("span",In,(0,s.toDisplayString)(o.message),1)])])}]]),An={class:"menu-container"},Mn={key:0,class:"menublock"},On={name:"ExtMenu",props:{list:{type:Array,default:[]},actived:{type:String}},computed:{menu(){return this.$app.menu}},methods:{onClick(e){const t=this.list.find(e=>e.id===this.actived);t&&(t.handlers?.disable?.(),t===e)?this.$emit("activate",null):(e.handler?.(e)||e.handlers?.enable?.(e)||this.$emit("click",e),this.$emit("activate",e))}}},jn=(0,x.A)(On,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("ExpandedButton");return(0,s.openBlock)(),(0,s.createElementBlock)("div",An,[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(o.list,(e,t)=>((0,s.openBlock)(),(0,s.createElementBlock)("div",{key:t,class:(0,s.normalizeClass)([e.class,"menu-item"])},[e.hidden?(0,s.createCommentVNode)("v-if",!0):((0,s.openBlock)(),(0,s.createElementBlock)("div",Mn,[(0,s.createVNode)(l,{onClick:(0,s.withModifiers)(t=>r.onClick(e),["stop"]),label:e.label,color:e.id&&o.actived===e.id?"#ffff00":null,icon:e.icon},null,8,["onClick","label","color","icon"])]))],2))),128))])}]]),Pn=jn,Rn={class:"input-wrapper"},Ln=["type","value","placeholder"],Fn={name:"MinimalInput",props:{type:{type:String,default:"text"},value:{type:[String,Number],default:""},placeholder:{type:String,default:""}},emits:["update:value"]},Un=(0,x.A)(Fn,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",Rn,[(0,s.createElementVNode)("input",{type:o.type,value:o.value,onInput:t[0]||(t[0]=t=>e.$emit("update:value",t.target.value)),placeholder:o.placeholder,class:"input-field"},null,40,Ln)])}],["__scopeId","data-v-f47b63dc"]]),zn=["value"],Hn={name:"Elements",props:{modelValue:{type:String}},data:()=>({element:null,list:[]}),mounted(){this.list=this.$app.engine.getFactory().Elements},computed:{val:{get(){return this.modelValue},set(e){this.$emit("update:modelValue",e)}}}},qn=(0,x.A)(Hn,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",null,[(0,s.withDirectives)((0,s.createElementVNode)("select",{"onUpdate:modelValue":t[0]||(t[0]=e=>r.val=e),class:"form-select"},[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(a.list,e=>((0,s.openBlock)(),(0,s.createElementBlock)("option",{value:e.path},(0,s.toDisplayString)(e.name),9,zn))),256))],512),[[s.vModelSelect,r.val]])])}]]),Gn={class:"radio-group"},Wn=["onClick"],Kn={name:"RadioButton",props:{buttons:{type:Array,required:!0},value:{type:Object}}},Yn=(0,x.A)(Kn,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",Gn,[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(o.buttons,(e,t)=>((0,s.openBlock)(),(0,s.createElementBlock)("button",{key:t,class:"btn",onClick:t=>e.handler(o.value)},(0,s.toDisplayString)(e.label),9,Wn))),128))])}],["__scopeId","data-v-48e97626"]]),Xn={class:"radio-group"},Jn={class:"radio-label"},Qn=["name","value","checked","disabled","onChange"],Zn={class:"radio-custom"},ea={class:"radio-text"},ta={class:"radio-default-label"},oa={name:"RadioButton",props:{options:{type:[Array,Number],required:!0,validator:e=>Array.isArray(e)||"number"==typeof e&&e>0},modelValue:{type:[String,Number,Boolean,Object],default:null},name:{type:String,default:"radio-group"},disabled:{type:Boolean,default:!1},valueKey:{type:String,default:"value"},labelKey:{type:String,default:"label"}},emits:["update:modelValue","change"],computed:{normalizedOptions(){return"number"==typeof this.options?Array.from({length:this.options},(e,t)=>t+1):this.options}},methods:{getOptionValue(e){return"object"==typeof e&&null!==e&&(e[this.valueKey]||e.value)||e},getOptionLabel(e){return"object"==typeof e&&null!==e?e[this.labelKey]||e.label||this.getOptionValue(e):e},isChecked(e){return this.getOptionValue(e)===this.modelValue},handleChange(e){const t=this.getOptionValue(e);this.$emit("update:modelValue",t),this.$emit("change",t)}}},na=(0,x.A)(oa,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",Xn,[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(o.options,(t,n)=>((0,s.openBlock)(),(0,s.createElementBlock)("div",{key:n,class:(0,s.normalizeClass)(["radio-item",{"radio-item--disabled":o.disabled}])},[(0,s.createElementVNode)("label",Jn,[(0,s.createElementVNode)("input",{type:"radio",name:o.name,value:r.getOptionValue(t),checked:r.isChecked(t),disabled:o.disabled,onChange:e=>r.handleChange(t),class:"radio-input"},null,40,Qn),(0,s.createCommentVNode)(" Кастомная кнопка через слот "),(0,s.createElementVNode)("span",Zn,[(0,s.renderSlot)(e.$slots,"button",{option:t,index:n,checked:r.isChecked(t)},()=>[(0,s.createElementVNode)("span",{class:(0,s.normalizeClass)(["radio-default-button",{"radio-default-button--checked":r.isChecked(t)}])},null,2)],!0)]),(0,s.createCommentVNode)(" Кастомная надпись через слот "),(0,s.createElementVNode)("span",ea,[(0,s.renderSlot)(e.$slots,"label",{option:t,index:n,checked:r.isChecked(t)},()=>[(0,s.createElementVNode)("span",ta,(0,s.toDisplayString)(r.getOptionLabel(t)),1)],!0)])])],2))),128))])}],["__scopeId","data-v-65d75466"]]),aa={class:"search-filter"},sa={class:"search-input-container"},ra=["placeholder"],la=["disabled"],ia={name:"SearchFilter",props:{value:{type:String,default:""},placeholder:{type:String,default:"Enter text to search..."},debounce:{type:Number,default:300},label:{type:String,default:""},button:{type:String,default:"Search"}},data(){return{searchValue:this.value,debounceTimer:null}},watch:{value(e){this.searchValue=e}},methods:{handleInput(){console.log("handleInput"),this.debounceTimer&&clearTimeout(this.debounceTimer),this.debounceTimer=setTimeout(()=>{this.$emit("input",this.searchValue),this.$emit("change",this.searchValue)},this.debounce)},handleSearch(){this.searchValue.trim()&&(this.debounceTimer&&(clearTimeout(this.debounceTimer),this.debounceTimer=null),this.$emit("search",this.searchValue))},beforeUnmount(){this.debounceTimer&&clearTimeout(this.debounceTimer)}}},ca=(0,x.A)(ia,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",aa,[(0,s.createElementVNode)("div",sa,[(0,s.createElementVNode)("div",null,(0,s.toDisplayString)(o.label),1),(0,s.withDirectives)((0,s.createElementVNode)("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>a.searchValue=e),type:"text",class:"search-input",placeholder:o.placeholder,onInput:t[1]||(t[1]=(0,s.withModifiers)((...e)=>r.handleInput&&r.handleInput(...e),["stop"])),onKeyup:t[2]||(t[2]=(0,s.withKeys)((...e)=>r.handleSearch&&r.handleSearch(...e),["enter"]))},null,40,ra),[[s.vModelText,a.searchValue]]),(0,s.createElementVNode)("button",{class:"search-button",onClick:t[3]||(t[3]=(...e)=>r.handleSearch&&r.handleSearch(...e)),disabled:!a.searchValue.trim()},[(0,s.renderSlot)(e.$slots,"button-content",{},()=>[(0,s.createElementVNode)("span",null,(0,s.toDisplayString)(o.button),1)],!0)],8,la)])])}],["__scopeId","data-v-7caf0ae1"]]),da={name:"SliderBlock",props:{value:{type:Boolean,default:()=>!1},property:{type:String,default:"top"},shift:{type:Number,default:100},zero:{type:Number,default:0}},computed:{style(){return{[this.property]:this.value?`${this.shift}px`:`${this.zero}px`}}},mounted(){"right"===this.property||"left"===this.property?this.$el.style.width=this.shift-this.zero+"px":this.$el.style.height=this.shift-this.zero+"px"}},pa=(0,x.A)(da,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",{class:"slider",style:(0,s.normalizeStyle)(r.style)},[(0,s.renderSlot)(e.$slots,"default",{},void 0,!0),(0,s.createElementVNode)("div",{onClick:t[0]||(t[0]=t=>e.$emit("revert"))},[(0,s.renderSlot)(e.$slots,"button",{},void 0,!0)])],4)}],["__scopeId","data-v-b3fc2cec"]]),ua={key:0},ma={key:1},ha={key:2,class:"child-list"},fa={key:0},va={name:"TreeLi",props:["value"],data:()=>({childshow:!1})},ga=(0,x.A)(va,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("TreeLi",!0);return(0,s.openBlock)(),(0,s.createElementBlock)("li",null,[o.value.children?(0,s.createCommentVNode)("v-if",!0):((0,s.openBlock)(),(0,s.createElementBlock)("div",ua,[...t[1]||(t[1]=[(0,s.createElementVNode)("svg",{class:"edicon ics-spinner10"},[(0,s.createElementVNode)("use",{"xlink:href":"#ics-spinner10"})],-1)])])),o.value.children?((0,s.openBlock)(),(0,s.createElementBlock)("div",ha,[(0,s.createElementVNode)("span",{onClick:t[0]||(t[0]=t=>e.childshow=!e.childshow)},[t[3]||(t[3]=(0,s.createElementVNode)("input",{type:"checkbox"},null,-1)),(0,s.createTextVNode)((0,s.toDisplayString)(o.value.name),1)]),e.childshow?((0,s.openBlock)(),(0,s.createElementBlock)("ul",fa,[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(o.value.children,(e,t)=>((0,s.openBlock)(),(0,s.createBlock)(l,{key:t,value:e},null,8,["value"]))),128))])):(0,s.createCommentVNode)("v-if",!0)])):((0,s.openBlock)(),(0,s.createElementBlock)("span",ma,[t[2]||(t[2]=(0,s.createElementVNode)("input",{type:"checkbox"},null,-1)),(0,s.createTextVNode)((0,s.toDisplayString)(o.value.name),1)]))])}],["__scopeId","data-v-562df7a6"]]),ya={class:"selectable-container"},ba={class:"list"},ka={class:"grid"},Ea=["onClick"],wa={key:0,class:"info"},_a={name:"ActionsLib",data:()=>({current:null}),props:{list:{type:Array},selected:{type:Object}},watch:{selected(e,t){this.current=e}},emits:["selectItem"],methods:{onItemSelect(e){this.$emit("selectItem",e)}}},Na=(0,x.A)(_a,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",ya,[(0,s.createElementVNode)("div",ba,[(0,s.createElementVNode)("div",ka,[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(o.list,(t,o)=>((0,s.openBlock)(),(0,s.createElementBlock)("div",{onClick:e=>r.onItemSelect(t),class:"grid-element",key:o},[(0,s.renderSlot)(e.$slots,"item",{item:t})],8,Ea))),128))])]),a.current?((0,s.openBlock)(),(0,s.createElementBlock)("div",wa,[(0,s.renderSlot)(e.$slots,"selected",{item:a.current})])):(0,s.createCommentVNode)("v-if",!0)])}]]),Sa={class:"vlist-container"},Va={class:"list"},Ca={class:"vlist"},xa=["onClick"],Ba={name:"ActionsLib",data:()=>({current:null}),props:{list:{type:Array},selected:{type:Object}},watch:{selected(e,t){this.current=e}},emits:["selectItem"],methods:{onItemSelect(e){this.$emit("selectItem",e)}}},$a=(0,x.A)(Ba,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",Sa,[(0,s.createElementVNode)("div",Va,[(0,s.createElementVNode)("div",Ca,[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(o.list,(t,o)=>((0,s.openBlock)(),(0,s.createElementBlock)("div",{onClick:e=>r.onItemSelect(t),class:"vlist-element",key:o},[(0,s.renderSlot)(e.$slots,"item",{item:t})],8,xa))),128))])])])}]]),Ia={style:{"text-align":"right"}},Da={name:"BoolEdit",props:{modelValue:{type:Boolean}},computed:{val:{get(){return this.modelValue},set(e){this.$emit("update:modelValue",e)}}}},Ta=(0,x.A)(Da,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",Ia,[(0,s.withDirectives)((0,s.createElementVNode)("input",{type:"checkbox","onUpdate:modelValue":t[0]||(t[0]=e=>r.val=e)},null,512),[[s.vModelCheckbox,r.val]])])}]]),Aa={class:"comma-number-input-wrapper"},Ma={class:"arrow-buttons"},Oa={name:"input-float",props:{value:Object,modelValue:Number,step:{type:Number,default:1},min:{type:Number,default:Number.MIN_SAFE_INTEGER},max:{type:Number,default:Number.MAX_SAFE_INTEGER}},data:()=>({interval:null,separator:",",isPressed:!1,changeSpeed:100}),computed:{formattedValue:{get(){return this.modelValue},set(e){console.log(e),this.parseNumber(e),this.$emit("update:modelValue",e)}}},mounted(){const e=(new Intl.NumberFormat).format(this.modelValue);this.separator=e.charAt(1),this.$refs.input.addEventListener("wheel",this.onWheel,{passive:!1})},beforeDestroy(){this.$refs.input.removeEventListener("wheel",this.onWheel)},methods:{onFocus(){this.$nextTick(()=>{this.$refs.input.select()})},parseNumber(e){try{const t=parseFloat(e.replace(",","."));return isNaN(t)?this.modelValue:t}catch(e){return this.modelValue}},formatNumber:e=>parseFloat(e).toFixed(0).replace(".",","),onInput(e){this.formattedValue=e.target.modelValue},onWheel(e){e.preventDefault(),e.stopPropagation(),document.activeElement===this.$refs.input&&this.changeValue(e.deltaY>0?-this.step:this.step)},onKeyDown(e){"ArrowUp"===e.key?(this.changeValue(this.step),e.preventDefault()):"ArrowDown"===e.key&&(this.changeValue(-this.step),e.preventDefault())},changeValue(e){let t=(this.modelValue||0)+e;t=Math.max(Math.min(t,this.max),this.min),this.$emit("update:modelValue",parseFloat(t.toFixed(0)))},startIncrement(){this.interval&&clearInterval(this.interval),this.isPressed=!0,this.changeValue(this.step),setTimeout(()=>{this.isPressed&&(this.interval=setInterval(()=>this.changeValue(this.step),50))},400)},startDecrement(){this.interval&&clearInterval(this.interval),this.isPressed=!0,this.changeValue(-this.step),setTimeout(()=>{this.isPressed&&(this.interval=setInterval(()=>this.changeValue(-this.step),50))},400)},stopChange(){this.isPressed=!1,clearInterval(this.interval)}}},ja=(0,x.A)(Oa,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",Aa,[(0,s.withDirectives)((0,s.createElementVNode)("input",{ref:"input","onUpdate:modelValue":t[0]||(t[0]=e=>r.formattedValue=e),onKeydown:t[1]||(t[1]=(...e)=>r.onKeyDown&&r.onKeyDown(...e)),onDblclick:t[2]||(t[2]=(...e)=>r.onFocus&&r.onFocus(...e)),class:"comma-number-input"},null,544),[[s.vModelText,r.formattedValue,void 0,{number:!0}]]),(0,s.createElementVNode)("div",Ma,[(0,s.createElementVNode)("button",{onMousedown:t[3]||(t[3]=(...e)=>r.startIncrement&&r.startIncrement(...e)),onMouseup:t[4]||(t[4]=(...e)=>r.stopChange&&r.stopChange(...e)),onMouseleave:t[5]||(t[5]=(...e)=>r.stopChange&&r.stopChange(...e))},"▲",32),(0,s.createElementVNode)("button",{onMousedown:t[6]||(t[6]=(...e)=>r.startDecrement&&r.startDecrement(...e)),onMouseup:t[7]||(t[7]=(...e)=>r.stopChange&&r.stopChange(...e)),onMouseleave:t[8]||(t[8]=(...e)=>r.stopChange&&r.stopChange(...e))},"▼",32)])])}]]),Pa=["onUpdate:modelValue"],Ra=["onUpdate:modelValue"],La={name:"NameEditor",data:()=>({properties:[{property:"envMap",value:null}]}),methods:{updateAsset(){for(let e=0;e<this.properties.length;e++){const t=this.properties[e];this.selected[t.property],this.$app.assets.updateAsset(this.selected,t.property,()=>{})}}},props:{selected:{type:Object}}},Fa=(0,x.A)(La,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",null,[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(a.properties,e=>((0,s.openBlock)(),(0,s.createElementBlock)("div",null,[(0,s.withDirectives)((0,s.createElementVNode)("input",{"onUpdate:modelValue":t=>e.property=t},null,8,Pa),[[s.vModelText,e.property]]),(0,s.withDirectives)((0,s.createElementVNode)("input",{"onUpdate:modelValue":t=>o.selected[e.property]=t},null,8,Ra),[[s.vModelText,o.selected[e.property]]])]))),256)),(0,s.createElementVNode)("div",null,[(0,s.createElementVNode)("button",{class:"btn",onClick:t[0]||(t[0]=(...e)=>r.updateAsset&&r.updateAsset(...e))},"Update")])])}]]),Ua={class:"comma-number-input-wrapper"},za={class:"arrow-buttons"},Ha={name:"CommaNumberInput",props:{modelValue:Number,step:{type:Number,default:.1},min:{type:Number,default:Number.MIN_SAFE_INTEGER},max:{type:Number,default:Number.MAX_SAFE_INTEGER},decimals:{type:Number,default:2}},data:()=>({interval:null,separator:",",isPressed:!1,changeSpeed:100}),computed:{formattedValue:{get(){return this.modelValue},set(e){const t=this.parseNumber(e);this.$emit("update:modelValue",t)}}},mounted(){const e=(new Intl.NumberFormat).format(this.modelValue);this.separator=e.charAt(1),this.$refs.input.addEventListener("wheel",this.onWheel,{passive:!1})},beforeDestroy(){this.$refs.input.removeEventListener("wheel",this.onWheel)},methods:{onFocus(){this.$nextTick(()=>{this.$refs.input.select()})},parseNumber(e){try{const t=parseFloat(e.replace(",","."));return isNaN(t)?this.modelValue:t}catch(e){return this.modelValue}},formatNumber(e){return parseFloat(e).toFixed(this.decimals).replace(".",",")},onInput(e){this.formattedValue=e.target.modelValue},onWheel(e){e.preventDefault(),e.stopPropagation(),document.activeElement===this.$refs.input&&this.changeValue(e.deltaY>0?-this.step:this.step)},onKeyDown(e){"ArrowUp"===e.key?(this.changeValue(this.step),e.preventDefault()):"ArrowDown"===e.key&&(this.changeValue(-this.step),e.preventDefault())},changeValue(e){let t=(this.modelValue||0)+e;t=Math.max(Math.min(t,this.max),this.min),this.$emit("update:modelValue",parseFloat(t.toFixed(this.decimals)))},startIncrement(){this.interval&&clearInterval(this.interval),this.isPressed=!0,this.changeValue(this.step),setTimeout(()=>{this.isPressed&&(this.interval=setInterval(()=>this.changeValue(this.step),50))},400)},startDecrement(){this.interval&&clearInterval(this.interval),this.isPressed=!0,this.changeValue(-this.step),setTimeout(()=>{this.isPressed&&(this.interval=setInterval(()=>this.changeValue(-this.step),50))},400)},stopChange(){this.isPressed=!1,clearInterval(this.interval)}}},qa=(0,x.A)(Ha,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",Ua,[(0,s.withDirectives)((0,s.createElementVNode)("input",{ref:"input",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>r.formattedValue=e),onKeydown:t[1]||(t[1]=(...e)=>r.onKeyDown&&r.onKeyDown(...e)),onDblclick:t[2]||(t[2]=(...e)=>r.onFocus&&r.onFocus(...e)),class:"comma-number-input"},null,544),[[s.vModelText,r.formattedValue]]),(0,s.createElementVNode)("div",za,[(0,s.createElementVNode)("button",{onMousedown:t[3]||(t[3]=(...e)=>r.startIncrement&&r.startIncrement(...e)),onMouseup:t[4]||(t[4]=(...e)=>r.stopChange&&r.stopChange(...e)),onMouseleave:t[5]||(t[5]=(...e)=>r.stopChange&&r.stopChange(...e))},"▲",32),(0,s.createElementVNode)("button",{onMousedown:t[6]||(t[6]=(...e)=>r.startDecrement&&r.startDecrement(...e)),onMouseup:t[7]||(t[7]=(...e)=>r.stopChange&&r.stopChange(...e)),onMouseleave:t[8]||(t[8]=(...e)=>r.stopChange&&r.stopChange(...e))},"▼",32)])])}]]),Ga={class:"control-container"},Wa=["max"],Ka={class:"buttons"},Ya=["disabled"],Xa=["disabled"],Ja={__name:"playcontrol",props:{modelValue:{type:Object},selected:{type:Object},value:{type:Object},target:{type:Object},property:{type:Object}},setup(e){const t=e,o=(0,s.ref)(!1),n=(0,s.ref)(0),a=(0,s.ref)(0),r=(0,s.ref)(0),l=(0,s.ref)(!1),i=(0,s.ref)(!1);function c(){const e=t.modelValue;i.value?e.pause():e.play()}function d(){t.modelValue.pause(),t.modelValue.currentTime=0}function p(){l.value=!1;const e=t.modelValue;if(o.value&&r.value<=e.duration)if(e.readyState<2){const t=()=>{e.currentTime=r.value,e.removeEventListener("canplay",t)};e.addEventListener("canplay",t),e.load()}else e.currentTime=r.value}function u(e){return!e||isNaN(e)?"0:00":`${Math.floor(e/60)}:${Math.floor(e%60).toString().padStart(2,"0")}`}return(0,s.onMounted)(()=>{const e=t.modelValue,c=()=>{e.readyState>=1&&(n.value=e.duration,o.value=!0)},d=()=>{l.value||(a.value=e.currentTime,r.value=e.currentTime)},p=()=>i.value=!0,u=()=>i.value=!1,m=()=>i.value=!1;e.addEventListener("loadedmetadata",c),e.addEventListener("canplay",c),e.addEventListener("timeupdate",d),e.addEventListener("play",p),e.addEventListener("playing",p),e.addEventListener("pause",u),e.addEventListener("ended",m),c(),(0,s.onUnmounted)(()=>{e.removeEventListener("loadedmetadata",c),e.removeEventListener("canplay",c),e.removeEventListener("timeupdate",d),e.removeEventListener("play",p),e.removeEventListener("playing",p),e.removeEventListener("pause",u),e.removeEventListener("ended",m)})}),(e,t)=>{const m=(0,s.resolveComponent)("icon");return(0,s.openBlock)(),(0,s.createElementBlock)("div",Ga,[(0,s.createElementVNode)("span",null,(0,s.toDisplayString)(u(a.value))+" / "+(0,s.toDisplayString)(u(n.value)),1),(0,s.withDirectives)((0,s.createElementVNode)("input",{type:"range",min:"0",max:n.value,step:"0.01","onUpdate:modelValue":t[0]||(t[0]=e=>r.value=e),onMousedown:t[1]||(t[1]=e=>l.value=!0),onMouseup:p,onTouchstart:t[2]||(t[2]=e=>l.value=!0),onTouchend:p},null,40,Wa),[[s.vModelText,r.value,void 0,{number:!0}]]),(0,s.createElementVNode)("div",Ka,[(0,s.createElementVNode)("button",{class:"btn square",onClick:c,disabled:!o.value},[(0,s.createVNode)(m,{value:i.value?"pause2":"play3"},null,8,["value"])],8,Ya),(0,s.createCommentVNode)(' <button class="btn square" @click="pause" :disabled="!ready">\r\n                <icon value="pause2"></icon>\r\n            </button> '),(0,s.createElementVNode)("button",{class:"btn square",onClick:d,disabled:!o.value},[(0,s.createVNode)(m,{value:"stop2"})],8,Xa)])])}}},Qa=(0,x.A)(Ja,[["__scopeId","data-v-ae734b3c"]]),Za={style:{display:"grid","grid-template-columns":"96px 1fr"}},es={style:{"text-align":"center"}},ts={props:{selected:{type:Object},label:{type:String},value:{type:Number},property:{type:Object}},computed:{val:{get(){return this.value},set(e){this.$emit("update:value",e)}}}},os=(0,x.A)(ts,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("FloatInput");return(0,s.openBlock)(),(0,s.createElementBlock)("div",Za,[(0,s.createElementVNode)("div",null,(0,s.toDisplayString)(o.label),1),(0,s.createElementVNode)("div",es,[(0,s.createVNode)(l,{min:o.property.min||0,step:o.property.step||.01,value:r.val,onChanged:t[0]||(t[0]=e=>r.val=e)},null,8,["min","step","value"])])])}]]),ns={style:{display:"flex",gap:"7px"}},as={style:{display:"flex",gap:"3px"}},ss={style:{display:"flex",gap:"3px"}},rs={style:{display:"flex",gap:"3px"}},ls={props:{modelValue:{type:Object,default:new we.Vector3},decimals:{type:Number,default:4},step:{type:Number,default:1}},computed:{value:{get(){return this.modelValue}}},methods:{updateValue(e,t){"number"==typeof t&&this.$emit("update:modelValue",{...this.value,[e]:t})}}},is=(0,x.A)(ls,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("Float");return(0,s.openBlock)(),(0,s.createElementBlock)("div",ns,[(0,s.createElementVNode)("div",as,[t[6]||(t[6]=(0,s.createElementVNode)("label",{style:{"font-size":"1.2em"}},"x",-1)),(0,s.createVNode)(l,{modelValue:r.value.x,"onUpdate:modelValue":[t[0]||(t[0]=e=>r.value.x=e),t[1]||(t[1]=e=>r.updateValue("x",e))],decimals:o.decimals,step:o.step},null,8,["modelValue","decimals","step"])]),(0,s.createElementVNode)("div",ss,[t[7]||(t[7]=(0,s.createElementVNode)("label",{style:{"font-size":"1.2em"}},"y",-1)),(0,s.createVNode)(l,{modelValue:r.value.y,"onUpdate:modelValue":[t[2]||(t[2]=e=>r.value.y=e),t[3]||(t[3]=e=>r.updateValue("y",e))],decimals:o.decimals,step:o.step},null,8,["modelValue","decimals","step"])]),(0,s.createElementVNode)("div",rs,[t[8]||(t[8]=(0,s.createElementVNode)("label",{style:{"font-size":"1.2em"}},"z",-1)),(0,s.createVNode)(l,{modelValue:r.value.z,"onUpdate:modelValue":[t[4]||(t[4]=e=>r.value.z=e),t[5]||(t[5]=e=>r.updateValue("z",e))],decimals:o.decimals,step:o.step},null,8,["modelValue","decimals","step"])])])}]]),cs={style:{display:"flex","align-items":"center",gap:"1px","flex-direction":"column"}},ds={key:0,class:"tools"},ps={key:1,class:"titleinfo"},us={data:()=>({expanded:!0}),props:{label:String,modelValue:{type:Object,default:new we.Vector3},decimals:{type:Number,default:2},step:{type:Number,default:1}},computed:{value:{get(){return this.modelValue}}},watch:{values(e,t){}},methods:{onUpdate(e){const t=new CustomEvent("update:modelValue",{detail:e,bubbles:!1});this.$emit("update:modelValue",t.detail)}}},ms=(0,x.A)(us,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("V3");return(0,s.openBlock)(),(0,s.createElementBlock)("div",cs,[(0,s.createElementVNode)("div",{class:(0,s.normalizeClass)(["title",a.expanded?"":"min"])},[(0,s.createElementVNode)("div",{class:"label",onClick:t[0]||(t[0]=e=>a.expanded=!a.expanded)},(0,s.toDisplayString)(a.expanded?"▼":"▶")+" "+(0,s.toDisplayString)(o.label),1),a.expanded?((0,s.openBlock)(),(0,s.createElementBlock)("div",ds,[(0,s.renderSlot)(e.$slots,"tools",{},void 0,!0)])):((0,s.openBlock)(),(0,s.createElementBlock)("div",ps,"x:"+(0,s.toDisplayString)(o.modelValue.x.toFixed(o.decimals))+",y:"+(0,s.toDisplayString)(o.modelValue.y.toFixed(o.decimals))+",z:"+(0,s.toDisplayString)(o.modelValue.z.toFixed(o.decimals)),1))],2),a.expanded?((0,s.openBlock)(),(0,s.createBlock)(l,{key:0,modelValue:r.value,decimals:o.decimals,step:o.step,"onUpdate:modelValue":r.onUpdate},null,8,["modelValue","decimals","step","onUpdate:modelValue"])):(0,s.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-6e23d76e"]]),hs={style:{display:"flex","align-items":"center",gap:"3px","flex-direction":"column"}},fs={class:"label"},vs={key:0,class:"tools"},gs={key:1,class:"titleinfo"},ys={data:()=>({expanded:!0}),props:{rotation:{type:Object,default:{x:0,y:0,z:0}},quaternion:Object,label:String,modelValue:Object,decimals:{type:Number,default:2},step:{type:Number,default:1}},methods:{onChangeVal(e){e.x>359&&(e.x=0),e.x<-359&&(e.x=0),e.y>359&&(e.y=0),e.y<-359&&(e.y=0),e.z>359&&(e.z=0),e.z<-359&&(e.z=0);const t=new CustomEvent("update:modelValue",{detail:new we.Euler(At(Math.round(e.x)),At(Math.round(e.y)),At(Math.round(e.z)),"XYZ"),bubbles:!1});this.$emit("update:rotation",t.detail)}},computed:{formattedValue:{get(){return{x:Math.round(Tt(this.rotation.x)),y:Math.round(Tt(this.rotation.y)),z:Math.round(Tt(this.rotation.z))}}}}},bs=(0,x.A)(ys,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("V3");return(0,s.openBlock)(),(0,s.createElementBlock)("div",hs,[(0,s.createElementVNode)("div",{class:(0,s.normalizeClass)(["title",a.expanded?"":"min"]),onClick:t[0]||(t[0]=e=>a.expanded=!a.expanded)},[(0,s.createElementVNode)("div",fs,(0,s.toDisplayString)(a.expanded?"▼":"▶")+" "+(0,s.toDisplayString)(o.label),1),a.expanded?((0,s.openBlock)(),(0,s.createElementBlock)("div",vs,[(0,s.renderSlot)(e.$slots,"tools",{},void 0,!0)])):((0,s.openBlock)(),(0,s.createElementBlock)("div",gs,"x:"+(0,s.toDisplayString)(r.formattedValue.x)+",y:"+(0,s.toDisplayString)(r.formattedValue.y)+",z:"+(0,s.toDisplayString)(r.formattedValue.z),1))],2),a.expanded?((0,s.openBlock)(),(0,s.createBlock)(l,{key:0,modelValue:r.formattedValue,decimals:o.decimals,step:o.step,"onUpdate:modelValue":r.onChangeVal},null,8,["modelValue","decimals","step","onUpdate:modelValue"])):(0,s.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-4454ef46"]]),ks={style:{display:"flex","align-items":"center",gap:"1px","flex-direction":"column"}},Es={name:"QuaternionEditor",props:{modelValue:{type:we.Quaternion,required:!0},decimals:{type:Number,default:2},step:{type:Number,default:1}},data:()=>({expanded:!0,x:0,y:0,z:0}),watch:{modelValue:{handler(e){this.updateEulerFromQuaternion(e)},immediate:!0,deep:!0}},methods:{updateEulerFromQuaternion(e){const t=(new we.Euler).setFromQuaternion(e,"XYZ");this.x=this.roundValue(t.x),this.y=this.roundValue(t.y),this.z=this.roundValue(t.z)},updateQuaternion(){const e=new we.Euler(this.x,this.y,this.z,"XYZ"),t=(new we.Quaternion).setFromEuler(e,"XYZ");this.$emit("update:modelValue",t)},roundValue:e=>Math.round(100*e)/100}},ws=(0,x.A)(Es,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("V3");return(0,s.openBlock)(),(0,s.createElementBlock)("div",ks,[(0,s.createCommentVNode)(' <div class="title" :class="expanded ? \'\' : \'min\'">\r\n            <div class="label" @click="expanded = !expanded">{{expanded?\'▼\':\'▶\' }} {{ label }}</div>\r\n            <div v-if="expanded"class="tools"><slot name="tools"></slot></div>\r\n            <div v-else class="titleinfo">x:{{ modelValue.x.toFixed(decimals) }},y:{{ modelValue.y.toFixed(decimals) }},z:{{ modelValue.z.toFixed(decimals) }}</div>\r\n        </div> '),a.expanded?((0,s.openBlock)(),(0,s.createBlock)(l,{key:0,modelValue:{x:a.x,y:a.y,z:a.z},decimals:o.decimals,step:o.step,"onUpdate:modelValue":r.updateQuaternion},null,8,["modelValue","decimals","step","onUpdate:modelValue"])):(0,s.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-96995396"]]),_s={class:"block_container"},Ns={key:0,class:"editrow"},Ss={class:"label"},Vs={name:"LabelEditor",props:{modelValue:{type:String,default:""},label:{type:String,default:""},tooltip:{type:String,default:""}},data:()=>({editMode:!1,val:""}),watch:{modelValue(){this.editMode=!1}},methods:{startEdit(){this.val=this.modelValue,this.editMode=!0,this.$nextTick(()=>{this.$refs.editInput.focus()})},complete(e){console.log(e),e.ctrlKey||e.shiftKey||(e&&e.preventDefault(),this.$emit("update:modelValue",this.val),this.editMode=!1)},endEdit(){return this.editMode?(this.editMode=!1,this.val):this.modelValue}},mounted(){}},Cs=(0,x.A)(Vs,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon"),i=(0,s.resolveDirective)("tooltip");return(0,s.openBlock)(),(0,s.createElementBlock)("div",null,[(0,s.createElementVNode)("div",_s,[e.editMode?((0,s.openBlock)(),(0,s.createElementBlock)("div",Ns,[(0,s.withDirectives)((0,s.createElementVNode)("textarea",{rows:"10",cols:"33",ref:"editInput",class:"editinput","onUpdate:modelValue":t[0]||(t[0]=t=>e.val=t),onKeyup:t[1]||(t[1]=(0,s.withKeys)((...e)=>r.complete&&r.complete(...e),["enter"]))},null,544),[[s.vModelText,e.val]]),(0,s.createVNode)(l,{class:"okicon",value:"checkmark",size:"1em",onClick:r.complete},null,8,["onClick"])])):(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("div",{class:"editrow",onClick:t[2]||(t[2]=(...e)=>r.startEdit&&r.startEdit(...e)),key:"tooltip-"+o.modelValue},[(0,s.createElementVNode)("span",Ss,(0,s.toDisplayString)(o.modelValue),1),(0,s.createVNode)(l,{value:"pencil",size:"1em"})])),[[i,o.tooltip||o.modelValue]])])])}],["__scopeId","data-v-44f8aea6"]]),xs={class:"block_container"},Bs={key:0,class:"editrow"},$s={class:"label"},Is={name:"LabelEditor",props:{modelValue:{type:String,default:""},label:{type:String,default:""},tooltip:{type:String,default:""}},data:()=>({editMode:!1,val:""}),watch:{modelValue(){this.editMode=!1}},methods:{startEdit(){this.val=this.modelValue,this.editMode=!0,this.$nextTick(()=>{this.$refs.editInput.focus()})},complete(e){e&&e.preventDefault(),this.$emit("update:modelValue",this.val),this.editMode=!1},endEdit(){return this.editMode?(this.editMode=!1,this.val):this.modelValue}},mounted(){}},Ds=(0,x.A)(Is,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon"),i=(0,s.resolveDirective)("tooltip");return(0,s.openBlock)(),(0,s.createElementBlock)("div",null,[(0,s.createElementVNode)("div",xs,[e.editMode?((0,s.openBlock)(),(0,s.createElementBlock)("div",Bs,[(0,s.withDirectives)((0,s.createElementVNode)("input",{ref:"editInput",class:"editinput","onUpdate:modelValue":t[0]||(t[0]=t=>e.val=t),onKeyup:t[1]||(t[1]=(0,s.withKeys)((...e)=>r.complete&&r.complete(...e),["enter"]))},null,544),[[s.vModelText,e.val]]),(0,s.createVNode)(l,{class:"okicon",value:"checkmark",size:"1em",onClick:r.complete},null,8,["onClick"])])):(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("div",{class:"editrow",onClick:t[2]||(t[2]=(...e)=>r.startEdit&&r.startEdit(...e)),key:"tooltip-"+o.modelValue},[(0,s.createElementVNode)("span",$s,(0,s.toDisplayString)(o.modelValue),1),(0,s.createVNode)(l,{value:"pencil",size:"1em"})])),[[i,o.tooltip||o.modelValue]])])])}],["__scopeId","data-v-7c4f752c"]]),Ts={class:"transform-container"},As={class:"label"},Ms={class:"transforms"},Os={key:1},js={key:3},Ps={key:5},Rs={props:{modelValue:{type:Object,default:{}},value:{type:Object,default:{}},target:{type:Object}},beforeUnmount(){this.value&&Ft.Transformer.removeEventListener("objectChange",this.onTransformerEvent)},mounted(){Ft.Transformer.addEventListener("objectChange",this.onTransformerEvent)},methods:{assignFromModel(e){this.target[e]={x:this.value[e].x,y:this.value[e].y,z:this.value[e].z}},removeTransform(e){this.target[e]&&(delete this.target[e],"rotation"===e&&this.value.rotation.set(0,0,0,"XYZ"),"position"===e&&this.value.position.set(0,0,0),"scale"===e&&this.value.scale.set(1,1,1),this.$emit("save"))},onTransformerEvent(e){switch(Ft.Transformer.mode){case"translate":this.target.position={...this.value.position};break;case"rotate":this.target.rotation={x:this.value.rotation.x,y:this.value.rotation.y,z:this.value.rotation.z};break;case"scale":this.target.scale={...this.value.scale}}this.$emit("save")},async onChangeTransform(e,t){switch(e){case"position":this.value.position.copy(t),this.target.position={x:t.x,y:t.y,z:t.z};break;case"rotation":this.value.rotation.set(t.x,t.y,t.z,"XYZ"),this.target.rotation={x:t.x,y:t.y,z:t.z};break;case"scale":this.value.scale.copy(t),this.target.scale={x:t.x,y:t.y,z:t.z}}this.$emit("save")}}},Ls=(0,x.A)(Rs,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon"),i=(0,s.resolveComponent)("V3block"),c=(0,s.resolveComponent)("EulerBlock"),d=(0,s.resolveDirective)("tooltip");return(0,s.openBlock)(),(0,s.createElementBlock)("div",null,[(0,s.createElementVNode)("div",Ts,[(0,s.createElementVNode)("div",As,[(0,s.createCommentVNode)("v-if",!0)]),(0,s.createElementVNode)("div",Ms,[o.target.position?((0,s.openBlock)(),(0,s.createBlock)(i,{key:0,"onUpdate:modelValue":t[3]||(t[3]=e=>r.onChangeTransform("position",e)),label:"Position",step:.1,modelValue:o.target.position,decimals:4},{tools:(0,s.withCtx)(()=>[(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("button",{class:"square",onClick:t[2]||(t[2]=e=>r.removeTransform("position"))},[(0,s.createVNode)(l,{value:"bin",size:"1em"})])),[[d,"Delete position"]])]),_:1},8,["modelValue"])):((0,s.openBlock)(),(0,s.createElementBlock)("div",Os,[(0,s.createElementVNode)("button",{class:"copybutton",onClick:t[4]||(t[4]=e=>r.assignFromModel("position"))},"Copy model position")])),o.target.rotation?((0,s.openBlock)(),(0,s.createBlock)(c,{key:2,"onUpdate:rotation":t[6]||(t[6]=e=>r.onChangeTransform("rotation",e)),label:"Rotation",step:1,decimals:0,rotation:o.target.rotation},{tools:(0,s.withCtx)(()=>[(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("button",{class:"square",onClick:t[5]||(t[5]=e=>r.removeTransform("rotation"))},[(0,s.createVNode)(l,{value:"bin",size:"1em"})])),[[d,"Remove rotation"]])]),_:1},8,["rotation"])):((0,s.openBlock)(),(0,s.createElementBlock)("div",js,[(0,s.createElementVNode)("button",{class:"copybutton",onClick:t[7]||(t[7]=e=>r.assignFromModel("rotation"))},"Copy model rotation")])),o.target.scale?((0,s.openBlock)(),(0,s.createBlock)(i,{key:4,"onUpdate:modelValue":t[9]||(t[9]=e=>r.onChangeTransform("scale",e)),label:"Scale",step:.01,modelValue:o.target.scale},{tools:(0,s.withCtx)(()=>[(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("button",{class:"square",onClick:t[8]||(t[8]=e=>r.removeTransform("scale"))},[(0,s.createVNode)(l,{value:"bin",size:"1em"})])),[[d,"Remove size"]])]),_:1},8,["modelValue"])):((0,s.openBlock)(),(0,s.createElementBlock)("div",Ps,[(0,s.createElementVNode)("button",{class:"copybutton",onClick:t[10]||(t[10]=e=>r.assignFromModel("scale"))},"Copy model scale")]))])])])}]]),Fs={style:{display:"grid","grid-template-columns":"96px 1fr"}},Us={name:"EditColor",props:{modelValue:{type:Object}},computed:{val:{get(){return`#${this.modelValue?.getHexString()||"ffffff"}`},set(e){this.modelValue&&this.modelValue.set(e),this.$emit("update:modelValue",this.modelValue||new we.Color(e))}}}},zs=(0,x.A)(Us,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",Fs,[(0,s.withDirectives)((0,s.createElementVNode)("input",{style:{width:"100%"},ref:"col",type:"color","onUpdate:modelValue":t[0]||(t[0]=e=>r.val=e)},null,512),[[s.vModelText,r.val]])])}]]),Hs={class:"image-container"},qs={ref:"canva"},Gs={key:0,class:"selector"},Ws={props:{modelValue:{type:Object,default:null},value:{type:Object},label:{type:String,default:""},tooltip:{type:String,default:""},selectable:{type:Boolean}},data:()=>({txtr:null}),watch:{value(e){this.redraw()}},methods:{onUpdate({result:e,file:t}){console.log(e);const o=new Blob([e],{type:t.type}),n=URL.createObjectURL(o);this.txtr=n;const a=(new THREE.TextureLoader).load(n,()=>{URL.revokeObjectURL(n)});this.$emit("update:modelValue",a.image),this.$app.storage.writeFile("texture.png",e)}},methods:{redraw(){const e=this.$refs.canva,t=e.getContext("2d");if(t.clearRect(0,0,e.width,e.height),this.value?.resource?.image)try{console.log(this.value);const o=this.value.resource.image;e.width=o.width,e.height=o.height,t.drawImage(o,0,0)}catch(e){}}},mounted(){this.redraw()}},Ks=(0,x.A)(Ws,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",Hs,[(0,s.createCommentVNode)(' <FileSelect @update:modelValue="onUpdate" acceptedTypes="image/\\*" /> '),(0,s.createElementVNode)("canvas",qs,null,512),o.selectable?((0,s.openBlock)(),(0,s.createElementBlock)("div",Gs,[(0,s.createElementVNode)("button",{onClick:t[0]||(t[0]=t=>e.$emit("select"))},"SELECT")])):(0,s.createCommentVNode)("v-if",!0)])}]]),Ys={class:"image-uploader"},Xs=["accept"],Js={name:"FileSelect",props:{buttonText:{type:String,default:"Select Image"},maxFileSize:{type:Number,default:5242880},acceptedTypes:{type:String,default:"image/*"}},methods:{triggerFileInput(){this.$refs.fileInput.click()},handleFileSelect(e){const t=e.target.files[0];if(!t)return;if(console.log(t),!t.type.match(this.acceptedTypes.replace("*",".*")))return void this.$emit("error","Invalid file type");if(t.size>this.maxFileSize)return void this.$emit("error",`File is too large (max ${this.maxFileSize/1024/1024}MB)`);const o=new FileReader;o.onload=e=>{this.$emit("update:modelValue",{result:e.target.result,file:t})},o.onerror=()=>this.$emit("error","Failed to read file"),o.readAsArrayBuffer(t),e.target.value=""}}},Qs=(0,x.A)(Js,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",Ys,[(0,s.createElementVNode)("button",{onClick:t[0]||(t[0]=(...e)=>r.triggerFileInput&&r.triggerFileInput(...e)),class:"upload-button"},(0,s.toDisplayString)(o.buttonText),1),(0,s.createElementVNode)("input",{type:"file",ref:"fileInput",accept:o.acceptedTypes,onChange:t[1]||(t[1]=(...e)=>r.handleFileSelect&&r.handleFileSelect(...e)),style:{display:"none"}},null,40,Xs)])}]]),Zs={__name:"twosidebool",props:{modelValue:{type:Boolean,default:!1},labels:{type:Array}},emits:["update:modelValue"],setup(e,{emit:t}){const o=e,n=t,a=()=>{n("update:modelValue",!o.modelValue)};return(t,o)=>((0,s.openBlock)(),(0,s.createElementBlock)("div",{class:"toggle-switch",onClick:a},[(0,s.createElementVNode)("div",{class:(0,s.normalizeClass)(["slider",{active:e.modelValue}])},[(0,s.createElementVNode)("span",{class:(0,s.normalizeClass)(["left-label",{active:!e.modelValue}])},[(0,s.renderSlot)(t.$slots,"left",{},()=>[(0,s.createTextVNode)((0,s.toDisplayString)(e.labels[0]),1)])],2),o[0]||(o[0]=(0,s.createElementVNode)("span",{class:"knob"},null,-1)),(0,s.createElementVNode)("span",{class:(0,s.normalizeClass)(["right-label",{active:e.modelValue}])},[(0,s.renderSlot)(t.$slots,"right",{},()=>[(0,s.createTextVNode)((0,s.toDisplayString)(e.labels[1]),1)])],2)],2)]))}},er=(0,x.A)(Zs,[["__scopeId","data-v-27cb6eff"]]),tr={class:"text-align-editor"},or=["value"],nr={__name:"sectionselect",props:{modelValue:{type:String,default:"center"},list:{type:Array,default:[]}},emits:["update:modelValue"],setup(e,{emit:t}){const o=e,n=t,a=(0,s.ref)(o.modelValue);(0,s.watch)(()=>o.modelValue,e=>{e!==a.value&&(a.value=e)});const r=()=>n("update:modelValue",a.value);return(t,o)=>((0,s.openBlock)(),(0,s.createElementBlock)("div",tr,[(0,s.withDirectives)((0,s.createElementVNode)("select",{"onUpdate:modelValue":o[0]||(o[0]=e=>a.value=e),onChange:r},[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(e.list,e=>((0,s.openBlock)(),(0,s.createElementBlock)("option",{value:e.value},(0,s.toDisplayString)(e.label||e.value),9,or))),256))],544),[[s.vModelSelect,a.value]])]))}},ar=(0,x.A)(nr,[["__scopeId","data-v-57114c76"]]),sr={class:"labelField"},rr={name:"Label",props:{modelValue:{type:String},value:{type:Object}}},lr=(0,x.A)(rr,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveDirective)("tooltip");return(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("div",sr,[(0,s.createTextVNode)((0,s.toDisplayString)(o.modelValue||""),1)])),[[l,o.modelValue]])}],["__scopeId","data-v-45c328bf"]]),ir={style:{display:"flex","flex-direction":"column"}},cr={style:{display:"flex","flex-direction":"row","justify-content":"space-between"}},dr={style:{display:"flex","flex-direction":"row","justify-content":"space-between"}},pr={props:{modelValue:{type:Object,default:{cast:!1,receive:!1}}},computed:{cast:{get(){return!!this.modelValue&&this.modelValue.cast},set(e){this.$emit("update:modelValue",{...this.modelValue?this.modelValue:{},cast:e})}},receive:{get(){return!!this.modelValue&&this.modelValue.receive},set(e){this.$emit("update:modelValue",{...this.modelValue?this.modelValue:{},receive:e})}}}},ur=(0,x.A)(pr,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("BoolEdit");return(0,s.openBlock)(),(0,s.createElementBlock)("div",ir,[(0,s.createElementVNode)("div",cr,[t[2]||(t[2]=(0,s.createElementVNode)("div",null,"Cast",-1)),(0,s.createVNode)(l,{modelValue:r.cast,"onUpdate:modelValue":t[0]||(t[0]=e=>r.cast=e),"update:modelValue":"cast=$event"},null,8,["modelValue"])]),(0,s.createElementVNode)("div",dr,[t[3]||(t[3]=(0,s.createElementVNode)("div",null,"Receive",-1)),(0,s.createVNode)(l,{modelValue:r.receive,"onUpdate:modelValue":t[1]||(t[1]=e=>r.receive=e),"update:modelValue":"receive=$event"},null,8,["modelValue"])])])}]]),mr={class:"dimension-control"},hr={class:"controls"},fr={class:"control-group"},vr={class:"control-row"},gr={class:"control-group"},yr={class:"control-row"},br={name:"DimensionControl",props:{value:{type:Object,default:{}},target:{type:Object}},emits:["update:target"],setup(e,{emit:t}){const o=e=>{if("number"==typeof e)return{value:e,unit:"px"};if("auto"===e||"fit-content"===e||"min-content"===e||"max-content"===e)return{value:0,unit:e};const t=e.match(/^([\d.]+)(\D+)$/);return t?{value:parseFloat(t[1]),unit:t[2]}:{value:0,unit:"px"}},n=o(e.target.width||"100px"),a=(0,s.ref)(n.value),r=(0,s.ref)(n.unit),l=o(e.target.height||"100px"),i=(0,s.ref)(l.value),c=(0,s.ref)(l.unit),d=(e,t)=>["auto","fit-content","min-content","max-content","none"].includes(t)?t:`${e}${t}`;return(0,s.watch)([a,r],()=>{t("update:target","width",d(a.value,r.value))}),(0,s.watch)([i,c],()=>{t("update:target","height",d(i.value,c.value))}),(0,s.watch)(()=>e.target.width,e=>{const t=o(e||"100px");a.value=t.value,r.value=t.unit}),(0,s.watch)(()=>e.target.height,e=>{const t=o(e||"100px");i.value=t.value,c.value=t.unit}),{widthValue:a,widthUnit:r,heightValue:i,heightUnit:c}}},kr=(0,x.A)(br,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",mr,[(0,s.createElementVNode)("div",hr,[(0,s.createElementVNode)("div",fr,[t[5]||(t[5]=(0,s.createElementVNode)("span",null,"Width",-1)),(0,s.createElementVNode)("div",vr,[(0,s.withDirectives)((0,s.createElementVNode)("select",{"onUpdate:modelValue":t[0]||(t[0]=e=>n.widthUnit=e)},[...t[4]||(t[4]=[(0,s.createStaticVNode)('<option value="px" data-v-f12dc314>px</option><option value="%" data-v-f12dc314>%</option><option value="em" data-v-f12dc314>em</option><option value="rem" data-v-f12dc314>rem</option><option value="vh" data-v-f12dc314>vh</option><option value="vw" data-v-f12dc314>vw</option><option value="auto" data-v-f12dc314>auto</option><option value="fit-content" data-v-f12dc314>fit-content</option><option value="min-content" data-v-f12dc314>min-content</option><option value="max-content" data-v-f12dc314>max-content</option>',10)])],512),[[s.vModelSelect,n.widthUnit]]),["auto","fit-content","min-content","max-content"].includes(n.widthUnit)?(0,s.createCommentVNode)("v-if",!0):(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("input",{key:0,"onUpdate:modelValue":t[1]||(t[1]=e=>n.widthValue=e),type:"number",min:"0"},null,512)),[[s.vModelText,n.widthValue,void 0,{number:!0}]])])]),(0,s.createElementVNode)("div",gr,[t[7]||(t[7]=(0,s.createElementVNode)("span",null,"Height",-1)),(0,s.createElementVNode)("div",yr,[(0,s.withDirectives)((0,s.createElementVNode)("select",{"onUpdate:modelValue":t[2]||(t[2]=e=>n.heightUnit=e)},[...t[6]||(t[6]=[(0,s.createStaticVNode)('<option value="px" data-v-f12dc314>px</option><option value="%" data-v-f12dc314>%</option><option value="em" data-v-f12dc314>em</option><option value="rem" data-v-f12dc314>rem</option><option value="vh" data-v-f12dc314>vh</option><option value="vw" data-v-f12dc314>vw</option><option value="auto" data-v-f12dc314>auto</option><option value="fit-content" data-v-f12dc314>fit-content</option><option value="min-content" data-v-f12dc314>min-content</option><option value="max-content" data-v-f12dc314>max-content</option>',10)])],512),[[s.vModelSelect,n.heightUnit]]),["auto","fit-content","min-content","max-content"].includes(n.heightUnit)?(0,s.createCommentVNode)("v-if",!0):(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("input",{key:0,"onUpdate:modelValue":t[3]||(t[3]=e=>n.heightValue=e),type:"number",min:"0"},null,512)),[[s.vModelText,n.heightValue,void 0,{number:!0}]])])])])])}],["__scopeId","data-v-f12dc314"]]),Er={class:"text-color-editor"},wr={name:"TextColorEditor",props:{modelValue:{type:String}},data:()=>({defaultColor:"#000000"}),computed:{textColor:{get(){return this.modelValue||"#000000"},set(e){this.$emit("update:modelValue",e)}}},emits:["update:modelValue"]},_r=(0,x.A)(wr,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",Er,[(0,s.withDirectives)((0,s.createElementVNode)("input",{type:"color",id:"colorPicker","onUpdate:modelValue":t[0]||(t[0]=e=>r.textColor=e)},null,512),[[s.vModelText,r.textColor]])])}],["__scopeId","data-v-73332108"]]),Nr={class:"font-size-editor"},Sr={class:"controls"},Vr={class:"size-control"},Cr=["value"],xr={name:"FontSizeEditor",data:()=>({fontSizeValue:16,fontSizeUnit:"px",defaultSize:"16px",availableUnits:["px","em","rem","pt","pc","in","cm","mm","ex","ch","vw","vh","vmin","vmax","%"],sizePresets:[{label:"Маленький (12px)",value:"12px"},{label:"Средний (16px)",value:"16px"},{label:"Большой (24px)",value:"24px"},{label:"Заголовок (32px)",value:"32px"}]}),computed:{currentFontSize(){return`${this.fontSizeValue}${this.fontSizeUnit}`}},methods:{updateFontSize(){this.$emit("update:modelValue",this.currentFontSize)},resetSize(){const e=this.defaultSize.match(/(\d+\.?\d*)(\D+)/);e?(this.fontSizeValue=parseFloat(e[1]),this.fontSizeUnit=e[2]):(this.fontSizeValue=16,this.fontSizeUnit="px"),this.updateFontSize()},applyPreset(e){const t=e.match(/(\d+\.?\d*)(\D+)/);t&&(this.fontSizeValue=parseFloat(t[1]),this.fontSizeUnit=t[2],this.updateFontSize())},parseSize(e){const t=e.match(/(\d+\.?\d*)(\D+)/);return t?{value:parseFloat(t[1]),unit:t[2]}:null},init(){const e=this.parseSize(this.modelValue);e&&(this.fontSizeValue=e.value,this.fontSizeUnit=e.unit,this.defaultSize=this.modelValue)}},emits:["update:modelValue"],props:{modelValue:{type:String,default:"16px",validator:e=>/^\d*\.?\d+(px|em|rem|pt|pc|in|cm|mm|ex|ch|vw|vh|vmin|vmax|%)$/.test(e)}},watch:{modelValue(){this.init()}},created(){this.init()}},Br=(0,x.A)(xr,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",Nr,[(0,s.createElementVNode)("div",Sr,[(0,s.createElementVNode)("div",Vr,[(0,s.withDirectives)((0,s.createElementVNode)("input",{type:"number",id:"fontSizeValue","onUpdate:modelValue":t[0]||(t[0]=e=>a.fontSizeValue=e),min:"0",step:"0.1",onInput:t[1]||(t[1]=(...e)=>r.updateFontSize&&r.updateFontSize(...e))},null,544),[[s.vModelText,a.fontSizeValue,void 0,{number:!0}]]),(0,s.withDirectives)((0,s.createElementVNode)("select",{"onUpdate:modelValue":t[2]||(t[2]=e=>a.fontSizeUnit=e),onChange:t[3]||(t[3]=(...e)=>r.updateFontSize&&r.updateFontSize(...e))},[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(a.availableUnits,e=>((0,s.openBlock)(),(0,s.createElementBlock)("option",{value:e,key:e},(0,s.toDisplayString)(e),9,Cr))),128))],544),[[s.vModelSelect,a.fontSizeUnit]])])])])}],["__scopeId","data-v-f859e98c"]]),$r={class:"textwrap w100 tcenter"},Ir={class:"textwrap w100 tcenter"},Dr={key:0,style:{"min-width":"256px",height:"100%",display:"flex","justify-content":"center","align-items":"center"}},Tr={tweens:"move-up"},Ar={name:"ActionsLib",props:{selected:{type:Object},regbusy:!1,register:{type:Array}},data:()=>({current:null}),computed:{actions(){return this.$app.actions}},emits:["selectItem"],methods:{onAssetEdit(e,t){this.current[e],this.current[e]=t},getTypeIcon:e=>Tr[e],checkType:e=>typeof e,select(e){this.current=e,this.$emit("selectItem",e)},endEdit(){this.$refs.assetEditor.end()}}},Mr=(0,x.A)(Ar,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("spinner"),i=(0,s.resolveComponent)("queryform"),c=(0,s.resolveComponent)("Selectable"),d=(0,s.resolveDirective)("tooltip");return(0,s.openBlock)(),(0,s.createBlock)(s.Teleport,{to:".modal-content"},[(0,s.createVNode)(c,{onSelectItem:r.select,list:r.actions.library,selected:o.selected},(0,s.createSlots)({item:(0,s.withCtx)(({item:e})=>[(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("div",$r,[(0,s.createTextVNode)((0,s.toDisplayString)(e.component),1)])),[[d,e.component]]),(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("div",Ir,[(0,s.createTextVNode)((0,s.toDisplayString)(e.type),1)])),[[d,e.type]])]),_:2},[o.register?{name:"selected",fn:(0,s.withCtx)(({item:e})=>[o.regbusy?((0,s.openBlock)(),(0,s.createElementBlock)("div",Dr,[(0,s.createVNode)(l)])):((0,s.openBlock)(),(0,s.createBlock)(i,{key:1,values:o.register},null,8,["values"]))]),key:"0"}:void 0]),1032,["onSelectItem","list","selected"])])}]]),Or={class:"itemElement"},jr={class:"itemrow"},Pr={props:{item:{type:Object}}},Rr=(0,x.A)(Pr,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",Or,[(0,s.createElementVNode)("div",jr,(0,s.toDisplayString)(o.item.name),1)])}]]),Lr={class:"container"},Fr={class:"list-container"},Ur={class:"list-head"},zr={class:"list-slider"},Hr={class:"grid"},qr=["onClick"],Gr={class:"grid-item"},Wr={class:"textwrap tcenter w100"},Kr={class:"textwrap w100"},Yr={style:{display:"flex","justify-content":"center"}},Xr={key:0,class:"extension"},Jr={name:"ItemsLib",props:{selected:{type:Object},list:{type:Array},head:{type:Object,default:{}},styles:{type:Object,default:{item:{width:"72px",height:"72px"}}},icons:{type:Object,default:{}},options:{type:Object,default:{id:"uid",name:"name",icon:"icon",icontip:"tooltip"}}},mounted(){this.$emit("open")}},Qr=(0,x.A)(Jr,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon"),i=(0,s.resolveDirective)("tooltip");return(0,s.openBlock)(),(0,s.createElementBlock)("div",Lr,[(0,s.createElementVNode)("div",Fr,[(0,s.createElementVNode)("div",Ur,[(0,s.renderSlot)(e.$slots,"head",(0,s.normalizeProps)((0,s.guardReactiveProps)(o.head)),()=>[(0,s.createElementVNode)("div",null,(0,s.toDisplayString)(o.head.title),1)],!0)]),(0,s.createElementVNode)("div",zr,[(0,s.createElementVNode)("div",Hr,[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(o.list,(t,n)=>((0,s.openBlock)(),(0,s.createElementBlock)("div",{onClick:o=>e.$emit("selected",t),class:(0,s.normalizeClass)([{selected:o.selected===t},"grid-element"])},[(0,s.renderSlot)(e.$slots,"item",{item:t},()=>[(0,s.createElementVNode)("div",Gr,[(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("div",Wr,[(0,s.createTextVNode)((0,s.toDisplayString)(t[o.options.name]||t[o.options.id]),1)])),[[i,t[o.options.name]||t[o.options.id]]]),(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("div",Kr,[(0,s.createTextVNode)((0,s.toDisplayString)(t.url),1)])),[[i,t.url]]),(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("div",Yr,[(0,s.createVNode)(l,{value:o.icons[t.type],size:"2em"},null,8,["value"])])),[[i,t[o.options.icontip]]])])],!0)],10,qr))),256))])])]),o.selected?((0,s.openBlock)(),(0,s.createElementBlock)("div",Xr,[(0,s.renderSlot)(e.$slots,"edit",{selected:o.selected},()=>[(0,s.createTextVNode)((0,s.toDisplayString)(e.$slots),1)],!0)])):(0,s.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-045cf3e6"]]),Zr={class:"form-container"},el={class:"form-column"},tl={class:"row"},ol={class:"rowvalue"},nl={key:0},al=["value"],sl={key:0,class:"row"},rl={class:"rowvalue"},ll=["value"],il={key:1},cl={class:"row"},dl={class:"rowvalue"},pl={key:1,class:"row"},ul={class:"rowvalue"},ml={key:3},hl={key:0},fl={name:"ActionEdit",data:()=>({selectedGroup:null}),props:{selected:{type:Object},progress:{type:Number}},computed:{types(){return this.$app.actions.library.filter(e=>e.type===this.selectedGroup)},groups(){return this.$app.actions.groups},selectedType(){return this.$app.actions.library.find(e=>e.component===this.selected.type)},selectType:{get(){return this.selected.type},set(e){this.$emit("change:type",e)}}},methods:{onUpdate(e,t){this.$emit("edit",e,t)},end(){this.$emit("edit","name",this.$refs.nameeditor.endEdit()),this.$emit("edit","url",this.$refs.urleditor.endEdit())}},mounted(){this.selectedGroup=this.selected.group}},vl=(0,x.A)(fl,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("LabelEdit");return(0,s.openBlock)(),(0,s.createElementBlock)("div",Zr,[(0,s.createElementVNode)("div",el,[(0,s.createElementVNode)("div",tl,[t[3]||(t[3]=(0,s.createElementVNode)("div",{class:"rowlabel"},"Group:",-1)),(0,s.createElementVNode)("div",ol,[o.selected.uid?((0,s.openBlock)(),(0,s.createElementBlock)("div",nl,(0,s.toDisplayString)(o.selected.group),1)):(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("select",{key:1,"onUpdate:modelValue":t[0]||(t[0]=e=>a.selectedGroup=e)},[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(r.groups,(e,t)=>((0,s.openBlock)(),(0,s.createElementBlock)("option",{key:t,value:e},(0,s.toDisplayString)(e),9,al))),128))],512)),[[s.vModelSelect,a.selectedGroup]])])]),a.selectedGroup?((0,s.openBlock)(),(0,s.createElementBlock)("div",sl,[t[4]||(t[4]=(0,s.createElementVNode)("div",{class:"rowlabel"},"Type:",-1)),(0,s.createElementVNode)("div",rl,[o.selected.uid?((0,s.openBlock)(),(0,s.createElementBlock)("div",il,(0,s.toDisplayString)(r.selectedType.name),1)):(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("select",{key:0,"onUpdate:modelValue":t[1]||(t[1]=e=>r.selectType=e)},[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(r.types,(e,t)=>((0,s.openBlock)(),(0,s.createElementBlock)("option",{key:t,value:e.component},(0,s.toDisplayString)(e.name),9,ll))),128))],512)),[[s.vModelSelect,r.selectType]])])])):(0,s.createCommentVNode)("v-if",!0),(0,s.createElementVNode)("div",cl,[t[5]||(t[5]=(0,s.createElementVNode)("div",{class:"rowlabel"},"Name:",-1)),(0,s.createElementVNode)("div",dl,[(0,s.createVNode)(l,{style:{width:"100%"},ref:"nameeditor","onUpdate:modelValue":t[2]||(t[2]=t=>e.$emit("edit","name",t)),modelValue:o.selected.name},null,8,["modelValue"])])]),o.selected.description?((0,s.openBlock)(),(0,s.createElementBlock)("div",pl,[t[6]||(t[6]=(0,s.createElementVNode)("div",{class:"rowlabel"},"Description:",-1)),(0,s.createElementVNode)("div",ul,(0,s.toDisplayString)(o.selected.description),1)])):(0,s.createCommentVNode)("v-if",!0),o.selected.type?((0,s.openBlock)(),(0,s.createBlock)((0,s.resolveDynamicComponent)(o.selected.type),(0,s.mergeProps)({key:2},o.selected,{onUpdate:r.onUpdate}),null,16,["onUpdate"])):((0,s.openBlock)(),(0,s.createElementBlock)("div",ml," You need to save before editing "))]),o.progress>0?((0,s.openBlock)(),(0,s.createElementBlock)("div",hl,(0,s.toDisplayString)(o.progress),1)):(0,s.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-25cdeb34"]]),gl={class:"pitem"},yl={class:"textwrap w100 tcenter"},bl={style:{display:"flex","justify-content":"center"},class:"tcenter"},kl={props:{item:{type:Object}},computed:{date(){return new Date(this.item.created).toLocaleString()}}},El=(0,x.A)(kl,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveDirective)("tooltip");return(0,s.openBlock)(),(0,s.createElementBlock)("div",gl,[(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("div",yl,[(0,s.createTextVNode)((0,s.toDisplayString)(o.item.name),1)])),[[l,o.item.name]]),(0,s.createElementVNode)("div",bl,(0,s.toDisplayString)(r.date),1)])}],["__scopeId","data-v-a84bc2fe"]]),wl={class:"container"},_l={class:"block"},Nl={class:"label"},Sl={class:"value"},Vl={data:()=>({result:""}),props:{text:{type:String}},emits:["update:text"]},Cl=(0,x.A)(Vl,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",wl,[(0,s.createElementVNode)("div",_l,[(0,s.createElementVNode)("div",Nl,(0,s.toDisplayString)(o.text),1),(0,s.createElementVNode)("div",Sl,[(0,s.withDirectives)((0,s.createElementVNode)("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>a.result=e),onInput:t[1]||(t[1]=t=>e.$emit("update:text",a.result))},null,544),[[s.vModelText,a.result]])])])])}],["__scopeId","data-v-7a7463f6"]]),xl={class:"container"},Bl={class:"block"},$l={class:"label"},Il={data:()=>({result:""}),props:{text:{type:String}}},Dl=(0,x.A)(Il,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",xl,[(0,s.createElementVNode)("div",Bl,[(0,s.createElementVNode)("div",$l,(0,s.toDisplayString)(o.text),1)])])}],["__scopeId","data-v-11e695e2"]]),Tl={class:"form-group"},Al=["disabled"],Ml={key:0,class:"form-group"},Ol=["disabled"],jl={key:1,class:"form-group"},Pl=["disabled"],Rl={key:2,class:"form-group"},Ll=["disabled"],Fl=["disabled"],Ul={class:"form-actions"},zl=["disabled"],Hl=["disabled"],ql={key:3,class:"helper-actions"},Gl={key:4,class:"info-message"},Wl={key:5,class:"error-message"},Kl={__name:"auth",emits:["success"],setup(e,{emit:t}){const o=so().default||so(),n=t,a=(0,s.ref)("login"),r=(0,s.ref)(!1),l=(0,s.ref)(""),i=(0,s.ref)(""),c=(0,s.reactive)({email:"",password:"",code:"",newPassword:"",confirmPassword:""}),d=(0,s.computed)(()=>{switch(a.value){case"login":return"Login";case"recover":return"Отправить код";case"verify":return"Подтвердить код";case"reset":return"Установить пароль"}}),p=(0,s.computed)(()=>"login"===a.value?"Cancel":"Назад"),u=(0,s.computed)(()=>{switch(a.value){case"login":return"Вход...";case"recover":return"Отправка...";case"verify":return"Проверка...";case"reset":return"Сохранение..."}});function m(){f(),a.value="recover",c.password="",c.code="",c.newPassword="",c.confirmPassword=""}function h(){f(),"login"===a.value?(c.email="",c.password=""):(a.value="login",c.code="",c.newPassword="",c.confirmPassword="")}function f(){l.value="",i.value=""}async function v(){if(f(),c.email)try{if(r.value=!0,"login"===a.value){const e=await fetch("/auth/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:c.email,password:c.password})});if(!e.ok)throw await g(e);const t=await e.json();n("success",t)}else if("recover"===a.value){const e=await fetch("/auth/recovery",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:c.email})});if(!e.ok)throw await g(e);i.value="Код отправлен на указанный email",a.value="verify"}else if("verify"===a.value){if(!c.code)return void(l.value="Код обязателен");const e=await fetch("/auth/check",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:c.email,code:c.code})});if(!e.ok)throw await g(e);i.value="Код подтверждён. Введите новый пароль.",a.value="reset"}else if("reset"===a.value){if(!c.newPassword||!c.confirmPassword)return void(l.value="Заполните оба поля пароля");if(c.newPassword!==c.confirmPassword)return void(l.value="Пароли не совпадают");console.log(c.newPassword),await o.app.setPassword(c.newPassword),i.value="Пароль изменён.",a.value="login",c.password="",c.newPassword="",c.confirmPassword="",c.code=""}}catch(e){l.value="string"==typeof e?e:e?.message||"Ошибка сервера"}finally{r.value=!1}else l.value="Email обязателен"}async function g(e){try{const t=await e.json();return t?.message||t?.error||`HTTP ${e.status}`}catch{return`HTTP ${e.status}`}}return(e,t)=>((0,s.openBlock)(),(0,s.createElementBlock)("form",{onSubmit:(0,s.withModifiers)(v,["prevent"]),class:"login-form"},[(0,s.createElementVNode)("div",Tl,[t[5]||(t[5]=(0,s.createElementVNode)("label",{for:"email"},"Email:",-1)),(0,s.withDirectives)((0,s.createElementVNode)("input",{id:"email",type:"email","onUpdate:modelValue":t[0]||(t[0]=e=>c.email=e),required:"",placeholder:"Введите email",disabled:r.value},null,8,Al),[[s.vModelText,c.email]])]),(0,s.createCommentVNode)(" LOGIN: email + password "),"login"===a.value?((0,s.openBlock)(),(0,s.createElementBlock)("div",Ml,[t[6]||(t[6]=(0,s.createElementVNode)("label",{for:"password"},"Пароль:",-1)),(0,s.withDirectives)((0,s.createElementVNode)("input",{id:"password",type:"password","onUpdate:modelValue":t[1]||(t[1]=e=>c.password=e),required:"",placeholder:"Введите пароль",disabled:r.value},null,8,Ol),[[s.vModelText,c.password]])])):(0,s.createCommentVNode)("v-if",!0),(0,s.createCommentVNode)(" VERIFY CODE "),"verify"===a.value?((0,s.openBlock)(),(0,s.createElementBlock)("div",jl,[t[7]||(t[7]=(0,s.createElementVNode)("label",{for:"code"},"Код из письма:",-1)),(0,s.withDirectives)((0,s.createElementVNode)("input",{id:"code",type:"text","onUpdate:modelValue":t[2]||(t[2]=e=>c.code=e),required:"",placeholder:"Введите код",disabled:r.value},null,8,Pl),[[s.vModelText,c.code]])])):(0,s.createCommentVNode)("v-if",!0),(0,s.createCommentVNode)(" RESET PASSWORD "),"reset"===a.value?((0,s.openBlock)(),(0,s.createElementBlock)("div",Rl,[t[8]||(t[8]=(0,s.createElementVNode)("label",{for:"newPassword"},"Новый пароль:",-1)),(0,s.withDirectives)((0,s.createElementVNode)("input",{id:"newPassword",type:"password","onUpdate:modelValue":t[3]||(t[3]=e=>c.newPassword=e),required:"",placeholder:"Введите новый пароль",disabled:r.value},null,8,Ll),[[s.vModelText,c.newPassword]]),t[9]||(t[9]=(0,s.createElementVNode)("label",{for:"confirmPassword",style:{"margin-top":"8px"}},"Повтор пароля:",-1)),(0,s.withDirectives)((0,s.createElementVNode)("input",{id:"confirmPassword",type:"password","onUpdate:modelValue":t[4]||(t[4]=e=>c.confirmPassword=e),required:"",placeholder:"Повторите пароль",disabled:r.value},null,8,Fl),[[s.vModelText,c.confirmPassword]])])):(0,s.createCommentVNode)("v-if",!0),(0,s.createElementVNode)("div",Ul,[(0,s.createElementVNode)("button",{type:"submit",disabled:r.value},(0,s.toDisplayString)(r.value?u.value:d.value),9,zl),(0,s.createCommentVNode)(" Cancel / Back "),(0,s.createElementVNode)("button",{type:"button",onClick:h,disabled:r.value},(0,s.toDisplayString)(p.value),9,Hl)]),"login"===a.value?((0,s.openBlock)(),(0,s.createElementBlock)("div",ql,[(0,s.createElementVNode)("a",{href:"#",onClick:(0,s.withModifiers)(m,["prevent"])},"Забыли пароль?")])):(0,s.createCommentVNode)("v-if",!0),i.value?((0,s.openBlock)(),(0,s.createElementBlock)("div",Gl,(0,s.toDisplayString)(i.value),1)):(0,s.createCommentVNode)("v-if",!0),l.value?((0,s.openBlock)(),(0,s.createElementBlock)("div",Wl,(0,s.toDisplayString)(l.value),1)):(0,s.createCommentVNode)("v-if",!0)],32))}},Yl=(0,x.A)(Kl,[["__scopeId","data-v-867ec93e"]]),Xl={props:{text:{type:Object,default:{value:"TEXT",size:"1em"}},path:{type:String},visible:{type:Boolean},styles:{type:Object}},mounted(){this.$emit("mounted",{path:this.path,element:this.$refs.container})}},Jl=(0,x.A)(Xl,[["render",function(e,t,o,n,a,r){return(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("div",{ref:"container",class:"cardroot",style:(0,s.normalizeStyle)({fontSize:o.text.size,...o.styles})},(0,s.toDisplayString)(o.text.value),5)),[[s.vShow,o.visible]])}],["__scopeId","data-v-a3d9ff12"]]);var Ql=o(196);const Zl={class:"toastcontainer"},ei={class:"alert"},ti={class:"text"},oi={class:"buttons"},ni=["onClick"],ai={name:"QueryToast",props:{icon:{type:String,default:"notification"},message:{type:String,default:""},type:{type:String,default:"info"},buttons:{type:Array}}},si=(0,x.A)(ai,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon");return(0,s.openBlock)(),(0,s.createElementBlock)("div",Zl,[(0,s.createElementVNode)("div",ei,[(0,s.createVNode)(l,{class:(0,s.normalizeClass)(`${o.type}icon`),size:"3em",value:o.icon},null,8,["class","value"]),(0,s.createElementVNode)("span",ti,(0,s.toDisplayString)(o.message),1)]),(0,s.createElementVNode)("div",oi,[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(o.buttons,e=>((0,s.openBlock)(),(0,s.createElementBlock)("button",{onClick:e.handler,class:"btn"},(0,s.toDisplayString)(e.label),9,ni))),256))])])}]]),ri=ao.default||ao;let li=0;const ii=(0,s.reactive)({list:[],add({message:e,icon:t,onclick:o,timehide:n=!0,type:a,...r},l=(0,s.markRaw)(Tn)){const i=(0,s.reactive)({id:li++,data:{message:e,icon:t,type:a,...r},component:l});return n&&(i.timeout=setTimeout(()=>{ii.remove(i.id)},3e3)),i.onclick=o||ii.remove.bind(this,i.id),ii.list.push(i),i},remove(e){for(let t=ii.list.length-1;t>=0;t--)ii.list[t].id===e&&ii.list.splice(t,1)}});ri.On("init",()=>{window.vue.component("QueryToast",si)});const ci=ii,di=(0,s.ref)(!1),pi=(0,s.reactive)({isVisible:!1,header:null,content:null,footer:null,values:null,open({header:e,content:t,footer:o,...n}){pi.header=e||{},pi.content=t||{},pi.footer=o||{},pi.values={closable:!1,...n},di.value=!0},close(e){e||(di.value=!1)},get isVisible(){return di.value},queryText(e,t,o){pi.open({header:{value:e.title,handler:pi.close},content:{component:"queryform",props:e,events:{"update:text":o}},footer:{buttons:[...t.map(t=>(t.handler=()=>{t.callback(e.answer),pi.close()},t)),{label:"Закрыть",class:"additional",handler:pi.close}]}})},confirmReq(e,t){pi.open({header:{value:e.title,handler:pi.close},content:{component:"confirmform",props:e},footer:{buttons:[...t.map(t=>(t.handler=()=>{t.callback(e.answer),pi.close()},t))]}})}}),ui=pi,mi=ao.default||ao;class hi extends Error{constructor(){super("Not all required parameters are specified."),this.isReqError=!0}}class fi extends Error{constructor(){super("This module has already been added."),this.isExistError=!0}}const vi=[{name:"engine",entry:"/editor/engine/mf.js",index:"engine",system:!0},{name:"tools",entry:"/mods/tools/mf.js",index:"tools",system:!0}],gi=[],yi=[{uid:"gsap:/mods/gsap/mf.js",title:"GSAP Animation",description:'<p>The module provides element transformations: movement, rotation, and scale.</p>\n        <p>Use GSAP:</p>\n        <p><a href="https://github.com/greensock/GSAP" target="blank">https://github.com/greensock/GSAP</a></p>',name:"gsapmod",entry:"/mods/gsap/mf.js",index:"gsap",global:!0},{uid:"troika:/mods/troika/mf.js",title:"Troika Text",description:'<p>Module  provides high quality text rendering in Three.js scenes, using signed distance fields (SDF) and antialiasing using standard derivatives.</p>\n        <p>Use Troika Text for Three.js:</p>\n        <p><a href="https://github.com/protectwise/troika/tree/main/packages/troika-three-text" target="blank">https://github.com/protectwise/troika/tree/main/packages/troika-three-text</a></p>',name:"troika",entry:"/mods/troika/mf.js",index:"troika",global:!0},{uid:"textmesh:/mods/textmesh/mf.js",title:"Text Mesh",description:'<p>Module use small library for building VR user interfaces. The objects it creates are three.object3Ds, usable directly in a three.js scene like any other Object3D.</p>\n        <p>Use three-mesh-ui:</p>\n        <p><a href="https://github.com/felixmariotto/three-mesh-ui" target="blank">https://github.com/felixmariotto/three-mesh-ui</a></p>',name:"textmesh",entry:"/mods/textmesh/mf.js",index:"textmesh",global:!0},{uid:"particle:/mods/particle/mf.js",title:"Particles",description:"<p>Particle system </p>",name:"particle",entry:"/mods/particle/mf.js",index:"particle",global:!0}],bi={};async function ki(e){if(e.uid=`${e.index}:${e.entry}`,!e.name?.length||!e.index?.length||!e.entry?.length)throw new hi;if(gi.find(t=>t.uid===e.uid))throw new fi;try{(0,Ql.registerRemotes)([{...e}]),await(0,Ql.loadRemote)(`${e.name}/${e.index}`)}catch(e){throw e}const t=await async function(e){const t={id:e.entry,...e};return await Wo.upsertItemProperties("modules",t.uid,t),t}(e);return gi.push(t),t}function Ei(){const e=(0,s.reactive)({selected:null,list:gi,processed:!1,styles:{item:{width:"128px",height:"128px"}},title:"Project modules"}),t={label:"Add",class:"secondary",hidden:(0,s.computed)(()=>!e.selected||e.selected.uid||e.processed),handler:async()=>{e.processed=!0;try{e.selected=await ki(e.selected)}catch(t){return t.isReqError?ci.add({message:"Not all required fields are filled in"}):ci.add({message:"Error adding module"}),void(e.processed=!1)}ci.add({message:"The module has been loaded successfully."})}},o={label:"Registration",class:"secondary",hidden:(0,s.computed)(()=>e.selected&&!e.selected.uid),handler:()=>{e.selected=(0,s.reactive)({name:"",entry:"",index:""})}},n={label:"Cancel",class:"primary",hidden:(0,s.computed)(()=>!e.selected),handler:()=>{e.selected=null}},a={label:"Remove",class:"additional",hidden:(0,s.computed)(()=>!e.selected?.id),handler:()=>{console.log(e.selected);const t=`${e.selected.index}:${e.selected.entry}`,o=gi.findIndex(e=>`${e.index}:${e.entry}`===t);if(o>=0){const t=gi.splice(o,1);mi.toasts.add({message:"The module has been removed and will not be loaded the next time you use it.\nPlease refresh the page to take effect."}),e.selected=null,Wo.deleteItem("modules",t[0].index)}}},r={label:"Close",class:"primary",handler:async()=>{ui.close()}},l=(0,s.reactive)([o,a,t,n,r]);ui.open({header:{value:"Managing modules",handler:()=>{ui.close()}},content:{component:"ItemsLib",props:e,events:{selected:t=>{e.selected=t,console.log(e.selected)}},slots:{item:{component:"ModuleItem"},edit:{component:"ModuleEdit",props:e,events:{edit:(t,o)=>{e.selected[t]=o}}}}},footer:{buttons:l}})}const wi=(0,s.reactive)({init:async function(){(0,Ql.createInstance)({name:"slider.editor",remotes:[]}),gi.length=0,await(0,Ql.registerRemotes)([...vi]),await Promise.all(vi.map(e=>new Promise(t=>{(0,Ql.loadRemote)(`${e.name}/${e.index}`).then(o=>{bi[e.name]=o,t()})})))},showLib:Ei,getMod:function(e){return bi[e]},loadUserModules:async function(e){await(0,Ql.registerRemotes)(e);const t=e.map(e=>new Promise(t=>{(0,Ql.loadRemote)(`${e.name}/${e.index}`).then(o=>{gi.push({name:e.name,index:e.index,entry:e.entry,title:e.title||e.name,id:e.id,uid:e.uid,global:e.global,description:e.description}),t()})}));await Promise.all(t),console.log(`UserModules loaded ${t.length}`)},AddModules:async function(e){for(let t=0;t<e.length;t++){const o=e[t];try{await ki(o)}catch(e){continue}}}});mi.On("init",()=>{mi.menu.hierarhy.list.push({icon:"books",tooltip:"Modules",handler:Ei}),window.vue.component("ModuleEdit",(0,s.defineAsyncComponent)(async()=>{const e=await o.e(232).then(o.bind(o,232));return e.default||e})),window.vue.component("ModuleItem",(0,s.defineAsyncComponent)(async()=>{const e=await o.e(920).then(o.bind(o,920));return e.default||e})),window.vue.component("ModuleView",(0,s.defineAsyncComponent)(async()=>{const e=await o.e(833).then(o.bind(o,833));return e.default||e})),mi.menu.addMenu("app",{path:"app.list.libraries",icon:"",text:"Libraries",link:"#",children:[{path:"app.list.libraries.modules",icon:"books",text:"Modules",handler:async()=>{!function(){const e=(0,s.reactive)({selected:null,list:yi,processed:!1,canadd:!1,styles:{item:{width:"128px",height:"128px"}},head:{title:""}}),t={label:"Add to project",class:"secondary",hidden:(0,s.computed)(()=>e.processed||!e.selected||!e.canadd),handler:async()=>{e.processed=!0,e.canadd=-1===gi.findIndex(t=>t.uid===e.selected.uid);try{await ki({...e.selected})}catch(t){return t.isExistError?ci.add({message:t.message}):ci.add({message:"Error adding module"}),void(e.processed=!1)}ci.add({message:"The module has been added to project."})}},o={label:"Close",class:"primary",handler:async()=>{ui.close()}},n=(0,s.reactive)([t,o]);ui.open({header:{value:"Global modules",handler:()=>{ui.close()}},content:{component:"ItemsLib",props:e,events:{selected:t=>{e.selected=t,e.canadd=-1===gi.findIndex(t=>t.uid===e.selected.uid),console.log(e.selected,e.canadd)}},slots:{head:{component:"SearchFilter"},item:{component:"ModuleItem"},edit:{component:"ModuleView",props:e}}},footer:{buttons:n}})}()}}]})});const _i=wi,Ni=class{constructor(){this._events={"*":[]}}subs(e,t,o){null==this._events[e]&&(this._events[e]=[]),this._events[e].push({handler:o,once:t})}on(e,t){this.subs(e,!1,t)}once(e,t){this.subs(e,!0,t)}off(e,t){const o=this._events[e];if(o){for(let e=o.length-1;e>=0;e--)o[e].handler===t&&o.splice(e,1);0===o.length&&delete this._events[e]}}clear(e){this._events[e]=[]}clearAll(){this._events={"*":[]}}emit(e,...t){const o=[];this._events[e]&&o.push(...this._events[e]),this._events["*"].length&&o.push(...this._events["*"].map(t=>({handler:t.handler.bind(this,e),once:t.once})));for(let e=o.length-1;e>=0;e--){const n=o[e];n.handler.apply(null,t),n.once&&o.splice(e,1)}}addEventListener(e,t){this.on(e,t)}removeEventListener(e,t){this.off(e,t)}},Si={class:"importer"},Vi={class:"row"},Ci={class:"row"},xi={class:"label"},Bi={class:"row"},$i={class:"label"},Ii={class:"row"},Di={class:"label"},Ti={class:"row"},Ai={class:"label"},Mi={name:"Importer",data:()=>({merge:!1,assets:new Set,models:new Set,slides:new Set,modules:new Set}),methods:{onChangeElements(e){e.isSelected?this.models.add(e.path):this.models.delete(e.path),this.$emit("changelist",{assets:this.assets,models:this.models,slides:this.slides,modules:this.modules})},onChangeModules(e){e.isSelected?this.modules.add(e.name):this.modules.delete(e.name),this.$emit("changelist",{assets:this.assets,models:this.models,slides:this.slides,modules:this.modules})},onChangeSlides(e){e.isSelected?this.slides.add(e.uid):this.slides.delete(e.uid),this.$emit("changelist",{assets:this.assets,models:this.models,slides:this.slides,modules:this.modules})},onChangeAssets(e){e.isgroup?e.isSelected?e.children.map(e=>this.assets.add(e.uid)):this.assets.clear():e.isSelected?this.assets.add(e.uid):this.assets.delete(e.uid),this.$emit("changelist",{assets:this.assets,models:this.models,slides:this.slides,modules:this.modules})}},props:{project:{type:Object}},components:{TreeView:at},computed:{assetsTree(){return this.project.assets.reduce((e,t)=>{let o=e.find(e=>e.type===t.type);return o||(o={isgroup:!0,type:t.type,children:[],uid:t.type},e.push(o)),o.children.push(t),e},[])}}},Oi=(0,x.A)(Mi,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("TreeView");return(0,s.openBlock)(),(0,s.createElementBlock)("div",Si,[(0,s.createElementVNode)("div",Vi,[(0,s.createElementVNode)("div",null,[t[2]||(t[2]=(0,s.createTextVNode)("Импортировать в текущий проект ",-1)),(0,s.withDirectives)((0,s.createElementVNode)("input",{type:"checkbox",onChange:t[0]||(t[0]=t=>e.$emit("options",{merge:a.merge})),"onUpdate:modelValue":t[1]||(t[1]=e=>a.merge=e)},null,544),[[s.vModelCheckbox,a.merge]])])]),(0,s.createElementVNode)("div",Ci,[t[3]||(t[3]=(0,s.createElementVNode)("div",{class:"title"},"Assets",-1)),(0,s.createElementVNode)("div",null,[(0,s.createVNode)(l,{childsFiled:"children",tree:r.assetsTree,onChangeSelect:r.onChangeAssets},{label:(0,s.withCtx)(({node:e})=>[(0,s.createElementVNode)("div",xi,(0,s.toDisplayString)(e.name||e.uid),1)]),_:1},8,["tree","onChangeSelect"])])]),(0,s.createElementVNode)("div",Bi,[t[4]||(t[4]=(0,s.createElementVNode)("div",{class:"title"},"Модули",-1)),(0,s.createElementVNode)("div",null,[(0,s.createVNode)(l,{childsFiled:"childrenz",tree:o.project.modules,onChangeSelect:r.onChangeModules},{label:(0,s.withCtx)(({node:e})=>[(0,s.createElementVNode)("div",$i,(0,s.toDisplayString)(e.name||e.uid),1)]),_:1},8,["tree","onChangeSelect"])])]),(0,s.createElementVNode)("div",Ii,[t[5]||(t[5]=(0,s.createElementVNode)("div",{class:"title"},"Элементы",-1)),(0,s.createElementVNode)("div",null,[(0,s.createVNode)(l,{childsFiled:"childrenz",tree:o.project.models,onChangeSelect:r.onChangeElements},{label:(0,s.withCtx)(({node:e})=>[(0,s.createElementVNode)("div",Di,(0,s.toDisplayString)(e.name||e.uid),1)]),_:1},8,["tree","onChangeSelect"])])]),(0,s.createElementVNode)("div",Ti,[t[6]||(t[6]=(0,s.createElementVNode)("div",{class:"title"},"Слайды",-1)),(0,s.createElementVNode)("div",null,[(0,s.createVNode)(l,{childsFiled:"childrenz",tree:o.project.slides,onChangeSelect:r.onChangeSlides},{label:(0,s.withCtx)(({node:e})=>[(0,s.createElementVNode)("div",Ai,(0,s.toDisplayString)(e.name||e.uid),1)]),_:1},8,["tree","onChangeSelect"])])])])}]]),ji=ao.default||ao,Pi=new Ni;let Ri;async function Li(e,t,o){if(!t)return;if(o[t.uid])return o[t.uid];const n=t.parent;let a=o[n];a||(a=await Li(e,e.find(e=>e.uid===n),o));try{const e=await Fi(t,a);return o[e.uid]=e,e}catch(e){console.warn(e)}}async function Fi(e,t){const o=await Ri.BuildElement(e,t||ji.engine.getManager().Root);if(!o)return;o.name=e.name||e.uid,o.states=e.states||{},o.properties=e.properties||{},o.actions=e.actions||[],o.paths=e.paths??o.paths,o.path=o.paths.join(".");const n=(0,s.reactive)(o);return(t||Hi).add(n),Pi.emit("create",n),n}async function Ui(e){try{await Wo.upsertItemProperties("models",e.uid,JSON.parse(Mt({name:e.name,paths:e.paths,path:e.paths.join("."),parent:e.parent?.uid||null,actions:e.actions||[],props:e.props||{},properties:e.properties||{},states:e.states,type:e.type,uid:e.uid,assets:e.assets||[]})))}catch(e){console.warn(e)}}function zi(e,t,o=[]){for(let n=0;n<e.length;n++){const a=e[n];a.isElement&&a.states[t]&&o.push(a),a.children||console.warn("No child"),a.children.length&&zi(a.children,t,o)}}const Hi=(0,s.reactive)({add(e){Hi.children.push(e)},uid:null,init:function(e){for(let t=0;t<e.length;t++){const o=e[t];Hi.data[o.uid]=o}Hi.info=Hi.data.info||{name:"Editor"}},info:{name:"Editor"},data:{},load:async function(e){Ri=ji.engine.getFactory();const t={};for(let o=e.length-1;o>=0;o--){const n=e[o],a=await Li(e,n,t),s=e.findIndex(e=>e.uid===a.uid);s>=0&&e.splice(s,1)}},findStates:function(e){const t=[];return zi(Hi.children,e,t),t},getState:function(e,t){return e.states[t]||(e.states[t]={actions:[]},Pi.emit("stateadd",t,e.paths)),e.states[t]},remove:async function e(t){let o=Hi,n=Hi;for(let e=0;e<t.length;e++)o=n,n=o.children.find(o=>o.uid===t[e]);ji.selection.selected===n&&ji.selection.select(null);const a=o.children.findIndex(e=>e===n);if(a>=0){for(let t=0;t<n.children.length;t++){const o=n.children[t];o.isElement&&e(o.paths)}o.children.splice(a,1),n.parent&&n.parent.remove(n),Wo.deleteItem("models",n.uid),Ri.RemoveModel(n.uid),Pi.emit("remove",t,n)}},handleAsset:async function(e){if(ji.slides.actived){if("model"===e.source.type){const t=`${e.source.name||e.source.uid}${Date.now()}`.replace(".","");console.log(e.source.resource);const o=await ji.project.createElement({type:"Object3D",uid:t,parent:e.target?.uid,assets:[{uid:e.source.uid}],paths:[...e.target?.paths||[],t]},e.target);await ji.project.save(o),ji.selection.select(o)}}else ji.toasts.add({message:"Необходимо создать слайд"})},addElement:async function(e){const t={name:"New Element",type:"Group"};let o;t.uid=`Element${Date.now()}`,t.paths=[],e&&e.isElement&&(o=e,t.paths.push(...e.paths)),t.paths.push(t.uid),t.path=t.paths.join("."),ji.modal.open({header:{value:`Add ${o?" child element to "+o.name||0:" new element to scene"}`,handler:()=>{ji.modal.close()}},content:{component:"ElementAdd",props:{parent:e,modelValue:t},events:{"update:modelValue":e=>{Object.keys(e).forEach(o=>{t[o]=e[o]})}}},footer:{buttons:[{label:"Add",class:"secondary",handler:async()=>{const e=await Fi(t,o);e&&await Ui(e),ji.modal.close()}},{label:"Cancel",class:"primary",handler:async()=>{ji.modal.close()}}]}})},createElement:Fi,save:Ui,find:function(e){let t=Hi;for(let o=0;o<e.length;o++)t=t.children.find(t=>t.uid===e[o]);return t},findObjectsByType:function(e){const t=[];return function o(n){n instanceof e&&t.push(n.data),n.children&&Array.isArray(n.children)&&n.children.forEach(e=>o(e))}(Hi),t},exportToJson:async function(){const e=await Wo.exportToJson(Hi.uid),t=new Blob([JSON.stringify(e)],{type:"application/json"}),o=`project${Hi.uid}.json`;if(window.navigator.msSaveOrOpenBlob)window.navigator.msSaveBlob(t,o);else{const e=window.document.createElement("a");e.href=window.URL.createObjectURL(t),e.download=o,e.style="display: none",e.click()}},importProject:async function(){try{const e=await function(e=".json"){return new Promise(t=>{const o=document.createElement("input");o.type="file",o.accept=e,o.style.display="none",o.addEventListener("change",()=>{o.files&&o.files[0]&&t(o.files[0]),document.body.removeChild(o)}),document.body.appendChild(o),o.click()})}(),t=await function(e){return new Promise((t,o)=>{if(!e.name.endsWith(".json"))return void o(new Error("Выберите файл с расширением .json"));const n=new FileReader;n.onload=e=>{try{const o=JSON.parse(e.target.result);t(o)}catch(e){o(new Error("Ошибка парсинга JSON: "+e.message))}},n.onerror=()=>{o(new Error("Ошибка чтения файла"))},n.readAsText(e)})}(e);(0,s.reactive)({actions:{},assets:{},elements:{},slides:{},modules:{}}),await Wo.addItems("actions",t.actions),await Wo.addItems("assets",t.assets),await Wo.addItems("models",t.models),await Wo.addItems("slides",t.slides),await Wo.addItems("modules",t.modules),await Wo.addItems("project",t.project);const o=new URL(window.location.href);return window.location.href=o.toString(),t}catch(e){throw console.error("Ошибка:",e.message),e}},play:async function(e="data"){const t=await Wo.exportToJson(Hi.uid);console.log(t),t.project={ui:{slides:!0,fullscreen:!0}};let o=`../player?src=${e}`;"db"===e&&(o+=`&db=${Hi.uid}`);const n=window.open(o,"Player");if(n){if("data"===e){const e=async(o=0)=>{try{if(n.closed)return void console.error("Окно плеера было закрыто");n.postMessage({type:"INIT_DATA",payload:t},window.location.origin)}catch(t){console.error("Ошибка при отправке данных:",t),o<5&&setTimeout(()=>e(o+1),500*(o+1))}};setTimeout(e,3e3)}}else console.error("Не удалось открыть окно. Возможно, браузер заблокировал pop-up.")},children:[],on:Pi.on.bind(Pi),off:Pi.off.bind(Pi),options:{camera:{}}});ji.On("init",()=>{window.vue.component("Importer",Oi),window.vue.component("ElementAdd",gt),ji.slides.on("change",e=>{zi(Hi.children,e,[])}),ji.slides.on("remove",e=>{const t=[];zi(Hi.children,e,t);for(let o=0;o<t.length;o++)delete t[o].states[e]}),ji.menu.addMenu("app",{path:"app.list.project",icon:"",text:"Project",link:"#",children:[{path:"app.list.project.create",icon:"file-empty",text:"Create",handler:async()=>{ji.projects.create()}},{path:"app.list.project.open",icon:"menu",text:"Open",tooltip:"Open project",handler:()=>{ji.projects.open()}},{path:"app.list.project.export",icon:"download",text:"Export",tooltip:"Export project",handler:()=>{ji.project.exportToJson()}},{path:"app.list.project.import",icon:"upload",text:"Import",link:"#",tooltip:"Import project",handler:()=>{ji.project.importProject()}},{path:"app.list.project.remove",icon:"bin",text:"Delete",handler:()=>{ji.projects.remove()}}]})});const qi=Hi,Gi=ao.default||ao,Wi=new Ni;async function Ki(e){const t=e||Qi.actived,o={actions:t.actions,name:t.name,index:t.index,camera:t.camera,uid:t.uid,props:t.props,background:t.background,environment:t.environment},n=JSON.parse(Mt(o));try{await Wo.upsertItemProperties("slides",o.uid,n)}catch(e){console.warn(e)}}function Yi(e){const t=Qi.actived;Qi.actived="number"==typeof e?Qi.children[e]:Qi.children.find(t=>t.uid===e),Qi.actived&&(Wi.emit("change",Qi.actived.uid),async function(e,t){let o=[],n=qi.findStates(e.uid);t&&(o=qi.findStates(t.uid),await async function(e,t,o){const n=[],a=[];for(let e=0;e<t.length;e++){const s=t[e];o.findIndex(e=>e.uid===s.uid)>=0?n.push(s):a.push(s)}const s=[...a,...n];await Promise.all([Gi.engine.ActionsManager.Execute(s,"slide.out"),Gi.engine.ActionsManager.Run(e.actions,e,"slide.out")]),await Gi.engine.ActionsManager.Execute(a,"disable.on");for(let e=0;e<a.length;e++)Ji(a[e])}(t,o,n)),await async function(e,t,o){const n=[],a=[];for(let e=0;e<t.length;e++){const s=t[e];o.findIndex(e=>e.uid===s.uid)>=0?a.push(s):n.push(s)}console.log("Slide In");try{if(e.camera?.path&&e.camera?.path!==Gi.engine.getManager().Camera?.path){const t=e.camera.path.split("."),o=qi.find(t);Gi.engine.getManager().SetCamera(o),o.updateProjectionMatrix()}console.log(e.background),e.background&&(e.background.isAsset?Gi.engine.getManager().Scene.background=e.background.resource:Gi.engine.getManager().Scene.background=e.background)}catch(e){console.warn(e.message)}const s=[...n,...a];await Promise.all([Gi.engine.ActionsManager.Execute(s.map(t=>({...t.states[e.uid],model:t})),"slide.in.before"),Gi.engine.ActionsManager.Run(e.actions,e,"slide.in.before")]),await Gi.engine.ActionsManager.Execute(n,"enable.on"),await Promise.all([Gi.engine.ActionsManager.Execute(s,"slide.in"),Gi.engine.ActionsManager.Run(e.actions,e,"slide.in")]);const r=[];for(let t=0;t<s.length;t++)r.push(Xi(s[t],e.uid));await Promise.all(r),await Promise.all([Gi.engine.ActionsManager.Execute(s,"slide.in.after"),Gi.engine.ActionsManager.Run(e.actions,e,"slide.in.after")])}(e,n,o)}(Qi.actived,t))}async function Xi(e,t){const{position:o,rotation:n,scale:a,actions:s=[],properties:r={},visible:l=!1,...i}=e.states[t];o&&e.position.copy(o),n&&e.rotation.setFromVector3(n,"XYZ"),a&&e.scale.copy(a);const c=Object.keys(i).map(async t=>{const o=t.split("."),n=i[t];let a=o[0],s=e;try{for(let e=0;e<o.length-1;e++)s=s[o[e]],a=o[e+1];return s[a]=await Gi.engine.getFactory().CreateElement(n),{success:!0,key:t}}catch(e){return console.warn(e),{success:!1,key:t,error:e}}});await Promise.all(c),e.visible=l,e.state=e.states[t]||{model:e};const d=Gi.engine.Factory.TreeTypes.find(t=>t.type===e.type);d?.onchange&&d.onchange(e)}function Ji(e,t){e.visible=!1}const Qi=(0,s.reactive)({load:async function(e){Qi.children.length=0;const t=e.sort((e,t)=>e.index-t.index);for(let e=0;e<t.length;e++){const o={name:"",camera:{path:null},actions:[],index:e,props:{},background:null,environment:{},...t[e]};Qi.children.push(o)}qi.on("remove",e=>{const t=e.join(".");Gi.engine.Project.Camera?.path===t&&Gi.engine.Project.ResetCamera();for(let e=0;e<Qi.children.length;e++){const o=Qi.children[e];o.camera?.path===t&&(o.camera.path=null,Ki(o))}})},add:async function(e){const t=`sl${Date.now()}`,o={index:Qi.children.length,name:t,uid:t,background:null,environment:{},camera:{path:null},props:{},actions:[],...e};return Qi.children.push(o),await Ki(o),Wi.emit("add",o.uid),o},remove:async function(e){console.log("remove");let t=e||Qi.actived.uid;const o=Qi.children.findIndex(e=>e.uid===t);if(o>=0){Qi.actived.uid===t&&(0===o?await Yi(1):await Yi(o-1)),Qi.children.splice(o,1),await Wo.deleteItem("slides",t);const e=Qi.children.find(e=>e.next===t);e&&Qi.children.length>=o&&(e.next=Qi.children[o].uid),Wi.emit("remove",t)}},save:Ki,actived:null,children:[],goto:Yi,next(){const e=Qi.children.findIndex(e=>e.uid===Qi.actived.uid);e>=Qi.children.length-1||Qi.goto(e+1)},back(){const e=Qi.children.findIndex(e=>e.uid===Qi.actived.uid);0!==e&&Qi.goto(e-1)},on:Wi.on.bind(Wi),off:Wi.off.bind(Wi)}),Zi=Qi;let ec;const tc={},oc=[],nc=[],ac=(0,s.reactive)({ready:!1,getAssetsManager:()=>tc.AssetsManager,getSlidesManager:()=>tc.SlidesManager,getFactory:()=>tc.Factory,getManager:e=>tc[e]||ec,async load(){console.log("Engine load");const{AssetsManager:e,CssManager:t,MouseManager:o,ActionsManager:n,Project:a,Factory:s}=_i.getMod("engine");tc.AssetsManager=e,tc.SlidesManager=Zi,tc.Factory=s,tc.MouseManager=o,tc.ActionsManager=n,tc.CssManager=t,tc.Project=ec=a,console.log("Engine load complete"),console.log(nc);const r=[];for(let e=0;e<nc.length;e++)r.push(nc[e](ec));nc.length=0,await Promise.all(r)},async start(){ac.ready=!0;const e=[];for(let t=0;t<oc.length;t++)e.push(oc[t](ec));return oc.length=0,await Promise.all(e),console.log(ec),ec},onload(e){oc.push(e)},onInit(e){nc.push(e)}}),sc=new Proxy(ac,{get:(e,t)=>t in e?e[t]:tc[t]}),rc={class:"blocks-container"},lc={class:"blockslabel"},ic={key:0,class:"blocks"},cc={class:"blocklabel"},dc={class:"blocktitle"},pc={style:{display:"flex","justify-content":"center",gap:"5px"}},uc=["onClick"],mc=["onClick"],hc=["onClick"],fc={class:"actionview"},vc={key:0,class:"actionrow"},gc={key:1,class:"actionform"},yc={key:2,class:"actionline"},bc={props:{value:{type:Object,default:{uid:"",hook:""}},isState:{type:Boolean,default:!1},target:{type:Object},state:{type:Object}},data:()=>({expanded:!1,played:!1}),computed:{action(){return this.$app.actions.list.find(e=>e.uid===this.value.uid)}},methods:{onUpdate(e,t){console.log("onUpdate");const o=e.split(".");let n=this.action;for(let e=0;e<o.length-1;e++){const t=o[e];n[t]||(n[t]={}),n=n[t]}n[o[o.length-1]]=t,this.$emit("update:action",{[e]:t})},remove(){this.$emit("remove")},play(){this.$app.engine.getManager("ActionsManager").GetAction(this.action.type)(this.action,this.target,!1)},reset(){}}},kc=(0,x.A)(bc,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon");return(0,s.openBlock)(),(0,s.createElementBlock)("div",fc,[r.action?((0,s.openBlock)(),(0,s.createElementBlock)("div",vc,[(0,s.createElementVNode)("div",{class:"label",onClick:t[0]||(t[0]=e=>a.expanded=!a.expanded)},[(0,s.createTextVNode)((0,s.toDisplayString)(a.expanded?"▼":"▶")+" ",1),(0,s.createElementVNode)("span",null,(0,s.toDisplayString)("model"===o.value.src?"M":""),1),(0,s.createTextVNode)(" ("+(0,s.toDisplayString)(r.action.type)+") "+(0,s.toDisplayString)(r.action.name||r.action.uid),1)])])):(0,s.createCommentVNode)("v-if",!0),r.action?(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createElementBlock)("div",gc,[((0,s.openBlock)(),(0,s.createBlock)((0,s.resolveDynamicComponent)(r.action.type),(0,s.mergeProps)(r.action,{onUpdate:r.onUpdate,options:{inspector:!0,expanded:a.expanded}}),{default:(0,s.withCtx)(()=>[(0,s.createElementVNode)("button",{class:"square",onClick:t[1]||(t[1]=(...e)=>r.play&&r.play(...e))},[(0,s.createVNode)(l,{value:a.played?"stop2":"play3",size:"1.2em"},null,8,["value"])]),(0,s.createElementVNode)("button",{onClick:t[2]||(t[2]=(...e)=>r.reset&&r.reset(...e))},[(0,s.createVNode)(l,{value:"undo",size:"1em"})]),(0,s.createElementVNode)("button",{onClick:t[3]||(t[3]=(...e)=>r.remove&&r.remove(...e))},[(0,s.createVNode)(l,{value:"bin",size:"1em"})])]),_:1},16,["onUpdate","options"]))],512)),[[s.vShow,a.expanded]]):(0,s.createCommentVNode)("v-if",!0),a.expanded?(0,s.createCommentVNode)("v-if",!0):((0,s.openBlock)(),(0,s.createElementBlock)("div",yc,[(0,s.createElementVNode)("button",{class:"square",onClick:t[4]||(t[4]=(...e)=>r.play&&r.play(...e))},[(0,s.createVNode)(l,{value:a.played?"stop2":"play3",size:"1em"},null,8,["value"])]),(0,s.createElementVNode)("button",{class:"square",onClick:t[5]||(t[5]=(...e)=>r.reset&&r.reset(...e))},[(0,s.createVNode)(l,{value:"undo",size:"1em"})]),(0,s.createElementVNode)("button",{class:"square",onClick:t[6]||(t[6]=(...e)=>r.remove&&r.remove(...e))},[(0,s.createVNode)(l,{value:"bin",size:"1em"})])]))])}]]),Ec=["onMouseover","onClick"],wc={props:["items","x","y"],data:()=>({isActive:!1,highlightedIndex:null}),methods:{highlight(e){this.highlightedIndex=e},deactivate(){this.highlightedIndex=null,this.$emit("select",null)},selectItem(e){this.$emit("select",e)}}},_c=(0,x.A)(wc,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",{class:"menu",onMouseleave:t[0]||(t[0]=(...e)=>r.deactivate&&r.deactivate(...e)),style:(0,s.normalizeStyle)({top:o.y-3+"px",left:o.x+"px"})},[(0,s.createElementVNode)("ul",null,[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(o.items,(e,t)=>((0,s.openBlock)(),(0,s.createElementBlock)("li",{key:t,onMouseover:e=>r.highlight(t),onClick:t=>r.selectItem(e),class:(0,s.normalizeClass)({highlighted:a.highlightedIndex===t})},(0,s.toDisplayString)(e),43,Ec))),128))])],36)}],["__scopeId","data-v-baa172ec"]]),Nc={name:"EventsList",props:{modelValue:{type:Object,default:{}},value:{type:Object,default:{data:{}}},target:{type:Object,default:null},property:{type:Object}},computed:{eventTypes(){return this.$app.events.types},actions(){return this.$app.actions},hooks(){return this.$app.actions.hooks.filter(e=>!this.getActionsHooks().includes(e))}},mounted(){},methods:{async addEvent(e){this.events.length=0,this.events.push(...["create.on","enable.on","disable.on","mouse.over","mouse.out"].filter(e=>!this.getActionsHooks().includes(e))),this.menuX=e.clientX,this.menuY=e.clientY,this.listshow=!0,await this.$nextTick();const t=this.$refs.hooksList.$el.offsetHeight,o=window.innerHeight;this.menuY+t>o&&(this.menuY=o-t-10)},onSelectEvent(e){this.listshow=!1,e&&this.openActionsList(e)},openActionsList(e){this.$app.actions.showLib(async t=>{t&&(this.target.actions.push({uid:t.uid,hook:e}),this.$emit("save"))})},onRemove(e,t){const o=this.target.actions.findIndex(o=>o.uid===e.uid&&o.hook===t);o>=0&&(this.target.actions.splice(o,1),this.$emit("update:target",null,null))},getActionsHooks(){return[...new Set(this.target.actions.map(e=>e.hook))]},async reset(e){},async play(e){},onEdit(e,t){this.$app.actions.save({uid:e.uid,...t})}},data:()=>({actLibShow:!1,actListShow:!1,actsButtons:[],regActType:null,selectedActionType:null,regbusy:!1,selectdAction:null,eventType:"",listshow:!1,show:!0,events:[],menuX:0,menuY:0,played:!1}),components:{Action:kc,HooksList:_c}},Sc=(0,x.A)(Nc,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon"),i=(0,s.resolveComponent)("Action"),c=(0,s.resolveComponent)("HooksList");return(0,s.openBlock)(),(0,s.createElementBlock)(s.Fragment,null,[(0,s.createCommentVNode)("Actions View"),(0,s.createElementVNode)("div",rc,[(0,s.createElementVNode)("div",lc,[(0,s.createElementVNode)("div",{onClick:t[0]||(t[0]=e=>a.show=!a.show)},"Add : "),(0,s.createElementVNode)("button",{onClick:t[1]||(t[1]=(...e)=>r.addEvent&&r.addEvent(...e))},[(0,s.createVNode)(l,{value:"plus",size:"0.9em"})])]),a.show?((0,s.openBlock)(),(0,s.createElementBlock)("div",ic,[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(r.getActionsHooks(),(e,t)=>((0,s.openBlock)(),(0,s.createElementBlock)("div",{key:t,class:"block"},[(0,s.createElementVNode)("div",cc,[(0,s.createElementVNode)("div",dc,(0,s.toDisplayString)(e),1),(0,s.createElementVNode)("div",pc,[(0,s.createElementVNode)("button",{class:"square",onClick:t=>r.play(e)},[(0,s.createVNode)(l,{value:a.played?"stop2":"play3",size:"1em"},null,8,["value"])],8,uc),(0,s.createElementVNode)("button",{class:"square",onClick:t=>r.reset(e)},[(0,s.createVNode)(l,{value:"undo",size:"1em"})],8,mc)]),(0,s.createElementVNode)("button",{onClick:t=>r.openActionsList(e)},[(0,s.createVNode)(l,{value:"plus",size:"0.9em"})],8,hc)]),(0,s.createCommentVNode)("Models actions"),(0,s.createCommentVNode)(' <Action :value="action" :target="value"\r\n                    v-for="(action, index) in value.model.data.actions.filter(a => a.hook === eventType)"\r\n                    :ref="`action${action.uid}`" :key="index"\r\n                    @update:action="onEdit(action,$event)">\r\n                </Action> '),(0,s.createCommentVNode)("States actions"),((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(o.target.actions.filter(t=>t.hook===e),(t,n)=>((0,s.openBlock)(),(0,s.createBlock)(i,{value:t,target:o.value,state:o.target,ref_for:!0,ref:`action${t.uid}`,key:n,"onUpdate:action":e=>r.onEdit(t,e),onRemove:o=>r.onRemove(t,e)},null,8,["value","target","state","onUpdate:action","onRemove"]))),128))]))),128))])):(0,s.createCommentVNode)("v-if",!0),a.listshow?((0,s.openBlock)(),(0,s.createBlock)(s.Teleport,{key:1,to:"body"},[(0,s.createVNode)(c,{ref:"hooksList",x:a.menuX,y:a.menuY,items:r.hooks,onSelect:r.onSelectEvent},null,8,["x","y","items","onSelect"])])):(0,s.createCommentVNode)("v-if",!0)]),(0,s.createCommentVNode)(" // Actions View")],2112)}]]),Vc=Sc,Cc=ao.default||ao,xc=[];let Bc;function $c(e){const t=(0,s.reactive)({selected:null,list:Dc.list}),o={label:"Close",class:"secondary",handler:async()=>{t.selected=null,ui.close(),e&&e()}},n=(0,s.reactive)({label:"Create",class:"primary",handler:async()=>{const e=Dc.library[0];t.selected={type:e.component,group:e.type,targets:["*"],description:e.description,...e.template}}}),a=(0,s.reactive)({label:"Cancel",class:"additional",hidden:(0,s.computed)(()=>!t.selected||t.selected.uid),handler:async()=>{t.selected=null}}),r={label:"Save",class:"primary",hidden:(0,s.computed)(()=>!t.selected||t.selected.uid),handler:async()=>{const e=Dc.library.find(e=>e.component===t.selected.type);if(e.check){if(!await e.check(t.selected))return void ci.add({message:"Неверные параметры"})}else Object.keys(e.template).forEach(o=>{o in t.selected||(t.selected[o]=JSON.parse(JSON.stringify(e.template[o])))});t.selected.uid=`${t.selected.type}${Date.now()}`,Dc.list.push(t.selected),await Ic(t.selected),await Bc.Add(t.selected)}},l={label:"Delete",class:"additional",hidden:(0,s.computed)(()=>!t.selected||!t.selected.uid),handler:async()=>{const e=Dc.list.findIndex(e=>e===t.selected);e>=0&&Dc.list.splice(e,1),async function(e){await Wo.deleteItem("actions",e)}(t.selected.uid),t.selected=null}},i={label:"Select",class:"additional",hidden:(0,s.computed)(()=>!t.selected||!t.selected.uid||!e),handler:async()=>{e(t.selected),ui.close()}},c=(0,s.reactive)([n,r,i,l,a,o]);ui.open({header:{value:e?"Select an action":"Action Library",handler:()=>{ui.close()}},content:{component:"ItemsLib",props:t,events:{selected:e=>{e.uid&&(t.selected=e)}},slots:{item:{component:"ActionItem"},edit:{component:"ActionEdit",props:{selected:t.selected},events:{"change:type":e=>{const o=Dc.library.find(t=>t.component===e);t.selected={...o.template,type:o.component,group:o.type,description:o.description}},edit:(e,o)=>{const n=e.split(".");let a=t.selected;for(let e=0;e<n.length-1;e++){const t=n[e];a[t]||(a[t]={}),a=a[t]}a[n[n.length-1]]=o,Ic(t.selected)}}}}},footer:{buttons:c}})}async function Ic(e){e.uid&&await Wo.upsertItemProperties("actions",e.uid,JSON.parse(JSON.stringify({id:e.uid,...e})))}const Dc=(0,s.reactive)({init:async function(e){0===e.length&&e.push(...xc),Bc=sc.ActionsManager;const t=(0,s.reactive)(e);await Bc.Init(t),Dc.list.push(...Bc.Library)},register:function(e){Dc.library.push(e)},save:Ic,showLib:$c,exportData:async function(){return await Wo.getAllItems("actions")},removeFrom:async function(e,{hook:t,uid:o}){},hooks:["enable.on","slide.in.before","slide.in","slide.in.after","slide.out.before","slide.out","slide.out.after","disable.on","mouse.in","mouse.click","mouse.out"],list:[],library:[],get groups(){return Dc.library.reduce((e,t)=>(e.includes(t.type)||e.push(t.type),e),[])},get values(){return Object.values(Dc.list)}});Cc.On("init",()=>{Cc.menu.hierarhy.list.push({icon:"history",tooltip:"Action Library",handler:$c}),window.vue.component("ActionsList",Vc),Cc.inspector.addToModels(["Object3D"],[{label:"Models actions",readonly:!0,content:{prop:"actions",component:"ActionsList",state:!1}},{label:"States actions",readonly:!0,content:{prop:"actions",component:"ActionsList",state:!0}}])});const Tc=Dc,Ac={class:"assetblock"},Mc={name:"AssetView",data:()=>({cmps:{hdr:"assethdr"}}),props:{value:{type:Object},modelValue:{type:String},property:{type:Object}},methods:{onAssetChange(e){e&&this.$emit("update:value",e.uid)},cleanProp(){delete this.value[this.property.prop],this.$emit("update:value",null)}},computed:{val(){return this.value[this.property.prop]},asset(){return this.val?this.$app.assets.list.find(e=>e.uid===this.val):null}},components:{assethdr:Ae}},Oc=(0,x.A)(Mc,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("icon"),i=(0,s.resolveDirective)("tooltip");return(0,s.openBlock)(),(0,s.createElementBlock)("div",Ac,[((0,s.openBlock)(),(0,s.createBlock)((0,s.resolveDynamicComponent)(a.cmps[o.property.type]),{onSetasset:r.onAssetChange,asset:r.asset},null,40,["onSetasset","asset"])),r.asset?(0,s.withDirectives)(((0,s.openBlock)(),(0,s.createBlock)(l,{key:0,onClick:r.cleanProp,class:"icon",value:"bin",size:"1em"},null,8,["onClick"])),[[i,"Удалить"]]):(0,s.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-5867b901"]]),jc={class:"image-container"},Pc={ref:"canva"},Rc={class:"selector"},Lc={props:{modelValue:{type:Object,default:null},value:{type:Object},label:{type:String,default:""},tooltip:{type:String,default:""},selectable:{type:Boolean}},data:()=>({txtr:null}),watch:{value(e){this.redraw()},modelValue(e){this.redraw()}},methods:{onUpdate({result:e,file:t}){console.log(e);const o=new Blob([e],{type:t.type}),n=URL.createObjectURL(o);this.txtr=n;const a=(new THREE.TextureLoader).load(n,()=>{URL.revokeObjectURL(n)});this.$emit("update:modelValue",a.image),this.$app.storage.writeFile("texture.png",e)}},methods:{redraw(){const e=this.$refs.canva,t=e.getContext("2d");if(t.clearRect(0,0,e.width,e.height),this.modelValue)try{const o=this.modelValue.image;e.width=o.width,e.height=o.height,t.drawImage(o,0,0)}catch(e){}}},mounted(){console.log(this.modelValue,this.value),this.redraw()}},Fc=(0,x.A)(Lc,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",jc,[(0,s.createElementVNode)("canvas",Pc,null,512),(0,s.createElementVNode)("div",Rc,[(0,s.createElementVNode)("button",{class:"btn",onClick:t[0]||(t[0]=t=>e.$emit("select",o.value))},"SELECT")])])}]]),Uc={class:"form-container"},zc={class:"info"},Hc={class:"row"},qc={class:"rowvalue"},Gc={class:"row"},Wc={class:"rowvalue"},Kc=["value"],Yc=["value"],Xc={key:1},Jc={class:"rowlabel"},Qc={key:0},Zc={name:"AssetEdit",props:{selected:{type:Object,default:{name:"-"}},progress:{type:Number}},computed:{types(){return this.$app.assets.types},inspector(){return this.$app.inspector.blocksFor(["asset",this.selected.type]).filter(e=>!e.inspectorOnly)}},methods:{updateInspector(e){this.inspector=this.$app.inspector.blocksFor(this.selected.getTypes())},onChange(e,t){console.log(e,t),this.$emit("edit",e,t)},end(){this.$emit("edit","name",this.$refs.nameeditor.endEdit()),this.$emit("edit","url",this.$refs.urleditor.endEdit())},async onComponentUpdate(e,t){if(t.onupdate)await t.onupdate(this.selected,e,t,()=>{this.$emit("edit",t.prop,e)});else{const o=t.prop.split(".");let n=o[0],a=this.selected;for(let e=0;e<o.length-1;e++)a=a[o[e]],n=o[e+1];a[n]=e,this.$emit("edit",t.prop,e)}},onComponentChange(){_saveHandler(this.selected)}}},ed=(0,x.A)(Zc,[["render",function(e,t,o,n,a,r){const l=(0,s.resolveComponent)("LabelEdit");return(0,s.openBlock)(),(0,s.createElementBlock)("div",Uc,[(0,s.createElementVNode)("div",zc,[(0,s.createElementVNode)("div",Hc,[t[3]||(t[3]=(0,s.createElementVNode)("div",{class:"rowlabel"},"Name",-1)),(0,s.createElementVNode)("div",qc,[(0,s.createVNode)(l,{style:{width:"100%"},ref:"nameeditor","onUpdate:modelValue":[t[0]||(t[0]=e=>r.onChange("name",e)),t[1]||(t[1]=e=>o.selected.name=e)],modelValue:o.selected.name},null,8,["modelValue"])])]),(0,s.createElementVNode)("div",Gc,[t[4]||(t[4]=(0,s.createElementVNode)("div",{class:"rowlabel"},"Type",-1)),(0,s.createElementVNode)("div",Wc,[o.selected.uid?((0,s.openBlock)(),(0,s.createElementBlock)("div",Xc,(0,s.toDisplayString)(o.selected.type),1)):((0,s.openBlock)(),(0,s.createElementBlock)("select",{key:0,class:"typeslist",value:o.selected.type,onChange:t[2]||(t[2]=e=>r.onChange("type",e.target.value))},[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(r.types,e=>((0,s.openBlock)(),(0,s.createElementBlock)("option",{value:e},(0,s.toDisplayString)(e),9,Yc))),256))],40,Kc))])]),(0,s.createCommentVNode)(' <div class="row">\r\n                <div class="rowlabel">URL</div>\r\n                <div class="rowvalue">\r\n                    <LabelEdit style="width: 100%;" ref="urleditor" @update:value="onChange(\'url\', $event)"\r\n                        :value="selected.url">\r\n                    </LabelEdit>\r\n                </div>\r\n            </div> '),((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(r.inspector,(e,t)=>((0,s.openBlock)(),(0,s.createElementBlock)("div",{key:t,class:"row"},[(0,s.createElementVNode)("div",Jc,(0,s.toDisplayString)(e.label),1),e.content?((0,s.openBlock)(),(0,s.createBlock)((0,s.resolveDynamicComponent)(e.content.component),(0,s.mergeProps)({key:0,class:"rowvalue",value:o.selected,modelValue:o.selected[e.content.prop],"onUpdate:modelValue":[t=>o.selected[e.content.prop]=t,t=>r.onComponentUpdate(t,e.content)],property:e.content},{ref_for:!0},e.content.props,{onModify:t=>r.onComponentChange(t,e.content)}),null,16,["value","modelValue","onUpdate:modelValue","property","onModify"])):(0,s.createCommentVNode)("v-if",!0),e.head?((0,s.openBlock)(),(0,s.createBlock)((0,s.resolveDynamicComponent)(e.head.component),(0,s.mergeProps)({key:1,class:"rowvalue",value:o.selected,modelValue:o.selected[e.head.prop],"onUpdate:modelValue":[t=>o.selected[e.head.prop]=t,t=>r.onComponentUpdate(t,e.head)],property:e.head},{ref_for:!0},e.head.props,{onModify:t=>r.onComponentChange(t,e.head)}),null,16,["value","modelValue","onUpdate:modelValue","property","onModify"])):(0,s.createCommentVNode)("v-if",!0)]))),128)),t[5]||(t[5]=(0,s.createElementVNode)("div",null,null,-1))]),(0,s.createElementVNode)("div",null,[o.progress>0?((0,s.openBlock)(),(0,s.createElementBlock)("div",Qc,(0,s.toDisplayString)(o.progress),1)):(0,s.createCommentVNode)("v-if",!0)])])}],["__scopeId","data-v-3d9f51e7"]]),td={class:"moditem"},od={class:"title"},nd={class:"image"},ad=["src"],sd={name:"AssetItem",props:["item"]},rd=(0,x.A)(sd,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",td,[(0,s.createElementVNode)("div",od,(0,s.toDisplayString)(o.item.name),1),(0,s.createElementVNode)("div",nd,[(0,s.createElementVNode)("img",{src:o.item.images[0].url},null,8,ad)])])}],["__scopeId","data-v-ef969d8c"]]),ld={class:"form-container"},id={class:"info"},cd={class:"row"},dd={class:"rowvalue"},pd={class:"line"},ud=["src"],md={key:0},hd={name:"AssetView",props:{selected:{type:Object,default:{name:"-"}},progress:{type:Number}},computed:{types(){return this.$app.assets.types},inspector(){return this.$app.inspector.blocksFor(["asset",this.selected.type]).filter(e=>!e.inspectorOnly)}},methods:{updateInspector(e){this.inspector=this.$app.inspector.blocksFor(this.selected.getTypes())},onChange(e,t){this.$emit("edit",e,t)},end(){this.$emit("edit","name",this.$refs.nameeditor.endEdit()),this.$emit("edit","url",this.$refs.urleditor.endEdit())},async onComponentUpdate(e,t){if(t.onupdate)await t.onupdate(this.selected,e,t,()=>{this.$emit("edit",t.prop,e)});else{const o=t.prop.split(".");let n=o[0],a=this.selected;for(let e=0;e<o.length-1;e++)a=a[o[e]],n=o[e+1];a[n]=e,this.$emit("edit",t.prop,e)}},onComponentChange(){_saveHandler(this.selected)}}},fd=(0,x.A)(hd,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",ld,[(0,s.createElementVNode)("div",id,[(0,s.createElementVNode)("div",cd,[t[0]||(t[0]=(0,s.createElementVNode)("div",{class:"rowlabel"},"Name",-1)),(0,s.createElementVNode)("div",dd,(0,s.toDisplayString)(o.selected.name),1)]),(0,s.createElementVNode)("div",pd,[(0,s.createElementVNode)("img",{src:o.selected.images[0].url},null,8,ud)])]),(0,s.createElementVNode)("div",null,[o.progress>0?((0,s.openBlock)(),(0,s.createElementBlock)("div",md,(0,s.toDisplayString)(o.progress),1)):(0,s.createCommentVNode)("v-if",!0)])])}],["__scopeId","data-v-321414c5"]]),vd=ao.default||ao,gd={asset:[{label:"URL",content:{prop:"url",component:"LabelEdit",onupdate(e,t,o,n){console.log(e),kd.Update(e,t,o)}}},{label:"Clone",head:{component:"BoolEdit",prop:"clone",async onupdate(e,t,o,n){await kd.Update(e,t,o)}}}],model:[{label:"Shadow",content:{component:"ShadowEdit",prop:"shadow",onupdate:async(e,t,o,n)=>{await kd.Update(e,t,o)}}},{label:"Environment map",inspectorOnly:!0,content:{component:"AssetSelector",prop:"envMap",type:"hdr",onupdate:async(e,t,o,n)=>{await kd.Update(e,t,o)}}}],image:[{label:"Image",content:{inspectorOnly:!0,prop:"img",component:"ImageView",props:{acceptedTypes:"image/*",selectable:!1},async onupdate(e,t,o){console.log(t),e.img=t}}}],hdr:[]},yd={model:()=>!0},bd={model:"codepen",image:"image",hdr:"loop2"};let kd;function Ed(e=[]){return console.log(e),Vd.list.filter(t=>0===e.length||e.includes(t.type)).map(e=>({...e.data}))}async function wd(e){e.uid=`asset_${Date.now()}`;const t=kd.Add(e);await t.load(),Vd.list.push(t),console.log(Vd.list),await Wo.addItem("assets",JSON.parse(JSON.stringify({id:t.uid,...t.data}))),console.log(t)}async function _d(e){console.log("Save asset");try{if(!e.uid)return;await Wo.updateItem("assets",JSON.parse(JSON.stringify({id:e.uid,...e.data})))}catch(e){console.error("Error saving asset:",e),vd.toasts.add({message:"Error saving asset"})}}async function Nd(e){switch(e.type){case"model":const t=sc.getFactory().CheckUseAsset(e.uid);if(t)return vd.toasts.add({message:`Cannot delete, asset is used in ${t} models`}),!1;break;case"hdr":if(Vd.list.find(t=>t.data.envMap===e.uid))return vd.toasts.add({message:"Cannot delete, asset in use"}),!1}const t=Vd.list.findIndex(t=>t.uid===e.uid);return t>=0&&(Vd.list.splice(t,1),kd.Remove(e.uid),await Wo.deleteItem("assets",e.uid)),!0}function Sd(e,t=!0){return new Promise(o=>{const n=(0,s.reactive)({selected:null,list:Ed(e),icons:bd}),a=(0,s.reactive)([{label:"Select",class:"primary",hidden:(0,s.computed)(()=>!t||!n.selected),handler:async()=>{ui.close(),o(n.selected)}},{label:"Remove",class:"additional",hidden:(0,s.computed)(()=>!n.selected?.uid),handler:async()=>{Nd(n.selected)&&(n.selected=null,n.list=Ed(e))}},{label:"Save",class:"primary",hidden:(0,s.computed)(()=>!n.selected||n.selected.uid||n.busy),handler:async()=>{if(!yd[n.selected.type]||await yd[n.selected.type](n.selected)){vd.toasts.add({message:"Start load asset"});try{n.selected=await wd(n.selected)}catch(e){return vd.toasts.add({message:e.message}),void(n.selected.uid=null)}n.list=Ed(e),vd.toasts.add({message:"Asset saved"})}}},{label:"Create",class:"secondary",handler:async()=>{n.selected={name:"",type:Vd.types[0],url:""}}},{label:"Close",class:"additional",handler:async()=>{ui.close(),o()}}]);ui.open({header:{value:t?"Select asset":"Project assets",handler:()=>{ui.close()}},content:{component:"ItemsLib",props:n,events:{selected:e=>{n.selected=e}},slots:{edit:{component:"AssetEdit",props:{selected:n.selected},events:{edit:(e,t)=>{n.selected[e]=t,n.selected.uid&&_d({data:n.selected})}}}}},footer:{buttons:a}})})}const Vd=(0,s.reactive)({init:async function(e,t){console.log("Init assets"),kd=sc.getManager("AssetsManager"),await kd.Init(e,t);const o=Array.from(kd.Assets.values());o.forEach(e=>{e.on("update",()=>{_d(e)})}),Vd.list.push(...o),console.log(Vd.list)},create:wd,update:async function(e,t,o){await kd.Update(e,t,o)},save:_d,selectAsset:Sd,editAsset:function(e){const t=(0,s.reactive)({current:e}),o=(0,s.reactive)([{label:"Save",class:"secondary",handler:async()=>{e.uid?await _d({data:e}):await wd(e),ui.close()}},{label:"Cancel",class:"primary",handler:async()=>{ui.close()}}]);ui.open({header:{value:"Select asset",handler:()=>{ui.close()}},content:{component:"AssetEdit",props:t,events:{edit:(t,o)=>{e[t]=o}}},footer:{buttons:o}})},remove:Nd,setAsset:function(e,t){e.assets||(e.assets=[]),e.assets.push({uid:t.uid}),vd.engine.getFactory().AddAsset(e.uid,t)},types:["model","hdr","image"],list:[],exportData:async()=>await Wo.getAllItems("assets"),get inspector(){return gd},getInspector:e=>gd[e]||[],async getDefault(){const e=await fetch("https://s3.eu-west-1.amazonaws.com/3dbuilder.reneos.com/base/assets.json"),t=await e.json();return await Wo.upsertMany("assets",t,"uid"),t}});vd.On("init",()=>{vd.menu.hierarhy.list.push({icon:"cube",tooltip:"Assets library",handler:()=>{Sd([],!1)}}),window.vue.component("AssetView",fd),window.vue.component("AssetItem",rd),window.vue.component("AssetSelector",Oc),window.vue.component("AssetEdit",ed),window.vue.component("AssetImage",Fc),Object.keys(gd).forEach(e=>{vd.inspector.addToModels([e],gd[e])})});const Cd=Vd,xd=(Boolean,ao.default||ao);let Bd;const $d=(0,s.reactive)({init:async function(){console.log("app init"),Bd=new Wo("slider",["data","templates"]),await Bd.openDatabase("slider")},save:async function(){const e={uid:"currproject",id:"currproject",actions:Tc.exportData(),assets:Cd.exportData(),elements:Elements.exportData()};return await Wo.updateItem("projects",e),e.uid},saveData:function(e,t,o){return Bd.upsertItemProperties(e,t,o)},readData:function(e,t){return Bd.getItem(e,t)},GetDB:function(){return Bd},draggedNode:null,ready:!1,cameras:[],get types(){return xd.engine.getFactory().GetTypes()},user:{registered:!1,name:"Guest",options:{manual:"false"!==localStorage.getItem("options.manual")}},setPassword:async function(e){try{const{error:t,me:o}=await gqlc.Set({me:[{password:[{$args:{value:e}}]}]})}catch(e){xd.toasts.add({message:"Error on change password"})}},async logout(){const e=await fetch("/auth/logout"),t=await e.json();console.log(t),window.location.reload()}});xd.On("init",()=>{xd.menu.addMenu("app",{path:"app.list.help",icon:"question",text:"Help",link:"#",children:[{path:"app.list.help.channel",icon:"bullhorn",text:"Channel",handler:async()=>{window.open("https://t.me/webslider","_blank")}},{path:"app.list.help.chat",icon:"bubbles",text:"Chat",tooltip:"Discuss",handler:()=>{window.open("https://t.me/chatslider","_blank")}}]})});const Id=$d,Dd=[],Td=[],Ad={},Md={Object3D:[{label:"Transform",readonly:!0,content:{component:"TransformEdit",state:!0}},{label:"Visibility",data:{},head:{prop:"visible",component:"BoolEdit",state:!0}}],Mesh:[{label:"Shadow",content:{component:"ShadowEdit",prop:"shadow",state:!1,onupdate:async(e,t,o,n)=>{e.castShadow=o.cast||!1,e.receiveShadow=o.receive||!1}}}],DirectionalLight:[{label:"Color",head:{component:"EditColor",prop:"color",state:!0,onupdate(e,t,o,n){}}},{label:"Intensity",head:{component:"Float",prop:"intensity",step:.1,min:0}},{label:"Shadow",data:{},head:{prop:"castShadow",component:"BoolEdit"}}],AmbientLight:[{label:"Color",head:{component:"EditColor",prop:"color",state:!0,onupdate(e,t,o,n){e[t].copy(o);const a=e.states[Zi.actived.uid];a.properties||(a.properties={}),a.properties[t]={type:"Color",args:["#"+o.getHexString()]},qi.save(e)}}},{label:"Intensity",head:{component:"Float",prop:"intensity",step:.1,min:0,state:!0}}],Mesh:[{label:"Shadow",content:{component:"ShadowEdit",prop:"shadow",state:!1,onupdate:async(e,t,o,n)=>{e.castShadow=o.cast||!1,e.receiveShadow=o.receive||!1}}}],label2d:[{label:"Размеры",content:{component:"DimensionsEdit",onupdate(e,t,o,n){e[t]=o,qi.save(e)},state:!0}},{label:"Text",content:{prop:"text",component:"TextEdit",state:!0}},{label:"Цвет",head:{component:"TextColorEdit",prop:"color",state:!0}},{label:"Размер шрифта",head:{component:"FontSize",prop:"size",state:!0}}],videoplane:[{label:"URL",content:{component:"LabelEdit",prop:"url",state:!1,onupdate(e,t,o,n){e.properties||(e.properties={}),e.properties.url=o}},head:{component:"Label",prop:"url"}}],Camera:[{label:"Far",head:{prop:"far",component:"Float",onupdate(e,t,o,n){e[t]=e.states[Zi.actived.uid][t]=o,e.updateProjectionMatrix(),Fo.CameraHelper.update(),qi.save(e)}}},{label:"Near",head:{prop:"near",component:"Float",state:!0,onupdate(e,t,o,n,a){e[t]=e.states[Zi.actived.uid][t]=o,e.updateProjectionMatrix(),Fo.CameraHelper.update(),qi.save(e)}}}],PerspectiveCamera:[{label:"FOV",head:{prop:"fov",component:"Float",onupdate(e,t,o){e[t]=e.states[Zi.actived.uid][t]=o,e.updateProjectionMatrix(),Fo.CameraHelper.update(),qi.save(e)}}}],OrthographicCamera:[{label:"Left",head:{prop:"left",component:"Float",onupdate(e,t,o){e[t]=e.states[Zi.actived.uid][t]=o,e.updateProjectionMatrix(),Fo.CameraHelper.update(),qi.save(e)}}},{label:"Top",head:{prop:"top",component:"Float",onupdate(e,t,o){e[t]=e.states[Zi.actived.uid][t]=o,e.updateProjectionMatrix(),Fo.CameraHelper.update(),qi.save(e)}}},{label:"Right",head:{prop:"right",component:"Float",onupdate(e,t,o){e[t]=e.states[Zi.actived.uid][t]=o,e.updateProjectionMatrix(),Fo.CameraHelper.update(),qi.save(e)}}},{label:"Bottom",head:{prop:"bottom",component:"Float",onupdate(e,t,o){e[t]=e.states[Zi.actived.uid][t]=o,e.updateProjectionMatrix(),Fo.CameraHelper.update(),qi.save(e)}}}]},Od={},jd=(0,s.reactive)({ready:!1,cameras:[],blocksFor:(e=["Object3D"])=>e.flatMap(e=>Md[e]||[]),handlers:Od,setHandler(e,t){Od[e]=t},getHandlers:()=>Od,addBlocks(e,t){Object.keys(_blocks).forEach(o=>{t(o)&&_blocks[o].push(...e)})},addToAssets(e,t){for(let o=0;o<e.length;o++){const n=e[o];"*"!==n?(Ad[n]||(Ad[n]=[]),Ad[n].push(...t)):Td.push(...t)}},addToModels(e,t){for(let o=0;o<e.length;o++){const n=e[o];"*"!==n?(Md[n]||(Md[n]=[]),Md[n].push(...t)):Dd.push(...t)}}}),Pd=ao.default||ao;function Rd(e){Ft.Transformer.setMode(e)}function Ld(e,t){e.children??=[],(t.children||[]).forEach(t=>{let o=e.children.find(e=>e.path===t.path);o?Ld(o,t):e.children.push(t)})}const Fd=(0,s.reactive)({addMenu:function(e,t){const o=Fd[e].list.find(e=>e.path===t.path);o?Ld(o,t):Fd[e].list.push(t)},app:{list:[{path:"app.list.project",icon:"",text:"Project",link:"#"},{path:"app.list.libraries",icon:"",text:"Libraries",link:"#"},{path:"app.list.help",icon:"question",text:"Help",link:"#"}]},top:{list:[{icon:"sphere",hint:"Local/global space",handler:function(){Ft.Transformer.setSpace("local"===Ft.Transformer.space?"world":"local")}},{icon:"move",hint:"Moving",handler:Rd.bind(null,"translate")},{icon:"loop2",hint:"Rotation",handler:Rd.bind(null,"rotate")},{icon:"enlarge2",hint:"Scale",handler:Rd.bind(null,"scale")},{icon:"target",hint:"Zoom in on selected",handler:Ft.FocusToSelect},{icon:"cross",hint:"Deselect",handler:()=>{Pd.selection.select(null)}}],options:{size:"1.5em"}},hierarhy:{list:[{icon:"play3",tooltip:"Run",handler:()=>{Pd.project.play()}}],options:{}},tools:{list:[]}}),Ud=Fd,zd=ao.default||ao,Hd=[];let qd="";function Gd(e={}){return new Promise(t=>{const o=(0,s.reactive)({title:"Creating a project",text:"Please enter the project name *",answer:"",template:""}),n=(0,s.reactive)({label:"Create",class:"primary",disabled:o.answer.length<1,callback:async o=>{const n=`project${Date.now()}`;await Wo.Create(n,{project:[{uid:"info",id:n,name:o,created:Date.now(),last:Date.now()}],assets:e.assets||[],actions:e.actions||[],models:e.models||[],slides:e.slides||[],modules:e.modules||[]}),t(n)}});ui.queryText(o,[n],e=>{o.answer=e,n.disabled=o.answer.length<1})})}async function Wd(e){const t=new URL(window.location.href);t.searchParams.set("src","db"),t.searchParams.set("db",e),window.location.href=t.toString()}async function Kd(){const e=await Wo.GetFromAll("project","info");return Yd.list.length=0,Yd.list.push(...e.filter(e=>void 0!==e).map(e=>(e.uid=e.id,e))),Yd.list}const Yd=(0,s.reactive)({init:async function(e){console.log(e),qd=e},create:async function(){const e=await Gd();e&&Wd(e)},createProject:Gd,open:async function(){const e=await Kd(),t=(0,s.reactive)({list:e.filter(e=>e.uid!==zd.project.uid)});ui.open({header:{value:"Open project",handler:ui.close},content:{component:"ItemsLib",props:t,events:{selected:e=>{Wd(e.id),ui.close()}},slots:{item:{component:"ProjectItem"}}},footer:{buttons:[{label:"Close",class:"primary",handler:ui.close}]}})},goto:Wd,remove:async function(e){console.log(e);const t=e||qd;console.log(t),await Wo.DeleteDatabase(t),console.log("Removed");const o=Yd.list.findIndex(e=>e.uid===t);o>=0&&Yd.list.splice(o,1),window.location.href=new URL(`${window.location.origin}${window.location.pathname}`).toString()},getList:Kd,loadExample:async function(e){const t=(await Hd[e]()).default,o=`project${e}`;await Wo.Init(o,["project","assets","models","slides","actions","modules"],"uid"),await Wo.addItems("actions",t.actions),await Wo.addItems("assets",t.assets),await Wo.addItems("models",t.models),await Wo.addItems("modules",t.modules),await Wo.addItems("project",t.project),await Wo.addItems("slides",t.slides);const n=new URL(window.location.href);n.searchParams.set("project",o),window.location.href=n.toString()},play:async function(e="data"){const t=await Wo.exportToJson(qd);console.log(t),t.project={ui:{slides:!0,fullscreen:!0}};let o=`../player?target=${e}`;"src"===e&&(o+=`&src=${qd}`);const n=window.open(o,"Player");if(n){if("data"===e){const e=async(o=0)=>{try{if(n.closed)return void console.error("Окно плеера было закрыто");n.postMessage({type:"INIT_DATA",payload:t},window.location.origin),console.log("Данные отправлены")}catch(t){console.error("Ошибка при отправке данных:",t),o<5&&setTimeout(()=>e(o+1),500*(o+1))}};setTimeout(e,1e3)}}else console.error("Не удалось открыть окно. Возможно, браузер заблокировал pop-up.")},importProject:async function(){try{const e=await function(e=".json"){return new Promise(t=>{const o=document.createElement("input");o.type="file",o.accept=e,o.style.display="none",o.addEventListener("change",()=>{o.files&&o.files[0]&&t(o.files[0]),document.body.removeChild(o)}),document.body.appendChild(o),o.click()})}(),t=await function(e){return new Promise((t,o)=>{if(!e.name.endsWith(".json"))return void o(new Error("Выберите файл с расширением .json"));const n=new FileReader;n.onload=e=>{try{const o=JSON.parse(e.target.result);t(o)}catch(e){o(new Error("Ошибка парсинга JSON: "+e.message))}},n.onerror=()=>{o(new Error("Ошибка чтения файла"))},n.readAsText(e)})}(e);let o=!1;const n=(0,s.reactive)({actions:{},assets:{},elements:{},slides:{},modules:{}});return ui.open({header:{value:"Импорт",handler:()=>{ui.close()}},content:{component:"Importer",props:{project:t},events:{options:e=>{o=e.merge},changelist:e=>{Object.keys(e).forEach(t=>{n[t]=e[t]})}}},footer:{buttons:[{label:"Импорт",class:"secondary",handler:async()=>{const e=`project${Date.now()}`;await Wo.Init(e,["project","assets","elements","slides","actions","modules"],"uid"),await Wo.addItems("actions",t.actions),await Wo.addItems("assets",t.assets),await Wo.addItems("elements",t.elements),await Wo.addItems("slides",t.slides),await Wo.addItems("modules",t.modules),await Wo.addItems("project",t.project);const o=new URL(window.location.href);o.searchParams.set("project",e),window.location.href=o.toString(),ui.close()}},{label:"Отмена",class:"primary",handler:async()=>{ui.close()}}]}}),t}catch(e){throw console.error("Ошибка:",e.message),e}},load:async function(){},player:null,list:[]}),Xd=Yd,Jd=(0,s.reactive)({uid:"",selected:null,slide:{},select(e){if(e?.getTypes&&(console.log(e),console.log(e.getTypes())),Jd.selected=e,!Jd.selected)return Ft.Select(null),void(Jd.uid=null);Jd.uid=Jd.selected.uid,e.isObject3D&&Ft.Select(Jd.selected)}}),Qd=Jd,Zd=ao.default||ao,ep=new class{#e=null;get handle(){return this.#e}async requestAccess(){this.#e=await window.showDirectoryPicker({mode:"readwrite"}),await Wo.upsertItemProperties("project","storage",{handle:this.#e})}updateHandle(e){this.#e=e}async writeFile(e,t){this.#t();const o=await this.#e.getFileHandle(e,{create:!0}),n=await o.createWritable();await n.write(t),await n.close()}async readFile(e){this.#t();const t=await this.#e.getFileHandle(e),o=await t.getFile();return await o.text()}async listFiles(){this.#t();const e=[];for await(const[t,o]of this.#e.entries())"file"===o.kind&&e.push(t);return e}#t(){if(!this.#e)throw new Error("Folder access not granted")}};let tp;const op=(0,s.reactive)({getHandle:()=>ep.handle,init:async function(){const e=await Wo.getItem("project","storage");if(e)ep.updateHandle(e.handle);else{const e=(0,s.reactive)({title:"Укажите папку для хранения моделей",text:"",answer:"",template:""}),t=(0,s.reactive)({label:"ОК",class:"primary",callback:async e=>{await ep.requestAccess(),tp&&tp()}});Zd.modal.confirmReq(e,[t])}},requestAccess:ep.requestAccess.bind(ep),writeFile:ep.writeFile.bind(ep),readFile:ep.readFile.bind(ep),listFiles:ep.listFiles.bind(ep),access:()=>new Promise(e=>{tp=e})}),np={class:"itemElement"},ap={class:"itemrow"},sp={class:"itemrow"},rp={class:"itemrow"},lp={props:{item:{type:Object}}},ip=(0,x.A)(lp,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",np,[(0,s.createElementVNode)("div",ap,(0,s.toDisplayString)(o.item.title),1),(0,s.createElementVNode)("div",sp,(0,s.toDisplayString)(o.item.price),1),(0,s.createElementVNode)("div",rp,(0,s.toDisplayString)(o.item.autor?.name),1)])}]]),cp={class:"product-card"},dp={class:"product-title"},pp={key:0,class:"card-section"},up={class:"card-value"},mp={class:"card-section"},hp={class:"card-image"},fp=["src","alt"],vp={class:"card-section"},gp={key:0,class:"carousel"},yp={class:"carousel-container"},bp=["src","onClick","alt"],kp={class:"card-section"},Ep={class:"card-value"},wp=["href"],_p={key:1,class:"card-section"},Np={class:"card-value"},Sp=(0,s.defineComponent)({name:"ProductCard",props:{selected:{type:Object,required:!0,validator:e=>!0}},computed:{data(){return this.selected}},data:()=>({img:0}),setup:e=>({formattedPrice:(0,s.computed)(()=>void 0===e.selected.price||null===e.selected.price?"Цена не указана":new Intl.NumberFormat("ru-RU",{style:"currency",currency:"RUB"}).format(e.selected.price))}),methods:{onImageClick(e){this.img=e}}}),Vp=(0,x.A)(Sp,[["render",function(e,t,o,n,a,r){return(0,s.openBlock)(),(0,s.createElementBlock)("div",cp,[(0,s.createCommentVNode)(" Заголовок "),(0,s.createElementVNode)("h2",dp,(0,s.toDisplayString)(e.data.title),1),e.data.description?((0,s.openBlock)(),(0,s.createElementBlock)("div",pp,[(0,s.createElementVNode)("span",up,(0,s.toDisplayString)(e.data.description),1)])):(0,s.createCommentVNode)("v-if",!0),(0,s.createCommentVNode)(" Основное изображение "),(0,s.createElementVNode)("div",mp,[(0,s.createElementVNode)("div",hp,[e.data.images&&e.data.images.length?((0,s.openBlock)(),(0,s.createElementBlock)("img",{key:0,src:e.data.images[e.img],alt:e.data.title,class:"image-preview"},null,8,fp)):(0,s.createCommentVNode)("v-if",!0)])]),(0,s.createCommentVNode)(" Карусель изображений "),(0,s.createElementVNode)("div",vp,[e.data.images&&e.data.images.length?((0,s.openBlock)(),(0,s.createElementBlock)("div",gp,[(0,s.createElementVNode)("div",yp,[((0,s.openBlock)(!0),(0,s.createElementBlock)(s.Fragment,null,(0,s.renderList)(e.data.images,(t,o)=>((0,s.openBlock)(),(0,s.createElementBlock)("div",{key:o,class:"carousel-item"},[(0,s.createElementVNode)("img",{src:t,onClick:t=>e.onImageClick(o),alt:`${e.data.title} - изображение ${o+1}`,class:"carousel-image"},null,8,bp)]))),128))])])):(0,s.createCommentVNode)("v-if",!0)]),(0,s.createElementVNode)("div",kp,[t[0]||(t[0]=(0,s.createElementVNode)("span",{class:"card-label"},null,-1)),(0,s.createElementVNode)("span",Ep,[(0,s.createElementVNode)("a",{href:"../player?src=url&url="+e.data.url,target:"_blank"},"Preview",8,wp)])]),(0,s.createCommentVNode)(" Цена "),(0,s.createCommentVNode)(' <div class="card-section">\r\n            <span class="card-label">Price:</span>\r\n            <span class="card-value">{{ formattedPrice }}</span>\r\n        </div> '),(0,s.createCommentVNode)(" Автор "),e.data.autor?((0,s.openBlock)(),(0,s.createElementBlock)("div",_p,[t[1]||(t[1]=(0,s.createElementVNode)("span",{class:"card-label"},"Autor:",-1)),(0,s.createElementVNode)("span",Np,(0,s.toDisplayString)(e.data.autor.name),1)])):(0,s.createCommentVNode)("v-if",!0)])}],["__scopeId","data-v-73ea6e84"]]),Cp=ao.default||ao,xp=[];const Bp=(0,s.reactive)({init:async function(){},preview:async function(e,t,o=0,n=100){},load:async function(e){}});Cp.On("init",()=>{window.vue.component("TemplateItem",ip),window.vue.component("TemplateView",Vp),Cp.menu.addMenu("app",{path:"app.list.libraries",icon:"",text:"Libraries",link:"#",children:[{path:"app.list.libraries.templates",icon:"codepen",text:"Templates",handler:async()=>{!async function(){await async function(){const[e,t]=await Promise.all([fetch("https://s3.eu-west-1.amazonaws.com/3dbuilder.reneos.com/templates/index.json",{headers:{"Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache",Expires:"0"},cache:"no-store"}).then(e=>e.json()),Cp.app.GetDB().getAllItems("templates")]);xp.length=0,xp.push(...e,...t)}();const e=(0,s.reactive)({selected:null,list:xp}),t={label:"Close",class:"secondary",handler:async()=>{e.selected=null,Cp.modal.close()}},o={label:"Create",class:"additional",handler:async()=>{const t=await fetch(e.selected.url,{headers:{"Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache",Expires:"0"},cache:"no-store"}),o=await t.json(),n=await Cp.projects.createProject(o);Cp.projects.goto(n)}},n=(0,s.reactive)([o,t]);Cp.modal.open({header:{value:"",handler:()=>{Cp.modal.close()}},content:{component:"ItemsLib",props:e,events:{selected:async t=>{e.selected=t},open:async()=>{}},slots:{item:{component:"TemplateItem"},edit:{component:"TemplateView",props:{data:e.selected},events:{"change:type":t=>{const o=Bp.library.find(e=>e.component===t);e.selected={...o.template,type:o.component,group:o.type,description:o.description}},edit:(t,o)=>{const n=t.split(".");let a=e.selected;for(let e=0;e<n.length-1;e++){const t=n[e];a[t]||(a[t]={}),a=a[t]}a[n[n.length-1]]=o,async function(){}(e.selected)}}}}},footer:{buttons:n}})}()}}]})});const $p=Bp,Ip=ao.default||ao,Dp={},Tp=(0,s.reactive)({elements:[],onElementMount(e){Dp[e.path]&&(Dp[e.path](e.element),delete Dp[e.path])},addElement(e,t){return console.log(e),new Promise((o,n)=>{if(!window.vue._context.components[e])return Ip.toasts.add({message:`Component "${e}" is not registered`}),void n(new Error(`Component "${e}" is not registered`));const a=(0,s.reactive)(t.data),r={component:e,data:a,events:t.events};this.elements.push(r),Dp[t.data.path]=e=>{r.element=e,o({data:a,element:e})}})},removeElement(e){const t=this.elements.findIndex(t=>t.element===e);t>=0&&this.elements.splice(t,1)}});Ip.On("init",()=>{Tp.elements.length=0});const Ap=Tp,Mp=document.createElement("div");let Op;Mp.className="tooltip",Mp.style.position="absolute",Mp.style.visibility="hidden",document.body.appendChild(Mp);const jp={beforeMount(e,t){const o=()=>{if(Op=e,Mp.textContent=t.value,!Mp.textContent||0===Mp.textContent.length)return;const o=e.getBoundingClientRect();let n=o.left+window.scrollX+o.width/2-Mp.offsetWidth/2,a=o.top+window.scrollY-Mp.offsetHeight-5;n+Mp.offsetWidth>window.innerWidth&&(n=window.innerWidth-Mp.offsetWidth-10),n<0&&(n=10),a+Mp.offsetHeight>window.innerHeight&&(a=o.top+window.scrollY+o.height+5),a<0&&(a=o.top+window.scrollY+o.height+5),Mp.style.left=`${n}px`,Mp.style.top=`${a}px`,Mp.style.visibility="visible"},n=()=>{Op===e&&(Mp.style.visibility="hidden")};e.__tooltipHandlers__={mouseEnterHandler:o,mouseLeaveHandler:n},e.addEventListener("mouseenter",o),e.addEventListener("mouseleave",n)},unmounted(e){const{mouseEnterHandler:t,mouseLeaveHandler:o}=e.__tooltipHandlers__||{};t&&e.removeEventListener("mouseenter",t),o&&e.removeEventListener("mouseleave",o),Op===e&&(Mp.style.visibility="hidden")}},Pp=ao.default||ao;console.log("production"),console.log=()=>{};const Rp=window.vue=(0,s.createApp)(Yo);Rp.use(e=>{e.config.globalProperties.$app=Pp.Init(a)}),Object.keys(n).forEach(e=>{Rp.component(e,n[e])}),Rp.provide("globalComponents",Rp._context.components),Rp.directive("tooltip",jp),Rp.mount("#app"),window.isEditor=!0},985:(e,t,o)=>{var n=o(196);const a=["script"];var s=o(615);function r(e){e.S&&!e.federation.hasAttachShareScopeMap&&e.federation.instance&&e.federation.instance.shareScopeMap&&(e.S=e.federation.instance.shareScopeMap,e.federation.hasAttachShareScopeMap=!0)}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},l.apply(this,arguments)}const i={runtime:n,instance:void 0,initOptions:void 0,bundlerRuntime:{remotes:function(e){const{chunkId:t,promises:o,chunkMapping:n,idToExternalAndNameMapping:l,webpackRequire:i,idToRemoteMap:c}=e;r(i),i.o(n,t)&&n[t].forEach(e=>{let t=i.R;t||(t=[]);const n=l[e],r=c[e];if(t.indexOf(n)>=0)return;if(t.push(n),n.p)return o.push(n.p);const d=t=>{t||(t=new Error("Container missing")),"string"==typeof t.message&&(t.message+=`\nwhile loading "${n[1]}" from ${n[2]}`),i.m[e]=()=>{throw t},n.p=0},p=(e,t,a,s,r,l)=>{try{const i=e(t,a);if(!i||!i.then)return r(i,s,l);{const e=i.then(e=>r(e,s),d);if(!l)return e;o.push(n.p=e)}}catch(e){d(e)}};var u=(e,o,a)=>p(o.get,n[1],t,0,m,a),m=t=>{n.p=1,i.m[e]=e=>{e.exports=t()}};1===r.length&&a.includes(r[0].externalType)&&r[0].name?p(()=>{try{const e=(0,s.e4)(r[0].name,s.yq)+n[1].slice(1),t=i.federation.instance,o=()=>i.federation.instance.loadRemote(e,{loadFactory:!1,from:"build"});return"version-first"===t.options.shareStrategy?Promise.all(t.sharedHandler.initializeSharing(n[0])).then(()=>o()):o()}catch(e){d(e)}},n[2],0,0,m,1):p(i,n[2],0,0,(e,t,o)=>e?p(i.I,n[0],0,e,u,o):d(),1)})},consumes:function(e){const{chunkId:t,promises:o,chunkMapping:n,installedModules:a,moduleToHandlerMapping:s,webpackRequire:l}=e;r(l),l.o(n,t)&&n[t].forEach(e=>{if(l.o(a,e))return o.push(a[e]);const t=t=>{a[e]=0,l.m[e]=o=>{var n;delete l.c[e];const a=t(),{shareInfo:r}=s[e];if((null==r||null==(n=r.shareConfig)?void 0:n.layer)&&a&&"object"==typeof a)try{a.hasOwnProperty("layer")&&void 0!==a.layer||(a.layer=r.shareConfig.layer)}catch(e){}o.exports=a}},n=t=>{delete a[e],l.m[e]=o=>{throw delete l.c[e],t}};try{const r=l.federation.instance;if(!r)throw new Error("Federation instance not found!");const{shareKey:i,getter:c,shareInfo:d}=s[e],p=r.loadShare(i,{customShareInfo:d}).then(e=>!1===e?c():e);p.then?o.push(a[e]=p.then(t).catch(n)):t(p)}catch(e){n(e)}})},I:function({shareScopeName:e,webpackRequire:t,initPromises:o,initTokens:n,initScope:s}){const l=Array.isArray(e)?e:[e];var i=[];return l.forEach(l=>{i.push(function(l){s||(s=[]);const i=t.federation.instance;var c=n[l];if(c||(c=n[l]={from:i.name}),s.indexOf(c)>=0)return;s.push(c);const d=o[l];if(d)return d;var p=o=>{var n=e=>{return t="Initialization of sharing external failed: "+e,"undefined"!=typeof console&&console.warn&&console.warn(t);var t};try{var a=t(o);if(!a)return;var r=o=>o&&o.init&&o.init(t.S[l],s,{shareScopeMap:t.S||{},shareScopeKeys:e});if(a.then)return u.push(a.then(r,n));var i=r(a);if(i&&"boolean"!=typeof i&&i.then)return u.push(i.catch(n))}catch(e){n(e)}};const u=i.initializeSharing(l,{strategy:i.options.shareStrategy,initScope:s,from:"build"});r(t);const m=t.federation.bundlerRuntimeOptions.remotes;return m&&Object.keys(m.idToRemoteMap).forEach(e=>{const t=m.idToRemoteMap[e],o=m.idToExternalAndNameMapping[e][2];if(t.length>1)p(o);else if(1===t.length){const e=t[0];a.includes(e.externalType)||p(o)}}),u.length?o[l]=Promise.all(u).then(()=>o[l]=!0):o[l]=!0}(l))}),Promise.all(i).then(()=>!0)},S:{},installInitialConsumes:function(e){const{moduleToHandlerMapping:t,webpackRequire:o,installedModules:n,initialConsumes:a}=e;a.forEach(e=>{o.m[e]=a=>{var s;n[e]=0,delete o.c[e];const r=function(e){const{moduleId:t,moduleToHandlerMapping:o,webpackRequire:n}=e,a=n.federation.instance;if(!a)throw new Error("Federation instance not found!");const{shareKey:s,shareInfo:r}=o[t];try{return a.loadShareSync(s,{customShareInfo:r})}catch(e){throw console.error('loadShareSync failed! The function should not be called unless you set "eager:true". If you do not set it, and encounter this issue, you can check whether an async boundary is implemented.'),console.error("The original error message is as follows: "),e}}({moduleId:e,moduleToHandlerMapping:t,webpackRequire:o});if("function"!=typeof r)throw new Error(`Shared module is not available for eager consumption: ${e}`);const l=r(),{shareInfo:i}=t[e];if((null==i||null==(s=i.shareConfig)?void 0:s.layer)&&l&&"object"==typeof l)try{l.hasOwnProperty("layer")&&void 0!==l.layer||(l.layer=i.shareConfig.layer)}catch(e){}a.exports=l}})},initContainerEntry:function(e){const{webpackRequire:t,shareScope:o,initScope:n,shareScopeKey:a,remoteEntryInitOptions:s}=e;if(!t.S)return;if(!t.federation||!t.federation.instance||!t.federation.initOptions)return;const r=t.federation.instance;r.initOptions(l({name:t.federation.initOptions.name,remotes:[]},s));const i=null==s?void 0:s.shareScopeKeys,c=null==s?void 0:s.shareScopeMap;if(a&&"string"!=typeof a)a.forEach(e=>{if(!i||!c)return void r.initShareScopeMap(e,o,{hostShareScopeMap:(null==s?void 0:s.shareScopeMap)||{}});c[e]||(c[e]={});const t=c[e];r.initShareScopeMap(e,t,{hostShareScopeMap:(null==s?void 0:s.shareScopeMap)||{}})});else{const e=a||"default";Array.isArray(i)?i.forEach(e=>{c[e]||(c[e]={});const t=c[e];r.initShareScopeMap(e,t,{hostShareScopeMap:(null==s?void 0:s.shareScopeMap)||{}})}):r.initShareScopeMap(e,o,{hostShareScopeMap:(null==s?void 0:s.shareScopeMap)||{}})}return t.federation.attachShareScopeMap&&t.federation.attachShareScopeMap(t),"function"==typeof t.federation.prefetch&&t.federation.prefetch(),Array.isArray(a)?Boolean(t.federation.initOptions.shared)?t.I(a,n):Promise.all(a.map(e=>t.I(e,n))).then(()=>!0):t.I(a||"default",n)}},attachShareScopeMap:r,bundlerRuntimeOptions:{}};if(!o.federation.runtime){var c=o.federation;for(var d in o.federation={},i)o.federation[d]=i[d];for(var d in c)o.federation[d]=c[d]}o.federation.instance||(o.federation.instance=o.federation.runtime.init(o.federation.initOptions),o.federation.attachShareScopeMap&&o.federation.attachShareScopeMap(o),o.federation.installInitialConsumes&&o.federation.installInitialConsumes(),!o.federation.isMFRemote&&o.federation.prefetch&&o.federation.prefetch())}},__webpack_module_cache__={},deferred,inProgress,dataWebpackPrefix,prevStartup,hasRun;function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var o=__webpack_module_cache__[e]={exports:{}},n={id:e,module:o,factory:__webpack_modules__[e],require:__webpack_require__};return __webpack_require__.i.forEach(function(e){e(n)}),o=n.module,n.factory.call(o.exports,o,o.exports,n.require),o.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.c=__webpack_module_cache__,__webpack_require__.i=[],__webpack_require__.x=e=>{},__webpack_require__.federation||(__webpack_require__.federation={initOptions:{name:"slider.editor",remotes:[],shareStrategy:"version-first"},chunkMatcher:function(e){return 375!=e},rootOutputDir:"",initialConsumes:void 0,bundlerRuntimeOptions:{}}),deferred=[],__webpack_require__.O=(e,t,o,n)=>{if(!t){var a=1/0;for(i=0;i<deferred.length;i++){for(var[t,o,n]=deferred[i],s=!0,r=0;r<t.length;r++)(!1&n||a>=n)&&Object.keys(__webpack_require__.O).every(e=>__webpack_require__.O[e](t[r]))?t.splice(r--,1):(s=!1,n<a&&(a=n));if(s){deferred.splice(i--,1);var l=o();void 0!==l&&(e=l)}}return e}n=n||0;for(var i=deferred.length;i>0&&deferred[i-1][2]>n;i--)deferred[i]=deferred[i-1];deferred[i]=[t,o,n]},__webpack_require__.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(t,{a:t}),t},__webpack_require__.d=(e,t)=>{for(var o in t)__webpack_require__.o(t,o)&&!__webpack_require__.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},__webpack_require__.f={},__webpack_require__.e=e=>Promise.all(Object.keys(__webpack_require__.f).reduce((t,o)=>(__webpack_require__.f[o](e,t),t),[])),__webpack_require__.u=e=>e+"."+{232:"cefdedcc",833:"96a419fe",920:"a25c4fc3"}[e]+".chunk.js",__webpack_require__.miniCssF=e=>e+".css",__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),inProgress={},dataWebpackPrefix="@reneos/slider.editor:",__webpack_require__.l=(e,t,o,n)=>{if(inProgress[e])inProgress[e].push(t);else{var a,s;if(void 0!==o)for(var r=document.getElementsByTagName("script"),l=0;l<r.length;l++){var i=r[l];if(i.getAttribute("src")==e||i.getAttribute("data-webpack")==dataWebpackPrefix+o){a=i;break}}a||(s=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,__webpack_require__.nc&&a.setAttribute("nonce",__webpack_require__.nc),a.setAttribute("data-webpack",dataWebpackPrefix+o),a.src=e),inProgress[e]=[t];var c=(t,o)=>{a.onerror=a.onload=null,clearTimeout(d);var n=inProgress[e];if(delete inProgress[e],a.parentNode&&a.parentNode.removeChild(a),n&&n.forEach(e=>e(o)),t)return t(o)},d=setTimeout(c.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=c.bind(null,a.onerror),a.onload=c.bind(null,a.onload),s&&document.head.appendChild(a)}},__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{__webpack_require__.S={};var e={},t={};__webpack_require__.I=(o,n)=>{n||(n=[]);var a=t[o];if(a||(a=t[o]={}),!(n.indexOf(a)>=0)){if(n.push(a),e[o])return e[o];__webpack_require__.o(__webpack_require__.S,o)||(__webpack_require__.S[o]={});var s=__webpack_require__.S[o],r="@reneos/slider.editor",l=(e,t,o,n)=>{var a=s[e]=s[e]||{},l=a[t];(!l||!l.loaded&&(!n!=!l.eager?n:r>l.from))&&(a[t]={get:o,from:r,eager:!!n})},i=[];return"default"===o&&(l("@reneos/app","1.0.6",()=>()=>__webpack_require__(302),1),l("three","0.180.0",()=>()=>__webpack_require__(815),1),l("vue","3.5.21",()=>()=>__webpack_require__(31),1)),e[o]=i.length?Promise.all(i).then(()=>e[o]=1):1}}})(),(()=>{__webpack_require__.federation.initOptions.shared={"@reneos/app":[{version:"1.0.6",get:()=>()=>__webpack_require__(302),scope:["default"],shareConfig:{eager:!0,requiredVersion:"1.0.6",singleton:!0,layer:null}}],three:[{version:"0.180.0",get:()=>()=>__webpack_require__(815),scope:["default"],shareConfig:{eager:!0,singleton:!0,layer:null}}],vue:[{version:"3.5.21",get:()=>()=>__webpack_require__(31),scope:["default"],shareConfig:{eager:!0,singleton:!0,layer:null}}]},__webpack_require__.S={};var e={},t={};__webpack_require__.I=(o,n)=>__webpack_require__.federation.bundlerRuntime.I({shareScopeName:o,webpackRequire:__webpack_require__,initPromises:e,initTokens:t,initScope:n})})(),__webpack_require__.p="/editor/",(()=>{var e={},t={15:{getter:()=>()=>__webpack_require__(31),shareInfo:{shareConfig:{fixedDependencies:!1,requiredVersion:"",strictVersion:!1,singleton:!0,eager:!0},scope:["default"]},shareKey:"vue"},875:{getter:()=>()=>__webpack_require__(815),shareInfo:{shareConfig:{fixedDependencies:!1,requiredVersion:"",strictVersion:!1,singleton:!0,eager:!0},scope:["default"]},shareKey:"three"},117:{getter:()=>()=>__webpack_require__(815),shareInfo:{shareConfig:{fixedDependencies:!1,requiredVersion:!1,strictVersion:!1,singleton:!0,eager:!0},scope:["default"]},shareKey:"three"},320:{getter:()=>()=>__webpack_require__(302),shareInfo:{shareConfig:{fixedDependencies:!1,requiredVersion:"1.0.6",strictVersion:!1,singleton:!0,eager:!0},scope:["default"]},shareKey:"@reneos/app"}},o=[15,875,117,320];__webpack_require__.federation.installInitialConsumes=()=>__webpack_require__.federation.bundlerRuntime.installInitialConsumes({initialConsumes:o,installedModules:e,moduleToHandlerMapping:t,webpackRequire:__webpack_require__});var n={792:[15,875,117,320]};__webpack_require__.f.consumes=(o,a)=>{__webpack_require__.federation.bundlerRuntime.consumes({chunkMapping:n,installedModules:e,chunkId:o,moduleToHandlerMapping:t,promises:a,webpackRequire:__webpack_require__})}})(),(()=>{if("undefined"!=typeof document){var e={792:0};__webpack_require__.f.miniCss=(t,o)=>{e[t]?o.push(e[t]):0!==e[t]&&{232:1,833:1,920:1}[t]&&o.push(e[t]=(e=>new Promise((t,o)=>{var n=__webpack_require__.miniCssF(e),a=__webpack_require__.p+n;if(((e,t)=>{for(var o=document.getElementsByTagName("link"),n=0;n<o.length;n++){var a=(r=o[n]).getAttribute("data-href")||r.getAttribute("href");if("stylesheet"===r.rel&&(a===e||a===t))return r}var s=document.getElementsByTagName("style");for(n=0;n<s.length;n++){var r;if((a=(r=s[n]).getAttribute("data-href"))===e||a===t)return r}})(n,a))return t();((e,t,o,n,a)=>{var s=document.createElement("link");s.rel="stylesheet",s.type="text/css",__webpack_require__.nc&&(s.nonce=__webpack_require__.nc),s.onerror=s.onload=o=>{if(s.onerror=s.onload=null,"load"===o.type)n();else{var r=o&&o.type,l=o&&o.target&&o.target.href||t,i=new Error("Loading CSS chunk "+e+" failed.\n("+r+": "+l+")");i.name="ChunkLoadError",i.code="CSS_CHUNK_LOAD_FAILED",i.type=r,i.request=l,s.parentNode&&s.parentNode.removeChild(s),a(i)}},s.href=t,document.head.appendChild(s)})(e,a,0,t,o)}))(t).then(()=>{e[t]=0},o=>{throw delete e[t],o}))}}})(),prevStartup=__webpack_require__.x,hasRun=!1,__webpack_require__.x=()=>{if(hasRun||(hasRun=!0,__webpack_require__(985)),"function"==typeof prevStartup)return prevStartup();console.warn("[Module Federation] prevStartup is not a function, skipping startup execution")},(()=>{var e={792:0,375:0};__webpack_require__.f.j=(t,o)=>{var n=__webpack_require__.o(e,t)?e[t]:void 0;if(0!==n)if(n)o.push(n[2]);else if(375!=t){var a=new Promise((o,a)=>n=e[t]=[o,a]);o.push(n[2]=a);var s=__webpack_require__.p+__webpack_require__.u(t),r=new Error;__webpack_require__.l(s,o=>{if(__webpack_require__.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var a=o&&("load"===o.type?"missing":o.type),s=o&&o.target&&o.target.src;r.message="Loading chunk "+t+" failed.\n("+a+": "+s+")",r.name="ChunkLoadError",r.type=a,r.request=s,n[1](r)}},"chunk-"+t,t)}else e[t]=0},__webpack_require__.O.j=t=>0===e[t];var t=(t,o)=>{var n,a,[s,r,l]=o,i=0;if(s.some(t=>0!==e[t])){for(n in r)__webpack_require__.o(r,n)&&(__webpack_require__.m[n]=r[n]);if(l)var c=l(__webpack_require__)}for(t&&t(o);i<s.length;i++)a=s[i],__webpack_require__.o(e,a)&&e[a]&&e[a][0](),e[a]=0;return __webpack_require__.O(c)},o=self.webpackChunk_reneos_slider_editor=self.webpackChunk_reneos_slider_editor||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))})(),__webpack_require__.x();var __webpack_exports__=__webpack_require__.O(void 0,[375,489,776],()=>__webpack_require__(831));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";
(self["webpackChunk_reneos_slider_mods_charts"] = self["webpackChunk_reneos_slider_mods_charts"] || []).push([["node_modules_reneos_app_index_js"],{

/***/ "./node_modules/@reneos/app/index.js":
/*!*******************************************!*\
  !*** ./node_modules/@reneos/app/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const _data = {}

const _events = {}

const _subs = (event, once, handler) => {
	if (_events[event] == null)
		_events[event] = [];
	_events[event].push({ handler, once });
}

class App{

	static Add(obj) {
		for (const [key, value] of Object.entries(obj)) {
			_data[key] = value;
			App.Emit('add', key, value);
		}
	}

	static Remove(key) {
		if (!_data[key])
			return
		const data = _data[key]
		delete _data[key]
		App.Emit("remove", key, data)
	}

	static Init(models) {
		if (models)
			App.Add(models)
		App.Emit("init")
		return _proxy
	}

	static On(event, handler) {
		_subs(event, false, handler);
	}
	static Once(event, handler) {
		_subs(event, true, handler);
	}
	static Off(event, handler) {
		const evt = _events[event];
		if (!evt)
			return;
		const l = evt.length;
		for (let i = l - 1; i >= 0; i--) {
			if (evt[i].handler === handler)
				evt.splice(i, 1);
		}
		if (evt.length === 0)
			delete _events[event];
	}
	static async Emit(event, ...args) {
		const evs = _events[event];
		if (evs == null) return;
		const proms = []
		const l = evs.length;
		for (let i = l - 1; i >= 0; i--) {
			const ev = evs[i];
			proms.push(ev.handler.apply(null, args))
			if (!ev.once)
				continue;
			evs.splice(i, 1);
		}
		await Promise.allSettled(proms)
	}
}

const _proxy = new Proxy(App, {
	get(target, prop) {
		if (prop in target)
			return target[prop]
		return _data[prop]
	}
})
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_proxy);

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX3JlbmVvc19hcHBfaW5kZXhfanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGVBQWU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsUUFBUTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFFBQVE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsaUVBQWUsTSIsInNvdXJjZXMiOlsid2VicGFjazovL0ByZW5lb3Mvc2xpZGVyLm1vZHMuY2hhcnRzLy4vbm9kZV9tb2R1bGVzL0ByZW5lb3MvYXBwL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IF9kYXRhID0ge31cclxuXHJcbmNvbnN0IF9ldmVudHMgPSB7fVxyXG5cclxuY29uc3QgX3N1YnMgPSAoZXZlbnQsIG9uY2UsIGhhbmRsZXIpID0+IHtcclxuXHRpZiAoX2V2ZW50c1tldmVudF0gPT0gbnVsbClcclxuXHRcdF9ldmVudHNbZXZlbnRdID0gW107XHJcblx0X2V2ZW50c1tldmVudF0ucHVzaCh7IGhhbmRsZXIsIG9uY2UgfSk7XHJcbn1cclxuXHJcbmNsYXNzIEFwcHtcclxuXHJcblx0c3RhdGljIEFkZChvYmopIHtcclxuXHRcdGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG9iaikpIHtcclxuXHRcdFx0X2RhdGFba2V5XSA9IHZhbHVlO1xyXG5cdFx0XHRBcHAuRW1pdCgnYWRkJywga2V5LCB2YWx1ZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgUmVtb3ZlKGtleSkge1xyXG5cdFx0aWYgKCFfZGF0YVtrZXldKVxyXG5cdFx0XHRyZXR1cm5cclxuXHRcdGNvbnN0IGRhdGEgPSBfZGF0YVtrZXldXHJcblx0XHRkZWxldGUgX2RhdGFba2V5XVxyXG5cdFx0QXBwLkVtaXQoXCJyZW1vdmVcIiwga2V5LCBkYXRhKVxyXG5cdH1cclxuXHJcblx0c3RhdGljIEluaXQobW9kZWxzKSB7XHJcblx0XHRpZiAobW9kZWxzKVxyXG5cdFx0XHRBcHAuQWRkKG1vZGVscylcclxuXHRcdEFwcC5FbWl0KFwiaW5pdFwiKVxyXG5cdFx0cmV0dXJuIF9wcm94eVxyXG5cdH1cclxuXHJcblx0c3RhdGljIE9uKGV2ZW50LCBoYW5kbGVyKSB7XHJcblx0XHRfc3VicyhldmVudCwgZmFsc2UsIGhhbmRsZXIpO1xyXG5cdH1cclxuXHRzdGF0aWMgT25jZShldmVudCwgaGFuZGxlcikge1xyXG5cdFx0X3N1YnMoZXZlbnQsIHRydWUsIGhhbmRsZXIpO1xyXG5cdH1cclxuXHRzdGF0aWMgT2ZmKGV2ZW50LCBoYW5kbGVyKSB7XHJcblx0XHRjb25zdCBldnQgPSBfZXZlbnRzW2V2ZW50XTtcclxuXHRcdGlmICghZXZ0KVxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHRjb25zdCBsID0gZXZ0Lmxlbmd0aDtcclxuXHRcdGZvciAobGV0IGkgPSBsIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuXHRcdFx0aWYgKGV2dFtpXS5oYW5kbGVyID09PSBoYW5kbGVyKVxyXG5cdFx0XHRcdGV2dC5zcGxpY2UoaSwgMSk7XHJcblx0XHR9XHJcblx0XHRpZiAoZXZ0Lmxlbmd0aCA9PT0gMClcclxuXHRcdFx0ZGVsZXRlIF9ldmVudHNbZXZlbnRdO1xyXG5cdH1cclxuXHRzdGF0aWMgYXN5bmMgRW1pdChldmVudCwgLi4uYXJncykge1xyXG5cdFx0Y29uc3QgZXZzID0gX2V2ZW50c1tldmVudF07XHJcblx0XHRpZiAoZXZzID09IG51bGwpIHJldHVybjtcclxuXHRcdGNvbnN0IHByb21zID0gW11cclxuXHRcdGNvbnN0IGwgPSBldnMubGVuZ3RoO1xyXG5cdFx0Zm9yIChsZXQgaSA9IGwgLSAxOyBpID49IDA7IGktLSkge1xyXG5cdFx0XHRjb25zdCBldiA9IGV2c1tpXTtcclxuXHRcdFx0cHJvbXMucHVzaChldi5oYW5kbGVyLmFwcGx5KG51bGwsIGFyZ3MpKVxyXG5cdFx0XHRpZiAoIWV2Lm9uY2UpXHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdGV2cy5zcGxpY2UoaSwgMSk7XHJcblx0XHR9XHJcblx0XHRhd2FpdCBQcm9taXNlLmFsbFNldHRsZWQocHJvbXMpXHJcblx0fVxyXG59XHJcblxyXG5jb25zdCBfcHJveHkgPSBuZXcgUHJveHkoQXBwLCB7XHJcblx0Z2V0KHRhcmdldCwgcHJvcCkge1xyXG5cdFx0aWYgKHByb3AgaW4gdGFyZ2V0KVxyXG5cdFx0XHRyZXR1cm4gdGFyZ2V0W3Byb3BdXHJcblx0XHRyZXR1cm4gX2RhdGFbcHJvcF1cclxuXHR9XHJcbn0pXHJcbmV4cG9ydCBkZWZhdWx0IF9wcm94eSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
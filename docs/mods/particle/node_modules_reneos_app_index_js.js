"use strict";
(self["webpackChunk_reneos_slider_mods_particle"] = self["webpackChunk_reneos_slider_mods_particle"] || []).push([["node_modules_reneos_app_index_js"],{

/***/ "./node_modules/@reneos/app/index.js":
/*!*******************************************!*\
  !*** ./node_modules/@reneos/app/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const _data = {}

const _events = {}

const _subs = (event, once, handler) => {
	if (_events[event] == null)
		_events[event] = [];
	_events[event].push({ handler, once });
}

class App{

	static Add(obj) {
		for (const [key, value] of Object.entries(obj)) {
			_data[key] = value;
			App.Emit('add', key, value);
		}
	}

	static Remove(key) {
		if (!_data[key])
			return
		const data = _data[key]
		delete _data[key]
		App.Emit("remove", key, data)
	}

	static Init(models) {
		if (models)
			App.Add(models)
		App.Emit("init")
		return _proxy
	}

	static On(event, handler) {
		_subs(event, false, handler);
	}
	static Once(event, handler) {
		_subs(event, true, handler);
	}
	static Off(event, handler) {
		const evt = _events[event];
		if (!evt)
			return;
		const l = evt.length;
		for (let i = l - 1; i >= 0; i--) {
			if (evt[i].handler === handler)
				evt.splice(i, 1);
		}
		if (evt.length === 0)
			delete _events[event];
	}
	static async Emit(event, ...args) {
		const evs = _events[event];
		if (evs == null) return;
		const proms = []
		const l = evs.length;
		for (let i = l - 1; i >= 0; i--) {
			const ev = evs[i];
			proms.push(ev.handler.apply(null, args))
			if (!ev.once)
				continue;
			evs.splice(i, 1);
		}
		await Promise.allSettled(proms)
	}
}

const _proxy = new Proxy(App, {
	get(target, prop) {
		if (prop in target)
			return target[prop]
		return _data[prop]
	}
})
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_proxy);

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX3JlbmVvc19hcHBfaW5kZXhfanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGVBQWU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsUUFBUTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFFBQVE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsaUVBQWUsTSIsInNvdXJjZXMiOlsid2VicGFjazovL0ByZW5lb3Mvc2xpZGVyLm1vZHMucGFydGljbGUvLi9ub2RlX21vZHVsZXMvQHJlbmVvcy9hcHAvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgX2RhdGEgPSB7fVxyXG5cclxuY29uc3QgX2V2ZW50cyA9IHt9XHJcblxyXG5jb25zdCBfc3VicyA9IChldmVudCwgb25jZSwgaGFuZGxlcikgPT4ge1xyXG5cdGlmIChfZXZlbnRzW2V2ZW50XSA9PSBudWxsKVxyXG5cdFx0X2V2ZW50c1tldmVudF0gPSBbXTtcclxuXHRfZXZlbnRzW2V2ZW50XS5wdXNoKHsgaGFuZGxlciwgb25jZSB9KTtcclxufVxyXG5cclxuY2xhc3MgQXBwe1xyXG5cclxuXHRzdGF0aWMgQWRkKG9iaikge1xyXG5cdFx0Zm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob2JqKSkge1xyXG5cdFx0XHRfZGF0YVtrZXldID0gdmFsdWU7XHJcblx0XHRcdEFwcC5FbWl0KCdhZGQnLCBrZXksIHZhbHVlKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBSZW1vdmUoa2V5KSB7XHJcblx0XHRpZiAoIV9kYXRhW2tleV0pXHJcblx0XHRcdHJldHVyblxyXG5cdFx0Y29uc3QgZGF0YSA9IF9kYXRhW2tleV1cclxuXHRcdGRlbGV0ZSBfZGF0YVtrZXldXHJcblx0XHRBcHAuRW1pdChcInJlbW92ZVwiLCBrZXksIGRhdGEpXHJcblx0fVxyXG5cclxuXHRzdGF0aWMgSW5pdChtb2RlbHMpIHtcclxuXHRcdGlmIChtb2RlbHMpXHJcblx0XHRcdEFwcC5BZGQobW9kZWxzKVxyXG5cdFx0QXBwLkVtaXQoXCJpbml0XCIpXHJcblx0XHRyZXR1cm4gX3Byb3h5XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgT24oZXZlbnQsIGhhbmRsZXIpIHtcclxuXHRcdF9zdWJzKGV2ZW50LCBmYWxzZSwgaGFuZGxlcik7XHJcblx0fVxyXG5cdHN0YXRpYyBPbmNlKGV2ZW50LCBoYW5kbGVyKSB7XHJcblx0XHRfc3VicyhldmVudCwgdHJ1ZSwgaGFuZGxlcik7XHJcblx0fVxyXG5cdHN0YXRpYyBPZmYoZXZlbnQsIGhhbmRsZXIpIHtcclxuXHRcdGNvbnN0IGV2dCA9IF9ldmVudHNbZXZlbnRdO1xyXG5cdFx0aWYgKCFldnQpXHJcblx0XHRcdHJldHVybjtcclxuXHRcdGNvbnN0IGwgPSBldnQubGVuZ3RoO1xyXG5cdFx0Zm9yIChsZXQgaSA9IGwgLSAxOyBpID49IDA7IGktLSkge1xyXG5cdFx0XHRpZiAoZXZ0W2ldLmhhbmRsZXIgPT09IGhhbmRsZXIpXHJcblx0XHRcdFx0ZXZ0LnNwbGljZShpLCAxKTtcclxuXHRcdH1cclxuXHRcdGlmIChldnQubGVuZ3RoID09PSAwKVxyXG5cdFx0XHRkZWxldGUgX2V2ZW50c1tldmVudF07XHJcblx0fVxyXG5cdHN0YXRpYyBhc3luYyBFbWl0KGV2ZW50LCAuLi5hcmdzKSB7XHJcblx0XHRjb25zdCBldnMgPSBfZXZlbnRzW2V2ZW50XTtcclxuXHRcdGlmIChldnMgPT0gbnVsbCkgcmV0dXJuO1xyXG5cdFx0Y29uc3QgcHJvbXMgPSBbXVxyXG5cdFx0Y29uc3QgbCA9IGV2cy5sZW5ndGg7XHJcblx0XHRmb3IgKGxldCBpID0gbCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcblx0XHRcdGNvbnN0IGV2ID0gZXZzW2ldO1xyXG5cdFx0XHRwcm9tcy5wdXNoKGV2LmhhbmRsZXIuYXBwbHkobnVsbCwgYXJncykpXHJcblx0XHRcdGlmICghZXYub25jZSlcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0ZXZzLnNwbGljZShpLCAxKTtcclxuXHRcdH1cclxuXHRcdGF3YWl0IFByb21pc2UuYWxsU2V0dGxlZChwcm9tcylcclxuXHR9XHJcbn1cclxuXHJcbmNvbnN0IF9wcm94eSA9IG5ldyBQcm94eShBcHAsIHtcclxuXHRnZXQodGFyZ2V0LCBwcm9wKSB7XHJcblx0XHRpZiAocHJvcCBpbiB0YXJnZXQpXHJcblx0XHRcdHJldHVybiB0YXJnZXRbcHJvcF1cclxuXHRcdHJldHVybiBfZGF0YVtwcm9wXVxyXG5cdH1cclxufSlcclxuZXhwb3J0IGRlZmF1bHQgX3Byb3h5Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9